%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:3.0.1
%% Purpose: encoder and decoder to the types in mod S1AP

-module('S1AP').
-compile(nowarn_unused_vars).
-include("S1AP.hrl").
-asn1_info([{vsn,'3.0.1'},
            {module,'S1AP'},
            {options,[{i,"/local/vlad/repos/mmesim/epc_proto/src"},
 warnings,ber,errors,
 {cwd,"/local/vlad/repos/mmesim/epc_proto"},
 {outdir,"/local/vlad/repos/mmesim/epc_proto/src"},
 per,verbose,asn1config,
 {i,"."},
 {i,"/local/vlad/repos/mmesim/epc_proto/protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_UnsuccessfulOutcome'/2,
'enc_SuccessfulOutcome'/2,
'enc_InitiatingMessage'/2,
'enc_S1AP-PDU'/2,
'enc_X2TNLConfigurationInfo'/2,
'enc_WarningMessageContents'/2,
'enc_WarningSecurityInfo'/2,
'enc_WarningType'/2,
'enc_WarningAreaList'/2,
'enc_UESecurityCapabilities'/2,
'enc_UERadioCapability'/2,
'enc_UEPagingID'/2,
'enc_UE-HistoryInformation'/2,
'enc_UEIdentityIndexValue'/2,
'enc_UE-associatedLogicalS1-ConnectionItem'/2,
'enc_UE-S1AP-ID-pair'/2,
'enc_UE-S1AP-IDs'/2,
'enc_UEAggregateMaximumBitrate'/2,
'enc_TypeOfError'/2,
'enc_E-UTRAN-Trace-ID'/2,
'enc_TraceDepth'/2,
'enc_TraceActivation'/2,
'enc_TransportLayerAddress'/2,
'enc_Time-UE-StayedInCell'/2,
'enc_TimeToWait'/2,
'enc_TargetBSS-ToSourceBSS-TransparentContainer'/2,
'enc_TargetRNC-ToSourceRNC-TransparentContainer'/2,
'enc_Target-ToSource-TransparentContainer'/2,
'enc_TargeteNB-ToSourceeNB-TransparentContainer'/2,
'enc_TargetRNC-ID'/2,
'enc_TargeteNB-ID'/2,
'enc_TargetID'/2,
'enc_TBCD-STRING'/2,
'enc_CompletedCellinTAI-Item'/2,
'enc_CompletedCellinTAI'/2,
'enc_TAI-Broadcast-Item'/2,
'enc_TAI-Broadcast'/2,
'enc_TAI'/2,
'enc_TAIListforWarning'/2,
'enc_TAC'/2,
'enc_S-TMSI'/2,
'enc_SupportedTAs-Item'/2,
'enc_SupportedTAs'/2,
'enc_SubscriberProfileIDforRFP'/2,
'enc_ServedPLMNs'/2,
'enc_ServedMMECs'/2,
'enc_ServedGroupIDs'/2,
'enc_ServedGUMMEIsItem'/2,
'enc_ServedGUMMEIs'/2,
'enc_SourceRNC-ToTargetRNC-TransparentContainer'/2,
'enc_SourceeNB-ToTargeteNB-TransparentContainer'/2,
'enc_SRVCCHOIndication'/2,
'enc_SRVCCOperationPossible'/2,
'enc_SourceeNB-ID'/2,
'enc_SourceBSS-ToTargetBSS-TransparentContainer'/2,
'enc_Source-ToTarget-TransparentContainer'/2,
'enc_SONConfigurationTransfer'/2,
'enc_SONInformationReply'/2,
'enc_SONInformationRequest'/2,
'enc_SONInformation'/2,
'enc_SerialNumber'/2,
'enc_SecurityContext'/2,
'enc_SecurityKey'/2,
'enc_RRC-Establishment-Cause'/2,
'enc_RRC-Container'/2,
'enc_RNC-ID'/2,
'enc_RepetitionPeriod'/2,
'enc_ReportArea'/2,
'enc_RIMRoutingAddress'/2,
'enc_RIMInformation'/2,
'enc_RIMTransfer'/2,
'enc_RequestType'/2,
'enc_RAC'/2,
'enc_RelativeMMECapacity'/2,
'enc_ReceiveStatusofULPDCPSDUs'/2,
'enc_QCI'/2,
'enc_PriorityLevel'/2,
'enc_Pre-emptionVulnerability'/2,
'enc_Pre-emptionCapability'/2,
'enc_PLMNidentity'/2,
'enc_PDCP-SN'/2,
'enc_PagingDRX'/2,
'enc_OverloadResponse'/2,
'enc_OverloadAction'/2,
'enc_OldBSS-ToNewBSS-Information'/2,
'enc_NumberofBroadcast'/2,
'enc_NumberofBroadcastRequest'/2,
'enc_NASSecurityParameterstoE-UTRAN'/2,
'enc_NASSecurityParametersfromE-UTRAN'/2,
'enc_NAS-PDU'/2,
'enc_MSClassmark3'/2,
'enc_MSClassmark2'/2,
'enc_M-TMSI'/2,
'enc_MME-UE-S1AP-ID'/2,
'enc_MME-Code'/2,
'enc_MME-Group-ID'/2,
'enc_MMEname'/2,
'enc_MessageIdentifier'/2,
'enc_L3-Information'/2,
'enc_LastVisitedGERANCellInformation'/2,
'enc_LastVisitedUTRANCellInformation'/2,
'enc_LastVisitedEUTRANCellInformation'/2,
'enc_LastVisitedCell-Item'/2,
'enc_LAI'/2,
'enc_LAC'/2,
'enc_InterfacesToTrace'/2,
'enc_IntegrityProtectionAlgorithms'/2,
'enc_IMSI'/2,
'enc_HFN'/2,
'enc_HandoverType'/2,
'enc_HandoverRestrictionList'/2,
'enc_GUMMEI'/2,
'enc_GTP-TEID'/2,
'enc_GBR-QosInformation'/2,
'enc_ForbiddenLACs'/2,
'enc_ForbiddenLAs-Item'/2,
'enc_ForbiddenLAs'/2,
'enc_ForbiddenTACs'/2,
'enc_ForbiddenTAs-Item'/2,
'enc_ForbiddenTAs'/2,
'enc_ForbiddenInterRATs'/2,
'enc_ExtendedRNC-ID'/2,
'enc_EUTRAN-CGI'/2,
'enc_E-RABLevelQoSParameters'/2,
'enc_E-RABItem'/2,
'enc_E-RABList'/2,
'enc_E-RABInformationListItem'/2,
'enc_E-RABInformationList'/2,
'enc_E-RAB-ID'/2,
'enc_EventType'/2,
'enc_EPLMNs'/2,
'enc_EncryptionAlgorithms'/2,
'enc_ENBX2TLAs'/2,
'enc_ENBname'/2,
'enc_ENB-UE-S1AP-ID'/2,
'enc_ENB-StatusTransfer-TransparentContainer'/2,
'enc_Global-ENB-ID'/2,
'enc_GERAN-Cell-ID'/2,
'enc_ENB-ID'/2,
'enc_CompletedCellinEAI-Item'/2,
'enc_CompletedCellinEAI'/2,
'enc_EmergencyAreaID-Broadcast-Item'/2,
'enc_EmergencyAreaID-Broadcast'/2,
'enc_EmergencyAreaID'/2,
'enc_EmergencyAreaIDList'/2,
'enc_ECGIList'/2,
'enc_Direct-Forwarding-Path-Availability'/2,
'enc_DL-Forwarding'/2,
'enc_DataCodingScheme'/2,
'enc_CriticalityDiagnostics-IE-Item'/2,
'enc_CriticalityDiagnostics-IE-List'/2,
'enc_CriticalityDiagnostics'/2,
'enc_COUNTvalue'/2,
'enc_CSG-IdList-Item'/2,
'enc_CSG-IdList'/2,
'enc_CSG-Id'/2,
'enc_CSFallbackIndicator'/2,
'enc_CNDomain'/2,
'enc_CI'/2,
'enc_CGI'/2,
'enc_CellType'/2,
'enc_Cell-Size'/2,
'enc_Cdma2000OneXRAND'/2,
'enc_Cdma2000OneXPilot'/2,
'enc_Cdma2000OneXMSI'/2,
'enc_Cdma2000OneXMEID'/2,
'enc_Cdma2000OneXSRVCCInfo'/2,
'enc_Cdma2000HORequiredIndication'/2,
'enc_Cdma2000HOStatus'/2,
'enc_Cdma2000SectorID'/2,
'enc_Cdma2000RATType'/2,
'enc_Cdma2000PDU'/2,
'enc_CellID-Broadcast-Item'/2,
'enc_CellID-Broadcast'/2,
'enc_CellIdentity'/2,
'enc_CauseNas'/2,
'enc_CauseTransport'/2,
'enc_CauseRadioNetwork'/2,
'enc_CauseProtocol'/2,
'enc_CauseMisc'/2,
'enc_Cause'/2,
'enc_BroadcastCompletedAreaList'/2,
'enc_BPLMNs'/2,
'enc_BitRate'/2,
'enc_Bearers-SubjectToStatusTransfer-Item'/2,
'enc_Bearers-SubjectToStatusTransferList'/2,
'enc_AllocationAndRetentionPriority'/2,
'enc_TriggeringMessage'/2,
'enc_ProtocolIE-ID'/2,
'enc_ProtocolExtensionID'/2,
'enc_ProcedureCode'/2,
'enc_PrivateIE-ID'/2,
'enc_Presence'/2,
'enc_Criticality'/2,
'enc_PrivateMessage'/2,
'enc_MMEConfigurationTransfer'/2,
'enc_ENBConfigurationTransfer'/2,
'enc_MMEDirectInformationTransfer'/2,
'enc_Inter-SystemInformationTransferType'/2,
'enc_ENBDirectInformationTransfer'/2,
'enc_WriteReplaceWarningResponse'/2,
'enc_WriteReplaceWarningRequest'/2,
'enc_OverloadStop'/2,
'enc_OverloadStart'/2,
'enc_LocationReport'/2,
'enc_LocationReportingFailureIndication'/2,
'enc_LocationReportingControl'/2,
'enc_CellTrafficTrace'/2,
'enc_DeactivateTrace'/2,
'enc_TraceFailureIndication'/2,
'enc_TraceStart'/2,
'enc_MMEStatusTransfer'/2,
'enc_ENBStatusTransfer'/2,
'enc_UECapabilityInfoIndication'/2,
'enc_UplinkS1cdma2000tunneling'/2,
'enc_DownlinkS1cdma2000tunneling'/2,
'enc_MMEConfigurationUpdateFailure'/2,
'enc_MMEConfigurationUpdateAcknowledge'/2,
'enc_MMEConfigurationUpdate'/2,
'enc_ENBConfigurationUpdateFailure'/2,
'enc_ENBConfigurationUpdateAcknowledge'/2,
'enc_ENBConfigurationUpdate'/2,
'enc_S1SetupFailure'/2,
'enc_S1SetupResponse'/2,
'enc_S1SetupRequest'/2,
'enc_ErrorIndication'/2,
'enc_UE-associatedLogicalS1-ConnectionListResAck'/2,
'enc_ResetAcknowledge'/2,
'enc_UE-associatedLogicalS1-ConnectionListRes'/2,
'enc_ResetAll'/2,
'enc_ResetType'/2,
'enc_Reset'/2,
'enc_NASNonDeliveryIndication'/2,
'enc_UplinkNASTransport'/2,
'enc_InitialUEMessage'/2,
'enc_DownlinkNASTransport'/2,
'enc_UEContextModificationFailure'/2,
'enc_UEContextModificationResponse'/2,
'enc_UEContextModificationRequest'/2,
'enc_UEContextReleaseComplete'/2,
'enc_UEContextReleaseCommand'/2,
'enc_UEContextReleaseRequest'/2,
'enc_TAIItem'/2,
'enc_TAIList'/2,
'enc_Paging'/2,
'enc_InitialContextSetupFailure'/2,
'enc_E-RABSetupItemCtxtSURes'/2,
'enc_E-RABSetupListCtxtSURes'/2,
'enc_InitialContextSetupResponse'/2,
'enc_E-RABToBeSetupItemCtxtSUReq'/2,
'enc_E-RABToBeSetupListCtxtSUReq'/2,
'enc_InitialContextSetupRequest'/2,
'enc_E-RABReleaseIndication'/2,
'enc_E-RABReleaseItemBearerRelComp'/2,
'enc_E-RABReleaseListBearerRelComp'/2,
'enc_E-RABReleaseResponse'/2,
'enc_E-RABReleaseCommand'/2,
'enc_E-RABModifyItemBearerModRes'/2,
'enc_E-RABModifyListBearerModRes'/2,
'enc_E-RABModifyResponse'/2,
'enc_E-RABToBeModifiedItemBearerModReq'/2,
'enc_E-RABToBeModifiedListBearerModReq'/2,
'enc_E-RABModifyRequest'/2,
'enc_E-RABSetupItemBearerSURes'/2,
'enc_E-RABSetupListBearerSURes'/2,
'enc_E-RABSetupResponse'/2,
'enc_E-RABToBeSetupItemBearerSUReq'/2,
'enc_E-RABToBeSetupListBearerSUReq'/2,
'enc_E-RABSetupRequest'/2,
'enc_HandoverCancelAcknowledge'/2,
'enc_HandoverCancel'/2,
'enc_PathSwitchRequestFailure'/2,
'enc_E-RABToBeSwitchedULItem'/2,
'enc_E-RABToBeSwitchedULList'/2,
'enc_PathSwitchRequestAcknowledge'/2,
'enc_E-RABToBeSwitchedDLItem'/2,
'enc_E-RABToBeSwitchedDLList'/2,
'enc_PathSwitchRequest'/2,
'enc_HandoverNotify'/2,
'enc_HandoverFailure'/2,
'enc_E-RABFailedToSetupItemHOReqAck'/2,
'enc_E-RABFailedtoSetupListHOReqAck'/2,
'enc_E-RABAdmittedItem'/2,
'enc_E-RABAdmittedList'/2,
'enc_HandoverRequestAcknowledge'/2,
'enc_E-RABToBeSetupItemHOReq'/2,
'enc_E-RABToBeSetupListHOReq'/2,
'enc_HandoverRequest'/2,
'enc_HandoverPreparationFailure'/2,
'enc_E-RABDataForwardingItem'/2,
'enc_E-RABSubjecttoDataForwardingList'/2,
'enc_HandoverCommand'/2,
'enc_HandoverRequired'/2
]).

-export([
'dec_UnsuccessfulOutcome'/2,
'dec_SuccessfulOutcome'/2,
'dec_InitiatingMessage'/2,
'dec_S1AP-PDU'/2,
'dec_X2TNLConfigurationInfo'/2,
'dec_WarningMessageContents'/2,
'dec_WarningSecurityInfo'/2,
'dec_WarningType'/2,
'dec_WarningAreaList'/2,
'dec_UESecurityCapabilities'/2,
'dec_UERadioCapability'/2,
'dec_UEPagingID'/2,
'dec_UE-HistoryInformation'/2,
'dec_UEIdentityIndexValue'/2,
'dec_UE-associatedLogicalS1-ConnectionItem'/2,
'dec_UE-S1AP-ID-pair'/2,
'dec_UE-S1AP-IDs'/2,
'dec_UEAggregateMaximumBitrate'/2,
'dec_TypeOfError'/2,
'dec_E-UTRAN-Trace-ID'/2,
'dec_TraceDepth'/2,
'dec_TraceActivation'/2,
'dec_TransportLayerAddress'/2,
'dec_Time-UE-StayedInCell'/2,
'dec_TimeToWait'/2,
'dec_TargetBSS-ToSourceBSS-TransparentContainer'/2,
'dec_TargetRNC-ToSourceRNC-TransparentContainer'/2,
'dec_Target-ToSource-TransparentContainer'/2,
'dec_TargeteNB-ToSourceeNB-TransparentContainer'/2,
'dec_TargetRNC-ID'/2,
'dec_TargeteNB-ID'/2,
'dec_TargetID'/2,
'dec_TBCD-STRING'/2,
'dec_CompletedCellinTAI-Item'/2,
'dec_CompletedCellinTAI'/2,
'dec_TAI-Broadcast-Item'/2,
'dec_TAI-Broadcast'/2,
'dec_TAI'/2,
'dec_TAIListforWarning'/2,
'dec_TAC'/2,
'dec_S-TMSI'/2,
'dec_SupportedTAs-Item'/2,
'dec_SupportedTAs'/2,
'dec_SubscriberProfileIDforRFP'/2,
'dec_ServedPLMNs'/2,
'dec_ServedMMECs'/2,
'dec_ServedGroupIDs'/2,
'dec_ServedGUMMEIsItem'/2,
'dec_ServedGUMMEIs'/2,
'dec_SourceRNC-ToTargetRNC-TransparentContainer'/2,
'dec_SourceeNB-ToTargeteNB-TransparentContainer'/2,
'dec_SRVCCHOIndication'/2,
'dec_SRVCCOperationPossible'/2,
'dec_SourceeNB-ID'/2,
'dec_SourceBSS-ToTargetBSS-TransparentContainer'/2,
'dec_Source-ToTarget-TransparentContainer'/2,
'dec_SONConfigurationTransfer'/2,
'dec_SONInformationReply'/2,
'dec_SONInformationRequest'/2,
'dec_SONInformation'/2,
'dec_SerialNumber'/2,
'dec_SecurityContext'/2,
'dec_SecurityKey'/2,
'dec_RRC-Establishment-Cause'/2,
'dec_RRC-Container'/2,
'dec_RNC-ID'/2,
'dec_RepetitionPeriod'/2,
'dec_ReportArea'/2,
'dec_RIMRoutingAddress'/2,
'dec_RIMInformation'/2,
'dec_RIMTransfer'/2,
'dec_RequestType'/2,
'dec_RAC'/2,
'dec_RelativeMMECapacity'/2,
'dec_ReceiveStatusofULPDCPSDUs'/2,
'dec_QCI'/2,
'dec_PriorityLevel'/2,
'dec_Pre-emptionVulnerability'/2,
'dec_Pre-emptionCapability'/2,
'dec_PLMNidentity'/2,
'dec_PDCP-SN'/2,
'dec_PagingDRX'/2,
'dec_OverloadResponse'/2,
'dec_OverloadAction'/2,
'dec_OldBSS-ToNewBSS-Information'/2,
'dec_NumberofBroadcast'/2,
'dec_NumberofBroadcastRequest'/2,
'dec_NASSecurityParameterstoE-UTRAN'/2,
'dec_NASSecurityParametersfromE-UTRAN'/2,
'dec_NAS-PDU'/2,
'dec_MSClassmark3'/2,
'dec_MSClassmark2'/2,
'dec_M-TMSI'/2,
'dec_MME-UE-S1AP-ID'/2,
'dec_MME-Code'/2,
'dec_MME-Group-ID'/2,
'dec_MMEname'/2,
'dec_MessageIdentifier'/2,
'dec_L3-Information'/2,
'dec_LastVisitedGERANCellInformation'/2,
'dec_LastVisitedUTRANCellInformation'/2,
'dec_LastVisitedEUTRANCellInformation'/2,
'dec_LastVisitedCell-Item'/2,
'dec_LAI'/2,
'dec_LAC'/2,
'dec_InterfacesToTrace'/2,
'dec_IntegrityProtectionAlgorithms'/2,
'dec_IMSI'/2,
'dec_HFN'/2,
'dec_HandoverType'/2,
'dec_HandoverRestrictionList'/2,
'dec_GUMMEI'/2,
'dec_GTP-TEID'/2,
'dec_GBR-QosInformation'/2,
'dec_ForbiddenLACs'/2,
'dec_ForbiddenLAs-Item'/2,
'dec_ForbiddenLAs'/2,
'dec_ForbiddenTACs'/2,
'dec_ForbiddenTAs-Item'/2,
'dec_ForbiddenTAs'/2,
'dec_ForbiddenInterRATs'/2,
'dec_ExtendedRNC-ID'/2,
'dec_EUTRAN-CGI'/2,
'dec_E-RABLevelQoSParameters'/2,
'dec_E-RABItem'/2,
'dec_E-RABList'/2,
'dec_E-RABInformationListItem'/2,
'dec_E-RABInformationList'/2,
'dec_E-RAB-ID'/2,
'dec_EventType'/2,
'dec_EPLMNs'/2,
'dec_EncryptionAlgorithms'/2,
'dec_ENBX2TLAs'/2,
'dec_ENBname'/2,
'dec_ENB-UE-S1AP-ID'/2,
'dec_ENB-StatusTransfer-TransparentContainer'/2,
'dec_Global-ENB-ID'/2,
'dec_GERAN-Cell-ID'/2,
'dec_ENB-ID'/2,
'dec_CompletedCellinEAI-Item'/2,
'dec_CompletedCellinEAI'/2,
'dec_EmergencyAreaID-Broadcast-Item'/2,
'dec_EmergencyAreaID-Broadcast'/2,
'dec_EmergencyAreaID'/2,
'dec_EmergencyAreaIDList'/2,
'dec_ECGIList'/2,
'dec_Direct-Forwarding-Path-Availability'/2,
'dec_DL-Forwarding'/2,
'dec_DataCodingScheme'/2,
'dec_CriticalityDiagnostics-IE-Item'/2,
'dec_CriticalityDiagnostics-IE-List'/2,
'dec_CriticalityDiagnostics'/2,
'dec_COUNTvalue'/2,
'dec_CSG-IdList-Item'/2,
'dec_CSG-IdList'/2,
'dec_CSG-Id'/2,
'dec_CSFallbackIndicator'/2,
'dec_CNDomain'/2,
'dec_CI'/2,
'dec_CGI'/2,
'dec_CellType'/2,
'dec_Cell-Size'/2,
'dec_Cdma2000OneXRAND'/2,
'dec_Cdma2000OneXPilot'/2,
'dec_Cdma2000OneXMSI'/2,
'dec_Cdma2000OneXMEID'/2,
'dec_Cdma2000OneXSRVCCInfo'/2,
'dec_Cdma2000HORequiredIndication'/2,
'dec_Cdma2000HOStatus'/2,
'dec_Cdma2000SectorID'/2,
'dec_Cdma2000RATType'/2,
'dec_Cdma2000PDU'/2,
'dec_CellID-Broadcast-Item'/2,
'dec_CellID-Broadcast'/2,
'dec_CellIdentity'/2,
'dec_CauseNas'/2,
'dec_CauseTransport'/2,
'dec_CauseRadioNetwork'/2,
'dec_CauseProtocol'/2,
'dec_CauseMisc'/2,
'dec_Cause'/2,
'dec_BroadcastCompletedAreaList'/2,
'dec_BPLMNs'/2,
'dec_BitRate'/2,
'dec_Bearers-SubjectToStatusTransfer-Item'/2,
'dec_Bearers-SubjectToStatusTransferList'/2,
'dec_AllocationAndRetentionPriority'/2,
'dec_TriggeringMessage'/2,
'dec_ProtocolIE-ID'/2,
'dec_ProtocolExtensionID'/2,
'dec_ProcedureCode'/2,
'dec_PrivateIE-ID'/2,
'dec_Presence'/2,
'dec_Criticality'/2,
'dec_PrivateMessage'/2,
'dec_MMEConfigurationTransfer'/2,
'dec_ENBConfigurationTransfer'/2,
'dec_MMEDirectInformationTransfer'/2,
'dec_Inter-SystemInformationTransferType'/2,
'dec_ENBDirectInformationTransfer'/2,
'dec_WriteReplaceWarningResponse'/2,
'dec_WriteReplaceWarningRequest'/2,
'dec_OverloadStop'/2,
'dec_OverloadStart'/2,
'dec_LocationReport'/2,
'dec_LocationReportingFailureIndication'/2,
'dec_LocationReportingControl'/2,
'dec_CellTrafficTrace'/2,
'dec_DeactivateTrace'/2,
'dec_TraceFailureIndication'/2,
'dec_TraceStart'/2,
'dec_MMEStatusTransfer'/2,
'dec_ENBStatusTransfer'/2,
'dec_UECapabilityInfoIndication'/2,
'dec_UplinkS1cdma2000tunneling'/2,
'dec_DownlinkS1cdma2000tunneling'/2,
'dec_MMEConfigurationUpdateFailure'/2,
'dec_MMEConfigurationUpdateAcknowledge'/2,
'dec_MMEConfigurationUpdate'/2,
'dec_ENBConfigurationUpdateFailure'/2,
'dec_ENBConfigurationUpdateAcknowledge'/2,
'dec_ENBConfigurationUpdate'/2,
'dec_S1SetupFailure'/2,
'dec_S1SetupResponse'/2,
'dec_S1SetupRequest'/2,
'dec_ErrorIndication'/2,
'dec_UE-associatedLogicalS1-ConnectionListResAck'/2,
'dec_ResetAcknowledge'/2,
'dec_UE-associatedLogicalS1-ConnectionListRes'/2,
'dec_ResetAll'/2,
'dec_ResetType'/2,
'dec_Reset'/2,
'dec_NASNonDeliveryIndication'/2,
'dec_UplinkNASTransport'/2,
'dec_InitialUEMessage'/2,
'dec_DownlinkNASTransport'/2,
'dec_UEContextModificationFailure'/2,
'dec_UEContextModificationResponse'/2,
'dec_UEContextModificationRequest'/2,
'dec_UEContextReleaseComplete'/2,
'dec_UEContextReleaseCommand'/2,
'dec_UEContextReleaseRequest'/2,
'dec_TAIItem'/2,
'dec_TAIList'/2,
'dec_Paging'/2,
'dec_InitialContextSetupFailure'/2,
'dec_E-RABSetupItemCtxtSURes'/2,
'dec_E-RABSetupListCtxtSURes'/2,
'dec_InitialContextSetupResponse'/2,
'dec_E-RABToBeSetupItemCtxtSUReq'/2,
'dec_E-RABToBeSetupListCtxtSUReq'/2,
'dec_InitialContextSetupRequest'/2,
'dec_E-RABReleaseIndication'/2,
'dec_E-RABReleaseItemBearerRelComp'/2,
'dec_E-RABReleaseListBearerRelComp'/2,
'dec_E-RABReleaseResponse'/2,
'dec_E-RABReleaseCommand'/2,
'dec_E-RABModifyItemBearerModRes'/2,
'dec_E-RABModifyListBearerModRes'/2,
'dec_E-RABModifyResponse'/2,
'dec_E-RABToBeModifiedItemBearerModReq'/2,
'dec_E-RABToBeModifiedListBearerModReq'/2,
'dec_E-RABModifyRequest'/2,
'dec_E-RABSetupItemBearerSURes'/2,
'dec_E-RABSetupListBearerSURes'/2,
'dec_E-RABSetupResponse'/2,
'dec_E-RABToBeSetupItemBearerSUReq'/2,
'dec_E-RABToBeSetupListBearerSUReq'/2,
'dec_E-RABSetupRequest'/2,
'dec_HandoverCancelAcknowledge'/2,
'dec_HandoverCancel'/2,
'dec_PathSwitchRequestFailure'/2,
'dec_E-RABToBeSwitchedULItem'/2,
'dec_E-RABToBeSwitchedULList'/2,
'dec_PathSwitchRequestAcknowledge'/2,
'dec_E-RABToBeSwitchedDLItem'/2,
'dec_E-RABToBeSwitchedDLList'/2,
'dec_PathSwitchRequest'/2,
'dec_HandoverNotify'/2,
'dec_HandoverFailure'/2,
'dec_E-RABFailedToSetupItemHOReqAck'/2,
'dec_E-RABFailedtoSetupListHOReqAck'/2,
'dec_E-RABAdmittedItem'/2,
'dec_E-RABAdmittedList'/2,
'dec_HandoverRequestAcknowledge'/2,
'dec_E-RABToBeSetupItemHOReq'/2,
'dec_E-RABToBeSetupListHOReq'/2,
'dec_HandoverRequest'/2,
'dec_HandoverPreparationFailure'/2,
'dec_E-RABDataForwardingItem'/2,
'dec_E-RABSubjecttoDataForwardingList'/2,
'dec_HandoverCommand'/2,
'dec_HandoverRequired'/2
]).

-export([
'id-Target-ToSource-TransparentContainer-Secondary'/0,
'id-Source-ToTarget-TransparentContainer-Secondary'/0,
'id-DefaultPagingDRX'/0,
'id-NASSecurityParameterstoE-UTRAN'/0,
'id-NASSecurityParametersfromE-UTRAN'/0,
'id-RRC-Establishment-Cause'/0,
'id-MSClassmark3'/0,
'id-MSClassmark2'/0,
'id-TraceCollectionEntityIPAddress'/0,
'id-SONConfigurationTransferMCT'/0,
'id-SONConfigurationTransferECT'/0,
'id-CSG-IdList'/0,
'id-CSG-Id'/0,
'id-NAS-DownlinkCount'/0,
'id-SRVCCHOIndication'/0,
'id-SRVCCOperationPossible'/0,
'id-Target-ToSource-TransparentContainer'/0,
'id-Inter-SystemInformationTransferTypeMDT'/0,
'id-Inter-SystemInformationTransferTypeEDT'/0,
'id-BroadcastCompletedAreaList'/0,
'id-WarningMessageContents'/0,
'id-DataCodingScheme'/0,
'id-WarningSecurityInfo'/0,
'id-WarningType'/0,
'id-NumberofBroadcastRequest'/0,
'id-RepetitionPeriod'/0,
'id-WarningAreaList'/0,
'id-SerialNumber'/0,
'id-MessageIdentifier'/0,
'id-E-RABReleasedList'/0,
'id-CNDomain'/0,
'id-CSFallbackIndicator'/0,
'id-UESecurityCapabilities'/0,
'id-SubscriberProfileIDforRFP'/0,
'id-ServedGUMMEIs'/0,
'id-Source-ToTarget-TransparentContainer'/0,
'id-E-RABFailedToBeReleasedList'/0,
'id-cdma2000OneXSRVCCInfo'/0,
'id-OverloadResponse'/0,
'id-EUTRAN-CGI'/0,
'id-UE-S1AP-IDs'/0,
'id-RequestType'/0,
'id-cdma2000OneXRAND'/0,
'id-S-TMSI'/0,
'id-E-RABToBeSwitchedULList'/0,
'id-E-RABToBeSwitchedULItem'/0,
'id-UE-associatedLogicalS1-ConnectionListResAck'/0,
'id-ResetType'/0,
'id-UE-associatedLogicalS1-ConnectionItem'/0,
'id-eNB-StatusTransfer-TransparentContainer'/0,
'id-Bearers-SubjectToStatusTransfer-Item'/0,
'id-SourceMME-UE-S1AP-ID'/0,
'id-RelativeMMECapacity'/0,
'id-E-UTRAN-Trace-ID'/0,
'id-cdma2000HORequiredIndication'/0,
'id-cdma2000HOStatus'/0,
'id-UEIdentityIndexValue'/0,
'id-Direct-Forwarding-Path-Availability'/0,
'id-E-RABInformationListItem'/0,
'id-GUMMEI-ID'/0,
'id-UERadioCapability'/0,
'id-SecurityKey'/0,
'id-cdma2000SectorID'/0,
'id-cdma2000RATType'/0,
'id-cdma2000PDU'/0,
'id-E-RABReleaseListBearerRelComp'/0,
'id-TAI'/0,
'id-uEaggregateMaximumBitrate'/0,
'id-TimeToWait'/0,
'id-SupportedTAs'/0,
'id-ServedPLMNs'/0,
'id-MMEname'/0,
'id-eNBname'/0,
'id-Global-ENB-ID'/0,
'id-CriticalityDiagnostics'/0,
'id-UTRANtoLTEHOInformationRes'/0,
'id-GERANtoLTEHOInformationRes'/0,
'id-E-RABToBeSetupListHOReq'/0,
'id-E-RABToBeSetupItemCtxtSUReq'/0,
'id-E-RABSetupListCtxtSURes'/0,
'id-E-RABSetupItemCtxtSURes'/0,
'id-E-RABReleaseItemHOCmd'/0,
'id-E-RABFailedToSetupListCtxtSURes'/0,
'id-TAIItem'/0,
'id-TAIList'/0,
'id-pagingDRX'/0,
'id-UEPagingID'/0,
'id-HandoverRestrictionList'/0,
'id-SecurityContext'/0,
'id-E-RABSetupItemBearerSURes'/0,
'id-E-RABReleaseItem'/0,
'id-E-RABModifyItemBearerModRes'/0,
'id-E-RABToBeModifiedItemBearerModReq'/0,
'id-E-RABItem'/0,
'id-E-RABFailedToReleaseList'/0,
'id-E-RABToBeReleasedList'/0,
'id-E-RABFailedToModifyList'/0,
'id-E-RABModifyListBearerModRes'/0,
'id-E-RABToBeModifiedListBearerModReq'/0,
'id-E-RABFailedToSetupListBearerSURes'/0,
'id-E-RABSetupListBearerSURes'/0,
'id-E-RABToBeSetupItemHOReq'/0,
'id-NAS-PDU'/0,
'id-TraceActivation'/0,
'id-E-RABToBeSetupListCtxtSUReq'/0,
'id-E-RABToBeSwitchedDLItem'/0,
'id-E-RABToBeSwitchedDLList'/0,
'id-E-RABFailedtoSetupItemHOReqAck'/0,
'id-E-RABAdmittedItem'/0,
'id-E-RABFailedToSetupListHOReqAck'/0,
'id-E-RABAdmittedList'/0,
'id-E-RABToBeSetupItemBearerSUReq'/0,
'id-E-RABToBeSetupListBearerSUReq'/0,
'id-E-RABReleaseItemBearerRelComp'/0,
'id-E-RABDataForwardingItem'/0,
'id-E-RABtoReleaseListHOCmd'/0,
'id-E-RABSubjecttoDataForwardingList'/0,
'id-eNB-UE-S1AP-ID'/0,
'id-TargetID'/0,
'id-SourceID'/0,
'id-Cause'/0,
'id-HandoverType'/0,
'id-MME-UE-S1AP-ID'/0,
'maxnoofMMECs'/0,
'maxnoofGroupIDs'/0,
'maxnoofRATs'/0,
'maxnoofeNBX2TLAs'/0,
'maxnoofCellinEAI'/0,
'maxnoofCellinTAI'/0,
'maxnoofEmergencyAreaID'/0,
'maxnoofCellID'/0,
'maxnoofTAIforWarning'/0,
'maxnoofCells'/0,
'maxNrOfIndividualS1ConnectionsToReset'/0,
'maxnoofForbTACs'/0,
'maxnoofForbLACs'/0,
'maxnoofEPLMNsPlusOne'/0,
'maxnoofEPLMNs'/0,
'maxnoofPLMNsPerMME'/0,
'maxnoofBPLMNs'/0,
'maxNrOfErrors'/0,
'maxnoofTACs'/0,
'maxnoofTAIs'/0,
'maxNrOfE-RABs'/0,
'maxNrOfCSGs'/0,
'maxProtocolIEs'/0,
'maxProtocolExtensions'/0,
'maxPrivateIEs'/0,
'id-CellTrafficTrace'/0,
'id-MMEConfigurationTransfer'/0,
'id-eNBConfigurationTransfer'/0,
'id-PrivateMessage'/0,
'id-MMEDirectInformationTransfer'/0,
'id-eNBDirectInformationTransfer'/0,
'id-WriteReplaceWarning'/0,
'id-OverloadStop'/0,
'id-OverloadStart'/0,
'id-LocationReport'/0,
'id-LocationReportingFailureIndication'/0,
'id-LocationReportingControl'/0,
'id-MMEConfigurationUpdate'/0,
'id-ENBConfigurationUpdate'/0,
'id-TraceFailureIndication'/0,
'id-TraceStart'/0,
'id-DeactivateTrace'/0,
'id-MMEStatusTransfer'/0,
'id-eNBStatusTransfer'/0,
'id-UEContextRelease'/0,
'id-UECapabilityInfoIndication'/0,
'id-UEContextModification'/0,
'id-UplinkS1cdma2000tunneling'/0,
'id-DownlinkS1cdma2000tunneling'/0,
'id-UEContextReleaseRequest'/0,
'id-S1Setup'/0,
'id-NASNonDeliveryIndication'/0,
'id-ErrorIndication'/0,
'id-Reset'/0,
'id-uplinkNASTransport'/0,
'id-initialUEMessage'/0,
'id-downlinkNASTransport'/0,
'id-Paging'/0,
'id-InitialContextSetup'/0,
'id-E-RABReleaseIndication'/0,
'id-E-RABRelease'/0,
'id-E-RABModify'/0,
'id-E-RABSetup'/0,
'id-HandoverCancel'/0,
'id-PathSwitchRequest'/0,
'id-HandoverNotification'/0,
'id-HandoverResourceAllocation'/0,
'id-HandoverPreparation'/0
]).

-export([
'enc_privateMessage'/3,
'enc_mMEConfigurationTransfer'/3,
'enc_eNBConfigurationTransfer'/3,
'enc_mMEDirectInformationTransfer'/3,
'enc_eNBDirectInformationTransfer'/3,
'enc_writeReplaceWarning'/3,
'enc_overloadStop'/3,
'enc_overloadStart'/3,
'enc_locationReport'/3,
'enc_locationReportingFailureIndication'/3,
'enc_locationReportingControl'/3,
'enc_cellTrafficTrace'/3,
'enc_traceFailureIndication'/3,
'enc_traceStart'/3,
'enc_deactivateTrace'/3,
'enc_mMEStatusTransfer'/3,
'enc_eNBStatusTransfer'/3,
'enc_uEContextRelease'/3,
'enc_uECapabilityInfoIndication'/3,
'enc_uEContextModification'/3,
'enc_uplinkS1cdma2000tunneling'/3,
'enc_downlinkS1cdma2000tunneling'/3,
'enc_mMEConfigurationUpdate'/3,
'enc_eNBConfigurationUpdate'/3,
'enc_s1Setup'/3,
'enc_errorIndication'/3,
'enc_reset'/3,
'enc_handoverCancel'/3,
'enc_nASNonDeliveryIndication'/3,
'enc_uplinkNASTransport'/3,
'enc_initialUEMessage'/3,
'enc_downlinkNASTransport'/3,
'enc_paging'/3,
'enc_uEContextReleaseRequest'/3,
'enc_initialContextSetup'/3,
'enc_e-RABReleaseIndication'/3,
'enc_e-RABRelease'/3,
'enc_e-RABModify'/3,
'enc_e-RABSetup'/3,
'enc_pathSwitchRequest'/3,
'enc_handoverNotification'/3,
'enc_handoverResourceAllocation'/3,
'enc_handoverPreparation'/3
]).

-export([
'dec_privateMessage'/3,
'dec_mMEConfigurationTransfer'/3,
'dec_eNBConfigurationTransfer'/3,
'dec_mMEDirectInformationTransfer'/3,
'dec_eNBDirectInformationTransfer'/3,
'dec_writeReplaceWarning'/3,
'dec_overloadStop'/3,
'dec_overloadStart'/3,
'dec_locationReport'/3,
'dec_locationReportingFailureIndication'/3,
'dec_locationReportingControl'/3,
'dec_cellTrafficTrace'/3,
'dec_traceFailureIndication'/3,
'dec_traceStart'/3,
'dec_deactivateTrace'/3,
'dec_mMEStatusTransfer'/3,
'dec_eNBStatusTransfer'/3,
'dec_uEContextRelease'/3,
'dec_uECapabilityInfoIndication'/3,
'dec_uEContextModification'/3,
'dec_uplinkS1cdma2000tunneling'/3,
'dec_downlinkS1cdma2000tunneling'/3,
'dec_mMEConfigurationUpdate'/3,
'dec_eNBConfigurationUpdate'/3,
'dec_s1Setup'/3,
'dec_errorIndication'/3,
'dec_reset'/3,
'dec_handoverCancel'/3,
'dec_nASNonDeliveryIndication'/3,
'dec_uplinkNASTransport'/3,
'dec_initialUEMessage'/3,
'dec_downlinkNASTransport'/3,
'dec_paging'/3,
'dec_uEContextReleaseRequest'/3,
'dec_initialContextSetup'/3,
'dec_e-RABReleaseIndication'/3,
'dec_e-RABRelease'/3,
'dec_e-RABModify'/3,
'dec_e-RABSetup'/3,
'dec_pathSwitchRequest'/3,
'dec_handoverNotification'/3,
'dec_handoverResourceAllocation'/3,
'dec_handoverPreparation'/3
]).

-export([
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'/1,
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'/1,
'getenc_S1AP-ELEMENTARY-PROCEDURES'/1,
'getenc_X2TNLConfigurationInfo-ExtIEs'/1,
'getenc_UESecurityCapabilities-ExtIEs'/1,
'getenc_UE-associatedLogicalS1-ConnectionItemExtIEs'/1,
'getenc_UE-S1AP-ID-pair-ExtIEs'/1,
'getenc_UEAggregate-MaximumBitrates-ExtIEs'/1,
'getenc_TraceActivation-ExtIEs'/1,
'getenc_TargeteNB-ToSourceeNB-TransparentContainer-ExtIEs'/1,
'getenc_TargetRNC-ID-ExtIEs'/1,
'getenc_TargeteNB-ID-ExtIEs'/1,
'getenc_CompletedCellinTAI-Item-ExtIEs'/1,
'getenc_TAI-Broadcast-Item-ExtIEs'/1,
'getenc_TAI-ExtIEs'/1,
'getenc_S-TMSI-ExtIEs'/1,
'getenc_SupportedTAs-Item-ExtIEs'/1,
'getenc_ServedGUMMEIsItem-ExtIEs'/1,
'getenc_SourceeNB-ToTargeteNB-TransparentContainer-ExtIEs'/1,
'getenc_SourceeNB-ID-ExtIEs'/1,
'getenc_SONConfigurationTransfer-ExtIEs'/1,
'getenc_SONInformationReply-ExtIEs'/1,
'getenc_SecurityContext-ExtIEs'/1,
'getenc_RIMTransfer-ExtIEs'/1,
'getenc_RequestType-ExtIEs'/1,
'getenc_LastVisitedEUTRANCellInformation-ExtIEs'/1,
'getenc_LAI-ExtIEs'/1,
'getenc_HandoverRestrictionList-ExtIEs'/1,
'getenc_GUMMEI-ExtIEs'/1,
'getenc_GBR-QosInformation-ExtIEs'/1,
'getenc_ForbiddenLAs-Item-ExtIEs'/1,
'getenc_ForbiddenTAs-Item-ExtIEs'/1,
'getenc_EUTRAN-CGI-ExtIEs'/1,
'getenc_E-RABQoSParameters-ExtIEs'/1,
'getenc_E-RABItem-ExtIEs'/1,
'getenc_E-RABItemIEs'/1,
'getenc_E-RABInformationListItem-ExtIEs'/1,
'getenc_E-RABInformationListIEs'/1,
'getenc_ENB-StatusTransfer-TransparentContainer-ExtIEs'/1,
'getenc_GlobalENB-ID-ExtIEs'/1,
'getenc_GERAN-Cell-ID-ExtIEs'/1,
'getenc_CompletedCellinEAI-Item-ExtIEs'/1,
'getenc_EmergencyAreaID-Broadcast-Item-ExtIEs'/1,
'getenc_CriticalityDiagnostics-IE-Item-ExtIEs'/1,
'getenc_CriticalityDiagnostics-ExtIEs'/1,
'getenc_COUNTvalue-ExtIEs'/1,
'getenc_CSG-IdList-Item-ExtIEs'/1,
'getenc_CGI-ExtIEs'/1,
'getenc_CellType-ExtIEs'/1,
'getenc_Cdma2000OneXSRVCCInfo-ExtIEs'/1,
'getenc_CellID-Broadcast-Item-ExtIEs'/1,
'getenc_Bearers-SubjectToStatusTransfer-ItemExtIEs'/1,
'getenc_Bearers-SubjectToStatusTransfer-ItemIEs'/1,
'getenc_AllocationAndRetentionPriority-ExtIEs'/1,
'getenc_MMEConfigurationTransferIEs'/1,
'getenc_ENBConfigurationTransferIEs'/1,
'getenc_MMEDirectInformationTransferIEs'/1,
'getenc_ENBDirectInformationTransferIEs'/1,
'getenc_WriteReplaceWarningResponseIEs'/1,
'getenc_WriteReplaceWarningRequestIEs'/1,
'getenc_OverloadStopIEs'/1,
'getenc_OverloadStartIEs'/1,
'getenc_LocationReportIEs'/1,
'getenc_LocationReportingFailureIndicationIEs'/1,
'getenc_LocationReportingControlIEs'/1,
'getenc_CellTrafficTraceIEs'/1,
'getenc_DeactivateTraceIEs'/1,
'getenc_TraceFailureIndicationIEs'/1,
'getenc_TraceStartIEs'/1,
'getenc_MMEStatusTransferIEs'/1,
'getenc_ENBStatusTransferIEs'/1,
'getenc_UECapabilityInfoIndicationIEs'/1,
'getenc_UplinkS1cdma2000tunnelingIEs'/1,
'getenc_DownlinkS1cdma2000tunnelingIEs'/1,
'getenc_MMEConfigurationUpdateFailureIEs'/1,
'getenc_MMEConfigurationUpdateAcknowledgeIEs'/1,
'getenc_MMEConfigurationUpdateIEs'/1,
'getenc_ENBConfigurationUpdateFailureIEs'/1,
'getenc_ENBConfigurationUpdateAcknowledgeIEs'/1,
'getenc_ENBConfigurationUpdateIEs'/1,
'getenc_S1SetupFailureIEs'/1,
'getenc_S1SetupResponseIEs'/1,
'getenc_S1SetupRequestIEs'/1,
'getenc_ErrorIndicationIEs'/1,
'getenc_UE-associatedLogicalS1-ConnectionItemResAck'/1,
'getenc_ResetAcknowledgeIEs'/1,
'getenc_UE-associatedLogicalS1-ConnectionItemRes'/1,
'getenc_ResetIEs'/1,
'getenc_NASNonDeliveryIndication-IEs'/1,
'getenc_UplinkNASTransport-IEs'/1,
'getenc_InitialUEMessage-IEs'/1,
'getenc_DownlinkNASTransport-IEs'/1,
'getenc_UEContextModificationFailureIEs'/1,
'getenc_UEContextModificationResponseIEs'/1,
'getenc_UEContextModificationRequestIEs'/1,
'getenc_UEContextReleaseComplete-IEs'/1,
'getenc_UEContextReleaseCommand-IEs'/1,
'getenc_UEContextReleaseRequest-IEs'/1,
'getenc_TAIItemExtIEs'/1,
'getenc_TAIItemIEs'/1,
'getenc_PagingIEs'/1,
'getenc_InitialContextSetupFailureIEs'/1,
'getenc_E-RABSetupItemCtxtSUResExtIEs'/1,
'getenc_E-RABSetupItemCtxtSUResIEs'/1,
'getenc_InitialContextSetupResponseIEs'/1,
'getenc_E-RABToBeSetupItemCtxtSUReqExtIEs'/1,
'getenc_E-RABToBeSetupItemCtxtSUReqIEs'/1,
'getenc_InitialContextSetupRequestIEs'/1,
'getenc_E-RABReleaseIndicationIEs'/1,
'getenc_E-RABReleaseItemBearerRelCompExtIEs'/1,
'getenc_E-RABReleaseItemBearerRelCompIEs'/1,
'getenc_E-RABReleaseResponseIEs'/1,
'getenc_E-RABReleaseCommandIEs'/1,
'getenc_E-RABModifyItemBearerModResExtIEs'/1,
'getenc_E-RABModifyItemBearerModResIEs'/1,
'getenc_E-RABModifyResponseIEs'/1,
'getenc_E-RABToBeModifyItemBearerModReqExtIEs'/1,
'getenc_E-RABToBeModifiedItemBearerModReqIEs'/1,
'getenc_E-RABModifyRequestIEs'/1,
'getenc_E-RABSetupItemBearerSUResExtIEs'/1,
'getenc_E-RABSetupItemBearerSUResIEs'/1,
'getenc_E-RABSetupResponseIEs'/1,
'getenc_E-RABToBeSetupItemBearerSUReqExtIEs'/1,
'getenc_E-RABToBeSetupItemBearerSUReqIEs'/1,
'getenc_E-RABSetupRequestIEs'/1,
'getenc_HandoverCancelAcknowledgeIEs'/1,
'getenc_HandoverCancelIEs'/1,
'getenc_PathSwitchRequestFailureIEs'/1,
'getenc_E-RABToBeSwitchedULItem-ExtIEs'/1,
'getenc_E-RABToBeSwitchedULItemIEs'/1,
'getenc_PathSwitchRequestAcknowledgeIEs'/1,
'getenc_E-RABToBeSwitchedDLItem-ExtIEs'/1,
'getenc_E-RABToBeSwitchedDLItemIEs'/1,
'getenc_PathSwitchRequestIEs'/1,
'getenc_HandoverNotifyIEs'/1,
'getenc_HandoverFailureIEs'/1,
'getenc_E-RABFailedToSetupItemHOReqAckExtIEs'/1,
'getenc_E-RABFailedtoSetupItemHOReqAckIEs'/1,
'getenc_E-RABAdmittedItem-ExtIEs'/1,
'getenc_E-RABAdmittedItemIEs'/1,
'getenc_HandoverRequestAcknowledgeIEs'/1,
'getenc_E-RABToBeSetupItemHOReq-ExtIEs'/1,
'getenc_E-RABToBeSetupItemHOReqIEs'/1,
'getenc_HandoverRequestIEs'/1,
'getenc_HandoverPreparationFailureIEs'/1,
'getenc_E-RABDataForwardingItem-ExtIEs'/1,
'getenc_E-RABDataForwardingItemIEs'/1,
'getenc_HandoverCommandIEs'/1,
'getenc_HandoverRequiredIEs'/1,
'getenc_internal_object_set_argument_79'/1,
'getenc_internal_object_set_argument_109'/1,
'getenc_internal_object_set_argument_9'/1,
'getenc_internal_object_set_argument_39'/1,
'getenc_internal_object_set_argument_78'/1,
'getenc_internal_object_set_argument_108'/1,
'getenc_internal_object_set_argument_8'/1,
'getenc_internal_object_set_argument_38'/1,
'getenc_internal_object_set_argument_147'/1,
'getenc_internal_object_set_argument_77'/1,
'getenc_internal_object_set_argument_107'/1,
'getenc_internal_object_set_argument_7'/1,
'getenc_internal_object_set_argument_37'/1,
'getenc_internal_object_set_argument_146'/1,
'getenc_internal_object_set_argument_76'/1,
'getenc_internal_object_set_argument_106'/1,
'getenc_internal_object_set_argument_6'/1,
'getenc_internal_object_set_argument_36'/1,
'getenc_internal_object_set_argument_145'/1,
'getenc_internal_object_set_argument_75'/1,
'getenc_internal_object_set_argument_105'/1,
'getenc_internal_object_set_argument_5'/1,
'getenc_internal_object_set_argument_35'/1,
'getenc_internal_object_set_argument_144'/1,
'getenc_internal_object_set_argument_74'/1,
'getenc_internal_object_set_argument_104'/1,
'getenc_internal_object_set_argument_4'/1,
'getenc_internal_object_set_argument_34'/1,
'getenc_internal_object_set_argument_143'/1,
'getenc_internal_object_set_argument_73'/1,
'getenc_internal_object_set_argument_103'/1,
'getenc_internal_object_set_argument_3'/1,
'getenc_internal_object_set_argument_33'/1,
'getenc_internal_object_set_argument_142'/1,
'getenc_internal_object_set_argument_72'/1,
'getenc_internal_object_set_argument_102'/1,
'getenc_internal_object_set_argument_2'/1,
'getenc_internal_object_set_argument_32'/1,
'getenc_internal_object_set_argument_141'/1,
'getenc_internal_object_set_argument_71'/1,
'getenc_internal_object_set_argument_101'/1,
'getenc_internal_object_set_argument_1'/1,
'getenc_internal_object_set_argument_31'/1,
'getenc_internal_object_set_argument_140'/1,
'getenc_internal_object_set_argument_70'/1,
'getenc_internal_object_set_argument_100'/1,
'getenc_internal_object_set_argument_30'/1,
'getenc_internal_object_set_argument_139'/1,
'getenc_internal_object_set_argument_89'/1,
'getenc_internal_object_set_argument_49'/1,
'getenc_internal_object_set_argument_138'/1,
'getenc_internal_object_set_argument_88'/1,
'getenc_internal_object_set_argument_48'/1,
'getenc_internal_object_set_argument_137'/1,
'getenc_internal_object_set_argument_87'/1,
'getenc_internal_object_set_argument_47'/1,
'getenc_internal_object_set_argument_136'/1,
'getenc_internal_object_set_argument_86'/1,
'getenc_internal_object_set_argument_46'/1,
'getenc_internal_object_set_argument_135'/1,
'getenc_internal_object_set_argument_85'/1,
'getenc_internal_object_set_argument_45'/1,
'getenc_internal_object_set_argument_134'/1,
'getenc_internal_object_set_argument_84'/1,
'getenc_internal_object_set_argument_44'/1,
'getenc_internal_object_set_argument_133'/1,
'getenc_internal_object_set_argument_83'/1,
'getenc_internal_object_set_argument_43'/1,
'getenc_internal_object_set_argument_132'/1,
'getenc_internal_object_set_argument_82'/1,
'getenc_internal_object_set_argument_42'/1,
'getenc_internal_object_set_argument_131'/1,
'getenc_internal_object_set_argument_81'/1,
'getenc_internal_object_set_argument_41'/1,
'getenc_internal_object_set_argument_130'/1,
'getenc_internal_object_set_argument_80'/1,
'getenc_internal_object_set_argument_40'/1,
'getenc_internal_object_set_argument_129'/1,
'getenc_internal_object_set_argument_59'/1,
'getenc_internal_object_set_argument_99'/1,
'getenc_internal_object_set_argument_19'/1,
'getenc_internal_object_set_argument_128'/1,
'getenc_internal_object_set_argument_58'/1,
'getenc_internal_object_set_argument_98'/1,
'getenc_internal_object_set_argument_18'/1,
'getenc_internal_object_set_argument_127'/1,
'getenc_internal_object_set_argument_57'/1,
'getenc_internal_object_set_argument_97'/1,
'getenc_internal_object_set_argument_17'/1,
'getenc_internal_object_set_argument_126'/1,
'getenc_internal_object_set_argument_56'/1,
'getenc_internal_object_set_argument_96'/1,
'getenc_internal_object_set_argument_16'/1,
'getenc_internal_object_set_argument_125'/1,
'getenc_internal_object_set_argument_55'/1,
'getenc_internal_object_set_argument_95'/1,
'getenc_internal_object_set_argument_15'/1,
'getenc_internal_object_set_argument_124'/1,
'getenc_internal_object_set_argument_54'/1,
'getenc_internal_object_set_argument_94'/1,
'getenc_internal_object_set_argument_14'/1,
'getenc_internal_object_set_argument_123'/1,
'getenc_internal_object_set_argument_53'/1,
'getenc_internal_object_set_argument_93'/1,
'getenc_internal_object_set_argument_13'/1,
'getenc_internal_object_set_argument_122'/1,
'getenc_internal_object_set_argument_92'/1,
'getenc_internal_object_set_argument_12'/1,
'getenc_internal_object_set_argument_121'/1,
'getenc_internal_object_set_argument_51'/1,
'getenc_internal_object_set_argument_91'/1,
'getenc_internal_object_set_argument_11'/1,
'getenc_internal_object_set_argument_120'/1,
'getenc_internal_object_set_argument_50'/1,
'getenc_internal_object_set_argument_90'/1,
'getenc_internal_object_set_argument_10'/1,
'getenc_internal_object_set_argument_119'/1,
'getenc_internal_object_set_argument_69'/1,
'getenc_internal_object_set_argument_29'/1,
'getenc_internal_object_set_argument_118'/1,
'getenc_internal_object_set_argument_68'/1,
'getenc_internal_object_set_argument_28'/1,
'getenc_internal_object_set_argument_117'/1,
'getenc_internal_object_set_argument_67'/1,
'getenc_internal_object_set_argument_27'/1,
'getenc_internal_object_set_argument_116'/1,
'getenc_internal_object_set_argument_66'/1,
'getenc_internal_object_set_argument_26'/1,
'getenc_internal_object_set_argument_115'/1,
'getenc_internal_object_set_argument_65'/1,
'getenc_internal_object_set_argument_25'/1,
'getenc_internal_object_set_argument_114'/1,
'getenc_internal_object_set_argument_64'/1,
'getenc_internal_object_set_argument_24'/1,
'getenc_internal_object_set_argument_113'/1,
'getenc_internal_object_set_argument_63'/1,
'getenc_internal_object_set_argument_23'/1,
'getenc_internal_object_set_argument_112'/1,
'getenc_internal_object_set_argument_62'/1,
'getenc_internal_object_set_argument_22'/1,
'getenc_internal_object_set_argument_111'/1,
'getenc_internal_object_set_argument_61'/1,
'getenc_internal_object_set_argument_21'/1,
'getenc_internal_object_set_argument_110'/1,
'getenc_internal_object_set_argument_60'/1,
'getenc_internal_object_set_argument_20'/1
]).

-export([
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'/1,
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'/1,
'getdec_S1AP-ELEMENTARY-PROCEDURES'/1,
'getdec_X2TNLConfigurationInfo-ExtIEs'/1,
'getdec_UESecurityCapabilities-ExtIEs'/1,
'getdec_UE-associatedLogicalS1-ConnectionItemExtIEs'/1,
'getdec_UE-S1AP-ID-pair-ExtIEs'/1,
'getdec_UEAggregate-MaximumBitrates-ExtIEs'/1,
'getdec_TraceActivation-ExtIEs'/1,
'getdec_TargeteNB-ToSourceeNB-TransparentContainer-ExtIEs'/1,
'getdec_TargetRNC-ID-ExtIEs'/1,
'getdec_TargeteNB-ID-ExtIEs'/1,
'getdec_CompletedCellinTAI-Item-ExtIEs'/1,
'getdec_TAI-Broadcast-Item-ExtIEs'/1,
'getdec_TAI-ExtIEs'/1,
'getdec_S-TMSI-ExtIEs'/1,
'getdec_SupportedTAs-Item-ExtIEs'/1,
'getdec_ServedGUMMEIsItem-ExtIEs'/1,
'getdec_SourceeNB-ToTargeteNB-TransparentContainer-ExtIEs'/1,
'getdec_SourceeNB-ID-ExtIEs'/1,
'getdec_SONConfigurationTransfer-ExtIEs'/1,
'getdec_SONInformationReply-ExtIEs'/1,
'getdec_SecurityContext-ExtIEs'/1,
'getdec_RIMTransfer-ExtIEs'/1,
'getdec_RequestType-ExtIEs'/1,
'getdec_LastVisitedEUTRANCellInformation-ExtIEs'/1,
'getdec_LAI-ExtIEs'/1,
'getdec_HandoverRestrictionList-ExtIEs'/1,
'getdec_GUMMEI-ExtIEs'/1,
'getdec_GBR-QosInformation-ExtIEs'/1,
'getdec_ForbiddenLAs-Item-ExtIEs'/1,
'getdec_ForbiddenTAs-Item-ExtIEs'/1,
'getdec_EUTRAN-CGI-ExtIEs'/1,
'getdec_E-RABQoSParameters-ExtIEs'/1,
'getdec_E-RABItem-ExtIEs'/1,
'getdec_E-RABItemIEs'/1,
'getdec_E-RABInformationListItem-ExtIEs'/1,
'getdec_E-RABInformationListIEs'/1,
'getdec_ENB-StatusTransfer-TransparentContainer-ExtIEs'/1,
'getdec_GlobalENB-ID-ExtIEs'/1,
'getdec_GERAN-Cell-ID-ExtIEs'/1,
'getdec_CompletedCellinEAI-Item-ExtIEs'/1,
'getdec_EmergencyAreaID-Broadcast-Item-ExtIEs'/1,
'getdec_CriticalityDiagnostics-IE-Item-ExtIEs'/1,
'getdec_CriticalityDiagnostics-ExtIEs'/1,
'getdec_COUNTvalue-ExtIEs'/1,
'getdec_CSG-IdList-Item-ExtIEs'/1,
'getdec_CGI-ExtIEs'/1,
'getdec_CellType-ExtIEs'/1,
'getdec_Cdma2000OneXSRVCCInfo-ExtIEs'/1,
'getdec_CellID-Broadcast-Item-ExtIEs'/1,
'getdec_Bearers-SubjectToStatusTransfer-ItemExtIEs'/1,
'getdec_Bearers-SubjectToStatusTransfer-ItemIEs'/1,
'getdec_AllocationAndRetentionPriority-ExtIEs'/1,
'getdec_MMEConfigurationTransferIEs'/1,
'getdec_ENBConfigurationTransferIEs'/1,
'getdec_MMEDirectInformationTransferIEs'/1,
'getdec_ENBDirectInformationTransferIEs'/1,
'getdec_WriteReplaceWarningResponseIEs'/1,
'getdec_WriteReplaceWarningRequestIEs'/1,
'getdec_OverloadStopIEs'/1,
'getdec_OverloadStartIEs'/1,
'getdec_LocationReportIEs'/1,
'getdec_LocationReportingFailureIndicationIEs'/1,
'getdec_LocationReportingControlIEs'/1,
'getdec_CellTrafficTraceIEs'/1,
'getdec_DeactivateTraceIEs'/1,
'getdec_TraceFailureIndicationIEs'/1,
'getdec_TraceStartIEs'/1,
'getdec_MMEStatusTransferIEs'/1,
'getdec_ENBStatusTransferIEs'/1,
'getdec_UECapabilityInfoIndicationIEs'/1,
'getdec_UplinkS1cdma2000tunnelingIEs'/1,
'getdec_DownlinkS1cdma2000tunnelingIEs'/1,
'getdec_MMEConfigurationUpdateFailureIEs'/1,
'getdec_MMEConfigurationUpdateAcknowledgeIEs'/1,
'getdec_MMEConfigurationUpdateIEs'/1,
'getdec_ENBConfigurationUpdateFailureIEs'/1,
'getdec_ENBConfigurationUpdateAcknowledgeIEs'/1,
'getdec_ENBConfigurationUpdateIEs'/1,
'getdec_S1SetupFailureIEs'/1,
'getdec_S1SetupResponseIEs'/1,
'getdec_S1SetupRequestIEs'/1,
'getdec_ErrorIndicationIEs'/1,
'getdec_UE-associatedLogicalS1-ConnectionItemResAck'/1,
'getdec_ResetAcknowledgeIEs'/1,
'getdec_UE-associatedLogicalS1-ConnectionItemRes'/1,
'getdec_ResetIEs'/1,
'getdec_NASNonDeliveryIndication-IEs'/1,
'getdec_UplinkNASTransport-IEs'/1,
'getdec_InitialUEMessage-IEs'/1,
'getdec_DownlinkNASTransport-IEs'/1,
'getdec_UEContextModificationFailureIEs'/1,
'getdec_UEContextModificationResponseIEs'/1,
'getdec_UEContextModificationRequestIEs'/1,
'getdec_UEContextReleaseComplete-IEs'/1,
'getdec_UEContextReleaseCommand-IEs'/1,
'getdec_UEContextReleaseRequest-IEs'/1,
'getdec_TAIItemExtIEs'/1,
'getdec_TAIItemIEs'/1,
'getdec_PagingIEs'/1,
'getdec_InitialContextSetupFailureIEs'/1,
'getdec_E-RABSetupItemCtxtSUResExtIEs'/1,
'getdec_E-RABSetupItemCtxtSUResIEs'/1,
'getdec_InitialContextSetupResponseIEs'/1,
'getdec_E-RABToBeSetupItemCtxtSUReqExtIEs'/1,
'getdec_E-RABToBeSetupItemCtxtSUReqIEs'/1,
'getdec_InitialContextSetupRequestIEs'/1,
'getdec_E-RABReleaseIndicationIEs'/1,
'getdec_E-RABReleaseItemBearerRelCompExtIEs'/1,
'getdec_E-RABReleaseItemBearerRelCompIEs'/1,
'getdec_E-RABReleaseResponseIEs'/1,
'getdec_E-RABReleaseCommandIEs'/1,
'getdec_E-RABModifyItemBearerModResExtIEs'/1,
'getdec_E-RABModifyItemBearerModResIEs'/1,
'getdec_E-RABModifyResponseIEs'/1,
'getdec_E-RABToBeModifyItemBearerModReqExtIEs'/1,
'getdec_E-RABToBeModifiedItemBearerModReqIEs'/1,
'getdec_E-RABModifyRequestIEs'/1,
'getdec_E-RABSetupItemBearerSUResExtIEs'/1,
'getdec_E-RABSetupItemBearerSUResIEs'/1,
'getdec_E-RABSetupResponseIEs'/1,
'getdec_E-RABToBeSetupItemBearerSUReqExtIEs'/1,
'getdec_E-RABToBeSetupItemBearerSUReqIEs'/1,
'getdec_E-RABSetupRequestIEs'/1,
'getdec_HandoverCancelAcknowledgeIEs'/1,
'getdec_HandoverCancelIEs'/1,
'getdec_PathSwitchRequestFailureIEs'/1,
'getdec_E-RABToBeSwitchedULItem-ExtIEs'/1,
'getdec_E-RABToBeSwitchedULItemIEs'/1,
'getdec_PathSwitchRequestAcknowledgeIEs'/1,
'getdec_E-RABToBeSwitchedDLItem-ExtIEs'/1,
'getdec_E-RABToBeSwitchedDLItemIEs'/1,
'getdec_PathSwitchRequestIEs'/1,
'getdec_HandoverNotifyIEs'/1,
'getdec_HandoverFailureIEs'/1,
'getdec_E-RABFailedToSetupItemHOReqAckExtIEs'/1,
'getdec_E-RABFailedtoSetupItemHOReqAckIEs'/1,
'getdec_E-RABAdmittedItem-ExtIEs'/1,
'getdec_E-RABAdmittedItemIEs'/1,
'getdec_HandoverRequestAcknowledgeIEs'/1,
'getdec_E-RABToBeSetupItemHOReq-ExtIEs'/1,
'getdec_E-RABToBeSetupItemHOReqIEs'/1,
'getdec_HandoverRequestIEs'/1,
'getdec_HandoverPreparationFailureIEs'/1,
'getdec_E-RABDataForwardingItem-ExtIEs'/1,
'getdec_E-RABDataForwardingItemIEs'/1,
'getdec_HandoverCommandIEs'/1,
'getdec_HandoverRequiredIEs'/1,
'getdec_internal_object_set_argument_79'/1,
'getdec_internal_object_set_argument_109'/1,
'getdec_internal_object_set_argument_9'/1,
'getdec_internal_object_set_argument_39'/1,
'getdec_internal_object_set_argument_78'/1,
'getdec_internal_object_set_argument_108'/1,
'getdec_internal_object_set_argument_8'/1,
'getdec_internal_object_set_argument_38'/1,
'getdec_internal_object_set_argument_147'/1,
'getdec_internal_object_set_argument_77'/1,
'getdec_internal_object_set_argument_107'/1,
'getdec_internal_object_set_argument_7'/1,
'getdec_internal_object_set_argument_37'/1,
'getdec_internal_object_set_argument_146'/1,
'getdec_internal_object_set_argument_76'/1,
'getdec_internal_object_set_argument_106'/1,
'getdec_internal_object_set_argument_6'/1,
'getdec_internal_object_set_argument_36'/1,
'getdec_internal_object_set_argument_145'/1,
'getdec_internal_object_set_argument_75'/1,
'getdec_internal_object_set_argument_105'/1,
'getdec_internal_object_set_argument_5'/1,
'getdec_internal_object_set_argument_35'/1,
'getdec_internal_object_set_argument_144'/1,
'getdec_internal_object_set_argument_74'/1,
'getdec_internal_object_set_argument_104'/1,
'getdec_internal_object_set_argument_4'/1,
'getdec_internal_object_set_argument_34'/1,
'getdec_internal_object_set_argument_143'/1,
'getdec_internal_object_set_argument_73'/1,
'getdec_internal_object_set_argument_103'/1,
'getdec_internal_object_set_argument_3'/1,
'getdec_internal_object_set_argument_33'/1,
'getdec_internal_object_set_argument_142'/1,
'getdec_internal_object_set_argument_72'/1,
'getdec_internal_object_set_argument_102'/1,
'getdec_internal_object_set_argument_2'/1,
'getdec_internal_object_set_argument_32'/1,
'getdec_internal_object_set_argument_141'/1,
'getdec_internal_object_set_argument_71'/1,
'getdec_internal_object_set_argument_101'/1,
'getdec_internal_object_set_argument_1'/1,
'getdec_internal_object_set_argument_31'/1,
'getdec_internal_object_set_argument_140'/1,
'getdec_internal_object_set_argument_70'/1,
'getdec_internal_object_set_argument_100'/1,
'getdec_internal_object_set_argument_30'/1,
'getdec_internal_object_set_argument_139'/1,
'getdec_internal_object_set_argument_89'/1,
'getdec_internal_object_set_argument_49'/1,
'getdec_internal_object_set_argument_138'/1,
'getdec_internal_object_set_argument_88'/1,
'getdec_internal_object_set_argument_48'/1,
'getdec_internal_object_set_argument_137'/1,
'getdec_internal_object_set_argument_87'/1,
'getdec_internal_object_set_argument_47'/1,
'getdec_internal_object_set_argument_136'/1,
'getdec_internal_object_set_argument_86'/1,
'getdec_internal_object_set_argument_46'/1,
'getdec_internal_object_set_argument_135'/1,
'getdec_internal_object_set_argument_85'/1,
'getdec_internal_object_set_argument_45'/1,
'getdec_internal_object_set_argument_134'/1,
'getdec_internal_object_set_argument_84'/1,
'getdec_internal_object_set_argument_44'/1,
'getdec_internal_object_set_argument_133'/1,
'getdec_internal_object_set_argument_83'/1,
'getdec_internal_object_set_argument_43'/1,
'getdec_internal_object_set_argument_132'/1,
'getdec_internal_object_set_argument_82'/1,
'getdec_internal_object_set_argument_42'/1,
'getdec_internal_object_set_argument_131'/1,
'getdec_internal_object_set_argument_81'/1,
'getdec_internal_object_set_argument_41'/1,
'getdec_internal_object_set_argument_130'/1,
'getdec_internal_object_set_argument_80'/1,
'getdec_internal_object_set_argument_40'/1,
'getdec_internal_object_set_argument_129'/1,
'getdec_internal_object_set_argument_59'/1,
'getdec_internal_object_set_argument_99'/1,
'getdec_internal_object_set_argument_19'/1,
'getdec_internal_object_set_argument_128'/1,
'getdec_internal_object_set_argument_58'/1,
'getdec_internal_object_set_argument_98'/1,
'getdec_internal_object_set_argument_18'/1,
'getdec_internal_object_set_argument_127'/1,
'getdec_internal_object_set_argument_57'/1,
'getdec_internal_object_set_argument_97'/1,
'getdec_internal_object_set_argument_17'/1,
'getdec_internal_object_set_argument_126'/1,
'getdec_internal_object_set_argument_56'/1,
'getdec_internal_object_set_argument_96'/1,
'getdec_internal_object_set_argument_16'/1,
'getdec_internal_object_set_argument_125'/1,
'getdec_internal_object_set_argument_55'/1,
'getdec_internal_object_set_argument_95'/1,
'getdec_internal_object_set_argument_15'/1,
'getdec_internal_object_set_argument_124'/1,
'getdec_internal_object_set_argument_54'/1,
'getdec_internal_object_set_argument_94'/1,
'getdec_internal_object_set_argument_14'/1,
'getdec_internal_object_set_argument_123'/1,
'getdec_internal_object_set_argument_53'/1,
'getdec_internal_object_set_argument_93'/1,
'getdec_internal_object_set_argument_13'/1,
'getdec_internal_object_set_argument_122'/1,
'getdec_internal_object_set_argument_92'/1,
'getdec_internal_object_set_argument_12'/1,
'getdec_internal_object_set_argument_121'/1,
'getdec_internal_object_set_argument_51'/1,
'getdec_internal_object_set_argument_91'/1,
'getdec_internal_object_set_argument_11'/1,
'getdec_internal_object_set_argument_120'/1,
'getdec_internal_object_set_argument_50'/1,
'getdec_internal_object_set_argument_90'/1,
'getdec_internal_object_set_argument_10'/1,
'getdec_internal_object_set_argument_119'/1,
'getdec_internal_object_set_argument_69'/1,
'getdec_internal_object_set_argument_29'/1,
'getdec_internal_object_set_argument_118'/1,
'getdec_internal_object_set_argument_68'/1,
'getdec_internal_object_set_argument_28'/1,
'getdec_internal_object_set_argument_117'/1,
'getdec_internal_object_set_argument_67'/1,
'getdec_internal_object_set_argument_27'/1,
'getdec_internal_object_set_argument_116'/1,
'getdec_internal_object_set_argument_66'/1,
'getdec_internal_object_set_argument_26'/1,
'getdec_internal_object_set_argument_115'/1,
'getdec_internal_object_set_argument_65'/1,
'getdec_internal_object_set_argument_25'/1,
'getdec_internal_object_set_argument_114'/1,
'getdec_internal_object_set_argument_64'/1,
'getdec_internal_object_set_argument_24'/1,
'getdec_internal_object_set_argument_113'/1,
'getdec_internal_object_set_argument_63'/1,
'getdec_internal_object_set_argument_23'/1,
'getdec_internal_object_set_argument_112'/1,
'getdec_internal_object_set_argument_62'/1,
'getdec_internal_object_set_argument_22'/1,
'getdec_internal_object_set_argument_111'/1,
'getdec_internal_object_set_argument_61'/1,
'getdec_internal_object_set_argument_21'/1,
'getdec_internal_object_set_argument_110'/1,
'getdec_internal_object_set_argument_60'/1,
'getdec_internal_object_set_argument_20'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('UnsuccessfulOutcome',Data) -> 'enc_UnsuccessfulOutcome'(Data);
encode_disp('SuccessfulOutcome',Data) -> 'enc_SuccessfulOutcome'(Data);
encode_disp('InitiatingMessage',Data) -> 'enc_InitiatingMessage'(Data);
encode_disp('S1AP-PDU',Data) -> 'enc_S1AP-PDU'(Data);
encode_disp('X2TNLConfigurationInfo',Data) -> 'enc_X2TNLConfigurationInfo'(Data);
encode_disp('WarningMessageContents',Data) -> 'enc_WarningMessageContents'(Data);
encode_disp('WarningSecurityInfo',Data) -> 'enc_WarningSecurityInfo'(Data);
encode_disp('WarningType',Data) -> 'enc_WarningType'(Data);
encode_disp('WarningAreaList',Data) -> 'enc_WarningAreaList'(Data);
encode_disp('UESecurityCapabilities',Data) -> 'enc_UESecurityCapabilities'(Data);
encode_disp('UERadioCapability',Data) -> 'enc_UERadioCapability'(Data);
encode_disp('UEPagingID',Data) -> 'enc_UEPagingID'(Data);
encode_disp('UE-HistoryInformation',Data) -> 'enc_UE-HistoryInformation'(Data);
encode_disp('UEIdentityIndexValue',Data) -> 'enc_UEIdentityIndexValue'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionItem',Data) -> 'enc_UE-associatedLogicalS1-ConnectionItem'(Data);
encode_disp('UE-S1AP-ID-pair',Data) -> 'enc_UE-S1AP-ID-pair'(Data);
encode_disp('UE-S1AP-IDs',Data) -> 'enc_UE-S1AP-IDs'(Data);
encode_disp('UEAggregateMaximumBitrate',Data) -> 'enc_UEAggregateMaximumBitrate'(Data);
encode_disp('TypeOfError',Data) -> 'enc_TypeOfError'(Data);
encode_disp('E-UTRAN-Trace-ID',Data) -> 'enc_E-UTRAN-Trace-ID'(Data);
encode_disp('TraceDepth',Data) -> 'enc_TraceDepth'(Data);
encode_disp('TraceActivation',Data) -> 'enc_TraceActivation'(Data);
encode_disp('TransportLayerAddress',Data) -> 'enc_TransportLayerAddress'(Data);
encode_disp('Time-UE-StayedInCell',Data) -> 'enc_Time-UE-StayedInCell'(Data);
encode_disp('TimeToWait',Data) -> 'enc_TimeToWait'(Data);
encode_disp('TargetBSS-ToSourceBSS-TransparentContainer',Data) -> 'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Data);
encode_disp('TargetRNC-ToSourceRNC-TransparentContainer',Data) -> 'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Data);
encode_disp('Target-ToSource-TransparentContainer',Data) -> 'enc_Target-ToSource-TransparentContainer'(Data);
encode_disp('TargeteNB-ToSourceeNB-TransparentContainer',Data) -> 'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Data);
encode_disp('TargetRNC-ID',Data) -> 'enc_TargetRNC-ID'(Data);
encode_disp('TargeteNB-ID',Data) -> 'enc_TargeteNB-ID'(Data);
encode_disp('TargetID',Data) -> 'enc_TargetID'(Data);
encode_disp('TBCD-STRING',Data) -> 'enc_TBCD-STRING'(Data);
encode_disp('CompletedCellinTAI-Item',Data) -> 'enc_CompletedCellinTAI-Item'(Data);
encode_disp('CompletedCellinTAI',Data) -> 'enc_CompletedCellinTAI'(Data);
encode_disp('TAI-Broadcast-Item',Data) -> 'enc_TAI-Broadcast-Item'(Data);
encode_disp('TAI-Broadcast',Data) -> 'enc_TAI-Broadcast'(Data);
encode_disp('TAI',Data) -> 'enc_TAI'(Data);
encode_disp('TAIListforWarning',Data) -> 'enc_TAIListforWarning'(Data);
encode_disp('TAC',Data) -> 'enc_TAC'(Data);
encode_disp('S-TMSI',Data) -> 'enc_S-TMSI'(Data);
encode_disp('SupportedTAs-Item',Data) -> 'enc_SupportedTAs-Item'(Data);
encode_disp('SupportedTAs',Data) -> 'enc_SupportedTAs'(Data);
encode_disp('SubscriberProfileIDforRFP',Data) -> 'enc_SubscriberProfileIDforRFP'(Data);
encode_disp('ServedPLMNs',Data) -> 'enc_ServedPLMNs'(Data);
encode_disp('ServedMMECs',Data) -> 'enc_ServedMMECs'(Data);
encode_disp('ServedGroupIDs',Data) -> 'enc_ServedGroupIDs'(Data);
encode_disp('ServedGUMMEIsItem',Data) -> 'enc_ServedGUMMEIsItem'(Data);
encode_disp('ServedGUMMEIs',Data) -> 'enc_ServedGUMMEIs'(Data);
encode_disp('SourceRNC-ToTargetRNC-TransparentContainer',Data) -> 'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Data);
encode_disp('SourceeNB-ToTargeteNB-TransparentContainer',Data) -> 'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Data);
encode_disp('SRVCCHOIndication',Data) -> 'enc_SRVCCHOIndication'(Data);
encode_disp('SRVCCOperationPossible',Data) -> 'enc_SRVCCOperationPossible'(Data);
encode_disp('SourceeNB-ID',Data) -> 'enc_SourceeNB-ID'(Data);
encode_disp('SourceBSS-ToTargetBSS-TransparentContainer',Data) -> 'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Data);
encode_disp('Source-ToTarget-TransparentContainer',Data) -> 'enc_Source-ToTarget-TransparentContainer'(Data);
encode_disp('SONConfigurationTransfer',Data) -> 'enc_SONConfigurationTransfer'(Data);
encode_disp('SONInformationReply',Data) -> 'enc_SONInformationReply'(Data);
encode_disp('SONInformationRequest',Data) -> 'enc_SONInformationRequest'(Data);
encode_disp('SONInformation',Data) -> 'enc_SONInformation'(Data);
encode_disp('SerialNumber',Data) -> 'enc_SerialNumber'(Data);
encode_disp('SecurityContext',Data) -> 'enc_SecurityContext'(Data);
encode_disp('SecurityKey',Data) -> 'enc_SecurityKey'(Data);
encode_disp('RRC-Establishment-Cause',Data) -> 'enc_RRC-Establishment-Cause'(Data);
encode_disp('RRC-Container',Data) -> 'enc_RRC-Container'(Data);
encode_disp('RNC-ID',Data) -> 'enc_RNC-ID'(Data);
encode_disp('RepetitionPeriod',Data) -> 'enc_RepetitionPeriod'(Data);
encode_disp('ReportArea',Data) -> 'enc_ReportArea'(Data);
encode_disp('RIMRoutingAddress',Data) -> 'enc_RIMRoutingAddress'(Data);
encode_disp('RIMInformation',Data) -> 'enc_RIMInformation'(Data);
encode_disp('RIMTransfer',Data) -> 'enc_RIMTransfer'(Data);
encode_disp('RequestType',Data) -> 'enc_RequestType'(Data);
encode_disp('RAC',Data) -> 'enc_RAC'(Data);
encode_disp('RelativeMMECapacity',Data) -> 'enc_RelativeMMECapacity'(Data);
encode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'enc_ReceiveStatusofULPDCPSDUs'(Data);
encode_disp('QCI',Data) -> 'enc_QCI'(Data);
encode_disp('PriorityLevel',Data) -> 'enc_PriorityLevel'(Data);
encode_disp('Pre-emptionVulnerability',Data) -> 'enc_Pre-emptionVulnerability'(Data);
encode_disp('Pre-emptionCapability',Data) -> 'enc_Pre-emptionCapability'(Data);
encode_disp('PLMNidentity',Data) -> 'enc_PLMNidentity'(Data);
encode_disp('PDCP-SN',Data) -> 'enc_PDCP-SN'(Data);
encode_disp('PagingDRX',Data) -> 'enc_PagingDRX'(Data);
encode_disp('OverloadResponse',Data) -> 'enc_OverloadResponse'(Data);
encode_disp('OverloadAction',Data) -> 'enc_OverloadAction'(Data);
encode_disp('OldBSS-ToNewBSS-Information',Data) -> 'enc_OldBSS-ToNewBSS-Information'(Data);
encode_disp('NumberofBroadcast',Data) -> 'enc_NumberofBroadcast'(Data);
encode_disp('NumberofBroadcastRequest',Data) -> 'enc_NumberofBroadcastRequest'(Data);
encode_disp('NASSecurityParameterstoE-UTRAN',Data) -> 'enc_NASSecurityParameterstoE-UTRAN'(Data);
encode_disp('NASSecurityParametersfromE-UTRAN',Data) -> 'enc_NASSecurityParametersfromE-UTRAN'(Data);
encode_disp('NAS-PDU',Data) -> 'enc_NAS-PDU'(Data);
encode_disp('MSClassmark3',Data) -> 'enc_MSClassmark3'(Data);
encode_disp('MSClassmark2',Data) -> 'enc_MSClassmark2'(Data);
encode_disp('M-TMSI',Data) -> 'enc_M-TMSI'(Data);
encode_disp('MME-UE-S1AP-ID',Data) -> 'enc_MME-UE-S1AP-ID'(Data);
encode_disp('MME-Code',Data) -> 'enc_MME-Code'(Data);
encode_disp('MME-Group-ID',Data) -> 'enc_MME-Group-ID'(Data);
encode_disp('MMEname',Data) -> 'enc_MMEname'(Data);
encode_disp('MessageIdentifier',Data) -> 'enc_MessageIdentifier'(Data);
encode_disp('L3-Information',Data) -> 'enc_L3-Information'(Data);
encode_disp('LastVisitedGERANCellInformation',Data) -> 'enc_LastVisitedGERANCellInformation'(Data);
encode_disp('LastVisitedUTRANCellInformation',Data) -> 'enc_LastVisitedUTRANCellInformation'(Data);
encode_disp('LastVisitedEUTRANCellInformation',Data) -> 'enc_LastVisitedEUTRANCellInformation'(Data);
encode_disp('LastVisitedCell-Item',Data) -> 'enc_LastVisitedCell-Item'(Data);
encode_disp('LAI',Data) -> 'enc_LAI'(Data);
encode_disp('LAC',Data) -> 'enc_LAC'(Data);
encode_disp('InterfacesToTrace',Data) -> 'enc_InterfacesToTrace'(Data);
encode_disp('IntegrityProtectionAlgorithms',Data) -> 'enc_IntegrityProtectionAlgorithms'(Data);
encode_disp('IMSI',Data) -> 'enc_IMSI'(Data);
encode_disp('HFN',Data) -> 'enc_HFN'(Data);
encode_disp('HandoverType',Data) -> 'enc_HandoverType'(Data);
encode_disp('HandoverRestrictionList',Data) -> 'enc_HandoverRestrictionList'(Data);
encode_disp('GUMMEI',Data) -> 'enc_GUMMEI'(Data);
encode_disp('GTP-TEID',Data) -> 'enc_GTP-TEID'(Data);
encode_disp('GBR-QosInformation',Data) -> 'enc_GBR-QosInformation'(Data);
encode_disp('ForbiddenLACs',Data) -> 'enc_ForbiddenLACs'(Data);
encode_disp('ForbiddenLAs-Item',Data) -> 'enc_ForbiddenLAs-Item'(Data);
encode_disp('ForbiddenLAs',Data) -> 'enc_ForbiddenLAs'(Data);
encode_disp('ForbiddenTACs',Data) -> 'enc_ForbiddenTACs'(Data);
encode_disp('ForbiddenTAs-Item',Data) -> 'enc_ForbiddenTAs-Item'(Data);
encode_disp('ForbiddenTAs',Data) -> 'enc_ForbiddenTAs'(Data);
encode_disp('ForbiddenInterRATs',Data) -> 'enc_ForbiddenInterRATs'(Data);
encode_disp('ExtendedRNC-ID',Data) -> 'enc_ExtendedRNC-ID'(Data);
encode_disp('EUTRAN-CGI',Data) -> 'enc_EUTRAN-CGI'(Data);
encode_disp('E-RABLevelQoSParameters',Data) -> 'enc_E-RABLevelQoSParameters'(Data);
encode_disp('E-RABItem',Data) -> 'enc_E-RABItem'(Data);
encode_disp('E-RABList',Data) -> 'enc_E-RABList'(Data);
encode_disp('E-RABInformationListItem',Data) -> 'enc_E-RABInformationListItem'(Data);
encode_disp('E-RABInformationList',Data) -> 'enc_E-RABInformationList'(Data);
encode_disp('E-RAB-ID',Data) -> 'enc_E-RAB-ID'(Data);
encode_disp('EventType',Data) -> 'enc_EventType'(Data);
encode_disp('EPLMNs',Data) -> 'enc_EPLMNs'(Data);
encode_disp('EncryptionAlgorithms',Data) -> 'enc_EncryptionAlgorithms'(Data);
encode_disp('ENBX2TLAs',Data) -> 'enc_ENBX2TLAs'(Data);
encode_disp('ENBname',Data) -> 'enc_ENBname'(Data);
encode_disp('ENB-UE-S1AP-ID',Data) -> 'enc_ENB-UE-S1AP-ID'(Data);
encode_disp('ENB-StatusTransfer-TransparentContainer',Data) -> 'enc_ENB-StatusTransfer-TransparentContainer'(Data);
encode_disp('Global-ENB-ID',Data) -> 'enc_Global-ENB-ID'(Data);
encode_disp('GERAN-Cell-ID',Data) -> 'enc_GERAN-Cell-ID'(Data);
encode_disp('ENB-ID',Data) -> 'enc_ENB-ID'(Data);
encode_disp('CompletedCellinEAI-Item',Data) -> 'enc_CompletedCellinEAI-Item'(Data);
encode_disp('CompletedCellinEAI',Data) -> 'enc_CompletedCellinEAI'(Data);
encode_disp('EmergencyAreaID-Broadcast-Item',Data) -> 'enc_EmergencyAreaID-Broadcast-Item'(Data);
encode_disp('EmergencyAreaID-Broadcast',Data) -> 'enc_EmergencyAreaID-Broadcast'(Data);
encode_disp('EmergencyAreaID',Data) -> 'enc_EmergencyAreaID'(Data);
encode_disp('EmergencyAreaIDList',Data) -> 'enc_EmergencyAreaIDList'(Data);
encode_disp('ECGIList',Data) -> 'enc_ECGIList'(Data);
encode_disp('Direct-Forwarding-Path-Availability',Data) -> 'enc_Direct-Forwarding-Path-Availability'(Data);
encode_disp('DL-Forwarding',Data) -> 'enc_DL-Forwarding'(Data);
encode_disp('DataCodingScheme',Data) -> 'enc_DataCodingScheme'(Data);
encode_disp('CriticalityDiagnostics-IE-Item',Data) -> 'enc_CriticalityDiagnostics-IE-Item'(Data);
encode_disp('CriticalityDiagnostics-IE-List',Data) -> 'enc_CriticalityDiagnostics-IE-List'(Data);
encode_disp('CriticalityDiagnostics',Data) -> 'enc_CriticalityDiagnostics'(Data);
encode_disp('COUNTvalue',Data) -> 'enc_COUNTvalue'(Data);
encode_disp('CSG-IdList-Item',Data) -> 'enc_CSG-IdList-Item'(Data);
encode_disp('CSG-IdList',Data) -> 'enc_CSG-IdList'(Data);
encode_disp('CSG-Id',Data) -> 'enc_CSG-Id'(Data);
encode_disp('CSFallbackIndicator',Data) -> 'enc_CSFallbackIndicator'(Data);
encode_disp('CNDomain',Data) -> 'enc_CNDomain'(Data);
encode_disp('CI',Data) -> 'enc_CI'(Data);
encode_disp('CGI',Data) -> 'enc_CGI'(Data);
encode_disp('CellType',Data) -> 'enc_CellType'(Data);
encode_disp('Cell-Size',Data) -> 'enc_Cell-Size'(Data);
encode_disp('Cdma2000OneXRAND',Data) -> 'enc_Cdma2000OneXRAND'(Data);
encode_disp('Cdma2000OneXPilot',Data) -> 'enc_Cdma2000OneXPilot'(Data);
encode_disp('Cdma2000OneXMSI',Data) -> 'enc_Cdma2000OneXMSI'(Data);
encode_disp('Cdma2000OneXMEID',Data) -> 'enc_Cdma2000OneXMEID'(Data);
encode_disp('Cdma2000OneXSRVCCInfo',Data) -> 'enc_Cdma2000OneXSRVCCInfo'(Data);
encode_disp('Cdma2000HORequiredIndication',Data) -> 'enc_Cdma2000HORequiredIndication'(Data);
encode_disp('Cdma2000HOStatus',Data) -> 'enc_Cdma2000HOStatus'(Data);
encode_disp('Cdma2000SectorID',Data) -> 'enc_Cdma2000SectorID'(Data);
encode_disp('Cdma2000RATType',Data) -> 'enc_Cdma2000RATType'(Data);
encode_disp('Cdma2000PDU',Data) -> 'enc_Cdma2000PDU'(Data);
encode_disp('CellID-Broadcast-Item',Data) -> 'enc_CellID-Broadcast-Item'(Data);
encode_disp('CellID-Broadcast',Data) -> 'enc_CellID-Broadcast'(Data);
encode_disp('CellIdentity',Data) -> 'enc_CellIdentity'(Data);
encode_disp('CauseNas',Data) -> 'enc_CauseNas'(Data);
encode_disp('CauseTransport',Data) -> 'enc_CauseTransport'(Data);
encode_disp('CauseRadioNetwork',Data) -> 'enc_CauseRadioNetwork'(Data);
encode_disp('CauseProtocol',Data) -> 'enc_CauseProtocol'(Data);
encode_disp('CauseMisc',Data) -> 'enc_CauseMisc'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('BroadcastCompletedAreaList',Data) -> 'enc_BroadcastCompletedAreaList'(Data);
encode_disp('BPLMNs',Data) -> 'enc_BPLMNs'(Data);
encode_disp('BitRate',Data) -> 'enc_BitRate'(Data);
encode_disp('Bearers-SubjectToStatusTransfer-Item',Data) -> 'enc_Bearers-SubjectToStatusTransfer-Item'(Data);
encode_disp('Bearers-SubjectToStatusTransferList',Data) -> 'enc_Bearers-SubjectToStatusTransferList'(Data);
encode_disp('AllocationAndRetentionPriority',Data) -> 'enc_AllocationAndRetentionPriority'(Data);
encode_disp('TriggeringMessage',Data) -> 'enc_TriggeringMessage'(Data);
encode_disp('ProtocolIE-ID',Data) -> 'enc_ProtocolIE-ID'(Data);
encode_disp('ProtocolExtensionID',Data) -> 'enc_ProtocolExtensionID'(Data);
encode_disp('ProcedureCode',Data) -> 'enc_ProcedureCode'(Data);
encode_disp('PrivateIE-ID',Data) -> 'enc_PrivateIE-ID'(Data);
encode_disp('Presence',Data) -> 'enc_Presence'(Data);
encode_disp('Criticality',Data) -> 'enc_Criticality'(Data);
encode_disp('PrivateMessage',Data) -> 'enc_PrivateMessage'(Data);
encode_disp('MMEConfigurationTransfer',Data) -> 'enc_MMEConfigurationTransfer'(Data);
encode_disp('ENBConfigurationTransfer',Data) -> 'enc_ENBConfigurationTransfer'(Data);
encode_disp('MMEDirectInformationTransfer',Data) -> 'enc_MMEDirectInformationTransfer'(Data);
encode_disp('Inter-SystemInformationTransferType',Data) -> 'enc_Inter-SystemInformationTransferType'(Data);
encode_disp('ENBDirectInformationTransfer',Data) -> 'enc_ENBDirectInformationTransfer'(Data);
encode_disp('WriteReplaceWarningResponse',Data) -> 'enc_WriteReplaceWarningResponse'(Data);
encode_disp('WriteReplaceWarningRequest',Data) -> 'enc_WriteReplaceWarningRequest'(Data);
encode_disp('OverloadStop',Data) -> 'enc_OverloadStop'(Data);
encode_disp('OverloadStart',Data) -> 'enc_OverloadStart'(Data);
encode_disp('LocationReport',Data) -> 'enc_LocationReport'(Data);
encode_disp('LocationReportingFailureIndication',Data) -> 'enc_LocationReportingFailureIndication'(Data);
encode_disp('LocationReportingControl',Data) -> 'enc_LocationReportingControl'(Data);
encode_disp('CellTrafficTrace',Data) -> 'enc_CellTrafficTrace'(Data);
encode_disp('DeactivateTrace',Data) -> 'enc_DeactivateTrace'(Data);
encode_disp('TraceFailureIndication',Data) -> 'enc_TraceFailureIndication'(Data);
encode_disp('TraceStart',Data) -> 'enc_TraceStart'(Data);
encode_disp('MMEStatusTransfer',Data) -> 'enc_MMEStatusTransfer'(Data);
encode_disp('ENBStatusTransfer',Data) -> 'enc_ENBStatusTransfer'(Data);
encode_disp('UECapabilityInfoIndication',Data) -> 'enc_UECapabilityInfoIndication'(Data);
encode_disp('UplinkS1cdma2000tunneling',Data) -> 'enc_UplinkS1cdma2000tunneling'(Data);
encode_disp('DownlinkS1cdma2000tunneling',Data) -> 'enc_DownlinkS1cdma2000tunneling'(Data);
encode_disp('MMEConfigurationUpdateFailure',Data) -> 'enc_MMEConfigurationUpdateFailure'(Data);
encode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'enc_MMEConfigurationUpdateAcknowledge'(Data);
encode_disp('MMEConfigurationUpdate',Data) -> 'enc_MMEConfigurationUpdate'(Data);
encode_disp('ENBConfigurationUpdateFailure',Data) -> 'enc_ENBConfigurationUpdateFailure'(Data);
encode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'enc_ENBConfigurationUpdateAcknowledge'(Data);
encode_disp('ENBConfigurationUpdate',Data) -> 'enc_ENBConfigurationUpdate'(Data);
encode_disp('S1SetupFailure',Data) -> 'enc_S1SetupFailure'(Data);
encode_disp('S1SetupResponse',Data) -> 'enc_S1SetupResponse'(Data);
encode_disp('S1SetupRequest',Data) -> 'enc_S1SetupRequest'(Data);
encode_disp('ErrorIndication',Data) -> 'enc_ErrorIndication'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListResAck'(Data);
encode_disp('ResetAcknowledge',Data) -> 'enc_ResetAcknowledge'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListRes'(Data);
encode_disp('ResetAll',Data) -> 'enc_ResetAll'(Data);
encode_disp('ResetType',Data) -> 'enc_ResetType'(Data);
encode_disp('Reset',Data) -> 'enc_Reset'(Data);
encode_disp('NASNonDeliveryIndication',Data) -> 'enc_NASNonDeliveryIndication'(Data);
encode_disp('UplinkNASTransport',Data) -> 'enc_UplinkNASTransport'(Data);
encode_disp('InitialUEMessage',Data) -> 'enc_InitialUEMessage'(Data);
encode_disp('DownlinkNASTransport',Data) -> 'enc_DownlinkNASTransport'(Data);
encode_disp('UEContextModificationFailure',Data) -> 'enc_UEContextModificationFailure'(Data);
encode_disp('UEContextModificationResponse',Data) -> 'enc_UEContextModificationResponse'(Data);
encode_disp('UEContextModificationRequest',Data) -> 'enc_UEContextModificationRequest'(Data);
encode_disp('UEContextReleaseComplete',Data) -> 'enc_UEContextReleaseComplete'(Data);
encode_disp('UEContextReleaseCommand',Data) -> 'enc_UEContextReleaseCommand'(Data);
encode_disp('UEContextReleaseRequest',Data) -> 'enc_UEContextReleaseRequest'(Data);
encode_disp('TAIItem',Data) -> 'enc_TAIItem'(Data);
encode_disp('TAIList',Data) -> 'enc_TAIList'(Data);
encode_disp('Paging',Data) -> 'enc_Paging'(Data);
encode_disp('InitialContextSetupFailure',Data) -> 'enc_InitialContextSetupFailure'(Data);
encode_disp('E-RABSetupItemCtxtSURes',Data) -> 'enc_E-RABSetupItemCtxtSURes'(Data);
encode_disp('E-RABSetupListCtxtSURes',Data) -> 'enc_E-RABSetupListCtxtSURes'(Data);
encode_disp('InitialContextSetupResponse',Data) -> 'enc_InitialContextSetupResponse'(Data);
encode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'enc_E-RABToBeSetupItemCtxtSUReq'(Data);
encode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'enc_E-RABToBeSetupListCtxtSUReq'(Data);
encode_disp('InitialContextSetupRequest',Data) -> 'enc_InitialContextSetupRequest'(Data);
encode_disp('E-RABReleaseIndication',Data) -> 'enc_E-RABReleaseIndication'(Data);
encode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'enc_E-RABReleaseItemBearerRelComp'(Data);
encode_disp('E-RABReleaseListBearerRelComp',Data) -> 'enc_E-RABReleaseListBearerRelComp'(Data);
encode_disp('E-RABReleaseResponse',Data) -> 'enc_E-RABReleaseResponse'(Data);
encode_disp('E-RABReleaseCommand',Data) -> 'enc_E-RABReleaseCommand'(Data);
encode_disp('E-RABModifyItemBearerModRes',Data) -> 'enc_E-RABModifyItemBearerModRes'(Data);
encode_disp('E-RABModifyListBearerModRes',Data) -> 'enc_E-RABModifyListBearerModRes'(Data);
encode_disp('E-RABModifyResponse',Data) -> 'enc_E-RABModifyResponse'(Data);
encode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'enc_E-RABToBeModifiedItemBearerModReq'(Data);
encode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'enc_E-RABToBeModifiedListBearerModReq'(Data);
encode_disp('E-RABModifyRequest',Data) -> 'enc_E-RABModifyRequest'(Data);
encode_disp('E-RABSetupItemBearerSURes',Data) -> 'enc_E-RABSetupItemBearerSURes'(Data);
encode_disp('E-RABSetupListBearerSURes',Data) -> 'enc_E-RABSetupListBearerSURes'(Data);
encode_disp('E-RABSetupResponse',Data) -> 'enc_E-RABSetupResponse'(Data);
encode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'enc_E-RABToBeSetupItemBearerSUReq'(Data);
encode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'enc_E-RABToBeSetupListBearerSUReq'(Data);
encode_disp('E-RABSetupRequest',Data) -> 'enc_E-RABSetupRequest'(Data);
encode_disp('HandoverCancelAcknowledge',Data) -> 'enc_HandoverCancelAcknowledge'(Data);
encode_disp('HandoverCancel',Data) -> 'enc_HandoverCancel'(Data);
encode_disp('PathSwitchRequestFailure',Data) -> 'enc_PathSwitchRequestFailure'(Data);
encode_disp('E-RABToBeSwitchedULItem',Data) -> 'enc_E-RABToBeSwitchedULItem'(Data);
encode_disp('E-RABToBeSwitchedULList',Data) -> 'enc_E-RABToBeSwitchedULList'(Data);
encode_disp('PathSwitchRequestAcknowledge',Data) -> 'enc_PathSwitchRequestAcknowledge'(Data);
encode_disp('E-RABToBeSwitchedDLItem',Data) -> 'enc_E-RABToBeSwitchedDLItem'(Data);
encode_disp('E-RABToBeSwitchedDLList',Data) -> 'enc_E-RABToBeSwitchedDLList'(Data);
encode_disp('PathSwitchRequest',Data) -> 'enc_PathSwitchRequest'(Data);
encode_disp('HandoverNotify',Data) -> 'enc_HandoverNotify'(Data);
encode_disp('HandoverFailure',Data) -> 'enc_HandoverFailure'(Data);
encode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'enc_E-RABFailedToSetupItemHOReqAck'(Data);
encode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'enc_E-RABFailedtoSetupListHOReqAck'(Data);
encode_disp('E-RABAdmittedItem',Data) -> 'enc_E-RABAdmittedItem'(Data);
encode_disp('E-RABAdmittedList',Data) -> 'enc_E-RABAdmittedList'(Data);
encode_disp('HandoverRequestAcknowledge',Data) -> 'enc_HandoverRequestAcknowledge'(Data);
encode_disp('E-RABToBeSetupItemHOReq',Data) -> 'enc_E-RABToBeSetupItemHOReq'(Data);
encode_disp('E-RABToBeSetupListHOReq',Data) -> 'enc_E-RABToBeSetupListHOReq'(Data);
encode_disp('HandoverRequest',Data) -> 'enc_HandoverRequest'(Data);
encode_disp('HandoverPreparationFailure',Data) -> 'enc_HandoverPreparationFailure'(Data);
encode_disp('E-RABDataForwardingItem',Data) -> 'enc_E-RABDataForwardingItem'(Data);
encode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'enc_E-RABSubjecttoDataForwardingList'(Data);
encode_disp('HandoverCommand',Data) -> 'enc_HandoverCommand'(Data);
encode_disp('HandoverRequired',Data) -> 'enc_HandoverRequired'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('UnsuccessfulOutcome',Data) -> 'dec_UnsuccessfulOutcome'(Data);
decode_disp('SuccessfulOutcome',Data) -> 'dec_SuccessfulOutcome'(Data);
decode_disp('InitiatingMessage',Data) -> 'dec_InitiatingMessage'(Data);
decode_disp('S1AP-PDU',Data) -> 'dec_S1AP-PDU'(Data);
decode_disp('X2TNLConfigurationInfo',Data) -> 'dec_X2TNLConfigurationInfo'(Data);
decode_disp('WarningMessageContents',Data) -> 'dec_WarningMessageContents'(Data);
decode_disp('WarningSecurityInfo',Data) -> 'dec_WarningSecurityInfo'(Data);
decode_disp('WarningType',Data) -> 'dec_WarningType'(Data);
decode_disp('WarningAreaList',Data) -> 'dec_WarningAreaList'(Data);
decode_disp('UESecurityCapabilities',Data) -> 'dec_UESecurityCapabilities'(Data);
decode_disp('UERadioCapability',Data) -> 'dec_UERadioCapability'(Data);
decode_disp('UEPagingID',Data) -> 'dec_UEPagingID'(Data);
decode_disp('UE-HistoryInformation',Data) -> 'dec_UE-HistoryInformation'(Data);
decode_disp('UEIdentityIndexValue',Data) -> 'dec_UEIdentityIndexValue'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionItem',Data) -> 'dec_UE-associatedLogicalS1-ConnectionItem'(Data);
decode_disp('UE-S1AP-ID-pair',Data) -> 'dec_UE-S1AP-ID-pair'(Data);
decode_disp('UE-S1AP-IDs',Data) -> 'dec_UE-S1AP-IDs'(Data);
decode_disp('UEAggregateMaximumBitrate',Data) -> 'dec_UEAggregateMaximumBitrate'(Data);
decode_disp('TypeOfError',Data) -> 'dec_TypeOfError'(Data);
decode_disp('E-UTRAN-Trace-ID',Data) -> 'dec_E-UTRAN-Trace-ID'(Data);
decode_disp('TraceDepth',Data) -> 'dec_TraceDepth'(Data);
decode_disp('TraceActivation',Data) -> 'dec_TraceActivation'(Data);
decode_disp('TransportLayerAddress',Data) -> 'dec_TransportLayerAddress'(Data);
decode_disp('Time-UE-StayedInCell',Data) -> 'dec_Time-UE-StayedInCell'(Data);
decode_disp('TimeToWait',Data) -> 'dec_TimeToWait'(Data);
decode_disp('TargetBSS-ToSourceBSS-TransparentContainer',Data) -> 'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Data);
decode_disp('TargetRNC-ToSourceRNC-TransparentContainer',Data) -> 'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Data);
decode_disp('Target-ToSource-TransparentContainer',Data) -> 'dec_Target-ToSource-TransparentContainer'(Data);
decode_disp('TargeteNB-ToSourceeNB-TransparentContainer',Data) -> 'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Data);
decode_disp('TargetRNC-ID',Data) -> 'dec_TargetRNC-ID'(Data);
decode_disp('TargeteNB-ID',Data) -> 'dec_TargeteNB-ID'(Data);
decode_disp('TargetID',Data) -> 'dec_TargetID'(Data);
decode_disp('TBCD-STRING',Data) -> 'dec_TBCD-STRING'(Data);
decode_disp('CompletedCellinTAI-Item',Data) -> 'dec_CompletedCellinTAI-Item'(Data);
decode_disp('CompletedCellinTAI',Data) -> 'dec_CompletedCellinTAI'(Data);
decode_disp('TAI-Broadcast-Item',Data) -> 'dec_TAI-Broadcast-Item'(Data);
decode_disp('TAI-Broadcast',Data) -> 'dec_TAI-Broadcast'(Data);
decode_disp('TAI',Data) -> 'dec_TAI'(Data);
decode_disp('TAIListforWarning',Data) -> 'dec_TAIListforWarning'(Data);
decode_disp('TAC',Data) -> 'dec_TAC'(Data);
decode_disp('S-TMSI',Data) -> 'dec_S-TMSI'(Data);
decode_disp('SupportedTAs-Item',Data) -> 'dec_SupportedTAs-Item'(Data);
decode_disp('SupportedTAs',Data) -> 'dec_SupportedTAs'(Data);
decode_disp('SubscriberProfileIDforRFP',Data) -> 'dec_SubscriberProfileIDforRFP'(Data);
decode_disp('ServedPLMNs',Data) -> 'dec_ServedPLMNs'(Data);
decode_disp('ServedMMECs',Data) -> 'dec_ServedMMECs'(Data);
decode_disp('ServedGroupIDs',Data) -> 'dec_ServedGroupIDs'(Data);
decode_disp('ServedGUMMEIsItem',Data) -> 'dec_ServedGUMMEIsItem'(Data);
decode_disp('ServedGUMMEIs',Data) -> 'dec_ServedGUMMEIs'(Data);
decode_disp('SourceRNC-ToTargetRNC-TransparentContainer',Data) -> 'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Data);
decode_disp('SourceeNB-ToTargeteNB-TransparentContainer',Data) -> 'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Data);
decode_disp('SRVCCHOIndication',Data) -> 'dec_SRVCCHOIndication'(Data);
decode_disp('SRVCCOperationPossible',Data) -> 'dec_SRVCCOperationPossible'(Data);
decode_disp('SourceeNB-ID',Data) -> 'dec_SourceeNB-ID'(Data);
decode_disp('SourceBSS-ToTargetBSS-TransparentContainer',Data) -> 'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Data);
decode_disp('Source-ToTarget-TransparentContainer',Data) -> 'dec_Source-ToTarget-TransparentContainer'(Data);
decode_disp('SONConfigurationTransfer',Data) -> 'dec_SONConfigurationTransfer'(Data);
decode_disp('SONInformationReply',Data) -> 'dec_SONInformationReply'(Data);
decode_disp('SONInformationRequest',Data) -> 'dec_SONInformationRequest'(Data);
decode_disp('SONInformation',Data) -> 'dec_SONInformation'(Data);
decode_disp('SerialNumber',Data) -> 'dec_SerialNumber'(Data);
decode_disp('SecurityContext',Data) -> 'dec_SecurityContext'(Data);
decode_disp('SecurityKey',Data) -> 'dec_SecurityKey'(Data);
decode_disp('RRC-Establishment-Cause',Data) -> 'dec_RRC-Establishment-Cause'(Data);
decode_disp('RRC-Container',Data) -> 'dec_RRC-Container'(Data);
decode_disp('RNC-ID',Data) -> 'dec_RNC-ID'(Data);
decode_disp('RepetitionPeriod',Data) -> 'dec_RepetitionPeriod'(Data);
decode_disp('ReportArea',Data) -> 'dec_ReportArea'(Data);
decode_disp('RIMRoutingAddress',Data) -> 'dec_RIMRoutingAddress'(Data);
decode_disp('RIMInformation',Data) -> 'dec_RIMInformation'(Data);
decode_disp('RIMTransfer',Data) -> 'dec_RIMTransfer'(Data);
decode_disp('RequestType',Data) -> 'dec_RequestType'(Data);
decode_disp('RAC',Data) -> 'dec_RAC'(Data);
decode_disp('RelativeMMECapacity',Data) -> 'dec_RelativeMMECapacity'(Data);
decode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'dec_ReceiveStatusofULPDCPSDUs'(Data);
decode_disp('QCI',Data) -> 'dec_QCI'(Data);
decode_disp('PriorityLevel',Data) -> 'dec_PriorityLevel'(Data);
decode_disp('Pre-emptionVulnerability',Data) -> 'dec_Pre-emptionVulnerability'(Data);
decode_disp('Pre-emptionCapability',Data) -> 'dec_Pre-emptionCapability'(Data);
decode_disp('PLMNidentity',Data) -> 'dec_PLMNidentity'(Data);
decode_disp('PDCP-SN',Data) -> 'dec_PDCP-SN'(Data);
decode_disp('PagingDRX',Data) -> 'dec_PagingDRX'(Data);
decode_disp('OverloadResponse',Data) -> 'dec_OverloadResponse'(Data);
decode_disp('OverloadAction',Data) -> 'dec_OverloadAction'(Data);
decode_disp('OldBSS-ToNewBSS-Information',Data) -> 'dec_OldBSS-ToNewBSS-Information'(Data);
decode_disp('NumberofBroadcast',Data) -> 'dec_NumberofBroadcast'(Data);
decode_disp('NumberofBroadcastRequest',Data) -> 'dec_NumberofBroadcastRequest'(Data);
decode_disp('NASSecurityParameterstoE-UTRAN',Data) -> 'dec_NASSecurityParameterstoE-UTRAN'(Data);
decode_disp('NASSecurityParametersfromE-UTRAN',Data) -> 'dec_NASSecurityParametersfromE-UTRAN'(Data);
decode_disp('NAS-PDU',Data) -> 'dec_NAS-PDU'(Data);
decode_disp('MSClassmark3',Data) -> 'dec_MSClassmark3'(Data);
decode_disp('MSClassmark2',Data) -> 'dec_MSClassmark2'(Data);
decode_disp('M-TMSI',Data) -> 'dec_M-TMSI'(Data);
decode_disp('MME-UE-S1AP-ID',Data) -> 'dec_MME-UE-S1AP-ID'(Data);
decode_disp('MME-Code',Data) -> 'dec_MME-Code'(Data);
decode_disp('MME-Group-ID',Data) -> 'dec_MME-Group-ID'(Data);
decode_disp('MMEname',Data) -> 'dec_MMEname'(Data);
decode_disp('MessageIdentifier',Data) -> 'dec_MessageIdentifier'(Data);
decode_disp('L3-Information',Data) -> 'dec_L3-Information'(Data);
decode_disp('LastVisitedGERANCellInformation',Data) -> 'dec_LastVisitedGERANCellInformation'(Data);
decode_disp('LastVisitedUTRANCellInformation',Data) -> 'dec_LastVisitedUTRANCellInformation'(Data);
decode_disp('LastVisitedEUTRANCellInformation',Data) -> 'dec_LastVisitedEUTRANCellInformation'(Data);
decode_disp('LastVisitedCell-Item',Data) -> 'dec_LastVisitedCell-Item'(Data);
decode_disp('LAI',Data) -> 'dec_LAI'(Data);
decode_disp('LAC',Data) -> 'dec_LAC'(Data);
decode_disp('InterfacesToTrace',Data) -> 'dec_InterfacesToTrace'(Data);
decode_disp('IntegrityProtectionAlgorithms',Data) -> 'dec_IntegrityProtectionAlgorithms'(Data);
decode_disp('IMSI',Data) -> 'dec_IMSI'(Data);
decode_disp('HFN',Data) -> 'dec_HFN'(Data);
decode_disp('HandoverType',Data) -> 'dec_HandoverType'(Data);
decode_disp('HandoverRestrictionList',Data) -> 'dec_HandoverRestrictionList'(Data);
decode_disp('GUMMEI',Data) -> 'dec_GUMMEI'(Data);
decode_disp('GTP-TEID',Data) -> 'dec_GTP-TEID'(Data);
decode_disp('GBR-QosInformation',Data) -> 'dec_GBR-QosInformation'(Data);
decode_disp('ForbiddenLACs',Data) -> 'dec_ForbiddenLACs'(Data);
decode_disp('ForbiddenLAs-Item',Data) -> 'dec_ForbiddenLAs-Item'(Data);
decode_disp('ForbiddenLAs',Data) -> 'dec_ForbiddenLAs'(Data);
decode_disp('ForbiddenTACs',Data) -> 'dec_ForbiddenTACs'(Data);
decode_disp('ForbiddenTAs-Item',Data) -> 'dec_ForbiddenTAs-Item'(Data);
decode_disp('ForbiddenTAs',Data) -> 'dec_ForbiddenTAs'(Data);
decode_disp('ForbiddenInterRATs',Data) -> 'dec_ForbiddenInterRATs'(Data);
decode_disp('ExtendedRNC-ID',Data) -> 'dec_ExtendedRNC-ID'(Data);
decode_disp('EUTRAN-CGI',Data) -> 'dec_EUTRAN-CGI'(Data);
decode_disp('E-RABLevelQoSParameters',Data) -> 'dec_E-RABLevelQoSParameters'(Data);
decode_disp('E-RABItem',Data) -> 'dec_E-RABItem'(Data);
decode_disp('E-RABList',Data) -> 'dec_E-RABList'(Data);
decode_disp('E-RABInformationListItem',Data) -> 'dec_E-RABInformationListItem'(Data);
decode_disp('E-RABInformationList',Data) -> 'dec_E-RABInformationList'(Data);
decode_disp('E-RAB-ID',Data) -> 'dec_E-RAB-ID'(Data);
decode_disp('EventType',Data) -> 'dec_EventType'(Data);
decode_disp('EPLMNs',Data) -> 'dec_EPLMNs'(Data);
decode_disp('EncryptionAlgorithms',Data) -> 'dec_EncryptionAlgorithms'(Data);
decode_disp('ENBX2TLAs',Data) -> 'dec_ENBX2TLAs'(Data);
decode_disp('ENBname',Data) -> 'dec_ENBname'(Data);
decode_disp('ENB-UE-S1AP-ID',Data) -> 'dec_ENB-UE-S1AP-ID'(Data);
decode_disp('ENB-StatusTransfer-TransparentContainer',Data) -> 'dec_ENB-StatusTransfer-TransparentContainer'(Data);
decode_disp('Global-ENB-ID',Data) -> 'dec_Global-ENB-ID'(Data);
decode_disp('GERAN-Cell-ID',Data) -> 'dec_GERAN-Cell-ID'(Data);
decode_disp('ENB-ID',Data) -> 'dec_ENB-ID'(Data);
decode_disp('CompletedCellinEAI-Item',Data) -> 'dec_CompletedCellinEAI-Item'(Data);
decode_disp('CompletedCellinEAI',Data) -> 'dec_CompletedCellinEAI'(Data);
decode_disp('EmergencyAreaID-Broadcast-Item',Data) -> 'dec_EmergencyAreaID-Broadcast-Item'(Data);
decode_disp('EmergencyAreaID-Broadcast',Data) -> 'dec_EmergencyAreaID-Broadcast'(Data);
decode_disp('EmergencyAreaID',Data) -> 'dec_EmergencyAreaID'(Data);
decode_disp('EmergencyAreaIDList',Data) -> 'dec_EmergencyAreaIDList'(Data);
decode_disp('ECGIList',Data) -> 'dec_ECGIList'(Data);
decode_disp('Direct-Forwarding-Path-Availability',Data) -> 'dec_Direct-Forwarding-Path-Availability'(Data);
decode_disp('DL-Forwarding',Data) -> 'dec_DL-Forwarding'(Data);
decode_disp('DataCodingScheme',Data) -> 'dec_DataCodingScheme'(Data);
decode_disp('CriticalityDiagnostics-IE-Item',Data) -> 'dec_CriticalityDiagnostics-IE-Item'(Data);
decode_disp('CriticalityDiagnostics-IE-List',Data) -> 'dec_CriticalityDiagnostics-IE-List'(Data);
decode_disp('CriticalityDiagnostics',Data) -> 'dec_CriticalityDiagnostics'(Data);
decode_disp('COUNTvalue',Data) -> 'dec_COUNTvalue'(Data);
decode_disp('CSG-IdList-Item',Data) -> 'dec_CSG-IdList-Item'(Data);
decode_disp('CSG-IdList',Data) -> 'dec_CSG-IdList'(Data);
decode_disp('CSG-Id',Data) -> 'dec_CSG-Id'(Data);
decode_disp('CSFallbackIndicator',Data) -> 'dec_CSFallbackIndicator'(Data);
decode_disp('CNDomain',Data) -> 'dec_CNDomain'(Data);
decode_disp('CI',Data) -> 'dec_CI'(Data);
decode_disp('CGI',Data) -> 'dec_CGI'(Data);
decode_disp('CellType',Data) -> 'dec_CellType'(Data);
decode_disp('Cell-Size',Data) -> 'dec_Cell-Size'(Data);
decode_disp('Cdma2000OneXRAND',Data) -> 'dec_Cdma2000OneXRAND'(Data);
decode_disp('Cdma2000OneXPilot',Data) -> 'dec_Cdma2000OneXPilot'(Data);
decode_disp('Cdma2000OneXMSI',Data) -> 'dec_Cdma2000OneXMSI'(Data);
decode_disp('Cdma2000OneXMEID',Data) -> 'dec_Cdma2000OneXMEID'(Data);
decode_disp('Cdma2000OneXSRVCCInfo',Data) -> 'dec_Cdma2000OneXSRVCCInfo'(Data);
decode_disp('Cdma2000HORequiredIndication',Data) -> 'dec_Cdma2000HORequiredIndication'(Data);
decode_disp('Cdma2000HOStatus',Data) -> 'dec_Cdma2000HOStatus'(Data);
decode_disp('Cdma2000SectorID',Data) -> 'dec_Cdma2000SectorID'(Data);
decode_disp('Cdma2000RATType',Data) -> 'dec_Cdma2000RATType'(Data);
decode_disp('Cdma2000PDU',Data) -> 'dec_Cdma2000PDU'(Data);
decode_disp('CellID-Broadcast-Item',Data) -> 'dec_CellID-Broadcast-Item'(Data);
decode_disp('CellID-Broadcast',Data) -> 'dec_CellID-Broadcast'(Data);
decode_disp('CellIdentity',Data) -> 'dec_CellIdentity'(Data);
decode_disp('CauseNas',Data) -> 'dec_CauseNas'(Data);
decode_disp('CauseTransport',Data) -> 'dec_CauseTransport'(Data);
decode_disp('CauseRadioNetwork',Data) -> 'dec_CauseRadioNetwork'(Data);
decode_disp('CauseProtocol',Data) -> 'dec_CauseProtocol'(Data);
decode_disp('CauseMisc',Data) -> 'dec_CauseMisc'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('BroadcastCompletedAreaList',Data) -> 'dec_BroadcastCompletedAreaList'(Data);
decode_disp('BPLMNs',Data) -> 'dec_BPLMNs'(Data);
decode_disp('BitRate',Data) -> 'dec_BitRate'(Data);
decode_disp('Bearers-SubjectToStatusTransfer-Item',Data) -> 'dec_Bearers-SubjectToStatusTransfer-Item'(Data);
decode_disp('Bearers-SubjectToStatusTransferList',Data) -> 'dec_Bearers-SubjectToStatusTransferList'(Data);
decode_disp('AllocationAndRetentionPriority',Data) -> 'dec_AllocationAndRetentionPriority'(Data);
decode_disp('TriggeringMessage',Data) -> 'dec_TriggeringMessage'(Data);
decode_disp('ProtocolIE-ID',Data) -> 'dec_ProtocolIE-ID'(Data);
decode_disp('ProtocolExtensionID',Data) -> 'dec_ProtocolExtensionID'(Data);
decode_disp('ProcedureCode',Data) -> 'dec_ProcedureCode'(Data);
decode_disp('PrivateIE-ID',Data) -> 'dec_PrivateIE-ID'(Data);
decode_disp('Presence',Data) -> 'dec_Presence'(Data);
decode_disp('Criticality',Data) -> 'dec_Criticality'(Data);
decode_disp('PrivateMessage',Data) -> 'dec_PrivateMessage'(Data);
decode_disp('MMEConfigurationTransfer',Data) -> 'dec_MMEConfigurationTransfer'(Data);
decode_disp('ENBConfigurationTransfer',Data) -> 'dec_ENBConfigurationTransfer'(Data);
decode_disp('MMEDirectInformationTransfer',Data) -> 'dec_MMEDirectInformationTransfer'(Data);
decode_disp('Inter-SystemInformationTransferType',Data) -> 'dec_Inter-SystemInformationTransferType'(Data);
decode_disp('ENBDirectInformationTransfer',Data) -> 'dec_ENBDirectInformationTransfer'(Data);
decode_disp('WriteReplaceWarningResponse',Data) -> 'dec_WriteReplaceWarningResponse'(Data);
decode_disp('WriteReplaceWarningRequest',Data) -> 'dec_WriteReplaceWarningRequest'(Data);
decode_disp('OverloadStop',Data) -> 'dec_OverloadStop'(Data);
decode_disp('OverloadStart',Data) -> 'dec_OverloadStart'(Data);
decode_disp('LocationReport',Data) -> 'dec_LocationReport'(Data);
decode_disp('LocationReportingFailureIndication',Data) -> 'dec_LocationReportingFailureIndication'(Data);
decode_disp('LocationReportingControl',Data) -> 'dec_LocationReportingControl'(Data);
decode_disp('CellTrafficTrace',Data) -> 'dec_CellTrafficTrace'(Data);
decode_disp('DeactivateTrace',Data) -> 'dec_DeactivateTrace'(Data);
decode_disp('TraceFailureIndication',Data) -> 'dec_TraceFailureIndication'(Data);
decode_disp('TraceStart',Data) -> 'dec_TraceStart'(Data);
decode_disp('MMEStatusTransfer',Data) -> 'dec_MMEStatusTransfer'(Data);
decode_disp('ENBStatusTransfer',Data) -> 'dec_ENBStatusTransfer'(Data);
decode_disp('UECapabilityInfoIndication',Data) -> 'dec_UECapabilityInfoIndication'(Data);
decode_disp('UplinkS1cdma2000tunneling',Data) -> 'dec_UplinkS1cdma2000tunneling'(Data);
decode_disp('DownlinkS1cdma2000tunneling',Data) -> 'dec_DownlinkS1cdma2000tunneling'(Data);
decode_disp('MMEConfigurationUpdateFailure',Data) -> 'dec_MMEConfigurationUpdateFailure'(Data);
decode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'dec_MMEConfigurationUpdateAcknowledge'(Data);
decode_disp('MMEConfigurationUpdate',Data) -> 'dec_MMEConfigurationUpdate'(Data);
decode_disp('ENBConfigurationUpdateFailure',Data) -> 'dec_ENBConfigurationUpdateFailure'(Data);
decode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'dec_ENBConfigurationUpdateAcknowledge'(Data);
decode_disp('ENBConfigurationUpdate',Data) -> 'dec_ENBConfigurationUpdate'(Data);
decode_disp('S1SetupFailure',Data) -> 'dec_S1SetupFailure'(Data);
decode_disp('S1SetupResponse',Data) -> 'dec_S1SetupResponse'(Data);
decode_disp('S1SetupRequest',Data) -> 'dec_S1SetupRequest'(Data);
decode_disp('ErrorIndication',Data) -> 'dec_ErrorIndication'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListResAck'(Data);
decode_disp('ResetAcknowledge',Data) -> 'dec_ResetAcknowledge'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListRes'(Data);
decode_disp('ResetAll',Data) -> 'dec_ResetAll'(Data);
decode_disp('ResetType',Data) -> 'dec_ResetType'(Data);
decode_disp('Reset',Data) -> 'dec_Reset'(Data);
decode_disp('NASNonDeliveryIndication',Data) -> 'dec_NASNonDeliveryIndication'(Data);
decode_disp('UplinkNASTransport',Data) -> 'dec_UplinkNASTransport'(Data);
decode_disp('InitialUEMessage',Data) -> 'dec_InitialUEMessage'(Data);
decode_disp('DownlinkNASTransport',Data) -> 'dec_DownlinkNASTransport'(Data);
decode_disp('UEContextModificationFailure',Data) -> 'dec_UEContextModificationFailure'(Data);
decode_disp('UEContextModificationResponse',Data) -> 'dec_UEContextModificationResponse'(Data);
decode_disp('UEContextModificationRequest',Data) -> 'dec_UEContextModificationRequest'(Data);
decode_disp('UEContextReleaseComplete',Data) -> 'dec_UEContextReleaseComplete'(Data);
decode_disp('UEContextReleaseCommand',Data) -> 'dec_UEContextReleaseCommand'(Data);
decode_disp('UEContextReleaseRequest',Data) -> 'dec_UEContextReleaseRequest'(Data);
decode_disp('TAIItem',Data) -> 'dec_TAIItem'(Data);
decode_disp('TAIList',Data) -> 'dec_TAIList'(Data);
decode_disp('Paging',Data) -> 'dec_Paging'(Data);
decode_disp('InitialContextSetupFailure',Data) -> 'dec_InitialContextSetupFailure'(Data);
decode_disp('E-RABSetupItemCtxtSURes',Data) -> 'dec_E-RABSetupItemCtxtSURes'(Data);
decode_disp('E-RABSetupListCtxtSURes',Data) -> 'dec_E-RABSetupListCtxtSURes'(Data);
decode_disp('InitialContextSetupResponse',Data) -> 'dec_InitialContextSetupResponse'(Data);
decode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'dec_E-RABToBeSetupItemCtxtSUReq'(Data);
decode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'dec_E-RABToBeSetupListCtxtSUReq'(Data);
decode_disp('InitialContextSetupRequest',Data) -> 'dec_InitialContextSetupRequest'(Data);
decode_disp('E-RABReleaseIndication',Data) -> 'dec_E-RABReleaseIndication'(Data);
decode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'dec_E-RABReleaseItemBearerRelComp'(Data);
decode_disp('E-RABReleaseListBearerRelComp',Data) -> 'dec_E-RABReleaseListBearerRelComp'(Data);
decode_disp('E-RABReleaseResponse',Data) -> 'dec_E-RABReleaseResponse'(Data);
decode_disp('E-RABReleaseCommand',Data) -> 'dec_E-RABReleaseCommand'(Data);
decode_disp('E-RABModifyItemBearerModRes',Data) -> 'dec_E-RABModifyItemBearerModRes'(Data);
decode_disp('E-RABModifyListBearerModRes',Data) -> 'dec_E-RABModifyListBearerModRes'(Data);
decode_disp('E-RABModifyResponse',Data) -> 'dec_E-RABModifyResponse'(Data);
decode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'dec_E-RABToBeModifiedItemBearerModReq'(Data);
decode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'dec_E-RABToBeModifiedListBearerModReq'(Data);
decode_disp('E-RABModifyRequest',Data) -> 'dec_E-RABModifyRequest'(Data);
decode_disp('E-RABSetupItemBearerSURes',Data) -> 'dec_E-RABSetupItemBearerSURes'(Data);
decode_disp('E-RABSetupListBearerSURes',Data) -> 'dec_E-RABSetupListBearerSURes'(Data);
decode_disp('E-RABSetupResponse',Data) -> 'dec_E-RABSetupResponse'(Data);
decode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'dec_E-RABToBeSetupItemBearerSUReq'(Data);
decode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'dec_E-RABToBeSetupListBearerSUReq'(Data);
decode_disp('E-RABSetupRequest',Data) -> 'dec_E-RABSetupRequest'(Data);
decode_disp('HandoverCancelAcknowledge',Data) -> 'dec_HandoverCancelAcknowledge'(Data);
decode_disp('HandoverCancel',Data) -> 'dec_HandoverCancel'(Data);
decode_disp('PathSwitchRequestFailure',Data) -> 'dec_PathSwitchRequestFailure'(Data);
decode_disp('E-RABToBeSwitchedULItem',Data) -> 'dec_E-RABToBeSwitchedULItem'(Data);
decode_disp('E-RABToBeSwitchedULList',Data) -> 'dec_E-RABToBeSwitchedULList'(Data);
decode_disp('PathSwitchRequestAcknowledge',Data) -> 'dec_PathSwitchRequestAcknowledge'(Data);
decode_disp('E-RABToBeSwitchedDLItem',Data) -> 'dec_E-RABToBeSwitchedDLItem'(Data);
decode_disp('E-RABToBeSwitchedDLList',Data) -> 'dec_E-RABToBeSwitchedDLList'(Data);
decode_disp('PathSwitchRequest',Data) -> 'dec_PathSwitchRequest'(Data);
decode_disp('HandoverNotify',Data) -> 'dec_HandoverNotify'(Data);
decode_disp('HandoverFailure',Data) -> 'dec_HandoverFailure'(Data);
decode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'dec_E-RABFailedToSetupItemHOReqAck'(Data);
decode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'dec_E-RABFailedtoSetupListHOReqAck'(Data);
decode_disp('E-RABAdmittedItem',Data) -> 'dec_E-RABAdmittedItem'(Data);
decode_disp('E-RABAdmittedList',Data) -> 'dec_E-RABAdmittedList'(Data);
decode_disp('HandoverRequestAcknowledge',Data) -> 'dec_HandoverRequestAcknowledge'(Data);
decode_disp('E-RABToBeSetupItemHOReq',Data) -> 'dec_E-RABToBeSetupItemHOReq'(Data);
decode_disp('E-RABToBeSetupListHOReq',Data) -> 'dec_E-RABToBeSetupListHOReq'(Data);
decode_disp('HandoverRequest',Data) -> 'dec_HandoverRequest'(Data);
decode_disp('HandoverPreparationFailure',Data) -> 'dec_HandoverPreparationFailure'(Data);
decode_disp('E-RABDataForwardingItem',Data) -> 'dec_E-RABDataForwardingItem'(Data);
decode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'dec_E-RABSubjecttoDataForwardingList'(Data);
decode_disp('HandoverCommand',Data) -> 'dec_HandoverCommand'(Data);
decode_disp('HandoverRequired',Data) -> 'dec_HandoverRequired'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  UnsuccessfulOutcome
%%================================
'enc_UnsuccessfulOutcome'(Val) ->
    'enc_UnsuccessfulOutcome'(Val, [<<48>>]).

'enc_UnsuccessfulOutcome'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'S1AP':'getenc_S1AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldUnsuccessfulOutcome
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('UnsuccessfulOutcome', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UnsuccessfulOutcome'(Tlv) ->
   'dec_UnsuccessfulOutcome'(Tlv, [16]).

'dec_UnsuccessfulOutcome'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldUnsuccessfulOutcome
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'S1AP':'getdec_S1AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('UnsuccessfulOutcome', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'UnsuccessfulOutcome', Term1, Term2, Term3}.



%%================================
%%  SuccessfulOutcome
%%================================
'enc_SuccessfulOutcome'(Val) ->
    'enc_SuccessfulOutcome'(Val, [<<48>>]).

'enc_SuccessfulOutcome'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'S1AP':'getenc_S1AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldSuccessfulOutcome
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('SuccessfulOutcome', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SuccessfulOutcome'(Tlv) ->
   'dec_SuccessfulOutcome'(Tlv, [16]).

'dec_SuccessfulOutcome'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldSuccessfulOutcome
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'S1AP':'getdec_S1AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('SuccessfulOutcome', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SuccessfulOutcome', Term1, Term2, Term3}.



%%================================
%%  InitiatingMessage
%%================================
'enc_InitiatingMessage'(Val) ->
    'enc_InitiatingMessage'(Val, [<<48>>]).

'enc_InitiatingMessage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'S1AP':'getenc_S1AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldInitiatingMessage
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('InitiatingMessage', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InitiatingMessage'(Tlv) ->
   'dec_InitiatingMessage'(Tlv, [16]).

'dec_InitiatingMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldInitiatingMessage
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'S1AP':'getdec_S1AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('InitiatingMessage', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'InitiatingMessage', Term1, Term2, Term3}.



%%================================
%%  S1AP-PDU
%%================================
'enc_S1AP-PDU'(Val) ->
    'enc_S1AP-PDU'(Val, []).

'enc_S1AP-PDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      initiatingMessage ->
         'enc_InitiatingMessage'(element(2,Val), [<<160>>]);
      successfulOutcome ->
         'enc_SuccessfulOutcome'(element(2,Val), [<<161>>]);
      unsuccessfulOutcome ->
         'enc_UnsuccessfulOutcome'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_S1AP-PDU'(Tlv) ->
   'dec_S1AP-PDU'(Tlv, []).

'dec_S1AP-PDU'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'initiatingMessage'
    {131072, V1} -> 
        {initiatingMessage, 'dec_InitiatingMessage'(V1, [])};


%% 'successfulOutcome'
    {131073, V1} -> 
        {successfulOutcome, 'dec_SuccessfulOutcome'(V1, [])};


%% 'unsuccessfulOutcome'
    {131074, V1} -> 
        {unsuccessfulOutcome, 'dec_UnsuccessfulOutcome'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  X2TNLConfigurationInfo
%%================================
'enc_X2TNLConfigurationInfo'(Val) ->
    'enc_X2TNLConfigurationInfo'(Val, [<<48>>]).

'enc_X2TNLConfigurationInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute eNBX2TransportLayerAddresses(1)   External S1AP:ENBX2TLAs
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBX2TLAs'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_X2TNLConfigurationInfo_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  X2TNLConfigurationInfo_iE-Extensions
%%================================
'enc_X2TNLConfigurationInfo_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_X2TNLConfigurationInfo_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_X2TNLConfigurationInfo_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_X2TNLConfigurationInfo_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_X2TNLConfigurationInfo_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField
%%================================
'enc_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_1'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_1'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_X2TNLConfigurationInfo_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_X2TNLConfigurationInfo'(Tlv) ->
   'dec_X2TNLConfigurationInfo'(Tlv, [16]).

'dec_X2TNLConfigurationInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eNBX2TransportLayerAddresses(1)   External S1AP:ENBX2TLAs
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBX2TLAs'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_X2TNLConfigurationInfo_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'X2TNLConfigurationInfo', Term1, Term2}.



%%================================
%%  WarningMessageContents
%%================================
'enc_WarningMessageContents'(Val) ->
    'enc_WarningMessageContents'(Val, [<<4>>]).

'enc_WarningMessageContents'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_WarningMessageContents'(Tlv) ->
   'dec_WarningMessageContents'(Tlv, [4]).

'dec_WarningMessageContents'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 9600 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  WarningSecurityInfo
%%================================
'enc_WarningSecurityInfo'(Val) ->
    'enc_WarningSecurityInfo'(Val, [<<4>>]).

'enc_WarningSecurityInfo'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_WarningSecurityInfo'(Tlv) ->
   'dec_WarningSecurityInfo'(Tlv, [4]).

'dec_WarningSecurityInfo'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 50 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  WarningType
%%================================
'enc_WarningType'(Val) ->
    'enc_WarningType'(Val, [<<4>>]).

'enc_WarningType'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_WarningType'(Tlv) ->
   'dec_WarningType'(Tlv, [4]).

'dec_WarningType'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  WarningAreaList
%%================================
'enc_WarningAreaList'(Val) ->
    'enc_WarningAreaList'(Val, []).

'enc_WarningAreaList'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      cellIDList ->
         'enc_ECGIList'(element(2,Val), [<<160>>]);
      trackingAreaListforWarning ->
         'enc_TAIListforWarning'(element(2,Val), [<<161>>]);
      emergencyAreaIDList ->
         'enc_EmergencyAreaIDList'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_WarningAreaList'(Tlv) ->
   'dec_WarningAreaList'(Tlv, []).

'dec_WarningAreaList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cellIDList'
    {131072, V1} -> 
        {cellIDList, 'dec_ECGIList'(V1, [])};


%% 'trackingAreaListforWarning'
    {131073, V1} -> 
        {trackingAreaListforWarning, 'dec_TAIListforWarning'(V1, [])};


%% 'emergencyAreaIDList'
    {131074, V1} -> 
        {emergencyAreaIDList, 'dec_EmergencyAreaIDList'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  UESecurityCapabilities
%%================================
'enc_UESecurityCapabilities'(Val) ->
    'enc_UESecurityCapabilities'(Val, [<<48>>]).

'enc_UESecurityCapabilities'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute encryptionAlgorithms(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute integrityProtectionAlgorithms(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UESecurityCapabilities_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UESecurityCapabilities_iE-Extensions
%%================================
'enc_UESecurityCapabilities_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UESecurityCapabilities_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UESecurityCapabilities_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UESecurityCapabilities_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UESecurityCapabilities_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UESecurityCapabilities_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_4'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_4'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UESecurityCapabilities_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UESecurityCapabilities'(Tlv) ->
   'dec_UESecurityCapabilities'(Tlv, [16]).

'dec_UESecurityCapabilities'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute encryptionAlgorithms(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_native_bit_string(V1, [131072]),

%%-------------------------------------------------
%% attribute integrityProtectionAlgorithms(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UESecurityCapabilities_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UESecurityCapabilities', Term1, Term2, Term3}.



%%================================
%%  UERadioCapability
%%================================
'enc_UERadioCapability'(Val) ->
    'enc_UERadioCapability'(Val, [<<4>>]).

'enc_UERadioCapability'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_UERadioCapability'(Tlv) ->
   'dec_UERadioCapability'(Tlv, [4]).

'dec_UERadioCapability'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  UEPagingID
%%================================
'enc_UEPagingID'(Val) ->
    'enc_UEPagingID'(Val, []).

'enc_UEPagingID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's-TMSI' ->
         'enc_S-TMSI'(element(2,Val), [<<160>>]);
      iMSI ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_UEPagingID'(Tlv) ->
   'dec_UEPagingID'(Tlv, []).

'dec_UEPagingID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 's-TMSI'
    {131072, V1} -> 
        {'s-TMSI', 'dec_S-TMSI'(V1, [])};


%% 'iMSI'
    {131073, V1} -> 
        {iMSI, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 3 =< C1, C1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  UE-HistoryInformation
%%================================
'enc_UE-HistoryInformation'(Val) ->
    'enc_UE-HistoryInformation'(Val, [<<48>>]).

'enc_UE-HistoryInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-HistoryInformation_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-HistoryInformation_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-HistoryInformation_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LastVisitedCell-Item'(H, []),
   'enc_UE-HistoryInformation_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-HistoryInformation'(Tlv) ->
   'dec_UE-HistoryInformation'(Tlv, [16]).

'dec_UE-HistoryInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LastVisitedCell-Item'(V1, []) || V1 <- Tlv1].




%%================================
%%  UEIdentityIndexValue
%%================================
'enc_UEIdentityIndexValue'(Val) ->
    'enc_UEIdentityIndexValue'(Val, [<<3>>]).

'enc_UEIdentityIndexValue'(Val, TagIn) ->
encode_unnamed_bit_string(10, Val, TagIn).


'dec_UEIdentityIndexValue'(Tlv) ->
   'dec_UEIdentityIndexValue'(Tlv, [3]).

'dec_UEIdentityIndexValue'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 10 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UE-associatedLogicalS1-ConnectionItem
%%================================
'enc_UE-associatedLogicalS1-ConnectionItem'(Val) ->
    'enc_UE-associatedLogicalS1-ConnectionItem'(Val, [<<48>>]).

'enc_UE-associatedLogicalS1-ConnectionItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute eNB-UE-S1AP-ID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UE-associatedLogicalS1-ConnectionItem_iE-Extensions
%%================================
'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_8'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_8'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UE-associatedLogicalS1-ConnectionItem'(Tlv) ->
   'dec_UE-associatedLogicalS1-ConnectionItem'(Tlv, [16]).

'dec_UE-associatedLogicalS1-ConnectionItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute eNB-UE-S1AP-ID(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 16777215 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UE-associatedLogicalS1-ConnectionItem', Term1, Term2, Term3}.



%%================================
%%  UE-S1AP-ID-pair
%%================================
'enc_UE-S1AP-ID-pair'(Val) ->
    'enc_UE-S1AP-ID-pair'(Val, [<<48>>]).

'enc_UE-S1AP-ID-pair'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eNB-UE-S1AP-ID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UE-S1AP-ID-pair_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UE-S1AP-ID-pair_iE-Extensions
%%================================
'enc_UE-S1AP-ID-pair_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UE-S1AP-ID-pair_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-S1AP-ID-pair_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-S1AP-ID-pair_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UE-S1AP-ID-pair_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_9'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_9'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UE-S1AP-ID-pair_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UE-S1AP-ID-pair'(Tlv) ->
   'dec_UE-S1AP-ID-pair'(Tlv, [16]).

'dec_UE-S1AP-ID-pair'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eNB-UE-S1AP-ID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 16777215 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UE-S1AP-ID-pair_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UE-S1AP-ID-pair', Term1, Term2, Term3}.



%%================================
%%  UE-S1AP-IDs
%%================================
'enc_UE-S1AP-IDs'(Val) ->
    'enc_UE-S1AP-IDs'(Val, []).

'enc_UE-S1AP-IDs'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'uE-S1AP-ID-pair' ->
         'enc_UE-S1AP-ID-pair'(element(2,Val), [<<160>>]);
      'mME-UE-S1AP-ID' ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_UE-S1AP-IDs'(Tlv) ->
   'dec_UE-S1AP-IDs'(Tlv, []).

'dec_UE-S1AP-IDs'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'uE-S1AP-ID-pair'
    {131072, V1} -> 
        {'uE-S1AP-ID-pair', 'dec_UE-S1AP-ID-pair'(V1, [])};


%% 'mME-UE-S1AP-ID'
    {131073, V1} -> 
        {'mME-UE-S1AP-ID', begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  UEAggregateMaximumBitrate
%%================================
'enc_UEAggregateMaximumBitrate'(Val) ->
    'enc_UEAggregateMaximumBitrate'(Val, [<<48>>]).

'enc_UEAggregateMaximumBitrate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateDL(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateUL(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UEAggregateMaximumBitrate_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEAggregateMaximumBitrate_iE-Extensions
%%================================
'enc_UEAggregateMaximumBitrate_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEAggregateMaximumBitrate_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEAggregateMaximumBitrate_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEAggregateMaximumBitrate_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UEAggregateMaximumBitrate_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_10'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_10'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UEAggregateMaximumBitrate_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UEAggregateMaximumBitrate'(Tlv) ->
   'dec_UEAggregateMaximumBitrate'(Tlv, [16]).

'dec_UEAggregateMaximumBitrate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateDL(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateUL(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 10000000000 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UEAggregateMaximumBitrate_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEAggregateMaximumBitrate', Term1, Term2, Term3}.



%%================================
%%  TypeOfError
%%================================
'enc_TypeOfError'(Val) ->
    'enc_TypeOfError'(Val, [<<10>>]).

'enc_TypeOfError'(Val, TagIn) ->
case Val of
'not-understood' -> encode_tags(TagIn, [0], 1);
missing -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TypeOfError'(Tlv) ->
   'dec_TypeOfError'(Tlv, [10]).

'dec_TypeOfError'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'not-understood';
1 -> missing;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  E-UTRAN-Trace-ID
%%================================
'enc_E-UTRAN-Trace-ID'(Val) ->
    'enc_E-UTRAN-Trace-ID'(Val, [<<4>>]).

'enc_E-UTRAN-Trace-ID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_E-UTRAN-Trace-ID'(Tlv) ->
   'dec_E-UTRAN-Trace-ID'(Tlv, [4]).

'dec_E-UTRAN-Trace-ID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TraceDepth
%%================================
'enc_TraceDepth'(Val) ->
    'enc_TraceDepth'(Val, [<<10>>]).

'enc_TraceDepth'(Val, TagIn) ->
case Val of
minimum -> encode_tags(TagIn, [0], 1);
medium -> encode_tags(TagIn, [1], 1);
maximum -> encode_tags(TagIn, [2], 1);
minimumWithoutVendorSpecificExtension -> encode_tags(TagIn, [3], 1);
mediumWithoutVendorSpecificExtension -> encode_tags(TagIn, [4], 1);
maximumWithoutVendorSpecificExtension -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TraceDepth'(Tlv) ->
   'dec_TraceDepth'(Tlv, [10]).

'dec_TraceDepth'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TraceActivation
%%================================
'enc_TraceActivation'(Val) ->
    'enc_TraceActivation'(Val, [<<48>>]).

'enc_TraceActivation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-UTRAN-Trace-ID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute interfacesToTrace(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(8, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute traceDepth(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
minimum -> encode_tags([<<130>>], [0], 1);
medium -> encode_tags([<<130>>], [1], 1);
maximum -> encode_tags([<<130>>], [2], 1);
minimumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [3], 1);
mediumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [4], 1);
maximumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [5], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute traceCollectionEntityIPAddress(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_unnamed_bit_string(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TraceActivation_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TraceActivation_iE-Extensions
%%================================
'enc_TraceActivation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TraceActivation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TraceActivation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TraceActivation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TraceActivation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TraceActivation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_11'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_11'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TraceActivation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TraceActivation'(Tlv) ->
   'dec_TraceActivation'(Tlv, [16]).

'dec_TraceActivation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-UTRAN-Trace-ID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute interfacesToTrace(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute traceDepth(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute traceCollectionEntityIPAddress(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_TraceActivation_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TraceActivation', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  TransportLayerAddress
%%================================
'enc_TransportLayerAddress'(Val) ->
    'enc_TransportLayerAddress'(Val, [<<3>>]).

'enc_TransportLayerAddress'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_TransportLayerAddress'(Tlv) ->
   'dec_TransportLayerAddress'(Tlv, [3]).

'dec_TransportLayerAddress'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  Time-UE-StayedInCell
%%================================
'enc_Time-UE-StayedInCell'(Val) ->
    'enc_Time-UE-StayedInCell'(Val, [<<2>>]).

'enc_Time-UE-StayedInCell'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Time-UE-StayedInCell'(Tlv) ->
   'dec_Time-UE-StayedInCell'(Tlv, [2]).

'dec_Time-UE-StayedInCell'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TimeToWait
%%================================
'enc_TimeToWait'(Val) ->
    'enc_TimeToWait'(Val, [<<10>>]).

'enc_TimeToWait'(Val, TagIn) ->
case Val of
v1s -> encode_tags(TagIn, [0], 1);
v2s -> encode_tags(TagIn, [1], 1);
v5s -> encode_tags(TagIn, [2], 1);
v10s -> encode_tags(TagIn, [3], 1);
v20s -> encode_tags(TagIn, [4], 1);
v60s -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimeToWait'(Tlv) ->
   'dec_TimeToWait'(Tlv, [10]).

'dec_TimeToWait'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> v1s;
1 -> v2s;
2 -> v5s;
3 -> v10s;
4 -> v20s;
5 -> v60s;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TargetBSS-ToSourceBSS-TransparentContainer
%%================================
'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Val) ->
    'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Val, [<<4>>]).

'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Tlv) ->
   'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Tlv, [4]).

'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  TargetRNC-ToSourceRNC-TransparentContainer
%%================================
'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Val) ->
    'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Val, [<<4>>]).

'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Tlv) ->
   'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Tlv, [4]).

'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Target-ToSource-TransparentContainer
%%================================
'enc_Target-ToSource-TransparentContainer'(Val) ->
    'enc_Target-ToSource-TransparentContainer'(Val, [<<4>>]).

'enc_Target-ToSource-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Target-ToSource-TransparentContainer'(Tlv) ->
   'dec_Target-ToSource-TransparentContainer'(Tlv, [4]).

'dec_Target-ToSource-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  TargeteNB-ToSourceeNB-TransparentContainer
%%================================
'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Val) ->
    'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Val, [<<48>>]).

'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rRC-Container(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions
%%================================
'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_12'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_12'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Tlv) ->
   'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Tlv, [16]).

'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rRC-Container(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TargeteNB-ToSourceeNB-TransparentContainer', Term1, Term2}.



%%================================
%%  TargetRNC-ID
%%================================
'enc_TargetRNC-ID'(Val) ->
    'enc_TargetRNC-ID'(Val, [<<48>>]).

'enc_TargetRNC-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute lAI(1)   External S1AP:LAI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LAI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute rAC(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute rNC-ID(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute extendedRNC-ID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TargetRNC-ID_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TargetRNC-ID_iE-Extensions
%%================================
'enc_TargetRNC-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TargetRNC-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TargetRNC-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TargetRNC-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TargetRNC-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TargetRNC-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_14'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_14'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TargetRNC-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TargetRNC-ID'(Tlv) ->
   'dec_TargetRNC-ID'(Tlv, [16]).

'dec_TargetRNC-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute lAI(1)   External S1AP:LAI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LAI'(V1, [131072]),

%%-------------------------------------------------
%% attribute rAC(2) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_octet_string(V2, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute rNC-ID(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 0 =< Val2, Val2 =< 4095 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute extendedRNC-ID(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_integer(V4, []),
if 4096 =< Val3, Val3 =< 65535 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_TargetRNC-ID_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TargetRNC-ID', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  TargeteNB-ID
%%================================
'enc_TargeteNB-ID'(Val) ->
    'enc_TargeteNB-ID'(Val, [<<48>>]).

'enc_TargeteNB-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute global-ENB-ID(1)   External S1AP:Global-ENB-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Global-ENB-ID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute selected-TAI(2)   External S1AP:TAI
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TAI'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TargeteNB-ID_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TargeteNB-ID_iE-Extensions
%%================================
'enc_TargeteNB-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TargeteNB-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TargeteNB-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TargeteNB-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TargeteNB-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TargeteNB-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_16'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_16'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TargeteNB-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TargeteNB-ID'(Tlv) ->
   'dec_TargeteNB-ID'(Tlv, [16]).

'dec_TargeteNB-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute global-ENB-ID(1)   External S1AP:Global-ENB-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Global-ENB-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute selected-TAI(2)   External S1AP:TAI
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TAI'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_TargeteNB-ID_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TargeteNB-ID', Term1, Term2, Term3}.



%%================================
%%  TargetID
%%================================
'enc_TargetID'(Val) ->
    'enc_TargetID'(Val, []).

'enc_TargetID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'targeteNB-ID' ->
         'enc_TargeteNB-ID'(element(2,Val), [<<160>>]);
      'targetRNC-ID' ->
         'enc_TargetRNC-ID'(element(2,Val), [<<161>>]);
      cGI ->
         'enc_CGI'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_TargetID'(Tlv) ->
   'dec_TargetID'(Tlv, []).

'dec_TargetID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'targeteNB-ID'
    {131072, V1} -> 
        {'targeteNB-ID', 'dec_TargeteNB-ID'(V1, [])};


%% 'targetRNC-ID'
    {131073, V1} -> 
        {'targetRNC-ID', 'dec_TargetRNC-ID'(V1, [])};


%% 'cGI'
    {131074, V1} -> 
        {cGI, 'dec_CGI'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  TBCD-STRING
%%================================
'enc_TBCD-STRING'(Val) ->
    'enc_TBCD-STRING'(Val, [<<4>>]).

'enc_TBCD-STRING'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TBCD-STRING'(Tlv) ->
   'dec_TBCD-STRING'(Tlv, [4]).

'dec_TBCD-STRING'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CompletedCellinTAI-Item
%%================================
'enc_CompletedCellinTAI-Item'(Val) ->
    'enc_CompletedCellinTAI-Item'(Val, [<<48>>]).

'enc_CompletedCellinTAI-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_EUTRAN-CGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CompletedCellinTAI-Item_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CompletedCellinTAI-Item_iE-Extensions
%%================================
'enc_CompletedCellinTAI-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CompletedCellinTAI-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CompletedCellinTAI-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CompletedCellinTAI-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CompletedCellinTAI-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_18'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_18'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CompletedCellinTAI-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CompletedCellinTAI-Item'(Tlv) ->
   'dec_CompletedCellinTAI-Item'(Tlv, [16]).

'dec_CompletedCellinTAI-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_EUTRAN-CGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CompletedCellinTAI-Item_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CompletedCellinTAI-Item', Term1, Term2}.



%%================================
%%  CompletedCellinTAI
%%================================
'enc_CompletedCellinTAI'(Val) ->
    'enc_CompletedCellinTAI'(Val, [<<48>>]).

'enc_CompletedCellinTAI'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinTAI_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CompletedCellinTAI_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CompletedCellinTAI_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinTAI-Item'(H, [<<48>>]),
   'enc_CompletedCellinTAI_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CompletedCellinTAI'(Tlv) ->
   'dec_CompletedCellinTAI'(Tlv, [16]).

'dec_CompletedCellinTAI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CompletedCellinTAI-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TAI-Broadcast-Item
%%================================
'enc_TAI-Broadcast-Item'(Val) ->
    'enc_TAI-Broadcast-Item'(Val, [<<48>>]).

'enc_TAI-Broadcast-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tAI(1)   External S1AP:TAI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TAI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute completedCellinTAI(2)   External S1AP:CompletedCellinTAI
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CompletedCellinTAI'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TAI-Broadcast-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TAI-Broadcast-Item_iE-Extensions
%%================================
'enc_TAI-Broadcast-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TAI-Broadcast-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAI-Broadcast-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAI-Broadcast-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TAI-Broadcast-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_19'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_19'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TAI-Broadcast-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TAI-Broadcast-Item'(Tlv) ->
   'dec_TAI-Broadcast-Item'(Tlv, [16]).

'dec_TAI-Broadcast-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tAI(1)   External S1AP:TAI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TAI'(V1, [131072]),

%%-------------------------------------------------
%% attribute completedCellinTAI(2)   External S1AP:CompletedCellinTAI
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CompletedCellinTAI'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_TAI-Broadcast-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TAI-Broadcast-Item', Term1, Term2, Term3}.



%%================================
%%  TAI-Broadcast
%%================================
'enc_TAI-Broadcast'(Val) ->
    'enc_TAI-Broadcast'(Val, [<<48>>]).

'enc_TAI-Broadcast'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TAI-Broadcast_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAI-Broadcast_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAI-Broadcast_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAI-Broadcast-Item'(H, [<<48>>]),
   'enc_TAI-Broadcast_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TAI-Broadcast'(Tlv) ->
   'dec_TAI-Broadcast'(Tlv, [16]).

'dec_TAI-Broadcast'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAI-Broadcast-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TAI
%%================================
'enc_TAI'(Val) ->
    'enc_TAI'(Val, [<<48>>]).

'enc_TAI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute tAC(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TAI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TAI_iE-Extensions
%%================================
'enc_TAI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TAI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TAI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TAI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TAI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_3'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TAI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_3'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TAI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TAI'(Tlv) ->
   'dec_TAI'(Tlv, [16]).

'dec_TAI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tAC(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_TAI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TAI', Term1, Term2, Term3}.



%%================================
%%  TAIListforWarning
%%================================
'enc_TAIListforWarning'(Val) ->
    'enc_TAIListforWarning'(Val, [<<48>>]).

'enc_TAIListforWarning'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TAIListforWarning_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAIListforWarning_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAIListforWarning_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAI'(H, [<<48>>]),
   'enc_TAIListforWarning_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_TAIListforWarning'(Tlv) ->
   'dec_TAIListforWarning'(Tlv, [16]).

'dec_TAIListforWarning'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAI'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  TAC
%%================================
'enc_TAC'(Val) ->
    'enc_TAC'(Val, [<<4>>]).

'enc_TAC'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TAC'(Tlv) ->
   'dec_TAC'(Tlv, [4]).

'dec_TAC'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  S-TMSI
%%================================
'enc_S-TMSI'(Val) ->
    'enc_S-TMSI'(Val, [<<48>>]).

'enc_S-TMSI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute mMEC(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute m-TMSI(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_S-TMSI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  S-TMSI_iE-Extensions
%%================================
'enc_S-TMSI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_S-TMSI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_S-TMSI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_S-TMSI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_S-TMSI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_S-TMSI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  S-TMSI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_S-TMSI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_5'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_S-TMSI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_5'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_S-TMSI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_S-TMSI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_S-TMSI'(Tlv) ->
   'dec_S-TMSI'(Tlv, [16]).

'dec_S-TMSI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mMEC(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute m-TMSI(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 4 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_S-TMSI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'S-TMSI', Term1, Term2, Term3}.



%%================================
%%  SupportedTAs-Item
%%================================
'enc_SupportedTAs-Item'(Val) ->
    'enc_SupportedTAs-Item'(Val, [<<48>>]).

'enc_SupportedTAs-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute tAC(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute broadcastPLMNs(2)   External S1AP:BPLMNs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BPLMNs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SupportedTAs-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SupportedTAs-Item_iE-Extensions
%%================================
'enc_SupportedTAs-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SupportedTAs-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedTAs-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedTAs-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SupportedTAs-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SupportedTAs-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_20'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_20'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SupportedTAs-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SupportedTAs-Item'(Tlv) ->
   'dec_SupportedTAs-Item'(Tlv, [16]).

'dec_SupportedTAs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tAC(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute broadcastPLMNs(2)   External S1AP:BPLMNs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_BPLMNs'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SupportedTAs-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SupportedTAs-Item', Term1, Term2, Term3}.



%%================================
%%  SupportedTAs
%%================================
'enc_SupportedTAs'(Val) ->
    'enc_SupportedTAs'(Val, [<<48>>]).

'enc_SupportedTAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedTAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedTAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedTAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SupportedTAs-Item'(H, [<<48>>]),
   'enc_SupportedTAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedTAs'(Tlv) ->
   'dec_SupportedTAs'(Tlv, [16]).

'dec_SupportedTAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SupportedTAs-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SubscriberProfileIDforRFP
%%================================
'enc_SubscriberProfileIDforRFP'(Val) ->
    'enc_SubscriberProfileIDforRFP'(Val, [<<2>>]).

'enc_SubscriberProfileIDforRFP'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_SubscriberProfileIDforRFP'(Tlv) ->
   'dec_SubscriberProfileIDforRFP'(Tlv, [2]).

'dec_SubscriberProfileIDforRFP'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ServedPLMNs
%%================================
'enc_ServedPLMNs'(Val) ->
    'enc_ServedPLMNs'(Val, [<<48>>]).

'enc_ServedPLMNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedPLMNs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedPLMNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedPLMNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ServedPLMNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServedPLMNs'(Tlv) ->
   'dec_ServedPLMNs'(Tlv, [16]).

'dec_ServedPLMNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ServedMMECs
%%================================
'enc_ServedMMECs'(Val) ->
    'enc_ServedMMECs'(Val, [<<48>>]).

'enc_ServedMMECs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedMMECs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedMMECs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedMMECs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ServedMMECs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServedMMECs'(Tlv) ->
   'dec_ServedMMECs'(Tlv, [16]).

'dec_ServedMMECs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ServedGroupIDs
%%================================
'enc_ServedGroupIDs'(Val) ->
    'enc_ServedGroupIDs'(Val, [<<48>>]).

'enc_ServedGroupIDs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedGroupIDs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedGroupIDs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedGroupIDs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ServedGroupIDs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServedGroupIDs'(Tlv) ->
   'dec_ServedGroupIDs'(Tlv, [16]).

'dec_ServedGroupIDs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ServedGUMMEIsItem
%%================================
'enc_ServedGUMMEIsItem'(Val) ->
    'enc_ServedGUMMEIsItem'(Val, [<<48>>]).

'enc_ServedGUMMEIsItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute servedPLMNs(1)   External S1AP:ServedPLMNs
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ServedPLMNs'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute servedGroupIDs(2)   External S1AP:ServedGroupIDs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ServedGroupIDs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute servedMMECs(3)   External S1AP:ServedMMECs
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_ServedMMECs'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServedGUMMEIsItem_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServedGUMMEIsItem_iE-Extensions
%%================================
'enc_ServedGUMMEIsItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ServedGUMMEIsItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedGUMMEIsItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedGUMMEIsItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ServedGUMMEIsItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_21'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_21'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ServedGUMMEIsItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ServedGUMMEIsItem'(Tlv) ->
   'dec_ServedGUMMEIsItem'(Tlv, [16]).

'dec_ServedGUMMEIsItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute servedPLMNs(1)   External S1AP:ServedPLMNs
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ServedPLMNs'(V1, [131072]),

%%-------------------------------------------------
%% attribute servedGroupIDs(2)   External S1AP:ServedGroupIDs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ServedGroupIDs'(V2, [131073]),

%%-------------------------------------------------
%% attribute servedMMECs(3)   External S1AP:ServedMMECs
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_ServedMMECs'(V3, [131074]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ServedGUMMEIsItem_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ServedGUMMEIsItem', Term1, Term2, Term3, Term4}.



%%================================
%%  ServedGUMMEIs
%%================================
'enc_ServedGUMMEIs'(Val) ->
    'enc_ServedGUMMEIs'(Val, [<<48>>]).

'enc_ServedGUMMEIs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedGUMMEIs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedGUMMEIs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedGUMMEIs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedGUMMEIsItem'(H, [<<48>>]),
   'enc_ServedGUMMEIs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServedGUMMEIs'(Tlv) ->
   'dec_ServedGUMMEIs'(Tlv, [16]).

'dec_ServedGUMMEIs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedGUMMEIsItem'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SourceRNC-ToTargetRNC-TransparentContainer
%%================================
'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Val) ->
    'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Val, [<<4>>]).

'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Tlv) ->
   'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Tlv, [4]).

'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  SourceeNB-ToTargeteNB-TransparentContainer
%%================================
'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Val) ->
    'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Val, [<<48>>]).

'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute rRC-Container(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RABInformationList(2)   External S1AP:E-RABInformationList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABInformationList'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute targetCell-ID(3)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_EUTRAN-CGI'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute subscriberProfileIDforRFP(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute uE-HistoryInformation(5)   External S1AP:UE-HistoryInformation
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_UE-HistoryInformation'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions
%%================================
'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_23'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_23'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Tlv) ->
   'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Tlv, [16]).

'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rRC-Container(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute e-RABInformationList(2)   External S1AP:E-RABInformationList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_E-RABInformationList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute targetCell-ID(3)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_EUTRAN-CGI'(V3, [131074]),

%%-------------------------------------------------
%% attribute subscriberProfileIDforRFP(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_integer(V4, []),
if 1 =< Val1, Val1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute uE-HistoryInformation(5)   External S1AP:UE-HistoryInformation
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_UE-HistoryInformation'(V5, [131076]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SourceeNB-ToTargeteNB-TransparentContainer', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  SRVCCHOIndication
%%================================
'enc_SRVCCHOIndication'(Val) ->
    'enc_SRVCCHOIndication'(Val, [<<10>>]).

'enc_SRVCCHOIndication'(Val, TagIn) ->
case Val of
pSandCS -> encode_tags(TagIn, [0], 1);
cSonly -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SRVCCHOIndication'(Tlv) ->
   'dec_SRVCCHOIndication'(Tlv, [10]).

'dec_SRVCCHOIndication'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> pSandCS;
1 -> cSonly;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SRVCCOperationPossible
%%================================
'enc_SRVCCOperationPossible'(Val) ->
    'enc_SRVCCOperationPossible'(Val, [<<10>>]).

'enc_SRVCCOperationPossible'(Val, TagIn) ->
case Val of
possible -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SRVCCOperationPossible'(Tlv) ->
   'dec_SRVCCOperationPossible'(Tlv, [10]).

'dec_SRVCCOperationPossible'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> possible;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SourceeNB-ID
%%================================
'enc_SourceeNB-ID'(Val) ->
    'enc_SourceeNB-ID'(Val, [<<48>>]).

'enc_SourceeNB-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute global-ENB-ID(1)   External S1AP:Global-ENB-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Global-ENB-ID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute selected-TAI(2)   External S1AP:TAI
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TAI'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SourceeNB-ID_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SourceeNB-ID_iE-Extensions
%%================================
'enc_SourceeNB-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SourceeNB-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SourceeNB-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SourceeNB-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SourceeNB-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SourceeNB-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_24'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_24'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SourceeNB-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SourceeNB-ID'(Tlv) ->
   'dec_SourceeNB-ID'(Tlv, [16]).

'dec_SourceeNB-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute global-ENB-ID(1)   External S1AP:Global-ENB-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Global-ENB-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute selected-TAI(2)   External S1AP:TAI
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TAI'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SourceeNB-ID_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SourceeNB-ID', Term1, Term2, Term3}.



%%================================
%%  SourceBSS-ToTargetBSS-TransparentContainer
%%================================
'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Val) ->
    'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Val, [<<4>>]).

'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Tlv) ->
   'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Tlv, [4]).

'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Source-ToTarget-TransparentContainer
%%================================
'enc_Source-ToTarget-TransparentContainer'(Val) ->
    'enc_Source-ToTarget-TransparentContainer'(Val, [<<4>>]).

'enc_Source-ToTarget-TransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Source-ToTarget-TransparentContainer'(Tlv) ->
   'dec_Source-ToTarget-TransparentContainer'(Tlv, [4]).

'dec_Source-ToTarget-TransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  SONConfigurationTransfer
%%================================
'enc_SONConfigurationTransfer'(Val) ->
    'enc_SONConfigurationTransfer'(Val, [<<48>>]).

'enc_SONConfigurationTransfer'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute targeteNB-ID(1)   External S1AP:TargeteNB-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TargeteNB-ID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute sourceeNB-ID(2)   External S1AP:SourceeNB-ID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SourceeNB-ID'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute sONInformation(3)   External S1AP:SONInformation
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_SONInformation'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SONConfigurationTransfer_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SONConfigurationTransfer_iE-Extensions
%%================================
'enc_SONConfigurationTransfer_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SONConfigurationTransfer_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SONConfigurationTransfer_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SONConfigurationTransfer_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SONConfigurationTransfer_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_26'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_26'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SONConfigurationTransfer_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SONConfigurationTransfer'(Tlv) ->
   'dec_SONConfigurationTransfer'(Tlv, [16]).

'dec_SONConfigurationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute targeteNB-ID(1)   External S1AP:TargeteNB-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TargeteNB-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute sourceeNB-ID(2)   External S1AP:SourceeNB-ID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SourceeNB-ID'(V2, [131073]),

%%-------------------------------------------------
%% attribute sONInformation(3)   External S1AP:SONInformation
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_SONInformation'(V3, [131074]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SONConfigurationTransfer_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SONConfigurationTransfer', Term1, Term2, Term3, Term4}.



%%================================
%%  SONInformationReply
%%================================
'enc_SONInformationReply'(Val) ->
    'enc_SONInformationReply'(Val, [<<48>>]).

'enc_SONInformationReply'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute x2TNLConfigurationInfo(1)   External S1AP:X2TNLConfigurationInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_X2TNLConfigurationInfo'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SONInformationReply_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SONInformationReply_iE-Extensions
%%================================
'enc_SONInformationReply_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SONInformationReply_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SONInformationReply_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SONInformationReply_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SONInformationReply_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SONInformationReply_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SONInformationReply_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_25'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_25'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SONInformationReply_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SONInformationReply_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SONInformationReply'(Tlv) ->
   'dec_SONInformationReply'(Tlv, [16]).

'dec_SONInformationReply'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute x2TNLConfigurationInfo(1)   External S1AP:X2TNLConfigurationInfo OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_X2TNLConfigurationInfo'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SONInformationReply_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SONInformationReply', Term1, Term2}.



%%================================
%%  SONInformationRequest
%%================================
'enc_SONInformationRequest'(Val) ->
    'enc_SONInformationRequest'(Val, [<<10>>]).

'enc_SONInformationRequest'(Val, TagIn) ->
case Val of
'x2TNL-Configuration-Info' -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SONInformationRequest'(Tlv) ->
   'dec_SONInformationRequest'(Tlv, [10]).

'dec_SONInformationRequest'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'x2TNL-Configuration-Info';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SONInformation
%%================================
'enc_SONInformation'(Val) ->
    'enc_SONInformation'(Val, []).

'enc_SONInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      sONInformationRequest ->
         case element(2,Val) of
'x2TNL-Configuration-Info' -> encode_tags([<<128>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      sONInformationReply ->
         'enc_SONInformationReply'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SONInformation'(Tlv) ->
   'dec_SONInformation'(Tlv, []).

'dec_SONInformation'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sONInformationRequest'
    {131072, V1} -> 
        {sONInformationRequest, case decode_integer(V1, []) of
0 -> 'x2TNL-Configuration-Info';
Default1 -> {asn1_enum,Default1}
end};


%% 'sONInformationReply'
    {131073, V1} -> 
        {sONInformationReply, 'dec_SONInformationReply'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  SerialNumber
%%================================
'enc_SerialNumber'(Val) ->
    'enc_SerialNumber'(Val, [<<3>>]).

'enc_SerialNumber'(Val, TagIn) ->
encode_unnamed_bit_string(16, Val, TagIn).


'dec_SerialNumber'(Tlv) ->
   'dec_SerialNumber'(Tlv, [3]).

'dec_SerialNumber'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SecurityContext
%%================================
'enc_SecurityContext'(Val) ->
    'enc_SecurityContext'(Val, [<<48>>]).

'enc_SecurityContext'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute nextHopChainingCount(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nextHopParameter(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(256, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityContext_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityContext_iE-Extensions
%%================================
'enc_SecurityContext_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SecurityContext_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SecurityContext_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SecurityContext_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SecurityContext_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SecurityContext_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SecurityContext_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SecurityContext_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_27'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityContext_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_27'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SecurityContext_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SecurityContext_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SecurityContext'(Tlv) ->
   'dec_SecurityContext'(Tlv, [16]).

'dec_SecurityContext'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nextHopChainingCount(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nextHopParameter(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val2),
if C1 =:= 256 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SecurityContext_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SecurityContext', Term1, Term2, Term3}.



%%================================
%%  SecurityKey
%%================================
'enc_SecurityKey'(Val) ->
    'enc_SecurityKey'(Val, [<<3>>]).

'enc_SecurityKey'(Val, TagIn) ->
encode_unnamed_bit_string(256, Val, TagIn).


'dec_SecurityKey'(Tlv) ->
   'dec_SecurityKey'(Tlv, [3]).

'dec_SecurityKey'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RRC-Establishment-Cause
%%================================
'enc_RRC-Establishment-Cause'(Val) ->
    'enc_RRC-Establishment-Cause'(Val, [<<10>>]).

'enc_RRC-Establishment-Cause'(Val, TagIn) ->
case Val of
emergency -> encode_tags(TagIn, [0], 1);
highPriorityAccess -> encode_tags(TagIn, [1], 1);
'mt-Access' -> encode_tags(TagIn, [2], 1);
'mo-Signalling' -> encode_tags(TagIn, [3], 1);
'mo-Data' -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RRC-Establishment-Cause'(Tlv) ->
   'dec_RRC-Establishment-Cause'(Tlv, [10]).

'dec_RRC-Establishment-Cause'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  RRC-Container
%%================================
'enc_RRC-Container'(Val) ->
    'enc_RRC-Container'(Val, [<<4>>]).

'enc_RRC-Container'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RRC-Container'(Tlv) ->
   'dec_RRC-Container'(Tlv, [4]).

'dec_RRC-Container'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  RNC-ID
%%================================
'enc_RNC-ID'(Val) ->
    'enc_RNC-ID'(Val, [<<2>>]).

'enc_RNC-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RNC-ID'(Tlv) ->
   'dec_RNC-ID'(Tlv, [2]).

'dec_RNC-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RepetitionPeriod
%%================================
'enc_RepetitionPeriod'(Val) ->
    'enc_RepetitionPeriod'(Val, [<<2>>]).

'enc_RepetitionPeriod'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RepetitionPeriod'(Tlv) ->
   'dec_RepetitionPeriod'(Tlv, [2]).

'dec_RepetitionPeriod'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4096 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ReportArea
%%================================
'enc_ReportArea'(Val) ->
    'enc_ReportArea'(Val, [<<10>>]).

'enc_ReportArea'(Val, TagIn) ->
case Val of
ecgi -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReportArea'(Tlv) ->
   'dec_ReportArea'(Tlv, [10]).

'dec_ReportArea'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ecgi;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  RIMRoutingAddress
%%================================
'enc_RIMRoutingAddress'(Val) ->
    'enc_RIMRoutingAddress'(Val, []).

'enc_RIMRoutingAddress'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'gERAN-Cell-ID' ->
         'enc_GERAN-Cell-ID'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_RIMRoutingAddress'(Tlv) ->
   'dec_RIMRoutingAddress'(Tlv, []).

'dec_RIMRoutingAddress'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'gERAN-Cell-ID'
    {131072, V1} -> 
        {'gERAN-Cell-ID', 'dec_GERAN-Cell-ID'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  RIMInformation
%%================================
'enc_RIMInformation'(Val) ->
    'enc_RIMInformation'(Val, [<<4>>]).

'enc_RIMInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RIMInformation'(Tlv) ->
   'dec_RIMInformation'(Tlv, [4]).

'dec_RIMInformation'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  RIMTransfer
%%================================
'enc_RIMTransfer'(Val) ->
    'enc_RIMTransfer'(Val, [<<48>>]).

'enc_RIMTransfer'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute rIMInformation(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute rIMRoutingAddress(2)   External S1AP:RIMRoutingAddress OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RIMRoutingAddress'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RIMTransfer_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RIMTransfer_iE-Extensions
%%================================
'enc_RIMTransfer_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RIMTransfer_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RIMTransfer_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RIMTransfer_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RIMTransfer_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_RIMTransfer_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RIMTransfer_iE-Extensions_ProtocolExtensionField
%%================================
'enc_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_29'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_29'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_RIMTransfer_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RIMTransfer_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_RIMTransfer'(Tlv) ->
   'dec_RIMTransfer'(Tlv, [16]).

'dec_RIMTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rIMInformation(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute rIMRoutingAddress(2)   External S1AP:RIMRoutingAddress OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RIMRoutingAddress'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_RIMTransfer_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RIMTransfer', Term1, Term2, Term3}.



%%================================
%%  RequestType
%%================================
'enc_RequestType'(Val) ->
    'enc_RequestType'(Val, [<<48>>]).

'enc_RequestType'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute eventType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
direct -> encode_tags([<<128>>], [0], 1);
'change-of-serve-cell' -> encode_tags([<<128>>], [1], 1);
'stop-change-of-serve-cell' -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute reportArea(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ecgi -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RequestType_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RequestType_iE-Extensions
%%================================
'enc_RequestType_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RequestType_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RequestType_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RequestType_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RequestType_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_RequestType_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RequestType_iE-Extensions_ProtocolExtensionField
%%================================
'enc_RequestType_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_30'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RequestType_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_30'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_RequestType_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RequestType_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_RequestType'(Tlv) ->
   'dec_RequestType'(Tlv, [16]).

'dec_RequestType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> direct;
1 -> 'change-of-serve-cell';
2 -> 'stop-change-of-serve-cell';
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute reportArea(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ecgi;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_RequestType_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RequestType', Term1, Term2, Term3}.



%%================================
%%  RAC
%%================================
'enc_RAC'(Val) ->
    'enc_RAC'(Val, [<<4>>]).

'enc_RAC'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RAC'(Tlv) ->
   'dec_RAC'(Tlv, [4]).

'dec_RAC'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RelativeMMECapacity
%%================================
'enc_RelativeMMECapacity'(Val) ->
    'enc_RelativeMMECapacity'(Val, [<<2>>]).

'enc_RelativeMMECapacity'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RelativeMMECapacity'(Tlv) ->
   'dec_RelativeMMECapacity'(Tlv, [2]).

'dec_RelativeMMECapacity'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ReceiveStatusofULPDCPSDUs
%%================================
'enc_ReceiveStatusofULPDCPSDUs'(Val) ->
    'enc_ReceiveStatusofULPDCPSDUs'(Val, [<<3>>]).

'enc_ReceiveStatusofULPDCPSDUs'(Val, TagIn) ->
encode_unnamed_bit_string(4096, Val, TagIn).


'dec_ReceiveStatusofULPDCPSDUs'(Tlv) ->
   'dec_ReceiveStatusofULPDCPSDUs'(Tlv, [3]).

'dec_ReceiveStatusofULPDCPSDUs'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 4096 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  QCI
%%================================
'enc_QCI'(Val) ->
    'enc_QCI'(Val, [<<2>>]).

'enc_QCI'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_QCI'(Tlv) ->
   'dec_QCI'(Tlv, [2]).

'dec_QCI'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PriorityLevel
%%================================
'enc_PriorityLevel'(Val) ->
    'enc_PriorityLevel'(Val, [<<2>>]).

'enc_PriorityLevel'(Val, TagIn) ->
encode_integer(Val, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}], TagIn).


'dec_PriorityLevel'(Tlv) ->
   'dec_PriorityLevel'(Tlv, [2]).

'dec_PriorityLevel'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 15 ->
Val2 = Val1,
number2name(Val2, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}]);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Pre-emptionVulnerability
%%================================
'enc_Pre-emptionVulnerability'(Val) ->
    'enc_Pre-emptionVulnerability'(Val, [<<10>>]).

'enc_Pre-emptionVulnerability'(Val, TagIn) ->
case Val of
'not-pre-emptable' -> encode_tags(TagIn, [0], 1);
'pre-emptable' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Pre-emptionVulnerability'(Tlv) ->
   'dec_Pre-emptionVulnerability'(Tlv, [10]).

'dec_Pre-emptionVulnerability'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Pre-emptionCapability
%%================================
'enc_Pre-emptionCapability'(Val) ->
    'enc_Pre-emptionCapability'(Val, [<<10>>]).

'enc_Pre-emptionCapability'(Val, TagIn) ->
case Val of
'shall-not-trigger-pre-emption' -> encode_tags(TagIn, [0], 1);
'may-trigger-pre-emption' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Pre-emptionCapability'(Tlv) ->
   'dec_Pre-emptionCapability'(Tlv, [10]).

'dec_Pre-emptionCapability'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PLMNidentity
%%================================
'enc_PLMNidentity'(Val) ->
    'enc_PLMNidentity'(Val, [<<4>>]).

'enc_PLMNidentity'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_PLMNidentity'(Tlv) ->
   'dec_PLMNidentity'(Tlv, [4]).

'dec_PLMNidentity'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PDCP-SN
%%================================
'enc_PDCP-SN'(Val) ->
    'enc_PDCP-SN'(Val, [<<2>>]).

'enc_PDCP-SN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PDCP-SN'(Tlv) ->
   'dec_PDCP-SN'(Tlv, [2]).

'dec_PDCP-SN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PagingDRX
%%================================
'enc_PagingDRX'(Val) ->
    'enc_PagingDRX'(Val, [<<10>>]).

'enc_PagingDRX'(Val, TagIn) ->
case Val of
v32 -> encode_tags(TagIn, [0], 1);
v64 -> encode_tags(TagIn, [1], 1);
v128 -> encode_tags(TagIn, [2], 1);
v256 -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_PagingDRX'(Tlv) ->
   'dec_PagingDRX'(Tlv, [10]).

'dec_PagingDRX'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> v32;
1 -> v64;
2 -> v128;
3 -> v256;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  OverloadResponse
%%================================
'enc_OverloadResponse'(Val) ->
    'enc_OverloadResponse'(Val, []).

'enc_OverloadResponse'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      overloadAction ->
         case element(2,Val) of
'reject-non-emergency-mo-dt' -> encode_tags([<<128>>], [0], 1);
'reject-all-rrc-cr-signalling' -> encode_tags([<<128>>], [1], 1);
'permit-emergency-sessions-only' -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_OverloadResponse'(Tlv) ->
   'dec_OverloadResponse'(Tlv, []).

'dec_OverloadResponse'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'overloadAction'
    {131072, V1} -> 
        {overloadAction, case decode_integer(V1, []) of
0 -> 'reject-non-emergency-mo-dt';
1 -> 'reject-all-rrc-cr-signalling';
2 -> 'permit-emergency-sessions-only';
Default1 -> {asn1_enum,Default1}
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  OverloadAction
%%================================
'enc_OverloadAction'(Val) ->
    'enc_OverloadAction'(Val, [<<10>>]).

'enc_OverloadAction'(Val, TagIn) ->
case Val of
'reject-non-emergency-mo-dt' -> encode_tags(TagIn, [0], 1);
'reject-all-rrc-cr-signalling' -> encode_tags(TagIn, [1], 1);
'permit-emergency-sessions-only' -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_OverloadAction'(Tlv) ->
   'dec_OverloadAction'(Tlv, [10]).

'dec_OverloadAction'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'reject-non-emergency-mo-dt';
1 -> 'reject-all-rrc-cr-signalling';
2 -> 'permit-emergency-sessions-only';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  OldBSS-ToNewBSS-Information
%%================================
'enc_OldBSS-ToNewBSS-Information'(Val) ->
    'enc_OldBSS-ToNewBSS-Information'(Val, [<<4>>]).

'enc_OldBSS-ToNewBSS-Information'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_OldBSS-ToNewBSS-Information'(Tlv) ->
   'dec_OldBSS-ToNewBSS-Information'(Tlv, [4]).

'dec_OldBSS-ToNewBSS-Information'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  NumberofBroadcast
%%================================
'enc_NumberofBroadcast'(Val) ->
    'enc_NumberofBroadcast'(Val, [<<2>>]).

'enc_NumberofBroadcast'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_NumberofBroadcast'(Tlv) ->
   'dec_NumberofBroadcast'(Tlv, [2]).

'dec_NumberofBroadcast'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NumberofBroadcastRequest
%%================================
'enc_NumberofBroadcastRequest'(Val) ->
    'enc_NumberofBroadcastRequest'(Val, [<<2>>]).

'enc_NumberofBroadcastRequest'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_NumberofBroadcastRequest'(Tlv) ->
   'dec_NumberofBroadcastRequest'(Tlv, [2]).

'dec_NumberofBroadcastRequest'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NASSecurityParameterstoE-UTRAN
%%================================
'enc_NASSecurityParameterstoE-UTRAN'(Val) ->
    'enc_NASSecurityParameterstoE-UTRAN'(Val, [<<4>>]).

'enc_NASSecurityParameterstoE-UTRAN'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_NASSecurityParameterstoE-UTRAN'(Tlv) ->
   'dec_NASSecurityParameterstoE-UTRAN'(Tlv, [4]).

'dec_NASSecurityParameterstoE-UTRAN'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  NASSecurityParametersfromE-UTRAN
%%================================
'enc_NASSecurityParametersfromE-UTRAN'(Val) ->
    'enc_NASSecurityParametersfromE-UTRAN'(Val, [<<4>>]).

'enc_NASSecurityParametersfromE-UTRAN'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_NASSecurityParametersfromE-UTRAN'(Tlv) ->
   'dec_NASSecurityParametersfromE-UTRAN'(Tlv, [4]).

'dec_NASSecurityParametersfromE-UTRAN'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  NAS-PDU
%%================================
'enc_NAS-PDU'(Val) ->
    'enc_NAS-PDU'(Val, [<<4>>]).

'enc_NAS-PDU'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_NAS-PDU'(Tlv) ->
   'dec_NAS-PDU'(Tlv, [4]).

'dec_NAS-PDU'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  MSClassmark3
%%================================
'enc_MSClassmark3'(Val) ->
    'enc_MSClassmark3'(Val, [<<4>>]).

'enc_MSClassmark3'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MSClassmark3'(Tlv) ->
   'dec_MSClassmark3'(Tlv, [4]).

'dec_MSClassmark3'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  MSClassmark2
%%================================
'enc_MSClassmark2'(Val) ->
    'enc_MSClassmark2'(Val, [<<4>>]).

'enc_MSClassmark2'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MSClassmark2'(Tlv) ->
   'dec_MSClassmark2'(Tlv, [4]).

'dec_MSClassmark2'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  M-TMSI
%%================================
'enc_M-TMSI'(Val) ->
    'enc_M-TMSI'(Val, [<<4>>]).

'enc_M-TMSI'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_M-TMSI'(Tlv) ->
   'dec_M-TMSI'(Tlv, [4]).

'dec_M-TMSI'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MME-UE-S1AP-ID
%%================================
'enc_MME-UE-S1AP-ID'(Val) ->
    'enc_MME-UE-S1AP-ID'(Val, [<<2>>]).

'enc_MME-UE-S1AP-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_MME-UE-S1AP-ID'(Tlv) ->
   'dec_MME-UE-S1AP-ID'(Tlv, [2]).

'dec_MME-UE-S1AP-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MME-Code
%%================================
'enc_MME-Code'(Val) ->
    'enc_MME-Code'(Val, [<<4>>]).

'enc_MME-Code'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MME-Code'(Tlv) ->
   'dec_MME-Code'(Tlv, [4]).

'dec_MME-Code'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MME-Group-ID
%%================================
'enc_MME-Group-ID'(Val) ->
    'enc_MME-Group-ID'(Val, [<<4>>]).

'enc_MME-Group-ID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MME-Group-ID'(Tlv) ->
   'dec_MME-Group-ID'(Tlv, [4]).

'dec_MME-Group-ID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MMEname
%%================================
'enc_MMEname'(Val) ->
    'enc_MMEname'(Val, [<<19>>]).

'enc_MMEname'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MMEname'(Tlv) ->
   'dec_MMEname'(Tlv, [19]).

'dec_MMEname'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  MessageIdentifier
%%================================
'enc_MessageIdentifier'(Val) ->
    'enc_MessageIdentifier'(Val, [<<3>>]).

'enc_MessageIdentifier'(Val, TagIn) ->
encode_unnamed_bit_string(16, Val, TagIn).


'dec_MessageIdentifier'(Tlv) ->
   'dec_MessageIdentifier'(Tlv, [3]).

'dec_MessageIdentifier'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  L3-Information
%%================================
'enc_L3-Information'(Val) ->
    'enc_L3-Information'(Val, [<<4>>]).

'enc_L3-Information'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_L3-Information'(Tlv) ->
   'dec_L3-Information'(Tlv, [4]).

'dec_L3-Information'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  LastVisitedGERANCellInformation
%%================================
'enc_LastVisitedGERANCellInformation'(Val) ->
    'enc_LastVisitedGERANCellInformation'(Val, []).

'enc_LastVisitedGERANCellInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      undefined ->
         encode_null(element(2,Val), [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_LastVisitedGERANCellInformation'(Tlv) ->
   'dec_LastVisitedGERANCellInformation'(Tlv, []).

'dec_LastVisitedGERANCellInformation'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'undefined'
    {131072, V1} -> 
        {undefined, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  LastVisitedUTRANCellInformation
%%================================
'enc_LastVisitedUTRANCellInformation'(Val) ->
    'enc_LastVisitedUTRANCellInformation'(Val, [<<4>>]).

'enc_LastVisitedUTRANCellInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LastVisitedUTRANCellInformation'(Tlv) ->
   'dec_LastVisitedUTRANCellInformation'(Tlv, [4]).

'dec_LastVisitedUTRANCellInformation'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  LastVisitedEUTRANCellInformation
%%================================
'enc_LastVisitedEUTRANCellInformation'(Val) ->
    'enc_LastVisitedEUTRANCellInformation'(Val, [<<48>>]).

'enc_LastVisitedEUTRANCellInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute global-Cell-ID(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_EUTRAN-CGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellType(2)   External S1AP:CellType
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CellType'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute time-UE-StayedInCell(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LastVisitedEUTRANCellInformation_iE-Extensions
%%================================
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_7'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_7'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_LastVisitedEUTRANCellInformation'(Tlv) ->
   'dec_LastVisitedEUTRANCellInformation'(Tlv, [16]).

'dec_LastVisitedEUTRANCellInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute global-Cell-ID(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_EUTRAN-CGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellType(2)   External S1AP:CellType
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CellType'(V2, [131073]),

%%-------------------------------------------------
%% attribute time-UE-StayedInCell(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LastVisitedEUTRANCellInformation', Term1, Term2, Term3, Term4}.



%%================================
%%  LastVisitedCell-Item
%%================================
'enc_LastVisitedCell-Item'(Val) ->
    'enc_LastVisitedCell-Item'(Val, []).

'enc_LastVisitedCell-Item'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'e-UTRAN-Cell' ->
         'enc_LastVisitedEUTRANCellInformation'(element(2,Val), [<<160>>]);
      'uTRAN-Cell' ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      'gERAN-Cell' ->
         'enc_LastVisitedGERANCellInformation'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_LastVisitedCell-Item'(Tlv) ->
   'dec_LastVisitedCell-Item'(Tlv, []).

'dec_LastVisitedCell-Item'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'e-UTRAN-Cell'
    {131072, V1} -> 
        {'e-UTRAN-Cell', 'dec_LastVisitedEUTRANCellInformation'(V1, [])};


%% 'uTRAN-Cell'
    {131073, V1} -> 
        {'uTRAN-Cell', decode_octet_string(V1, [])};


%% 'gERAN-Cell'
    {131074, V1} -> 
        {'gERAN-Cell', 'dec_LastVisitedGERANCellInformation'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  LAI
%%================================
'enc_LAI'(Val) ->
    'enc_LAI'(Val, [<<48>>]).

'enc_LAI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute lAC(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LAI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LAI_iE-Extensions
%%================================
'enc_LAI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LAI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LAI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LAI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LAI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_LAI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LAI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_LAI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_13'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LAI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_13'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_LAI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LAI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_LAI'(Tlv) ->
   'dec_LAI'(Tlv, [16]).

'dec_LAI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute lAC(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_LAI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LAI', Term1, Term2, Term3}.



%%================================
%%  LAC
%%================================
'enc_LAC'(Val) ->
    'enc_LAC'(Val, [<<4>>]).

'enc_LAC'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LAC'(Tlv) ->
   'dec_LAC'(Tlv, [4]).

'dec_LAC'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  InterfacesToTrace
%%================================
'enc_InterfacesToTrace'(Val) ->
    'enc_InterfacesToTrace'(Val, [<<3>>]).

'enc_InterfacesToTrace'(Val, TagIn) ->
encode_unnamed_bit_string(8, Val, TagIn).


'dec_InterfacesToTrace'(Tlv) ->
   'dec_InterfacesToTrace'(Tlv, [3]).

'dec_InterfacesToTrace'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IntegrityProtectionAlgorithms
%%================================
'enc_IntegrityProtectionAlgorithms'(Val) ->
    'enc_IntegrityProtectionAlgorithms'(Val, [<<3>>]).

'enc_IntegrityProtectionAlgorithms'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_IntegrityProtectionAlgorithms'(Tlv) ->
   'dec_IntegrityProtectionAlgorithms'(Tlv, [3]).

'dec_IntegrityProtectionAlgorithms'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  IMSI
%%================================
'enc_IMSI'(Val) ->
    'enc_IMSI'(Val, [<<4>>]).

'enc_IMSI'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_IMSI'(Tlv) ->
   'dec_IMSI'(Tlv, [4]).

'dec_IMSI'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if 3 =< C1, C1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  HFN
%%================================
'enc_HFN'(Val) ->
    'enc_HFN'(Val, [<<2>>]).

'enc_HFN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_HFN'(Tlv) ->
   'dec_HFN'(Tlv, [2]).

'dec_HFN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 1048575 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  HandoverType
%%================================
'enc_HandoverType'(Val) ->
    'enc_HandoverType'(Val, [<<10>>]).

'enc_HandoverType'(Val, TagIn) ->
case Val of
intralte -> encode_tags(TagIn, [0], 1);
ltetoutran -> encode_tags(TagIn, [1], 1);
ltetogeran -> encode_tags(TagIn, [2], 1);
utrantolte -> encode_tags(TagIn, [3], 1);
gerantolte -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_HandoverType'(Tlv) ->
   'dec_HandoverType'(Tlv, [10]).

'dec_HandoverType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> intralte;
1 -> ltetoutran;
2 -> ltetogeran;
3 -> utrantolte;
4 -> gerantolte;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  HandoverRestrictionList
%%================================
'enc_HandoverRestrictionList'(Val) ->
    'enc_HandoverRestrictionList'(Val, [<<48>>]).

'enc_HandoverRestrictionList'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute servingPLMN(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute equivalentPLMNs(2)   External S1AP:EPLMNs OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EPLMNs'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenTAs(3)   External S1AP:ForbiddenTAs OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenTAs'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenLAs(4)   External S1AP:ForbiddenLAs OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenLAs'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenInterRATs(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
all -> encode_tags([<<132>>], [0], 1);
geran -> encode_tags([<<132>>], [1], 1);
utran -> encode_tags([<<132>>], [2], 1);
cdma2000 -> encode_tags([<<132>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HandoverRestrictionList_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRestrictionList_iE-Extensions
%%================================
'enc_HandoverRestrictionList_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRestrictionList_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRestrictionList_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRestrictionList_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_HandoverRestrictionList_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRestrictionList_iE-Extensions_ProtocolExtensionField
%%================================
'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_33'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_33'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_HandoverRestrictionList_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRestrictionList'(Tlv) ->
   'dec_HandoverRestrictionList'(Tlv, [16]).

'dec_HandoverRestrictionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute servingPLMN(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute equivalentPLMNs(2)   External S1AP:EPLMNs OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_EPLMNs'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute forbiddenTAs(3)   External S1AP:ForbiddenTAs OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenTAs'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute forbiddenLAs(4)   External S1AP:ForbiddenLAs OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ForbiddenLAs'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute forbiddenInterRATs(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000;
Default1 -> {asn1_enum,Default1}
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_HandoverRestrictionList_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRestrictionList', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  GUMMEI
%%================================
'enc_GUMMEI'(Val) ->
    'enc_GUMMEI'(Val, [<<48>>]).

'enc_GUMMEI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute mME-Group-ID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute mME-Code(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GUMMEI_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GUMMEI_iE-Extensions
%%================================
'enc_GUMMEI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GUMMEI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GUMMEI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GUMMEI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GUMMEI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GUMMEI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_34'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_34'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GUMMEI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GUMMEI'(Tlv) ->
   'dec_GUMMEI'(Tlv, [16]).

'dec_GUMMEI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute mME-Group-ID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute mME-Code(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C3 = byte_size(Val3),
if C3 =:= 1 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_GUMMEI_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GUMMEI', Term1, Term2, Term3, Term4}.



%%================================
%%  GTP-TEID
%%================================
'enc_GTP-TEID'(Val) ->
    'enc_GTP-TEID'(Val, [<<4>>]).

'enc_GTP-TEID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_GTP-TEID'(Tlv) ->
   'dec_GTP-TEID'(Tlv, [4]).

'dec_GTP-TEID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  GBR-QosInformation
%%================================
'enc_GBR-QosInformation'(Val) ->
    'enc_GBR-QosInformation'(Val, [<<48>>]).

'enc_GBR-QosInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateDL(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateUL(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateDL(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateUL(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GBR-QosInformation_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GBR-QosInformation_iE-Extensions
%%================================
'enc_GBR-QosInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GBR-QosInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GBR-QosInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GBR-QosInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GBR-QosInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GBR-QosInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_35'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_35'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GBR-QosInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GBR-QosInformation'(Tlv) ->
   'dec_GBR-QosInformation'(Tlv, [16]).

'dec_GBR-QosInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateDL(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateUL(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 10000000000 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateDL(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 10000000000 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateUL(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 10000000000 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_GBR-QosInformation_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GBR-QosInformation', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ForbiddenLACs
%%================================
'enc_ForbiddenLACs'(Val) ->
    'enc_ForbiddenLACs'(Val, [<<48>>]).

'enc_ForbiddenLACs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLACs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLACs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLACs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ForbiddenLACs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenLACs'(Tlv) ->
   'dec_ForbiddenLACs'(Tlv, [16]).

'dec_ForbiddenLACs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ForbiddenLAs-Item
%%================================
'enc_ForbiddenLAs-Item'(Val) ->
    'enc_ForbiddenLAs-Item'(Val, [<<48>>]).

'enc_ForbiddenLAs-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute forbiddenLACs(2)   External S1AP:ForbiddenLACs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ForbiddenLACs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenLAs-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ForbiddenLAs-Item_iE-Extensions
%%================================
'enc_ForbiddenLAs-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLAs-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLAs-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ForbiddenLAs-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_32'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_32'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ForbiddenLAs-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ForbiddenLAs-Item'(Tlv) ->
   'dec_ForbiddenLAs-Item'(Tlv, [16]).

'dec_ForbiddenLAs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute forbiddenLACs(2)   External S1AP:ForbiddenLACs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ForbiddenLACs'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenLAs-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ForbiddenLAs-Item', Term1, Term2, Term3}.



%%================================
%%  ForbiddenLAs
%%================================
'enc_ForbiddenLAs'(Val) ->
    'enc_ForbiddenLAs'(Val, [<<48>>]).

'enc_ForbiddenLAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item'(H, [<<48>>]),
   'enc_ForbiddenLAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenLAs'(Tlv) ->
   'dec_ForbiddenLAs'(Tlv, [16]).

'dec_ForbiddenLAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenLAs-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ForbiddenTACs
%%================================
'enc_ForbiddenTACs'(Val) ->
    'enc_ForbiddenTACs'(Val, [<<48>>]).

'enc_ForbiddenTACs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTACs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTACs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTACs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ForbiddenTACs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenTACs'(Tlv) ->
   'dec_ForbiddenTACs'(Tlv, [16]).

'dec_ForbiddenTACs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ForbiddenTAs-Item
%%================================
'enc_ForbiddenTAs-Item'(Val) ->
    'enc_ForbiddenTAs-Item'(Val, [<<48>>]).

'enc_ForbiddenTAs-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute forbiddenTACs(2)   External S1AP:ForbiddenTACs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ForbiddenTACs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenTAs-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ForbiddenTAs-Item_iE-Extensions
%%================================
'enc_ForbiddenTAs-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTAs-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTAs-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ForbiddenTAs-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_31'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_31'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ForbiddenTAs-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ForbiddenTAs-Item'(Tlv) ->
   'dec_ForbiddenTAs-Item'(Tlv, [16]).

'dec_ForbiddenTAs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute forbiddenTACs(2)   External S1AP:ForbiddenTACs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ForbiddenTACs'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenTAs-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ForbiddenTAs-Item', Term1, Term2, Term3}.



%%================================
%%  ForbiddenTAs
%%================================
'enc_ForbiddenTAs'(Val) ->
    'enc_ForbiddenTAs'(Val, [<<48>>]).

'enc_ForbiddenTAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item'(H, [<<48>>]),
   'enc_ForbiddenTAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenTAs'(Tlv) ->
   'dec_ForbiddenTAs'(Tlv, [16]).

'dec_ForbiddenTAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenTAs-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ForbiddenInterRATs
%%================================
'enc_ForbiddenInterRATs'(Val) ->
    'enc_ForbiddenInterRATs'(Val, [<<10>>]).

'enc_ForbiddenInterRATs'(Val, TagIn) ->
case Val of
all -> encode_tags(TagIn, [0], 1);
geran -> encode_tags(TagIn, [1], 1);
utran -> encode_tags(TagIn, [2], 1);
cdma2000 -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ForbiddenInterRATs'(Tlv) ->
   'dec_ForbiddenInterRATs'(Tlv, [10]).

'dec_ForbiddenInterRATs'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ExtendedRNC-ID
%%================================
'enc_ExtendedRNC-ID'(Val) ->
    'enc_ExtendedRNC-ID'(Val, [<<2>>]).

'enc_ExtendedRNC-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ExtendedRNC-ID'(Tlv) ->
   'dec_ExtendedRNC-ID'(Tlv, [2]).

'dec_ExtendedRNC-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 4096 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  EUTRAN-CGI
%%================================
'enc_EUTRAN-CGI'(Val) ->
    'enc_EUTRAN-CGI'(Val, [<<48>>]).

'enc_EUTRAN-CGI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cell-ID(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(28, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EUTRAN-CGI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EUTRAN-CGI_iE-Extensions
%%================================
'enc_EUTRAN-CGI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_EUTRAN-CGI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EUTRAN-CGI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EUTRAN-CGI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_EUTRAN-CGI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  EUTRAN-CGI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_2'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_2'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_EUTRAN-CGI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_EUTRAN-CGI'(Tlv) ->
   'dec_EUTRAN-CGI'(Tlv, [16]).

'dec_EUTRAN-CGI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cell-ID(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 28 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_EUTRAN-CGI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'EUTRAN-CGI', Term1, Term2, Term3}.



%%================================
%%  E-RABLevelQoSParameters
%%================================
'enc_E-RABLevelQoSParameters'(Val) ->
    'enc_E-RABLevelQoSParameters'(Val, [<<48>>]).

'enc_E-RABLevelQoSParameters'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute qCI(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute allocationRetentionPriority(2)   External S1AP:AllocationAndRetentionPriority
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AllocationAndRetentionPriority'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute gbrQosInformation(3)   External S1AP:GBR-QosInformation OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GBR-QosInformation'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABLevelQoSParameters_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABLevelQoSParameters_iE-Extensions
%%================================
'enc_E-RABLevelQoSParameters_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABLevelQoSParameters_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABLevelQoSParameters_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABLevelQoSParameters_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABLevelQoSParameters_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_37'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_37'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABLevelQoSParameters_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABLevelQoSParameters'(Tlv) ->
   'dec_E-RABLevelQoSParameters'(Tlv, [16]).

'dec_E-RABLevelQoSParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute qCI(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute allocationRetentionPriority(2)   External S1AP:AllocationAndRetentionPriority
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_AllocationAndRetentionPriority'(V2, [131073]),

%%-------------------------------------------------
%% attribute gbrQosInformation(3)   External S1AP:GBR-QosInformation OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GBR-QosInformation'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABLevelQoSParameters_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABLevelQoSParameters', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABItem
%%================================
'enc_E-RABItem'(Val) ->
    'enc_E-RABItem'(Val, [<<48>>]).

'enc_E-RABItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cause(2)   External S1AP:Cause
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Cause'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABItem_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABItem_iE-Extensions
%%================================
'enc_E-RABItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_38'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_38'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABItem'(Tlv) ->
   'dec_E-RABItem'(Tlv, [16]).

'dec_E-RABItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute cause(2)   External S1AP:Cause
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Cause'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_E-RABItem_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABItem', Term1, Term2, Term3}.



%%================================
%%  E-RABList
%%================================
'enc_E-RABList'(Val) ->
    'enc_E-RABList'(Val, [<<48>>]).

'enc_E-RABList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABList_ProtocolIE-Field
%%================================
'enc_E-RABList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_39'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_39'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABList'(Tlv) ->
   'dec_E-RABList'(Tlv, [16]).

'dec_E-RABList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABInformationListItem
%%================================
'enc_E-RABInformationListItem'(Val) ->
    'enc_E-RABInformationListItem'(Val, [<<48>>]).

'enc_E-RABInformationListItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute dL-Forwarding(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
'dL-Forwarding-proposed' -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABInformationListItem_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABInformationListItem_iE-Extensions
%%================================
'enc_E-RABInformationListItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABInformationListItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABInformationListItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABInformationListItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABInformationListItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABInformationListItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_40'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_40'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABInformationListItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABInformationListItem'(Tlv) ->
   'dec_E-RABInformationListItem'(Tlv, [16]).

'dec_E-RABInformationListItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute dL-Forwarding(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> 'dL-Forwarding-proposed';
Default1 -> {asn1_enum,Default1}
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_E-RABInformationListItem_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABInformationListItem', Term1, Term2, Term3}.



%%================================
%%  E-RABInformationList
%%================================
'enc_E-RABInformationList'(Val) ->
    'enc_E-RABInformationList'(Val, [<<48>>]).

'enc_E-RABInformationList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABInformationList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABInformationList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABInformationList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABInformationList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABInformationList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABInformationList_ProtocolIE-Field
%%================================
'enc_E-RABInformationList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_22'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABInformationList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_22'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABInformationList'(Tlv) ->
   'dec_E-RABInformationList'(Tlv, [16]).

'dec_E-RABInformationList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABInformationList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RAB-ID
%%================================
'enc_E-RAB-ID'(Val) ->
    'enc_E-RAB-ID'(Val, [<<2>>]).

'enc_E-RAB-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_E-RAB-ID'(Tlv) ->
   'dec_E-RAB-ID'(Tlv, [2]).

'dec_E-RAB-ID'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  EventType
%%================================
'enc_EventType'(Val) ->
    'enc_EventType'(Val, [<<10>>]).

'enc_EventType'(Val, TagIn) ->
case Val of
direct -> encode_tags(TagIn, [0], 1);
'change-of-serve-cell' -> encode_tags(TagIn, [1], 1);
'stop-change-of-serve-cell' -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EventType'(Tlv) ->
   'dec_EventType'(Tlv, [10]).

'dec_EventType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> direct;
1 -> 'change-of-serve-cell';
2 -> 'stop-change-of-serve-cell';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  EPLMNs
%%================================
'enc_EPLMNs'(Val) ->
    'enc_EPLMNs'(Val, [<<48>>]).

'enc_EPLMNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_EPLMNs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EPLMNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EPLMNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_EPLMNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_EPLMNs'(Tlv) ->
   'dec_EPLMNs'(Tlv, [16]).

'dec_EPLMNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  EncryptionAlgorithms
%%================================
'enc_EncryptionAlgorithms'(Val) ->
    'enc_EncryptionAlgorithms'(Val, [<<3>>]).

'enc_EncryptionAlgorithms'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_EncryptionAlgorithms'(Tlv) ->
   'dec_EncryptionAlgorithms'(Tlv, [3]).

'dec_EncryptionAlgorithms'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  ENBX2TLAs
%%================================
'enc_ENBX2TLAs'(Val) ->
    'enc_ENBX2TLAs'(Val, [<<48>>]).

'enc_ENBX2TLAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ENBX2TLAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBX2TLAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBX2TLAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_unnamed_bit_string(H, [<<3>>]),
   'enc_ENBX2TLAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ENBX2TLAs'(Tlv) ->
   'dec_ENBX2TLAs'(Tlv, [16]).

'dec_ENBX2TLAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_native_bit_string(V1, [3]) || V1 <- Tlv1].




%%================================
%%  ENBname
%%================================
'enc_ENBname'(Val) ->
    'enc_ENBname'(Val, [<<19>>]).

'enc_ENBname'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_ENBname'(Tlv) ->
   'dec_ENBname'(Tlv, [19]).

'dec_ENBname'(Tlv, TagIn) ->
begin
binary_to_list(decode_restricted_string(Tlv, TagIn))
end
.



%%================================
%%  ENB-UE-S1AP-ID
%%================================
'enc_ENB-UE-S1AP-ID'(Val) ->
    'enc_ENB-UE-S1AP-ID'(Val, [<<2>>]).

'enc_ENB-UE-S1AP-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ENB-UE-S1AP-ID'(Tlv) ->
   'dec_ENB-UE-S1AP-ID'(Tlv, [2]).

'dec_ENB-UE-S1AP-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 16777215 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ENB-StatusTransfer-TransparentContainer
%%================================
'enc_ENB-StatusTransfer-TransparentContainer'(Val) ->
    'enc_ENB-StatusTransfer-TransparentContainer'(Val, [<<48>>]).

'enc_ENB-StatusTransfer-TransparentContainer'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bearers-SubjectToStatusTransferList(1)   External S1AP:Bearers-SubjectToStatusTransferList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Bearers-SubjectToStatusTransferList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENB-StatusTransfer-TransparentContainer_iE-Extensions
%%================================
'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_42'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_42'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ENB-StatusTransfer-TransparentContainer'(Tlv) ->
   'dec_ENB-StatusTransfer-TransparentContainer'(Tlv, [16]).

'dec_ENB-StatusTransfer-TransparentContainer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bearers-SubjectToStatusTransferList(1)   External S1AP:Bearers-SubjectToStatusTransferList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Bearers-SubjectToStatusTransferList'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENB-StatusTransfer-TransparentContainer', Term1, Term2}.



%%================================
%%  Global-ENB-ID
%%================================
'enc_Global-ENB-ID'(Val) ->
    'enc_Global-ENB-ID'(Val, [<<48>>]).

'enc_Global-ENB-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eNB-ID(2)   External S1AP:ENB-ID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ENB-ID'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Global-ENB-ID_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Global-ENB-ID_iE-Extensions
%%================================
'enc_Global-ENB-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Global-ENB-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Global-ENB-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Global-ENB-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_Global-ENB-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Global-ENB-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_15'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_15'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_Global-ENB-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_Global-ENB-ID'(Tlv) ->
   'dec_Global-ENB-ID'(Tlv, [16]).

'dec_Global-ENB-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eNB-ID(2)   External S1AP:ENB-ID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ENB-ID'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Global-ENB-ID_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Global-ENB-ID', Term1, Term2, Term3}.



%%================================
%%  GERAN-Cell-ID
%%================================
'enc_GERAN-Cell-ID'(Val) ->
    'enc_GERAN-Cell-ID'(Val, [<<48>>]).

'enc_GERAN-Cell-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute lAI(1)   External S1AP:LAI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LAI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute rAC(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cI(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GERAN-Cell-ID_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GERAN-Cell-ID_iE-Extensions
%%================================
'enc_GERAN-Cell-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GERAN-Cell-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GERAN-Cell-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GERAN-Cell-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GERAN-Cell-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_28'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_28'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GERAN-Cell-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GERAN-Cell-ID'(Tlv) ->
   'dec_GERAN-Cell-ID'(Tlv, [16]).

'dec_GERAN-Cell-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute lAI(1)   External S1AP:LAI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LAI'(V1, [131072]),

%%-------------------------------------------------
%% attribute rAC(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cI(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_octet_string(V3, [131074]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_GERAN-Cell-ID_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GERAN-Cell-ID', Term1, Term2, Term3, Term4}.



%%================================
%%  ENB-ID
%%================================
'enc_ENB-ID'(Val) ->
    'enc_ENB-ID'(Val, []).

'enc_ENB-ID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'macroENB-ID' ->
         encode_unnamed_bit_string(20, element(2,Val), [<<128>>]);
      'homeENB-ID' ->
         encode_unnamed_bit_string(28, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ENB-ID'(Tlv) ->
   'dec_ENB-ID'(Tlv, []).

'dec_ENB-ID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'macroENB-ID'
    {131072, V1} -> 
        {'macroENB-ID', begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 20 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'homeENB-ID'
    {131073, V1} -> 
        {'homeENB-ID', begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 28 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  CompletedCellinEAI-Item
%%================================
'enc_CompletedCellinEAI-Item'(Val) ->
    'enc_CompletedCellinEAI-Item'(Val, [<<48>>]).

'enc_CompletedCellinEAI-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_EUTRAN-CGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CompletedCellinEAI-Item_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CompletedCellinEAI-Item_iE-Extensions
%%================================
'enc_CompletedCellinEAI-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CompletedCellinEAI-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CompletedCellinEAI-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CompletedCellinEAI-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CompletedCellinEAI-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_43'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_43'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CompletedCellinEAI-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CompletedCellinEAI-Item'(Tlv) ->
   'dec_CompletedCellinEAI-Item'(Tlv, [16]).

'dec_CompletedCellinEAI-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_EUTRAN-CGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CompletedCellinEAI-Item_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CompletedCellinEAI-Item', Term1, Term2}.



%%================================
%%  CompletedCellinEAI
%%================================
'enc_CompletedCellinEAI'(Val) ->
    'enc_CompletedCellinEAI'(Val, [<<48>>]).

'enc_CompletedCellinEAI'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinEAI_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CompletedCellinEAI_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CompletedCellinEAI_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CompletedCellinEAI-Item'(H, [<<48>>]),
   'enc_CompletedCellinEAI_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CompletedCellinEAI'(Tlv) ->
   'dec_CompletedCellinEAI'(Tlv, [16]).

'dec_CompletedCellinEAI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CompletedCellinEAI-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  EmergencyAreaID-Broadcast-Item
%%================================
'enc_EmergencyAreaID-Broadcast-Item'(Val) ->
    'enc_EmergencyAreaID-Broadcast-Item'(Val, [<<48>>]).

'enc_EmergencyAreaID-Broadcast-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute emergencyAreaID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute completedCellinEAI(2)   External S1AP:CompletedCellinEAI
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CompletedCellinEAI'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  EmergencyAreaID-Broadcast-Item_iE-Extensions
%%================================
'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_44'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_44'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_EmergencyAreaID-Broadcast-Item'(Tlv) ->
   'dec_EmergencyAreaID-Broadcast-Item'(Tlv, [16]).

'dec_EmergencyAreaID-Broadcast-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute emergencyAreaID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute completedCellinEAI(2)   External S1AP:CompletedCellinEAI
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CompletedCellinEAI'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'EmergencyAreaID-Broadcast-Item', Term1, Term2, Term3}.



%%================================
%%  EmergencyAreaID-Broadcast
%%================================
'enc_EmergencyAreaID-Broadcast'(Val) ->
    'enc_EmergencyAreaID-Broadcast'(Val, [<<48>>]).

'enc_EmergencyAreaID-Broadcast'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_EmergencyAreaID-Broadcast_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EmergencyAreaID-Broadcast_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EmergencyAreaID-Broadcast_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_EmergencyAreaID-Broadcast-Item'(H, [<<48>>]),
   'enc_EmergencyAreaID-Broadcast_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_EmergencyAreaID-Broadcast'(Tlv) ->
   'dec_EmergencyAreaID-Broadcast'(Tlv, [16]).

'dec_EmergencyAreaID-Broadcast'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_EmergencyAreaID-Broadcast-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  EmergencyAreaID
%%================================
'enc_EmergencyAreaID'(Val) ->
    'enc_EmergencyAreaID'(Val, [<<4>>]).

'enc_EmergencyAreaID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_EmergencyAreaID'(Tlv) ->
   'dec_EmergencyAreaID'(Tlv, [4]).

'dec_EmergencyAreaID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  EmergencyAreaIDList
%%================================
'enc_EmergencyAreaIDList'(Val) ->
    'enc_EmergencyAreaIDList'(Val, [<<48>>]).

'enc_EmergencyAreaIDList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_EmergencyAreaIDList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EmergencyAreaIDList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EmergencyAreaIDList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_EmergencyAreaIDList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_EmergencyAreaIDList'(Tlv) ->
   'dec_EmergencyAreaIDList'(Tlv, [16]).

'dec_EmergencyAreaIDList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ECGIList
%%================================
'enc_ECGIList'(Val) ->
    'enc_ECGIList'(Val, [<<48>>]).

'enc_ECGIList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ECGIList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ECGIList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ECGIList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_EUTRAN-CGI'(H, [<<48>>]),
   'enc_ECGIList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ECGIList'(Tlv) ->
   'dec_ECGIList'(Tlv, [16]).

'dec_ECGIList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_EUTRAN-CGI'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Direct-Forwarding-Path-Availability
%%================================
'enc_Direct-Forwarding-Path-Availability'(Val) ->
    'enc_Direct-Forwarding-Path-Availability'(Val, [<<10>>]).

'enc_Direct-Forwarding-Path-Availability'(Val, TagIn) ->
case Val of
directPathAvailable -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Direct-Forwarding-Path-Availability'(Tlv) ->
   'dec_Direct-Forwarding-Path-Availability'(Tlv, [10]).

'dec_Direct-Forwarding-Path-Availability'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> directPathAvailable;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  DL-Forwarding
%%================================
'enc_DL-Forwarding'(Val) ->
    'enc_DL-Forwarding'(Val, [<<10>>]).

'enc_DL-Forwarding'(Val, TagIn) ->
case Val of
'dL-Forwarding-proposed' -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DL-Forwarding'(Tlv) ->
   'dec_DL-Forwarding'(Tlv, [10]).

'dec_DL-Forwarding'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'dL-Forwarding-proposed';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  DataCodingScheme
%%================================
'enc_DataCodingScheme'(Val) ->
    'enc_DataCodingScheme'(Val, [<<3>>]).

'enc_DataCodingScheme'(Val, TagIn) ->
encode_unnamed_bit_string(8, Val, TagIn).


'dec_DataCodingScheme'(Tlv) ->
   'dec_DataCodingScheme'(Tlv, [3]).

'dec_DataCodingScheme'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CriticalityDiagnostics-IE-Item
%%================================
'enc_CriticalityDiagnostics-IE-Item'(Val) ->
    'enc_CriticalityDiagnostics-IE-Item'(Val, [<<48>>]).

'enc_CriticalityDiagnostics-IE-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute iECriticality(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
reject -> encode_tags([<<128>>], [0], 1);
ignore -> encode_tags([<<128>>], [1], 1);
notify -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute iE-ID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute typeOfError(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'not-understood' -> encode_tags([<<130>>], [0], 1);
missing -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics-IE-Item_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CriticalityDiagnostics-IE-Item_iE-Extensions
%%================================
'enc_CriticalityDiagnostics-IE-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_45'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_45'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CriticalityDiagnostics-IE-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CriticalityDiagnostics-IE-Item'(Tlv) ->
   'dec_CriticalityDiagnostics-IE-Item'(Tlv, [16]).

'dec_CriticalityDiagnostics-IE-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iECriticality(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute iE-ID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute typeOfError(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'not-understood';
1 -> missing;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_CriticalityDiagnostics-IE-Item_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CriticalityDiagnostics-IE-Item', Term1, Term2, Term3, Term4}.



%%================================
%%  CriticalityDiagnostics-IE-List
%%================================
'enc_CriticalityDiagnostics-IE-List'(Val) ->
    'enc_CriticalityDiagnostics-IE-List'(Val, [<<48>>]).

'enc_CriticalityDiagnostics-IE-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics-IE-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics-IE-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-Item'(H, [<<48>>]),
   'enc_CriticalityDiagnostics-IE-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CriticalityDiagnostics-IE-List'(Tlv) ->
   'dec_CriticalityDiagnostics-IE-List'(Tlv, [16]).

'dec_CriticalityDiagnostics-IE-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics-IE-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CriticalityDiagnostics
%%================================
'enc_CriticalityDiagnostics'(Val) ->
    'enc_CriticalityDiagnostics'(Val, [<<48>>]).

'enc_CriticalityDiagnostics'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute triggeringMessage(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
'initiating-message' -> encode_tags([<<129>>], [0], 1);
'successful-outcome' -> encode_tags([<<129>>], [1], 1);
'unsuccessfull-outcome' -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute procedureCriticality(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
reject -> encode_tags([<<130>>], [0], 1);
ignore -> encode_tags([<<130>>], [1], 1);
notify -> encode_tags([<<130>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute iEsCriticalityDiagnostics(4)   External S1AP:CriticalityDiagnostics-IE-List OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics-IE-List'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CriticalityDiagnostics_iE-Extensions
%%================================
'enc_CriticalityDiagnostics_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CriticalityDiagnostics_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CriticalityDiagnostics_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_46'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_46'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CriticalityDiagnostics_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CriticalityDiagnostics'(Tlv) ->
   'dec_CriticalityDiagnostics'(Tlv, [16]).

'dec_CriticalityDiagnostics'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute triggeringMessage(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessfull-outcome';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute procedureCriticality(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iEsCriticalityDiagnostics(4)   External S1AP:CriticalityDiagnostics-IE-List OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_CriticalityDiagnostics-IE-List'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CriticalityDiagnostics_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CriticalityDiagnostics', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  COUNTvalue
%%================================
'enc_COUNTvalue'(Val) ->
    'enc_COUNTvalue'(Val, [<<48>>]).

'enc_COUNTvalue'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pDCP-SN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute hFN(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_COUNTvalue_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  COUNTvalue_iE-Extensions
%%================================
'enc_COUNTvalue_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_COUNTvalue_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_COUNTvalue_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_COUNTvalue_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_COUNTvalue_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  COUNTvalue_iE-Extensions_ProtocolExtensionField
%%================================
'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_47'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_47'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_COUNTvalue_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_COUNTvalue'(Tlv) ->
   'dec_COUNTvalue'(Tlv, [16]).

'dec_COUNTvalue'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pDCP-SN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute hFN(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 1048575 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_COUNTvalue_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'COUNTvalue', Term1, Term2, Term3}.



%%================================
%%  CSG-IdList-Item
%%================================
'enc_CSG-IdList-Item'(Val) ->
    'enc_CSG-IdList-Item'(Val, [<<48>>]).

'enc_CSG-IdList-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cSG-Id(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(27, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSG-IdList-Item_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSG-IdList-Item_iE-Extensions
%%================================
'enc_CSG-IdList-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CSG-IdList-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CSG-IdList-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CSG-IdList-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CSG-IdList-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CSG-IdList-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_48'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_48'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CSG-IdList-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CSG-IdList-Item'(Tlv) ->
   'dec_CSG-IdList-Item'(Tlv, [16]).

'dec_CSG-IdList-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cSG-Id(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CSG-IdList-Item_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CSG-IdList-Item', Term1, Term2}.



%%================================
%%  CSG-IdList
%%================================
'enc_CSG-IdList'(Val) ->
    'enc_CSG-IdList'(Val, [<<48>>]).

'enc_CSG-IdList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CSG-IdList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CSG-IdList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CSG-IdList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CSG-IdList-Item'(H, [<<48>>]),
   'enc_CSG-IdList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CSG-IdList'(Tlv) ->
   'dec_CSG-IdList'(Tlv, [16]).

'dec_CSG-IdList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CSG-IdList-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CSG-Id
%%================================
'enc_CSG-Id'(Val) ->
    'enc_CSG-Id'(Val, [<<3>>]).

'enc_CSG-Id'(Val, TagIn) ->
encode_unnamed_bit_string(27, Val, TagIn).


'dec_CSG-Id'(Tlv) ->
   'dec_CSG-Id'(Tlv, [3]).

'dec_CSG-Id'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 27 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CSFallbackIndicator
%%================================
'enc_CSFallbackIndicator'(Val) ->
    'enc_CSFallbackIndicator'(Val, [<<10>>]).

'enc_CSFallbackIndicator'(Val, TagIn) ->
case Val of
'cs-fallback-required' -> encode_tags(TagIn, [0], 1);
'cs-fallback-high-priority' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CSFallbackIndicator'(Tlv) ->
   'dec_CSFallbackIndicator'(Tlv, [10]).

'dec_CSFallbackIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'cs-fallback-required';
1 -> 'cs-fallback-high-priority';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CNDomain
%%================================
'enc_CNDomain'(Val) ->
    'enc_CNDomain'(Val, [<<10>>]).

'enc_CNDomain'(Val, TagIn) ->
case Val of
ps -> encode_tags(TagIn, [0], 1);
cs -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CNDomain'(Tlv) ->
   'dec_CNDomain'(Tlv, [10]).

'dec_CNDomain'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ps;
1 -> cs;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  CI
%%================================
'enc_CI'(Val) ->
    'enc_CI'(Val, [<<4>>]).

'enc_CI'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_CI'(Tlv) ->
   'dec_CI'(Tlv, [4]).

'dec_CI'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CGI
%%================================
'enc_CGI'(Val) ->
    'enc_CGI'(Val, [<<48>>]).

'enc_CGI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute lAC(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cI(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute rAC(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CGI_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CGI_iE-Extensions
%%================================
'enc_CGI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CGI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CGI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CGI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CGI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CGI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CGI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CGI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_17'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CGI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_17'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CGI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CGI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CGI'(Tlv) ->
   'dec_CGI'(Tlv, [16]).

'dec_CGI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMNidentity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute lAC(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cI(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C3 = byte_size(Val3),
if C3 =:= 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute rAC(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C4 = byte_size(Val4),
if C4 =:= 1 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CGI_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CGI', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  CellType
%%================================
'enc_CellType'(Val) ->
    'enc_CellType'(Val, [<<48>>]).

'enc_CellType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cell-Size(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
verysmall -> encode_tags([<<128>>], [0], 1);
small -> encode_tags([<<128>>], [1], 1);
medium -> encode_tags([<<128>>], [2], 1);
large -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellType_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellType_iE-Extensions
%%================================
'enc_CellType_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellType_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellType_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellType_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellType_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellType_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellType_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellType_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_6'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellType_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_6'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellType_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellType_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellType'(Tlv) ->
   'dec_CellType'(Tlv, [16]).

'dec_CellType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cell-Size(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellType_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellType', Term1, Term2}.



%%================================
%%  Cell-Size
%%================================
'enc_Cell-Size'(Val) ->
    'enc_Cell-Size'(Val, [<<10>>]).

'enc_Cell-Size'(Val, TagIn) ->
case Val of
verysmall -> encode_tags(TagIn, [0], 1);
small -> encode_tags(TagIn, [1], 1);
medium -> encode_tags(TagIn, [2], 1);
large -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cell-Size'(Tlv) ->
   'dec_Cell-Size'(Tlv, [10]).

'dec_Cell-Size'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cdma2000OneXRAND
%%================================
'enc_Cdma2000OneXRAND'(Val) ->
    'enc_Cdma2000OneXRAND'(Val, [<<4>>]).

'enc_Cdma2000OneXRAND'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000OneXRAND'(Tlv) ->
   'dec_Cdma2000OneXRAND'(Tlv, [4]).

'dec_Cdma2000OneXRAND'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Cdma2000OneXPilot
%%================================
'enc_Cdma2000OneXPilot'(Val) ->
    'enc_Cdma2000OneXPilot'(Val, [<<4>>]).

'enc_Cdma2000OneXPilot'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000OneXPilot'(Tlv) ->
   'dec_Cdma2000OneXPilot'(Tlv, [4]).

'dec_Cdma2000OneXPilot'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Cdma2000OneXMSI
%%================================
'enc_Cdma2000OneXMSI'(Val) ->
    'enc_Cdma2000OneXMSI'(Val, [<<4>>]).

'enc_Cdma2000OneXMSI'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000OneXMSI'(Tlv) ->
   'dec_Cdma2000OneXMSI'(Tlv, [4]).

'dec_Cdma2000OneXMSI'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Cdma2000OneXMEID
%%================================
'enc_Cdma2000OneXMEID'(Val) ->
    'enc_Cdma2000OneXMEID'(Val, [<<4>>]).

'enc_Cdma2000OneXMEID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000OneXMEID'(Tlv) ->
   'dec_Cdma2000OneXMEID'(Tlv, [4]).

'dec_Cdma2000OneXMEID'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Cdma2000OneXSRVCCInfo
%%================================
'enc_Cdma2000OneXSRVCCInfo'(Val) ->
    'enc_Cdma2000OneXSRVCCInfo'(Val, [<<48>>]).

'enc_Cdma2000OneXSRVCCInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute cdma2000OneXMEID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cdma2000OneXMSI(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cdma2000OneXPilot(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Cdma2000OneXSRVCCInfo_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Cdma2000OneXSRVCCInfo_iE-Extensions
%%================================
'enc_Cdma2000OneXSRVCCInfo_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField
%%================================
'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_49'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_49'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_Cdma2000OneXSRVCCInfo_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_Cdma2000OneXSRVCCInfo'(Tlv) ->
   'dec_Cdma2000OneXSRVCCInfo'(Tlv, [16]).

'dec_Cdma2000OneXSRVCCInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cdma2000OneXMEID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_octet_string(V1, [131072]),

%%-------------------------------------------------
%% attribute cdma2000OneXMSI(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

%%-------------------------------------------------
%% attribute cdma2000OneXPilot(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Cdma2000OneXSRVCCInfo_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Cdma2000OneXSRVCCInfo', Term1, Term2, Term3, Term4}.



%%================================
%%  Cdma2000HORequiredIndication
%%================================
'enc_Cdma2000HORequiredIndication'(Val) ->
    'enc_Cdma2000HORequiredIndication'(Val, [<<10>>]).

'enc_Cdma2000HORequiredIndication'(Val, TagIn) ->
case Val of
true -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cdma2000HORequiredIndication'(Tlv) ->
   'dec_Cdma2000HORequiredIndication'(Tlv, [10]).

'dec_Cdma2000HORequiredIndication'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> true;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cdma2000HOStatus
%%================================
'enc_Cdma2000HOStatus'(Val) ->
    'enc_Cdma2000HOStatus'(Val, [<<10>>]).

'enc_Cdma2000HOStatus'(Val, TagIn) ->
case Val of
hOSuccess -> encode_tags(TagIn, [0], 1);
hOFailure -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cdma2000HOStatus'(Tlv) ->
   'dec_Cdma2000HOStatus'(Tlv, [10]).

'dec_Cdma2000HOStatus'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> hOSuccess;
1 -> hOFailure;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cdma2000SectorID
%%================================
'enc_Cdma2000SectorID'(Val) ->
    'enc_Cdma2000SectorID'(Val, [<<4>>]).

'enc_Cdma2000SectorID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000SectorID'(Tlv) ->
   'dec_Cdma2000SectorID'(Tlv, [4]).

'dec_Cdma2000SectorID'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  Cdma2000RATType
%%================================
'enc_Cdma2000RATType'(Val) ->
    'enc_Cdma2000RATType'(Val, [<<10>>]).

'enc_Cdma2000RATType'(Val, TagIn) ->
case Val of
hRPD -> encode_tags(TagIn, [0], 1);
onexRTT -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cdma2000RATType'(Tlv) ->
   'dec_Cdma2000RATType'(Tlv, [10]).

'dec_Cdma2000RATType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> hRPD;
1 -> onexRTT;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cdma2000PDU
%%================================
'enc_Cdma2000PDU'(Val) ->
    'enc_Cdma2000PDU'(Val, [<<4>>]).

'enc_Cdma2000PDU'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_Cdma2000PDU'(Tlv) ->
   'dec_Cdma2000PDU'(Tlv, [4]).

'dec_Cdma2000PDU'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  CellID-Broadcast-Item
%%================================
'enc_CellID-Broadcast-Item'(Val) ->
    'enc_CellID-Broadcast-Item'(Val, [<<48>>]).

'enc_CellID-Broadcast-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_EUTRAN-CGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellID-Broadcast-Item_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellID-Broadcast-Item_iE-Extensions
%%================================
'enc_CellID-Broadcast-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellID-Broadcast-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellID-Broadcast-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellID-Broadcast-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellID-Broadcast-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_50'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_50'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellID-Broadcast-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellID-Broadcast-Item'(Tlv) ->
   'dec_CellID-Broadcast-Item'(Tlv, [16]).

'dec_CellID-Broadcast-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eCGI(1)   External S1AP:EUTRAN-CGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_EUTRAN-CGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellID-Broadcast-Item_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellID-Broadcast-Item', Term1, Term2}.



%%================================
%%  CellID-Broadcast
%%================================
'enc_CellID-Broadcast'(Val) ->
    'enc_CellID-Broadcast'(Val, [<<48>>]).

'enc_CellID-Broadcast'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellID-Broadcast_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellID-Broadcast_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellID-Broadcast_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellID-Broadcast-Item'(H, [<<48>>]),
   'enc_CellID-Broadcast_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellID-Broadcast'(Tlv) ->
   'dec_CellID-Broadcast'(Tlv, [16]).

'dec_CellID-Broadcast'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellID-Broadcast-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CellIdentity
%%================================
'enc_CellIdentity'(Val) ->
    'enc_CellIdentity'(Val, [<<3>>]).

'enc_CellIdentity'(Val, TagIn) ->
encode_unnamed_bit_string(28, Val, TagIn).


'dec_CellIdentity'(Tlv) ->
   'dec_CellIdentity'(Tlv, [3]).

'dec_CellIdentity'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 28 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CauseNas
%%================================
'enc_CauseNas'(Val) ->
    'enc_CauseNas'(Val, [<<10>>]).

'enc_CauseNas'(Val, TagIn) ->
case Val of
'normal-release' -> encode_tags(TagIn, [0], 1);
'authentication-failure' -> encode_tags(TagIn, [1], 1);
detach -> encode_tags(TagIn, [2], 1);
unspecified -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseNas'(Tlv) ->
   'dec_CauseNas'(Tlv, [10]).

'dec_CauseNas'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'normal-release';
1 -> 'authentication-failure';
2 -> detach;
3 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseTransport
%%================================
'enc_CauseTransport'(Val) ->
    'enc_CauseTransport'(Val, [<<10>>]).

'enc_CauseTransport'(Val, TagIn) ->
case Val of
'transport-resource-unavailable' -> encode_tags(TagIn, [0], 1);
unspecified -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseTransport'(Tlv) ->
   'dec_CauseTransport'(Tlv, [10]).

'dec_CauseTransport'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'transport-resource-unavailable';
1 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseRadioNetwork
%%================================
'enc_CauseRadioNetwork'(Val) ->
    'enc_CauseRadioNetwork'(Val, [<<10>>]).

'enc_CauseRadioNetwork'(Val, TagIn) ->
case Val of
unspecified -> encode_tags(TagIn, [0], 1);
'tx2relocoverall-expiry' -> encode_tags(TagIn, [1], 1);
'successful-handover' -> encode_tags(TagIn, [2], 1);
'release-due-to-eutran-generated-reason' -> encode_tags(TagIn, [3], 1);
'handover-cancelled' -> encode_tags(TagIn, [4], 1);
'partial-handover' -> encode_tags(TagIn, [5], 1);
'ho-failure-in-target-EPC-eNB-or-target-system' -> encode_tags(TagIn, [6], 1);
'ho-target-not-allowed' -> encode_tags(TagIn, [7], 1);
'tS1relocoverall-expiry' -> encode_tags(TagIn, [8], 1);
'tS1relocprep-expiry' -> encode_tags(TagIn, [9], 1);
'cell-not-available' -> encode_tags(TagIn, [10], 1);
'unknown-targetID' -> encode_tags(TagIn, [11], 1);
'no-radio-resources-available-in-target-cell' -> encode_tags(TagIn, [12], 1);
'unknown-mme-ue-s1ap-id' -> encode_tags(TagIn, [13], 1);
'unknown-enb-ue-s1ap-id' -> encode_tags(TagIn, [14], 1);
'unknown-pair-ue-s1ap-id' -> encode_tags(TagIn, [15], 1);
'handover-desirable-for-radio-reason' -> encode_tags(TagIn, [16], 1);
'time-critical-handover' -> encode_tags(TagIn, [17], 1);
'resource-optimisation-handover' -> encode_tags(TagIn, [18], 1);
'reduce-load-in-serving-cell' -> encode_tags(TagIn, [19], 1);
'user-inactivity' -> encode_tags(TagIn, [20], 1);
'radio-connection-with-ue-lost' -> encode_tags(TagIn, [21], 1);
'load-balancing-tau-required' -> encode_tags(TagIn, [22], 1);
'cs-fallback-triggered' -> encode_tags(TagIn, [23], 1);
'ue-not-available-for-ps-service' -> encode_tags(TagIn, [24], 1);
'radio-resources-not-available' -> encode_tags(TagIn, [25], 1);
'failure-in-radio-interface-procedure' -> encode_tags(TagIn, [26], 1);
'invalid-qos-combination' -> encode_tags(TagIn, [27], 1);
'interrat-redirection' -> encode_tags(TagIn, [28], 1);
'interaction-with-other-procedure' -> encode_tags(TagIn, [29], 1);
'unknown-E-RAB-ID' -> encode_tags(TagIn, [30], 1);
'multiple-E-RAB-ID-instances' -> encode_tags(TagIn, [31], 1);
'encryption-and-or-integrity-protection-algorithms-not-supported' -> encode_tags(TagIn, [32], 1);
's1-intra-system-handover-triggered' -> encode_tags(TagIn, [33], 1);
's1-inter-system-handover-triggered' -> encode_tags(TagIn, [34], 1);
'x2-handover-triggered' -> encode_tags(TagIn, [35], 1);
'redirection-towards-1xRTT' -> encode_tags(TagIn, [36], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseRadioNetwork'(Tlv) ->
   'dec_CauseRadioNetwork'(Tlv, [10]).

'dec_CauseRadioNetwork'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> unspecified;
1 -> 'tx2relocoverall-expiry';
2 -> 'successful-handover';
3 -> 'release-due-to-eutran-generated-reason';
4 -> 'handover-cancelled';
5 -> 'partial-handover';
6 -> 'ho-failure-in-target-EPC-eNB-or-target-system';
7 -> 'ho-target-not-allowed';
8 -> 'tS1relocoverall-expiry';
9 -> 'tS1relocprep-expiry';
10 -> 'cell-not-available';
11 -> 'unknown-targetID';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'unknown-mme-ue-s1ap-id';
14 -> 'unknown-enb-ue-s1ap-id';
15 -> 'unknown-pair-ue-s1ap-id';
16 -> 'handover-desirable-for-radio-reason';
17 -> 'time-critical-handover';
18 -> 'resource-optimisation-handover';
19 -> 'reduce-load-in-serving-cell';
20 -> 'user-inactivity';
21 -> 'radio-connection-with-ue-lost';
22 -> 'load-balancing-tau-required';
23 -> 'cs-fallback-triggered';
24 -> 'ue-not-available-for-ps-service';
25 -> 'radio-resources-not-available';
26 -> 'failure-in-radio-interface-procedure';
27 -> 'invalid-qos-combination';
28 -> 'interrat-redirection';
29 -> 'interaction-with-other-procedure';
30 -> 'unknown-E-RAB-ID';
31 -> 'multiple-E-RAB-ID-instances';
32 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
33 -> 's1-intra-system-handover-triggered';
34 -> 's1-inter-system-handover-triggered';
35 -> 'x2-handover-triggered';
36 -> 'redirection-towards-1xRTT';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseProtocol
%%================================
'enc_CauseProtocol'(Val) ->
    'enc_CauseProtocol'(Val, [<<10>>]).

'enc_CauseProtocol'(Val, TagIn) ->
case Val of
'transfer-syntax-error' -> encode_tags(TagIn, [0], 1);
'abstract-syntax-error-reject' -> encode_tags(TagIn, [1], 1);
'abstract-syntax-error-ignore-and-notify' -> encode_tags(TagIn, [2], 1);
'message-not-compatible-with-receiver-state' -> encode_tags(TagIn, [3], 1);
'semantic-error' -> encode_tags(TagIn, [4], 1);
'abstract-syntax-error-falsely-constructed-message' -> encode_tags(TagIn, [5], 1);
unspecified -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseProtocol'(Tlv) ->
   'dec_CauseProtocol'(Tlv, [10]).

'dec_CauseProtocol'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> 'abstract-syntax-error-falsely-constructed-message';
6 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseMisc
%%================================
'enc_CauseMisc'(Val) ->
    'enc_CauseMisc'(Val, [<<10>>]).

'enc_CauseMisc'(Val, TagIn) ->
case Val of
'control-processing-overload' -> encode_tags(TagIn, [0], 1);
'not-enough-user-plane-processing-resources' -> encode_tags(TagIn, [1], 1);
'hardware-failure' -> encode_tags(TagIn, [2], 1);
'om-intervention' -> encode_tags(TagIn, [3], 1);
unspecified -> encode_tags(TagIn, [4], 1);
'unknown-PLMN' -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseMisc'(Tlv) ->
   'dec_CauseMisc'(Tlv, [10]).

'dec_CauseMisc'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'control-processing-overload';
1 -> 'not-enough-user-plane-processing-resources';
2 -> 'hardware-failure';
3 -> 'om-intervention';
4 -> unspecified;
5 -> 'unknown-PLMN';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cause
%%================================
'enc_Cause'(Val) ->
    'enc_Cause'(Val, []).

'enc_Cause'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      radioNetwork ->
         case element(2,Val) of
unspecified -> encode_tags([<<128>>], [0], 1);
'tx2relocoverall-expiry' -> encode_tags([<<128>>], [1], 1);
'successful-handover' -> encode_tags([<<128>>], [2], 1);
'release-due-to-eutran-generated-reason' -> encode_tags([<<128>>], [3], 1);
'handover-cancelled' -> encode_tags([<<128>>], [4], 1);
'partial-handover' -> encode_tags([<<128>>], [5], 1);
'ho-failure-in-target-EPC-eNB-or-target-system' -> encode_tags([<<128>>], [6], 1);
'ho-target-not-allowed' -> encode_tags([<<128>>], [7], 1);
'tS1relocoverall-expiry' -> encode_tags([<<128>>], [8], 1);
'tS1relocprep-expiry' -> encode_tags([<<128>>], [9], 1);
'cell-not-available' -> encode_tags([<<128>>], [10], 1);
'unknown-targetID' -> encode_tags([<<128>>], [11], 1);
'no-radio-resources-available-in-target-cell' -> encode_tags([<<128>>], [12], 1);
'unknown-mme-ue-s1ap-id' -> encode_tags([<<128>>], [13], 1);
'unknown-enb-ue-s1ap-id' -> encode_tags([<<128>>], [14], 1);
'unknown-pair-ue-s1ap-id' -> encode_tags([<<128>>], [15], 1);
'handover-desirable-for-radio-reason' -> encode_tags([<<128>>], [16], 1);
'time-critical-handover' -> encode_tags([<<128>>], [17], 1);
'resource-optimisation-handover' -> encode_tags([<<128>>], [18], 1);
'reduce-load-in-serving-cell' -> encode_tags([<<128>>], [19], 1);
'user-inactivity' -> encode_tags([<<128>>], [20], 1);
'radio-connection-with-ue-lost' -> encode_tags([<<128>>], [21], 1);
'load-balancing-tau-required' -> encode_tags([<<128>>], [22], 1);
'cs-fallback-triggered' -> encode_tags([<<128>>], [23], 1);
'ue-not-available-for-ps-service' -> encode_tags([<<128>>], [24], 1);
'radio-resources-not-available' -> encode_tags([<<128>>], [25], 1);
'failure-in-radio-interface-procedure' -> encode_tags([<<128>>], [26], 1);
'invalid-qos-combination' -> encode_tags([<<128>>], [27], 1);
'interrat-redirection' -> encode_tags([<<128>>], [28], 1);
'interaction-with-other-procedure' -> encode_tags([<<128>>], [29], 1);
'unknown-E-RAB-ID' -> encode_tags([<<128>>], [30], 1);
'multiple-E-RAB-ID-instances' -> encode_tags([<<128>>], [31], 1);
'encryption-and-or-integrity-protection-algorithms-not-supported' -> encode_tags([<<128>>], [32], 1);
's1-intra-system-handover-triggered' -> encode_tags([<<128>>], [33], 1);
's1-inter-system-handover-triggered' -> encode_tags([<<128>>], [34], 1);
'x2-handover-triggered' -> encode_tags([<<128>>], [35], 1);
'redirection-towards-1xRTT' -> encode_tags([<<128>>], [36], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      transport ->
         case element(2,Val) of
'transport-resource-unavailable' -> encode_tags([<<129>>], [0], 1);
unspecified -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      nas ->
         case element(2,Val) of
'normal-release' -> encode_tags([<<130>>], [0], 1);
'authentication-failure' -> encode_tags([<<130>>], [1], 1);
detach -> encode_tags([<<130>>], [2], 1);
unspecified -> encode_tags([<<130>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end;
      protocol ->
         case element(2,Val) of
'transfer-syntax-error' -> encode_tags([<<131>>], [0], 1);
'abstract-syntax-error-reject' -> encode_tags([<<131>>], [1], 1);
'abstract-syntax-error-ignore-and-notify' -> encode_tags([<<131>>], [2], 1);
'message-not-compatible-with-receiver-state' -> encode_tags([<<131>>], [3], 1);
'semantic-error' -> encode_tags([<<131>>], [4], 1);
'abstract-syntax-error-falsely-constructed-message' -> encode_tags([<<131>>], [5], 1);
unspecified -> encode_tags([<<131>>], [6], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end;
      misc ->
         case element(2,Val) of
'control-processing-overload' -> encode_tags([<<132>>], [0], 1);
'not-enough-user-plane-processing-resources' -> encode_tags([<<132>>], [1], 1);
'hardware-failure' -> encode_tags([<<132>>], [2], 1);
'om-intervention' -> encode_tags([<<132>>], [3], 1);
unspecified -> encode_tags([<<132>>], [4], 1);
'unknown-PLMN' -> encode_tags([<<132>>], [5], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Cause'(Tlv) ->
   'dec_Cause'(Tlv, []).

'dec_Cause'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'radioNetwork'
    {131072, V1} -> 
        {radioNetwork, case decode_integer(V1, []) of
0 -> unspecified;
1 -> 'tx2relocoverall-expiry';
2 -> 'successful-handover';
3 -> 'release-due-to-eutran-generated-reason';
4 -> 'handover-cancelled';
5 -> 'partial-handover';
6 -> 'ho-failure-in-target-EPC-eNB-or-target-system';
7 -> 'ho-target-not-allowed';
8 -> 'tS1relocoverall-expiry';
9 -> 'tS1relocprep-expiry';
10 -> 'cell-not-available';
11 -> 'unknown-targetID';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'unknown-mme-ue-s1ap-id';
14 -> 'unknown-enb-ue-s1ap-id';
15 -> 'unknown-pair-ue-s1ap-id';
16 -> 'handover-desirable-for-radio-reason';
17 -> 'time-critical-handover';
18 -> 'resource-optimisation-handover';
19 -> 'reduce-load-in-serving-cell';
20 -> 'user-inactivity';
21 -> 'radio-connection-with-ue-lost';
22 -> 'load-balancing-tau-required';
23 -> 'cs-fallback-triggered';
24 -> 'ue-not-available-for-ps-service';
25 -> 'radio-resources-not-available';
26 -> 'failure-in-radio-interface-procedure';
27 -> 'invalid-qos-combination';
28 -> 'interrat-redirection';
29 -> 'interaction-with-other-procedure';
30 -> 'unknown-E-RAB-ID';
31 -> 'multiple-E-RAB-ID-instances';
32 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
33 -> 's1-intra-system-handover-triggered';
34 -> 's1-inter-system-handover-triggered';
35 -> 'x2-handover-triggered';
36 -> 'redirection-towards-1xRTT';
Default1 -> {asn1_enum,Default1}
end};


%% 'transport'
    {131073, V1} -> 
        {transport, case decode_integer(V1, []) of
0 -> 'transport-resource-unavailable';
1 -> unspecified;
Default2 -> {asn1_enum,Default2}
end};


%% 'nas'
    {131074, V1} -> 
        {nas, case decode_integer(V1, []) of
0 -> 'normal-release';
1 -> 'authentication-failure';
2 -> detach;
3 -> unspecified;
Default3 -> {asn1_enum,Default3}
end};


%% 'protocol'
    {131075, V1} -> 
        {protocol, case decode_integer(V1, []) of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> 'abstract-syntax-error-falsely-constructed-message';
6 -> unspecified;
Default4 -> {asn1_enum,Default4}
end};


%% 'misc'
    {131076, V1} -> 
        {misc, case decode_integer(V1, []) of
0 -> 'control-processing-overload';
1 -> 'not-enough-user-plane-processing-resources';
2 -> 'hardware-failure';
3 -> 'om-intervention';
4 -> unspecified;
5 -> 'unknown-PLMN';
Default5 -> {asn1_enum,Default5}
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  BroadcastCompletedAreaList
%%================================
'enc_BroadcastCompletedAreaList'(Val) ->
    'enc_BroadcastCompletedAreaList'(Val, []).

'enc_BroadcastCompletedAreaList'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'cellID-Broadcast' ->
         'enc_CellID-Broadcast'(element(2,Val), [<<160>>]);
      'tAI-Broadcast' ->
         'enc_TAI-Broadcast'(element(2,Val), [<<161>>]);
      'emergencyAreaID-Broadcast' ->
         'enc_EmergencyAreaID-Broadcast'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_BroadcastCompletedAreaList'(Tlv) ->
   'dec_BroadcastCompletedAreaList'(Tlv, []).

'dec_BroadcastCompletedAreaList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cellID-Broadcast'
    {131072, V1} -> 
        {'cellID-Broadcast', 'dec_CellID-Broadcast'(V1, [])};


%% 'tAI-Broadcast'
    {131073, V1} -> 
        {'tAI-Broadcast', 'dec_TAI-Broadcast'(V1, [])};


%% 'emergencyAreaID-Broadcast'
    {131074, V1} -> 
        {'emergencyAreaID-Broadcast', 'dec_EmergencyAreaID-Broadcast'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  BPLMNs
%%================================
'enc_BPLMNs'(Val) ->
    'enc_BPLMNs'(Val, [<<48>>]).

'enc_BPLMNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BPLMNs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BPLMNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BPLMNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_BPLMNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BPLMNs'(Tlv) ->
   'dec_BPLMNs'(Tlv, [16]).

'dec_BPLMNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  BitRate
%%================================
'enc_BitRate'(Val) ->
    'enc_BitRate'(Val, [<<2>>]).

'enc_BitRate'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_BitRate'(Tlv) ->
   'dec_BitRate'(Tlv, [2]).

'dec_BitRate'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Bearers-SubjectToStatusTransfer-Item
%%================================
'enc_Bearers-SubjectToStatusTransfer-Item'(Val) ->
    'enc_Bearers-SubjectToStatusTransfer-Item'(Val, [<<48>>]).

'enc_Bearers-SubjectToStatusTransfer-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uL-COUNTvalue(2)   External S1AP:COUNTvalue
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_COUNTvalue'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute dL-COUNTvalue(3)   External S1AP:COUNTvalue
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_COUNTvalue'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute receiveStatusofULPDCPSDUs(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(4096, Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Bearers-SubjectToStatusTransfer-Item_iE-Extensions
%%================================
'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_51'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_51'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_Bearers-SubjectToStatusTransfer-Item'(Tlv) ->
   'dec_Bearers-SubjectToStatusTransfer-Item'(Tlv, [16]).

'dec_Bearers-SubjectToStatusTransfer-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute uL-COUNTvalue(2)   External S1AP:COUNTvalue
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_COUNTvalue'(V2, [131073]),

%%-------------------------------------------------
%% attribute dL-COUNTvalue(3)   External S1AP:COUNTvalue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_COUNTvalue'(V3, [131074]),

%%-------------------------------------------------
%% attribute receiveStatusofULPDCPSDUs(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val1 = decode_native_bit_string(V4, []),
C1 = bit_size(Val1),
if C1 =:= 4096 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Bearers-SubjectToStatusTransfer-Item', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  Bearers-SubjectToStatusTransferList
%%================================
'enc_Bearers-SubjectToStatusTransferList'(Val) ->
    'enc_Bearers-SubjectToStatusTransferList'(Val, [<<48>>]).

'enc_Bearers-SubjectToStatusTransferList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Bearers-SubjectToStatusTransferList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Bearers-SubjectToStatusTransferList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Bearers-SubjectToStatusTransferList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_Bearers-SubjectToStatusTransferList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Bearers-SubjectToStatusTransferList_ProtocolIE-Field
%%================================
'enc_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_41'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_41'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_Bearers-SubjectToStatusTransferList'(Tlv) ->
   'dec_Bearers-SubjectToStatusTransferList'(Tlv, [16]).

'dec_Bearers-SubjectToStatusTransferList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  AllocationAndRetentionPriority
%%================================
'enc_AllocationAndRetentionPriority'(Val) ->
    'enc_AllocationAndRetentionPriority'(Val, [<<48>>]).

'enc_AllocationAndRetentionPriority'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute priorityLevel(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}], [<<128>>]),

%%-------------------------------------------------
%% attribute pre-emptionCapability(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'shall-not-trigger-pre-emption' -> encode_tags([<<129>>], [0], 1);
'may-trigger-pre-emption' -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute pre-emptionVulnerability(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'not-pre-emptable' -> encode_tags([<<130>>], [0], 1);
'pre-emptable' -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AllocationAndRetentionPriority_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AllocationAndRetentionPriority_iE-Extensions
%%================================
'enc_AllocationAndRetentionPriority_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AllocationAndRetentionPriority_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AllocationAndRetentionPriority_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AllocationAndRetentionPriority_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_AllocationAndRetentionPriority_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField
%%================================
'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_36'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_36'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_AllocationAndRetentionPriority_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_AllocationAndRetentionPriority'(Tlv) ->
   'dec_AllocationAndRetentionPriority'(Tlv, [16]).

'dec_AllocationAndRetentionPriority'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute priorityLevel(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 15 ->
Val2 = Val1,
number2name(Val2, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}]);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pre-emptionCapability(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute pre-emptionVulnerability(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable';
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_AllocationAndRetentionPriority_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'AllocationAndRetentionPriority', Term1, Term2, Term3, Term4}.



%%================================
%%  TriggeringMessage
%%================================
'enc_TriggeringMessage'(Val) ->
    'enc_TriggeringMessage'(Val, [<<10>>]).

'enc_TriggeringMessage'(Val, TagIn) ->
case Val of
'initiating-message' -> encode_tags(TagIn, [0], 1);
'successful-outcome' -> encode_tags(TagIn, [1], 1);
'unsuccessfull-outcome' -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TriggeringMessage'(Tlv) ->
   'dec_TriggeringMessage'(Tlv, [10]).

'dec_TriggeringMessage'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessfull-outcome';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ProtocolIE-ID
%%================================
'enc_ProtocolIE-ID'(Val) ->
    'enc_ProtocolIE-ID'(Val, [<<2>>]).

'enc_ProtocolIE-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ProtocolIE-ID'(Tlv) ->
   'dec_ProtocolIE-ID'(Tlv, [2]).

'dec_ProtocolIE-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ProtocolExtensionID
%%================================
'enc_ProtocolExtensionID'(Val) ->
    'enc_ProtocolExtensionID'(Val, [<<2>>]).

'enc_ProtocolExtensionID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ProtocolExtensionID'(Tlv) ->
   'dec_ProtocolExtensionID'(Tlv, [2]).

'dec_ProtocolExtensionID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ProcedureCode
%%================================
'enc_ProcedureCode'(Val) ->
    'enc_ProcedureCode'(Val, [<<2>>]).

'enc_ProcedureCode'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ProcedureCode'(Tlv) ->
   'dec_ProcedureCode'(Tlv, [2]).

'dec_ProcedureCode'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PrivateIE-ID
%%================================
'enc_PrivateIE-ID'(Val) ->
    'enc_PrivateIE-ID'(Val, []).

'enc_PrivateIE-ID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      local ->
         encode_integer(element(2,Val), [<<128>>]);
      global ->
         encode_object_identifier(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_PrivateIE-ID'(Tlv) ->
   'dec_PrivateIE-ID'(Tlv, []).

'dec_PrivateIE-ID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'local'
    {131072, V1} -> 
        {local, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'global'
    {131073, V1} -> 
        {global, decode_object_identifier(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Presence
%%================================
'enc_Presence'(Val) ->
    'enc_Presence'(Val, [<<10>>]).

'enc_Presence'(Val, TagIn) ->
case Val of
optional -> encode_tags(TagIn, [0], 1);
conditional -> encode_tags(TagIn, [1], 1);
mandatory -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Presence'(Tlv) ->
   'dec_Presence'(Tlv, [10]).

'dec_Presence'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> optional;
1 -> conditional;
2 -> mandatory;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Criticality
%%================================
'enc_Criticality'(Val) ->
    'enc_Criticality'(Val, [<<10>>]).

'enc_Criticality'(Val, TagIn) ->
case Val of
reject -> encode_tags(TagIn, [0], 1);
ignore -> encode_tags(TagIn, [1], 1);
notify -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Criticality'(Tlv) ->
   'dec_Criticality'(Tlv, [10]).

'dec_Criticality'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PrivateMessage
%%================================
'enc_PrivateMessage'(Val) ->
    'enc_PrivateMessage'(Val, [<<48>>]).

'enc_PrivateMessage'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute privateIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PrivateMessage_privateIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PrivateMessage_privateIEs
%%================================
'enc_PrivateMessage_privateIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PrivateMessage_privateIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PrivateMessage_privateIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PrivateMessage_privateIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PrivateMessage_privateIEs_PrivateIE-Field'(H, [<<48>>]),
   'enc_PrivateMessage_privateIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PrivateMessage_privateIEs_PrivateIE-Field
%%================================
'enc_PrivateMessage_privateIEs_PrivateIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1)   External S1AP:PrivateIE-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PrivateIE-ID'(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_open_type(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1)   External S1AP:PrivateIE-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PrivateIE-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type ASN1_OPEN_TYPE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_open_type_as_binary(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'PrivateIE-Field', Term1, Term2, Term3}.

'dec_PrivateMessage_privateIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PrivateMessage_privateIEs_PrivateIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_PrivateMessage'(Tlv) ->
   'dec_PrivateMessage'(Tlv, [16]).

'dec_PrivateMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute privateIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PrivateMessage_privateIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PrivateMessage', Term1}.



%%================================
%%  MMEConfigurationTransfer
%%================================
'enc_MMEConfigurationTransfer'(Val) ->
    'enc_MMEConfigurationTransfer'(Val, [<<48>>]).

'enc_MMEConfigurationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEConfigurationTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEConfigurationTransfer_protocolIEs
%%================================
'enc_MMEConfigurationTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEConfigurationTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEConfigurationTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEConfigurationTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEConfigurationTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_53'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_53'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEConfigurationTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEConfigurationTransfer'(Tlv) ->
   'dec_MMEConfigurationTransfer'(Tlv, [16]).

'dec_MMEConfigurationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEConfigurationTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEConfigurationTransfer', Term1}.



%%================================
%%  ENBConfigurationTransfer
%%================================
'enc_ENBConfigurationTransfer'(Val) ->
    'enc_ENBConfigurationTransfer'(Val, [<<48>>]).

'enc_ENBConfigurationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationTransfer_protocolIEs
%%================================
'enc_ENBConfigurationTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_54'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_54'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationTransfer'(Tlv) ->
   'dec_ENBConfigurationTransfer'(Tlv, [16]).

'dec_ENBConfigurationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationTransfer', Term1}.



%%================================
%%  MMEDirectInformationTransfer
%%================================
'enc_MMEDirectInformationTransfer'(Val) ->
    'enc_MMEDirectInformationTransfer'(Val, [<<48>>]).

'enc_MMEDirectInformationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEDirectInformationTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEDirectInformationTransfer_protocolIEs
%%================================
'enc_MMEDirectInformationTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEDirectInformationTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEDirectInformationTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEDirectInformationTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEDirectInformationTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_55'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_55'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEDirectInformationTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEDirectInformationTransfer'(Tlv) ->
   'dec_MMEDirectInformationTransfer'(Tlv, [16]).

'dec_MMEDirectInformationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEDirectInformationTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEDirectInformationTransfer', Term1}.



%%================================
%%  Inter-SystemInformationTransferType
%%================================
'enc_Inter-SystemInformationTransferType'(Val) ->
    'enc_Inter-SystemInformationTransferType'(Val, []).

'enc_Inter-SystemInformationTransferType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      rIMTransfer ->
         'enc_RIMTransfer'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Inter-SystemInformationTransferType'(Tlv) ->
   'dec_Inter-SystemInformationTransferType'(Tlv, []).

'dec_Inter-SystemInformationTransferType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rIMTransfer'
    {131072, V1} -> 
        {rIMTransfer, 'dec_RIMTransfer'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ENBDirectInformationTransfer
%%================================
'enc_ENBDirectInformationTransfer'(Val) ->
    'enc_ENBDirectInformationTransfer'(Val, [<<48>>]).

'enc_ENBDirectInformationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBDirectInformationTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBDirectInformationTransfer_protocolIEs
%%================================
'enc_ENBDirectInformationTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBDirectInformationTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBDirectInformationTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBDirectInformationTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBDirectInformationTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_56'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_56'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBDirectInformationTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBDirectInformationTransfer'(Tlv) ->
   'dec_ENBDirectInformationTransfer'(Tlv, [16]).

'dec_ENBDirectInformationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBDirectInformationTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBDirectInformationTransfer', Term1}.



%%================================
%%  WriteReplaceWarningResponse
%%================================
'enc_WriteReplaceWarningResponse'(Val) ->
    'enc_WriteReplaceWarningResponse'(Val, [<<48>>]).

'enc_WriteReplaceWarningResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_WriteReplaceWarningResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  WriteReplaceWarningResponse_protocolIEs
%%================================
'enc_WriteReplaceWarningResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_WriteReplaceWarningResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_WriteReplaceWarningResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_WriteReplaceWarningResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_WriteReplaceWarningResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_57'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_57'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_WriteReplaceWarningResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_WriteReplaceWarningResponse'(Tlv) ->
   'dec_WriteReplaceWarningResponse'(Tlv, [16]).

'dec_WriteReplaceWarningResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_WriteReplaceWarningResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'WriteReplaceWarningResponse', Term1}.



%%================================
%%  WriteReplaceWarningRequest
%%================================
'enc_WriteReplaceWarningRequest'(Val) ->
    'enc_WriteReplaceWarningRequest'(Val, [<<48>>]).

'enc_WriteReplaceWarningRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_WriteReplaceWarningRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  WriteReplaceWarningRequest_protocolIEs
%%================================
'enc_WriteReplaceWarningRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_WriteReplaceWarningRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_WriteReplaceWarningRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_WriteReplaceWarningRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_WriteReplaceWarningRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_58'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_58'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_WriteReplaceWarningRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_WriteReplaceWarningRequest'(Tlv) ->
   'dec_WriteReplaceWarningRequest'(Tlv, [16]).

'dec_WriteReplaceWarningRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_WriteReplaceWarningRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'WriteReplaceWarningRequest', Term1}.



%%================================
%%  OverloadStop
%%================================
'enc_OverloadStop'(Val) ->
    'enc_OverloadStop'(Val, [<<48>>]).

'enc_OverloadStop'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_OverloadStop_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  OverloadStop_protocolIEs
%%================================
'enc_OverloadStop_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_OverloadStop_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_OverloadStop_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_OverloadStop_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_OverloadStop_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_OverloadStop_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  OverloadStop_protocolIEs_ProtocolIE-Field
%%================================
'enc_OverloadStop_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_59'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_OverloadStop_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_59'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_OverloadStop_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_OverloadStop_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_OverloadStop'(Tlv) ->
   'dec_OverloadStop'(Tlv, [16]).

'dec_OverloadStop'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_OverloadStop_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'OverloadStop', Term1}.



%%================================
%%  OverloadStart
%%================================
'enc_OverloadStart'(Val) ->
    'enc_OverloadStart'(Val, [<<48>>]).

'enc_OverloadStart'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_OverloadStart_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  OverloadStart_protocolIEs
%%================================
'enc_OverloadStart_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_OverloadStart_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_OverloadStart_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_OverloadStart_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_OverloadStart_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_OverloadStart_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  OverloadStart_protocolIEs_ProtocolIE-Field
%%================================
'enc_OverloadStart_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_60'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_OverloadStart_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_60'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_OverloadStart_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_OverloadStart_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_OverloadStart'(Tlv) ->
   'dec_OverloadStart'(Tlv, [16]).

'dec_OverloadStart'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_OverloadStart_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'OverloadStart', Term1}.



%%================================
%%  LocationReport
%%================================
'enc_LocationReport'(Val) ->
    'enc_LocationReport'(Val, [<<48>>]).

'enc_LocationReport'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LocationReport_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LocationReport_protocolIEs
%%================================
'enc_LocationReport_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LocationReport_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LocationReport_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LocationReport_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LocationReport_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_LocationReport_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LocationReport_protocolIEs_ProtocolIE-Field
%%================================
'enc_LocationReport_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_61'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LocationReport_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_61'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_LocationReport_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LocationReport_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_LocationReport'(Tlv) ->
   'dec_LocationReport'(Tlv, [16]).

'dec_LocationReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LocationReport_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LocationReport', Term1}.



%%================================
%%  LocationReportingFailureIndication
%%================================
'enc_LocationReportingFailureIndication'(Val) ->
    'enc_LocationReportingFailureIndication'(Val, [<<48>>]).

'enc_LocationReportingFailureIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LocationReportingFailureIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LocationReportingFailureIndication_protocolIEs
%%================================
'enc_LocationReportingFailureIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LocationReportingFailureIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LocationReportingFailureIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LocationReportingFailureIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_LocationReportingFailureIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_62'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_62'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_LocationReportingFailureIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_LocationReportingFailureIndication'(Tlv) ->
   'dec_LocationReportingFailureIndication'(Tlv, [16]).

'dec_LocationReportingFailureIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LocationReportingFailureIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LocationReportingFailureIndication', Term1}.



%%================================
%%  LocationReportingControl
%%================================
'enc_LocationReportingControl'(Val) ->
    'enc_LocationReportingControl'(Val, [<<48>>]).

'enc_LocationReportingControl'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LocationReportingControl_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LocationReportingControl_protocolIEs
%%================================
'enc_LocationReportingControl_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LocationReportingControl_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LocationReportingControl_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LocationReportingControl_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_LocationReportingControl_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LocationReportingControl_protocolIEs_ProtocolIE-Field
%%================================
'enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_63'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_63'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_LocationReportingControl_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_LocationReportingControl'(Tlv) ->
   'dec_LocationReportingControl'(Tlv, [16]).

'dec_LocationReportingControl'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LocationReportingControl_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LocationReportingControl', Term1}.



%%================================
%%  CellTrafficTrace
%%================================
'enc_CellTrafficTrace'(Val) ->
    'enc_CellTrafficTrace'(Val, [<<48>>]).

'enc_CellTrafficTrace'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellTrafficTrace_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellTrafficTrace_protocolIEs
%%================================
'enc_CellTrafficTrace_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellTrafficTrace_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellTrafficTrace_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellTrafficTrace_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_CellTrafficTrace_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellTrafficTrace_protocolIEs_ProtocolIE-Field
%%================================
'enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_64'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_64'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_CellTrafficTrace_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_CellTrafficTrace'(Tlv) ->
   'dec_CellTrafficTrace'(Tlv, [16]).

'dec_CellTrafficTrace'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CellTrafficTrace_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellTrafficTrace', Term1}.



%%================================
%%  DeactivateTrace
%%================================
'enc_DeactivateTrace'(Val) ->
    'enc_DeactivateTrace'(Val, [<<48>>]).

'enc_DeactivateTrace'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DeactivateTrace_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DeactivateTrace_protocolIEs
%%================================
'enc_DeactivateTrace_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DeactivateTrace_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DeactivateTrace_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DeactivateTrace_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_DeactivateTrace_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  DeactivateTrace_protocolIEs_ProtocolIE-Field
%%================================
'enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_65'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_65'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_DeactivateTrace_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_DeactivateTrace'(Tlv) ->
   'dec_DeactivateTrace'(Tlv, [16]).

'dec_DeactivateTrace'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DeactivateTrace_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'DeactivateTrace', Term1}.



%%================================
%%  TraceFailureIndication
%%================================
'enc_TraceFailureIndication'(Val) ->
    'enc_TraceFailureIndication'(Val, [<<48>>]).

'enc_TraceFailureIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TraceFailureIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TraceFailureIndication_protocolIEs
%%================================
'enc_TraceFailureIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TraceFailureIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TraceFailureIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TraceFailureIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_TraceFailureIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TraceFailureIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_66'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_66'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_TraceFailureIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_TraceFailureIndication'(Tlv) ->
   'dec_TraceFailureIndication'(Tlv, [16]).

'dec_TraceFailureIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TraceFailureIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TraceFailureIndication', Term1}.



%%================================
%%  TraceStart
%%================================
'enc_TraceStart'(Val) ->
    'enc_TraceStart'(Val, [<<48>>]).

'enc_TraceStart'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TraceStart_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TraceStart_protocolIEs
%%================================
'enc_TraceStart_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TraceStart_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TraceStart_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TraceStart_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TraceStart_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_TraceStart_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TraceStart_protocolIEs_ProtocolIE-Field
%%================================
'enc_TraceStart_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_67'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TraceStart_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_67'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_TraceStart_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TraceStart_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_TraceStart'(Tlv) ->
   'dec_TraceStart'(Tlv, [16]).

'dec_TraceStart'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TraceStart_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TraceStart', Term1}.



%%================================
%%  MMEStatusTransfer
%%================================
'enc_MMEStatusTransfer'(Val) ->
    'enc_MMEStatusTransfer'(Val, [<<48>>]).

'enc_MMEStatusTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEStatusTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEStatusTransfer_protocolIEs
%%================================
'enc_MMEStatusTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEStatusTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEStatusTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEStatusTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEStatusTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEStatusTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_68'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_68'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEStatusTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEStatusTransfer'(Tlv) ->
   'dec_MMEStatusTransfer'(Tlv, [16]).

'dec_MMEStatusTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEStatusTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEStatusTransfer', Term1}.



%%================================
%%  ENBStatusTransfer
%%================================
'enc_ENBStatusTransfer'(Val) ->
    'enc_ENBStatusTransfer'(Val, [<<48>>]).

'enc_ENBStatusTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBStatusTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBStatusTransfer_protocolIEs
%%================================
'enc_ENBStatusTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBStatusTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBStatusTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBStatusTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBStatusTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBStatusTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_69'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_69'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBStatusTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBStatusTransfer'(Tlv) ->
   'dec_ENBStatusTransfer'(Tlv, [16]).

'dec_ENBStatusTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBStatusTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBStatusTransfer', Term1}.



%%================================
%%  UECapabilityInfoIndication
%%================================
'enc_UECapabilityInfoIndication'(Val) ->
    'enc_UECapabilityInfoIndication'(Val, [<<48>>]).

'enc_UECapabilityInfoIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UECapabilityInfoIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityInfoIndication_protocolIEs
%%================================
'enc_UECapabilityInfoIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UECapabilityInfoIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UECapabilityInfoIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UECapabilityInfoIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UECapabilityInfoIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_70'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_70'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UECapabilityInfoIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UECapabilityInfoIndication'(Tlv) ->
   'dec_UECapabilityInfoIndication'(Tlv, [16]).

'dec_UECapabilityInfoIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UECapabilityInfoIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UECapabilityInfoIndication', Term1}.



%%================================
%%  UplinkS1cdma2000tunneling
%%================================
'enc_UplinkS1cdma2000tunneling'(Val) ->
    'enc_UplinkS1cdma2000tunneling'(Val, [<<48>>]).

'enc_UplinkS1cdma2000tunneling'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UplinkS1cdma2000tunneling_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UplinkS1cdma2000tunneling_protocolIEs
%%================================
'enc_UplinkS1cdma2000tunneling_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UplinkS1cdma2000tunneling_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UplinkS1cdma2000tunneling_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UplinkS1cdma2000tunneling_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UplinkS1cdma2000tunneling_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field
%%================================
'enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_71'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_71'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UplinkS1cdma2000tunneling_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UplinkS1cdma2000tunneling'(Tlv) ->
   'dec_UplinkS1cdma2000tunneling'(Tlv, [16]).

'dec_UplinkS1cdma2000tunneling'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UplinkS1cdma2000tunneling_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UplinkS1cdma2000tunneling', Term1}.



%%================================
%%  DownlinkS1cdma2000tunneling
%%================================
'enc_DownlinkS1cdma2000tunneling'(Val) ->
    'enc_DownlinkS1cdma2000tunneling'(Val, [<<48>>]).

'enc_DownlinkS1cdma2000tunneling'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DownlinkS1cdma2000tunneling_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DownlinkS1cdma2000tunneling_protocolIEs
%%================================
'enc_DownlinkS1cdma2000tunneling_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DownlinkS1cdma2000tunneling_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DownlinkS1cdma2000tunneling_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DownlinkS1cdma2000tunneling_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_DownlinkS1cdma2000tunneling_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field
%%================================
'enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_72'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_72'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_DownlinkS1cdma2000tunneling_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_DownlinkS1cdma2000tunneling'(Tlv) ->
   'dec_DownlinkS1cdma2000tunneling'(Tlv, [16]).

'dec_DownlinkS1cdma2000tunneling'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DownlinkS1cdma2000tunneling_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'DownlinkS1cdma2000tunneling', Term1}.



%%================================
%%  MMEConfigurationUpdateFailure
%%================================
'enc_MMEConfigurationUpdateFailure'(Val) ->
    'enc_MMEConfigurationUpdateFailure'(Val, [<<48>>]).

'enc_MMEConfigurationUpdateFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEConfigurationUpdateFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEConfigurationUpdateFailure_protocolIEs
%%================================
'enc_MMEConfigurationUpdateFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEConfigurationUpdateFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEConfigurationUpdateFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEConfigurationUpdateFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEConfigurationUpdateFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_73'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_73'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEConfigurationUpdateFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEConfigurationUpdateFailure'(Tlv) ->
   'dec_MMEConfigurationUpdateFailure'(Tlv, [16]).

'dec_MMEConfigurationUpdateFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEConfigurationUpdateFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEConfigurationUpdateFailure', Term1}.



%%================================
%%  MMEConfigurationUpdateAcknowledge
%%================================
'enc_MMEConfigurationUpdateAcknowledge'(Val) ->
    'enc_MMEConfigurationUpdateAcknowledge'(Val, [<<48>>]).

'enc_MMEConfigurationUpdateAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEConfigurationUpdateAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEConfigurationUpdateAcknowledge_protocolIEs
%%================================
'enc_MMEConfigurationUpdateAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_74'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_74'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEConfigurationUpdateAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEConfigurationUpdateAcknowledge'(Tlv) ->
   'dec_MMEConfigurationUpdateAcknowledge'(Tlv, [16]).

'dec_MMEConfigurationUpdateAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEConfigurationUpdateAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEConfigurationUpdateAcknowledge', Term1}.



%%================================
%%  MMEConfigurationUpdate
%%================================
'enc_MMEConfigurationUpdate'(Val) ->
    'enc_MMEConfigurationUpdate'(Val, [<<48>>]).

'enc_MMEConfigurationUpdate'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MMEConfigurationUpdate_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MMEConfigurationUpdate_protocolIEs
%%================================
'enc_MMEConfigurationUpdate_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_MMEConfigurationUpdate_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MMEConfigurationUpdate_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MMEConfigurationUpdate_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_MMEConfigurationUpdate_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field
%%================================
'enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_75'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_75'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_MMEConfigurationUpdate_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_MMEConfigurationUpdate'(Tlv) ->
   'dec_MMEConfigurationUpdate'(Tlv, [16]).

'dec_MMEConfigurationUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MMEConfigurationUpdate_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MMEConfigurationUpdate', Term1}.



%%================================
%%  ENBConfigurationUpdateFailure
%%================================
'enc_ENBConfigurationUpdateFailure'(Val) ->
    'enc_ENBConfigurationUpdateFailure'(Val, [<<48>>]).

'enc_ENBConfigurationUpdateFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdateFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdateFailure_protocolIEs
%%================================
'enc_ENBConfigurationUpdateFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdateFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdateFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdateFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_76'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_76'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdateFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdateFailure'(Tlv) ->
   'dec_ENBConfigurationUpdateFailure'(Tlv, [16]).

'dec_ENBConfigurationUpdateFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdateFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdateFailure', Term1}.



%%================================
%%  ENBConfigurationUpdateAcknowledge
%%================================
'enc_ENBConfigurationUpdateAcknowledge'(Val) ->
    'enc_ENBConfigurationUpdateAcknowledge'(Val, [<<48>>]).

'enc_ENBConfigurationUpdateAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdateAcknowledge_protocolIEs
%%================================
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_77'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_77'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdateAcknowledge'(Tlv) ->
   'dec_ENBConfigurationUpdateAcknowledge'(Tlv, [16]).

'dec_ENBConfigurationUpdateAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdateAcknowledge', Term1}.



%%================================
%%  ENBConfigurationUpdate
%%================================
'enc_ENBConfigurationUpdate'(Val) ->
    'enc_ENBConfigurationUpdate'(Val, [<<48>>]).

'enc_ENBConfigurationUpdate'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdate_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdate_protocolIEs
%%================================
'enc_ENBConfigurationUpdate_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdate_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdate_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdate_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdate_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_78'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_78'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdate_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdate'(Tlv) ->
   'dec_ENBConfigurationUpdate'(Tlv, [16]).

'dec_ENBConfigurationUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdate_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdate', Term1}.



%%================================
%%  S1SetupFailure
%%================================
'enc_S1SetupFailure'(Val) ->
    'enc_S1SetupFailure'(Val, [<<48>>]).

'enc_S1SetupFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_S1SetupFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  S1SetupFailure_protocolIEs
%%================================
'enc_S1SetupFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_S1SetupFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_S1SetupFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_S1SetupFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_S1SetupFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  S1SetupFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_79'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_79'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_S1SetupFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_S1SetupFailure'(Tlv) ->
   'dec_S1SetupFailure'(Tlv, [16]).

'dec_S1SetupFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_S1SetupFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'S1SetupFailure', Term1}.



%%================================
%%  S1SetupResponse
%%================================
'enc_S1SetupResponse'(Val) ->
    'enc_S1SetupResponse'(Val, [<<48>>]).

'enc_S1SetupResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_S1SetupResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  S1SetupResponse_protocolIEs
%%================================
'enc_S1SetupResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_S1SetupResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_S1SetupResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_S1SetupResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_S1SetupResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  S1SetupResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_80'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_80'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_S1SetupResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_S1SetupResponse'(Tlv) ->
   'dec_S1SetupResponse'(Tlv, [16]).

'dec_S1SetupResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_S1SetupResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'S1SetupResponse', Term1}.



%%================================
%%  S1SetupRequest
%%================================
'enc_S1SetupRequest'(Val) ->
    'enc_S1SetupRequest'(Val, [<<48>>]).

'enc_S1SetupRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_S1SetupRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  S1SetupRequest_protocolIEs
%%================================
'enc_S1SetupRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_S1SetupRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_S1SetupRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_S1SetupRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_S1SetupRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  S1SetupRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_81'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_81'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_S1SetupRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_S1SetupRequest'(Tlv) ->
   'dec_S1SetupRequest'(Tlv, [16]).

'dec_S1SetupRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_S1SetupRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'S1SetupRequest', Term1}.



%%================================
%%  ErrorIndication
%%================================
'enc_ErrorIndication'(Val) ->
    'enc_ErrorIndication'(Val, [<<48>>]).

'enc_ErrorIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ErrorIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ErrorIndication_protocolIEs
%%================================
'enc_ErrorIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ErrorIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ErrorIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ErrorIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ErrorIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ErrorIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_82'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_82'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ErrorIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ErrorIndication'(Tlv) ->
   'dec_ErrorIndication'(Tlv, [16]).

'dec_ErrorIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ErrorIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ErrorIndication', Term1}.



%%================================
%%  UE-associatedLogicalS1-ConnectionListResAck
%%================================
'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val) ->
    'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val, [<<48>>]).

'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionListResAck_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-associatedLogicalS1-ConnectionListResAck_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-associatedLogicalS1-ConnectionListResAck_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UE-associatedLogicalS1-ConnectionListResAck_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field
%%================================
'enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_83'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_83'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_UE-associatedLogicalS1-ConnectionListResAck'(Tlv) ->
   'dec_UE-associatedLogicalS1-ConnectionListResAck'(Tlv, [16]).

'dec_UE-associatedLogicalS1-ConnectionListResAck'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ResetAcknowledge
%%================================
'enc_ResetAcknowledge'(Val) ->
    'enc_ResetAcknowledge'(Val, [<<48>>]).

'enc_ResetAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResetAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResetAcknowledge_protocolIEs
%%================================
'enc_ResetAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResetAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResetAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResetAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResetAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResetAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_84'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_84'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResetAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResetAcknowledge'(Tlv) ->
   'dec_ResetAcknowledge'(Tlv, [16]).

'dec_ResetAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResetAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResetAcknowledge', Term1}.



%%================================
%%  UE-associatedLogicalS1-ConnectionListRes
%%================================
'enc_UE-associatedLogicalS1-ConnectionListRes'(Val) ->
    'enc_UE-associatedLogicalS1-ConnectionListRes'(Val, [<<48>>]).

'enc_UE-associatedLogicalS1-ConnectionListRes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionListRes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-associatedLogicalS1-ConnectionListRes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-associatedLogicalS1-ConnectionListRes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UE-associatedLogicalS1-ConnectionListRes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field
%%================================
'enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_85'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_85'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_UE-associatedLogicalS1-ConnectionListRes'(Tlv) ->
   'dec_UE-associatedLogicalS1-ConnectionListRes'(Tlv, [16]).

'dec_UE-associatedLogicalS1-ConnectionListRes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ResetAll
%%================================
'enc_ResetAll'(Val) ->
    'enc_ResetAll'(Val, [<<10>>]).

'enc_ResetAll'(Val, TagIn) ->
case Val of
'reset-all' -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ResetAll'(Tlv) ->
   'dec_ResetAll'(Tlv, [10]).

'dec_ResetAll'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'reset-all';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ResetType
%%================================
'enc_ResetType'(Val) ->
    'enc_ResetType'(Val, []).

'enc_ResetType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's1-Interface' ->
         case element(2,Val) of
'reset-all' -> encode_tags([<<128>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      'partOfS1-Interface' ->
         'enc_UE-associatedLogicalS1-ConnectionListRes'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ResetType'(Tlv) ->
   'dec_ResetType'(Tlv, []).

'dec_ResetType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 's1-Interface'
    {131072, V1} -> 
        {'s1-Interface', case decode_integer(V1, []) of
0 -> 'reset-all';
Default1 -> {asn1_enum,Default1}
end};


%% 'partOfS1-Interface'
    {131073, V1} -> 
        {'partOfS1-Interface', 'dec_UE-associatedLogicalS1-ConnectionListRes'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  Reset
%%================================
'enc_Reset'(Val) ->
    'enc_Reset'(Val, [<<48>>]).

'enc_Reset'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Reset_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Reset_protocolIEs
%%================================
'enc_Reset_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Reset_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Reset_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Reset_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Reset_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_Reset_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Reset_protocolIEs_ProtocolIE-Field
%%================================
'enc_Reset_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_86'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Reset_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_86'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_Reset_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Reset_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_Reset'(Tlv) ->
   'dec_Reset'(Tlv, [16]).

'dec_Reset'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Reset_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Reset', Term1}.



%%================================
%%  NASNonDeliveryIndication
%%================================
'enc_NASNonDeliveryIndication'(Val) ->
    'enc_NASNonDeliveryIndication'(Val, [<<48>>]).

'enc_NASNonDeliveryIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_NASNonDeliveryIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  NASNonDeliveryIndication_protocolIEs
%%================================
'enc_NASNonDeliveryIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_NASNonDeliveryIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NASNonDeliveryIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NASNonDeliveryIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_NASNonDeliveryIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_87'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_87'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_NASNonDeliveryIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_NASNonDeliveryIndication'(Tlv) ->
   'dec_NASNonDeliveryIndication'(Tlv, [16]).

'dec_NASNonDeliveryIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_NASNonDeliveryIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'NASNonDeliveryIndication', Term1}.



%%================================
%%  UplinkNASTransport
%%================================
'enc_UplinkNASTransport'(Val) ->
    'enc_UplinkNASTransport'(Val, [<<48>>]).

'enc_UplinkNASTransport'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UplinkNASTransport_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UplinkNASTransport_protocolIEs
%%================================
'enc_UplinkNASTransport_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UplinkNASTransport_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UplinkNASTransport_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UplinkNASTransport_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UplinkNASTransport_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UplinkNASTransport_protocolIEs_ProtocolIE-Field
%%================================
'enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_88'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_88'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UplinkNASTransport_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UplinkNASTransport'(Tlv) ->
   'dec_UplinkNASTransport'(Tlv, [16]).

'dec_UplinkNASTransport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UplinkNASTransport_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UplinkNASTransport', Term1}.



%%================================
%%  InitialUEMessage
%%================================
'enc_InitialUEMessage'(Val) ->
    'enc_InitialUEMessage'(Val, [<<48>>]).

'enc_InitialUEMessage'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialUEMessage_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InitialUEMessage_protocolIEs
%%================================
'enc_InitialUEMessage_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_InitialUEMessage_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InitialUEMessage_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InitialUEMessage_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_InitialUEMessage_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  InitialUEMessage_protocolIEs_ProtocolIE-Field
%%================================
'enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_89'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_89'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_InitialUEMessage_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_InitialUEMessage'(Tlv) ->
   'dec_InitialUEMessage'(Tlv, [16]).

'dec_InitialUEMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InitialUEMessage_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'InitialUEMessage', Term1}.



%%================================
%%  DownlinkNASTransport
%%================================
'enc_DownlinkNASTransport'(Val) ->
    'enc_DownlinkNASTransport'(Val, [<<48>>]).

'enc_DownlinkNASTransport'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DownlinkNASTransport_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DownlinkNASTransport_protocolIEs
%%================================
'enc_DownlinkNASTransport_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_DownlinkNASTransport_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DownlinkNASTransport_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DownlinkNASTransport_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_DownlinkNASTransport_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  DownlinkNASTransport_protocolIEs_ProtocolIE-Field
%%================================
'enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_90'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_90'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_DownlinkNASTransport_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_DownlinkNASTransport'(Tlv) ->
   'dec_DownlinkNASTransport'(Tlv, [16]).

'dec_DownlinkNASTransport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DownlinkNASTransport_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'DownlinkNASTransport', Term1}.



%%================================
%%  UEContextModificationFailure
%%================================
'enc_UEContextModificationFailure'(Val) ->
    'enc_UEContextModificationFailure'(Val, [<<48>>]).

'enc_UEContextModificationFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextModificationFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextModificationFailure_protocolIEs
%%================================
'enc_UEContextModificationFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextModificationFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextModificationFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextModificationFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextModificationFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextModificationFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_91'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_91'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextModificationFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextModificationFailure'(Tlv) ->
   'dec_UEContextModificationFailure'(Tlv, [16]).

'dec_UEContextModificationFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextModificationFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextModificationFailure', Term1}.



%%================================
%%  UEContextModificationResponse
%%================================
'enc_UEContextModificationResponse'(Val) ->
    'enc_UEContextModificationResponse'(Val, [<<48>>]).

'enc_UEContextModificationResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextModificationResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextModificationResponse_protocolIEs
%%================================
'enc_UEContextModificationResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextModificationResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextModificationResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextModificationResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextModificationResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextModificationResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_92'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_92'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextModificationResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextModificationResponse'(Tlv) ->
   'dec_UEContextModificationResponse'(Tlv, [16]).

'dec_UEContextModificationResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextModificationResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextModificationResponse', Term1}.



%%================================
%%  UEContextModificationRequest
%%================================
'enc_UEContextModificationRequest'(Val) ->
    'enc_UEContextModificationRequest'(Val, [<<48>>]).

'enc_UEContextModificationRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextModificationRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextModificationRequest_protocolIEs
%%================================
'enc_UEContextModificationRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextModificationRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextModificationRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextModificationRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextModificationRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextModificationRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_93'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_93'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextModificationRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextModificationRequest'(Tlv) ->
   'dec_UEContextModificationRequest'(Tlv, [16]).

'dec_UEContextModificationRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextModificationRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextModificationRequest', Term1}.



%%================================
%%  UEContextReleaseComplete
%%================================
'enc_UEContextReleaseComplete'(Val) ->
    'enc_UEContextReleaseComplete'(Val, [<<48>>]).

'enc_UEContextReleaseComplete'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextReleaseComplete_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextReleaseComplete_protocolIEs
%%================================
'enc_UEContextReleaseComplete_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextReleaseComplete_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextReleaseComplete_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextReleaseComplete_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextReleaseComplete_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextReleaseComplete_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_94'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_94'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextReleaseComplete_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextReleaseComplete'(Tlv) ->
   'dec_UEContextReleaseComplete'(Tlv, [16]).

'dec_UEContextReleaseComplete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextReleaseComplete_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextReleaseComplete', Term1}.



%%================================
%%  UEContextReleaseCommand
%%================================
'enc_UEContextReleaseCommand'(Val) ->
    'enc_UEContextReleaseCommand'(Val, [<<48>>]).

'enc_UEContextReleaseCommand'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextReleaseCommand_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextReleaseCommand_protocolIEs
%%================================
'enc_UEContextReleaseCommand_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextReleaseCommand_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextReleaseCommand_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextReleaseCommand_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextReleaseCommand_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextReleaseCommand_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_95'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_95'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextReleaseCommand_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextReleaseCommand'(Tlv) ->
   'dec_UEContextReleaseCommand'(Tlv, [16]).

'dec_UEContextReleaseCommand'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextReleaseCommand_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextReleaseCommand', Term1}.



%%================================
%%  UEContextReleaseRequest
%%================================
'enc_UEContextReleaseRequest'(Val) ->
    'enc_UEContextReleaseRequest'(Val, [<<48>>]).

'enc_UEContextReleaseRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextReleaseRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextReleaseRequest_protocolIEs
%%================================
'enc_UEContextReleaseRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextReleaseRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextReleaseRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextReleaseRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextReleaseRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextReleaseRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_96'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_96'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextReleaseRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextReleaseRequest'(Tlv) ->
   'dec_UEContextReleaseRequest'(Tlv, [16]).

'dec_UEContextReleaseRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextReleaseRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextReleaseRequest', Term1}.



%%================================
%%  TAIItem
%%================================
'enc_TAIItem'(Val) ->
    'enc_TAIItem'(Val, [<<48>>]).

'enc_TAIItem'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tAI(1)   External S1AP:TAI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_TAI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TAIItem_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TAIItem_iE-Extensions
%%================================
'enc_TAIItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TAIItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAIItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAIItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAIItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TAIItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TAIItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TAIItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_97'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TAIItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_97'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TAIItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAIItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TAIItem'(Tlv) ->
   'dec_TAIItem'(Tlv, [16]).

'dec_TAIItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tAI(1)   External S1AP:TAI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_TAI'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_TAIItem_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TAIItem', Term1, Term2}.



%%================================
%%  TAIList
%%================================
'enc_TAIList'(Val) ->
    'enc_TAIList'(Val, [<<48>>]).

'enc_TAIList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_TAIList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TAIList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TAIList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TAIList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_TAIList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TAIList_ProtocolIE-Field
%%================================
'enc_TAIList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_98'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TAIList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_98'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_TAIList'(Tlv) ->
   'dec_TAIList'(Tlv, [16]).

'dec_TAIList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TAIList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Paging
%%================================
'enc_Paging'(Val) ->
    'enc_Paging'(Val, [<<48>>]).

'enc_Paging'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_Paging_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Paging_protocolIEs
%%================================
'enc_Paging_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Paging_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Paging_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Paging_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Paging_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_Paging_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Paging_protocolIEs_ProtocolIE-Field
%%================================
'enc_Paging_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_99'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Paging_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_99'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_Paging_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Paging_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_Paging'(Tlv) ->
   'dec_Paging'(Tlv, [16]).

'dec_Paging'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_Paging_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Paging', Term1}.



%%================================
%%  InitialContextSetupFailure
%%================================
'enc_InitialContextSetupFailure'(Val) ->
    'enc_InitialContextSetupFailure'(Val, [<<48>>]).

'enc_InitialContextSetupFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialContextSetupFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InitialContextSetupFailure_protocolIEs
%%================================
'enc_InitialContextSetupFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_InitialContextSetupFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InitialContextSetupFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InitialContextSetupFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_InitialContextSetupFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  InitialContextSetupFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_100'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_100'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_InitialContextSetupFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_InitialContextSetupFailure'(Tlv) ->
   'dec_InitialContextSetupFailure'(Tlv, [16]).

'dec_InitialContextSetupFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InitialContextSetupFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'InitialContextSetupFailure', Term1}.



%%================================
%%  E-RABSetupItemCtxtSURes
%%================================
'enc_E-RABSetupItemCtxtSURes'(Val) ->
    'enc_E-RABSetupItemCtxtSURes'(Val, [<<48>>]).

'enc_E-RABSetupItemCtxtSURes'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABSetupItemCtxtSURes_iE-Extensions
%%================================
'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABSetupItemCtxtSURes_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupItemCtxtSURes_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupItemCtxtSURes_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABSetupItemCtxtSURes_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_101'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_101'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABSetupItemCtxtSURes'(Tlv) ->
   'dec_E-RABSetupItemCtxtSURes'(Tlv, [16]).

'dec_E-RABSetupItemCtxtSURes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABSetupItemCtxtSURes', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABSetupListCtxtSURes
%%================================
'enc_E-RABSetupListCtxtSURes'(Val) ->
    'enc_E-RABSetupListCtxtSURes'(Val, [<<48>>]).

'enc_E-RABSetupListCtxtSURes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupListCtxtSURes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupListCtxtSURes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupListCtxtSURes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABSetupListCtxtSURes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupListCtxtSURes_ProtocolIE-Field
%%================================
'enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_102'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_102'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABSetupListCtxtSURes'(Tlv) ->
   'dec_E-RABSetupListCtxtSURes'(Tlv, [16]).

'dec_E-RABSetupListCtxtSURes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  InitialContextSetupResponse
%%================================
'enc_InitialContextSetupResponse'(Val) ->
    'enc_InitialContextSetupResponse'(Val, [<<48>>]).

'enc_InitialContextSetupResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialContextSetupResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InitialContextSetupResponse_protocolIEs
%%================================
'enc_InitialContextSetupResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_InitialContextSetupResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InitialContextSetupResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InitialContextSetupResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_InitialContextSetupResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  InitialContextSetupResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_103'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_103'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_InitialContextSetupResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_InitialContextSetupResponse'(Tlv) ->
   'dec_InitialContextSetupResponse'(Tlv, [16]).

'dec_InitialContextSetupResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InitialContextSetupResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'InitialContextSetupResponse', Term1}.



%%================================
%%  E-RABToBeSetupItemCtxtSUReq
%%================================
'enc_E-RABToBeSetupItemCtxtSUReq'(Val) ->
    'enc_E-RABToBeSetupItemCtxtSUReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupItemCtxtSUReq'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RABlevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_E-RABLevelQoSParameters'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute nAS-PDU(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeSetupItemCtxtSUReq_iE-Extensions
%%================================
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_104'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_104'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeSetupItemCtxtSUReq'(Tlv) ->
   'dec_E-RABToBeSetupItemCtxtSUReq'(Tlv, [16]).

'dec_E-RABToBeSetupItemCtxtSUReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute e-RABlevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_E-RABLevelQoSParameters'(V2, [131073]),

%%-------------------------------------------------
%% attribute transportLayerAddress(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [131074]),

%%-------------------------------------------------
%% attribute gTP-TEID(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_octet_string(V4, [131075]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nAS-PDU(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {decode_octet_string(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeSetupItemCtxtSUReq', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  E-RABToBeSetupListCtxtSUReq
%%================================
'enc_E-RABToBeSetupListCtxtSUReq'(Val) ->
    'enc_E-RABToBeSetupListCtxtSUReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupListCtxtSUReq'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListCtxtSUReq_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupListCtxtSUReq_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupListCtxtSUReq_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeSetupListCtxtSUReq_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field
%%================================
'enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_105'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_105'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeSetupListCtxtSUReq'(Tlv) ->
   'dec_E-RABToBeSetupListCtxtSUReq'(Tlv, [16]).

'dec_E-RABToBeSetupListCtxtSUReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  InitialContextSetupRequest
%%================================
'enc_InitialContextSetupRequest'(Val) ->
    'enc_InitialContextSetupRequest'(Val, [<<48>>]).

'enc_InitialContextSetupRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialContextSetupRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  InitialContextSetupRequest_protocolIEs
%%================================
'enc_InitialContextSetupRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_InitialContextSetupRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InitialContextSetupRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InitialContextSetupRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_InitialContextSetupRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  InitialContextSetupRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_106'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_106'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_InitialContextSetupRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_InitialContextSetupRequest'(Tlv) ->
   'dec_InitialContextSetupRequest'(Tlv, [16]).

'dec_InitialContextSetupRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InitialContextSetupRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'InitialContextSetupRequest', Term1}.



%%================================
%%  E-RABReleaseIndication
%%================================
'enc_E-RABReleaseIndication'(Val) ->
    'enc_E-RABReleaseIndication'(Val, [<<48>>]).

'enc_E-RABReleaseIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABReleaseIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABReleaseIndication_protocolIEs
%%================================
'enc_E-RABReleaseIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABReleaseIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABReleaseIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABReleaseIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABReleaseIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABReleaseIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_107'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_107'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABReleaseIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABReleaseIndication'(Tlv) ->
   'dec_E-RABReleaseIndication'(Tlv, [16]).

'dec_E-RABReleaseIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABReleaseIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABReleaseIndication', Term1}.



%%================================
%%  E-RABReleaseItemBearerRelComp
%%================================
'enc_E-RABReleaseItemBearerRelComp'(Val) ->
    'enc_E-RABReleaseItemBearerRelComp'(Val, [<<48>>]).

'enc_E-RABReleaseItemBearerRelComp'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABReleaseItemBearerRelComp_iE-Extensions
%%================================
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_108'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_108'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABReleaseItemBearerRelComp'(Tlv) ->
   'dec_E-RABReleaseItemBearerRelComp'(Tlv, [16]).

'dec_E-RABReleaseItemBearerRelComp'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABReleaseItemBearerRelComp', Term1, Term2}.



%%================================
%%  E-RABReleaseListBearerRelComp
%%================================
'enc_E-RABReleaseListBearerRelComp'(Val) ->
    'enc_E-RABReleaseListBearerRelComp'(Val, [<<48>>]).

'enc_E-RABReleaseListBearerRelComp'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseListBearerRelComp_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABReleaseListBearerRelComp_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABReleaseListBearerRelComp_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABReleaseListBearerRelComp_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABReleaseListBearerRelComp_ProtocolIE-Field
%%================================
'enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_109'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_109'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABReleaseListBearerRelComp'(Tlv) ->
   'dec_E-RABReleaseListBearerRelComp'(Tlv, [16]).

'dec_E-RABReleaseListBearerRelComp'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABReleaseResponse
%%================================
'enc_E-RABReleaseResponse'(Val) ->
    'enc_E-RABReleaseResponse'(Val, [<<48>>]).

'enc_E-RABReleaseResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABReleaseResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABReleaseResponse_protocolIEs
%%================================
'enc_E-RABReleaseResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABReleaseResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABReleaseResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABReleaseResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABReleaseResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABReleaseResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_110'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_110'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABReleaseResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABReleaseResponse'(Tlv) ->
   'dec_E-RABReleaseResponse'(Tlv, [16]).

'dec_E-RABReleaseResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABReleaseResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABReleaseResponse', Term1}.



%%================================
%%  E-RABReleaseCommand
%%================================
'enc_E-RABReleaseCommand'(Val) ->
    'enc_E-RABReleaseCommand'(Val, [<<48>>]).

'enc_E-RABReleaseCommand'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABReleaseCommand_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABReleaseCommand_protocolIEs
%%================================
'enc_E-RABReleaseCommand_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABReleaseCommand_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABReleaseCommand_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABReleaseCommand_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABReleaseCommand_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABReleaseCommand_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_111'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_111'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABReleaseCommand_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABReleaseCommand'(Tlv) ->
   'dec_E-RABReleaseCommand'(Tlv, [16]).

'dec_E-RABReleaseCommand'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABReleaseCommand_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABReleaseCommand', Term1}.



%%================================
%%  E-RABModifyItemBearerModRes
%%================================
'enc_E-RABModifyItemBearerModRes'(Val) ->
    'enc_E-RABModifyItemBearerModRes'(Val, [<<48>>]).

'enc_E-RABModifyItemBearerModRes'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABModifyItemBearerModRes_iE-Extensions
%%================================
'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABModifyItemBearerModRes_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABModifyItemBearerModRes_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABModifyItemBearerModRes_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABModifyItemBearerModRes_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_112'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_112'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABModifyItemBearerModRes_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABModifyItemBearerModRes'(Tlv) ->
   'dec_E-RABModifyItemBearerModRes'(Tlv, [16]).

'dec_E-RABModifyItemBearerModRes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_E-RABModifyItemBearerModRes_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABModifyItemBearerModRes', Term1, Term2}.



%%================================
%%  E-RABModifyListBearerModRes
%%================================
'enc_E-RABModifyListBearerModRes'(Val) ->
    'enc_E-RABModifyListBearerModRes'(Val, [<<48>>]).

'enc_E-RABModifyListBearerModRes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABModifyListBearerModRes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABModifyListBearerModRes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABModifyListBearerModRes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABModifyListBearerModRes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABModifyListBearerModRes_ProtocolIE-Field
%%================================
'enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_113'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_113'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABModifyListBearerModRes'(Tlv) ->
   'dec_E-RABModifyListBearerModRes'(Tlv, [16]).

'dec_E-RABModifyListBearerModRes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABModifyResponse
%%================================
'enc_E-RABModifyResponse'(Val) ->
    'enc_E-RABModifyResponse'(Val, [<<48>>]).

'enc_E-RABModifyResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABModifyResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABModifyResponse_protocolIEs
%%================================
'enc_E-RABModifyResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABModifyResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABModifyResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABModifyResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABModifyResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABModifyResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_114'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_114'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABModifyResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABModifyResponse'(Tlv) ->
   'dec_E-RABModifyResponse'(Tlv, [16]).

'dec_E-RABModifyResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABModifyResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABModifyResponse', Term1}.



%%================================
%%  E-RABToBeModifiedItemBearerModReq
%%================================
'enc_E-RABToBeModifiedItemBearerModReq'(Val) ->
    'enc_E-RABToBeModifiedItemBearerModReq'(Val, [<<48>>]).

'enc_E-RABToBeModifiedItemBearerModReq'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RABLevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_E-RABLevelQoSParameters'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute nAS-PDU(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeModifiedItemBearerModReq_iE-Extensions
%%================================
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_115'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_115'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeModifiedItemBearerModReq'(Tlv) ->
   'dec_E-RABToBeModifiedItemBearerModReq'(Tlv, [16]).

'dec_E-RABToBeModifiedItemBearerModReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute e-RABLevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_E-RABLevelQoSParameters'(V2, [131073]),

%%-------------------------------------------------
%% attribute nAS-PDU(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeModifiedItemBearerModReq', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABToBeModifiedListBearerModReq
%%================================
'enc_E-RABToBeModifiedListBearerModReq'(Val) ->
    'enc_E-RABToBeModifiedListBearerModReq'(Val, [<<48>>]).

'enc_E-RABToBeModifiedListBearerModReq'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeModifiedListBearerModReq_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeModifiedListBearerModReq_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeModifiedListBearerModReq_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeModifiedListBearerModReq_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeModifiedListBearerModReq_ProtocolIE-Field
%%================================
'enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_116'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_116'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeModifiedListBearerModReq'(Tlv) ->
   'dec_E-RABToBeModifiedListBearerModReq'(Tlv, [16]).

'dec_E-RABToBeModifiedListBearerModReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABModifyRequest
%%================================
'enc_E-RABModifyRequest'(Val) ->
    'enc_E-RABModifyRequest'(Val, [<<48>>]).

'enc_E-RABModifyRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABModifyRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABModifyRequest_protocolIEs
%%================================
'enc_E-RABModifyRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABModifyRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABModifyRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABModifyRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABModifyRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABModifyRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_117'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_117'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABModifyRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABModifyRequest'(Tlv) ->
   'dec_E-RABModifyRequest'(Tlv, [16]).

'dec_E-RABModifyRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABModifyRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABModifyRequest', Term1}.



%%================================
%%  E-RABSetupItemBearerSURes
%%================================
'enc_E-RABSetupItemBearerSURes'(Val) ->
    'enc_E-RABSetupItemBearerSURes'(Val, [<<48>>]).

'enc_E-RABSetupItemBearerSURes'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABSetupItemBearerSURes_iE-Extensions
%%================================
'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABSetupItemBearerSURes_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupItemBearerSURes_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupItemBearerSURes_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABSetupItemBearerSURes_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_118'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_118'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABSetupItemBearerSURes_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABSetupItemBearerSURes'(Tlv) ->
   'dec_E-RABSetupItemBearerSURes'(Tlv, [16]).

'dec_E-RABSetupItemBearerSURes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABSetupItemBearerSURes_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABSetupItemBearerSURes', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABSetupListBearerSURes
%%================================
'enc_E-RABSetupListBearerSURes'(Val) ->
    'enc_E-RABSetupListBearerSURes'(Val, [<<48>>]).

'enc_E-RABSetupListBearerSURes'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupListBearerSURes_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupListBearerSURes_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupListBearerSURes_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABSetupListBearerSURes_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupListBearerSURes_ProtocolIE-Field
%%================================
'enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_119'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_119'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABSetupListBearerSURes'(Tlv) ->
   'dec_E-RABSetupListBearerSURes'(Tlv, [16]).

'dec_E-RABSetupListBearerSURes'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABSetupResponse
%%================================
'enc_E-RABSetupResponse'(Val) ->
    'enc_E-RABSetupResponse'(Val, [<<48>>]).

'enc_E-RABSetupResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABSetupResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABSetupResponse_protocolIEs
%%================================
'enc_E-RABSetupResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABSetupResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABSetupResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_120'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_120'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABSetupResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABSetupResponse'(Tlv) ->
   'dec_E-RABSetupResponse'(Tlv, [16]).

'dec_E-RABSetupResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABSetupResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABSetupResponse', Term1}.



%%================================
%%  E-RABToBeSetupItemBearerSUReq
%%================================
'enc_E-RABToBeSetupItemBearerSUReq'(Val) ->
    'enc_E-RABToBeSetupItemBearerSUReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupItemBearerSUReq'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RABlevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_E-RABLevelQoSParameters'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(4) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_restricted_string(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute nAS-PDU(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeSetupItemBearerSUReq_iE-Extensions
%%================================
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_121'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_121'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeSetupItemBearerSUReq'(Tlv) ->
   'dec_E-RABToBeSetupItemBearerSUReq'(Tlv, [16]).

'dec_E-RABToBeSetupItemBearerSUReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute e-RABlevelQoSParameters(2)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_E-RABLevelQoSParameters'(V2, [131073]),

%%-------------------------------------------------
%% attribute transportLayerAddress(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_native_bit_string(V3, [131074]),

%%-------------------------------------------------
%% attribute gTP-TEID(4) with type OCTET STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_octet_string(V4, [131075]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nAS-PDU(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [131076]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeSetupItemBearerSUReq', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  E-RABToBeSetupListBearerSUReq
%%================================
'enc_E-RABToBeSetupListBearerSUReq'(Val) ->
    'enc_E-RABToBeSetupListBearerSUReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupListBearerSUReq'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListBearerSUReq_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupListBearerSUReq_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupListBearerSUReq_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeSetupListBearerSUReq_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupListBearerSUReq_ProtocolIE-Field
%%================================
'enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_122'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_122'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeSetupListBearerSUReq'(Tlv) ->
   'dec_E-RABToBeSetupListBearerSUReq'(Tlv, [16]).

'dec_E-RABToBeSetupListBearerSUReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABSetupRequest
%%================================
'enc_E-RABSetupRequest'(Val) ->
    'enc_E-RABSetupRequest'(Val, [<<48>>]).

'enc_E-RABSetupRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_E-RABSetupRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABSetupRequest_protocolIEs
%%================================
'enc_E-RABSetupRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABSetupRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSetupRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSetupRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABSetupRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSetupRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_123'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_123'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_E-RABSetupRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABSetupRequest'(Tlv) ->
   'dec_E-RABSetupRequest'(Tlv, [16]).

'dec_E-RABSetupRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_E-RABSetupRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABSetupRequest', Term1}.



%%================================
%%  HandoverCancelAcknowledge
%%================================
'enc_HandoverCancelAcknowledge'(Val) ->
    'enc_HandoverCancelAcknowledge'(Val, [<<48>>]).

'enc_HandoverCancelAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverCancelAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverCancelAcknowledge_protocolIEs
%%================================
'enc_HandoverCancelAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverCancelAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverCancelAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverCancelAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverCancelAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_124'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_124'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverCancelAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverCancelAcknowledge'(Tlv) ->
   'dec_HandoverCancelAcknowledge'(Tlv, [16]).

'dec_HandoverCancelAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverCancelAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverCancelAcknowledge', Term1}.



%%================================
%%  HandoverCancel
%%================================
'enc_HandoverCancel'(Val) ->
    'enc_HandoverCancel'(Val, [<<48>>]).

'enc_HandoverCancel'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverCancel_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverCancel_protocolIEs
%%================================
'enc_HandoverCancel_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverCancel_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverCancel_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverCancel_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverCancel_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverCancel_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_125'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_125'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverCancel_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverCancel'(Tlv) ->
   'dec_HandoverCancel'(Tlv, [16]).

'dec_HandoverCancel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverCancel_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverCancel', Term1}.



%%================================
%%  PathSwitchRequestFailure
%%================================
'enc_PathSwitchRequestFailure'(Val) ->
    'enc_PathSwitchRequestFailure'(Val, [<<48>>]).

'enc_PathSwitchRequestFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PathSwitchRequestFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PathSwitchRequestFailure_protocolIEs
%%================================
'enc_PathSwitchRequestFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PathSwitchRequestFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PathSwitchRequestFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PathSwitchRequestFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_PathSwitchRequestFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_126'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_126'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_PathSwitchRequestFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_PathSwitchRequestFailure'(Tlv) ->
   'dec_PathSwitchRequestFailure'(Tlv, [16]).

'dec_PathSwitchRequestFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PathSwitchRequestFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PathSwitchRequestFailure', Term1}.



%%================================
%%  E-RABToBeSwitchedULItem
%%================================
'enc_E-RABToBeSwitchedULItem'(Val) ->
    'enc_E-RABToBeSwitchedULItem'(Val, [<<48>>]).

'enc_E-RABToBeSwitchedULItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeSwitchedULItem_iE-Extensions
%%================================
'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedULItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSwitchedULItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSwitchedULItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeSwitchedULItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_127'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_127'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeSwitchedULItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeSwitchedULItem'(Tlv) ->
   'dec_E-RABToBeSwitchedULItem'(Tlv, [16]).

'dec_E-RABToBeSwitchedULItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABToBeSwitchedULItem_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeSwitchedULItem', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABToBeSwitchedULList
%%================================
'enc_E-RABToBeSwitchedULList'(Val) ->
    'enc_E-RABToBeSwitchedULList'(Val, [<<48>>]).

'enc_E-RABToBeSwitchedULList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedULList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSwitchedULList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSwitchedULList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeSwitchedULList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSwitchedULList_ProtocolIE-Field
%%================================
'enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_128'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_128'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeSwitchedULList'(Tlv) ->
   'dec_E-RABToBeSwitchedULList'(Tlv, [16]).

'dec_E-RABToBeSwitchedULList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  PathSwitchRequestAcknowledge
%%================================
'enc_PathSwitchRequestAcknowledge'(Val) ->
    'enc_PathSwitchRequestAcknowledge'(Val, [<<48>>]).

'enc_PathSwitchRequestAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PathSwitchRequestAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PathSwitchRequestAcknowledge_protocolIEs
%%================================
'enc_PathSwitchRequestAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PathSwitchRequestAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PathSwitchRequestAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PathSwitchRequestAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_PathSwitchRequestAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_129'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_129'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_PathSwitchRequestAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_PathSwitchRequestAcknowledge'(Tlv) ->
   'dec_PathSwitchRequestAcknowledge'(Tlv, [16]).

'dec_PathSwitchRequestAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PathSwitchRequestAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PathSwitchRequestAcknowledge', Term1}.



%%================================
%%  E-RABToBeSwitchedDLItem
%%================================
'enc_E-RABToBeSwitchedDLItem'(Val) ->
    'enc_E-RABToBeSwitchedDLItem'(Val, [<<48>>]).

'enc_E-RABToBeSwitchedDLItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeSwitchedDLItem_iE-Extensions
%%================================
'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedDLItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSwitchedDLItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSwitchedDLItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeSwitchedDLItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_130'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_130'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeSwitchedDLItem'(Tlv) ->
   'dec_E-RABToBeSwitchedDLItem'(Tlv, [16]).

'dec_E-RABToBeSwitchedDLItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeSwitchedDLItem', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABToBeSwitchedDLList
%%================================
'enc_E-RABToBeSwitchedDLList'(Val) ->
    'enc_E-RABToBeSwitchedDLList'(Val, [<<48>>]).

'enc_E-RABToBeSwitchedDLList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedDLList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSwitchedDLList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSwitchedDLList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeSwitchedDLList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSwitchedDLList_ProtocolIE-Field
%%================================
'enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_131'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_131'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeSwitchedDLList'(Tlv) ->
   'dec_E-RABToBeSwitchedDLList'(Tlv, [16]).

'dec_E-RABToBeSwitchedDLList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  PathSwitchRequest
%%================================
'enc_PathSwitchRequest'(Val) ->
    'enc_PathSwitchRequest'(Val, [<<48>>]).

'enc_PathSwitchRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PathSwitchRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PathSwitchRequest_protocolIEs
%%================================
'enc_PathSwitchRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PathSwitchRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PathSwitchRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PathSwitchRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_PathSwitchRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PathSwitchRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_132'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_132'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_PathSwitchRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_PathSwitchRequest'(Tlv) ->
   'dec_PathSwitchRequest'(Tlv, [16]).

'dec_PathSwitchRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PathSwitchRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PathSwitchRequest', Term1}.



%%================================
%%  HandoverNotify
%%================================
'enc_HandoverNotify'(Val) ->
    'enc_HandoverNotify'(Val, [<<48>>]).

'enc_HandoverNotify'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverNotify_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverNotify_protocolIEs
%%================================
'enc_HandoverNotify_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverNotify_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverNotify_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverNotify_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverNotify_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverNotify_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_133'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_133'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverNotify_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverNotify'(Tlv) ->
   'dec_HandoverNotify'(Tlv, [16]).

'dec_HandoverNotify'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverNotify_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverNotify', Term1}.



%%================================
%%  HandoverFailure
%%================================
'enc_HandoverFailure'(Val) ->
    'enc_HandoverFailure'(Val, [<<48>>]).

'enc_HandoverFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverFailure_protocolIEs
%%================================
'enc_HandoverFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_134'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_134'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverFailure'(Tlv) ->
   'dec_HandoverFailure'(Tlv, [16]).

'dec_HandoverFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverFailure', Term1}.



%%================================
%%  E-RABFailedToSetupItemHOReqAck
%%================================
'enc_E-RABFailedToSetupItemHOReqAck'(Val) ->
    'enc_E-RABFailedToSetupItemHOReqAck'(Val, [<<48>>]).

'enc_E-RABFailedToSetupItemHOReqAck'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cause(2)   External S1AP:Cause
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Cause'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABFailedToSetupItemHOReqAck_iE-Extensions
%%================================
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_135'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_135'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABFailedToSetupItemHOReqAck'(Tlv) ->
   'dec_E-RABFailedToSetupItemHOReqAck'(Tlv, [16]).

'dec_E-RABFailedToSetupItemHOReqAck'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute cause(2)   External S1AP:Cause
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Cause'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABFailedToSetupItemHOReqAck', Term1, Term2, Term3}.



%%================================
%%  E-RABFailedtoSetupListHOReqAck
%%================================
'enc_E-RABFailedtoSetupListHOReqAck'(Val) ->
    'enc_E-RABFailedtoSetupListHOReqAck'(Val, [<<48>>]).

'enc_E-RABFailedtoSetupListHOReqAck'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABFailedtoSetupListHOReqAck_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABFailedtoSetupListHOReqAck_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABFailedtoSetupListHOReqAck_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABFailedtoSetupListHOReqAck_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field
%%================================
'enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_136'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_136'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABFailedtoSetupListHOReqAck'(Tlv) ->
   'dec_E-RABFailedtoSetupListHOReqAck'(Tlv, [16]).

'dec_E-RABFailedtoSetupListHOReqAck'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RABAdmittedItem
%%================================
'enc_E-RABAdmittedItem'(Val) ->
    'enc_E-RABAdmittedItem'(Val, [<<48>>]).

'enc_E-RABAdmittedItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute dL-transportLayerAddress(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute dL-gTP-TEID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute uL-TransportLayerAddress(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex6, [<<133>>])
       end,

%%-------------------------------------------------
%% attribute uL-GTP-TEID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(8) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABAdmittedItem_iE-Extensions'(Cindex8, [<<167>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABAdmittedItem_iE-Extensions
%%================================
'enc_E-RABAdmittedItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABAdmittedItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABAdmittedItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABAdmittedItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABAdmittedItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_137'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_137'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABAdmittedItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABAdmittedItem'(Tlv) ->
   'dec_E-RABAdmittedItem'(Tlv, [16]).

'dec_E-RABAdmittedItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dL-transportLayerAddress(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_native_bit_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute dL-gTP-TEID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if C2 =:= 4 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute uL-TransportLayerAddress(6) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {decode_native_bit_string(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute uL-GTP-TEID(7) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_octet_string(V7, []),
C3 = byte_size(Val3),
if C3 =:= 4 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(8) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_E-RABAdmittedItem_iE-Extensions'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABAdmittedItem', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  E-RABAdmittedList
%%================================
'enc_E-RABAdmittedList'(Val) ->
    'enc_E-RABAdmittedList'(Val, [<<48>>]).

'enc_E-RABAdmittedList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABAdmittedList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABAdmittedList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABAdmittedList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABAdmittedList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABAdmittedList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABAdmittedList_ProtocolIE-Field
%%================================
'enc_E-RABAdmittedList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_138'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABAdmittedList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_138'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABAdmittedList'(Tlv) ->
   'dec_E-RABAdmittedList'(Tlv, [16]).

'dec_E-RABAdmittedList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABAdmittedList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  HandoverRequestAcknowledge
%%================================
'enc_HandoverRequestAcknowledge'(Val) ->
    'enc_HandoverRequestAcknowledge'(Val, [<<48>>]).

'enc_HandoverRequestAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverRequestAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRequestAcknowledge_protocolIEs
%%================================
'enc_HandoverRequestAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRequestAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRequestAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRequestAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverRequestAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_139'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_139'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverRequestAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRequestAcknowledge'(Tlv) ->
   'dec_HandoverRequestAcknowledge'(Tlv, [16]).

'dec_HandoverRequestAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverRequestAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRequestAcknowledge', Term1}.



%%================================
%%  E-RABToBeSetupItemHOReq
%%================================
'enc_E-RABToBeSetupItemHOReq'(Val) ->
    'enc_E-RABToBeSetupItemHOReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupItemHOReq'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute e-RABlevelQosParameters(4)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_E-RABLevelQoSParameters'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABToBeSetupItemHOReq_iE-Extensions
%%================================
'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemHOReq_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupItemHOReq_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupItemHOReq_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABToBeSetupItemHOReq_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_140'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_140'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABToBeSetupItemHOReq'(Tlv) ->
   'dec_E-RABToBeSetupItemHOReq'(Tlv, [16]).

'dec_E-RABToBeSetupItemHOReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute transportLayerAddress(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute gTP-TEID(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RABlevelQosParameters(4)   External S1AP:E-RABLevelQoSParameters
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_E-RABLevelQoSParameters'(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABToBeSetupItemHOReq', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  E-RABToBeSetupListHOReq
%%================================
'enc_E-RABToBeSetupListHOReq'(Val) ->
    'enc_E-RABToBeSetupListHOReq'(Val, [<<48>>]).

'enc_E-RABToBeSetupListHOReq'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListHOReq_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABToBeSetupListHOReq_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABToBeSetupListHOReq_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABToBeSetupListHOReq_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABToBeSetupListHOReq_ProtocolIE-Field
%%================================
'enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_141'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_141'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABToBeSetupListHOReq'(Tlv) ->
   'dec_E-RABToBeSetupListHOReq'(Tlv, [16]).

'dec_E-RABToBeSetupListHOReq'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  HandoverRequest
%%================================
'enc_HandoverRequest'(Val) ->
    'enc_HandoverRequest'(Val, [<<48>>]).

'enc_HandoverRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRequest_protocolIEs
%%================================
'enc_HandoverRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_142'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_142'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRequest'(Tlv) ->
   'dec_HandoverRequest'(Tlv, [16]).

'dec_HandoverRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRequest', Term1}.



%%================================
%%  HandoverPreparationFailure
%%================================
'enc_HandoverPreparationFailure'(Val) ->
    'enc_HandoverPreparationFailure'(Val, [<<48>>]).

'enc_HandoverPreparationFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverPreparationFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverPreparationFailure_protocolIEs
%%================================
'enc_HandoverPreparationFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverPreparationFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverPreparationFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverPreparationFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverPreparationFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverPreparationFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_143'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_143'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverPreparationFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverPreparationFailure'(Tlv) ->
   'dec_HandoverPreparationFailure'(Tlv, [16]).

'dec_HandoverPreparationFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverPreparationFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverPreparationFailure', Term1}.



%%================================
%%  E-RABDataForwardingItem
%%================================
'enc_E-RABDataForwardingItem'(Val) ->
    'enc_E-RABDataForwardingItem'(Val, [<<48>>]).

'enc_E-RABDataForwardingItem'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute dL-transportLayerAddress(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute dL-gTP-TEID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute uL-TransportLayerAddress(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute uL-GTP-TEID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABDataForwardingItem_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABDataForwardingItem_iE-Extensions
%%================================
'enc_E-RABDataForwardingItem_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABDataForwardingItem_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABDataForwardingItem_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABDataForwardingItem_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABDataForwardingItem_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_144'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_144'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABDataForwardingItem_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABDataForwardingItem'(Tlv) ->
   'dec_E-RABDataForwardingItem'(Tlv, [16]).

'dec_E-RABDataForwardingItem'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute dL-transportLayerAddress(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {decode_native_bit_string(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute dL-gTP-TEID(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute uL-TransportLayerAddress(4) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {decode_native_bit_string(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute uL-GTP-TEID(5) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_octet_string(V5, []),
C2 = byte_size(Val2),
if C2 =:= 4 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_E-RABDataForwardingItem_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABDataForwardingItem', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  E-RABSubjecttoDataForwardingList
%%================================
'enc_E-RABSubjecttoDataForwardingList'(Val) ->
    'enc_E-RABSubjecttoDataForwardingList'(Val, [<<48>>]).

'enc_E-RABSubjecttoDataForwardingList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABSubjecttoDataForwardingList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABSubjecttoDataForwardingList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABSubjecttoDataForwardingList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABSubjecttoDataForwardingList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABSubjecttoDataForwardingList_ProtocolIE-Field
%%================================
'enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_145'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_145'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABSubjecttoDataForwardingList'(Tlv) ->
   'dec_E-RABSubjecttoDataForwardingList'(Tlv, [16]).

'dec_E-RABSubjecttoDataForwardingList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  HandoverCommand
%%================================
'enc_HandoverCommand'(Val) ->
    'enc_HandoverCommand'(Val, [<<48>>]).

'enc_HandoverCommand'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverCommand_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverCommand_protocolIEs
%%================================
'enc_HandoverCommand_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverCommand_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverCommand_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverCommand_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverCommand_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverCommand_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_146'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_146'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverCommand_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverCommand'(Tlv) ->
   'dec_HandoverCommand'(Tlv, [16]).

'dec_HandoverCommand'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverCommand_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverCommand', Term1}.



%%================================
%%  HandoverRequired
%%================================
'enc_HandoverRequired'(Val) ->
    'enc_HandoverRequired'(Val, [<<48>>]).

'enc_HandoverRequired'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverRequired_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRequired_protocolIEs
%%================================
'enc_HandoverRequired_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRequired_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRequired_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRequired_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverRequired_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRequired_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'S1AP':'getenc_internal_object_set_argument_147'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'S1AP':'getdec_internal_object_set_argument_147'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverRequired_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRequired'(Tlv) ->
   'dec_HandoverRequired'(Tlv, [16]).

'dec_HandoverRequired'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverRequired_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRequired', Term1}.

'id-Target-ToSource-TransparentContainer-Secondary'() ->
139.

'id-Source-ToTarget-TransparentContainer-Secondary'() ->
138.

'id-DefaultPagingDRX'() ->
137.

'id-NASSecurityParameterstoE-UTRAN'() ->
136.

'id-NASSecurityParametersfromE-UTRAN'() ->
135.

'id-RRC-Establishment-Cause'() ->
134.

'id-MSClassmark3'() ->
133.

'id-MSClassmark2'() ->
132.

'id-TraceCollectionEntityIPAddress'() ->
131.

'id-SONConfigurationTransferMCT'() ->
130.

'id-SONConfigurationTransferECT'() ->
129.

'id-CSG-IdList'() ->
128.

'id-CSG-Id'() ->
127.

'id-NAS-DownlinkCount'() ->
126.

'id-SRVCCHOIndication'() ->
125.

'id-SRVCCOperationPossible'() ->
124.

'id-Target-ToSource-TransparentContainer'() ->
123.

'id-Inter-SystemInformationTransferTypeMDT'() ->
122.

'id-Inter-SystemInformationTransferTypeEDT'() ->
121.

'id-BroadcastCompletedAreaList'() ->
120.

'id-WarningMessageContents'() ->
119.

'id-DataCodingScheme'() ->
118.

'id-WarningSecurityInfo'() ->
117.

'id-WarningType'() ->
116.

'id-NumberofBroadcastRequest'() ->
115.

'id-RepetitionPeriod'() ->
114.

'id-WarningAreaList'() ->
113.

'id-SerialNumber'() ->
112.

'id-MessageIdentifier'() ->
111.

'id-E-RABReleasedList'() ->
110.

'id-CNDomain'() ->
109.

'id-CSFallbackIndicator'() ->
108.

'id-UESecurityCapabilities'() ->
107.

'id-SubscriberProfileIDforRFP'() ->
106.

'id-ServedGUMMEIs'() ->
105.

'id-Source-ToTarget-TransparentContainer'() ->
104.

'id-E-RABFailedToBeReleasedList'() ->
103.

'id-cdma2000OneXSRVCCInfo'() ->
102.

'id-OverloadResponse'() ->
101.

'id-EUTRAN-CGI'() ->
100.

'id-UE-S1AP-IDs'() ->
99.

'id-RequestType'() ->
98.

'id-cdma2000OneXRAND'() ->
97.

'id-S-TMSI'() ->
96.

'id-E-RABToBeSwitchedULList'() ->
95.

'id-E-RABToBeSwitchedULItem'() ->
94.

'id-UE-associatedLogicalS1-ConnectionListResAck'() ->
93.

'id-ResetType'() ->
92.

'id-UE-associatedLogicalS1-ConnectionItem'() ->
91.

'id-eNB-StatusTransfer-TransparentContainer'() ->
90.

'id-Bearers-SubjectToStatusTransfer-Item'() ->
89.

'id-SourceMME-UE-S1AP-ID'() ->
88.

'id-RelativeMMECapacity'() ->
87.

'id-E-UTRAN-Trace-ID'() ->
86.

'id-cdma2000HORequiredIndication'() ->
84.

'id-cdma2000HOStatus'() ->
83.

'id-UEIdentityIndexValue'() ->
80.

'id-Direct-Forwarding-Path-Availability'() ->
79.

'id-E-RABInformationListItem'() ->
78.

'id-GUMMEI-ID'() ->
75.

'id-UERadioCapability'() ->
74.

'id-SecurityKey'() ->
73.

'id-cdma2000SectorID'() ->
72.

'id-cdma2000RATType'() ->
71.

'id-cdma2000PDU'() ->
70.

'id-E-RABReleaseListBearerRelComp'() ->
69.

'id-TAI'() ->
67.

'id-uEaggregateMaximumBitrate'() ->
66.

'id-TimeToWait'() ->
65.

'id-SupportedTAs'() ->
64.

'id-ServedPLMNs'() ->
63.

'id-MMEname'() ->
61.

'id-eNBname'() ->
60.

'id-Global-ENB-ID'() ->
59.

'id-CriticalityDiagnostics'() ->
58.

'id-UTRANtoLTEHOInformationRes'() ->
57.

'id-GERANtoLTEHOInformationRes'() ->
55.

'id-E-RABToBeSetupListHOReq'() ->
53.

'id-E-RABToBeSetupItemCtxtSUReq'() ->
52.

'id-E-RABSetupListCtxtSURes'() ->
51.

'id-E-RABSetupItemCtxtSURes'() ->
50.

'id-E-RABReleaseItemHOCmd'() ->
49.

'id-E-RABFailedToSetupListCtxtSURes'() ->
48.

'id-TAIItem'() ->
47.

'id-TAIList'() ->
46.

'id-pagingDRX'() ->
44.

'id-UEPagingID'() ->
43.

'id-HandoverRestrictionList'() ->
41.

'id-SecurityContext'() ->
40.

'id-E-RABSetupItemBearerSURes'() ->
39.

'id-E-RABReleaseItem'() ->
38.

'id-E-RABModifyItemBearerModRes'() ->
37.

'id-E-RABToBeModifiedItemBearerModReq'() ->
36.

'id-E-RABItem'() ->
35.

'id-E-RABFailedToReleaseList'() ->
34.

'id-E-RABToBeReleasedList'() ->
33.

'id-E-RABFailedToModifyList'() ->
32.

'id-E-RABModifyListBearerModRes'() ->
31.

'id-E-RABToBeModifiedListBearerModReq'() ->
30.

'id-E-RABFailedToSetupListBearerSURes'() ->
29.

'id-E-RABSetupListBearerSURes'() ->
28.

'id-E-RABToBeSetupItemHOReq'() ->
27.

'id-NAS-PDU'() ->
26.

'id-TraceActivation'() ->
25.

'id-E-RABToBeSetupListCtxtSUReq'() ->
24.

'id-E-RABToBeSwitchedDLItem'() ->
23.

'id-E-RABToBeSwitchedDLList'() ->
22.

'id-E-RABFailedtoSetupItemHOReqAck'() ->
21.

'id-E-RABAdmittedItem'() ->
20.

'id-E-RABFailedToSetupListHOReqAck'() ->
19.

'id-E-RABAdmittedList'() ->
18.

'id-E-RABToBeSetupItemBearerSUReq'() ->
17.

'id-E-RABToBeSetupListBearerSUReq'() ->
16.

'id-E-RABReleaseItemBearerRelComp'() ->
15.

'id-E-RABDataForwardingItem'() ->
14.

'id-E-RABtoReleaseListHOCmd'() ->
13.

'id-E-RABSubjecttoDataForwardingList'() ->
12.

'id-eNB-UE-S1AP-ID'() ->
8.

'id-TargetID'() ->
4.

'id-SourceID'() ->
3.

'id-Cause'() ->
2.

'id-HandoverType'() ->
1.

'id-MME-UE-S1AP-ID'() ->
0.

'maxnoofMMECs'() ->
256.

'maxnoofGroupIDs'() ->
65535.

'maxnoofRATs'() ->
8.

'maxnoofeNBX2TLAs'() ->
2.

'maxnoofCellinEAI'() ->
65535.

'maxnoofCellinTAI'() ->
65535.

'maxnoofEmergencyAreaID'() ->
65535.

'maxnoofCellID'() ->
65535.

'maxnoofTAIforWarning'() ->
65535.

'maxnoofCells'() ->
16.

'maxNrOfIndividualS1ConnectionsToReset'() ->
256.

'maxnoofForbTACs'() ->
4096.

'maxnoofForbLACs'() ->
4096.

'maxnoofEPLMNsPlusOne'() ->
16.

'maxnoofEPLMNs'() ->
15.

'maxnoofPLMNsPerMME'() ->
32.

'maxnoofBPLMNs'() ->
6.

'maxNrOfErrors'() ->
256.

'maxnoofTACs'() ->
256.

'maxnoofTAIs'() ->
256.

'maxNrOfE-RABs'() ->
256.

'maxNrOfCSGs'() ->
256.

'maxProtocolIEs'() ->
65535.

'maxProtocolExtensions'() ->
65535.

'maxPrivateIEs'() ->
65535.

'id-CellTrafficTrace'() ->
42.

'id-MMEConfigurationTransfer'() ->
41.

'id-eNBConfigurationTransfer'() ->
40.

'id-PrivateMessage'() ->
39.

'id-MMEDirectInformationTransfer'() ->
38.

'id-eNBDirectInformationTransfer'() ->
37.

'id-WriteReplaceWarning'() ->
36.

'id-OverloadStop'() ->
35.

'id-OverloadStart'() ->
34.

'id-LocationReport'() ->
33.

'id-LocationReportingFailureIndication'() ->
32.

'id-LocationReportingControl'() ->
31.

'id-MMEConfigurationUpdate'() ->
30.

'id-ENBConfigurationUpdate'() ->
29.

'id-TraceFailureIndication'() ->
28.

'id-TraceStart'() ->
27.

'id-DeactivateTrace'() ->
26.

'id-MMEStatusTransfer'() ->
25.

'id-eNBStatusTransfer'() ->
24.

'id-UEContextRelease'() ->
23.

'id-UECapabilityInfoIndication'() ->
22.

'id-UEContextModification'() ->
21.

'id-UplinkS1cdma2000tunneling'() ->
20.

'id-DownlinkS1cdma2000tunneling'() ->
19.

'id-UEContextReleaseRequest'() ->
18.

'id-S1Setup'() ->
17.

'id-NASNonDeliveryIndication'() ->
16.

'id-ErrorIndication'() ->
15.

'id-Reset'() ->
14.

'id-uplinkNASTransport'() ->
13.

'id-initialUEMessage'() ->
12.

'id-downlinkNASTransport'() ->
11.

'id-Paging'() ->
10.

'id-InitialContextSetup'() ->
9.

'id-E-RABReleaseIndication'() ->
8.

'id-E-RABRelease'() ->
7.

'id-E-RABModify'() ->
6.

'id-E-RABSetup'() ->
5.

'id-HandoverCancel'() ->
4.

'id-PathSwitchRequest'() ->
3.

'id-HandoverNotification'() ->
2.

'id-HandoverResourceAllocation'() ->
1.

'id-HandoverPreparation'() ->
0.




%%================================
%%  privateMessage
%%================================
'enc_privateMessage'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_PrivateMessage'(Val, [<<48>>]);
'enc_privateMessage'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_privateMessage'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_privateMessage'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_PrivateMessage'(Tlv, [16]);
'dec_privateMessage'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_privateMessage'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.

tlv_format(Bytes) when is_binary(Bytes) ->
  {Tlv,_} = ber_decode_nif(Bytes),
  Tlv;
tlv_format(Bytes) ->
  Bytes.



%%================================
%%  mMEConfigurationTransfer
%%================================
'enc_mMEConfigurationTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_MMEConfigurationTransfer'(Val, [<<48>>]);
'enc_mMEConfigurationTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_mMEConfigurationTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_mMEConfigurationTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEConfigurationTransfer'(Tlv, [16]);
'dec_mMEConfigurationTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_mMEConfigurationTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  eNBConfigurationTransfer
%%================================
'enc_eNBConfigurationTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationTransfer'(Val, [<<48>>]);
'enc_eNBConfigurationTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_eNBConfigurationTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_eNBConfigurationTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationTransfer'(Tlv, [16]);
'dec_eNBConfigurationTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_eNBConfigurationTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  mMEDirectInformationTransfer
%%================================
'enc_mMEDirectInformationTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_MMEDirectInformationTransfer'(Val, [<<48>>]);
'enc_mMEDirectInformationTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_mMEDirectInformationTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_mMEDirectInformationTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEDirectInformationTransfer'(Tlv, [16]);
'dec_mMEDirectInformationTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_mMEDirectInformationTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  eNBDirectInformationTransfer
%%================================
'enc_eNBDirectInformationTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ENBDirectInformationTransfer'(Val, [<<48>>]);
'enc_eNBDirectInformationTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_eNBDirectInformationTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_eNBDirectInformationTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBDirectInformationTransfer'(Tlv, [16]);
'dec_eNBDirectInformationTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_eNBDirectInformationTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  writeReplaceWarning
%%================================
'enc_writeReplaceWarning'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_WriteReplaceWarningRequest'(Val, [<<48>>]);
'enc_writeReplaceWarning'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_WriteReplaceWarningResponse'(Val, [<<48>>]);
'enc_writeReplaceWarning'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_writeReplaceWarning'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_WriteReplaceWarningRequest'(Tlv, [16]);
'dec_writeReplaceWarning'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_WriteReplaceWarningResponse'(Tlv, [16]);
'dec_writeReplaceWarning'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  overloadStop
%%================================
'enc_overloadStop'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_OverloadStop'(Val, [<<48>>]);
'enc_overloadStop'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_overloadStop'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_overloadStop'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_OverloadStop'(Tlv, [16]);
'dec_overloadStop'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_overloadStop'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  overloadStart
%%================================
'enc_overloadStart'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_OverloadStart'(Val, [<<48>>]);
'enc_overloadStart'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_overloadStart'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_overloadStart'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_OverloadStart'(Tlv, [16]);
'dec_overloadStart'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_overloadStart'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  locationReport
%%================================
'enc_locationReport'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_LocationReport'(Val, [<<48>>]);
'enc_locationReport'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_locationReport'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_locationReport'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_LocationReport'(Tlv, [16]);
'dec_locationReport'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_locationReport'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  locationReportingFailureIndication
%%================================
'enc_locationReportingFailureIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_LocationReportingFailureIndication'(Val, [<<48>>]);
'enc_locationReportingFailureIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_locationReportingFailureIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_locationReportingFailureIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_LocationReportingFailureIndication'(Tlv, [16]);
'dec_locationReportingFailureIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_locationReportingFailureIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  locationReportingControl
%%================================
'enc_locationReportingControl'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_LocationReportingControl'(Val, [<<48>>]);
'enc_locationReportingControl'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_locationReportingControl'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_locationReportingControl'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_LocationReportingControl'(Tlv, [16]);
'dec_locationReportingControl'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_locationReportingControl'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  cellTrafficTrace
%%================================
'enc_cellTrafficTrace'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_CellTrafficTrace'(Val, [<<48>>]);
'enc_cellTrafficTrace'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_cellTrafficTrace'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_cellTrafficTrace'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_CellTrafficTrace'(Tlv, [16]);
'dec_cellTrafficTrace'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_cellTrafficTrace'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  traceFailureIndication
%%================================
'enc_traceFailureIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_TraceFailureIndication'(Val, [<<48>>]);
'enc_traceFailureIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_traceFailureIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_traceFailureIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_TraceFailureIndication'(Tlv, [16]);
'dec_traceFailureIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_traceFailureIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  traceStart
%%================================
'enc_traceStart'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_TraceStart'(Val, [<<48>>]);
'enc_traceStart'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_traceStart'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_traceStart'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_TraceStart'(Tlv, [16]);
'dec_traceStart'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_traceStart'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  deactivateTrace
%%================================
'enc_deactivateTrace'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_DeactivateTrace'(Val, [<<48>>]);
'enc_deactivateTrace'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_deactivateTrace'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_deactivateTrace'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_DeactivateTrace'(Tlv, [16]);
'dec_deactivateTrace'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_deactivateTrace'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  mMEStatusTransfer
%%================================
'enc_mMEStatusTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_MMEStatusTransfer'(Val, [<<48>>]);
'enc_mMEStatusTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_mMEStatusTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_mMEStatusTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEStatusTransfer'(Tlv, [16]);
'dec_mMEStatusTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_mMEStatusTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  eNBStatusTransfer
%%================================
'enc_eNBStatusTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ENBStatusTransfer'(Val, [<<48>>]);
'enc_eNBStatusTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_eNBStatusTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_eNBStatusTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBStatusTransfer'(Tlv, [16]);
'dec_eNBStatusTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_eNBStatusTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uEContextRelease
%%================================
'enc_uEContextRelease'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UEContextReleaseCommand'(Val, [<<48>>]);
'enc_uEContextRelease'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_UEContextReleaseComplete'(Val, [<<48>>]);
'enc_uEContextRelease'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uEContextRelease'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextReleaseCommand'(Tlv, [16]);
'dec_uEContextRelease'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextReleaseComplete'(Tlv, [16]);
'dec_uEContextRelease'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uECapabilityInfoIndication
%%================================
'enc_uECapabilityInfoIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UECapabilityInfoIndication'(Val, [<<48>>]);
'enc_uECapabilityInfoIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_uECapabilityInfoIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uECapabilityInfoIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UECapabilityInfoIndication'(Tlv, [16]);
'dec_uECapabilityInfoIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_uECapabilityInfoIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uEContextModification
%%================================
'enc_uEContextModification'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UEContextModificationRequest'(Val, [<<48>>]);
'enc_uEContextModification'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_UEContextModificationResponse'(Val, [<<48>>]);
'enc_uEContextModification'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_UEContextModificationFailure'(Val, [<<48>>]).


'dec_uEContextModification'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextModificationRequest'(Tlv, [16]);
'dec_uEContextModification'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextModificationResponse'(Tlv, [16]);
'dec_uEContextModification'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextModificationFailure'(Tlv, [16]).




%%================================
%%  uplinkS1cdma2000tunneling
%%================================
'enc_uplinkS1cdma2000tunneling'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UplinkS1cdma2000tunneling'(Val, [<<48>>]);
'enc_uplinkS1cdma2000tunneling'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_uplinkS1cdma2000tunneling'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uplinkS1cdma2000tunneling'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UplinkS1cdma2000tunneling'(Tlv, [16]);
'dec_uplinkS1cdma2000tunneling'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_uplinkS1cdma2000tunneling'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  downlinkS1cdma2000tunneling
%%================================
'enc_downlinkS1cdma2000tunneling'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_DownlinkS1cdma2000tunneling'(Val, [<<48>>]);
'enc_downlinkS1cdma2000tunneling'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_downlinkS1cdma2000tunneling'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_downlinkS1cdma2000tunneling'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_DownlinkS1cdma2000tunneling'(Tlv, [16]);
'dec_downlinkS1cdma2000tunneling'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_downlinkS1cdma2000tunneling'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  mMEConfigurationUpdate
%%================================
'enc_mMEConfigurationUpdate'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_MMEConfigurationUpdate'(Val, [<<48>>]);
'enc_mMEConfigurationUpdate'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_MMEConfigurationUpdateAcknowledge'(Val, [<<48>>]);
'enc_mMEConfigurationUpdate'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_MMEConfigurationUpdateFailure'(Val, [<<48>>]).


'dec_mMEConfigurationUpdate'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEConfigurationUpdate'(Tlv, [16]);
'dec_mMEConfigurationUpdate'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEConfigurationUpdateAcknowledge'(Tlv, [16]);
'dec_mMEConfigurationUpdate'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_MMEConfigurationUpdateFailure'(Tlv, [16]).




%%================================
%%  eNBConfigurationUpdate
%%================================
'enc_eNBConfigurationUpdate'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdate'(Val, [<<48>>]);
'enc_eNBConfigurationUpdate'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdateAcknowledge'(Val, [<<48>>]);
'enc_eNBConfigurationUpdate'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdateFailure'(Val, [<<48>>]).


'dec_eNBConfigurationUpdate'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdate'(Tlv, [16]);
'dec_eNBConfigurationUpdate'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdateAcknowledge'(Tlv, [16]);
'dec_eNBConfigurationUpdate'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdateFailure'(Tlv, [16]).




%%================================
%%  s1Setup
%%================================
'enc_s1Setup'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_S1SetupRequest'(Val, [<<48>>]);
'enc_s1Setup'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_S1SetupResponse'(Val, [<<48>>]);
'enc_s1Setup'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_S1SetupFailure'(Val, [<<48>>]).


'dec_s1Setup'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_S1SetupRequest'(Tlv, [16]);
'dec_s1Setup'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_S1SetupResponse'(Tlv, [16]);
'dec_s1Setup'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_S1SetupFailure'(Tlv, [16]).




%%================================
%%  errorIndication
%%================================
'enc_errorIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ErrorIndication'(Val, [<<48>>]);
'enc_errorIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_errorIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_errorIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ErrorIndication'(Tlv, [16]);
'dec_errorIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_errorIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  reset
%%================================
'enc_reset'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_Reset'(Val, [<<48>>]);
'enc_reset'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ResetAcknowledge'(Val, [<<48>>]);
'enc_reset'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_reset'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_Reset'(Tlv, [16]);
'dec_reset'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResetAcknowledge'(Tlv, [16]);
'dec_reset'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  handoverCancel
%%================================
'enc_handoverCancel'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverCancel'(Val, [<<48>>]);
'enc_handoverCancel'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverCancelAcknowledge'(Val, [<<48>>]);
'enc_handoverCancel'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_handoverCancel'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverCancel'(Tlv, [16]);
'dec_handoverCancel'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverCancelAcknowledge'(Tlv, [16]);
'dec_handoverCancel'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  nASNonDeliveryIndication
%%================================
'enc_nASNonDeliveryIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_NASNonDeliveryIndication'(Val, [<<48>>]);
'enc_nASNonDeliveryIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_nASNonDeliveryIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_nASNonDeliveryIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_NASNonDeliveryIndication'(Tlv, [16]);
'dec_nASNonDeliveryIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_nASNonDeliveryIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uplinkNASTransport
%%================================
'enc_uplinkNASTransport'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UplinkNASTransport'(Val, [<<48>>]);
'enc_uplinkNASTransport'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_uplinkNASTransport'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uplinkNASTransport'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UplinkNASTransport'(Tlv, [16]);
'dec_uplinkNASTransport'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_uplinkNASTransport'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  initialUEMessage
%%================================
'enc_initialUEMessage'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_InitialUEMessage'(Val, [<<48>>]);
'enc_initialUEMessage'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_initialUEMessage'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_initialUEMessage'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_InitialUEMessage'(Tlv, [16]);
'dec_initialUEMessage'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_initialUEMessage'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  downlinkNASTransport
%%================================
'enc_downlinkNASTransport'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_DownlinkNASTransport'(Val, [<<48>>]);
'enc_downlinkNASTransport'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_downlinkNASTransport'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_downlinkNASTransport'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_DownlinkNASTransport'(Tlv, [16]);
'dec_downlinkNASTransport'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_downlinkNASTransport'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  paging
%%================================
'enc_paging'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_Paging'(Val, [<<48>>]);
'enc_paging'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_paging'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_paging'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_Paging'(Tlv, [16]);
'dec_paging'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_paging'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uEContextReleaseRequest
%%================================
'enc_uEContextReleaseRequest'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UEContextReleaseRequest'(Val, [<<48>>]);
'enc_uEContextReleaseRequest'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_uEContextReleaseRequest'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uEContextReleaseRequest'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextReleaseRequest'(Tlv, [16]);
'dec_uEContextReleaseRequest'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_uEContextReleaseRequest'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  initialContextSetup
%%================================
'enc_initialContextSetup'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_InitialContextSetupRequest'(Val, [<<48>>]);
'enc_initialContextSetup'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_InitialContextSetupResponse'(Val, [<<48>>]);
'enc_initialContextSetup'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_InitialContextSetupFailure'(Val, [<<48>>]).


'dec_initialContextSetup'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_InitialContextSetupRequest'(Tlv, [16]);
'dec_initialContextSetup'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_InitialContextSetupResponse'(Tlv, [16]);
'dec_initialContextSetup'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_InitialContextSetupFailure'(Tlv, [16]).




%%================================
%%  e-RABReleaseIndication
%%================================
'enc_e-RABReleaseIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_E-RABReleaseIndication'(Val, [<<48>>]);
'enc_e-RABReleaseIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_e-RABReleaseIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_e-RABReleaseIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABReleaseIndication'(Tlv, [16]);
'dec_e-RABReleaseIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_e-RABReleaseIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  e-RABRelease
%%================================
'enc_e-RABRelease'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_E-RABReleaseCommand'(Val, [<<48>>]);
'enc_e-RABRelease'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_E-RABReleaseResponse'(Val, [<<48>>]);
'enc_e-RABRelease'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_e-RABRelease'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABReleaseCommand'(Tlv, [16]);
'dec_e-RABRelease'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABReleaseResponse'(Tlv, [16]);
'dec_e-RABRelease'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  e-RABModify
%%================================
'enc_e-RABModify'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_E-RABModifyRequest'(Val, [<<48>>]);
'enc_e-RABModify'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_E-RABModifyResponse'(Val, [<<48>>]);
'enc_e-RABModify'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_e-RABModify'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABModifyRequest'(Tlv, [16]);
'dec_e-RABModify'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABModifyResponse'(Tlv, [16]);
'dec_e-RABModify'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  e-RABSetup
%%================================
'enc_e-RABSetup'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_E-RABSetupRequest'(Val, [<<48>>]);
'enc_e-RABSetup'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_E-RABSetupResponse'(Val, [<<48>>]);
'enc_e-RABSetup'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_e-RABSetup'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABSetupRequest'(Tlv, [16]);
'dec_e-RABSetup'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_E-RABSetupResponse'(Tlv, [16]);
'dec_e-RABSetup'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  pathSwitchRequest
%%================================
'enc_pathSwitchRequest'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_PathSwitchRequest'(Val, [<<48>>]);
'enc_pathSwitchRequest'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_PathSwitchRequestAcknowledge'(Val, [<<48>>]);
'enc_pathSwitchRequest'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_PathSwitchRequestFailure'(Val, [<<48>>]).


'dec_pathSwitchRequest'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_PathSwitchRequest'(Tlv, [16]);
'dec_pathSwitchRequest'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_PathSwitchRequestAcknowledge'(Tlv, [16]);
'dec_pathSwitchRequest'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_PathSwitchRequestFailure'(Tlv, [16]).




%%================================
%%  handoverNotification
%%================================
'enc_handoverNotification'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverNotify'(Val, [<<48>>]);
'enc_handoverNotification'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_handoverNotification'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_handoverNotification'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverNotify'(Tlv, [16]);
'dec_handoverNotification'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_handoverNotification'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  handoverResourceAllocation
%%================================
'enc_handoverResourceAllocation'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverRequest'(Val, [<<48>>]);
'enc_handoverResourceAllocation'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverRequestAcknowledge'(Val, [<<48>>]);
'enc_handoverResourceAllocation'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverFailure'(Val, [<<48>>]).


'dec_handoverResourceAllocation'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverRequest'(Tlv, [16]);
'dec_handoverResourceAllocation'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverRequestAcknowledge'(Tlv, [16]);
'dec_handoverResourceAllocation'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverFailure'(Tlv, [16]).




%%================================
%%  handoverPreparation
%%================================
'enc_handoverPreparation'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverRequired'(Val, [<<48>>]);
'enc_handoverPreparation'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverCommand'(Val, [<<48>>]);
'enc_handoverPreparation'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverPreparationFailure'(Val, [<<48>>]).


'dec_handoverPreparation'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverRequired'(Tlv, [16]);
'dec_handoverPreparation'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverCommand'(Tlv, [16]);
'dec_handoverPreparation'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverPreparationFailure'(Tlv, [16]).




%%================================
%%  S1AP-ELEMENTARY-PROCEDURES-CLASS-2
%%================================
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(42) ->
    fun 'enc_cellTrafficTrace'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(26) ->
    fun 'enc_deactivateTrace'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(11) ->
    fun 'enc_downlinkNASTransport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(19) ->
    fun 'enc_downlinkS1cdma2000tunneling'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(8) ->
    fun 'enc_e-RABReleaseIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(40) ->
    fun 'enc_eNBConfigurationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(37) ->
    fun 'enc_eNBDirectInformationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(24) ->
    fun 'enc_eNBStatusTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(15) ->
    fun 'enc_errorIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(2) ->
    fun 'enc_handoverNotification'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(12) ->
    fun 'enc_initialUEMessage'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(33) ->
    fun 'enc_locationReport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(31) ->
    fun 'enc_locationReportingControl'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(32) ->
    fun 'enc_locationReportingFailureIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(41) ->
    fun 'enc_mMEConfigurationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(38) ->
    fun 'enc_mMEDirectInformationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(25) ->
    fun 'enc_mMEStatusTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(16) ->
    fun 'enc_nASNonDeliveryIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(34) ->
    fun 'enc_overloadStart'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(35) ->
    fun 'enc_overloadStop'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(10) ->
    fun 'enc_paging'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(39) ->
    fun 'enc_privateMessage'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(28) ->
    fun 'enc_traceFailureIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(27) ->
    fun 'enc_traceStart'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(22) ->
    fun 'enc_uECapabilityInfoIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(18) ->
    fun 'enc_uEContextReleaseRequest'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(13) ->
    fun 'enc_uplinkNASTransport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(20) ->
    fun 'enc_uplinkS1cdma2000tunneling'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(42) ->
    fun 'dec_cellTrafficTrace'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(26) ->
    fun 'dec_deactivateTrace'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(11) ->
    fun 'dec_downlinkNASTransport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(19) ->
    fun 'dec_downlinkS1cdma2000tunneling'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(8) ->
    fun 'dec_e-RABReleaseIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(40) ->
    fun 'dec_eNBConfigurationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(37) ->
    fun 'dec_eNBDirectInformationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(24) ->
    fun 'dec_eNBStatusTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(15) ->
    fun 'dec_errorIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(2) ->
    fun 'dec_handoverNotification'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(12) ->
    fun 'dec_initialUEMessage'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(33) ->
    fun 'dec_locationReport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(31) ->
    fun 'dec_locationReportingControl'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(32) ->
    fun 'dec_locationReportingFailureIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(41) ->
    fun 'dec_mMEConfigurationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(38) ->
    fun 'dec_mMEDirectInformationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(25) ->
    fun 'dec_mMEStatusTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(16) ->
    fun 'dec_nASNonDeliveryIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(34) ->
    fun 'dec_overloadStart'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(35) ->
    fun 'dec_overloadStop'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(10) ->
    fun 'dec_paging'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(39) ->
    fun 'dec_privateMessage'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(28) ->
    fun 'dec_traceFailureIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(27) ->
    fun 'dec_traceStart'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(22) ->
    fun 'dec_uECapabilityInfoIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(18) ->
    fun 'dec_uEContextReleaseRequest'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(13) ->
    fun 'dec_uplinkNASTransport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(20) ->
    fun 'dec_uplinkS1cdma2000tunneling'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-2'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1AP-ELEMENTARY-PROCEDURES-CLASS-1
%%================================
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(6) ->
    fun 'enc_e-RABModify'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(7) ->
    fun 'enc_e-RABRelease'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(5) ->
    fun 'enc_e-RABSetup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(29) ->
    fun 'enc_eNBConfigurationUpdate'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(4) ->
    fun 'enc_handoverCancel'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(0) ->
    fun 'enc_handoverPreparation'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(1) ->
    fun 'enc_handoverResourceAllocation'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(9) ->
    fun 'enc_initialContextSetup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(30) ->
    fun 'enc_mMEConfigurationUpdate'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(3) ->
    fun 'enc_pathSwitchRequest'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(14) ->
    fun 'enc_reset'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(17) ->
    fun 'enc_s1Setup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(21) ->
    fun 'enc_uEContextModification'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(23) ->
    fun 'enc_uEContextRelease'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(36) ->
    fun 'enc_writeReplaceWarning'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(6) ->
    fun 'dec_e-RABModify'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(7) ->
    fun 'dec_e-RABRelease'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(5) ->
    fun 'dec_e-RABSetup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(29) ->
    fun 'dec_eNBConfigurationUpdate'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(4) ->
    fun 'dec_handoverCancel'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(0) ->
    fun 'dec_handoverPreparation'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(1) ->
    fun 'dec_handoverResourceAllocation'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(9) ->
    fun 'dec_initialContextSetup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(30) ->
    fun 'dec_mMEConfigurationUpdate'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(3) ->
    fun 'dec_pathSwitchRequest'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(14) ->
    fun 'dec_reset'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(17) ->
    fun 'dec_s1Setup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(21) ->
    fun 'dec_uEContextModification'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(23) ->
    fun 'dec_uEContextRelease'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(36) ->
    fun 'dec_writeReplaceWarning'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES-CLASS-1'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1AP-ELEMENTARY-PROCEDURES
%%================================
'getenc_S1AP-ELEMENTARY-PROCEDURES'(42) ->
    fun 'enc_cellTrafficTrace'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(26) ->
    fun 'enc_deactivateTrace'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(11) ->
    fun 'enc_downlinkNASTransport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(19) ->
    fun 'enc_downlinkS1cdma2000tunneling'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(6) ->
    fun 'enc_e-RABModify'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(7) ->
    fun 'enc_e-RABRelease'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(8) ->
    fun 'enc_e-RABReleaseIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(5) ->
    fun 'enc_e-RABSetup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(40) ->
    fun 'enc_eNBConfigurationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(29) ->
    fun 'enc_eNBConfigurationUpdate'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(37) ->
    fun 'enc_eNBDirectInformationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(24) ->
    fun 'enc_eNBStatusTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(15) ->
    fun 'enc_errorIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(4) ->
    fun 'enc_handoverCancel'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(2) ->
    fun 'enc_handoverNotification'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(0) ->
    fun 'enc_handoverPreparation'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(1) ->
    fun 'enc_handoverResourceAllocation'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(9) ->
    fun 'enc_initialContextSetup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(12) ->
    fun 'enc_initialUEMessage'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(33) ->
    fun 'enc_locationReport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(31) ->
    fun 'enc_locationReportingControl'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(32) ->
    fun 'enc_locationReportingFailureIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(41) ->
    fun 'enc_mMEConfigurationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(30) ->
    fun 'enc_mMEConfigurationUpdate'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(38) ->
    fun 'enc_mMEDirectInformationTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(25) ->
    fun 'enc_mMEStatusTransfer'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(16) ->
    fun 'enc_nASNonDeliveryIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(34) ->
    fun 'enc_overloadStart'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(35) ->
    fun 'enc_overloadStop'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(10) ->
    fun 'enc_paging'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(3) ->
    fun 'enc_pathSwitchRequest'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(39) ->
    fun 'enc_privateMessage'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(14) ->
    fun 'enc_reset'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(17) ->
    fun 'enc_s1Setup'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(28) ->
    fun 'enc_traceFailureIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(27) ->
    fun 'enc_traceStart'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(22) ->
    fun 'enc_uECapabilityInfoIndication'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(21) ->
    fun 'enc_uEContextModification'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(23) ->
    fun 'enc_uEContextRelease'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(18) ->
    fun 'enc_uEContextReleaseRequest'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(13) ->
    fun 'enc_uplinkNASTransport'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(20) ->
    fun 'enc_uplinkS1cdma2000tunneling'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(36) ->
    fun 'enc_writeReplaceWarning'/3;
'getenc_S1AP-ELEMENTARY-PROCEDURES'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1AP-ELEMENTARY-PROCEDURES'(42) ->
    fun 'dec_cellTrafficTrace'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(26) ->
    fun 'dec_deactivateTrace'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(11) ->
    fun 'dec_downlinkNASTransport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(19) ->
    fun 'dec_downlinkS1cdma2000tunneling'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(6) ->
    fun 'dec_e-RABModify'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(7) ->
    fun 'dec_e-RABRelease'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(8) ->
    fun 'dec_e-RABReleaseIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(5) ->
    fun 'dec_e-RABSetup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(40) ->
    fun 'dec_eNBConfigurationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(29) ->
    fun 'dec_eNBConfigurationUpdate'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(37) ->
    fun 'dec_eNBDirectInformationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(24) ->
    fun 'dec_eNBStatusTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(15) ->
    fun 'dec_errorIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(4) ->
    fun 'dec_handoverCancel'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(2) ->
    fun 'dec_handoverNotification'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(0) ->
    fun 'dec_handoverPreparation'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(1) ->
    fun 'dec_handoverResourceAllocation'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(9) ->
    fun 'dec_initialContextSetup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(12) ->
    fun 'dec_initialUEMessage'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(33) ->
    fun 'dec_locationReport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(31) ->
    fun 'dec_locationReportingControl'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(32) ->
    fun 'dec_locationReportingFailureIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(41) ->
    fun 'dec_mMEConfigurationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(30) ->
    fun 'dec_mMEConfigurationUpdate'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(38) ->
    fun 'dec_mMEDirectInformationTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(25) ->
    fun 'dec_mMEStatusTransfer'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(16) ->
    fun 'dec_nASNonDeliveryIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(34) ->
    fun 'dec_overloadStart'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(35) ->
    fun 'dec_overloadStop'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(10) ->
    fun 'dec_paging'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(3) ->
    fun 'dec_pathSwitchRequest'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(39) ->
    fun 'dec_privateMessage'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(14) ->
    fun 'dec_reset'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(17) ->
    fun 'dec_s1Setup'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(28) ->
    fun 'dec_traceFailureIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(27) ->
    fun 'dec_traceStart'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(22) ->
    fun 'dec_uECapabilityInfoIndication'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(21) ->
    fun 'dec_uEContextModification'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(23) ->
    fun 'dec_uEContextRelease'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(18) ->
    fun 'dec_uEContextReleaseRequest'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(13) ->
    fun 'dec_uplinkNASTransport'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(20) ->
    fun 'dec_uplinkS1cdma2000tunneling'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(36) ->
    fun 'dec_writeReplaceWarning'/3;
'getdec_S1AP-ELEMENTARY-PROCEDURES'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2TNLConfigurationInfo-ExtIEs
%%================================
'getenc_X2TNLConfigurationInfo-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2TNLConfigurationInfo-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UESecurityCapabilities-ExtIEs
%%================================
'getenc_UESecurityCapabilities-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UESecurityCapabilities-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UE-associatedLogicalS1-ConnectionItemExtIEs
%%================================
'getenc_UE-associatedLogicalS1-ConnectionItemExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UE-associatedLogicalS1-ConnectionItemExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UE-S1AP-ID-pair-ExtIEs
%%================================
'getenc_UE-S1AP-ID-pair-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UE-S1AP-ID-pair-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEAggregate-MaximumBitrates-ExtIEs
%%================================
'getenc_UEAggregate-MaximumBitrates-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEAggregate-MaximumBitrates-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TraceActivation-ExtIEs
%%================================
'getenc_TraceActivation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TraceActivation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TargeteNB-ToSourceeNB-TransparentContainer-ExtIEs
%%================================
'getenc_TargeteNB-ToSourceeNB-TransparentContainer-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TargeteNB-ToSourceeNB-TransparentContainer-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TargetRNC-ID-ExtIEs
%%================================
'getenc_TargetRNC-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TargetRNC-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TargeteNB-ID-ExtIEs
%%================================
'getenc_TargeteNB-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TargeteNB-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CompletedCellinTAI-Item-ExtIEs
%%================================
'getenc_CompletedCellinTAI-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CompletedCellinTAI-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TAI-Broadcast-Item-ExtIEs
%%================================
'getenc_TAI-Broadcast-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TAI-Broadcast-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TAI-ExtIEs
%%================================
'getenc_TAI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TAI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S-TMSI-ExtIEs
%%================================
'getenc_S-TMSI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S-TMSI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SupportedTAs-Item-ExtIEs
%%================================
'getenc_SupportedTAs-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SupportedTAs-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ServedGUMMEIsItem-ExtIEs
%%================================
'getenc_ServedGUMMEIsItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ServedGUMMEIsItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SourceeNB-ToTargeteNB-TransparentContainer-ExtIEs
%%================================
'getenc_SourceeNB-ToTargeteNB-TransparentContainer-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SourceeNB-ToTargeteNB-TransparentContainer-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SourceeNB-ID-ExtIEs
%%================================
'getenc_SourceeNB-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SourceeNB-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SONConfigurationTransfer-ExtIEs
%%================================
'getenc_SONConfigurationTransfer-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SONConfigurationTransfer-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SONInformationReply-ExtIEs
%%================================
'getenc_SONInformationReply-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SONInformationReply-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SecurityContext-ExtIEs
%%================================
'getenc_SecurityContext-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SecurityContext-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  RIMTransfer-ExtIEs
%%================================
'getenc_RIMTransfer-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_RIMTransfer-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  RequestType-ExtIEs
%%================================
'getenc_RequestType-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_RequestType-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LastVisitedEUTRANCellInformation-ExtIEs
%%================================
'getenc_LastVisitedEUTRANCellInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LastVisitedEUTRANCellInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LAI-ExtIEs
%%================================
'getenc_LAI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LAI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRestrictionList-ExtIEs
%%================================
'getenc_HandoverRestrictionList-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRestrictionList-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GUMMEI-ExtIEs
%%================================
'getenc_GUMMEI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GUMMEI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GBR-QosInformation-ExtIEs
%%================================
'getenc_GBR-QosInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GBR-QosInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ForbiddenLAs-Item-ExtIEs
%%================================
'getenc_ForbiddenLAs-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ForbiddenLAs-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ForbiddenTAs-Item-ExtIEs
%%================================
'getenc_ForbiddenTAs-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ForbiddenTAs-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  EUTRAN-CGI-ExtIEs
%%================================
'getenc_EUTRAN-CGI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_EUTRAN-CGI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABQoSParameters-ExtIEs
%%================================
'getenc_E-RABQoSParameters-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABQoSParameters-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABItem-ExtIEs
%%================================
'getenc_E-RABItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABItemIEs
%%================================
'getenc_E-RABItemIEs'(35) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABItem'(Val)
      end
   end;
'getenc_E-RABItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABItemIEs'(35) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABItem'(Bytes)
      end
   end;
'getdec_E-RABItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABInformationListItem-ExtIEs
%%================================
'getenc_E-RABInformationListItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABInformationListItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABInformationListIEs
%%================================
'getenc_E-RABInformationListIEs'(78) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABInformationListItem'(Val)
      end
   end;
'getenc_E-RABInformationListIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABInformationListIEs'(78) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABInformationListItem'(Bytes)
      end
   end;
'getdec_E-RABInformationListIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENB-StatusTransfer-TransparentContainer-ExtIEs
%%================================
'getenc_ENB-StatusTransfer-TransparentContainer-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENB-StatusTransfer-TransparentContainer-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GlobalENB-ID-ExtIEs
%%================================
'getenc_GlobalENB-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GlobalENB-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GERAN-Cell-ID-ExtIEs
%%================================
'getenc_GERAN-Cell-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GERAN-Cell-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CompletedCellinEAI-Item-ExtIEs
%%================================
'getenc_CompletedCellinEAI-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CompletedCellinEAI-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  EmergencyAreaID-Broadcast-Item-ExtIEs
%%================================
'getenc_EmergencyAreaID-Broadcast-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_EmergencyAreaID-Broadcast-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CriticalityDiagnostics-IE-Item-ExtIEs
%%================================
'getenc_CriticalityDiagnostics-IE-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CriticalityDiagnostics-IE-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CriticalityDiagnostics-ExtIEs
%%================================
'getenc_CriticalityDiagnostics-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CriticalityDiagnostics-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  COUNTvalue-ExtIEs
%%================================
'getenc_COUNTvalue-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_COUNTvalue-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CSG-IdList-Item-ExtIEs
%%================================
'getenc_CSG-IdList-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CSG-IdList-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CGI-ExtIEs
%%================================
'getenc_CGI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CGI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellType-ExtIEs
%%================================
'getenc_CellType-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellType-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  Cdma2000OneXSRVCCInfo-ExtIEs
%%================================
'getenc_Cdma2000OneXSRVCCInfo-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_Cdma2000OneXSRVCCInfo-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellID-Broadcast-Item-ExtIEs
%%================================
'getenc_CellID-Broadcast-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellID-Broadcast-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  Bearers-SubjectToStatusTransfer-ItemExtIEs
%%================================
'getenc_Bearers-SubjectToStatusTransfer-ItemExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_Bearers-SubjectToStatusTransfer-ItemExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  Bearers-SubjectToStatusTransfer-ItemIEs
%%================================
'getenc_Bearers-SubjectToStatusTransfer-ItemIEs'(89) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Bearers-SubjectToStatusTransfer-Item'(Val)
      end
   end;
'getenc_Bearers-SubjectToStatusTransfer-ItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_Bearers-SubjectToStatusTransfer-ItemIEs'(89) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Bearers-SubjectToStatusTransfer-Item'(Bytes)
      end
   end;
'getdec_Bearers-SubjectToStatusTransfer-ItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  AllocationAndRetentionPriority-ExtIEs
%%================================
'getenc_AllocationAndRetentionPriority-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_AllocationAndRetentionPriority-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEConfigurationTransferIEs
%%================================
'getenc_MMEConfigurationTransferIEs'(130) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SONConfigurationTransfer'(Val)
      end
   end;
'getenc_MMEConfigurationTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEConfigurationTransferIEs'(130) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SONConfigurationTransfer'(Bytes)
      end
   end;
'getdec_MMEConfigurationTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationTransferIEs
%%================================
'getenc_ENBConfigurationTransferIEs'(129) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SONConfigurationTransfer'(Val)
      end
   end;
'getenc_ENBConfigurationTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationTransferIEs'(129) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SONConfigurationTransfer'(Bytes)
      end
   end;
'getdec_ENBConfigurationTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEDirectInformationTransferIEs
%%================================
'getenc_MMEDirectInformationTransferIEs'(122) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Inter-SystemInformationTransferType'(Val)
      end
   end;
'getenc_MMEDirectInformationTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEDirectInformationTransferIEs'(122) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Inter-SystemInformationTransferType'(Bytes)
      end
   end;
'getdec_MMEDirectInformationTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBDirectInformationTransferIEs
%%================================
'getenc_ENBDirectInformationTransferIEs'(121) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Inter-SystemInformationTransferType'(Val)
      end
   end;
'getenc_ENBDirectInformationTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBDirectInformationTransferIEs'(121) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Inter-SystemInformationTransferType'(Bytes)
      end
   end;
'getdec_ENBDirectInformationTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  WriteReplaceWarningResponseIEs
%%================================
'getenc_WriteReplaceWarningResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_WriteReplaceWarningResponseIEs'(111) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MessageIdentifier'(Val)
      end
   end;
'getenc_WriteReplaceWarningResponseIEs'(112) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SerialNumber'(Val)
      end
   end;
'getenc_WriteReplaceWarningResponseIEs'(120) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_BroadcastCompletedAreaList'(Val)
      end
   end;
'getenc_WriteReplaceWarningResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_WriteReplaceWarningResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningResponseIEs'(111) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MessageIdentifier'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningResponseIEs'(112) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SerialNumber'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningResponseIEs'(120) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_BroadcastCompletedAreaList'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  WriteReplaceWarningRequestIEs
%%================================
'getenc_WriteReplaceWarningRequestIEs'(111) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MessageIdentifier'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(112) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SerialNumber'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(113) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningAreaList'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(114) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RepetitionPeriod'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(115) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NumberofBroadcastRequest'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(116) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningType'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(117) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningSecurityInfo'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(118) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_DataCodingScheme'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(119) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningMessageContents'(Val)
      end
   end;
'getenc_WriteReplaceWarningRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_WriteReplaceWarningRequestIEs'(111) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MessageIdentifier'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(112) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SerialNumber'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(113) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningAreaList'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(114) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RepetitionPeriod'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(115) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NumberofBroadcastRequest'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(116) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningType'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(117) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningSecurityInfo'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(118) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_DataCodingScheme'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(119) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningMessageContents'(Bytes)
      end
   end;
'getdec_WriteReplaceWarningRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  OverloadStopIEs
%%================================
'getenc_OverloadStopIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_OverloadStopIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  OverloadStartIEs
%%================================
'getenc_OverloadStartIEs'(101) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_OverloadResponse'(Val)
      end
   end;
'getenc_OverloadStartIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_OverloadStartIEs'(101) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_OverloadResponse'(Bytes)
      end
   end;
'getdec_OverloadStartIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LocationReportIEs
%%================================
'getenc_LocationReportIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportIEs'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_LocationReportIEs'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_LocationReportIEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_LocationReportIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LocationReportIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportIEs'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_LocationReportIEs'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_LocationReportIEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_LocationReportIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LocationReportingFailureIndicationIEs
%%================================
'getenc_LocationReportingFailureIndicationIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportingFailureIndicationIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_LocationReportingFailureIndicationIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportingFailureIndicationIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LocationReportingFailureIndicationIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportingFailureIndicationIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_LocationReportingFailureIndicationIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportingFailureIndicationIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LocationReportingControlIEs
%%================================
'getenc_LocationReportingControlIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportingControlIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_LocationReportingControlIEs'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_LocationReportingControlIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LocationReportingControlIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportingControlIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_LocationReportingControlIEs'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_LocationReportingControlIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellTrafficTraceIEs
%%================================
'getenc_CellTrafficTraceIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_CellTrafficTraceIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_CellTrafficTraceIEs'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_CellTrafficTraceIEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_CellTrafficTraceIEs'(131) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TransportLayerAddress'(Val)
      end
   end;
'getenc_CellTrafficTraceIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellTrafficTraceIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_CellTrafficTraceIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_CellTrafficTraceIEs'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_CellTrafficTraceIEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_CellTrafficTraceIEs'(131) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TransportLayerAddress'(Bytes)
      end
   end;
'getdec_CellTrafficTraceIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  DeactivateTraceIEs
%%================================
'getenc_DeactivateTraceIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DeactivateTraceIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DeactivateTraceIEs'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_DeactivateTraceIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_DeactivateTraceIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DeactivateTraceIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DeactivateTraceIEs'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_DeactivateTraceIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TraceFailureIndicationIEs
%%================================
'getenc_TraceFailureIndicationIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_TraceFailureIndicationIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_TraceFailureIndicationIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_TraceFailureIndicationIEs'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_TraceFailureIndicationIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TraceFailureIndicationIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_TraceFailureIndicationIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_TraceFailureIndicationIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_TraceFailureIndicationIEs'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_TraceFailureIndicationIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TraceStartIEs
%%================================
'getenc_TraceStartIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_TraceStartIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_TraceStartIEs'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_TraceStartIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TraceStartIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_TraceStartIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_TraceStartIEs'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_TraceStartIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEStatusTransferIEs
%%================================
'getenc_MMEStatusTransferIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_MMEStatusTransferIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_MMEStatusTransferIEs'(90) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-StatusTransfer-TransparentContainer'(Val)
      end
   end;
'getenc_MMEStatusTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEStatusTransferIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_MMEStatusTransferIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_MMEStatusTransferIEs'(90) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-StatusTransfer-TransparentContainer'(Bytes)
      end
   end;
'getdec_MMEStatusTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBStatusTransferIEs
%%================================
'getenc_ENBStatusTransferIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_ENBStatusTransferIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_ENBStatusTransferIEs'(90) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-StatusTransfer-TransparentContainer'(Val)
      end
   end;
'getenc_ENBStatusTransferIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBStatusTransferIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_ENBStatusTransferIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_ENBStatusTransferIEs'(90) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-StatusTransfer-TransparentContainer'(Bytes)
      end
   end;
'getdec_ENBStatusTransferIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UECapabilityInfoIndicationIEs
%%================================
'getenc_UECapabilityInfoIndicationIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UECapabilityInfoIndicationIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UECapabilityInfoIndicationIEs'(74) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UERadioCapability'(Val)
      end
   end;
'getenc_UECapabilityInfoIndicationIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UECapabilityInfoIndicationIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UECapabilityInfoIndicationIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UECapabilityInfoIndicationIEs'(74) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UERadioCapability'(Bytes)
      end
   end;
'getdec_UECapabilityInfoIndicationIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UplinkS1cdma2000tunnelingIEs
%%================================
'getenc_UplinkS1cdma2000tunnelingIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(70) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000PDU'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(71) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000RATType'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(72) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000SectorID'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(84) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000HORequiredIndication'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(97) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000OneXRAND'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(102) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000OneXSRVCCInfo'(Val)
      end
   end;
'getenc_UplinkS1cdma2000tunnelingIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UplinkS1cdma2000tunnelingIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(70) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000PDU'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(71) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000RATType'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(72) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000SectorID'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(84) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000HORequiredIndication'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(97) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000OneXRAND'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(102) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000OneXSRVCCInfo'(Bytes)
      end
   end;
'getdec_UplinkS1cdma2000tunnelingIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  DownlinkS1cdma2000tunnelingIEs
%%================================
'getenc_DownlinkS1cdma2000tunnelingIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSubjecttoDataForwardingList'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(70) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000PDU'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(71) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000RATType'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(83) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000HOStatus'(Val)
      end
   end;
'getenc_DownlinkS1cdma2000tunnelingIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_DownlinkS1cdma2000tunnelingIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSubjecttoDataForwardingList'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(70) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000PDU'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(71) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000RATType'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(83) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000HOStatus'(Bytes)
      end
   end;
'getdec_DownlinkS1cdma2000tunnelingIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEConfigurationUpdateFailureIEs
%%================================
'getenc_MMEConfigurationUpdateFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateFailureIEs'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEConfigurationUpdateFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateFailureIEs'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEConfigurationUpdateAcknowledgeIEs
%%================================
'getenc_MMEConfigurationUpdateAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEConfigurationUpdateAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  MMEConfigurationUpdateIEs
%%================================
'getenc_MMEConfigurationUpdateIEs'(61) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MMEname'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateIEs'(87) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RelativeMMECapacity'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateIEs'(105) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedGUMMEIs'(Val)
      end
   end;
'getenc_MMEConfigurationUpdateIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_MMEConfigurationUpdateIEs'(61) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MMEname'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateIEs'(87) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RelativeMMECapacity'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateIEs'(105) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedGUMMEIs'(Bytes)
      end
   end;
'getdec_MMEConfigurationUpdateIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdateFailureIEs
%%================================
'getenc_ENBConfigurationUpdateFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailureIEs'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdateFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailureIEs'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdateAcknowledgeIEs
%%================================
'getenc_ENBConfigurationUpdateAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdateAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdateIEs
%%================================
'getenc_ENBConfigurationUpdateIEs'(60) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENBname'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateIEs'(64) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SupportedTAs'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateIEs'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateIEs'(137) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdateIEs'(60) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENBname'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateIEs'(64) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SupportedTAs'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateIEs'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateIEs'(137) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1SetupFailureIEs
%%================================
'getenc_S1SetupFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_S1SetupFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_S1SetupFailureIEs'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_S1SetupFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1SetupFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_S1SetupFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_S1SetupFailureIEs'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_S1SetupFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1SetupResponseIEs
%%================================
'getenc_S1SetupResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_S1SetupResponseIEs'(61) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MMEname'(Val)
      end
   end;
'getenc_S1SetupResponseIEs'(87) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RelativeMMECapacity'(Val)
      end
   end;
'getenc_S1SetupResponseIEs'(105) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedGUMMEIs'(Val)
      end
   end;
'getenc_S1SetupResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1SetupResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_S1SetupResponseIEs'(61) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MMEname'(Bytes)
      end
   end;
'getdec_S1SetupResponseIEs'(87) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RelativeMMECapacity'(Bytes)
      end
   end;
'getdec_S1SetupResponseIEs'(105) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedGUMMEIs'(Bytes)
      end
   end;
'getdec_S1SetupResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1SetupRequestIEs
%%================================
'getenc_S1SetupRequestIEs'(59) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Global-ENB-ID'(Val)
      end
   end;
'getenc_S1SetupRequestIEs'(60) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENBname'(Val)
      end
   end;
'getenc_S1SetupRequestIEs'(64) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SupportedTAs'(Val)
      end
   end;
'getenc_S1SetupRequestIEs'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_S1SetupRequestIEs'(137) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_S1SetupRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1SetupRequestIEs'(59) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Global-ENB-ID'(Bytes)
      end
   end;
'getdec_S1SetupRequestIEs'(60) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENBname'(Bytes)
      end
   end;
'getdec_S1SetupRequestIEs'(64) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SupportedTAs'(Bytes)
      end
   end;
'getdec_S1SetupRequestIEs'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_S1SetupRequestIEs'(137) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_S1SetupRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ErrorIndicationIEs
%%================================
'getenc_ErrorIndicationIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_ErrorIndicationIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ErrorIndicationIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_ErrorIndicationIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ErrorIndicationIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ErrorIndicationIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_ErrorIndicationIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ErrorIndicationIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_ErrorIndicationIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ErrorIndicationIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UE-associatedLogicalS1-ConnectionItemResAck
%%================================
'getenc_UE-associatedLogicalS1-ConnectionItemResAck'(91) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionItem'(Val)
      end
   end;
'getenc_UE-associatedLogicalS1-ConnectionItemResAck'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UE-associatedLogicalS1-ConnectionItemResAck'(91) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes)
      end
   end;
'getdec_UE-associatedLogicalS1-ConnectionItemResAck'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResetAcknowledgeIEs
%%================================
'getenc_ResetAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ResetAcknowledgeIEs'(93) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val)
      end
   end;
'getenc_ResetAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResetAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ResetAcknowledgeIEs'(93) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes)
      end
   end;
'getdec_ResetAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UE-associatedLogicalS1-ConnectionItemRes
%%================================
'getenc_UE-associatedLogicalS1-ConnectionItemRes'(91) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionItem'(Val)
      end
   end;
'getenc_UE-associatedLogicalS1-ConnectionItemRes'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UE-associatedLogicalS1-ConnectionItemRes'(91) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes)
      end
   end;
'getdec_UE-associatedLogicalS1-ConnectionItemRes'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResetIEs
%%================================
'getenc_ResetIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ResetIEs'(92) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ResetType'(Val)
      end
   end;
'getenc_ResetIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResetIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ResetIEs'(92) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ResetType'(Bytes)
      end
   end;
'getdec_ResetIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  NASNonDeliveryIndication-IEs
%%================================
'getenc_NASNonDeliveryIndication-IEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_NASNonDeliveryIndication-IEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_NASNonDeliveryIndication-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_NASNonDeliveryIndication-IEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_NASNonDeliveryIndication-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_NASNonDeliveryIndication-IEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_NASNonDeliveryIndication-IEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_NASNonDeliveryIndication-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_NASNonDeliveryIndication-IEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_NASNonDeliveryIndication-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UplinkNASTransport-IEs
%%================================
'getenc_UplinkNASTransport-IEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UplinkNASTransport-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UplinkNASTransport-IEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_UplinkNASTransport-IEs'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_UplinkNASTransport-IEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_UplinkNASTransport-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UplinkNASTransport-IEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UplinkNASTransport-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UplinkNASTransport-IEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_UplinkNASTransport-IEs'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_UplinkNASTransport-IEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_UplinkNASTransport-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  InitialUEMessage-IEs
%%================================
'getenc_InitialUEMessage-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(75) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUMMEI'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(96) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_S-TMSI'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(127) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-Id'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(134) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RRC-Establishment-Cause'(Val)
      end
   end;
'getenc_InitialUEMessage-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_InitialUEMessage-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(75) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUMMEI'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(96) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_S-TMSI'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(127) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-Id'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(134) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RRC-Establishment-Cause'(Bytes)
      end
   end;
'getdec_InitialUEMessage-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  DownlinkNASTransport-IEs
%%================================
'getenc_DownlinkNASTransport-IEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DownlinkNASTransport-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_DownlinkNASTransport-IEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_DownlinkNASTransport-IEs'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_DownlinkNASTransport-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_DownlinkNASTransport-IEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DownlinkNASTransport-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_DownlinkNASTransport-IEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_DownlinkNASTransport-IEs'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_DownlinkNASTransport-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextModificationFailureIEs
%%================================
'getenc_UEContextModificationFailureIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_UEContextModificationFailureIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_UEContextModificationFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextModificationFailureIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_UEContextModificationFailureIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_UEContextModificationFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextModificationResponseIEs
%%================================
'getenc_UEContextModificationResponseIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationResponseIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_UEContextModificationResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextModificationResponseIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationResponseIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_UEContextModificationResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextModificationRequestIEs
%%================================
'getenc_UEContextModificationRequestIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(73) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityKey'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(106) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SubscriberProfileIDforRFP'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(108) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSFallbackIndicator'(Val)
      end
   end;
'getenc_UEContextModificationRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextModificationRequestIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(73) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityKey'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(106) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SubscriberProfileIDforRFP'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(108) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSFallbackIndicator'(Bytes)
      end
   end;
'getdec_UEContextModificationRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextReleaseComplete-IEs
%%================================
'getenc_UEContextReleaseComplete-IEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextReleaseComplete-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextReleaseComplete-IEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_UEContextReleaseComplete-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextReleaseComplete-IEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextReleaseComplete-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextReleaseComplete-IEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_UEContextReleaseComplete-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextReleaseCommand-IEs
%%================================
'getenc_UEContextReleaseCommand-IEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_UEContextReleaseCommand-IEs'(99) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-S1AP-IDs'(Val)
      end
   end;
'getenc_UEContextReleaseCommand-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextReleaseCommand-IEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_UEContextReleaseCommand-IEs'(99) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-S1AP-IDs'(Bytes)
      end
   end;
'getdec_UEContextReleaseCommand-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextReleaseRequest-IEs
%%================================
'getenc_UEContextReleaseRequest-IEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextReleaseRequest-IEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_UEContextReleaseRequest-IEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_UEContextReleaseRequest-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextReleaseRequest-IEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextReleaseRequest-IEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_UEContextReleaseRequest-IEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_UEContextReleaseRequest-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TAIItemExtIEs
%%================================
'getenc_TAIItemExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TAIItemExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TAIItemIEs
%%================================
'getenc_TAIItemIEs'(47) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAIItem'(Val)
      end
   end;
'getenc_TAIItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TAIItemIEs'(47) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAIItem'(Bytes)
      end
   end;
'getdec_TAIItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  PagingIEs
%%================================
'getenc_PagingIEs'(43) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEPagingID'(Val)
      end
   end;
'getenc_PagingIEs'(44) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_PagingIEs'(46) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAIList'(Val)
      end
   end;
'getenc_PagingIEs'(80) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEIdentityIndexValue'(Val)
      end
   end;
'getenc_PagingIEs'(109) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CNDomain'(Val)
      end
   end;
'getenc_PagingIEs'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_PagingIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_PagingIEs'(43) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEPagingID'(Bytes)
      end
   end;
'getdec_PagingIEs'(44) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_PagingIEs'(46) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAIList'(Bytes)
      end
   end;
'getdec_PagingIEs'(80) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEIdentityIndexValue'(Bytes)
      end
   end;
'getdec_PagingIEs'(109) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CNDomain'(Bytes)
      end
   end;
'getdec_PagingIEs'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_PagingIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  InitialContextSetupFailureIEs
%%================================
'getenc_InitialContextSetupFailureIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_InitialContextSetupFailureIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_InitialContextSetupFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_InitialContextSetupFailureIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_InitialContextSetupFailureIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_InitialContextSetupFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupItemCtxtSUResExtIEs
%%================================
'getenc_E-RABSetupItemCtxtSUResExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupItemCtxtSUResExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupItemCtxtSUResIEs
%%================================
'getenc_E-RABSetupItemCtxtSUResIEs'(50) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupItemCtxtSURes'(Val)
      end
   end;
'getenc_E-RABSetupItemCtxtSUResIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupItemCtxtSUResIEs'(50) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupItemCtxtSURes'(Bytes)
      end
   end;
'getdec_E-RABSetupItemCtxtSUResIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  InitialContextSetupResponseIEs
%%================================
'getenc_InitialContextSetupResponseIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupResponseIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupResponseIEs'(48) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_InitialContextSetupResponseIEs'(51) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupListCtxtSURes'(Val)
      end
   end;
'getenc_InitialContextSetupResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_InitialContextSetupResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_InitialContextSetupResponseIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupResponseIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupResponseIEs'(48) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_InitialContextSetupResponseIEs'(51) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupListCtxtSURes'(Bytes)
      end
   end;
'getdec_InitialContextSetupResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_InitialContextSetupResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemCtxtSUReqExtIEs
%%================================
'getenc_E-RABToBeSetupItemCtxtSUReqExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemCtxtSUReqExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemCtxtSUReqIEs
%%================================
'getenc_E-RABToBeSetupItemCtxtSUReqIEs'(52) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemCtxtSUReq'(Val)
      end
   end;
'getenc_E-RABToBeSetupItemCtxtSUReqIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemCtxtSUReqIEs'(52) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes)
      end
   end;
'getdec_E-RABToBeSetupItemCtxtSUReqIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  InitialContextSetupRequestIEs
%%================================
'getenc_InitialContextSetupRequestIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListCtxtSUReq'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(73) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityKey'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(74) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UERadioCapability'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(106) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SubscriberProfileIDforRFP'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(108) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSFallbackIndicator'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(124) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_InitialContextSetupRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_InitialContextSetupRequestIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListCtxtSUReq'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(73) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityKey'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(74) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UERadioCapability'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(106) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SubscriberProfileIDforRFP'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(108) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSFallbackIndicator'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(124) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_InitialContextSetupRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABReleaseIndicationIEs
%%================================
'getenc_E-RABReleaseIndicationIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseIndicationIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseIndicationIEs'(110) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_E-RABReleaseIndicationIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABReleaseIndicationIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseIndicationIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseIndicationIEs'(110) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_E-RABReleaseIndicationIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABReleaseItemBearerRelCompExtIEs
%%================================
'getenc_E-RABReleaseItemBearerRelCompExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABReleaseItemBearerRelCompExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABReleaseItemBearerRelCompIEs
%%================================
'getenc_E-RABReleaseItemBearerRelCompIEs'(15) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABReleaseItemBearerRelComp'(Val)
      end
   end;
'getenc_E-RABReleaseItemBearerRelCompIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABReleaseItemBearerRelCompIEs'(15) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABReleaseItemBearerRelComp'(Bytes)
      end
   end;
'getdec_E-RABReleaseItemBearerRelCompIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABReleaseResponseIEs
%%================================
'getenc_E-RABReleaseResponseIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseResponseIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseResponseIEs'(34) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_E-RABReleaseResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_E-RABReleaseResponseIEs'(69) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABReleaseListBearerRelComp'(Val)
      end
   end;
'getenc_E-RABReleaseResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABReleaseResponseIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseResponseIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseResponseIEs'(34) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_E-RABReleaseResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_E-RABReleaseResponseIEs'(69) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABReleaseListBearerRelComp'(Bytes)
      end
   end;
'getdec_E-RABReleaseResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABReleaseCommandIEs
%%================================
'getenc_E-RABReleaseCommandIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseCommandIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABReleaseCommandIEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_E-RABReleaseCommandIEs'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_E-RABReleaseCommandIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_E-RABReleaseCommandIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABReleaseCommandIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseCommandIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABReleaseCommandIEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_E-RABReleaseCommandIEs'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_E-RABReleaseCommandIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_E-RABReleaseCommandIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABModifyItemBearerModResExtIEs
%%================================
'getenc_E-RABModifyItemBearerModResExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABModifyItemBearerModResExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABModifyItemBearerModResIEs
%%================================
'getenc_E-RABModifyItemBearerModResIEs'(37) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABModifyItemBearerModRes'(Val)
      end
   end;
'getenc_E-RABModifyItemBearerModResIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABModifyItemBearerModResIEs'(37) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABModifyItemBearerModRes'(Bytes)
      end
   end;
'getdec_E-RABModifyItemBearerModResIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABModifyResponseIEs
%%================================
'getenc_E-RABModifyResponseIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABModifyResponseIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABModifyResponseIEs'(31) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABModifyListBearerModRes'(Val)
      end
   end;
'getenc_E-RABModifyResponseIEs'(32) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_E-RABModifyResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_E-RABModifyResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABModifyResponseIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABModifyResponseIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABModifyResponseIEs'(31) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABModifyListBearerModRes'(Bytes)
      end
   end;
'getdec_E-RABModifyResponseIEs'(32) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_E-RABModifyResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_E-RABModifyResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeModifyItemBearerModReqExtIEs
%%================================
'getenc_E-RABToBeModifyItemBearerModReqExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeModifyItemBearerModReqExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeModifiedItemBearerModReqIEs
%%================================
'getenc_E-RABToBeModifiedItemBearerModReqIEs'(36) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeModifiedItemBearerModReq'(Val)
      end
   end;
'getenc_E-RABToBeModifiedItemBearerModReqIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeModifiedItemBearerModReqIEs'(36) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeModifiedItemBearerModReq'(Bytes)
      end
   end;
'getdec_E-RABToBeModifiedItemBearerModReqIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABModifyRequestIEs
%%================================
'getenc_E-RABModifyRequestIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABModifyRequestIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABModifyRequestIEs'(30) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeModifiedListBearerModReq'(Val)
      end
   end;
'getenc_E-RABModifyRequestIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_E-RABModifyRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABModifyRequestIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABModifyRequestIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABModifyRequestIEs'(30) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeModifiedListBearerModReq'(Bytes)
      end
   end;
'getdec_E-RABModifyRequestIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_E-RABModifyRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupItemBearerSUResExtIEs
%%================================
'getenc_E-RABSetupItemBearerSUResExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupItemBearerSUResExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupItemBearerSUResIEs
%%================================
'getenc_E-RABSetupItemBearerSUResIEs'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupItemBearerSURes'(Val)
      end
   end;
'getenc_E-RABSetupItemBearerSUResIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupItemBearerSUResIEs'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupItemBearerSURes'(Bytes)
      end
   end;
'getdec_E-RABSetupItemBearerSUResIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupResponseIEs
%%================================
'getenc_E-RABSetupResponseIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABSetupResponseIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABSetupResponseIEs'(28) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupListBearerSURes'(Val)
      end
   end;
'getenc_E-RABSetupResponseIEs'(29) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_E-RABSetupResponseIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_E-RABSetupResponseIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupResponseIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABSetupResponseIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABSetupResponseIEs'(28) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupListBearerSURes'(Bytes)
      end
   end;
'getdec_E-RABSetupResponseIEs'(29) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_E-RABSetupResponseIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_E-RABSetupResponseIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemBearerSUReqExtIEs
%%================================
'getenc_E-RABToBeSetupItemBearerSUReqExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemBearerSUReqExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemBearerSUReqIEs
%%================================
'getenc_E-RABToBeSetupItemBearerSUReqIEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemBearerSUReq'(Val)
      end
   end;
'getenc_E-RABToBeSetupItemBearerSUReqIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemBearerSUReqIEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemBearerSUReq'(Bytes)
      end
   end;
'getdec_E-RABToBeSetupItemBearerSUReqIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABSetupRequestIEs
%%================================
'getenc_E-RABSetupRequestIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABSetupRequestIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_E-RABSetupRequestIEs'(16) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListBearerSUReq'(Val)
      end
   end;
'getenc_E-RABSetupRequestIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_E-RABSetupRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABSetupRequestIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABSetupRequestIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_E-RABSetupRequestIEs'(16) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListBearerSUReq'(Bytes)
      end
   end;
'getdec_E-RABSetupRequestIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_E-RABSetupRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverCancelAcknowledgeIEs
%%================================
'getenc_HandoverCancelAcknowledgeIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCancelAcknowledgeIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCancelAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverCancelAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverCancelAcknowledgeIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancelAcknowledgeIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancelAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverCancelAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverCancelIEs
%%================================
'getenc_HandoverCancelIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCancelIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverCancelIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCancelIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverCancelIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancelIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverCancelIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancelIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  PathSwitchRequestFailureIEs
%%================================
'getenc_PathSwitchRequestFailureIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_PathSwitchRequestFailureIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_PathSwitchRequestFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_PathSwitchRequestFailureIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_PathSwitchRequestFailureIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_PathSwitchRequestFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSwitchedULItem-ExtIEs
%%================================
'getenc_E-RABToBeSwitchedULItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSwitchedULItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSwitchedULItemIEs
%%================================
'getenc_E-RABToBeSwitchedULItemIEs'(94) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedULItem'(Val)
      end
   end;
'getenc_E-RABToBeSwitchedULItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSwitchedULItemIEs'(94) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedULItem'(Bytes)
      end
   end;
'getdec_E-RABToBeSwitchedULItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  PathSwitchRequestAcknowledgeIEs
%%================================
'getenc_PathSwitchRequestAcknowledgeIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityContext'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(95) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedULList'(Val)
      end
   end;
'getenc_PathSwitchRequestAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_PathSwitchRequestAcknowledgeIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityContext'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(95) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedULList'(Bytes)
      end
   end;
'getdec_PathSwitchRequestAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSwitchedDLItem-ExtIEs
%%================================
'getenc_E-RABToBeSwitchedDLItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSwitchedDLItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSwitchedDLItemIEs
%%================================
'getenc_E-RABToBeSwitchedDLItemIEs'(23) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedDLItem'(Val)
      end
   end;
'getenc_E-RABToBeSwitchedDLItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSwitchedDLItemIEs'(23) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedDLItem'(Bytes)
      end
   end;
'getdec_E-RABToBeSwitchedDLItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  PathSwitchRequestIEs
%%================================
'getenc_PathSwitchRequestIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedDLList'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(88) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_PathSwitchRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_PathSwitchRequestIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedDLList'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(88) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_PathSwitchRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverNotifyIEs
%%================================
'getenc_HandoverNotifyIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverNotifyIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverNotifyIEs'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_HandoverNotifyIEs'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_HandoverNotifyIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverNotifyIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverNotifyIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverNotifyIEs'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_HandoverNotifyIEs'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_HandoverNotifyIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverFailureIEs
%%================================
'getenc_HandoverFailureIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverFailureIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABFailedToSetupItemHOReqAckExtIEs
%%================================
'getenc_E-RABFailedToSetupItemHOReqAckExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABFailedToSetupItemHOReqAckExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABFailedtoSetupItemHOReqAckIEs
%%================================
'getenc_E-RABFailedtoSetupItemHOReqAckIEs'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABFailedToSetupItemHOReqAck'(Val)
      end
   end;
'getenc_E-RABFailedtoSetupItemHOReqAckIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABFailedtoSetupItemHOReqAckIEs'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABFailedToSetupItemHOReqAck'(Bytes)
      end
   end;
'getdec_E-RABFailedtoSetupItemHOReqAckIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABAdmittedItem-ExtIEs
%%================================
'getenc_E-RABAdmittedItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABAdmittedItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABAdmittedItemIEs
%%================================
'getenc_E-RABAdmittedItemIEs'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABAdmittedItem'(Val)
      end
   end;
'getenc_E-RABAdmittedItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABAdmittedItemIEs'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABAdmittedItem'(Bytes)
      end
   end;
'getdec_E-RABAdmittedItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRequestAcknowledgeIEs
%%================================
'getenc_HandoverRequestAcknowledgeIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(18) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABAdmittedList'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(19) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABFailedtoSetupListHOReqAck'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(123) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledgeIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRequestAcknowledgeIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(18) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABAdmittedList'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(19) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABFailedtoSetupListHOReqAck'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(123) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledgeIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemHOReq-ExtIEs
%%================================
'getenc_E-RABToBeSetupItemHOReq-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemHOReq-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABToBeSetupItemHOReqIEs
%%================================
'getenc_E-RABToBeSetupItemHOReqIEs'(27) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemHOReq'(Val)
      end
   end;
'getenc_E-RABToBeSetupItemHOReqIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABToBeSetupItemHOReqIEs'(27) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemHOReq'(Bytes)
      end
   end;
'getdec_E-RABToBeSetupItemHOReqIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRequestIEs
%%================================
'getenc_HandoverRequestIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityContext'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(53) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListHOReq'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(104) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(124) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(136) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NASSecurityParameterstoE-UTRAN'(Val)
      end
   end;
'getenc_HandoverRequestIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRequestIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityContext'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(53) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListHOReq'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(104) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(124) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(136) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NASSecurityParameterstoE-UTRAN'(Bytes)
      end
   end;
'getdec_HandoverRequestIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverPreparationFailureIEs
%%================================
'getenc_HandoverPreparationFailureIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverPreparationFailureIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverPreparationFailureIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverPreparationFailureIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverPreparationFailureIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverPreparationFailureIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailureIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailureIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailureIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailureIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABDataForwardingItem-ExtIEs
%%================================
'getenc_E-RABDataForwardingItem-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABDataForwardingItem-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABDataForwardingItemIEs
%%================================
'getenc_E-RABDataForwardingItemIEs'(14) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABDataForwardingItem'(Val)
      end
   end;
'getenc_E-RABDataForwardingItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABDataForwardingItemIEs'(14) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABDataForwardingItem'(Bytes)
      end
   end;
'getdec_E-RABDataForwardingItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverCommandIEs
%%================================
'getenc_HandoverCommandIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSubjecttoDataForwardingList'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(13) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(123) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(135) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NASSecurityParametersfromE-UTRAN'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(139) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverCommandIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverCommandIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSubjecttoDataForwardingList'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(13) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(123) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(135) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NASSecurityParametersfromE-UTRAN'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(139) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverCommandIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRequiredIEs
%%================================
'getenc_HandoverRequiredIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(4) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TargetID'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(79) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Direct-Forwarding-Path-Availability'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(104) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(125) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCHOIndication'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(132) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MSClassmark2'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(133) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MSClassmark3'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(138) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_HandoverRequiredIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRequiredIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(4) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TargetID'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(79) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Direct-Forwarding-Path-Availability'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(104) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(125) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCHOIndication'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(132) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MSClassmark2'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(133) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MSClassmark3'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(138) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverRequiredIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_79
%%================================
'getenc_internal_object_set_argument_79'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_79'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_79'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_internal_object_set_argument_79'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_79'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_79'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_79'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_79'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_109
%%================================
'getenc_internal_object_set_argument_109'(15) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABReleaseItemBearerRelComp'(Val)
      end
   end;
'getenc_internal_object_set_argument_109'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_109'(15) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABReleaseItemBearerRelComp'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_109'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_9
%%================================
'getenc_internal_object_set_argument_9'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_9'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_39
%%================================
'getenc_internal_object_set_argument_39'(35) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_39'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_39'(35) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_39'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_78
%%================================
'getenc_internal_object_set_argument_78'(60) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENBname'(Val)
      end
   end;
'getenc_internal_object_set_argument_78'(64) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SupportedTAs'(Val)
      end
   end;
'getenc_internal_object_set_argument_78'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_internal_object_set_argument_78'(137) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_internal_object_set_argument_78'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_78'(60) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENBname'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_78'(64) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SupportedTAs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_78'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_78'(137) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_78'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_108
%%================================
'getenc_internal_object_set_argument_108'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_108'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_8
%%================================
'getenc_internal_object_set_argument_8'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_8'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_38
%%================================
'getenc_internal_object_set_argument_38'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_38'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_147
%%================================
'getenc_internal_object_set_argument_147'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(4) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TargetID'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(79) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Direct-Forwarding-Path-Availability'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(104) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(125) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCHOIndication'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(132) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MSClassmark2'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(133) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MSClassmark3'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(138) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_147'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_147'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(4) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TargetID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(79) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Direct-Forwarding-Path-Availability'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(104) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(125) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCHOIndication'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(132) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MSClassmark2'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(133) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MSClassmark3'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(138) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_147'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_77
%%================================
'getenc_internal_object_set_argument_77'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_77'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_77'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_77'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_107
%%================================
'getenc_internal_object_set_argument_107'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_107'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_107'(110) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_107'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_107'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_107'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_107'(110) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_107'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_7
%%================================
'getenc_internal_object_set_argument_7'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_7'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_37
%%================================
'getenc_internal_object_set_argument_37'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_37'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_146
%%================================
'getenc_internal_object_set_argument_146'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSubjecttoDataForwardingList'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(13) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(123) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(135) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NASSecurityParametersfromE-UTRAN'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(139) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_146'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_146'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSubjecttoDataForwardingList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(13) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(123) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(135) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NASSecurityParametersfromE-UTRAN'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(139) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_146'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_76
%%================================
'getenc_internal_object_set_argument_76'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_76'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_76'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_internal_object_set_argument_76'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_76'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_76'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_76'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_76'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_106
%%================================
'getenc_internal_object_set_argument_106'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListCtxtSUReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(73) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityKey'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(74) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UERadioCapability'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(106) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SubscriberProfileIDforRFP'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(108) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSFallbackIndicator'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(124) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_internal_object_set_argument_106'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_106'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListCtxtSUReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(73) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityKey'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(74) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UERadioCapability'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(106) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SubscriberProfileIDforRFP'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(108) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSFallbackIndicator'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(124) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_106'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_6
%%================================
'getenc_internal_object_set_argument_6'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_6'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_36
%%================================
'getenc_internal_object_set_argument_36'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_36'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_145
%%================================
'getenc_internal_object_set_argument_145'(14) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABDataForwardingItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_145'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_145'(14) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABDataForwardingItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_145'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_75
%%================================
'getenc_internal_object_set_argument_75'(61) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MMEname'(Val)
      end
   end;
'getenc_internal_object_set_argument_75'(87) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RelativeMMECapacity'(Val)
      end
   end;
'getenc_internal_object_set_argument_75'(105) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedGUMMEIs'(Val)
      end
   end;
'getenc_internal_object_set_argument_75'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_75'(61) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MMEname'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_75'(87) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RelativeMMECapacity'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_75'(105) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedGUMMEIs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_75'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_105
%%================================
'getenc_internal_object_set_argument_105'(52) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemCtxtSUReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_105'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_105'(52) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_105'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_5
%%================================
'getenc_internal_object_set_argument_5'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_5'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_35
%%================================
'getenc_internal_object_set_argument_35'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_35'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_144
%%================================
'getenc_internal_object_set_argument_144'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_144'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_74
%%================================
'getenc_internal_object_set_argument_74'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_74'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_74'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_74'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_104
%%================================
'getenc_internal_object_set_argument_104'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_104'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_4
%%================================
'getenc_internal_object_set_argument_4'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_4'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_34
%%================================
'getenc_internal_object_set_argument_34'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_34'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_143
%%================================
'getenc_internal_object_set_argument_143'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_143'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_143'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_143'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_143'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_143'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_143'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_143'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_143'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_143'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_73
%%================================
'getenc_internal_object_set_argument_73'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_73'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_73'(65) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_internal_object_set_argument_73'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_73'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_73'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_73'(65) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_73'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_103
%%================================
'getenc_internal_object_set_argument_103'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_103'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_103'(48) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_103'(51) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupListCtxtSURes'(Val)
      end
   end;
'getenc_internal_object_set_argument_103'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_103'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_103'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_103'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_103'(48) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_103'(51) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupListCtxtSURes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_103'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_103'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_3
%%================================
'getenc_internal_object_set_argument_3'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_3'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_33
%%================================
'getenc_internal_object_set_argument_33'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_33'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_142
%%================================
'getenc_internal_object_set_argument_142'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverType'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityContext'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(53) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListHOReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(104) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Source-ToTarget-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(124) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(136) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NASSecurityParameterstoE-UTRAN'(Val)
      end
   end;
'getenc_internal_object_set_argument_142'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_142'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityContext'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(53) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListHOReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(104) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Source-ToTarget-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(124) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(136) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NASSecurityParameterstoE-UTRAN'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_142'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_72
%%================================
'getenc_internal_object_set_argument_72'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSubjecttoDataForwardingList'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(70) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(71) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000RATType'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(83) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000HOStatus'(Val)
      end
   end;
'getenc_internal_object_set_argument_72'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_72'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSubjecttoDataForwardingList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(70) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(71) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000RATType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(83) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000HOStatus'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_72'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_102
%%================================
'getenc_internal_object_set_argument_102'(50) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupItemCtxtSURes'(Val)
      end
   end;
'getenc_internal_object_set_argument_102'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_102'(50) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupItemCtxtSURes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_102'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_2
%%================================
'getenc_internal_object_set_argument_2'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_2'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_32
%%================================
'getenc_internal_object_set_argument_32'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_32'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_141
%%================================
'getenc_internal_object_set_argument_141'(27) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemHOReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_141'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_141'(27) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemHOReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_141'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_71
%%================================
'getenc_internal_object_set_argument_71'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(70) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(71) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000RATType'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(72) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000SectorID'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(84) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000HORequiredIndication'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(97) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000OneXRAND'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(102) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cdma2000OneXSRVCCInfo'(Val)
      end
   end;
'getenc_internal_object_set_argument_71'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_71'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(70) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(71) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000RATType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(72) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000SectorID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(84) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000HORequiredIndication'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(97) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000OneXRAND'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(102) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cdma2000OneXSRVCCInfo'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_71'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_101
%%================================
'getenc_internal_object_set_argument_101'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_101'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_1
%%================================
'getenc_internal_object_set_argument_1'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_1'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_31
%%================================
'getenc_internal_object_set_argument_31'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_31'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_140
%%================================
'getenc_internal_object_set_argument_140'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_140'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_70
%%================================
'getenc_internal_object_set_argument_70'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_70'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_70'(74) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UERadioCapability'(Val)
      end
   end;
'getenc_internal_object_set_argument_70'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_70'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_70'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_70'(74) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UERadioCapability'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_70'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_100
%%================================
'getenc_internal_object_set_argument_100'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_100'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_100'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_100'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_100'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_100'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_100'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_100'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_100'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_100'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_30
%%================================
'getenc_internal_object_set_argument_30'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_30'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_139
%%================================
'getenc_internal_object_set_argument_139'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(18) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABAdmittedList'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(19) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABFailedtoSetupListHOReqAck'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(123) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Target-ToSource-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_139'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_139'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(18) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABAdmittedList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(19) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABFailedtoSetupListHOReqAck'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(123) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Target-ToSource-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_139'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_89
%%================================
'getenc_internal_object_set_argument_89'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(75) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUMMEI'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(96) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_S-TMSI'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(127) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-Id'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(134) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RRC-Establishment-Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_89'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_89'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(75) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUMMEI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(96) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_S-TMSI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(127) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-Id'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(134) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RRC-Establishment-Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_89'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_49
%%================================
'getenc_internal_object_set_argument_49'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_49'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_138
%%================================
'getenc_internal_object_set_argument_138'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABAdmittedItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_138'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_138'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABAdmittedItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_138'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_88
%%================================
'getenc_internal_object_set_argument_88'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_88'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_88'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_88'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_internal_object_set_argument_88'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_88'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_88'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_88'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_88'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_88'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_88'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_88'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_48
%%================================
'getenc_internal_object_set_argument_48'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_48'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_137
%%================================
'getenc_internal_object_set_argument_137'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_137'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_87
%%================================
'getenc_internal_object_set_argument_87'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_87'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_87'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_87'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_87'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_87'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_87'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_87'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_87'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_87'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_47
%%================================
'getenc_internal_object_set_argument_47'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_47'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_136
%%================================
'getenc_internal_object_set_argument_136'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABFailedToSetupItemHOReqAck'(Val)
      end
   end;
'getenc_internal_object_set_argument_136'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_136'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABFailedToSetupItemHOReqAck'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_136'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_86
%%================================
'getenc_internal_object_set_argument_86'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_86'(92) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ResetType'(Val)
      end
   end;
'getenc_internal_object_set_argument_86'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_86'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_86'(92) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ResetType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_86'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_46
%%================================
'getenc_internal_object_set_argument_46'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_46'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_135
%%================================
'getenc_internal_object_set_argument_135'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_135'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_85
%%================================
'getenc_internal_object_set_argument_85'(91) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_85'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_85'(91) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_85'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_45
%%================================
'getenc_internal_object_set_argument_45'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_45'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_134
%%================================
'getenc_internal_object_set_argument_134'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_134'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_134'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_134'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_134'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_134'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_134'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_134'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_84
%%================================
'getenc_internal_object_set_argument_84'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_84'(93) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val)
      end
   end;
'getenc_internal_object_set_argument_84'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_84'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_84'(93) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_84'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_44
%%================================
'getenc_internal_object_set_argument_44'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_44'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_133
%%================================
'getenc_internal_object_set_argument_133'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_133'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_133'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_internal_object_set_argument_133'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_133'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_133'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_133'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_133'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_133'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_133'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_83
%%================================
'getenc_internal_object_set_argument_83'(91) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-associatedLogicalS1-ConnectionItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_83'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_83'(91) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_83'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_43
%%================================
'getenc_internal_object_set_argument_43'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_43'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_132
%%================================
'getenc_internal_object_set_argument_132'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedDLList'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(88) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(107) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UESecurityCapabilities'(Val)
      end
   end;
'getenc_internal_object_set_argument_132'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_132'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedDLList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(88) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(107) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UESecurityCapabilities'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_132'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_82
%%================================
'getenc_internal_object_set_argument_82'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_82'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_82'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_82'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_82'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_82'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_82'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_82'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_82'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_82'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_42
%%================================
'getenc_internal_object_set_argument_42'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_42'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_131
%%================================
'getenc_internal_object_set_argument_131'(23) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedDLItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_131'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_131'(23) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedDLItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_131'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_81
%%================================
'getenc_internal_object_set_argument_81'(59) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Global-ENB-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_81'(60) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENBname'(Val)
      end
   end;
'getenc_internal_object_set_argument_81'(64) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SupportedTAs'(Val)
      end
   end;
'getenc_internal_object_set_argument_81'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_internal_object_set_argument_81'(137) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_internal_object_set_argument_81'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_81'(59) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Global-ENB-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_81'(60) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENBname'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_81'(64) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SupportedTAs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_81'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_81'(137) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_81'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_41
%%================================
'getenc_internal_object_set_argument_41'(89) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Bearers-SubjectToStatusTransfer-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_41'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_41'(89) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Bearers-SubjectToStatusTransfer-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_41'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_130
%%================================
'getenc_internal_object_set_argument_130'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_130'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_80
%%================================
'getenc_internal_object_set_argument_80'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_80'(61) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MMEname'(Val)
      end
   end;
'getenc_internal_object_set_argument_80'(87) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RelativeMMECapacity'(Val)
      end
   end;
'getenc_internal_object_set_argument_80'(105) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedGUMMEIs'(Val)
      end
   end;
'getenc_internal_object_set_argument_80'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_80'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_80'(61) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MMEname'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_80'(87) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RelativeMMECapacity'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_80'(105) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedGUMMEIs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_80'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_40
%%================================
'getenc_internal_object_set_argument_40'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_40'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_129
%%================================
'getenc_internal_object_set_argument_129'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityContext'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(95) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedULList'(Val)
      end
   end;
'getenc_internal_object_set_argument_129'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_129'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityContext'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(95) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedULList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_129'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_59
%%================================
'getenc_internal_object_set_argument_59'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_59'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_99
%%================================
'getenc_internal_object_set_argument_99'(43) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEPagingID'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(44) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_PagingDRX'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(46) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAIList'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(80) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEIdentityIndexValue'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(109) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CNDomain'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(128) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSG-IdList'(Val)
      end
   end;
'getenc_internal_object_set_argument_99'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_99'(43) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEPagingID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(44) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_PagingDRX'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(46) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAIList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(80) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEIdentityIndexValue'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(109) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CNDomain'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(128) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSG-IdList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_99'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_19
%%================================
'getenc_internal_object_set_argument_19'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_19'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_128
%%================================
'getenc_internal_object_set_argument_128'(94) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSwitchedULItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_128'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_128'(94) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSwitchedULItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_128'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_58
%%================================
'getenc_internal_object_set_argument_58'(111) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MessageIdentifier'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(112) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SerialNumber'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(113) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningAreaList'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(114) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RepetitionPeriod'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(115) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NumberofBroadcastRequest'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(116) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningType'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(117) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningSecurityInfo'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(118) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_DataCodingScheme'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(119) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_WarningMessageContents'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_58'(111) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MessageIdentifier'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(112) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SerialNumber'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(113) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningAreaList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(114) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RepetitionPeriod'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(115) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NumberofBroadcastRequest'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(116) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(117) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningSecurityInfo'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(118) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_DataCodingScheme'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(119) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_WarningMessageContents'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_98
%%================================
'getenc_internal_object_set_argument_98'(47) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAIItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_98'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_98'(47) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAIItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_98'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_18
%%================================
'getenc_internal_object_set_argument_18'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_18'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_127
%%================================
'getenc_internal_object_set_argument_127'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_127'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_57
%%================================
'getenc_internal_object_set_argument_57'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_57'(111) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MessageIdentifier'(Val)
      end
   end;
'getenc_internal_object_set_argument_57'(112) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SerialNumber'(Val)
      end
   end;
'getenc_internal_object_set_argument_57'(120) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_BroadcastCompletedAreaList'(Val)
      end
   end;
'getenc_internal_object_set_argument_57'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_57'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_57'(111) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MessageIdentifier'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_57'(112) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SerialNumber'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_57'(120) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_BroadcastCompletedAreaList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_57'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_97
%%================================
'getenc_internal_object_set_argument_97'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_97'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_17
%%================================
'getenc_internal_object_set_argument_17'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_17'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_126
%%================================
'getenc_internal_object_set_argument_126'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_126'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_126'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_126'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_126'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_126'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_126'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_126'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_126'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_126'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_56
%%================================
'getenc_internal_object_set_argument_56'(121) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Inter-SystemInformationTransferType'(Val)
      end
   end;
'getenc_internal_object_set_argument_56'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_56'(121) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Inter-SystemInformationTransferType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_56'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_96
%%================================
'getenc_internal_object_set_argument_96'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_96'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_96'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_96'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_96'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_96'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_96'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_96'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_16
%%================================
'getenc_internal_object_set_argument_16'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_16'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_125
%%================================
'getenc_internal_object_set_argument_125'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_125'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_125'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_125'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_125'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_125'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_125'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_125'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_55
%%================================
'getenc_internal_object_set_argument_55'(122) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Inter-SystemInformationTransferType'(Val)
      end
   end;
'getenc_internal_object_set_argument_55'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_55'(122) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Inter-SystemInformationTransferType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_55'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_95
%%================================
'getenc_internal_object_set_argument_95'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_95'(99) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-S1AP-IDs'(Val)
      end
   end;
'getenc_internal_object_set_argument_95'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_95'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_95'(99) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-S1AP-IDs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_95'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_15
%%================================
'getenc_internal_object_set_argument_15'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_15'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_124
%%================================
'getenc_internal_object_set_argument_124'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_124'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_124'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_124'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_124'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_124'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_124'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_124'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_54
%%================================
'getenc_internal_object_set_argument_54'(129) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SONConfigurationTransfer'(Val)
      end
   end;
'getenc_internal_object_set_argument_54'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_54'(129) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SONConfigurationTransfer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_54'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_94
%%================================
'getenc_internal_object_set_argument_94'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_94'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_94'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_94'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_94'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_94'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_94'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_94'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_14
%%================================
'getenc_internal_object_set_argument_14'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_14'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_123
%%================================
'getenc_internal_object_set_argument_123'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_123'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_123'(16) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupListBearerSUReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_123'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_123'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_123'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_123'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_123'(16) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupListBearerSUReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_123'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_123'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_53
%%================================
'getenc_internal_object_set_argument_53'(130) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SONConfigurationTransfer'(Val)
      end
   end;
'getenc_internal_object_set_argument_53'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_53'(130) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SONConfigurationTransfer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_53'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_93
%%================================
'getenc_internal_object_set_argument_93'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(73) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SecurityKey'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(106) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SubscriberProfileIDforRFP'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(108) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CSFallbackIndicator'(Val)
      end
   end;
'getenc_internal_object_set_argument_93'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_93'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(73) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SecurityKey'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(106) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SubscriberProfileIDforRFP'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(108) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CSFallbackIndicator'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_93'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_13
%%================================
'getenc_internal_object_set_argument_13'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_13'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_122
%%================================
'getenc_internal_object_set_argument_122'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeSetupItemBearerSUReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_122'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_122'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeSetupItemBearerSUReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_122'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_92
%%================================
'getenc_internal_object_set_argument_92'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_92'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_92'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_92'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_92'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_92'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_92'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_92'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_12
%%================================
'getenc_internal_object_set_argument_12'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_12'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_121
%%================================
'getenc_internal_object_set_argument_121'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_121'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_51
%%================================
'getenc_internal_object_set_argument_51'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_51'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_91
%%================================
'getenc_internal_object_set_argument_91'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_91'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_91'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_91'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_91'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_91'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_91'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_91'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_91'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_91'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_11
%%================================
'getenc_internal_object_set_argument_11'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_11'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_120
%%================================
'getenc_internal_object_set_argument_120'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_120'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_120'(28) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupListBearerSURes'(Val)
      end
   end;
'getenc_internal_object_set_argument_120'(29) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_120'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_120'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_120'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_120'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_120'(28) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupListBearerSURes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_120'(29) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_120'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_120'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_50
%%================================
'getenc_internal_object_set_argument_50'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_50'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_90
%%================================
'getenc_internal_object_set_argument_90'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_90'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_90'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_90'(41) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_HandoverRestrictionList'(Val)
      end
   end;
'getenc_internal_object_set_argument_90'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_90'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_90'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_90'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_90'(41) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_HandoverRestrictionList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_90'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_10
%%================================
'getenc_internal_object_set_argument_10'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_10'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_119
%%================================
'getenc_internal_object_set_argument_119'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABSetupItemBearerSURes'(Val)
      end
   end;
'getenc_internal_object_set_argument_119'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_119'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABSetupItemBearerSURes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_119'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_69
%%================================
'getenc_internal_object_set_argument_69'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_69'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_69'(90) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-StatusTransfer-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_69'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_69'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_69'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_69'(90) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-StatusTransfer-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_69'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_29
%%================================
'getenc_internal_object_set_argument_29'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_29'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_118
%%================================
'getenc_internal_object_set_argument_118'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_118'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_68
%%================================
'getenc_internal_object_set_argument_68'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_68'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_68'(90) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-StatusTransfer-TransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_68'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_68'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_68'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_68'(90) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-StatusTransfer-TransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_68'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_28
%%================================
'getenc_internal_object_set_argument_28'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_28'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_117
%%================================
'getenc_internal_object_set_argument_117'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_117'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_117'(30) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeModifiedListBearerModReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_117'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_117'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_117'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_117'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_117'(30) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeModifiedListBearerModReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_117'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_117'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_67
%%================================
'getenc_internal_object_set_argument_67'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_67'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_67'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_internal_object_set_argument_67'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_67'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_67'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_67'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_67'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_27
%%================================
'getenc_internal_object_set_argument_27'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_27'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_116
%%================================
'getenc_internal_object_set_argument_116'(36) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABToBeModifiedItemBearerModReq'(Val)
      end
   end;
'getenc_internal_object_set_argument_116'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_116'(36) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABToBeModifiedItemBearerModReq'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_116'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_66
%%================================
'getenc_internal_object_set_argument_66'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_66'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_66'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_66'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_66'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_66'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_66'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_66'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_66'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_66'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_26
%%================================
'getenc_internal_object_set_argument_26'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_26'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_115
%%================================
'getenc_internal_object_set_argument_115'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_115'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_65
%%================================
'getenc_internal_object_set_argument_65'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_65'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_65'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_65'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_65'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_65'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_65'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_65'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_25
%%================================
'getenc_internal_object_set_argument_25'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_25'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_114
%%================================
'getenc_internal_object_set_argument_114'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_114'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_114'(31) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABModifyListBearerModRes'(Val)
      end
   end;
'getenc_internal_object_set_argument_114'(32) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_114'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_114'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_114'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_114'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_114'(31) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABModifyListBearerModRes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_114'(32) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_114'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_114'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_64
%%================================
'getenc_internal_object_set_argument_64'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_64'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_64'(86) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-UTRAN-Trace-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_64'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_64'(131) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TransportLayerAddress'(Val)
      end
   end;
'getenc_internal_object_set_argument_64'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_64'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_64'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_64'(86) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-UTRAN-Trace-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_64'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_64'(131) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TransportLayerAddress'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_64'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_24
%%================================
'getenc_internal_object_set_argument_24'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_24'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_113
%%================================
'getenc_internal_object_set_argument_113'(37) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABModifyItemBearerModRes'(Val)
      end
   end;
'getenc_internal_object_set_argument_113'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_113'(37) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABModifyItemBearerModRes'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_113'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_63
%%================================
'getenc_internal_object_set_argument_63'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_63'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_63'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_internal_object_set_argument_63'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_63'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_63'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_63'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_63'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_23
%%================================
'getenc_internal_object_set_argument_23'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_23'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_112
%%================================
'getenc_internal_object_set_argument_112'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_112'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_62
%%================================
'getenc_internal_object_set_argument_62'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_62'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_62'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_62'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_62'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_62'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_62'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_62'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_22
%%================================
'getenc_internal_object_set_argument_22'(78) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABInformationListItem'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_22'(78) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABInformationListItem'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_111
%%================================
'getenc_internal_object_set_argument_111'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_111'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_111'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_NAS-PDU'(Val)
      end
   end;
'getenc_internal_object_set_argument_111'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_111'(66) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UEAggregateMaximumBitrate'(Val)
      end
   end;
'getenc_internal_object_set_argument_111'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_111'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_111'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_111'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_NAS-PDU'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_111'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_111'(66) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UEAggregateMaximumBitrate'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_111'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_61
%%================================
'getenc_internal_object_set_argument_61'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_61'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_61'(67) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TAI'(Val)
      end
   end;
'getenc_internal_object_set_argument_61'(98) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_RequestType'(Val)
      end
   end;
'getenc_internal_object_set_argument_61'(100) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_EUTRAN-CGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_61'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_61'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_61'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_61'(67) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TAI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_61'(98) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_RequestType'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_61'(100) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_EUTRAN-CGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_61'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_21
%%================================
'getenc_internal_object_set_argument_21'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_21'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_110
%%================================
'getenc_internal_object_set_argument_110'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_MME-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_110'(8) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ENB-UE-S1AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_110'(34) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABList'(Val)
      end
   end;
'getenc_internal_object_set_argument_110'(58) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_110'(69) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABReleaseListBearerRelComp'(Val)
      end
   end;
'getenc_internal_object_set_argument_110'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_110'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_MME-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_110'(8) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ENB-UE-S1AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_110'(34) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_110'(58) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_110'(69) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABReleaseListBearerRelComp'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_110'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_60
%%================================
'getenc_internal_object_set_argument_60'(101) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_OverloadResponse'(Val)
      end
   end;
'getenc_internal_object_set_argument_60'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_60'(101) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_OverloadResponse'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_60'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_20
%%================================
'getenc_internal_object_set_argument_20'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_20'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.



%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H|Al]).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal|ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1,Val2} =
        if
            AddedObjVal < 40 ->
                {0,AddedObjVal};
            AddedObjVal < 80 ->
                {1,AddedObjVal - 40};
            true ->
                {2,AddedObjVal - 80}
        end,
    list_to_tuple([Val1,Val2|ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type(Tlv, TagIn) ->
    case match_tags(Tlv, TagIn) of
        Bin when is_binary(Bin) ->
            {InnerTlv,_} = ber_decode_nif(Bin),
            InnerTlv;
        TlvBytes ->
            TlvBytes
    end.

decode_open_type_as_binary(Tlv, TagIn) ->
    ber_encode(match_tags(Tlv, TagIn)).

decode_restricted_string(Tlv, TagsIn) ->
    match_and_collect(Tlv, TagsIn).

e_object_identifier({'OBJECT IDENTIFIER',V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1,E2|Tail]) ->
    Head = 40 * E1 + E2,
    {H,Lh} = mk_object_val(Head),
    {R,Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H|R],Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B,L} = mk_object_val(H),
    {B,Len + L}.

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

encode_unnamed_bit_string(MaxBits, Bits, TagIn) ->
    NumBits = bit_size(Bits),
    Unused = (8 - NumBits band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    if
        NumBits > MaxBits ->
            exit({error,
                  {asn1,
                   {bitstring_length,{{was,NumBits},{maximum,MaxBits}}}}});
        true ->
            encode_tags(TagIn, Bin, byte_size(Bin))
    end.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack,Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128|Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val],1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.
