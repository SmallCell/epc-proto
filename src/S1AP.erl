%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:3.0.2
%% Purpose: encoder and decoder to the types in mod S1AP

-module('S1AP').
-compile(nowarn_unused_vars).
-include("S1AP.hrl").
-asn1_info([{vsn,'3.0.2'},
            {module,'S1AP'},
            {options,[{i,"src"},{outdir,"src"},per,verbose,noobj,{i,"."},{i,"protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_UnsuccessfulOutcome'/1,
'enc_SuccessfulOutcome'/1,
'enc_InitiatingMessage'/1,
'enc_S1AP-PDU'/1,
'enc_X2TNLConfigurationInfo'/1,
'enc_WarningMessageContents'/1,
'enc_WarningSecurityInfo'/1,
'enc_WarningType'/1,
'enc_WarningAreaList'/1,
'enc_UESecurityCapabilities'/1,
'enc_UERadioCapability'/1,
'enc_UEPagingID'/1,
'enc_UE-HistoryInformation'/1,
'enc_UEIdentityIndexValue'/1,
'enc_UE-associatedLogicalS1-ConnectionItem'/1,
'enc_UE-S1AP-ID-pair'/1,
'enc_UE-S1AP-IDs'/1,
'enc_UEAggregateMaximumBitrate'/1,
'enc_TypeOfError'/1,
'enc_E-UTRAN-Trace-ID'/1,
'enc_TraceDepth'/1,
'enc_TraceActivation'/1,
'enc_TransportLayerAddress'/1,
'enc_Time-UE-StayedInCell'/1,
'enc_TimeToWait'/1,
'enc_TargetBSS-ToSourceBSS-TransparentContainer'/1,
'enc_TargetRNC-ToSourceRNC-TransparentContainer'/1,
'enc_Target-ToSource-TransparentContainer'/1,
'enc_TargeteNB-ToSourceeNB-TransparentContainer'/1,
'enc_TargetRNC-ID'/1,
'enc_TargeteNB-ID'/1,
'enc_TargetID'/1,
'enc_TBCD-STRING'/1,
'enc_CompletedCellinTAI-Item'/1,
'enc_CompletedCellinTAI'/1,
'enc_TAI-Broadcast-Item'/1,
'enc_TAI-Broadcast'/1,
'enc_TAI'/1,
'enc_TAIListforWarning'/1,
'enc_TAC'/1,
'enc_S-TMSI'/1,
'enc_SupportedTAs-Item'/1,
'enc_SupportedTAs'/1,
'enc_SubscriberProfileIDforRFP'/1,
'enc_ServedPLMNs'/1,
'enc_ServedMMECs'/1,
'enc_ServedGroupIDs'/1,
'enc_ServedGUMMEIsItem'/1,
'enc_ServedGUMMEIs'/1,
'enc_SourceRNC-ToTargetRNC-TransparentContainer'/1,
'enc_SourceeNB-ToTargeteNB-TransparentContainer'/1,
'enc_SRVCCHOIndication'/1,
'enc_SRVCCOperationPossible'/1,
'enc_SourceeNB-ID'/1,
'enc_SourceBSS-ToTargetBSS-TransparentContainer'/1,
'enc_Source-ToTarget-TransparentContainer'/1,
'enc_SONConfigurationTransfer'/1,
'enc_SONInformationReply'/1,
'enc_SONInformationRequest'/1,
'enc_SONInformation'/1,
'enc_SerialNumber'/1,
'enc_SecurityContext'/1,
'enc_SecurityKey'/1,
'enc_RRC-Establishment-Cause'/1,
'enc_RRC-Container'/1,
'enc_RNC-ID'/1,
'enc_RepetitionPeriod'/1,
'enc_ReportArea'/1,
'enc_RIMRoutingAddress'/1,
'enc_RIMInformation'/1,
'enc_RIMTransfer'/1,
'enc_RequestType'/1,
'enc_RAC'/1,
'enc_RelativeMMECapacity'/1,
'enc_ReceiveStatusofULPDCPSDUs'/1,
'enc_QCI'/1,
'enc_PriorityLevel'/1,
'enc_Pre-emptionVulnerability'/1,
'enc_Pre-emptionCapability'/1,
'enc_PLMNidentity'/1,
'enc_PDCP-SN'/1,
'enc_PagingDRX'/1,
'enc_OverloadResponse'/1,
'enc_OverloadAction'/1,
'enc_OldBSS-ToNewBSS-Information'/1,
'enc_NumberofBroadcast'/1,
'enc_NumberofBroadcastRequest'/1,
'enc_NASSecurityParameterstoE-UTRAN'/1,
'enc_NASSecurityParametersfromE-UTRAN'/1,
'enc_NAS-PDU'/1,
'enc_MSClassmark3'/1,
'enc_MSClassmark2'/1,
'enc_M-TMSI'/1,
'enc_MME-UE-S1AP-ID'/1,
'enc_MME-Code'/1,
'enc_MME-Group-ID'/1,
'enc_MMEname'/1,
'enc_MessageIdentifier'/1,
'enc_L3-Information'/1,
'enc_LastVisitedGERANCellInformation'/1,
'enc_LastVisitedUTRANCellInformation'/1,
'enc_LastVisitedEUTRANCellInformation'/1,
'enc_LastVisitedCell-Item'/1,
'enc_LAI'/1,
'enc_LAC'/1,
'enc_InterfacesToTrace'/1,
'enc_IntegrityProtectionAlgorithms'/1,
'enc_IMSI'/1,
'enc_HFN'/1,
'enc_HandoverType'/1,
'enc_HandoverRestrictionList'/1,
'enc_GUMMEI'/1,
'enc_GTP-TEID'/1,
'enc_GBR-QosInformation'/1,
'enc_ForbiddenLACs'/1,
'enc_ForbiddenLAs-Item'/1,
'enc_ForbiddenLAs'/1,
'enc_ForbiddenTACs'/1,
'enc_ForbiddenTAs-Item'/1,
'enc_ForbiddenTAs'/1,
'enc_ForbiddenInterRATs'/1,
'enc_ExtendedRNC-ID'/1,
'enc_EUTRAN-CGI'/1,
'enc_E-RABLevelQoSParameters'/1,
'enc_E-RABItem'/1,
'enc_E-RABList'/1,
'enc_E-RABInformationListItem'/1,
'enc_E-RABInformationList'/1,
'enc_E-RAB-ID'/1,
'enc_EventType'/1,
'enc_EPLMNs'/1,
'enc_EncryptionAlgorithms'/1,
'enc_ENBX2TLAs'/1,
'enc_ENBname'/1,
'enc_ENB-UE-S1AP-ID'/1,
'enc_ENB-StatusTransfer-TransparentContainer'/1,
'enc_Global-ENB-ID'/1,
'enc_GERAN-Cell-ID'/1,
'enc_ENB-ID'/1,
'enc_CompletedCellinEAI-Item'/1,
'enc_CompletedCellinEAI'/1,
'enc_EmergencyAreaID-Broadcast-Item'/1,
'enc_EmergencyAreaID-Broadcast'/1,
'enc_EmergencyAreaID'/1,
'enc_EmergencyAreaIDList'/1,
'enc_ECGIList'/1,
'enc_Direct-Forwarding-Path-Availability'/1,
'enc_DL-Forwarding'/1,
'enc_DataCodingScheme'/1,
'enc_CriticalityDiagnostics-IE-Item'/1,
'enc_CriticalityDiagnostics-IE-List'/1,
'enc_CriticalityDiagnostics'/1,
'enc_COUNTvalue'/1,
'enc_CSG-IdList-Item'/1,
'enc_CSG-IdList'/1,
'enc_CSG-Id'/1,
'enc_CSFallbackIndicator'/1,
'enc_CNDomain'/1,
'enc_CI'/1,
'enc_CGI'/1,
'enc_CellType'/1,
'enc_Cell-Size'/1,
'enc_Cdma2000OneXRAND'/1,
'enc_Cdma2000OneXPilot'/1,
'enc_Cdma2000OneXMSI'/1,
'enc_Cdma2000OneXMEID'/1,
'enc_Cdma2000OneXSRVCCInfo'/1,
'enc_Cdma2000HORequiredIndication'/1,
'enc_Cdma2000HOStatus'/1,
'enc_Cdma2000SectorID'/1,
'enc_Cdma2000RATType'/1,
'enc_Cdma2000PDU'/1,
'enc_CellID-Broadcast-Item'/1,
'enc_CellID-Broadcast'/1,
'enc_CellIdentity'/1,
'enc_CauseNas'/1,
'enc_CauseTransport'/1,
'enc_CauseRadioNetwork'/1,
'enc_CauseProtocol'/1,
'enc_CauseMisc'/1,
'enc_Cause'/1,
'enc_BroadcastCompletedAreaList'/1,
'enc_BPLMNs'/1,
'enc_BitRate'/1,
'enc_Bearers-SubjectToStatusTransfer-Item'/1,
'enc_Bearers-SubjectToStatusTransferList'/1,
'enc_AllocationAndRetentionPriority'/1,
'enc_TriggeringMessage'/1,
'enc_ProtocolIE-ID'/1,
'enc_ProtocolExtensionID'/1,
'enc_ProcedureCode'/1,
'enc_PrivateIE-ID'/1,
'enc_Presence'/1,
'enc_Criticality'/1,
'enc_PrivateMessage'/1,
'enc_MMEConfigurationTransfer'/1,
'enc_ENBConfigurationTransfer'/1,
'enc_MMEDirectInformationTransfer'/1,
'enc_Inter-SystemInformationTransferType'/1,
'enc_ENBDirectInformationTransfer'/1,
'enc_WriteReplaceWarningResponse'/1,
'enc_WriteReplaceWarningRequest'/1,
'enc_OverloadStop'/1,
'enc_OverloadStart'/1,
'enc_LocationReport'/1,
'enc_LocationReportingFailureIndication'/1,
'enc_LocationReportingControl'/1,
'enc_CellTrafficTrace'/1,
'enc_DeactivateTrace'/1,
'enc_TraceFailureIndication'/1,
'enc_TraceStart'/1,
'enc_MMEStatusTransfer'/1,
'enc_ENBStatusTransfer'/1,
'enc_UECapabilityInfoIndication'/1,
'enc_UplinkS1cdma2000tunneling'/1,
'enc_DownlinkS1cdma2000tunneling'/1,
'enc_MMEConfigurationUpdateFailure'/1,
'enc_MMEConfigurationUpdateAcknowledge'/1,
'enc_MMEConfigurationUpdate'/1,
'enc_ENBConfigurationUpdateFailure'/1,
'enc_ENBConfigurationUpdateAcknowledge'/1,
'enc_ENBConfigurationUpdate'/1,
'enc_S1SetupFailure'/1,
'enc_S1SetupResponse'/1,
'enc_S1SetupRequest'/1,
'enc_ErrorIndication'/1,
'enc_UE-associatedLogicalS1-ConnectionListResAck'/1,
'enc_ResetAcknowledge'/1,
'enc_UE-associatedLogicalS1-ConnectionListRes'/1,
'enc_ResetAll'/1,
'enc_ResetType'/1,
'enc_Reset'/1,
'enc_NASNonDeliveryIndication'/1,
'enc_UplinkNASTransport'/1,
'enc_InitialUEMessage'/1,
'enc_DownlinkNASTransport'/1,
'enc_UEContextModificationFailure'/1,
'enc_UEContextModificationResponse'/1,
'enc_UEContextModificationRequest'/1,
'enc_UEContextReleaseComplete'/1,
'enc_UEContextReleaseCommand'/1,
'enc_UEContextReleaseRequest'/1,
'enc_TAIItem'/1,
'enc_TAIList'/1,
'enc_Paging'/1,
'enc_InitialContextSetupFailure'/1,
'enc_E-RABSetupItemCtxtSURes'/1,
'enc_E-RABSetupListCtxtSURes'/1,
'enc_InitialContextSetupResponse'/1,
'enc_E-RABToBeSetupItemCtxtSUReq'/1,
'enc_E-RABToBeSetupListCtxtSUReq'/1,
'enc_InitialContextSetupRequest'/1,
'enc_E-RABReleaseIndication'/1,
'enc_E-RABReleaseItemBearerRelComp'/1,
'enc_E-RABReleaseListBearerRelComp'/1,
'enc_E-RABReleaseResponse'/1,
'enc_E-RABReleaseCommand'/1,
'enc_E-RABModifyItemBearerModRes'/1,
'enc_E-RABModifyListBearerModRes'/1,
'enc_E-RABModifyResponse'/1,
'enc_E-RABToBeModifiedItemBearerModReq'/1,
'enc_E-RABToBeModifiedListBearerModReq'/1,
'enc_E-RABModifyRequest'/1,
'enc_E-RABSetupItemBearerSURes'/1,
'enc_E-RABSetupListBearerSURes'/1,
'enc_E-RABSetupResponse'/1,
'enc_E-RABToBeSetupItemBearerSUReq'/1,
'enc_E-RABToBeSetupListBearerSUReq'/1,
'enc_E-RABSetupRequest'/1,
'enc_HandoverCancelAcknowledge'/1,
'enc_HandoverCancel'/1,
'enc_PathSwitchRequestFailure'/1,
'enc_E-RABToBeSwitchedULItem'/1,
'enc_E-RABToBeSwitchedULList'/1,
'enc_PathSwitchRequestAcknowledge'/1,
'enc_E-RABToBeSwitchedDLItem'/1,
'enc_E-RABToBeSwitchedDLList'/1,
'enc_PathSwitchRequest'/1,
'enc_HandoverNotify'/1,
'enc_HandoverFailure'/1,
'enc_E-RABFailedToSetupItemHOReqAck'/1,
'enc_E-RABFailedtoSetupListHOReqAck'/1,
'enc_E-RABAdmittedItem'/1,
'enc_E-RABAdmittedList'/1,
'enc_HandoverRequestAcknowledge'/1,
'enc_E-RABToBeSetupItemHOReq'/1,
'enc_E-RABToBeSetupListHOReq'/1,
'enc_HandoverRequest'/1,
'enc_HandoverPreparationFailure'/1,
'enc_E-RABDataForwardingItem'/1,
'enc_E-RABSubjecttoDataForwardingList'/1,
'enc_HandoverCommand'/1,
'enc_HandoverRequired'/1
]).

-export([
'dec_UnsuccessfulOutcome'/1,
'dec_SuccessfulOutcome'/1,
'dec_InitiatingMessage'/1,
'dec_S1AP-PDU'/1,
'dec_X2TNLConfigurationInfo'/1,
'dec_WarningMessageContents'/1,
'dec_WarningSecurityInfo'/1,
'dec_WarningType'/1,
'dec_WarningAreaList'/1,
'dec_UESecurityCapabilities'/1,
'dec_UERadioCapability'/1,
'dec_UEPagingID'/1,
'dec_UE-HistoryInformation'/1,
'dec_UEIdentityIndexValue'/1,
'dec_UE-associatedLogicalS1-ConnectionItem'/1,
'dec_UE-S1AP-ID-pair'/1,
'dec_UE-S1AP-IDs'/1,
'dec_UEAggregateMaximumBitrate'/1,
'dec_TypeOfError'/1,
'dec_E-UTRAN-Trace-ID'/1,
'dec_TraceDepth'/1,
'dec_TraceActivation'/1,
'dec_TransportLayerAddress'/1,
'dec_Time-UE-StayedInCell'/1,
'dec_TimeToWait'/1,
'dec_TargetBSS-ToSourceBSS-TransparentContainer'/1,
'dec_TargetRNC-ToSourceRNC-TransparentContainer'/1,
'dec_Target-ToSource-TransparentContainer'/1,
'dec_TargeteNB-ToSourceeNB-TransparentContainer'/1,
'dec_TargetRNC-ID'/1,
'dec_TargeteNB-ID'/1,
'dec_TargetID'/1,
'dec_TBCD-STRING'/1,
'dec_CompletedCellinTAI-Item'/1,
'dec_CompletedCellinTAI'/1,
'dec_TAI-Broadcast-Item'/1,
'dec_TAI-Broadcast'/1,
'dec_TAI'/1,
'dec_TAIListforWarning'/1,
'dec_TAC'/1,
'dec_S-TMSI'/1,
'dec_SupportedTAs-Item'/1,
'dec_SupportedTAs'/1,
'dec_SubscriberProfileIDforRFP'/1,
'dec_ServedPLMNs'/1,
'dec_ServedMMECs'/1,
'dec_ServedGroupIDs'/1,
'dec_ServedGUMMEIsItem'/1,
'dec_ServedGUMMEIs'/1,
'dec_SourceRNC-ToTargetRNC-TransparentContainer'/1,
'dec_SourceeNB-ToTargeteNB-TransparentContainer'/1,
'dec_SRVCCHOIndication'/1,
'dec_SRVCCOperationPossible'/1,
'dec_SourceeNB-ID'/1,
'dec_SourceBSS-ToTargetBSS-TransparentContainer'/1,
'dec_Source-ToTarget-TransparentContainer'/1,
'dec_SONConfigurationTransfer'/1,
'dec_SONInformationReply'/1,
'dec_SONInformationRequest'/1,
'dec_SONInformation'/1,
'dec_SerialNumber'/1,
'dec_SecurityContext'/1,
'dec_SecurityKey'/1,
'dec_RRC-Establishment-Cause'/1,
'dec_RRC-Container'/1,
'dec_RNC-ID'/1,
'dec_RepetitionPeriod'/1,
'dec_ReportArea'/1,
'dec_RIMRoutingAddress'/1,
'dec_RIMInformation'/1,
'dec_RIMTransfer'/1,
'dec_RequestType'/1,
'dec_RAC'/1,
'dec_RelativeMMECapacity'/1,
'dec_ReceiveStatusofULPDCPSDUs'/1,
'dec_QCI'/1,
'dec_PriorityLevel'/1,
'dec_Pre-emptionVulnerability'/1,
'dec_Pre-emptionCapability'/1,
'dec_PLMNidentity'/1,
'dec_PDCP-SN'/1,
'dec_PagingDRX'/1,
'dec_OverloadResponse'/1,
'dec_OverloadAction'/1,
'dec_OldBSS-ToNewBSS-Information'/1,
'dec_NumberofBroadcast'/1,
'dec_NumberofBroadcastRequest'/1,
'dec_NASSecurityParameterstoE-UTRAN'/1,
'dec_NASSecurityParametersfromE-UTRAN'/1,
'dec_NAS-PDU'/1,
'dec_MSClassmark3'/1,
'dec_MSClassmark2'/1,
'dec_M-TMSI'/1,
'dec_MME-UE-S1AP-ID'/1,
'dec_MME-Code'/1,
'dec_MME-Group-ID'/1,
'dec_MMEname'/1,
'dec_MessageIdentifier'/1,
'dec_L3-Information'/1,
'dec_LastVisitedGERANCellInformation'/1,
'dec_LastVisitedUTRANCellInformation'/1,
'dec_LastVisitedEUTRANCellInformation'/1,
'dec_LastVisitedCell-Item'/1,
'dec_LAI'/1,
'dec_LAC'/1,
'dec_InterfacesToTrace'/1,
'dec_IntegrityProtectionAlgorithms'/1,
'dec_IMSI'/1,
'dec_HFN'/1,
'dec_HandoverType'/1,
'dec_HandoverRestrictionList'/1,
'dec_GUMMEI'/1,
'dec_GTP-TEID'/1,
'dec_GBR-QosInformation'/1,
'dec_ForbiddenLACs'/1,
'dec_ForbiddenLAs-Item'/1,
'dec_ForbiddenLAs'/1,
'dec_ForbiddenTACs'/1,
'dec_ForbiddenTAs-Item'/1,
'dec_ForbiddenTAs'/1,
'dec_ForbiddenInterRATs'/1,
'dec_ExtendedRNC-ID'/1,
'dec_EUTRAN-CGI'/1,
'dec_E-RABLevelQoSParameters'/1,
'dec_E-RABItem'/1,
'dec_E-RABList'/1,
'dec_E-RABInformationListItem'/1,
'dec_E-RABInformationList'/1,
'dec_E-RAB-ID'/1,
'dec_EventType'/1,
'dec_EPLMNs'/1,
'dec_EncryptionAlgorithms'/1,
'dec_ENBX2TLAs'/1,
'dec_ENBname'/1,
'dec_ENB-UE-S1AP-ID'/1,
'dec_ENB-StatusTransfer-TransparentContainer'/1,
'dec_Global-ENB-ID'/1,
'dec_GERAN-Cell-ID'/1,
'dec_ENB-ID'/1,
'dec_CompletedCellinEAI-Item'/1,
'dec_CompletedCellinEAI'/1,
'dec_EmergencyAreaID-Broadcast-Item'/1,
'dec_EmergencyAreaID-Broadcast'/1,
'dec_EmergencyAreaID'/1,
'dec_EmergencyAreaIDList'/1,
'dec_ECGIList'/1,
'dec_Direct-Forwarding-Path-Availability'/1,
'dec_DL-Forwarding'/1,
'dec_DataCodingScheme'/1,
'dec_CriticalityDiagnostics-IE-Item'/1,
'dec_CriticalityDiagnostics-IE-List'/1,
'dec_CriticalityDiagnostics'/1,
'dec_COUNTvalue'/1,
'dec_CSG-IdList-Item'/1,
'dec_CSG-IdList'/1,
'dec_CSG-Id'/1,
'dec_CSFallbackIndicator'/1,
'dec_CNDomain'/1,
'dec_CI'/1,
'dec_CGI'/1,
'dec_CellType'/1,
'dec_Cell-Size'/1,
'dec_Cdma2000OneXRAND'/1,
'dec_Cdma2000OneXPilot'/1,
'dec_Cdma2000OneXMSI'/1,
'dec_Cdma2000OneXMEID'/1,
'dec_Cdma2000OneXSRVCCInfo'/1,
'dec_Cdma2000HORequiredIndication'/1,
'dec_Cdma2000HOStatus'/1,
'dec_Cdma2000SectorID'/1,
'dec_Cdma2000RATType'/1,
'dec_Cdma2000PDU'/1,
'dec_CellID-Broadcast-Item'/1,
'dec_CellID-Broadcast'/1,
'dec_CellIdentity'/1,
'dec_CauseNas'/1,
'dec_CauseTransport'/1,
'dec_CauseRadioNetwork'/1,
'dec_CauseProtocol'/1,
'dec_CauseMisc'/1,
'dec_Cause'/1,
'dec_BroadcastCompletedAreaList'/1,
'dec_BPLMNs'/1,
'dec_BitRate'/1,
'dec_Bearers-SubjectToStatusTransfer-Item'/1,
'dec_Bearers-SubjectToStatusTransferList'/1,
'dec_AllocationAndRetentionPriority'/1,
'dec_TriggeringMessage'/1,
'dec_ProtocolIE-ID'/1,
'dec_ProtocolExtensionID'/1,
'dec_ProcedureCode'/1,
'dec_PrivateIE-ID'/1,
'dec_Presence'/1,
'dec_Criticality'/1,
'dec_PrivateMessage'/1,
'dec_MMEConfigurationTransfer'/1,
'dec_ENBConfigurationTransfer'/1,
'dec_MMEDirectInformationTransfer'/1,
'dec_Inter-SystemInformationTransferType'/1,
'dec_ENBDirectInformationTransfer'/1,
'dec_WriteReplaceWarningResponse'/1,
'dec_WriteReplaceWarningRequest'/1,
'dec_OverloadStop'/1,
'dec_OverloadStart'/1,
'dec_LocationReport'/1,
'dec_LocationReportingFailureIndication'/1,
'dec_LocationReportingControl'/1,
'dec_CellTrafficTrace'/1,
'dec_DeactivateTrace'/1,
'dec_TraceFailureIndication'/1,
'dec_TraceStart'/1,
'dec_MMEStatusTransfer'/1,
'dec_ENBStatusTransfer'/1,
'dec_UECapabilityInfoIndication'/1,
'dec_UplinkS1cdma2000tunneling'/1,
'dec_DownlinkS1cdma2000tunneling'/1,
'dec_MMEConfigurationUpdateFailure'/1,
'dec_MMEConfigurationUpdateAcknowledge'/1,
'dec_MMEConfigurationUpdate'/1,
'dec_ENBConfigurationUpdateFailure'/1,
'dec_ENBConfigurationUpdateAcknowledge'/1,
'dec_ENBConfigurationUpdate'/1,
'dec_S1SetupFailure'/1,
'dec_S1SetupResponse'/1,
'dec_S1SetupRequest'/1,
'dec_ErrorIndication'/1,
'dec_UE-associatedLogicalS1-ConnectionListResAck'/1,
'dec_ResetAcknowledge'/1,
'dec_UE-associatedLogicalS1-ConnectionListRes'/1,
'dec_ResetAll'/1,
'dec_ResetType'/1,
'dec_Reset'/1,
'dec_NASNonDeliveryIndication'/1,
'dec_UplinkNASTransport'/1,
'dec_InitialUEMessage'/1,
'dec_DownlinkNASTransport'/1,
'dec_UEContextModificationFailure'/1,
'dec_UEContextModificationResponse'/1,
'dec_UEContextModificationRequest'/1,
'dec_UEContextReleaseComplete'/1,
'dec_UEContextReleaseCommand'/1,
'dec_UEContextReleaseRequest'/1,
'dec_TAIItem'/1,
'dec_TAIList'/1,
'dec_Paging'/1,
'dec_InitialContextSetupFailure'/1,
'dec_E-RABSetupItemCtxtSURes'/1,
'dec_E-RABSetupListCtxtSURes'/1,
'dec_InitialContextSetupResponse'/1,
'dec_E-RABToBeSetupItemCtxtSUReq'/1,
'dec_E-RABToBeSetupListCtxtSUReq'/1,
'dec_InitialContextSetupRequest'/1,
'dec_E-RABReleaseIndication'/1,
'dec_E-RABReleaseItemBearerRelComp'/1,
'dec_E-RABReleaseListBearerRelComp'/1,
'dec_E-RABReleaseResponse'/1,
'dec_E-RABReleaseCommand'/1,
'dec_E-RABModifyItemBearerModRes'/1,
'dec_E-RABModifyListBearerModRes'/1,
'dec_E-RABModifyResponse'/1,
'dec_E-RABToBeModifiedItemBearerModReq'/1,
'dec_E-RABToBeModifiedListBearerModReq'/1,
'dec_E-RABModifyRequest'/1,
'dec_E-RABSetupItemBearerSURes'/1,
'dec_E-RABSetupListBearerSURes'/1,
'dec_E-RABSetupResponse'/1,
'dec_E-RABToBeSetupItemBearerSUReq'/1,
'dec_E-RABToBeSetupListBearerSUReq'/1,
'dec_E-RABSetupRequest'/1,
'dec_HandoverCancelAcknowledge'/1,
'dec_HandoverCancel'/1,
'dec_PathSwitchRequestFailure'/1,
'dec_E-RABToBeSwitchedULItem'/1,
'dec_E-RABToBeSwitchedULList'/1,
'dec_PathSwitchRequestAcknowledge'/1,
'dec_E-RABToBeSwitchedDLItem'/1,
'dec_E-RABToBeSwitchedDLList'/1,
'dec_PathSwitchRequest'/1,
'dec_HandoverNotify'/1,
'dec_HandoverFailure'/1,
'dec_E-RABFailedToSetupItemHOReqAck'/1,
'dec_E-RABFailedtoSetupListHOReqAck'/1,
'dec_E-RABAdmittedItem'/1,
'dec_E-RABAdmittedList'/1,
'dec_HandoverRequestAcknowledge'/1,
'dec_E-RABToBeSetupItemHOReq'/1,
'dec_E-RABToBeSetupListHOReq'/1,
'dec_HandoverRequest'/1,
'dec_HandoverPreparationFailure'/1,
'dec_E-RABDataForwardingItem'/1,
'dec_E-RABSubjecttoDataForwardingList'/1,
'dec_HandoverCommand'/1,
'dec_HandoverRequired'/1
]).

-export([
'id-Target-ToSource-TransparentContainer-Secondary'/0,
'id-Source-ToTarget-TransparentContainer-Secondary'/0,
'id-DefaultPagingDRX'/0,
'id-NASSecurityParameterstoE-UTRAN'/0,
'id-NASSecurityParametersfromE-UTRAN'/0,
'id-RRC-Establishment-Cause'/0,
'id-MSClassmark3'/0,
'id-MSClassmark2'/0,
'id-TraceCollectionEntityIPAddress'/0,
'id-SONConfigurationTransferMCT'/0,
'id-SONConfigurationTransferECT'/0,
'id-CSG-IdList'/0,
'id-CSG-Id'/0,
'id-NAS-DownlinkCount'/0,
'id-SRVCCHOIndication'/0,
'id-SRVCCOperationPossible'/0,
'id-Target-ToSource-TransparentContainer'/0,
'id-Inter-SystemInformationTransferTypeMDT'/0,
'id-Inter-SystemInformationTransferTypeEDT'/0,
'id-BroadcastCompletedAreaList'/0,
'id-WarningMessageContents'/0,
'id-DataCodingScheme'/0,
'id-WarningSecurityInfo'/0,
'id-WarningType'/0,
'id-NumberofBroadcastRequest'/0,
'id-RepetitionPeriod'/0,
'id-WarningAreaList'/0,
'id-SerialNumber'/0,
'id-MessageIdentifier'/0,
'id-E-RABReleasedList'/0,
'id-CNDomain'/0,
'id-CSFallbackIndicator'/0,
'id-UESecurityCapabilities'/0,
'id-SubscriberProfileIDforRFP'/0,
'id-ServedGUMMEIs'/0,
'id-Source-ToTarget-TransparentContainer'/0,
'id-E-RABFailedToBeReleasedList'/0,
'id-cdma2000OneXSRVCCInfo'/0,
'id-OverloadResponse'/0,
'id-EUTRAN-CGI'/0,
'id-UE-S1AP-IDs'/0,
'id-RequestType'/0,
'id-cdma2000OneXRAND'/0,
'id-S-TMSI'/0,
'id-E-RABToBeSwitchedULList'/0,
'id-E-RABToBeSwitchedULItem'/0,
'id-UE-associatedLogicalS1-ConnectionListResAck'/0,
'id-ResetType'/0,
'id-UE-associatedLogicalS1-ConnectionItem'/0,
'id-eNB-StatusTransfer-TransparentContainer'/0,
'id-Bearers-SubjectToStatusTransfer-Item'/0,
'id-SourceMME-UE-S1AP-ID'/0,
'id-RelativeMMECapacity'/0,
'id-E-UTRAN-Trace-ID'/0,
'id-cdma2000HORequiredIndication'/0,
'id-cdma2000HOStatus'/0,
'id-UEIdentityIndexValue'/0,
'id-Direct-Forwarding-Path-Availability'/0,
'id-E-RABInformationListItem'/0,
'id-GUMMEI-ID'/0,
'id-UERadioCapability'/0,
'id-SecurityKey'/0,
'id-cdma2000SectorID'/0,
'id-cdma2000RATType'/0,
'id-cdma2000PDU'/0,
'id-E-RABReleaseListBearerRelComp'/0,
'id-TAI'/0,
'id-uEaggregateMaximumBitrate'/0,
'id-TimeToWait'/0,
'id-SupportedTAs'/0,
'id-ServedPLMNs'/0,
'id-MMEname'/0,
'id-eNBname'/0,
'id-Global-ENB-ID'/0,
'id-CriticalityDiagnostics'/0,
'id-UTRANtoLTEHOInformationRes'/0,
'id-GERANtoLTEHOInformationRes'/0,
'id-E-RABToBeSetupListHOReq'/0,
'id-E-RABToBeSetupItemCtxtSUReq'/0,
'id-E-RABSetupListCtxtSURes'/0,
'id-E-RABSetupItemCtxtSURes'/0,
'id-E-RABReleaseItemHOCmd'/0,
'id-E-RABFailedToSetupListCtxtSURes'/0,
'id-TAIItem'/0,
'id-TAIList'/0,
'id-pagingDRX'/0,
'id-UEPagingID'/0,
'id-HandoverRestrictionList'/0,
'id-SecurityContext'/0,
'id-E-RABSetupItemBearerSURes'/0,
'id-E-RABReleaseItem'/0,
'id-E-RABModifyItemBearerModRes'/0,
'id-E-RABToBeModifiedItemBearerModReq'/0,
'id-E-RABItem'/0,
'id-E-RABFailedToReleaseList'/0,
'id-E-RABToBeReleasedList'/0,
'id-E-RABFailedToModifyList'/0,
'id-E-RABModifyListBearerModRes'/0,
'id-E-RABToBeModifiedListBearerModReq'/0,
'id-E-RABFailedToSetupListBearerSURes'/0,
'id-E-RABSetupListBearerSURes'/0,
'id-E-RABToBeSetupItemHOReq'/0,
'id-NAS-PDU'/0,
'id-TraceActivation'/0,
'id-E-RABToBeSetupListCtxtSUReq'/0,
'id-E-RABToBeSwitchedDLItem'/0,
'id-E-RABToBeSwitchedDLList'/0,
'id-E-RABFailedtoSetupItemHOReqAck'/0,
'id-E-RABAdmittedItem'/0,
'id-E-RABFailedToSetupListHOReqAck'/0,
'id-E-RABAdmittedList'/0,
'id-E-RABToBeSetupItemBearerSUReq'/0,
'id-E-RABToBeSetupListBearerSUReq'/0,
'id-E-RABReleaseItemBearerRelComp'/0,
'id-E-RABDataForwardingItem'/0,
'id-E-RABtoReleaseListHOCmd'/0,
'id-E-RABSubjecttoDataForwardingList'/0,
'id-eNB-UE-S1AP-ID'/0,
'id-TargetID'/0,
'id-SourceID'/0,
'id-Cause'/0,
'id-HandoverType'/0,
'id-MME-UE-S1AP-ID'/0,
'maxnoofMMECs'/0,
'maxnoofGroupIDs'/0,
'maxnoofRATs'/0,
'maxnoofeNBX2TLAs'/0,
'maxnoofCellinEAI'/0,
'maxnoofCellinTAI'/0,
'maxnoofEmergencyAreaID'/0,
'maxnoofCellID'/0,
'maxnoofTAIforWarning'/0,
'maxnoofCells'/0,
'maxNrOfIndividualS1ConnectionsToReset'/0,
'maxnoofForbTACs'/0,
'maxnoofForbLACs'/0,
'maxnoofEPLMNsPlusOne'/0,
'maxnoofEPLMNs'/0,
'maxnoofPLMNsPerMME'/0,
'maxnoofBPLMNs'/0,
'maxNrOfErrors'/0,
'maxnoofTACs'/0,
'maxnoofTAIs'/0,
'maxNrOfE-RABs'/0,
'maxNrOfCSGs'/0,
'maxProtocolIEs'/0,
'maxProtocolExtensions'/0,
'maxPrivateIEs'/0,
'id-CellTrafficTrace'/0,
'id-MMEConfigurationTransfer'/0,
'id-eNBConfigurationTransfer'/0,
'id-PrivateMessage'/0,
'id-MMEDirectInformationTransfer'/0,
'id-eNBDirectInformationTransfer'/0,
'id-WriteReplaceWarning'/0,
'id-OverloadStop'/0,
'id-OverloadStart'/0,
'id-LocationReport'/0,
'id-LocationReportingFailureIndication'/0,
'id-LocationReportingControl'/0,
'id-MMEConfigurationUpdate'/0,
'id-ENBConfigurationUpdate'/0,
'id-TraceFailureIndication'/0,
'id-TraceStart'/0,
'id-DeactivateTrace'/0,
'id-MMEStatusTransfer'/0,
'id-eNBStatusTransfer'/0,
'id-UEContextRelease'/0,
'id-UECapabilityInfoIndication'/0,
'id-UEContextModification'/0,
'id-UplinkS1cdma2000tunneling'/0,
'id-DownlinkS1cdma2000tunneling'/0,
'id-UEContextReleaseRequest'/0,
'id-S1Setup'/0,
'id-NASNonDeliveryIndication'/0,
'id-ErrorIndication'/0,
'id-Reset'/0,
'id-uplinkNASTransport'/0,
'id-initialUEMessage'/0,
'id-downlinkNASTransport'/0,
'id-Paging'/0,
'id-InitialContextSetup'/0,
'id-E-RABReleaseIndication'/0,
'id-E-RABRelease'/0,
'id-E-RABModify'/0,
'id-E-RABSetup'/0,
'id-HandoverCancel'/0,
'id-PathSwitchRequest'/0,
'id-HandoverNotification'/0,
'id-HandoverResourceAllocation'/0,
'id-HandoverPreparation'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('UnsuccessfulOutcome',Data) -> 'enc_UnsuccessfulOutcome'(Data);
encode_disp('SuccessfulOutcome',Data) -> 'enc_SuccessfulOutcome'(Data);
encode_disp('InitiatingMessage',Data) -> 'enc_InitiatingMessage'(Data);
encode_disp('S1AP-PDU',Data) -> 'enc_S1AP-PDU'(Data);
encode_disp('X2TNLConfigurationInfo',Data) -> 'enc_X2TNLConfigurationInfo'(Data);
encode_disp('WarningMessageContents',Data) -> 'enc_WarningMessageContents'(Data);
encode_disp('WarningSecurityInfo',Data) -> 'enc_WarningSecurityInfo'(Data);
encode_disp('WarningType',Data) -> 'enc_WarningType'(Data);
encode_disp('WarningAreaList',Data) -> 'enc_WarningAreaList'(Data);
encode_disp('UESecurityCapabilities',Data) -> 'enc_UESecurityCapabilities'(Data);
encode_disp('UERadioCapability',Data) -> 'enc_UERadioCapability'(Data);
encode_disp('UEPagingID',Data) -> 'enc_UEPagingID'(Data);
encode_disp('UE-HistoryInformation',Data) -> 'enc_UE-HistoryInformation'(Data);
encode_disp('UEIdentityIndexValue',Data) -> 'enc_UEIdentityIndexValue'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionItem',Data) -> 'enc_UE-associatedLogicalS1-ConnectionItem'(Data);
encode_disp('UE-S1AP-ID-pair',Data) -> 'enc_UE-S1AP-ID-pair'(Data);
encode_disp('UE-S1AP-IDs',Data) -> 'enc_UE-S1AP-IDs'(Data);
encode_disp('UEAggregateMaximumBitrate',Data) -> 'enc_UEAggregateMaximumBitrate'(Data);
encode_disp('TypeOfError',Data) -> 'enc_TypeOfError'(Data);
encode_disp('E-UTRAN-Trace-ID',Data) -> 'enc_E-UTRAN-Trace-ID'(Data);
encode_disp('TraceDepth',Data) -> 'enc_TraceDepth'(Data);
encode_disp('TraceActivation',Data) -> 'enc_TraceActivation'(Data);
encode_disp('TransportLayerAddress',Data) -> 'enc_TransportLayerAddress'(Data);
encode_disp('Time-UE-StayedInCell',Data) -> 'enc_Time-UE-StayedInCell'(Data);
encode_disp('TimeToWait',Data) -> 'enc_TimeToWait'(Data);
encode_disp('TargetBSS-ToSourceBSS-TransparentContainer',Data) -> 'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Data);
encode_disp('TargetRNC-ToSourceRNC-TransparentContainer',Data) -> 'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Data);
encode_disp('Target-ToSource-TransparentContainer',Data) -> 'enc_Target-ToSource-TransparentContainer'(Data);
encode_disp('TargeteNB-ToSourceeNB-TransparentContainer',Data) -> 'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Data);
encode_disp('TargetRNC-ID',Data) -> 'enc_TargetRNC-ID'(Data);
encode_disp('TargeteNB-ID',Data) -> 'enc_TargeteNB-ID'(Data);
encode_disp('TargetID',Data) -> 'enc_TargetID'(Data);
encode_disp('TBCD-STRING',Data) -> 'enc_TBCD-STRING'(Data);
encode_disp('CompletedCellinTAI-Item',Data) -> 'enc_CompletedCellinTAI-Item'(Data);
encode_disp('CompletedCellinTAI',Data) -> 'enc_CompletedCellinTAI'(Data);
encode_disp('TAI-Broadcast-Item',Data) -> 'enc_TAI-Broadcast-Item'(Data);
encode_disp('TAI-Broadcast',Data) -> 'enc_TAI-Broadcast'(Data);
encode_disp('TAI',Data) -> 'enc_TAI'(Data);
encode_disp('TAIListforWarning',Data) -> 'enc_TAIListforWarning'(Data);
encode_disp('TAC',Data) -> 'enc_TAC'(Data);
encode_disp('S-TMSI',Data) -> 'enc_S-TMSI'(Data);
encode_disp('SupportedTAs-Item',Data) -> 'enc_SupportedTAs-Item'(Data);
encode_disp('SupportedTAs',Data) -> 'enc_SupportedTAs'(Data);
encode_disp('SubscriberProfileIDforRFP',Data) -> 'enc_SubscriberProfileIDforRFP'(Data);
encode_disp('ServedPLMNs',Data) -> 'enc_ServedPLMNs'(Data);
encode_disp('ServedMMECs',Data) -> 'enc_ServedMMECs'(Data);
encode_disp('ServedGroupIDs',Data) -> 'enc_ServedGroupIDs'(Data);
encode_disp('ServedGUMMEIsItem',Data) -> 'enc_ServedGUMMEIsItem'(Data);
encode_disp('ServedGUMMEIs',Data) -> 'enc_ServedGUMMEIs'(Data);
encode_disp('SourceRNC-ToTargetRNC-TransparentContainer',Data) -> 'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Data);
encode_disp('SourceeNB-ToTargeteNB-TransparentContainer',Data) -> 'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Data);
encode_disp('SRVCCHOIndication',Data) -> 'enc_SRVCCHOIndication'(Data);
encode_disp('SRVCCOperationPossible',Data) -> 'enc_SRVCCOperationPossible'(Data);
encode_disp('SourceeNB-ID',Data) -> 'enc_SourceeNB-ID'(Data);
encode_disp('SourceBSS-ToTargetBSS-TransparentContainer',Data) -> 'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Data);
encode_disp('Source-ToTarget-TransparentContainer',Data) -> 'enc_Source-ToTarget-TransparentContainer'(Data);
encode_disp('SONConfigurationTransfer',Data) -> 'enc_SONConfigurationTransfer'(Data);
encode_disp('SONInformationReply',Data) -> 'enc_SONInformationReply'(Data);
encode_disp('SONInformationRequest',Data) -> 'enc_SONInformationRequest'(Data);
encode_disp('SONInformation',Data) -> 'enc_SONInformation'(Data);
encode_disp('SerialNumber',Data) -> 'enc_SerialNumber'(Data);
encode_disp('SecurityContext',Data) -> 'enc_SecurityContext'(Data);
encode_disp('SecurityKey',Data) -> 'enc_SecurityKey'(Data);
encode_disp('RRC-Establishment-Cause',Data) -> 'enc_RRC-Establishment-Cause'(Data);
encode_disp('RRC-Container',Data) -> 'enc_RRC-Container'(Data);
encode_disp('RNC-ID',Data) -> 'enc_RNC-ID'(Data);
encode_disp('RepetitionPeriod',Data) -> 'enc_RepetitionPeriod'(Data);
encode_disp('ReportArea',Data) -> 'enc_ReportArea'(Data);
encode_disp('RIMRoutingAddress',Data) -> 'enc_RIMRoutingAddress'(Data);
encode_disp('RIMInformation',Data) -> 'enc_RIMInformation'(Data);
encode_disp('RIMTransfer',Data) -> 'enc_RIMTransfer'(Data);
encode_disp('RequestType',Data) -> 'enc_RequestType'(Data);
encode_disp('RAC',Data) -> 'enc_RAC'(Data);
encode_disp('RelativeMMECapacity',Data) -> 'enc_RelativeMMECapacity'(Data);
encode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'enc_ReceiveStatusofULPDCPSDUs'(Data);
encode_disp('QCI',Data) -> 'enc_QCI'(Data);
encode_disp('PriorityLevel',Data) -> 'enc_PriorityLevel'(Data);
encode_disp('Pre-emptionVulnerability',Data) -> 'enc_Pre-emptionVulnerability'(Data);
encode_disp('Pre-emptionCapability',Data) -> 'enc_Pre-emptionCapability'(Data);
encode_disp('PLMNidentity',Data) -> 'enc_PLMNidentity'(Data);
encode_disp('PDCP-SN',Data) -> 'enc_PDCP-SN'(Data);
encode_disp('PagingDRX',Data) -> 'enc_PagingDRX'(Data);
encode_disp('OverloadResponse',Data) -> 'enc_OverloadResponse'(Data);
encode_disp('OverloadAction',Data) -> 'enc_OverloadAction'(Data);
encode_disp('OldBSS-ToNewBSS-Information',Data) -> 'enc_OldBSS-ToNewBSS-Information'(Data);
encode_disp('NumberofBroadcast',Data) -> 'enc_NumberofBroadcast'(Data);
encode_disp('NumberofBroadcastRequest',Data) -> 'enc_NumberofBroadcastRequest'(Data);
encode_disp('NASSecurityParameterstoE-UTRAN',Data) -> 'enc_NASSecurityParameterstoE-UTRAN'(Data);
encode_disp('NASSecurityParametersfromE-UTRAN',Data) -> 'enc_NASSecurityParametersfromE-UTRAN'(Data);
encode_disp('NAS-PDU',Data) -> 'enc_NAS-PDU'(Data);
encode_disp('MSClassmark3',Data) -> 'enc_MSClassmark3'(Data);
encode_disp('MSClassmark2',Data) -> 'enc_MSClassmark2'(Data);
encode_disp('M-TMSI',Data) -> 'enc_M-TMSI'(Data);
encode_disp('MME-UE-S1AP-ID',Data) -> 'enc_MME-UE-S1AP-ID'(Data);
encode_disp('MME-Code',Data) -> 'enc_MME-Code'(Data);
encode_disp('MME-Group-ID',Data) -> 'enc_MME-Group-ID'(Data);
encode_disp('MMEname',Data) -> 'enc_MMEname'(Data);
encode_disp('MessageIdentifier',Data) -> 'enc_MessageIdentifier'(Data);
encode_disp('L3-Information',Data) -> 'enc_L3-Information'(Data);
encode_disp('LastVisitedGERANCellInformation',Data) -> 'enc_LastVisitedGERANCellInformation'(Data);
encode_disp('LastVisitedUTRANCellInformation',Data) -> 'enc_LastVisitedUTRANCellInformation'(Data);
encode_disp('LastVisitedEUTRANCellInformation',Data) -> 'enc_LastVisitedEUTRANCellInformation'(Data);
encode_disp('LastVisitedCell-Item',Data) -> 'enc_LastVisitedCell-Item'(Data);
encode_disp('LAI',Data) -> 'enc_LAI'(Data);
encode_disp('LAC',Data) -> 'enc_LAC'(Data);
encode_disp('InterfacesToTrace',Data) -> 'enc_InterfacesToTrace'(Data);
encode_disp('IntegrityProtectionAlgorithms',Data) -> 'enc_IntegrityProtectionAlgorithms'(Data);
encode_disp('IMSI',Data) -> 'enc_IMSI'(Data);
encode_disp('HFN',Data) -> 'enc_HFN'(Data);
encode_disp('HandoverType',Data) -> 'enc_HandoverType'(Data);
encode_disp('HandoverRestrictionList',Data) -> 'enc_HandoverRestrictionList'(Data);
encode_disp('GUMMEI',Data) -> 'enc_GUMMEI'(Data);
encode_disp('GTP-TEID',Data) -> 'enc_GTP-TEID'(Data);
encode_disp('GBR-QosInformation',Data) -> 'enc_GBR-QosInformation'(Data);
encode_disp('ForbiddenLACs',Data) -> 'enc_ForbiddenLACs'(Data);
encode_disp('ForbiddenLAs-Item',Data) -> 'enc_ForbiddenLAs-Item'(Data);
encode_disp('ForbiddenLAs',Data) -> 'enc_ForbiddenLAs'(Data);
encode_disp('ForbiddenTACs',Data) -> 'enc_ForbiddenTACs'(Data);
encode_disp('ForbiddenTAs-Item',Data) -> 'enc_ForbiddenTAs-Item'(Data);
encode_disp('ForbiddenTAs',Data) -> 'enc_ForbiddenTAs'(Data);
encode_disp('ForbiddenInterRATs',Data) -> 'enc_ForbiddenInterRATs'(Data);
encode_disp('ExtendedRNC-ID',Data) -> 'enc_ExtendedRNC-ID'(Data);
encode_disp('EUTRAN-CGI',Data) -> 'enc_EUTRAN-CGI'(Data);
encode_disp('E-RABLevelQoSParameters',Data) -> 'enc_E-RABLevelQoSParameters'(Data);
encode_disp('E-RABItem',Data) -> 'enc_E-RABItem'(Data);
encode_disp('E-RABList',Data) -> 'enc_E-RABList'(Data);
encode_disp('E-RABInformationListItem',Data) -> 'enc_E-RABInformationListItem'(Data);
encode_disp('E-RABInformationList',Data) -> 'enc_E-RABInformationList'(Data);
encode_disp('E-RAB-ID',Data) -> 'enc_E-RAB-ID'(Data);
encode_disp('EventType',Data) -> 'enc_EventType'(Data);
encode_disp('EPLMNs',Data) -> 'enc_EPLMNs'(Data);
encode_disp('EncryptionAlgorithms',Data) -> 'enc_EncryptionAlgorithms'(Data);
encode_disp('ENBX2TLAs',Data) -> 'enc_ENBX2TLAs'(Data);
encode_disp('ENBname',Data) -> 'enc_ENBname'(Data);
encode_disp('ENB-UE-S1AP-ID',Data) -> 'enc_ENB-UE-S1AP-ID'(Data);
encode_disp('ENB-StatusTransfer-TransparentContainer',Data) -> 'enc_ENB-StatusTransfer-TransparentContainer'(Data);
encode_disp('Global-ENB-ID',Data) -> 'enc_Global-ENB-ID'(Data);
encode_disp('GERAN-Cell-ID',Data) -> 'enc_GERAN-Cell-ID'(Data);
encode_disp('ENB-ID',Data) -> 'enc_ENB-ID'(Data);
encode_disp('CompletedCellinEAI-Item',Data) -> 'enc_CompletedCellinEAI-Item'(Data);
encode_disp('CompletedCellinEAI',Data) -> 'enc_CompletedCellinEAI'(Data);
encode_disp('EmergencyAreaID-Broadcast-Item',Data) -> 'enc_EmergencyAreaID-Broadcast-Item'(Data);
encode_disp('EmergencyAreaID-Broadcast',Data) -> 'enc_EmergencyAreaID-Broadcast'(Data);
encode_disp('EmergencyAreaID',Data) -> 'enc_EmergencyAreaID'(Data);
encode_disp('EmergencyAreaIDList',Data) -> 'enc_EmergencyAreaIDList'(Data);
encode_disp('ECGIList',Data) -> 'enc_ECGIList'(Data);
encode_disp('Direct-Forwarding-Path-Availability',Data) -> 'enc_Direct-Forwarding-Path-Availability'(Data);
encode_disp('DL-Forwarding',Data) -> 'enc_DL-Forwarding'(Data);
encode_disp('DataCodingScheme',Data) -> 'enc_DataCodingScheme'(Data);
encode_disp('CriticalityDiagnostics-IE-Item',Data) -> 'enc_CriticalityDiagnostics-IE-Item'(Data);
encode_disp('CriticalityDiagnostics-IE-List',Data) -> 'enc_CriticalityDiagnostics-IE-List'(Data);
encode_disp('CriticalityDiagnostics',Data) -> 'enc_CriticalityDiagnostics'(Data);
encode_disp('COUNTvalue',Data) -> 'enc_COUNTvalue'(Data);
encode_disp('CSG-IdList-Item',Data) -> 'enc_CSG-IdList-Item'(Data);
encode_disp('CSG-IdList',Data) -> 'enc_CSG-IdList'(Data);
encode_disp('CSG-Id',Data) -> 'enc_CSG-Id'(Data);
encode_disp('CSFallbackIndicator',Data) -> 'enc_CSFallbackIndicator'(Data);
encode_disp('CNDomain',Data) -> 'enc_CNDomain'(Data);
encode_disp('CI',Data) -> 'enc_CI'(Data);
encode_disp('CGI',Data) -> 'enc_CGI'(Data);
encode_disp('CellType',Data) -> 'enc_CellType'(Data);
encode_disp('Cell-Size',Data) -> 'enc_Cell-Size'(Data);
encode_disp('Cdma2000OneXRAND',Data) -> 'enc_Cdma2000OneXRAND'(Data);
encode_disp('Cdma2000OneXPilot',Data) -> 'enc_Cdma2000OneXPilot'(Data);
encode_disp('Cdma2000OneXMSI',Data) -> 'enc_Cdma2000OneXMSI'(Data);
encode_disp('Cdma2000OneXMEID',Data) -> 'enc_Cdma2000OneXMEID'(Data);
encode_disp('Cdma2000OneXSRVCCInfo',Data) -> 'enc_Cdma2000OneXSRVCCInfo'(Data);
encode_disp('Cdma2000HORequiredIndication',Data) -> 'enc_Cdma2000HORequiredIndication'(Data);
encode_disp('Cdma2000HOStatus',Data) -> 'enc_Cdma2000HOStatus'(Data);
encode_disp('Cdma2000SectorID',Data) -> 'enc_Cdma2000SectorID'(Data);
encode_disp('Cdma2000RATType',Data) -> 'enc_Cdma2000RATType'(Data);
encode_disp('Cdma2000PDU',Data) -> 'enc_Cdma2000PDU'(Data);
encode_disp('CellID-Broadcast-Item',Data) -> 'enc_CellID-Broadcast-Item'(Data);
encode_disp('CellID-Broadcast',Data) -> 'enc_CellID-Broadcast'(Data);
encode_disp('CellIdentity',Data) -> 'enc_CellIdentity'(Data);
encode_disp('CauseNas',Data) -> 'enc_CauseNas'(Data);
encode_disp('CauseTransport',Data) -> 'enc_CauseTransport'(Data);
encode_disp('CauseRadioNetwork',Data) -> 'enc_CauseRadioNetwork'(Data);
encode_disp('CauseProtocol',Data) -> 'enc_CauseProtocol'(Data);
encode_disp('CauseMisc',Data) -> 'enc_CauseMisc'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('BroadcastCompletedAreaList',Data) -> 'enc_BroadcastCompletedAreaList'(Data);
encode_disp('BPLMNs',Data) -> 'enc_BPLMNs'(Data);
encode_disp('BitRate',Data) -> 'enc_BitRate'(Data);
encode_disp('Bearers-SubjectToStatusTransfer-Item',Data) -> 'enc_Bearers-SubjectToStatusTransfer-Item'(Data);
encode_disp('Bearers-SubjectToStatusTransferList',Data) -> 'enc_Bearers-SubjectToStatusTransferList'(Data);
encode_disp('AllocationAndRetentionPriority',Data) -> 'enc_AllocationAndRetentionPriority'(Data);
encode_disp('TriggeringMessage',Data) -> 'enc_TriggeringMessage'(Data);
encode_disp('ProtocolIE-ID',Data) -> 'enc_ProtocolIE-ID'(Data);
encode_disp('ProtocolExtensionID',Data) -> 'enc_ProtocolExtensionID'(Data);
encode_disp('ProcedureCode',Data) -> 'enc_ProcedureCode'(Data);
encode_disp('PrivateIE-ID',Data) -> 'enc_PrivateIE-ID'(Data);
encode_disp('Presence',Data) -> 'enc_Presence'(Data);
encode_disp('Criticality',Data) -> 'enc_Criticality'(Data);
encode_disp('PrivateMessage',Data) -> 'enc_PrivateMessage'(Data);
encode_disp('MMEConfigurationTransfer',Data) -> 'enc_MMEConfigurationTransfer'(Data);
encode_disp('ENBConfigurationTransfer',Data) -> 'enc_ENBConfigurationTransfer'(Data);
encode_disp('MMEDirectInformationTransfer',Data) -> 'enc_MMEDirectInformationTransfer'(Data);
encode_disp('Inter-SystemInformationTransferType',Data) -> 'enc_Inter-SystemInformationTransferType'(Data);
encode_disp('ENBDirectInformationTransfer',Data) -> 'enc_ENBDirectInformationTransfer'(Data);
encode_disp('WriteReplaceWarningResponse',Data) -> 'enc_WriteReplaceWarningResponse'(Data);
encode_disp('WriteReplaceWarningRequest',Data) -> 'enc_WriteReplaceWarningRequest'(Data);
encode_disp('OverloadStop',Data) -> 'enc_OverloadStop'(Data);
encode_disp('OverloadStart',Data) -> 'enc_OverloadStart'(Data);
encode_disp('LocationReport',Data) -> 'enc_LocationReport'(Data);
encode_disp('LocationReportingFailureIndication',Data) -> 'enc_LocationReportingFailureIndication'(Data);
encode_disp('LocationReportingControl',Data) -> 'enc_LocationReportingControl'(Data);
encode_disp('CellTrafficTrace',Data) -> 'enc_CellTrafficTrace'(Data);
encode_disp('DeactivateTrace',Data) -> 'enc_DeactivateTrace'(Data);
encode_disp('TraceFailureIndication',Data) -> 'enc_TraceFailureIndication'(Data);
encode_disp('TraceStart',Data) -> 'enc_TraceStart'(Data);
encode_disp('MMEStatusTransfer',Data) -> 'enc_MMEStatusTransfer'(Data);
encode_disp('ENBStatusTransfer',Data) -> 'enc_ENBStatusTransfer'(Data);
encode_disp('UECapabilityInfoIndication',Data) -> 'enc_UECapabilityInfoIndication'(Data);
encode_disp('UplinkS1cdma2000tunneling',Data) -> 'enc_UplinkS1cdma2000tunneling'(Data);
encode_disp('DownlinkS1cdma2000tunneling',Data) -> 'enc_DownlinkS1cdma2000tunneling'(Data);
encode_disp('MMEConfigurationUpdateFailure',Data) -> 'enc_MMEConfigurationUpdateFailure'(Data);
encode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'enc_MMEConfigurationUpdateAcknowledge'(Data);
encode_disp('MMEConfigurationUpdate',Data) -> 'enc_MMEConfigurationUpdate'(Data);
encode_disp('ENBConfigurationUpdateFailure',Data) -> 'enc_ENBConfigurationUpdateFailure'(Data);
encode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'enc_ENBConfigurationUpdateAcknowledge'(Data);
encode_disp('ENBConfigurationUpdate',Data) -> 'enc_ENBConfigurationUpdate'(Data);
encode_disp('S1SetupFailure',Data) -> 'enc_S1SetupFailure'(Data);
encode_disp('S1SetupResponse',Data) -> 'enc_S1SetupResponse'(Data);
encode_disp('S1SetupRequest',Data) -> 'enc_S1SetupRequest'(Data);
encode_disp('ErrorIndication',Data) -> 'enc_ErrorIndication'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListResAck'(Data);
encode_disp('ResetAcknowledge',Data) -> 'enc_ResetAcknowledge'(Data);
encode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'enc_UE-associatedLogicalS1-ConnectionListRes'(Data);
encode_disp('ResetAll',Data) -> 'enc_ResetAll'(Data);
encode_disp('ResetType',Data) -> 'enc_ResetType'(Data);
encode_disp('Reset',Data) -> 'enc_Reset'(Data);
encode_disp('NASNonDeliveryIndication',Data) -> 'enc_NASNonDeliveryIndication'(Data);
encode_disp('UplinkNASTransport',Data) -> 'enc_UplinkNASTransport'(Data);
encode_disp('InitialUEMessage',Data) -> 'enc_InitialUEMessage'(Data);
encode_disp('DownlinkNASTransport',Data) -> 'enc_DownlinkNASTransport'(Data);
encode_disp('UEContextModificationFailure',Data) -> 'enc_UEContextModificationFailure'(Data);
encode_disp('UEContextModificationResponse',Data) -> 'enc_UEContextModificationResponse'(Data);
encode_disp('UEContextModificationRequest',Data) -> 'enc_UEContextModificationRequest'(Data);
encode_disp('UEContextReleaseComplete',Data) -> 'enc_UEContextReleaseComplete'(Data);
encode_disp('UEContextReleaseCommand',Data) -> 'enc_UEContextReleaseCommand'(Data);
encode_disp('UEContextReleaseRequest',Data) -> 'enc_UEContextReleaseRequest'(Data);
encode_disp('TAIItem',Data) -> 'enc_TAIItem'(Data);
encode_disp('TAIList',Data) -> 'enc_TAIList'(Data);
encode_disp('Paging',Data) -> 'enc_Paging'(Data);
encode_disp('InitialContextSetupFailure',Data) -> 'enc_InitialContextSetupFailure'(Data);
encode_disp('E-RABSetupItemCtxtSURes',Data) -> 'enc_E-RABSetupItemCtxtSURes'(Data);
encode_disp('E-RABSetupListCtxtSURes',Data) -> 'enc_E-RABSetupListCtxtSURes'(Data);
encode_disp('InitialContextSetupResponse',Data) -> 'enc_InitialContextSetupResponse'(Data);
encode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'enc_E-RABToBeSetupItemCtxtSUReq'(Data);
encode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'enc_E-RABToBeSetupListCtxtSUReq'(Data);
encode_disp('InitialContextSetupRequest',Data) -> 'enc_InitialContextSetupRequest'(Data);
encode_disp('E-RABReleaseIndication',Data) -> 'enc_E-RABReleaseIndication'(Data);
encode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'enc_E-RABReleaseItemBearerRelComp'(Data);
encode_disp('E-RABReleaseListBearerRelComp',Data) -> 'enc_E-RABReleaseListBearerRelComp'(Data);
encode_disp('E-RABReleaseResponse',Data) -> 'enc_E-RABReleaseResponse'(Data);
encode_disp('E-RABReleaseCommand',Data) -> 'enc_E-RABReleaseCommand'(Data);
encode_disp('E-RABModifyItemBearerModRes',Data) -> 'enc_E-RABModifyItemBearerModRes'(Data);
encode_disp('E-RABModifyListBearerModRes',Data) -> 'enc_E-RABModifyListBearerModRes'(Data);
encode_disp('E-RABModifyResponse',Data) -> 'enc_E-RABModifyResponse'(Data);
encode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'enc_E-RABToBeModifiedItemBearerModReq'(Data);
encode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'enc_E-RABToBeModifiedListBearerModReq'(Data);
encode_disp('E-RABModifyRequest',Data) -> 'enc_E-RABModifyRequest'(Data);
encode_disp('E-RABSetupItemBearerSURes',Data) -> 'enc_E-RABSetupItemBearerSURes'(Data);
encode_disp('E-RABSetupListBearerSURes',Data) -> 'enc_E-RABSetupListBearerSURes'(Data);
encode_disp('E-RABSetupResponse',Data) -> 'enc_E-RABSetupResponse'(Data);
encode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'enc_E-RABToBeSetupItemBearerSUReq'(Data);
encode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'enc_E-RABToBeSetupListBearerSUReq'(Data);
encode_disp('E-RABSetupRequest',Data) -> 'enc_E-RABSetupRequest'(Data);
encode_disp('HandoverCancelAcknowledge',Data) -> 'enc_HandoverCancelAcknowledge'(Data);
encode_disp('HandoverCancel',Data) -> 'enc_HandoverCancel'(Data);
encode_disp('PathSwitchRequestFailure',Data) -> 'enc_PathSwitchRequestFailure'(Data);
encode_disp('E-RABToBeSwitchedULItem',Data) -> 'enc_E-RABToBeSwitchedULItem'(Data);
encode_disp('E-RABToBeSwitchedULList',Data) -> 'enc_E-RABToBeSwitchedULList'(Data);
encode_disp('PathSwitchRequestAcknowledge',Data) -> 'enc_PathSwitchRequestAcknowledge'(Data);
encode_disp('E-RABToBeSwitchedDLItem',Data) -> 'enc_E-RABToBeSwitchedDLItem'(Data);
encode_disp('E-RABToBeSwitchedDLList',Data) -> 'enc_E-RABToBeSwitchedDLList'(Data);
encode_disp('PathSwitchRequest',Data) -> 'enc_PathSwitchRequest'(Data);
encode_disp('HandoverNotify',Data) -> 'enc_HandoverNotify'(Data);
encode_disp('HandoverFailure',Data) -> 'enc_HandoverFailure'(Data);
encode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'enc_E-RABFailedToSetupItemHOReqAck'(Data);
encode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'enc_E-RABFailedtoSetupListHOReqAck'(Data);
encode_disp('E-RABAdmittedItem',Data) -> 'enc_E-RABAdmittedItem'(Data);
encode_disp('E-RABAdmittedList',Data) -> 'enc_E-RABAdmittedList'(Data);
encode_disp('HandoverRequestAcknowledge',Data) -> 'enc_HandoverRequestAcknowledge'(Data);
encode_disp('E-RABToBeSetupItemHOReq',Data) -> 'enc_E-RABToBeSetupItemHOReq'(Data);
encode_disp('E-RABToBeSetupListHOReq',Data) -> 'enc_E-RABToBeSetupListHOReq'(Data);
encode_disp('HandoverRequest',Data) -> 'enc_HandoverRequest'(Data);
encode_disp('HandoverPreparationFailure',Data) -> 'enc_HandoverPreparationFailure'(Data);
encode_disp('E-RABDataForwardingItem',Data) -> 'enc_E-RABDataForwardingItem'(Data);
encode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'enc_E-RABSubjecttoDataForwardingList'(Data);
encode_disp('HandoverCommand',Data) -> 'enc_HandoverCommand'(Data);
encode_disp('HandoverRequired',Data) -> 'enc_HandoverRequired'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('UnsuccessfulOutcome',Data) -> 'dec_UnsuccessfulOutcome'(Data);
decode_disp('SuccessfulOutcome',Data) -> 'dec_SuccessfulOutcome'(Data);
decode_disp('InitiatingMessage',Data) -> 'dec_InitiatingMessage'(Data);
decode_disp('S1AP-PDU',Data) -> 'dec_S1AP-PDU'(Data);
decode_disp('X2TNLConfigurationInfo',Data) -> 'dec_X2TNLConfigurationInfo'(Data);
decode_disp('WarningMessageContents',Data) -> 'dec_WarningMessageContents'(Data);
decode_disp('WarningSecurityInfo',Data) -> 'dec_WarningSecurityInfo'(Data);
decode_disp('WarningType',Data) -> 'dec_WarningType'(Data);
decode_disp('WarningAreaList',Data) -> 'dec_WarningAreaList'(Data);
decode_disp('UESecurityCapabilities',Data) -> 'dec_UESecurityCapabilities'(Data);
decode_disp('UERadioCapability',Data) -> 'dec_UERadioCapability'(Data);
decode_disp('UEPagingID',Data) -> 'dec_UEPagingID'(Data);
decode_disp('UE-HistoryInformation',Data) -> 'dec_UE-HistoryInformation'(Data);
decode_disp('UEIdentityIndexValue',Data) -> 'dec_UEIdentityIndexValue'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionItem',Data) -> 'dec_UE-associatedLogicalS1-ConnectionItem'(Data);
decode_disp('UE-S1AP-ID-pair',Data) -> 'dec_UE-S1AP-ID-pair'(Data);
decode_disp('UE-S1AP-IDs',Data) -> 'dec_UE-S1AP-IDs'(Data);
decode_disp('UEAggregateMaximumBitrate',Data) -> 'dec_UEAggregateMaximumBitrate'(Data);
decode_disp('TypeOfError',Data) -> 'dec_TypeOfError'(Data);
decode_disp('E-UTRAN-Trace-ID',Data) -> 'dec_E-UTRAN-Trace-ID'(Data);
decode_disp('TraceDepth',Data) -> 'dec_TraceDepth'(Data);
decode_disp('TraceActivation',Data) -> 'dec_TraceActivation'(Data);
decode_disp('TransportLayerAddress',Data) -> 'dec_TransportLayerAddress'(Data);
decode_disp('Time-UE-StayedInCell',Data) -> 'dec_Time-UE-StayedInCell'(Data);
decode_disp('TimeToWait',Data) -> 'dec_TimeToWait'(Data);
decode_disp('TargetBSS-ToSourceBSS-TransparentContainer',Data) -> 'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Data);
decode_disp('TargetRNC-ToSourceRNC-TransparentContainer',Data) -> 'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Data);
decode_disp('Target-ToSource-TransparentContainer',Data) -> 'dec_Target-ToSource-TransparentContainer'(Data);
decode_disp('TargeteNB-ToSourceeNB-TransparentContainer',Data) -> 'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Data);
decode_disp('TargetRNC-ID',Data) -> 'dec_TargetRNC-ID'(Data);
decode_disp('TargeteNB-ID',Data) -> 'dec_TargeteNB-ID'(Data);
decode_disp('TargetID',Data) -> 'dec_TargetID'(Data);
decode_disp('TBCD-STRING',Data) -> 'dec_TBCD-STRING'(Data);
decode_disp('CompletedCellinTAI-Item',Data) -> 'dec_CompletedCellinTAI-Item'(Data);
decode_disp('CompletedCellinTAI',Data) -> 'dec_CompletedCellinTAI'(Data);
decode_disp('TAI-Broadcast-Item',Data) -> 'dec_TAI-Broadcast-Item'(Data);
decode_disp('TAI-Broadcast',Data) -> 'dec_TAI-Broadcast'(Data);
decode_disp('TAI',Data) -> 'dec_TAI'(Data);
decode_disp('TAIListforWarning',Data) -> 'dec_TAIListforWarning'(Data);
decode_disp('TAC',Data) -> 'dec_TAC'(Data);
decode_disp('S-TMSI',Data) -> 'dec_S-TMSI'(Data);
decode_disp('SupportedTAs-Item',Data) -> 'dec_SupportedTAs-Item'(Data);
decode_disp('SupportedTAs',Data) -> 'dec_SupportedTAs'(Data);
decode_disp('SubscriberProfileIDforRFP',Data) -> 'dec_SubscriberProfileIDforRFP'(Data);
decode_disp('ServedPLMNs',Data) -> 'dec_ServedPLMNs'(Data);
decode_disp('ServedMMECs',Data) -> 'dec_ServedMMECs'(Data);
decode_disp('ServedGroupIDs',Data) -> 'dec_ServedGroupIDs'(Data);
decode_disp('ServedGUMMEIsItem',Data) -> 'dec_ServedGUMMEIsItem'(Data);
decode_disp('ServedGUMMEIs',Data) -> 'dec_ServedGUMMEIs'(Data);
decode_disp('SourceRNC-ToTargetRNC-TransparentContainer',Data) -> 'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Data);
decode_disp('SourceeNB-ToTargeteNB-TransparentContainer',Data) -> 'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Data);
decode_disp('SRVCCHOIndication',Data) -> 'dec_SRVCCHOIndication'(Data);
decode_disp('SRVCCOperationPossible',Data) -> 'dec_SRVCCOperationPossible'(Data);
decode_disp('SourceeNB-ID',Data) -> 'dec_SourceeNB-ID'(Data);
decode_disp('SourceBSS-ToTargetBSS-TransparentContainer',Data) -> 'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Data);
decode_disp('Source-ToTarget-TransparentContainer',Data) -> 'dec_Source-ToTarget-TransparentContainer'(Data);
decode_disp('SONConfigurationTransfer',Data) -> 'dec_SONConfigurationTransfer'(Data);
decode_disp('SONInformationReply',Data) -> 'dec_SONInformationReply'(Data);
decode_disp('SONInformationRequest',Data) -> 'dec_SONInformationRequest'(Data);
decode_disp('SONInformation',Data) -> 'dec_SONInformation'(Data);
decode_disp('SerialNumber',Data) -> 'dec_SerialNumber'(Data);
decode_disp('SecurityContext',Data) -> 'dec_SecurityContext'(Data);
decode_disp('SecurityKey',Data) -> 'dec_SecurityKey'(Data);
decode_disp('RRC-Establishment-Cause',Data) -> 'dec_RRC-Establishment-Cause'(Data);
decode_disp('RRC-Container',Data) -> 'dec_RRC-Container'(Data);
decode_disp('RNC-ID',Data) -> 'dec_RNC-ID'(Data);
decode_disp('RepetitionPeriod',Data) -> 'dec_RepetitionPeriod'(Data);
decode_disp('ReportArea',Data) -> 'dec_ReportArea'(Data);
decode_disp('RIMRoutingAddress',Data) -> 'dec_RIMRoutingAddress'(Data);
decode_disp('RIMInformation',Data) -> 'dec_RIMInformation'(Data);
decode_disp('RIMTransfer',Data) -> 'dec_RIMTransfer'(Data);
decode_disp('RequestType',Data) -> 'dec_RequestType'(Data);
decode_disp('RAC',Data) -> 'dec_RAC'(Data);
decode_disp('RelativeMMECapacity',Data) -> 'dec_RelativeMMECapacity'(Data);
decode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'dec_ReceiveStatusofULPDCPSDUs'(Data);
decode_disp('QCI',Data) -> 'dec_QCI'(Data);
decode_disp('PriorityLevel',Data) -> 'dec_PriorityLevel'(Data);
decode_disp('Pre-emptionVulnerability',Data) -> 'dec_Pre-emptionVulnerability'(Data);
decode_disp('Pre-emptionCapability',Data) -> 'dec_Pre-emptionCapability'(Data);
decode_disp('PLMNidentity',Data) -> 'dec_PLMNidentity'(Data);
decode_disp('PDCP-SN',Data) -> 'dec_PDCP-SN'(Data);
decode_disp('PagingDRX',Data) -> 'dec_PagingDRX'(Data);
decode_disp('OverloadResponse',Data) -> 'dec_OverloadResponse'(Data);
decode_disp('OverloadAction',Data) -> 'dec_OverloadAction'(Data);
decode_disp('OldBSS-ToNewBSS-Information',Data) -> 'dec_OldBSS-ToNewBSS-Information'(Data);
decode_disp('NumberofBroadcast',Data) -> 'dec_NumberofBroadcast'(Data);
decode_disp('NumberofBroadcastRequest',Data) -> 'dec_NumberofBroadcastRequest'(Data);
decode_disp('NASSecurityParameterstoE-UTRAN',Data) -> 'dec_NASSecurityParameterstoE-UTRAN'(Data);
decode_disp('NASSecurityParametersfromE-UTRAN',Data) -> 'dec_NASSecurityParametersfromE-UTRAN'(Data);
decode_disp('NAS-PDU',Data) -> 'dec_NAS-PDU'(Data);
decode_disp('MSClassmark3',Data) -> 'dec_MSClassmark3'(Data);
decode_disp('MSClassmark2',Data) -> 'dec_MSClassmark2'(Data);
decode_disp('M-TMSI',Data) -> 'dec_M-TMSI'(Data);
decode_disp('MME-UE-S1AP-ID',Data) -> 'dec_MME-UE-S1AP-ID'(Data);
decode_disp('MME-Code',Data) -> 'dec_MME-Code'(Data);
decode_disp('MME-Group-ID',Data) -> 'dec_MME-Group-ID'(Data);
decode_disp('MMEname',Data) -> 'dec_MMEname'(Data);
decode_disp('MessageIdentifier',Data) -> 'dec_MessageIdentifier'(Data);
decode_disp('L3-Information',Data) -> 'dec_L3-Information'(Data);
decode_disp('LastVisitedGERANCellInformation',Data) -> 'dec_LastVisitedGERANCellInformation'(Data);
decode_disp('LastVisitedUTRANCellInformation',Data) -> 'dec_LastVisitedUTRANCellInformation'(Data);
decode_disp('LastVisitedEUTRANCellInformation',Data) -> 'dec_LastVisitedEUTRANCellInformation'(Data);
decode_disp('LastVisitedCell-Item',Data) -> 'dec_LastVisitedCell-Item'(Data);
decode_disp('LAI',Data) -> 'dec_LAI'(Data);
decode_disp('LAC',Data) -> 'dec_LAC'(Data);
decode_disp('InterfacesToTrace',Data) -> 'dec_InterfacesToTrace'(Data);
decode_disp('IntegrityProtectionAlgorithms',Data) -> 'dec_IntegrityProtectionAlgorithms'(Data);
decode_disp('IMSI',Data) -> 'dec_IMSI'(Data);
decode_disp('HFN',Data) -> 'dec_HFN'(Data);
decode_disp('HandoverType',Data) -> 'dec_HandoverType'(Data);
decode_disp('HandoverRestrictionList',Data) -> 'dec_HandoverRestrictionList'(Data);
decode_disp('GUMMEI',Data) -> 'dec_GUMMEI'(Data);
decode_disp('GTP-TEID',Data) -> 'dec_GTP-TEID'(Data);
decode_disp('GBR-QosInformation',Data) -> 'dec_GBR-QosInformation'(Data);
decode_disp('ForbiddenLACs',Data) -> 'dec_ForbiddenLACs'(Data);
decode_disp('ForbiddenLAs-Item',Data) -> 'dec_ForbiddenLAs-Item'(Data);
decode_disp('ForbiddenLAs',Data) -> 'dec_ForbiddenLAs'(Data);
decode_disp('ForbiddenTACs',Data) -> 'dec_ForbiddenTACs'(Data);
decode_disp('ForbiddenTAs-Item',Data) -> 'dec_ForbiddenTAs-Item'(Data);
decode_disp('ForbiddenTAs',Data) -> 'dec_ForbiddenTAs'(Data);
decode_disp('ForbiddenInterRATs',Data) -> 'dec_ForbiddenInterRATs'(Data);
decode_disp('ExtendedRNC-ID',Data) -> 'dec_ExtendedRNC-ID'(Data);
decode_disp('EUTRAN-CGI',Data) -> 'dec_EUTRAN-CGI'(Data);
decode_disp('E-RABLevelQoSParameters',Data) -> 'dec_E-RABLevelQoSParameters'(Data);
decode_disp('E-RABItem',Data) -> 'dec_E-RABItem'(Data);
decode_disp('E-RABList',Data) -> 'dec_E-RABList'(Data);
decode_disp('E-RABInformationListItem',Data) -> 'dec_E-RABInformationListItem'(Data);
decode_disp('E-RABInformationList',Data) -> 'dec_E-RABInformationList'(Data);
decode_disp('E-RAB-ID',Data) -> 'dec_E-RAB-ID'(Data);
decode_disp('EventType',Data) -> 'dec_EventType'(Data);
decode_disp('EPLMNs',Data) -> 'dec_EPLMNs'(Data);
decode_disp('EncryptionAlgorithms',Data) -> 'dec_EncryptionAlgorithms'(Data);
decode_disp('ENBX2TLAs',Data) -> 'dec_ENBX2TLAs'(Data);
decode_disp('ENBname',Data) -> 'dec_ENBname'(Data);
decode_disp('ENB-UE-S1AP-ID',Data) -> 'dec_ENB-UE-S1AP-ID'(Data);
decode_disp('ENB-StatusTransfer-TransparentContainer',Data) -> 'dec_ENB-StatusTransfer-TransparentContainer'(Data);
decode_disp('Global-ENB-ID',Data) -> 'dec_Global-ENB-ID'(Data);
decode_disp('GERAN-Cell-ID',Data) -> 'dec_GERAN-Cell-ID'(Data);
decode_disp('ENB-ID',Data) -> 'dec_ENB-ID'(Data);
decode_disp('CompletedCellinEAI-Item',Data) -> 'dec_CompletedCellinEAI-Item'(Data);
decode_disp('CompletedCellinEAI',Data) -> 'dec_CompletedCellinEAI'(Data);
decode_disp('EmergencyAreaID-Broadcast-Item',Data) -> 'dec_EmergencyAreaID-Broadcast-Item'(Data);
decode_disp('EmergencyAreaID-Broadcast',Data) -> 'dec_EmergencyAreaID-Broadcast'(Data);
decode_disp('EmergencyAreaID',Data) -> 'dec_EmergencyAreaID'(Data);
decode_disp('EmergencyAreaIDList',Data) -> 'dec_EmergencyAreaIDList'(Data);
decode_disp('ECGIList',Data) -> 'dec_ECGIList'(Data);
decode_disp('Direct-Forwarding-Path-Availability',Data) -> 'dec_Direct-Forwarding-Path-Availability'(Data);
decode_disp('DL-Forwarding',Data) -> 'dec_DL-Forwarding'(Data);
decode_disp('DataCodingScheme',Data) -> 'dec_DataCodingScheme'(Data);
decode_disp('CriticalityDiagnostics-IE-Item',Data) -> 'dec_CriticalityDiagnostics-IE-Item'(Data);
decode_disp('CriticalityDiagnostics-IE-List',Data) -> 'dec_CriticalityDiagnostics-IE-List'(Data);
decode_disp('CriticalityDiagnostics',Data) -> 'dec_CriticalityDiagnostics'(Data);
decode_disp('COUNTvalue',Data) -> 'dec_COUNTvalue'(Data);
decode_disp('CSG-IdList-Item',Data) -> 'dec_CSG-IdList-Item'(Data);
decode_disp('CSG-IdList',Data) -> 'dec_CSG-IdList'(Data);
decode_disp('CSG-Id',Data) -> 'dec_CSG-Id'(Data);
decode_disp('CSFallbackIndicator',Data) -> 'dec_CSFallbackIndicator'(Data);
decode_disp('CNDomain',Data) -> 'dec_CNDomain'(Data);
decode_disp('CI',Data) -> 'dec_CI'(Data);
decode_disp('CGI',Data) -> 'dec_CGI'(Data);
decode_disp('CellType',Data) -> 'dec_CellType'(Data);
decode_disp('Cell-Size',Data) -> 'dec_Cell-Size'(Data);
decode_disp('Cdma2000OneXRAND',Data) -> 'dec_Cdma2000OneXRAND'(Data);
decode_disp('Cdma2000OneXPilot',Data) -> 'dec_Cdma2000OneXPilot'(Data);
decode_disp('Cdma2000OneXMSI',Data) -> 'dec_Cdma2000OneXMSI'(Data);
decode_disp('Cdma2000OneXMEID',Data) -> 'dec_Cdma2000OneXMEID'(Data);
decode_disp('Cdma2000OneXSRVCCInfo',Data) -> 'dec_Cdma2000OneXSRVCCInfo'(Data);
decode_disp('Cdma2000HORequiredIndication',Data) -> 'dec_Cdma2000HORequiredIndication'(Data);
decode_disp('Cdma2000HOStatus',Data) -> 'dec_Cdma2000HOStatus'(Data);
decode_disp('Cdma2000SectorID',Data) -> 'dec_Cdma2000SectorID'(Data);
decode_disp('Cdma2000RATType',Data) -> 'dec_Cdma2000RATType'(Data);
decode_disp('Cdma2000PDU',Data) -> 'dec_Cdma2000PDU'(Data);
decode_disp('CellID-Broadcast-Item',Data) -> 'dec_CellID-Broadcast-Item'(Data);
decode_disp('CellID-Broadcast',Data) -> 'dec_CellID-Broadcast'(Data);
decode_disp('CellIdentity',Data) -> 'dec_CellIdentity'(Data);
decode_disp('CauseNas',Data) -> 'dec_CauseNas'(Data);
decode_disp('CauseTransport',Data) -> 'dec_CauseTransport'(Data);
decode_disp('CauseRadioNetwork',Data) -> 'dec_CauseRadioNetwork'(Data);
decode_disp('CauseProtocol',Data) -> 'dec_CauseProtocol'(Data);
decode_disp('CauseMisc',Data) -> 'dec_CauseMisc'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('BroadcastCompletedAreaList',Data) -> 'dec_BroadcastCompletedAreaList'(Data);
decode_disp('BPLMNs',Data) -> 'dec_BPLMNs'(Data);
decode_disp('BitRate',Data) -> 'dec_BitRate'(Data);
decode_disp('Bearers-SubjectToStatusTransfer-Item',Data) -> 'dec_Bearers-SubjectToStatusTransfer-Item'(Data);
decode_disp('Bearers-SubjectToStatusTransferList',Data) -> 'dec_Bearers-SubjectToStatusTransferList'(Data);
decode_disp('AllocationAndRetentionPriority',Data) -> 'dec_AllocationAndRetentionPriority'(Data);
decode_disp('TriggeringMessage',Data) -> 'dec_TriggeringMessage'(Data);
decode_disp('ProtocolIE-ID',Data) -> 'dec_ProtocolIE-ID'(Data);
decode_disp('ProtocolExtensionID',Data) -> 'dec_ProtocolExtensionID'(Data);
decode_disp('ProcedureCode',Data) -> 'dec_ProcedureCode'(Data);
decode_disp('PrivateIE-ID',Data) -> 'dec_PrivateIE-ID'(Data);
decode_disp('Presence',Data) -> 'dec_Presence'(Data);
decode_disp('Criticality',Data) -> 'dec_Criticality'(Data);
decode_disp('PrivateMessage',Data) -> 'dec_PrivateMessage'(Data);
decode_disp('MMEConfigurationTransfer',Data) -> 'dec_MMEConfigurationTransfer'(Data);
decode_disp('ENBConfigurationTransfer',Data) -> 'dec_ENBConfigurationTransfer'(Data);
decode_disp('MMEDirectInformationTransfer',Data) -> 'dec_MMEDirectInformationTransfer'(Data);
decode_disp('Inter-SystemInformationTransferType',Data) -> 'dec_Inter-SystemInformationTransferType'(Data);
decode_disp('ENBDirectInformationTransfer',Data) -> 'dec_ENBDirectInformationTransfer'(Data);
decode_disp('WriteReplaceWarningResponse',Data) -> 'dec_WriteReplaceWarningResponse'(Data);
decode_disp('WriteReplaceWarningRequest',Data) -> 'dec_WriteReplaceWarningRequest'(Data);
decode_disp('OverloadStop',Data) -> 'dec_OverloadStop'(Data);
decode_disp('OverloadStart',Data) -> 'dec_OverloadStart'(Data);
decode_disp('LocationReport',Data) -> 'dec_LocationReport'(Data);
decode_disp('LocationReportingFailureIndication',Data) -> 'dec_LocationReportingFailureIndication'(Data);
decode_disp('LocationReportingControl',Data) -> 'dec_LocationReportingControl'(Data);
decode_disp('CellTrafficTrace',Data) -> 'dec_CellTrafficTrace'(Data);
decode_disp('DeactivateTrace',Data) -> 'dec_DeactivateTrace'(Data);
decode_disp('TraceFailureIndication',Data) -> 'dec_TraceFailureIndication'(Data);
decode_disp('TraceStart',Data) -> 'dec_TraceStart'(Data);
decode_disp('MMEStatusTransfer',Data) -> 'dec_MMEStatusTransfer'(Data);
decode_disp('ENBStatusTransfer',Data) -> 'dec_ENBStatusTransfer'(Data);
decode_disp('UECapabilityInfoIndication',Data) -> 'dec_UECapabilityInfoIndication'(Data);
decode_disp('UplinkS1cdma2000tunneling',Data) -> 'dec_UplinkS1cdma2000tunneling'(Data);
decode_disp('DownlinkS1cdma2000tunneling',Data) -> 'dec_DownlinkS1cdma2000tunneling'(Data);
decode_disp('MMEConfigurationUpdateFailure',Data) -> 'dec_MMEConfigurationUpdateFailure'(Data);
decode_disp('MMEConfigurationUpdateAcknowledge',Data) -> 'dec_MMEConfigurationUpdateAcknowledge'(Data);
decode_disp('MMEConfigurationUpdate',Data) -> 'dec_MMEConfigurationUpdate'(Data);
decode_disp('ENBConfigurationUpdateFailure',Data) -> 'dec_ENBConfigurationUpdateFailure'(Data);
decode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'dec_ENBConfigurationUpdateAcknowledge'(Data);
decode_disp('ENBConfigurationUpdate',Data) -> 'dec_ENBConfigurationUpdate'(Data);
decode_disp('S1SetupFailure',Data) -> 'dec_S1SetupFailure'(Data);
decode_disp('S1SetupResponse',Data) -> 'dec_S1SetupResponse'(Data);
decode_disp('S1SetupRequest',Data) -> 'dec_S1SetupRequest'(Data);
decode_disp('ErrorIndication',Data) -> 'dec_ErrorIndication'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListResAck',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListResAck'(Data);
decode_disp('ResetAcknowledge',Data) -> 'dec_ResetAcknowledge'(Data);
decode_disp('UE-associatedLogicalS1-ConnectionListRes',Data) -> 'dec_UE-associatedLogicalS1-ConnectionListRes'(Data);
decode_disp('ResetAll',Data) -> 'dec_ResetAll'(Data);
decode_disp('ResetType',Data) -> 'dec_ResetType'(Data);
decode_disp('Reset',Data) -> 'dec_Reset'(Data);
decode_disp('NASNonDeliveryIndication',Data) -> 'dec_NASNonDeliveryIndication'(Data);
decode_disp('UplinkNASTransport',Data) -> 'dec_UplinkNASTransport'(Data);
decode_disp('InitialUEMessage',Data) -> 'dec_InitialUEMessage'(Data);
decode_disp('DownlinkNASTransport',Data) -> 'dec_DownlinkNASTransport'(Data);
decode_disp('UEContextModificationFailure',Data) -> 'dec_UEContextModificationFailure'(Data);
decode_disp('UEContextModificationResponse',Data) -> 'dec_UEContextModificationResponse'(Data);
decode_disp('UEContextModificationRequest',Data) -> 'dec_UEContextModificationRequest'(Data);
decode_disp('UEContextReleaseComplete',Data) -> 'dec_UEContextReleaseComplete'(Data);
decode_disp('UEContextReleaseCommand',Data) -> 'dec_UEContextReleaseCommand'(Data);
decode_disp('UEContextReleaseRequest',Data) -> 'dec_UEContextReleaseRequest'(Data);
decode_disp('TAIItem',Data) -> 'dec_TAIItem'(Data);
decode_disp('TAIList',Data) -> 'dec_TAIList'(Data);
decode_disp('Paging',Data) -> 'dec_Paging'(Data);
decode_disp('InitialContextSetupFailure',Data) -> 'dec_InitialContextSetupFailure'(Data);
decode_disp('E-RABSetupItemCtxtSURes',Data) -> 'dec_E-RABSetupItemCtxtSURes'(Data);
decode_disp('E-RABSetupListCtxtSURes',Data) -> 'dec_E-RABSetupListCtxtSURes'(Data);
decode_disp('InitialContextSetupResponse',Data) -> 'dec_InitialContextSetupResponse'(Data);
decode_disp('E-RABToBeSetupItemCtxtSUReq',Data) -> 'dec_E-RABToBeSetupItemCtxtSUReq'(Data);
decode_disp('E-RABToBeSetupListCtxtSUReq',Data) -> 'dec_E-RABToBeSetupListCtxtSUReq'(Data);
decode_disp('InitialContextSetupRequest',Data) -> 'dec_InitialContextSetupRequest'(Data);
decode_disp('E-RABReleaseIndication',Data) -> 'dec_E-RABReleaseIndication'(Data);
decode_disp('E-RABReleaseItemBearerRelComp',Data) -> 'dec_E-RABReleaseItemBearerRelComp'(Data);
decode_disp('E-RABReleaseListBearerRelComp',Data) -> 'dec_E-RABReleaseListBearerRelComp'(Data);
decode_disp('E-RABReleaseResponse',Data) -> 'dec_E-RABReleaseResponse'(Data);
decode_disp('E-RABReleaseCommand',Data) -> 'dec_E-RABReleaseCommand'(Data);
decode_disp('E-RABModifyItemBearerModRes',Data) -> 'dec_E-RABModifyItemBearerModRes'(Data);
decode_disp('E-RABModifyListBearerModRes',Data) -> 'dec_E-RABModifyListBearerModRes'(Data);
decode_disp('E-RABModifyResponse',Data) -> 'dec_E-RABModifyResponse'(Data);
decode_disp('E-RABToBeModifiedItemBearerModReq',Data) -> 'dec_E-RABToBeModifiedItemBearerModReq'(Data);
decode_disp('E-RABToBeModifiedListBearerModReq',Data) -> 'dec_E-RABToBeModifiedListBearerModReq'(Data);
decode_disp('E-RABModifyRequest',Data) -> 'dec_E-RABModifyRequest'(Data);
decode_disp('E-RABSetupItemBearerSURes',Data) -> 'dec_E-RABSetupItemBearerSURes'(Data);
decode_disp('E-RABSetupListBearerSURes',Data) -> 'dec_E-RABSetupListBearerSURes'(Data);
decode_disp('E-RABSetupResponse',Data) -> 'dec_E-RABSetupResponse'(Data);
decode_disp('E-RABToBeSetupItemBearerSUReq',Data) -> 'dec_E-RABToBeSetupItemBearerSUReq'(Data);
decode_disp('E-RABToBeSetupListBearerSUReq',Data) -> 'dec_E-RABToBeSetupListBearerSUReq'(Data);
decode_disp('E-RABSetupRequest',Data) -> 'dec_E-RABSetupRequest'(Data);
decode_disp('HandoverCancelAcknowledge',Data) -> 'dec_HandoverCancelAcknowledge'(Data);
decode_disp('HandoverCancel',Data) -> 'dec_HandoverCancel'(Data);
decode_disp('PathSwitchRequestFailure',Data) -> 'dec_PathSwitchRequestFailure'(Data);
decode_disp('E-RABToBeSwitchedULItem',Data) -> 'dec_E-RABToBeSwitchedULItem'(Data);
decode_disp('E-RABToBeSwitchedULList',Data) -> 'dec_E-RABToBeSwitchedULList'(Data);
decode_disp('PathSwitchRequestAcknowledge',Data) -> 'dec_PathSwitchRequestAcknowledge'(Data);
decode_disp('E-RABToBeSwitchedDLItem',Data) -> 'dec_E-RABToBeSwitchedDLItem'(Data);
decode_disp('E-RABToBeSwitchedDLList',Data) -> 'dec_E-RABToBeSwitchedDLList'(Data);
decode_disp('PathSwitchRequest',Data) -> 'dec_PathSwitchRequest'(Data);
decode_disp('HandoverNotify',Data) -> 'dec_HandoverNotify'(Data);
decode_disp('HandoverFailure',Data) -> 'dec_HandoverFailure'(Data);
decode_disp('E-RABFailedToSetupItemHOReqAck',Data) -> 'dec_E-RABFailedToSetupItemHOReqAck'(Data);
decode_disp('E-RABFailedtoSetupListHOReqAck',Data) -> 'dec_E-RABFailedtoSetupListHOReqAck'(Data);
decode_disp('E-RABAdmittedItem',Data) -> 'dec_E-RABAdmittedItem'(Data);
decode_disp('E-RABAdmittedList',Data) -> 'dec_E-RABAdmittedList'(Data);
decode_disp('HandoverRequestAcknowledge',Data) -> 'dec_HandoverRequestAcknowledge'(Data);
decode_disp('E-RABToBeSetupItemHOReq',Data) -> 'dec_E-RABToBeSetupItemHOReq'(Data);
decode_disp('E-RABToBeSetupListHOReq',Data) -> 'dec_E-RABToBeSetupListHOReq'(Data);
decode_disp('HandoverRequest',Data) -> 'dec_HandoverRequest'(Data);
decode_disp('HandoverPreparationFailure',Data) -> 'dec_HandoverPreparationFailure'(Data);
decode_disp('E-RABDataForwardingItem',Data) -> 'dec_E-RABDataForwardingItem'(Data);
decode_disp('E-RABSubjecttoDataForwardingList',Data) -> 'dec_E-RABSubjecttoDataForwardingList'(Data);
decode_disp('HandoverCommand',Data) -> 'dec_HandoverCommand'(Data);
decode_disp('HandoverRequired',Data) -> 'dec_HandoverRequired'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_UnsuccessfulOutcome'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_UnsuccessfulOutcome1(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UnsuccessfulOutcome(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type UnsuccessfulOutcome
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_UnsuccessfulOutcome2(Tmpterm1, Term1),
{{'UnsuccessfulOutcome',Term1,Term2,Term3},Bytes3}.

'enc_SuccessfulOutcome'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_SuccessfulOutcome3(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_SuccessfulOutcome(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type SuccessfulOutcome
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_SuccessfulOutcome4(Tmpterm1, Term1),
{{'SuccessfulOutcome',Term1,Term2,Term3},Bytes3}.

'enc_InitiatingMessage'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 8 =:= 0 ->
Enc2@element;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_InitiatingMessage5(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitiatingMessage(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type InitiatingMessage
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_InitiatingMessage6(Tmpterm1, Term1),
{{'InitiatingMessage',Term1,Term2,Term3},Bytes3}.

'enc_S1AP-PDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= initiatingMessage ->
[<<0:1,0:2>>|enc_InitiatingMessage(ChoiceVal)];
ChoiceTag =:= successfulOutcome ->
[<<0:1,1:2>>|enc_SuccessfulOutcome(ChoiceVal)];
ChoiceTag =:= unsuccessfulOutcome ->
[<<0:1,2:2>>|enc_UnsuccessfulOutcome(ChoiceVal)]
end.


'dec_S1AP-PDU'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_InitiatingMessage(Bytes2)
end,
{{initiatingMessage,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SuccessfulOutcome(Bytes2)
end,
{{successfulOutcome,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_UnsuccessfulOutcome(Bytes2)
end,
{{unsuccessfulOutcome,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_X2TNLConfigurationInfo'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_ENBX2TLAs(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_X2TNLConfigurationInfo_iE-Extensions'(Enc4@element)
end
end].
'enc_X2TNLConfigurationInfo_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_X2TNLConfigurationInfo_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components9(V1@Add4, V1@Buf1, []).



dec_X2TNLConfigurationInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENBX2TLAs
{Term1,Bytes3} = dec_ENBX2TLAs(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_X2TNLConfigurationInfo_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'X2TNLConfigurationInfo',Term1,Term2},Bytes6}.

'enc_WarningMessageContents'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 9600 ->
[align,
<<Enc1@len@sub:16>>|Val]
end.


dec_WarningMessageContents(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
<<V1@V5:V1@Add4/binary-unit:8,V1@Buf6/bitstring>> = V1@Buf1,
V1@Conv7 = binary:copy(V1@V5),
{V1@Conv7,V1@Buf6}
end.

'enc_WarningSecurityInfo'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 50 ->
[align|Val]
end.


dec_WarningSecurityInfo(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:50/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_WarningType'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_WarningType(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_WarningAreaList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= cellIDList ->
[<<0:1,0:2>>|enc_ECGIList(ChoiceVal)];
ChoiceTag =:= trackingAreaListforWarning ->
[<<0:1,1:2>>|enc_TAIListforWarning(ChoiceVal)];
ChoiceTag =:= emergencyAreaIDList ->
[<<0:1,2:2>>|enc_EmergencyAreaIDList(ChoiceVal)]
end.


dec_WarningAreaList(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ECGIList(Bytes2)
end,
{{cellIDList,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_TAIListforWarning(Bytes2)
end,
{{trackingAreaListforWarning,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_EmergencyAreaIDList(Bytes2)
end,
{{emergencyAreaIDList,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UESecurityCapabilities'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc4@bits = bit_size(Enc3@element),
if Enc4@bits =:= 16 ->
[<<0:1>>|Enc3@element];
Enc4@bits < 128 ->
[<<1:1>>,
align,
Enc4@bits|Enc3@element];
Enc4@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@bits:14>>|Enc3@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc3@element, 1)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits =:= 16 ->
[<<0:1>>|Enc5@element];
Enc6@bits < 128 ->
[<<1:1>>,
align,
Enc6@bits|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_UESecurityCapabilities_iE-Extensions'(Enc7@element)
end
end].
'enc_UESecurityCapabilities_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UESecurityCapabilities_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components10(V1@Add4, V1@Buf1, []).



dec_UESecurityCapabilities(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:16/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@V10:V3@V8/binary-unit:1,V3@Buf11/bitstring>> ->
{V3@V10,V3@Buf11};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@V11:V3@V9/binary-unit:1,V3@Buf12/bitstring>> ->
{V3@V11,V3@Buf12};
<<_:V3@Pad6,1:1,1:1,V3@V9:6,V3@Buf10/bitstring>> ->
{V3@V11,V3@Buf12}  = decode_fragmented(V3@V9, V3@Buf10, 1),
{V3@V11,V3@Buf12}
end,
{V3@V3,V3@Buf4}
end,
{V3@V13,V3@Buf14}  = {list_to_bitstring([V3@V0]),V3@Buf1},
{V3@V13,V3@Buf14}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:16/binary-unit:1,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UESecurityCapabilities_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UESecurityCapabilities',Term1,Term2,Term3},Bytes7}.

'enc_UERadioCapability'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_UERadioCapability(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_UEPagingID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 's-TMSI' ->
[<<0:1,0:1>>|'enc_S-TMSI'(ChoiceVal)];
ChoiceTag =:= iMSI ->
begin
Enc3@len = byte_size(ChoiceVal),
Enc3@len@sub = Enc3@len - 3,
if 0 =< Enc3@len@sub, Enc3@len@sub < 6 ->
[<<0:1,1:1,Enc3@len@sub:3>>,
align|ChoiceVal]
end
end
end.


dec_UEPagingID(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_S-TMSI'(Bytes2)
end,
{{'s-TMSI',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:3/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 3,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv7 = binary:copy(V2@V3),
{V2@Conv7,V2@Buf4}
end
end,
{{iMSI,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UE-HistoryInformation'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_LastVisitedCell-Item'(Comp) || Comp <- Val]]
end.



'dec_UE-HistoryInformation'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components11(V1@Add2, V1@Buf1, []).

'enc_UEIdentityIndexValue'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 10 ->
Val
end.


dec_UEIdentityIndexValue(Bytes) ->
begin
<<V1@V0:10/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_UE-associatedLogicalS1-ConnectionItem'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
Enc5@element bsr 32 =:= 0 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:2>>,
align|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc8@element = element(3, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
Enc8@element bsr 24 =:= 0 ->
begin
Enc8@element@bin = binary:encode_unsigned(Enc8@element),
Enc8@element@bin_size0 = byte_size(Enc8@element@bin),
Enc8@element@bin_size = Enc8@element@bin_size0 - 1,
[<<Enc8@element@bin_size:2>>,
align|Enc8@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc8@element}}})
end
end|begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Enc11@element)
end
end].
'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components12(V1@Add4, V1@Buf1, []).



'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
V4@Pad5 = bit_size(V4@Buf1) band 7,
<<_:V4@Pad5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UE-associatedLogicalS1-ConnectionItem',Term1,Term2,Term3},Bytes7}.

'enc_UE-S1AP-ID-pair'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 32 =:= 0 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:2>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element bsr 24 =:= 0 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:2,0:6>>|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_UE-S1AP-ID-pair_iE-Extensions'(Enc7@element)
end
end].
'enc_UE-S1AP-ID-pair_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UE-S1AP-ID-pair_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components13(V1@Add4, V1@Buf1, []).



'dec_UE-S1AP-ID-pair'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UE-S1AP-ID-pair_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UE-S1AP-ID-pair',Term1,Term2,Term3},Bytes7}.

'enc_UE-S1AP-IDs'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'uE-S1AP-ID-pair' ->
[<<0:1,0:1>>|'enc_UE-S1AP-ID-pair'(ChoiceVal)];
ChoiceTag =:= 'mME-UE-S1AP-ID' ->
if ChoiceVal bsr 32 =:= 0 ->
[<<0:1,1:1>>|begin
ChoiceVal@bin = binary:encode_unsigned(ChoiceVal),
ChoiceVal@bin_size0 = byte_size(ChoiceVal@bin),
ChoiceVal@bin_size = ChoiceVal@bin_size0 - 1,
[<<ChoiceVal@bin_size:2>>,
align|ChoiceVal@bin]
end];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


'dec_UE-S1AP-IDs'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UE-S1AP-ID-pair'(Bytes2)
end,
{{'uE-S1AP-ID-pair',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
V2@Pad5 = bit_size(V2@Buf1) band 7,
<<_:V2@Pad5,V2@V3:V2@Add2/unsigned-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
{V2@V3,V2@Buf4}
end
end,
{{'mME-UE-S1AP-ID',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_UEAggregateMaximumBitrate'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if 0 =< Enc3@element, Enc3@element < 10000000001 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:3>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if 0 =< Enc5@element, Enc5@element < 10000000001 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:3,0:5>>|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_UEAggregateMaximumBitrate_iE-Extensions'(Enc7@element)
end
end].
'enc_UEAggregateMaximumBitrate_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UEAggregateMaximumBitrate_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components14(V1@Add4, V1@Buf1, []).



dec_UEAggregateMaximumBitrate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UEAggregateMaximumBitrate_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UEAggregateMaximumBitrate',Term1,Term2,Term3},Bytes7}.

'enc_TypeOfError'(Val) ->
if Val =:= 'not-understood' ->
<<0:1,0:1>>;
Val =:= missing ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TypeOfError(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'not-understood';
1 -> missing
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_E-UTRAN-Trace-ID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 8 ->
[align|Val]
end.


'dec_E-UTRAN-Trace-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:8/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_TraceDepth'(Val) ->
if Val =:= minimum ->
<<0:1,0:3>>;
Val =:= medium ->
<<0:1,1:3>>;
Val =:= maximum ->
<<0:1,2:3>>;
Val =:= minimumWithoutVendorSpecificExtension ->
<<0:1,3:3>>;
Val =:= mediumWithoutVendorSpecificExtension ->
<<0:1,4:3>>;
Val =:= maximumWithoutVendorSpecificExtension ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TraceDepth(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[minimum,medium,maximum,minimumWithoutVendorSpecificExtension,mediumWithoutVendorSpecificExtension,maximumWithoutVendorSpecificExtension]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TraceActivation'(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 8 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits =:= 8 ->
Enc5@element
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= minimum ->
<<0:1,0:3>>;
Enc7@element =:= medium ->
<<0:1,1:3>>;
Enc7@element =:= maximum ->
<<0:1,2:3>>;
Enc7@element =:= minimumWithoutVendorSpecificExtension ->
<<0:1,3:3>>;
Enc7@element =:= mediumWithoutVendorSpecificExtension ->
<<0:1,4:3>>;
Enc7@element =:= maximumWithoutVendorSpecificExtension ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(5, Val),
Enc10@bits = bit_size(Enc9@element),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1,Enc10@bits@sub:8,0:3>>|Enc9@element];
Enc10@bits < 16384 ->
[<<1:1,2:5,Enc10@bits:14>>|Enc9@element];
true ->
[<<1:1,0:3>>|encode_fragmented(Enc9@element, 1)]
end
end|begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TraceActivation_iE-Extensions'(Enc11@element)
end
end].
'enc_TraceActivation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TraceActivation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components15(V1@Add4, V1@Buf1, []).



dec_TraceActivation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:8/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:8/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[minimum,medium,maximum,minimumWithoutVendorSpecificExtension,mediumWithoutVendorSpecificExtension,maximumWithoutVendorSpecificExtension]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {list_to_bitstring([V6@V0]),V6@Buf1},
{V6@V13,V6@Buf14}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_TraceActivation_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'TraceActivation',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_TransportLayerAddress'(Val) ->
Enc1@bits = bit_size(Val),
Enc1@bits@sub = Enc1@bits - 1,
if 0 =< Enc1@bits@sub, Enc1@bits@sub < 160 ->
[<<0:1,Enc1@bits@sub:8>>,
align|Val];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Val];
true ->
[<<1:1>>,
align|encode_fragmented(Val, 1)]
end.


dec_TransportLayerAddress(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:1,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_Time-UE-StayedInCell'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Time-UE-StayedInCell'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TimeToWait'(Val) ->
if Val =:= v1s ->
<<0:1,0:3>>;
Val =:= v2s ->
<<0:1,1:3>>;
Val =:= v5s ->
<<0:1,2:3>>;
Val =:= v10s ->
<<0:1,3:3>>;
Val =:= v20s ->
<<0:1,4:3>>;
Val =:= v60s ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TimeToWait(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> v1s;
1 -> v2s;
2 -> v5s;
3 -> v10s;
4 -> v20s;
5 -> v60s;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[v1s,v2s,v5s,v10s,v20s,v60s]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TargetBSS-ToSourceBSS-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_TargetBSS-ToSourceBSS-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_TargetRNC-ToSourceRNC-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_TargetRNC-ToSourceRNC-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Target-ToSource-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_Target-ToSource-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_TargeteNB-ToSourceeNB-TransparentContainer'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len < 128 ->
[Enc4@len|Enc3@element];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc3@element];
true ->
encode_fragmented(Enc3@element, 8)
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Enc5@element)
end
end].
'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components16(V1@Add4, V1@Buf1, []).



'dec_TargeteNB-ToSourceeNB-TransparentContainer'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TargeteNB-ToSourceeNB-TransparentContainer',Term1,Term2},Bytes6}.

'enc_TargetRNC-ID'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@element = element(2, Val),
enc_LAI(Enc5@element)
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@len = byte_size(Enc6@element),
if Enc7@len =:= 1 ->
Enc6@element
end
end
end
end,
align,
begin
Enc9@element = element(4, Val),
if Enc9@element bsr 12 =:= 0 ->
<<Enc9@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end,
begin
Enc11@element = element(5, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@element@sub = Enc11@element - 4096,
if 0 =< Enc11@element@sub, Enc11@element@sub < 61440 ->
<<Enc11@element@sub:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@element}}})
end
end
end
end|begin
Enc14@element = element(6, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TargetRNC-ID_iE-Extensions'(Enc14@element)
end
end].
'enc_TargetRNC-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TargetRNC-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components17(V1@Add4, V1@Buf1, []).



'dec_TargetRNC-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type LAI
{Term1,Bytes3} = dec_LAI(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:1/binary-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
V4@Pad2 = bit_size(Bytes4) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:2/unsigned-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Add4 = V5@V0 + 4096,
{V5@Add4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_TargetRNC-ID_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'TargetRNC-ID',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_TargeteNB-ID'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_Global-ENB-ID'(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_TAI(Enc4@element)
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TargeteNB-ID_iE-Extensions'(Enc5@element)
end
end].
'enc_TargeteNB-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TargeteNB-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components18(V1@Add4, V1@Buf1, []).



'dec_TargeteNB-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type Global-ENB-ID
{Term1,Bytes3} = 'dec_Global-ENB-ID'(Bytes2),

%% attribute number 2 with type TAI
{Term2,Bytes4} = dec_TAI(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_TargeteNB-ID_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'TargeteNB-ID',Term1,Term2,Term3},Bytes7}.

'enc_TargetID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'targeteNB-ID' ->
[<<0:1,0:2>>|'enc_TargeteNB-ID'(ChoiceVal)];
ChoiceTag =:= 'targetRNC-ID' ->
[<<0:1,1:2>>|'enc_TargetRNC-ID'(ChoiceVal)];
ChoiceTag =:= cGI ->
[<<0:1,2:2>>|enc_CGI(ChoiceVal)]
end.


dec_TargetID(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_TargeteNB-ID'(Bytes2)
end,
{{'targeteNB-ID',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_TargetRNC-ID'(Bytes2)
end,
{{'targetRNC-ID',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_CGI(Bytes2)
end,
{{cGI,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TBCD-STRING'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 3 ->
[align|Val]
end.


'dec_TBCD-STRING'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:3/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_CompletedCellinTAI-Item'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_EUTRAN-CGI'(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CompletedCellinTAI-Item_iE-Extensions'(Enc4@element)
end
end].
'enc_CompletedCellinTAI-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CompletedCellinTAI-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components19(V1@Add4, V1@Buf1, []).



'dec_CompletedCellinTAI-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type EUTRAN-CGI
{Term1,Bytes3} = 'dec_EUTRAN-CGI'(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CompletedCellinTAI-Item_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CompletedCellinTAI-Item',Term1,Term2},Bytes6}.

'enc_CompletedCellinTAI'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CompletedCellinTAI-Item'(Comp) || Comp <- Val]]
end.



dec_CompletedCellinTAI(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components20(V1@Add4, V1@Buf1, []).

'enc_TAI-Broadcast-Item'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_TAI(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_CompletedCellinTAI(Enc4@element)
end|begin
Enc5@element = element(4, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TAI-Broadcast-Item_iE-Extensions'(Enc5@element)
end
end].
'enc_TAI-Broadcast-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TAI-Broadcast-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components21(V1@Add4, V1@Buf1, []).



'dec_TAI-Broadcast-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TAI
{Term1,Bytes3} = dec_TAI(Bytes2),

%% attribute number 2 with type CompletedCellinTAI
{Term2,Bytes4} = dec_CompletedCellinTAI(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_TAI-Broadcast-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'TAI-Broadcast-Item',Term1,Term2,Term3},Bytes7}.

'enc_TAI-Broadcast'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TAI-Broadcast-Item'(Comp) || Comp <- Val]]
end.



'dec_TAI-Broadcast'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components22(V1@Add4, V1@Buf1, []).

'enc_TAI'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 2 ->
Enc5@element
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TAI_iE-Extensions'(Enc7@element)
end
end].
'enc_TAI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TAI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TAI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TAI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TAI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components23(V1@Add4, V1@Buf1, []).



dec_TAI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_TAI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'TAI',Term1,Term2,Term3},Bytes7}.

'enc_TAIListforWarning'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|[enc_TAI(Comp) || Comp <- Val]]
end.



dec_TAIListforWarning(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components24(V1@Add4, V1@Buf1, []).

'enc_TAC'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_TAC(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_S-TMSI'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 1 ->
Enc3@element
end
end,
align,
begin
Enc5@element = element(3, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 4 ->
Enc5@element
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_S-TMSI_iE-Extensions'(Enc7@element)
end
end].
'enc_S-TMSI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_S-TMSI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_S-TMSI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_S-TMSI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_S-TMSI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components25(V1@Add4, V1@Buf1, []).



'dec_S-TMSI'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
<<V3@V0:1/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv4 = binary:copy(V4@V0),
{V4@Conv4,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_S-TMSI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'S-TMSI',Term1,Term2,Term3},Bytes7}.

'enc_SupportedTAs-Item'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 2 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
enc_BPLMNs(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SupportedTAs-Item_iE-Extensions'(Enc6@element)
end
end].
'enc_SupportedTAs-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SupportedTAs-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components26(V1@Add4, V1@Buf1, []).



'dec_SupportedTAs-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
<<V3@V0:2/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 2 with type BPLMNs
{Term2,Bytes4} = dec_BPLMNs(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_SupportedTAs-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SupportedTAs-Item',Term1,Term2,Term3},Bytes7}.

'enc_SupportedTAs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_SupportedTAs-Item'(Comp) || Comp <- Val]]
end.



dec_SupportedTAs(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components27(V1@Add4, V1@Buf1, []).

'enc_SubscriberProfileIDforRFP'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 8 =:= 0 ->
[align,
Val@sub];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SubscriberProfileIDforRFP(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_ServedPLMNs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>,
align|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 3 ->
Comp
end
end || Comp <- Val]]
end.



dec_ServedPLMNs(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components28(V1@Add2, V1@Buf1, []).

'enc_ServedMMECs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 8 =:= 0 ->
[align,
Enc2@len@sub|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 1 ->
Comp
end
end || Comp <- Val]]
end.



dec_ServedMMECs(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components29(V1@Add4, V1@Buf1, []).

'enc_ServedGroupIDs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 65535 ->
[align,
<<Enc2@len@sub:16>>|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 2 ->
Comp
end
end || Comp <- Val]]
end.



dec_ServedGroupIDs(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components30(V1@Add4, V1@Buf1, []).

'enc_ServedGUMMEIsItem'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_ServedPLMNs(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_ServedGroupIDs(Enc4@element)
end,
begin
Enc5@element = element(4, Val),
enc_ServedMMECs(Enc5@element)
end|begin
Enc6@element = element(5, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_ServedGUMMEIsItem_iE-Extensions'(Enc6@element)
end
end].
'enc_ServedGUMMEIsItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ServedGUMMEIsItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components31(V1@Add4, V1@Buf1, []).



dec_ServedGUMMEIsItem(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ServedPLMNs
{Term1,Bytes3} = dec_ServedPLMNs(Bytes2),

%% attribute number 2 with type ServedGroupIDs
{Term2,Bytes4} = dec_ServedGroupIDs(Bytes3),

%% attribute number 3 with type ServedMMECs
{Term3,Bytes5} = dec_ServedMMECs(Bytes4),

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_ServedGUMMEIsItem_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'ServedGUMMEIsItem',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ServedGUMMEIs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_ServedGUMMEIsItem(Comp) || Comp <- Val]]
end.



dec_ServedGUMMEIs(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components32(V1@Add2, V1@Buf1, []).

'enc_SourceRNC-ToTargetRNC-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_SourceRNC-ToTargetRNC-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_SourceeNB-ToTargeteNB-TransparentContainer'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
if Enc3@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc5@element = element(2, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 8)
end
end,
begin
Enc7@element = element(3, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABInformationList'(Enc7@element)
end
end,
begin
Enc9@element = element(4, Val),
'enc_EUTRAN-CGI'(Enc9@element)
end,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@element@sub = Enc10@element - 1,
if Enc10@element@sub bsr 8 =:= 0 ->
[align,
Enc10@element@sub];
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end
end
end,
begin
Enc13@element = element(6, Val),
'enc_UE-HistoryInformation'(Enc13@element)
end|begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Enc14@element)
end
end].
'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components33(V1@Add4, V1@Buf1, []).



'dec_SourceeNB-ToTargeteNB-TransparentContainer'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end,

%% attribute number 2 with type E-RABInformationList
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
'dec_E-RABInformationList'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type EUTRAN-CGI
{Term3,Bytes5} = 'dec_EUTRAN-CGI'(Bytes4),

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes5) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes5,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type UE-HistoryInformation
{Term5,Bytes7} = 'dec_UE-HistoryInformation'(Bytes6),

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'SourceeNB-ToTargeteNB-TransparentContainer',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_SRVCCHOIndication'(Val) ->
if Val =:= pSandCS ->
<<0:1,0:1>>;
Val =:= cSonly ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SRVCCHOIndication(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> pSandCS;
1 -> cSonly
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SRVCCOperationPossible'(Val) ->
if Val =:= possible ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SRVCCOperationPossible(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'possible',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SourceeNB-ID'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@element = element(2, Val),
'enc_Global-ENB-ID'(Enc2@element)
end,
begin
Enc3@element = element(3, Val),
enc_TAI(Enc3@element)
end|begin
Enc4@element = element(4, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SourceeNB-ID_iE-Extensions'(Enc4@element)
end
end].
'enc_SourceeNB-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SourceeNB-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components34(V1@Add4, V1@Buf1, []).



'dec_SourceeNB-ID'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type Global-ENB-ID
{Term1,Bytes2} = 'dec_Global-ENB-ID'(Bytes1),

%% attribute number 2 with type TAI
{Term2,Bytes3} = dec_TAI(Bytes2),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_SourceeNB-ID_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'SourceeNB-ID',Term1,Term2,Term3},Bytes4}.

'enc_SourceBSS-ToTargetBSS-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_SourceBSS-ToTargetBSS-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Source-ToTarget-TransparentContainer'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_Source-ToTarget-TransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_SONConfigurationTransfer'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_TargeteNB-ID'(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
'enc_SourceeNB-ID'(Enc4@element)
end,
begin
Enc5@element = element(4, Val),
enc_SONInformation(Enc5@element)
end|begin
Enc6@element = element(5, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SONConfigurationTransfer_iE-Extensions'(Enc6@element)
end
end].
'enc_SONConfigurationTransfer_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SONConfigurationTransfer_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components35(V1@Add4, V1@Buf1, []).



dec_SONConfigurationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TargeteNB-ID
{Term1,Bytes3} = 'dec_TargeteNB-ID'(Bytes2),

%% attribute number 2 with type SourceeNB-ID
{Term2,Bytes4} = 'dec_SourceeNB-ID'(Bytes3),

%% attribute number 3 with type SONInformation
{Term3,Bytes5} = dec_SONInformation(Bytes4),

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_SONConfigurationTransfer_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SONConfigurationTransfer',Term1,Term2,Term3,Term4},Bytes8}.

'enc_SONInformationReply'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
enc_X2TNLConfigurationInfo(Enc4@element)
end
end|begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SONInformationReply_iE-Extensions'(Enc6@element)
end
end].
'enc_SONInformationReply_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SONInformationReply_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components36(V1@Add4, V1@Buf1, []).



dec_SONInformationReply(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type X2TNLConfigurationInfo
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_X2TNLConfigurationInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_SONInformationReply_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'SONInformationReply',Term1,Term2},Bytes6}.

'enc_SONInformationRequest'(Val) ->
if Val =:= 'x2TNL-Configuration-Info' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SONInformationRequest(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'x2TNL-Configuration-Info',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SONInformation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sONInformationRequest ->
if ChoiceVal =:= 'x2TNL-Configuration-Info' ->
<<0:1,0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sONInformationReply ->
[<<0:1,1:1>>|enc_SONInformationReply(ChoiceVal)]
end.


dec_SONInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@Buf2/bitstring>> ->
{'x2TNL-Configuration-Info',V2@Buf2};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{sONInformationRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SONInformationReply(Bytes2)
end,
{{sONInformationReply,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_SerialNumber'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 16 ->
Val
end.


dec_SerialNumber(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_SecurityContext'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 3 =:= 0 ->
<<Enc3@element:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
align,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits =:= 256 ->
Enc5@element
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_SecurityContext_iE-Extensions'(Enc7@element)
end
end].
'enc_SecurityContext_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SecurityContext_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SecurityContext_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SecurityContext_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SecurityContext_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components37(V1@Add4, V1@Buf1, []).



dec_SecurityContext(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:256/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V4,V4@Buf5}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V4,V4@Buf5}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_SecurityContext_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SecurityContext',Term1,Term2,Term3},Bytes7}.

'enc_SecurityKey'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 256 ->
[align|Val]
end.


dec_SecurityKey(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:256/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_RRC-Establishment-Cause'(Val) ->
if Val =:= emergency ->
<<0:1,0:3>>;
Val =:= highPriorityAccess ->
<<0:1,1:3>>;
Val =:= 'mt-Access' ->
<<0:1,2:3>>;
Val =:= 'mo-Signalling' ->
<<0:1,3:3>>;
Val =:= 'mo-Data' ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RRC-Establishment-Cause'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[emergency,highPriorityAccess,'mt-Access','mo-Signalling','mo-Data']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_RRC-Container'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_RRC-Container'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_RNC-ID'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RNC-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_RepetitionPeriod'(Val) ->
if 0 =< Val, Val < 4097 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_RepetitionPeriod(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ReportArea'(Val) ->
if Val =:= ecgi ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReportArea(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'ecgi',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_RIMRoutingAddress'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'gERAN-Cell-ID' ->
[<<0:1>>|'enc_GERAN-Cell-ID'(ChoiceVal)]
end.


dec_RIMRoutingAddress(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_GERAN-Cell-ID'(Bytes2)
end,
{{'gERAN-Cell-ID',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_RIMInformation'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_RIMInformation(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_RIMTransfer'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len < 128 ->
[Enc5@len|Enc4@element];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc4@element];
true ->
encode_fragmented(Enc4@element, 8)
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
enc_RIMRoutingAddress(Enc6@element)
end
end|begin
Enc8@element = element(4, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'enc_RIMTransfer_iE-Extensions'(Enc8@element)
end
end].
'enc_RIMTransfer_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_RIMTransfer_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components38(V1@Add4, V1@Buf1, []).



dec_RIMTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end,

%% attribute number 2 with type RIMRoutingAddress
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_RIMRoutingAddress(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_RIMTransfer_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RIMTransfer',Term1,Term2,Term3},Bytes7}.

'enc_RequestType'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc3@element = element(2, Val),
Enc5@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc3@element =:= direct ->
if Enc5@element =:= ecgi ->
<<0:1,0:1,0:1,0:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
Enc3@element =:= 'change-of-serve-cell' ->
if Enc5@element =:= ecgi ->
<<0:1,0:1,0:1,1:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
Enc3@element =:= 'stop-change-of-serve-cell' ->
if Enc5@element =:= ecgi ->
<<0:1,0:1,0:1,2:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end;
true ->
if Enc3@element =:= direct ->
if Enc5@element =:= ecgi ->
<<0:1,1:1,0:1,0:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
Enc3@element =:= 'change-of-serve-cell' ->
if Enc5@element =:= ecgi ->
<<0:1,1:1,0:1,1:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
Enc3@element =:= 'stop-change-of-serve-cell' ->
if Enc5@element =:= ecgi ->
<<0:1,1:1,0:1,2:2,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_RequestType_iE-Extensions'(Enc7@element)
end
end].
'enc_RequestType_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_RequestType_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_RequestType_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_RequestType_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_RequestType_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components39(V1@Add4, V1@Buf1, []).



dec_RequestType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> direct;
1 -> 'change-of-serve-cell';
2 -> 'stop-change-of-serve-cell';
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[direct,'change-of-serve-cell','stop-change-of-serve-cell']}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@Buf2/bitstring>> ->
{'ecgi',V4@Buf2};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_RequestType_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RequestType',Term1,Term2,Term3},Bytes7}.

'enc_RAC'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


dec_RAC(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_RelativeMMECapacity'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_RelativeMMECapacity(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ReceiveStatusofULPDCPSDUs'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 4096 ->
[align|Val]
end.


dec_ReceiveStatusofULPDCPSDUs(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4096/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_QCI'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_QCI(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PriorityLevel'(Val) ->
if Val =:= spare ->
<<0:4>>;
Val =:= highest ->
<<1:4>>;
Val =:= lowest ->
<<14:4>>;
Val =:= 'no-priority' ->
<<15:4>>;
Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PriorityLevel(Bytes) ->
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> spare;
1 -> highest;
14 -> lowest;
15 -> 'no-priority';
_ -> V1@V0
end,
{V1@Int2,V1@Buf1}
end.

'enc_Pre-emptionVulnerability'(Val) ->
if Val =:= 'not-pre-emptable' ->
<<0:1>>;
Val =:= 'pre-emptable' ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Pre-emptionVulnerability'(Bytes) ->
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable'
end,
{V1@Int2,V1@Buf1}
end.

'enc_Pre-emptionCapability'(Val) ->
if Val =:= 'shall-not-trigger-pre-emption' ->
<<0:1>>;
Val =:= 'may-trigger-pre-emption' ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Pre-emptionCapability'(Bytes) ->
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption'
end,
{V1@Int2,V1@Buf1}
end.

'enc_PLMNidentity'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 3 ->
[align|Val]
end.


dec_PLMNidentity(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:3/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_PDCP-SN'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_PDCP-SN'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PagingDRX'(Val) ->
if Val =:= v32 ->
<<0:1,0:2>>;
Val =:= v64 ->
<<0:1,1:2>>;
Val =:= v128 ->
<<0:1,2:2>>;
Val =:= v256 ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PagingDRX(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> v32;
1 -> v64;
2 -> v128;
3 -> v256
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_OverloadResponse'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= overloadAction ->
if ChoiceVal =:= 'reject-non-emergency-mo-dt' ->
<<0:1,0:1,0:2>>;
ChoiceVal =:= 'reject-all-rrc-cr-signalling' ->
<<0:1,0:1,1:2>>;
ChoiceVal =:= 'permit-emergency-sessions-only' ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_OverloadResponse(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:2/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> 'reject-non-emergency-mo-dt';
1 -> 'reject-all-rrc-cr-signalling';
2 -> 'permit-emergency-sessions-only';
_ -> exit({error,{asn1,{decode_enumerated,{V2@V3,['reject-non-emergency-mo-dt','reject-all-rrc-cr-signalling','permit-emergency-sessions-only']}}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{overloadAction,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_OverloadAction'(Val) ->
if Val =:= 'reject-non-emergency-mo-dt' ->
<<0:1,0:2>>;
Val =:= 'reject-all-rrc-cr-signalling' ->
<<0:1,1:2>>;
Val =:= 'permit-emergency-sessions-only' ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_OverloadAction(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'reject-non-emergency-mo-dt';
1 -> 'reject-all-rrc-cr-signalling';
2 -> 'permit-emergency-sessions-only';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['reject-non-emergency-mo-dt','reject-all-rrc-cr-signalling','permit-emergency-sessions-only']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_OldBSS-ToNewBSS-Information'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_OldBSS-ToNewBSS-Information'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_NumberofBroadcast'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_NumberofBroadcast(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_NumberofBroadcastRequest'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_NumberofBroadcastRequest(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_NASSecurityParameterstoE-UTRAN'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_NASSecurityParameterstoE-UTRAN'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_NASSecurityParametersfromE-UTRAN'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_NASSecurityParametersfromE-UTRAN'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_NAS-PDU'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_NAS-PDU'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_MSClassmark3'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_MSClassmark3(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_MSClassmark2'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_MSClassmark2(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_M-TMSI'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 4 ->
[align|Val]
end.


'dec_M-TMSI'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_MME-UE-S1AP-ID'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_MME-UE-S1AP-ID'(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_MME-Code'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 1 ->
Val
end.


'dec_MME-Code'(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_MME-Group-ID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


'dec_MME-Group-ID'(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_MMEname'(Val) ->
Enc1@bin = list_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 150 ->
[<<0:1,Enc1@len@sub:8>>,
align|Enc1@bin];
Enc1@len < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bin, 8)]
end.


dec_MMEname(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:8,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:8,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:8,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 8),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
V1@Conv13 = binary_to_list(V1@V0),
{V1@Conv13,V1@Buf1}
end.

'enc_MessageIdentifier'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 16 ->
Val
end.


dec_MessageIdentifier(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_L3-Information'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


'dec_L3-Information'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_LastVisitedGERANCellInformation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= undefined ->
<<0:1>>
end.


dec_LastVisitedGERANCellInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefined,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LastVisitedUTRANCellInformation'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_LastVisitedUTRANCellInformation(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_LastVisitedEUTRANCellInformation'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_EUTRAN-CGI'(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
enc_CellType(Enc4@element)
end,
align,
begin
Enc5@element = element(4, Val),
if Enc5@element bsr 12 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc7@element = element(5, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Enc7@element)
end
end].
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components40(V1@Add4, V1@Buf1, []).



dec_LastVisitedEUTRANCellInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type EUTRAN-CGI
{Term1,Bytes3} = 'dec_EUTRAN-CGI'(Bytes2),

%% attribute number 2 with type CellType
{Term2,Bytes4} = dec_CellType(Bytes3),

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
V3@Pad2 = bit_size(Bytes4) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'LastVisitedEUTRANCellInformation',Term1,Term2,Term3,Term4},Bytes8}.

'enc_LastVisitedCell-Item'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'e-UTRAN-Cell' ->
[<<0:1,0:2>>|enc_LastVisitedEUTRANCellInformation(ChoiceVal)];
ChoiceTag =:= 'uTRAN-Cell' ->
begin
Enc3@len = byte_size(ChoiceVal),
if Enc3@len < 128 ->
[<<0:1,1:2>>,
align,
Enc3@len|ChoiceVal];
Enc3@len < 16384 ->
[<<0:1,1:2>>,
align,
<<2:2,Enc3@len:14>>|ChoiceVal];
true ->
[<<0:1,1:2>>,
align|encode_fragmented(ChoiceVal, 8)]
end
end;
ChoiceTag =:= 'gERAN-Cell' ->
[<<0:1,2:2>>|enc_LastVisitedGERANCellInformation(ChoiceVal)]
end.


'dec_LastVisitedCell-Item'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_LastVisitedEUTRANCellInformation(Bytes2)
end,
{{'e-UTRAN-Cell',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary:copy(V2@V0),
{V2@Conv10,V2@Buf1}
end
end,
{{'uTRAN-Cell',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_LastVisitedGERANCellInformation(Bytes2)
end,
{{'gERAN-Cell',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LAI'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 2 ->
Enc5@element
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_LAI_iE-Extensions'(Enc7@element)
end
end].
'enc_LAI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_LAI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_LAI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LAI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_LAI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components41(V1@Add4, V1@Buf1, []).



dec_LAI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_LAI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'LAI',Term1,Term2,Term3},Bytes7}.

'enc_LAC'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_LAC(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_InterfacesToTrace'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 8 ->
Val
end.


dec_InterfacesToTrace(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_IntegrityProtectionAlgorithms'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 16 ->
[<<0:1>>|Val];
Enc1@bits < 128 ->
[<<1:1>>,
align,
Enc1@bits|Val];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Val];
true ->
[<<1:1>>,
align|encode_fragmented(Val, 1)]
end.


dec_IntegrityProtectionAlgorithms(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:16/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_IMSI'(Val) ->
Enc1@len = byte_size(Val),
Enc1@len@sub = Enc1@len - 3,
if 0 =< Enc1@len@sub, Enc1@len@sub < 6 ->
[<<Enc1@len@sub:3>>,
align|Val]
end.


dec_IMSI(Bytes) ->
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 3,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/binary-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
V1@Conv7 = binary:copy(V1@V3),
{V1@Conv7,V1@Buf4}
end.

'enc_HFN'(Val) ->
if Val bsr 20 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_HFN(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_HandoverType'(Val) ->
if Val =:= intralte ->
<<0:1,0:3>>;
Val =:= ltetoutran ->
<<0:1,1:3>>;
Val =:= ltetogeran ->
<<0:1,2:3>>;
Val =:= utrantolte ->
<<0:1,3:3>>;
Val =:= gerantolte ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_HandoverType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> intralte;
1 -> ltetoutran;
2 -> ltetogeran;
3 -> utrantolte;
4 -> gerantolte;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[intralte,ltetoutran,ltetogeran,utrantolte,gerantolte]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_HandoverRestrictionList'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@element = element(2, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 3 ->
Enc7@element
end
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
enc_EPLMNs(Enc9@element)
end
end,
begin
Enc11@element = element(4, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
enc_ForbiddenTAs(Enc11@element)
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
enc_ForbiddenLAs(Enc13@element)
end
end,
begin
Enc15@element = element(6, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
Enc15@element =:= all ->
<<0:1,0:2>>;
Enc15@element =:= geran ->
<<0:1,1:2>>;
Enc15@element =:= utran ->
<<0:1,2:2>>;
Enc15@element =:= cdma2000 ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@element}}})
end
end|begin
Enc18@element = element(7, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
'enc_HandoverRestrictionList_iE-Extensions'(Enc18@element)
end
end].
'enc_HandoverRestrictionList_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_HandoverRestrictionList_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components42(V1@Add4, V1@Buf1, []).



dec_HandoverRestrictionList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type EPLMNs
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
dec_EPLMNs(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ForbiddenTAs
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_ForbiddenTAs(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ForbiddenLAs
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_ForbiddenLAs(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_HandoverRestrictionList_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'HandoverRestrictionList',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_GUMMEI'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len =:= 2 ->
Enc5@element
end
end,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 1 ->
Enc7@element
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_GUMMEI_iE-Extensions'(Enc9@element)
end
end].
'enc_GUMMEI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GUMMEI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components43(V1@Add4, V1@Buf1, []).



dec_GUMMEI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V5@V0:1/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_GUMMEI_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'GUMMEI',Term1,Term2,Term3,Term4},Bytes8}.

'enc_GTP-TEID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 4 ->
[align|Val]
end.


'dec_GTP-TEID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_GBR-QosInformation'(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if 0 =< Enc3@element, Enc3@element < 10000000001 ->
begin
Enc3@element@bin = binary:encode_unsigned(Enc3@element),
Enc3@element@bin_size0 = byte_size(Enc3@element@bin),
Enc3@element@bin_size = Enc3@element@bin_size0 - 1,
[<<Enc3@element@bin_size:3>>,
align|Enc3@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if 0 =< Enc5@element, Enc5@element < 10000000001 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:3,0:5>>|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
if 0 =< Enc7@element, Enc7@element < 10000000001 ->
begin
Enc7@element@bin = binary:encode_unsigned(Enc7@element),
Enc7@element@bin_size0 = byte_size(Enc7@element@bin),
Enc7@element@bin_size = Enc7@element@bin_size0 - 1,
[<<Enc7@element@bin_size:3,0:5>>|Enc7@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc9@element = element(5, Val),
if 0 =< Enc9@element, Enc9@element < 10000000001 ->
begin
Enc9@element@bin = binary:encode_unsigned(Enc9@element),
Enc9@element@bin_size0 = byte_size(Enc9@element@bin),
Enc9@element@bin_size = Enc9@element@bin_size0 - 1,
[<<Enc9@element@bin_size:3,0:5>>|Enc9@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc9@element}}})
end
end|begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'enc_GBR-QosInformation_iE-Extensions'(Enc11@element)
end
end].
'enc_GBR-QosInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GBR-QosInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components44(V1@Add4, V1@Buf1, []).



'dec_GBR-QosInformation'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:3/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<_:5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:3/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
<<_:5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_GBR-QosInformation_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'GBR-QosInformation',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_ForbiddenLACs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 12 =:= 0 ->
[align,
<<Enc2@len@sub:16>>|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 2 ->
Comp
end
end || Comp <- Val]]
end.



dec_ForbiddenLACs(Bytes) ->
%% Length with constraint {1,4096}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components45(V1@Add4, V1@Buf1, []).

'enc_ForbiddenLAs-Item'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
enc_ForbiddenLACs(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_ForbiddenLAs-Item_iE-Extensions'(Enc6@element)
end
end].
'enc_ForbiddenLAs-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ForbiddenLAs-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components46(V1@Add4, V1@Buf1, []).



'dec_ForbiddenLAs-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ForbiddenLACs
{Term2,Bytes4} = dec_ForbiddenLACs(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ForbiddenLAs-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ForbiddenLAs-Item',Term1,Term2,Term3},Bytes7}.

'enc_ForbiddenLAs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_ForbiddenLAs-Item'(Comp) || Comp <- Val]]
end.



dec_ForbiddenLAs(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components47(V1@Add2, V1@Buf1, []).

'enc_ForbiddenTACs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 12 =:= 0 ->
[align,
<<Enc2@len@sub:16>>|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 2 ->
Comp
end
end || Comp <- Val]]
end.



dec_ForbiddenTACs(Bytes) ->
%% Length with constraint {1,4096}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components48(V1@Add4, V1@Buf1, []).

'enc_ForbiddenTAs-Item'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
enc_ForbiddenTACs(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_ForbiddenTAs-Item_iE-Extensions'(Enc6@element)
end
end].
'enc_ForbiddenTAs-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ForbiddenTAs-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components49(V1@Add4, V1@Buf1, []).



'dec_ForbiddenTAs-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ForbiddenTACs
{Term2,Bytes4} = dec_ForbiddenTACs(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ForbiddenTAs-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ForbiddenTAs-Item',Term1,Term2,Term3},Bytes7}.

'enc_ForbiddenTAs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_ForbiddenTAs-Item'(Comp) || Comp <- Val]]
end.



dec_ForbiddenTAs(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components50(V1@Add2, V1@Buf1, []).

'enc_ForbiddenInterRATs'(Val) ->
if Val =:= all ->
<<0:1,0:2>>;
Val =:= geran ->
<<0:1,1:2>>;
Val =:= utran ->
<<0:1,2:2>>;
Val =:= cdma2000 ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ForbiddenInterRATs(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ExtendedRNC-ID'(Val) ->
Val@sub = Val - 4096,
if 0 =< Val@sub, Val@sub < 61440 ->
[align|<<Val@sub:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ExtendedRNC-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 4096,
{V1@Add4,V1@Buf1}
end.

'enc_EUTRAN-CGI'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
if Enc6@bits =:= 28 ->
Enc5@element
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_EUTRAN-CGI_iE-Extensions'(Enc7@element)
end
end].
'enc_EUTRAN-CGI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_EUTRAN-CGI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components51(V1@Add4, V1@Buf1, []).



'dec_EUTRAN-CGI'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:28/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_EUTRAN-CGI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'EUTRAN-CGI',Term1,Term2,Term3},Bytes7}.

'enc_E-RABLevelQoSParameters'(Val) ->
[begin
Enc1@element = element(4, Val),
Enc2@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 8 =:= 0 ->
Enc4@element;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end,
begin
Enc6@element = element(3, Val),
enc_AllocationAndRetentionPriority(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_GBR-QosInformation'(Enc7@element)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABLevelQoSParameters_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABLevelQoSParameters_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABLevelQoSParameters_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components52(V1@Add4, V1@Buf1, []).



'dec_E-RABLevelQoSParameters'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type AllocationAndRetentionPriority
{Term2,Bytes4} = dec_AllocationAndRetentionPriority(Bytes3),

%% attribute number 3 with type GBR-QosInformation
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_GBR-QosInformation'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABLevelQoSParameters_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABLevelQoSParameters',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABItem'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
enc_Cause(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABItem_iE-Extensions'(Enc6@element)
end
end].
'enc_E-RABItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components53(V1@Add4, V1@Buf1, []).



'dec_E-RABItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type Cause
{Term2,Bytes4} = dec_Cause(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_E-RABItem_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'E-RABItem',Term1,Term2,Term3},Bytes7}.

'enc_E-RABList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value54(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value55(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components56(V1@Add4, V1@Buf1, []).

'enc_E-RABInformationListItem'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 4 =:= 0 ->
<<0:1,Enc4@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@element)]
end
end,
begin
Enc6@element = element(3, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
Enc6@element =:= 'dL-Forwarding-proposed' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@element}}})
end
end|begin
Enc9@element = element(4, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABInformationListItem_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABInformationListItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABInformationListItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components57(V1@Add4, V1@Buf1, []).



'dec_E-RABInformationListItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@Buf2/bitstring>> ->
{'dL-Forwarding-proposed',V4@Buf2};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_E-RABInformationListItem_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'E-RABInformationListItem',Term1,Term2,Term3},Bytes7}.

'enc_E-RABInformationList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABInformationList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABInformationList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value58(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABInformationList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value59(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABInformationList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components60(V1@Add4, V1@Buf1, []).

'enc_E-RAB-ID'(Val) ->
if Val bsr 4 =:= 0 ->
<<0:1,Val:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Val)]
end.


'dec_E-RAB-ID'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4/unsigned-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/signed-unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end.

'enc_EventType'(Val) ->
if Val =:= direct ->
<<0:1,0:2>>;
Val =:= 'change-of-serve-cell' ->
<<0:1,1:2>>;
Val =:= 'stop-change-of-serve-cell' ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_EventType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> direct;
1 -> 'change-of-serve-cell';
2 -> 'stop-change-of-serve-cell';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[direct,'change-of-serve-cell','stop-change-of-serve-cell']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_EPLMNs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>,
align|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 3 ->
Comp
end
end || Comp <- Val]]
end.



dec_EPLMNs(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components61(V1@Add2, V1@Buf1, []).

'enc_EncryptionAlgorithms'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 16 ->
[<<0:1>>|Val];
Enc1@bits < 128 ->
[<<1:1>>,
align,
Enc1@bits|Val];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Val];
true ->
[<<1:1>>,
align|encode_fragmented(Val, 1)]
end.


dec_EncryptionAlgorithms(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:16/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_ENBX2TLAs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 1 =:= 0 ->
[<<Enc2@len@sub:1>>|[begin
Enc1@bits = bit_size(Comp),
Enc1@bits@sub = Enc1@bits - 1,
if 0 =< Enc1@bits@sub, Enc1@bits@sub < 160 ->
[<<0:1,Enc1@bits@sub:8>>,
align|Comp];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>,
align|Comp];
true ->
[<<1:1>>,
align|encode_fragmented(Comp, 1)]
end
end || Comp <- Val]]
end.



dec_ENBX2TLAs(Bytes) ->
%% Length with constraint {1,2}
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components62(V1@Add2, V1@Buf1, []).

'enc_ENBname'(Val) ->
Enc1@bin = list_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 150 ->
[<<0:1,Enc1@len@sub:8>>,
align|Enc1@bin];
Enc1@len < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bin, 8)]
end.


dec_ENBname(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:8,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:8,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:8,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 8),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
V1@Conv13 = binary_to_list(V1@V0),
{V1@Conv13,V1@Buf1}
end.

'enc_ENB-UE-S1AP-ID'(Val) ->
if Val bsr 24 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ENB-UE-S1AP-ID'(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_ENB-StatusTransfer-TransparentContainer'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_Bearers-SubjectToStatusTransferList'(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Enc4@element)
end
end].
'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components63(V1@Add4, V1@Buf1, []).



'dec_ENB-StatusTransfer-TransparentContainer'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type Bearers-SubjectToStatusTransferList
{Term1,Bytes3} = 'dec_Bearers-SubjectToStatusTransferList'(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'ENB-StatusTransfer-TransparentContainer',Term1,Term2},Bytes6}.

'enc_Global-ENB-ID'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
'enc_ENB-ID'(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Global-ENB-ID_iE-Extensions'(Enc6@element)
end
end].
'enc_Global-ENB-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_Global-ENB-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components64(V1@Add4, V1@Buf1, []).



'dec_Global-ENB-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ENB-ID
{Term2,Bytes4} = 'dec_ENB-ID'(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_Global-ENB-ID_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'Global-ENB-ID',Term1,Term2,Term3},Bytes7}.

'enc_GERAN-Cell-ID'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_LAI(Enc3@element)
end,
begin
Enc4@element = element(3, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len =:= 1 ->
Enc4@element
end
end,
begin
Enc6@element = element(4, Val),
Enc7@len = byte_size(Enc6@element),
if Enc7@len =:= 2 ->
Enc6@element
end
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'enc_GERAN-Cell-ID_iE-Extensions'(Enc8@element)
end
end].
'enc_GERAN-Cell-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GERAN-Cell-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components65(V1@Add4, V1@Buf1, []).



'dec_GERAN-Cell-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type LAI
{Term1,Bytes3} = dec_LAI(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V3@V0:1/binary-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_GERAN-Cell-ID_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'GERAN-Cell-ID',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ENB-ID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'macroENB-ID' ->
begin
Enc2@bits = bit_size(ChoiceVal),
if Enc2@bits =:= 20 ->
[<<0:1,0:1>>,
align|ChoiceVal]
end
end;
ChoiceTag =:= 'homeENB-ID' ->
begin
Enc4@bits = bit_size(ChoiceVal),
if Enc4@bits =:= 28 ->
[<<0:1,1:1>>,
align|ChoiceVal]
end
end
end.


'dec_ENB-ID'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:20/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V4,V2@Buf5}  = {list_to_bitstring([V2@V0]),V2@Buf1},
{V2@V4,V2@Buf5}
end
end,
{{'macroENB-ID',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:28/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V4,V3@Buf5}  = {list_to_bitstring([V3@V0]),V3@Buf1},
{V3@V4,V3@Buf5}
end
end,
{{'homeENB-ID',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_CompletedCellinEAI-Item'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_EUTRAN-CGI'(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CompletedCellinEAI-Item_iE-Extensions'(Enc4@element)
end
end].
'enc_CompletedCellinEAI-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CompletedCellinEAI-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components66(V1@Add4, V1@Buf1, []).



'dec_CompletedCellinEAI-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type EUTRAN-CGI
{Term1,Bytes3} = 'dec_EUTRAN-CGI'(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CompletedCellinEAI-Item_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CompletedCellinEAI-Item',Term1,Term2},Bytes6}.

'enc_CompletedCellinEAI'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CompletedCellinEAI-Item'(Comp) || Comp <- Val]]
end.



dec_CompletedCellinEAI(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components67(V1@Add4, V1@Buf1, []).

'enc_EmergencyAreaID-Broadcast-Item'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len =:= 3 ->
Enc3@element
end
end,
begin
Enc5@element = element(3, Val),
enc_CompletedCellinEAI(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Enc6@element)
end
end].
'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components68(V1@Add4, V1@Buf1, []).



'dec_EmergencyAreaID-Broadcast-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type CompletedCellinEAI
{Term2,Bytes4} = dec_CompletedCellinEAI(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'EmergencyAreaID-Broadcast-Item',Term1,Term2,Term3},Bytes7}.

'enc_EmergencyAreaID-Broadcast'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_EmergencyAreaID-Broadcast-Item'(Comp) || Comp <- Val]]
end.



'dec_EmergencyAreaID-Broadcast'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components69(V1@Add4, V1@Buf1, []).

'enc_EmergencyAreaID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 3 ->
[align|Val]
end.


dec_EmergencyAreaID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:3/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_EmergencyAreaIDList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 65535 ->
[align,
<<Enc2@len@sub:16>>|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 3 ->
Comp
end
end || Comp <- Val]]
end.



dec_EmergencyAreaIDList(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components70(V1@Add4, V1@Buf1, []).

'enc_ECGIList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_EUTRAN-CGI'(Comp) || Comp <- Val]]
end.



dec_ECGIList(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components71(V1@Add4, V1@Buf1, []).

'enc_Direct-Forwarding-Path-Availability'(Val) ->
if Val =:= directPathAvailable ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Direct-Forwarding-Path-Availability'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'directPathAvailable',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_DL-Forwarding'(Val) ->
if Val =:= 'dL-Forwarding-proposed' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DL-Forwarding'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'dL-Forwarding-proposed',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_DataCodingScheme'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 8 ->
Val
end.


dec_DataCodingScheme(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_CriticalityDiagnostics-IE-Item'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc3@element = element(2, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc3@element =:= reject ->
<<0:1,0:1,0:2>>;
Enc3@element =:= ignore ->
<<0:1,0:1,1:2>>;
Enc3@element =:= notify ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end;
true ->
if Enc3@element =:= reject ->
<<0:1,1:1,0:2>>;
Enc3@element =:= ignore ->
<<0:1,1:1,1:2>>;
Enc3@element =:= notify ->
<<0:1,1:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end
end,
align,
begin
Enc5@element = element(3, Val),
if Enc5@element bsr 16 =:= 0 ->
<<Enc5@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end,
begin
Enc7@element = element(4, Val),
if Enc7@element =:= 'not-understood' ->
<<0:1,0:1>>;
Enc7@element =:= missing ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics-IE-Item_iE-Extensions'(Enc9@element)
end
end].
'enc_CriticalityDiagnostics-IE-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CriticalityDiagnostics-IE-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components72(V1@Add4, V1@Buf1, []).



'dec_CriticalityDiagnostics-IE-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,[reject,ignore,notify]}}}})
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:1/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> 'not-understood';
1 -> missing
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_CriticalityDiagnostics-IE-Item_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'CriticalityDiagnostics-IE-Item',Term1,Term2,Term3,Term4},Bytes8}.

'enc_CriticalityDiagnostics-IE-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CriticalityDiagnostics-IE-Item'(Comp) || Comp <- Val]]
end.



'dec_CriticalityDiagnostics-IE-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components73(V1@Add4, V1@Buf1, []).

'enc_CriticalityDiagnostics'(Val) ->
[begin
Enc1@element = element(2, Val),
Enc2@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(4, Val),
Enc4@element = element(5, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(6, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
Enc7@element bsr 8 =:= 0 ->
[align,
Enc7@element];
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end
end,
begin
Enc10@element = element(3, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
Enc10@element =:= 'initiating-message' ->
<<0:2>>;
Enc10@element =:= 'successful-outcome' ->
<<1:2>>;
Enc10@element =:= 'unsuccessfull-outcome' ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@element}}})
end
end,
begin
Enc13@element = element(4, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
Enc13@element =:= reject ->
<<0:2>>;
Enc13@element =:= ignore ->
<<1:2>>;
Enc13@element =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@element}}})
end
end,
begin
Enc16@element = element(5, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics-IE-List'(Enc16@element)
end
end|begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics_iE-Extensions'(Enc18@element)
end
end].
'enc_CriticalityDiagnostics_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CriticalityDiagnostics_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components74(V1@Add4, V1@Buf1, []).



dec_CriticalityDiagnostics(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessfull-outcome';
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,['initiating-message','successful-outcome','unsuccessfull-outcome']}}}})
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,[reject,ignore,notify]}}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CriticalityDiagnostics-IE-List
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_CriticalityDiagnostics-IE-List'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CriticalityDiagnostics_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CriticalityDiagnostics',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_COUNTvalue'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 12 =:= 0 ->
<<Enc3@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
if Enc5@element bsr 20 =:= 0 ->
begin
Enc5@element@bin = binary:encode_unsigned(Enc5@element),
Enc5@element@bin_size0 = byte_size(Enc5@element@bin),
Enc5@element@bin_size = Enc5@element@bin_size0 - 1,
[<<Enc5@element@bin_size:2,0:6>>|Enc5@element@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc7@element = element(4, Val),
if Enc7@element =:= asn1_NOVALUE ->
[];
true ->
'enc_COUNTvalue_iE-Extensions'(Enc7@element)
end
end].
'enc_COUNTvalue_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_COUNTvalue_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components75(V1@Add4, V1@Buf1, []).



dec_COUNTvalue(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_COUNTvalue_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'COUNTvalue',Term1,Term2,Term3},Bytes7}.

'enc_CSG-IdList-Item'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@bits = bit_size(Enc3@element),
if Enc4@bits =:= 27 ->
Enc3@element
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CSG-IdList-Item_iE-Extensions'(Enc5@element)
end
end].
'enc_CSG-IdList-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CSG-IdList-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components76(V1@Add4, V1@Buf1, []).



'dec_CSG-IdList-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:27/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V4,V3@Buf5}  = {list_to_bitstring([V3@V0]),V3@Buf1},
{V3@V4,V3@Buf5}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CSG-IdList-Item_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CSG-IdList-Item',Term1,Term2},Bytes6}.

'enc_CSG-IdList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CSG-IdList-Item'(Comp) || Comp <- Val]]
end.



'dec_CSG-IdList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components77(V1@Add4, V1@Buf1, []).

'enc_CSG-Id'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 27 ->
[align|Val]
end.


'dec_CSG-Id'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:27/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_CSFallbackIndicator'(Val) ->
if Val =:= 'cs-fallback-required' ->
<<0:1>>;
Val =:= 'cs-fallback-high-priority' ->
<<1:1,0:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CSFallbackIndicator(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'cs-fallback-required',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
0 -> 'cs-fallback-high-priority';
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CNDomain'(Val) ->
if Val =:= ps ->
<<0:1>>;
Val =:= cs ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CNDomain(Bytes) ->
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ps;
1 -> cs
end,
{V1@Int2,V1@Buf1}
end.

'enc_CI'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len =:= 2 ->
Val
end.


dec_CI(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary:copy(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_CGI'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@element = element(2, Val),
Enc5@len = byte_size(Enc4@element),
if Enc5@len =:= 3 ->
Enc4@element
end
end,
begin
Enc6@element = element(3, Val),
Enc7@len = byte_size(Enc6@element),
if Enc7@len =:= 2 ->
Enc6@element
end
end,
begin
Enc8@element = element(4, Val),
Enc9@len = byte_size(Enc8@element),
if Enc9@len =:= 2 ->
Enc8@element
end
end,
begin
Enc10@element = element(5, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@len = byte_size(Enc10@element),
if Enc11@len =:= 1 ->
Enc10@element
end
end
end
end|begin
Enc13@element = element(6, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CGI_iE-Extensions'(Enc13@element)
end
end].
'enc_CGI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CGI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CGI_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CGI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CGI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components78(V1@Add4, V1@Buf1, []).



dec_CGI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary:copy(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V5@V0:2/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V6@V0:1/binary-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Conv2 = binary:copy(V6@V0),
{V6@Conv2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CGI_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CGI',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_CellType'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= verysmall ->
<<0:1,0:2>>;
Enc3@element =:= small ->
<<0:1,1:2>>;
Enc3@element =:= medium ->
<<0:1,2:2>>;
Enc3@element =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CellType_iE-Extensions'(Enc5@element)
end
end].
'enc_CellType_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellType_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellType_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellType_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellType_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components79(V1@Add4, V1@Buf1, []).



dec_CellType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CellType_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CellType',Term1,Term2},Bytes6}.

'enc_Cell-Size'(Val) ->
if Val =:= verysmall ->
<<0:1,0:2>>;
Val =:= small ->
<<0:1,1:2>>;
Val =:= medium ->
<<0:1,2:2>>;
Val =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Cell-Size'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cdma2000OneXRAND'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000OneXRAND(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Cdma2000OneXPilot'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000OneXPilot(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Cdma2000OneXMSI'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000OneXMSI(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Cdma2000OneXMEID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000OneXMEID(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Cdma2000OneXSRVCCInfo'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@element = element(2, Val),
Enc4@len = byte_size(Enc3@element),
if Enc4@len < 128 ->
[Enc4@len|Enc3@element];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc3@element];
true ->
encode_fragmented(Enc3@element, 8)
end
end,
begin
Enc5@element = element(3, Val),
Enc6@len = byte_size(Enc5@element),
if Enc6@len < 128 ->
[Enc6@len|Enc5@element];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc5@element];
true ->
encode_fragmented(Enc5@element, 8)
end
end,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len < 128 ->
[Enc8@len|Enc7@element];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc7@element];
true ->
encode_fragmented(Enc7@element, 8)
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Cdma2000OneXSRVCCInfo_iE-Extensions'(Enc9@element)
end
end].
'enc_Cdma2000OneXSRVCCInfo_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_Cdma2000OneXSRVCCInfo_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components80(V1@Add4, V1@Buf1, []).



dec_Cdma2000OneXSRVCCInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
V3@Conv10 = binary:copy(V3@V0),
{V3@Conv10,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@V5:V4@V3/binary-unit:8,V4@Buf6/bitstring>> ->
{V4@V5,V4@Buf6};
<<1:1,0:1,V4@V4:14,V4@V6:V4@V4/binary-unit:8,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,1:1,V4@V4:6,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7}  = decode_fragmented(V4@V4, V4@Buf5, 8),
{V4@V6,V4@Buf7}
end,
V4@Conv8 = binary:copy(V4@V0),
{V4@Conv8,V4@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:7,V5@V5:V5@V3/binary-unit:8,V5@Buf6/bitstring>> ->
{V5@V5,V5@Buf6};
<<1:1,0:1,V5@V4:14,V5@V6:V5@V4/binary-unit:8,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,1:1,V5@V4:6,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7}  = decode_fragmented(V5@V4, V5@Buf5, 8),
{V5@V6,V5@Buf7}
end,
V5@Conv8 = binary:copy(V5@V0),
{V5@Conv8,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_Cdma2000OneXSRVCCInfo_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'Cdma2000OneXSRVCCInfo',Term1,Term2,Term3,Term4},Bytes8}.

'enc_Cdma2000HORequiredIndication'(Val) ->
if Val =:= true ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Cdma2000HORequiredIndication(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'true',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cdma2000HOStatus'(Val) ->
if Val =:= hOSuccess ->
<<0:1,0:1>>;
Val =:= hOFailure ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Cdma2000HOStatus(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> hOSuccess;
1 -> hOFailure
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cdma2000SectorID'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000SectorID(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_Cdma2000RATType'(Val) ->
if Val =:= hRPD ->
<<0:1,0:1>>;
Val =:= onexRTT ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Cdma2000RATType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> hRPD;
1 -> onexRTT
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cdma2000PDU'(Val) ->
Enc1@len = byte_size(Val),
if Enc1@len < 128 ->
[align,
Enc1@len|Val];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Val];
true ->
[align|encode_fragmented(Val, 8)]
end.


dec_Cdma2000PDU(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary:copy(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_CellID-Broadcast-Item'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
'enc_EUTRAN-CGI'(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_CellID-Broadcast-Item_iE-Extensions'(Enc4@element)
end
end].
'enc_CellID-Broadcast-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellID-Broadcast-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components81(V1@Add4, V1@Buf1, []).



'dec_CellID-Broadcast-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type EUTRAN-CGI
{Term1,Bytes3} = 'dec_EUTRAN-CGI'(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CellID-Broadcast-Item_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CellID-Broadcast-Item',Term1,Term2},Bytes6}.

'enc_CellID-Broadcast'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellID-Broadcast-Item'(Comp) || Comp <- Val]]
end.



'dec_CellID-Broadcast'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components82(V1@Add4, V1@Buf1, []).

'enc_CellIdentity'(Val) ->
Enc1@bits = bit_size(Val),
if Enc1@bits =:= 28 ->
[align|Val]
end.


dec_CellIdentity(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:28/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {list_to_bitstring([V1@V0]),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_CauseNas'(Val) ->
if Val =:= 'normal-release' ->
<<0:1,0:2>>;
Val =:= 'authentication-failure' ->
<<0:1,1:2>>;
Val =:= detach ->
<<0:1,2:2>>;
Val =:= unspecified ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseNas(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'normal-release';
1 -> 'authentication-failure';
2 -> detach;
3 -> unspecified
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseTransport'(Val) ->
if Val =:= 'transport-resource-unavailable' ->
<<0:1,0:1>>;
Val =:= unspecified ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseTransport(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'transport-resource-unavailable';
1 -> unspecified
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseRadioNetwork'(Val) ->
if Val =:= unspecified ->
<<0:1,0:6>>;
Val =:= 'tx2relocoverall-expiry' ->
<<0:1,1:6>>;
Val =:= 'successful-handover' ->
<<0:1,2:6>>;
Val =:= 'release-due-to-eutran-generated-reason' ->
<<0:1,3:6>>;
Val =:= 'handover-cancelled' ->
<<0:1,4:6>>;
Val =:= 'partial-handover' ->
<<0:1,5:6>>;
Val =:= 'ho-failure-in-target-EPC-eNB-or-target-system' ->
<<0:1,6:6>>;
Val =:= 'ho-target-not-allowed' ->
<<0:1,7:6>>;
Val =:= 'tS1relocoverall-expiry' ->
<<0:1,8:6>>;
Val =:= 'tS1relocprep-expiry' ->
<<0:1,9:6>>;
Val =:= 'cell-not-available' ->
<<0:1,10:6>>;
Val =:= 'unknown-targetID' ->
<<0:1,11:6>>;
Val =:= 'no-radio-resources-available-in-target-cell' ->
<<0:1,12:6>>;
Val =:= 'unknown-mme-ue-s1ap-id' ->
<<0:1,13:6>>;
Val =:= 'unknown-enb-ue-s1ap-id' ->
<<0:1,14:6>>;
Val =:= 'unknown-pair-ue-s1ap-id' ->
<<0:1,15:6>>;
Val =:= 'handover-desirable-for-radio-reason' ->
<<0:1,16:6>>;
Val =:= 'time-critical-handover' ->
<<0:1,17:6>>;
Val =:= 'resource-optimisation-handover' ->
<<0:1,18:6>>;
Val =:= 'reduce-load-in-serving-cell' ->
<<0:1,19:6>>;
Val =:= 'user-inactivity' ->
<<0:1,20:6>>;
Val =:= 'radio-connection-with-ue-lost' ->
<<0:1,21:6>>;
Val =:= 'load-balancing-tau-required' ->
<<0:1,22:6>>;
Val =:= 'cs-fallback-triggered' ->
<<0:1,23:6>>;
Val =:= 'ue-not-available-for-ps-service' ->
<<0:1,24:6>>;
Val =:= 'radio-resources-not-available' ->
<<0:1,25:6>>;
Val =:= 'failure-in-radio-interface-procedure' ->
<<0:1,26:6>>;
Val =:= 'invalid-qos-combination' ->
<<0:1,27:6>>;
Val =:= 'interrat-redirection' ->
<<0:1,28:6>>;
Val =:= 'interaction-with-other-procedure' ->
<<0:1,29:6>>;
Val =:= 'unknown-E-RAB-ID' ->
<<0:1,30:6>>;
Val =:= 'multiple-E-RAB-ID-instances' ->
<<0:1,31:6>>;
Val =:= 'encryption-and-or-integrity-protection-algorithms-not-supported' ->
<<0:1,32:6>>;
Val =:= 's1-intra-system-handover-triggered' ->
<<0:1,33:6>>;
Val =:= 's1-inter-system-handover-triggered' ->
<<0:1,34:6>>;
Val =:= 'x2-handover-triggered' ->
<<0:1,35:6>>;
Val =:= 'redirection-towards-1xRTT' ->
<<1:1,0:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseRadioNetwork(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:6/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> unspecified;
1 -> 'tx2relocoverall-expiry';
2 -> 'successful-handover';
3 -> 'release-due-to-eutran-generated-reason';
4 -> 'handover-cancelled';
5 -> 'partial-handover';
6 -> 'ho-failure-in-target-EPC-eNB-or-target-system';
7 -> 'ho-target-not-allowed';
8 -> 'tS1relocoverall-expiry';
9 -> 'tS1relocprep-expiry';
10 -> 'cell-not-available';
11 -> 'unknown-targetID';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'unknown-mme-ue-s1ap-id';
14 -> 'unknown-enb-ue-s1ap-id';
15 -> 'unknown-pair-ue-s1ap-id';
16 -> 'handover-desirable-for-radio-reason';
17 -> 'time-critical-handover';
18 -> 'resource-optimisation-handover';
19 -> 'reduce-load-in-serving-cell';
20 -> 'user-inactivity';
21 -> 'radio-connection-with-ue-lost';
22 -> 'load-balancing-tau-required';
23 -> 'cs-fallback-triggered';
24 -> 'ue-not-available-for-ps-service';
25 -> 'radio-resources-not-available';
26 -> 'failure-in-radio-interface-procedure';
27 -> 'invalid-qos-combination';
28 -> 'interrat-redirection';
29 -> 'interaction-with-other-procedure';
30 -> 'unknown-E-RAB-ID';
31 -> 'multiple-E-RAB-ID-instances';
32 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
33 -> 's1-intra-system-handover-triggered';
34 -> 's1-inter-system-handover-triggered';
35 -> 'x2-handover-triggered';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[unspecified,'tx2relocoverall-expiry','successful-handover','release-due-to-eutran-generated-reason','handover-cancelled','partial-handover','ho-failure-in-target-EPC-eNB-or-target-system','ho-target-not-allowed','tS1relocoverall-expiry','tS1relocprep-expiry','cell-not-available','unknown-targetID','no-radio-resources-available-in-target-cell','unknown-mme-ue-s1ap-id','unknown-enb-ue-s1ap-id','unknown-pair-ue-s1ap-id','handover-desirable-for-radio-reason','time-critical-handover','resource-optimisation-handover','reduce-load-in-serving-cell','user-inactivity','radio-connection-with-ue-lost','load-balancing-tau-required','cs-fallback-triggered','ue-not-available-for-ps-service','radio-resources-not-available','failure-in-radio-interface-procedure','invalid-qos-combination','interrat-redirection','interaction-with-other-procedure','unknown-E-RAB-ID','multiple-E-RAB-ID-instances','encryption-and-or-integrity-protection-algorithms-not-supported','s1-intra-system-handover-triggered','s1-inter-system-handover-triggered','x2-handover-triggered']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
0 -> 'redirection-towards-1xRTT';
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseProtocol'(Val) ->
if Val =:= 'transfer-syntax-error' ->
<<0:1,0:3>>;
Val =:= 'abstract-syntax-error-reject' ->
<<0:1,1:3>>;
Val =:= 'abstract-syntax-error-ignore-and-notify' ->
<<0:1,2:3>>;
Val =:= 'message-not-compatible-with-receiver-state' ->
<<0:1,3:3>>;
Val =:= 'semantic-error' ->
<<0:1,4:3>>;
Val =:= 'abstract-syntax-error-falsely-constructed-message' ->
<<0:1,5:3>>;
Val =:= unspecified ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseProtocol(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> 'abstract-syntax-error-falsely-constructed-message';
6 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['transfer-syntax-error','abstract-syntax-error-reject','abstract-syntax-error-ignore-and-notify','message-not-compatible-with-receiver-state','semantic-error','abstract-syntax-error-falsely-constructed-message',unspecified]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseMisc'(Val) ->
if Val =:= 'control-processing-overload' ->
<<0:1,0:3>>;
Val =:= 'not-enough-user-plane-processing-resources' ->
<<0:1,1:3>>;
Val =:= 'hardware-failure' ->
<<0:1,2:3>>;
Val =:= 'om-intervention' ->
<<0:1,3:3>>;
Val =:= unspecified ->
<<0:1,4:3>>;
Val =:= 'unknown-PLMN' ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseMisc(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'control-processing-overload';
1 -> 'not-enough-user-plane-processing-resources';
2 -> 'hardware-failure';
3 -> 'om-intervention';
4 -> unspecified;
5 -> 'unknown-PLMN';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['control-processing-overload','not-enough-user-plane-processing-resources','hardware-failure','om-intervention',unspecified,'unknown-PLMN']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= radioNetwork ->
if ChoiceVal =:= unspecified ->
<<0:1,0:3,0:1,0:6>>;
ChoiceVal =:= 'tx2relocoverall-expiry' ->
<<0:1,0:3,0:1,1:6>>;
ChoiceVal =:= 'successful-handover' ->
<<0:1,0:3,0:1,2:6>>;
ChoiceVal =:= 'release-due-to-eutran-generated-reason' ->
<<0:1,0:3,0:1,3:6>>;
ChoiceVal =:= 'handover-cancelled' ->
<<0:1,0:3,0:1,4:6>>;
ChoiceVal =:= 'partial-handover' ->
<<0:1,0:3,0:1,5:6>>;
ChoiceVal =:= 'ho-failure-in-target-EPC-eNB-or-target-system' ->
<<0:1,0:3,0:1,6:6>>;
ChoiceVal =:= 'ho-target-not-allowed' ->
<<0:1,0:3,0:1,7:6>>;
ChoiceVal =:= 'tS1relocoverall-expiry' ->
<<0:1,0:3,0:1,8:6>>;
ChoiceVal =:= 'tS1relocprep-expiry' ->
<<0:1,0:3,0:1,9:6>>;
ChoiceVal =:= 'cell-not-available' ->
<<0:1,0:3,0:1,10:6>>;
ChoiceVal =:= 'unknown-targetID' ->
<<0:1,0:3,0:1,11:6>>;
ChoiceVal =:= 'no-radio-resources-available-in-target-cell' ->
<<0:1,0:3,0:1,12:6>>;
ChoiceVal =:= 'unknown-mme-ue-s1ap-id' ->
<<0:1,0:3,0:1,13:6>>;
ChoiceVal =:= 'unknown-enb-ue-s1ap-id' ->
<<0:1,0:3,0:1,14:6>>;
ChoiceVal =:= 'unknown-pair-ue-s1ap-id' ->
<<0:1,0:3,0:1,15:6>>;
ChoiceVal =:= 'handover-desirable-for-radio-reason' ->
<<0:1,0:3,0:1,16:6>>;
ChoiceVal =:= 'time-critical-handover' ->
<<0:1,0:3,0:1,17:6>>;
ChoiceVal =:= 'resource-optimisation-handover' ->
<<0:1,0:3,0:1,18:6>>;
ChoiceVal =:= 'reduce-load-in-serving-cell' ->
<<0:1,0:3,0:1,19:6>>;
ChoiceVal =:= 'user-inactivity' ->
<<0:1,0:3,0:1,20:6>>;
ChoiceVal =:= 'radio-connection-with-ue-lost' ->
<<0:1,0:3,0:1,21:6>>;
ChoiceVal =:= 'load-balancing-tau-required' ->
<<0:1,0:3,0:1,22:6>>;
ChoiceVal =:= 'cs-fallback-triggered' ->
<<0:1,0:3,0:1,23:6>>;
ChoiceVal =:= 'ue-not-available-for-ps-service' ->
<<0:1,0:3,0:1,24:6>>;
ChoiceVal =:= 'radio-resources-not-available' ->
<<0:1,0:3,0:1,25:6>>;
ChoiceVal =:= 'failure-in-radio-interface-procedure' ->
<<0:1,0:3,0:1,26:6>>;
ChoiceVal =:= 'invalid-qos-combination' ->
<<0:1,0:3,0:1,27:6>>;
ChoiceVal =:= 'interrat-redirection' ->
<<0:1,0:3,0:1,28:6>>;
ChoiceVal =:= 'interaction-with-other-procedure' ->
<<0:1,0:3,0:1,29:6>>;
ChoiceVal =:= 'unknown-E-RAB-ID' ->
<<0:1,0:3,0:1,30:6>>;
ChoiceVal =:= 'multiple-E-RAB-ID-instances' ->
<<0:1,0:3,0:1,31:6>>;
ChoiceVal =:= 'encryption-and-or-integrity-protection-algorithms-not-supported' ->
<<0:1,0:3,0:1,32:6>>;
ChoiceVal =:= 's1-intra-system-handover-triggered' ->
<<0:1,0:3,0:1,33:6>>;
ChoiceVal =:= 's1-inter-system-handover-triggered' ->
<<0:1,0:3,0:1,34:6>>;
ChoiceVal =:= 'x2-handover-triggered' ->
<<0:1,0:3,0:1,35:6>>;
ChoiceVal =:= 'redirection-towards-1xRTT' ->
<<0:1,0:3,1:1,0:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= transport ->
if ChoiceVal =:= 'transport-resource-unavailable' ->
<<0:1,1:3,0:1,0:1>>;
ChoiceVal =:= unspecified ->
<<0:1,1:3,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= nas ->
if ChoiceVal =:= 'normal-release' ->
<<0:1,2:3,0:1,0:2>>;
ChoiceVal =:= 'authentication-failure' ->
<<0:1,2:3,0:1,1:2>>;
ChoiceVal =:= detach ->
<<0:1,2:3,0:1,2:2>>;
ChoiceVal =:= unspecified ->
<<0:1,2:3,0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= protocol ->
if ChoiceVal =:= 'transfer-syntax-error' ->
<<0:1,3:3,0:1,0:3>>;
ChoiceVal =:= 'abstract-syntax-error-reject' ->
<<0:1,3:3,0:1,1:3>>;
ChoiceVal =:= 'abstract-syntax-error-ignore-and-notify' ->
<<0:1,3:3,0:1,2:3>>;
ChoiceVal =:= 'message-not-compatible-with-receiver-state' ->
<<0:1,3:3,0:1,3:3>>;
ChoiceVal =:= 'semantic-error' ->
<<0:1,3:3,0:1,4:3>>;
ChoiceVal =:= 'abstract-syntax-error-falsely-constructed-message' ->
<<0:1,3:3,0:1,5:3>>;
ChoiceVal =:= unspecified ->
<<0:1,3:3,0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= misc ->
if ChoiceVal =:= 'control-processing-overload' ->
<<0:1,4:3,0:1,0:3>>;
ChoiceVal =:= 'not-enough-user-plane-processing-resources' ->
<<0:1,4:3,0:1,1:3>>;
ChoiceVal =:= 'hardware-failure' ->
<<0:1,4:3,0:1,2:3>>;
ChoiceVal =:= 'om-intervention' ->
<<0:1,4:3,0:1,3:3>>;
ChoiceVal =:= unspecified ->
<<0:1,4:3,0:1,4:3>>;
ChoiceVal =:= 'unknown-PLMN' ->
<<0:1,4:3,0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_Cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> unspecified;
1 -> 'tx2relocoverall-expiry';
2 -> 'successful-handover';
3 -> 'release-due-to-eutran-generated-reason';
4 -> 'handover-cancelled';
5 -> 'partial-handover';
6 -> 'ho-failure-in-target-EPC-eNB-or-target-system';
7 -> 'ho-target-not-allowed';
8 -> 'tS1relocoverall-expiry';
9 -> 'tS1relocprep-expiry';
10 -> 'cell-not-available';
11 -> 'unknown-targetID';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'unknown-mme-ue-s1ap-id';
14 -> 'unknown-enb-ue-s1ap-id';
15 -> 'unknown-pair-ue-s1ap-id';
16 -> 'handover-desirable-for-radio-reason';
17 -> 'time-critical-handover';
18 -> 'resource-optimisation-handover';
19 -> 'reduce-load-in-serving-cell';
20 -> 'user-inactivity';
21 -> 'radio-connection-with-ue-lost';
22 -> 'load-balancing-tau-required';
23 -> 'cs-fallback-triggered';
24 -> 'ue-not-available-for-ps-service';
25 -> 'radio-resources-not-available';
26 -> 'failure-in-radio-interface-procedure';
27 -> 'invalid-qos-combination';
28 -> 'interrat-redirection';
29 -> 'interaction-with-other-procedure';
30 -> 'unknown-E-RAB-ID';
31 -> 'multiple-E-RAB-ID-instances';
32 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
33 -> 's1-intra-system-handover-triggered';
34 -> 's1-inter-system-handover-triggered';
35 -> 'x2-handover-triggered';
_ -> exit({error,{asn1,{decode_enumerated,{V2@V3,[unspecified,'tx2relocoverall-expiry','successful-handover','release-due-to-eutran-generated-reason','handover-cancelled','partial-handover','ho-failure-in-target-EPC-eNB-or-target-system','ho-target-not-allowed','tS1relocoverall-expiry','tS1relocprep-expiry','cell-not-available','unknown-targetID','no-radio-resources-available-in-target-cell','unknown-mme-ue-s1ap-id','unknown-enb-ue-s1ap-id','unknown-pair-ue-s1ap-id','handover-desirable-for-radio-reason','time-critical-handover','resource-optimisation-handover','reduce-load-in-serving-cell','user-inactivity','radio-connection-with-ue-lost','load-balancing-tau-required','cs-fallback-triggered','ue-not-available-for-ps-service','radio-resources-not-available','failure-in-radio-interface-procedure','invalid-qos-combination','interrat-redirection','interaction-with-other-procedure','unknown-E-RAB-ID','multiple-E-RAB-ID-instances','encryption-and-or-integrity-protection-algorithms-not-supported','s1-intra-system-handover-triggered','s1-inter-system-handover-triggered','x2-handover-triggered']}}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
0 -> 'redirection-towards-1xRTT';
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{radioNetwork,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:1/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> 'transport-resource-unavailable';
1 -> unspecified
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{transport,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes2 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> 'normal-release';
1 -> 'authentication-failure';
2 -> detach;
3 -> unspecified
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{nas,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
{V5@V0,V5@Buf1} = case Bytes2 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> 'abstract-syntax-error-falsely-constructed-message';
6 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,['transfer-syntax-error','abstract-syntax-error-reject','abstract-syntax-error-ignore-and-notify','message-not-compatible-with-receiver-state','semantic-error','abstract-syntax-error-falsely-constructed-message',unspecified]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end
end,
{{protocol,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
{V6@V0,V6@Buf1} = case Bytes2 of
<<0:1,V6@V3:3/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> 'control-processing-overload';
1 -> 'not-enough-user-plane-processing-resources';
2 -> 'hardware-failure';
3 -> 'om-intervention';
4 -> unspecified;
5 -> 'unknown-PLMN';
_ -> exit({error,{asn1,{decode_enumerated,{V6@V3,['control-processing-overload','not-enough-user-plane-processing-resources','hardware-failure','om-intervention',unspecified,'unknown-PLMN']}}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
V6@Pad9 = bit_size(V6@Buf5) band 7,
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<_:V6@Pad9,0:1,V6@V11:7,V6@Buf12/bitstring>> when V6@V11 =/= 0 ->
{V6@V11,V6@Buf12};
<<_:V6@Pad9,1:1,0:1,V6@V12:14,V6@Buf13/bitstring>> when V6@V12 =/= 0 ->
{V6@V12,V6@Buf13}
end,
<<V6@V14:V6@V6/unit:8,V6@Buf15/bitstring>> = V6@Buf7,
{V6@V14,V6@Buf15}
end,
V6@Int16 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int16,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end
end,
{{misc,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_BroadcastCompletedAreaList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'cellID-Broadcast' ->
[<<0:1,0:2>>|'enc_CellID-Broadcast'(ChoiceVal)];
ChoiceTag =:= 'tAI-Broadcast' ->
[<<0:1,1:2>>|'enc_TAI-Broadcast'(ChoiceVal)];
ChoiceTag =:= 'emergencyAreaID-Broadcast' ->
[<<0:1,2:2>>|'enc_EmergencyAreaID-Broadcast'(ChoiceVal)]
end.


dec_BroadcastCompletedAreaList(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CellID-Broadcast'(Bytes2)
end,
{{'cellID-Broadcast',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_TAI-Broadcast'(Bytes2)
end,
{{'tAI-Broadcast',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_EmergencyAreaID-Broadcast'(Bytes2)
end,
{{'emergencyAreaID-Broadcast',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_BPLMNs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 6 ->
[<<Enc2@len@sub:3>>,
align|[begin
Enc1@len = byte_size(Comp),
if Enc1@len =:= 3 ->
Comp
end
end || Comp <- Val]]
end.



dec_BPLMNs(Bytes) ->
%% Length with constraint {1,6}
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components83(V1@Add2, V1@Buf1, []).

'enc_BitRate'(Val) ->
if 0 =< Val, Val < 10000000001 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:3>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_BitRate(Bytes) ->
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_Bearers-SubjectToStatusTransfer-Item'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 4 =:= 0 ->
<<0:1,Enc4@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@element)]
end
end,
begin
Enc6@element = element(3, Val),
enc_COUNTvalue(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
enc_COUNTvalue(Enc7@element)
end,
begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@bits = bit_size(Enc8@element),
if Enc9@bits =:= 4096 ->
[align|Enc8@element]
end
end
end
end|begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Enc11@element)
end
end].
'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components84(V1@Add4, V1@Buf1, []).



'dec_Bearers-SubjectToStatusTransfer-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type COUNTvalue
{Term2,Bytes4} = dec_COUNTvalue(Bytes3),

%% attribute number 3 with type COUNTvalue
{Term3,Bytes5} = dec_COUNTvalue(Bytes4),

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes5) band 7,
<<_:V4@Pad2,V4@V0:4096/binary-unit:1,V4@Buf1/bitstring>> = Bytes5,
{V4@V4,V4@Buf5}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V4,V4@Buf5}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'Bearers-SubjectToStatusTransfer-Item',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_Bearers-SubjectToStatusTransferList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value85(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value86(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_Bearers-SubjectToStatusTransferList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components87(V1@Add4, V1@Buf1, []).

'enc_AllocationAndRetentionPriority'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element =:= spare ->
<<0:4>>;
Enc3@element =:= highest ->
<<1:4>>;
Enc3@element =:= lowest ->
<<14:4>>;
Enc3@element =:= 'no-priority' ->
<<15:4>>;
Enc3@element bsr 4 =:= 0 ->
<<Enc3@element:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@element}}})
end
end,
begin
Enc5@element = element(3, Val),
Enc7@element = element(4, Val),
if Enc5@element =:= 'shall-not-trigger-pre-emption' ->
if Enc7@element =:= 'not-pre-emptable' ->
<<0:1,0:1>>;
Enc7@element =:= 'pre-emptable' ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end;
Enc5@element =:= 'may-trigger-pre-emption' ->
if Enc7@element =:= 'not-pre-emptable' ->
<<1:1,0:1>>;
Enc7@element =:= 'pre-emptable' ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@element}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@element}}})
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_AllocationAndRetentionPriority_iE-Extensions'(Enc9@element)
end
end].
'enc_AllocationAndRetentionPriority_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_AllocationAndRetentionPriority_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components88(V1@Add4, V1@Buf1, []).



dec_AllocationAndRetentionPriority(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> spare;
1 -> highest;
14 -> lowest;
15 -> 'no-priority';
_ -> V3@V0
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:1/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption'
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
<<V5@V0:1/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable'
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_AllocationAndRetentionPriority_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'AllocationAndRetentionPriority',Term1,Term2,Term3,Term4},Bytes8}.

'enc_TriggeringMessage'(Val) ->
if Val =:= 'initiating-message' ->
<<0:2>>;
Val =:= 'successful-outcome' ->
<<1:2>>;
Val =:= 'unsuccessfull-outcome' ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TriggeringMessage(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessfull-outcome';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,['initiating-message','successful-outcome','unsuccessfull-outcome']}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_ProtocolIE-ID'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ProtocolIE-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ProtocolExtensionID'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ProtocolExtensionID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ProcedureCode'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ProcedureCode(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PrivateIE-ID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= local ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= global ->
begin
Enc4@bin = encode_oid(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end
end.


'dec_PrivateIE-ID'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{local,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes1) band 7,
{V3@V0,V3@Buf1} = case Bytes1 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{global,Val},NewBytes}
end.
'enc_Presence'(Val) ->
if Val =:= optional ->
<<0:2>>;
Val =:= conditional ->
<<1:2>>;
Val =:= mandatory ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Presence(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> optional;
1 -> conditional;
2 -> mandatory;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[optional,conditional,mandatory]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_Criticality'(Val) ->
if Val =:= reject ->
<<0:2>>;
Val =:= ignore ->
<<1:2>>;
Val =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Criticality(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reject,ignore,notify]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_PrivateMessage'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PrivateMessage_privateIEs(Enc2@element)
end].
'enc_PrivateMessage_privateIEs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_PrivateMessage_privateIEs_PrivateIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PrivateMessage_privateIEs_PrivateIE-Field'(Val) ->
[begin
Enc1@element = element(2, Val),
'enc_PrivateIE-ID'(Enc1@element)
end,
begin
Enc2@element = element(3, Val),
if Enc2@element =:= reject ->
<<0:2>>;
Enc2@element =:= ignore ->
<<1:2>>;
Enc2@element =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
align|begin
Enc4@element = element(4, Val),
Enc5@output = iolist_to_binary(Enc4@element),
Enc5@bin = Enc5@output,
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].

'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes) ->

%% attribute number 1 with type PrivateIE-ID
{Term1,Bytes1} = 'dec_PrivateIE-ID'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reject,ignore,notify]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type ASN1_OPEN_TYPE
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
{V2@V0,V2@Buf1}
end,
{{'PrivateIE-Field',Term1,Term2,Term3},Bytes3}.


dec_PrivateMessage_privateIEs(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components89(V1@Add4, V1@Buf1, []).



dec_PrivateMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PrivateMessage_privateIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PrivateMessage',Term1},Bytes4}.

'enc_MMEConfigurationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value90(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value91(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEConfigurationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components92(V1@V0, V1@Buf1, []).



dec_MMEConfigurationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationTransfer',Term1},Bytes4}.

'enc_ENBConfigurationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value93(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value94(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components95(V1@V0, V1@Buf1, []).



dec_ENBConfigurationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationTransfer',Term1},Bytes4}.

'enc_MMEDirectInformationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEDirectInformationTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEDirectInformationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value96(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value97(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEDirectInformationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components98(V1@V0, V1@Buf1, []).



dec_MMEDirectInformationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEDirectInformationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEDirectInformationTransfer',Term1},Bytes4}.

'enc_Inter-SystemInformationTransferType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rIMTransfer ->
[<<0:1>>|enc_RIMTransfer(ChoiceVal)]
end.


'dec_Inter-SystemInformationTransferType'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RIMTransfer(Bytes2)
end,
{{rIMTransfer,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ENBDirectInformationTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBDirectInformationTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBDirectInformationTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value99(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value100(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBDirectInformationTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components101(V1@V0, V1@Buf1, []).



dec_ENBDirectInformationTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBDirectInformationTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBDirectInformationTransfer',Term1},Bytes4}.

'enc_WriteReplaceWarningResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_WriteReplaceWarningResponse_protocolIEs(Enc2@element)
end].
'enc_WriteReplaceWarningResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value102(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value103(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_WriteReplaceWarningResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components104(V1@V0, V1@Buf1, []).



dec_WriteReplaceWarningResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_WriteReplaceWarningResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'WriteReplaceWarningResponse',Term1},Bytes4}.

'enc_WriteReplaceWarningRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_WriteReplaceWarningRequest_protocolIEs(Enc2@element)
end].
'enc_WriteReplaceWarningRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value105(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value106(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_WriteReplaceWarningRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components107(V1@V0, V1@Buf1, []).



dec_WriteReplaceWarningRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_WriteReplaceWarningRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'WriteReplaceWarningRequest',Term1},Bytes4}.

'enc_OverloadStop'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_OverloadStop_protocolIEs(Enc2@element)
end].
'enc_OverloadStop_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_OverloadStop_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_OverloadStop_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_OverloadStop_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_OverloadStop_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components108(V1@V0, V1@Buf1, []).



dec_OverloadStop(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_OverloadStop_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'OverloadStop',Term1},Bytes4}.

'enc_OverloadStart'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_OverloadStart_protocolIEs(Enc2@element)
end].
'enc_OverloadStart_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_OverloadStart_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_OverloadStart_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value109(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_OverloadStart_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value110(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_OverloadStart_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components111(V1@V0, V1@Buf1, []).



dec_OverloadStart(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_OverloadStart_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'OverloadStart',Term1},Bytes4}.

'enc_LocationReport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReport_protocolIEs(Enc2@element)
end].
'enc_LocationReport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value112(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LocationReport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value113(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_LocationReport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components114(V1@V0, V1@Buf1, []).



dec_LocationReport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReport',Term1},Bytes4}.

'enc_LocationReportingFailureIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReportingFailureIndication_protocolIEs(Enc2@element)
end].
'enc_LocationReportingFailureIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value115(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value116(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_LocationReportingFailureIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components117(V1@V0, V1@Buf1, []).



dec_LocationReportingFailureIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReportingFailureIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReportingFailureIndication',Term1},Bytes4}.

'enc_LocationReportingControl'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_LocationReportingControl_protocolIEs(Enc2@element)
end].
'enc_LocationReportingControl_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value118(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value119(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_LocationReportingControl_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components120(V1@V0, V1@Buf1, []).



dec_LocationReportingControl(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LocationReportingControl_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LocationReportingControl',Term1},Bytes4}.

'enc_CellTrafficTrace'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_CellTrafficTrace_protocolIEs(Enc2@element)
end].
'enc_CellTrafficTrace_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value121(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value122(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_CellTrafficTrace_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components123(V1@V0, V1@Buf1, []).



dec_CellTrafficTrace(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_CellTrafficTrace_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'CellTrafficTrace',Term1},Bytes4}.

'enc_DeactivateTrace'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DeactivateTrace_protocolIEs(Enc2@element)
end].
'enc_DeactivateTrace_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value124(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value125(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_DeactivateTrace_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components126(V1@V0, V1@Buf1, []).



dec_DeactivateTrace(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DeactivateTrace_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DeactivateTrace',Term1},Bytes4}.

'enc_TraceFailureIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_TraceFailureIndication_protocolIEs(Enc2@element)
end].
'enc_TraceFailureIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value127(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value128(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_TraceFailureIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components129(V1@V0, V1@Buf1, []).



dec_TraceFailureIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_TraceFailureIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TraceFailureIndication',Term1},Bytes4}.

'enc_TraceStart'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_TraceStart_protocolIEs(Enc2@element)
end].
'enc_TraceStart_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_TraceStart_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TraceStart_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value130(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TraceStart_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value131(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_TraceStart_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components132(V1@V0, V1@Buf1, []).



dec_TraceStart(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_TraceStart_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'TraceStart',Term1},Bytes4}.

'enc_MMEStatusTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEStatusTransfer_protocolIEs(Enc2@element)
end].
'enc_MMEStatusTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value133(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value134(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEStatusTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components135(V1@V0, V1@Buf1, []).



dec_MMEStatusTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEStatusTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEStatusTransfer',Term1},Bytes4}.

'enc_ENBStatusTransfer'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBStatusTransfer_protocolIEs(Enc2@element)
end].
'enc_ENBStatusTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value136(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value137(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBStatusTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components138(V1@V0, V1@Buf1, []).



dec_ENBStatusTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBStatusTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBStatusTransfer',Term1},Bytes4}.

'enc_UECapabilityInfoIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UECapabilityInfoIndication_protocolIEs(Enc2@element)
end].
'enc_UECapabilityInfoIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value139(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value140(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UECapabilityInfoIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components141(V1@V0, V1@Buf1, []).



dec_UECapabilityInfoIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UECapabilityInfoIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UECapabilityInfoIndication',Term1},Bytes4}.

'enc_UplinkS1cdma2000tunneling'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkS1cdma2000tunneling_protocolIEs(Enc2@element)
end].
'enc_UplinkS1cdma2000tunneling_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value142(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value143(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UplinkS1cdma2000tunneling_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components144(V1@V0, V1@Buf1, []).



dec_UplinkS1cdma2000tunneling(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkS1cdma2000tunneling_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkS1cdma2000tunneling',Term1},Bytes4}.

'enc_DownlinkS1cdma2000tunneling'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkS1cdma2000tunneling_protocolIEs(Enc2@element)
end].
'enc_DownlinkS1cdma2000tunneling_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value145(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value146(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_DownlinkS1cdma2000tunneling_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components147(V1@V0, V1@Buf1, []).



dec_DownlinkS1cdma2000tunneling(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkS1cdma2000tunneling_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkS1cdma2000tunneling',Term1},Bytes4}.

'enc_MMEConfigurationUpdateFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdateFailure_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdateFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value148(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value149(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEConfigurationUpdateFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components150(V1@V0, V1@Buf1, []).



dec_MMEConfigurationUpdateFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdateFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdateFailure',Term1},Bytes4}.

'enc_MMEConfigurationUpdateAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdateAcknowledge_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdateAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value151(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value152(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEConfigurationUpdateAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components153(V1@V0, V1@Buf1, []).



dec_MMEConfigurationUpdateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdateAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdateAcknowledge',Term1},Bytes4}.

'enc_MMEConfigurationUpdate'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_MMEConfigurationUpdate_protocolIEs(Enc2@element)
end].
'enc_MMEConfigurationUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value154(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value155(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_MMEConfigurationUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components156(V1@V0, V1@Buf1, []).



dec_MMEConfigurationUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_MMEConfigurationUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MMEConfigurationUpdate',Term1},Bytes4}.

'enc_ENBConfigurationUpdateFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdateFailure_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdateFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value157(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value158(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdateFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components159(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdateFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateFailure',Term1},Bytes4}.

'enc_ENBConfigurationUpdateAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdateAcknowledge_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value160(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value161(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdateAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components162(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateAcknowledge',Term1},Bytes4}.

'enc_ENBConfigurationUpdate'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ENBConfigurationUpdate_protocolIEs(Enc2@element)
end].
'enc_ENBConfigurationUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value163(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value164(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components165(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdate',Term1},Bytes4}.

'enc_S1SetupFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupFailure_protocolIEs(Enc2@element)
end].
'enc_S1SetupFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value166(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value167(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_S1SetupFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components168(V1@V0, V1@Buf1, []).



dec_S1SetupFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupFailure',Term1},Bytes4}.

'enc_S1SetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupResponse_protocolIEs(Enc2@element)
end].
'enc_S1SetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value169(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value170(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_S1SetupResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components171(V1@V0, V1@Buf1, []).



dec_S1SetupResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupResponse',Term1},Bytes4}.

'enc_S1SetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_S1SetupRequest_protocolIEs(Enc2@element)
end].
'enc_S1SetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value172(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value173(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_S1SetupRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components174(V1@V0, V1@Buf1, []).



dec_S1SetupRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_S1SetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'S1SetupRequest',Term1},Bytes4}.

'enc_ErrorIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ErrorIndication_protocolIEs(Enc2@element)
end].
'enc_ErrorIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value175(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value176(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ErrorIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components177(V1@V0, V1@Buf1, []).



dec_ErrorIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ErrorIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ErrorIndication',Term1},Bytes4}.

'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value178(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value179(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components180(V1@Add4, V1@Buf1, []).

'enc_ResetAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_ResetAcknowledge_protocolIEs(Enc2@element)
end].
'enc_ResetAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value181(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value182(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResetAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components183(V1@V0, V1@Buf1, []).



dec_ResetAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResetAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResetAcknowledge',Term1},Bytes4}.

'enc_UE-associatedLogicalS1-ConnectionListRes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value184(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value185(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_UE-associatedLogicalS1-ConnectionListRes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components186(V1@Add4, V1@Buf1, []).

'enc_ResetAll'(Val) ->
if Val =:= 'reset-all' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ResetAll(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'reset-all',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ResetType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 's1-Interface' ->
if ChoiceVal =:= 'reset-all' ->
<<0:1,0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'partOfS1-Interface' ->
[<<0:1,1:1>>|'enc_UE-associatedLogicalS1-ConnectionListRes'(ChoiceVal)]
end.


dec_ResetType(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@Buf2/bitstring>> ->
{'reset-all',V2@Buf2};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{'s1-Interface',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UE-associatedLogicalS1-ConnectionListRes'(Bytes2)
end,
{{'partOfS1-Interface',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_Reset'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_Reset_protocolIEs(Enc2@element)
end].
'enc_Reset_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_Reset_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_Reset_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value187(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Reset_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value188(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_Reset_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components189(V1@V0, V1@Buf1, []).



dec_Reset(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_Reset_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'Reset',Term1},Bytes4}.

'enc_NASNonDeliveryIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_NASNonDeliveryIndication_protocolIEs(Enc2@element)
end].
'enc_NASNonDeliveryIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value190(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value191(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_NASNonDeliveryIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components192(V1@V0, V1@Buf1, []).



dec_NASNonDeliveryIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_NASNonDeliveryIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'NASNonDeliveryIndication',Term1},Bytes4}.

'enc_UplinkNASTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UplinkNASTransport_protocolIEs(Enc2@element)
end].
'enc_UplinkNASTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value193(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value194(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UplinkNASTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components195(V1@V0, V1@Buf1, []).



dec_UplinkNASTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UplinkNASTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UplinkNASTransport',Term1},Bytes4}.

'enc_InitialUEMessage'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialUEMessage_protocolIEs(Enc2@element)
end].
'enc_InitialUEMessage_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value196(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value197(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_InitialUEMessage_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components198(V1@V0, V1@Buf1, []).



dec_InitialUEMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialUEMessage_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialUEMessage',Term1},Bytes4}.

'enc_DownlinkNASTransport'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_DownlinkNASTransport_protocolIEs(Enc2@element)
end].
'enc_DownlinkNASTransport_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value199(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value200(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_DownlinkNASTransport_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components201(V1@V0, V1@Buf1, []).



dec_DownlinkNASTransport(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_DownlinkNASTransport_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'DownlinkNASTransport',Term1},Bytes4}.

'enc_UEContextModificationFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationFailure_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value202(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value203(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextModificationFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components204(V1@V0, V1@Buf1, []).



dec_UEContextModificationFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationFailure',Term1},Bytes4}.

'enc_UEContextModificationResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationResponse_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value205(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value206(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextModificationResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components207(V1@V0, V1@Buf1, []).



dec_UEContextModificationResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationResponse',Term1},Bytes4}.

'enc_UEContextModificationRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextModificationRequest_protocolIEs(Enc2@element)
end].
'enc_UEContextModificationRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value208(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value209(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextModificationRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components210(V1@V0, V1@Buf1, []).



dec_UEContextModificationRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextModificationRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextModificationRequest',Term1},Bytes4}.

'enc_UEContextReleaseComplete'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseComplete_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseComplete_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value211(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value212(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextReleaseComplete_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components213(V1@V0, V1@Buf1, []).



dec_UEContextReleaseComplete(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseComplete_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseComplete',Term1},Bytes4}.

'enc_UEContextReleaseCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseCommand_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value214(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value215(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextReleaseCommand_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components216(V1@V0, V1@Buf1, []).



dec_UEContextReleaseCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseCommand',Term1},Bytes4}.

'enc_UEContextReleaseRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_UEContextReleaseRequest_protocolIEs(Enc2@element)
end].
'enc_UEContextReleaseRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value217(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value218(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextReleaseRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components219(V1@V0, V1@Buf1, []).



dec_UEContextReleaseRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextReleaseRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextReleaseRequest',Term1},Bytes4}.

'enc_TAIItem'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
enc_TAI(Enc3@element)
end|begin
Enc4@element = element(3, Val),
if Enc4@element =:= asn1_NOVALUE ->
[];
true ->
'enc_TAIItem_iE-Extensions'(Enc4@element)
end
end].
'enc_TAIItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TAIItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TAIItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TAIItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TAIItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components220(V1@Add4, V1@Buf1, []).



dec_TAIItem(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type TAI
{Term1,Bytes3} = dec_TAI(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_TAIItem_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'TAIItem',Term1,Term2},Bytes6}.

'enc_TAIList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_TAIList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_TAIList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value221(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TAIList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value222(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



dec_TAIList(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components223(V1@Add4, V1@Buf1, []).

'enc_Paging'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_Paging_protocolIEs(Enc2@element)
end].
'enc_Paging_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_Paging_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_Paging_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value224(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Paging_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value225(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_Paging_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components226(V1@V0, V1@Buf1, []).



dec_Paging(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_Paging_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'Paging',Term1},Bytes4}.

'enc_InitialContextSetupFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupFailure_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value227(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value228(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_InitialContextSetupFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components229(V1@V0, V1@Buf1, []).



dec_InitialContextSetupFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupFailure',Term1},Bytes4}.

'enc_E-RABSetupItemCtxtSURes'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 4 ->
Enc7@element
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABSetupItemCtxtSURes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components230(V1@Add4, V1@Buf1, []).



'dec_E-RABSetupItemCtxtSURes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABSetupItemCtxtSURes_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABSetupItemCtxtSURes',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABSetupListCtxtSURes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value231(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value232(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABSetupListCtxtSURes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components233(V1@Add4, V1@Buf1, []).

'enc_InitialContextSetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupResponse_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value234(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value235(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_InitialContextSetupResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components236(V1@V0, V1@Buf1, []).



dec_InitialContextSetupResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupResponse',Term1},Bytes4}.

'enc_E-RABToBeSetupItemCtxtSUReq'(Val) ->
[begin
Enc1@element = element(6, Val),
Enc2@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@element = element(2, Val),
if Enc4@element bsr 4 =:= 0 ->
<<0:1,Enc4@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@element)]
end
end,
begin
Enc6@element = element(3, Val),
'enc_E-RABLevelQoSParameters'(Enc6@element)
end,
begin
Enc7@element = element(4, Val),
Enc8@bits = bit_size(Enc7@element),
Enc8@bits@sub = Enc8@bits - 1,
if 0 =< Enc8@bits@sub, Enc8@bits@sub < 160 ->
[<<0:1,Enc8@bits@sub:8>>,
align|Enc7@element];
Enc8@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc8@bits:14>>|Enc7@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc7@element, 1)]
end
end,
align,
begin
Enc9@element = element(5, Val),
Enc10@len = byte_size(Enc9@element),
if Enc10@len =:= 4 ->
Enc9@element
end
end,
begin
Enc11@element = element(6, Val),
if Enc11@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@len = byte_size(Enc11@element),
if Enc12@len < 128 ->
[Enc12@len|Enc11@element];
Enc12@len < 16384 ->
[<<2:2,Enc12@len:14>>|Enc11@element];
true ->
encode_fragmented(Enc11@element, 8)
end
end
end
end|begin
Enc14@element = element(7, Val),
if Enc14@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Enc14@element)
end
end].
'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components237(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type BIT STRING
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V6@Pad3 = bit_size(Bytes6) band 7,
{V6@V0,V6@Buf1} = case Bytes6 of
<<_:V6@Pad3,0:1,V6@V5:7,V6@V7:V6@V5/binary-unit:8,V6@Buf8/bitstring>> ->
{V6@V7,V6@Buf8};
<<_:V6@Pad3,1:1,0:1,V6@V6:14,V6@V8:V6@V6/binary-unit:8,V6@Buf9/bitstring>> ->
{V6@V8,V6@Buf9};
<<_:V6@Pad3,1:1,1:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V8,V6@Buf9}  = decode_fragmented(V6@V6, V6@Buf7, 8),
{V6@V8,V6@Buf9}
end,
V6@Conv10 = binary:copy(V6@V0),
{V6@Conv10,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABToBeSetupItemCtxtSUReq',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_E-RABToBeSetupListCtxtSUReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value238(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value239(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeSetupListCtxtSUReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components240(V1@Add4, V1@Buf1, []).

'enc_InitialContextSetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_InitialContextSetupRequest_protocolIEs(Enc2@element)
end].
'enc_InitialContextSetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value241(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value242(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_InitialContextSetupRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components243(V1@V0, V1@Buf1, []).



dec_InitialContextSetupRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_InitialContextSetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'InitialContextSetupRequest',Term1},Bytes4}.

'enc_E-RABReleaseIndication'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseIndication_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value244(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value245(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABReleaseIndication_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components246(V1@V0, V1@Buf1, []).



'dec_E-RABReleaseIndication'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseIndication',Term1},Bytes4}.

'enc_E-RABReleaseItemBearerRelComp'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Enc5@element)
end
end].
'enc_E-RABReleaseItemBearerRelComp_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components247(V1@Add4, V1@Buf1, []).



'dec_E-RABReleaseItemBearerRelComp'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_E-RABReleaseItemBearerRelComp_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'E-RABReleaseItemBearerRelComp',Term1,Term2},Bytes6}.

'enc_E-RABReleaseListBearerRelComp'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value248(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value249(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABReleaseListBearerRelComp'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components250(V1@Add4, V1@Buf1, []).

'enc_E-RABReleaseResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value251(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value252(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABReleaseResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components253(V1@V0, V1@Buf1, []).



'dec_E-RABReleaseResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseResponse',Term1},Bytes4}.

'enc_E-RABReleaseCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABReleaseCommand_protocolIEs'(Enc2@element)
end].
'enc_E-RABReleaseCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value254(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value255(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABReleaseCommand_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components256(V1@V0, V1@Buf1, []).



'dec_E-RABReleaseCommand'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABReleaseCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABReleaseCommand',Term1},Bytes4}.

'enc_E-RABModifyItemBearerModRes'(Val) ->
[begin
Enc1@element = element(3, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end|begin
Enc5@element = element(3, Val),
if Enc5@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Enc5@element)
end
end].
'enc_E-RABModifyItemBearerModRes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABModifyItemBearerModRes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components257(V1@Add4, V1@Buf1, []).



'dec_E-RABModifyItemBearerModRes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_E-RABModifyItemBearerModRes_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'E-RABModifyItemBearerModRes',Term1,Term2},Bytes6}.

'enc_E-RABModifyListBearerModRes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyListBearerModRes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value258(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value259(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABModifyListBearerModRes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components260(V1@Add4, V1@Buf1, []).

'enc_E-RABModifyResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABModifyResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABModifyResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value261(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value262(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABModifyResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components263(V1@V0, V1@Buf1, []).



'dec_E-RABModifyResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABModifyResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABModifyResponse',Term1},Bytes4}.

'enc_E-RABToBeModifiedItemBearerModReq'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
'enc_E-RABLevelQoSParameters'(Enc5@element)
end,
align,
begin
Enc6@element = element(4, Val),
Enc7@len = byte_size(Enc6@element),
if Enc7@len < 128 ->
[Enc7@len|Enc6@element];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc6@element];
true ->
encode_fragmented(Enc6@element, 8)
end
end|begin
Enc8@element = element(5, Val),
if Enc8@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Enc8@element)
end
end].
'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components264(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeModifiedItemBearerModReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V4@Pad3 = bit_size(Bytes4) band 7,
{V4@V0,V4@Buf1} = case Bytes4 of
<<_:V4@Pad3,0:1,V4@V5:7,V4@V7:V4@V5/binary-unit:8,V4@Buf8/bitstring>> ->
{V4@V7,V4@Buf8};
<<_:V4@Pad3,1:1,0:1,V4@V6:14,V4@V8:V4@V6/binary-unit:8,V4@Buf9/bitstring>> ->
{V4@V8,V4@Buf9};
<<_:V4@Pad3,1:1,1:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V8,V4@Buf9}  = decode_fragmented(V4@V6, V4@Buf7, 8),
{V4@V8,V4@Buf9}
end,
V4@Conv10 = binary:copy(V4@V0),
{V4@Conv10,V4@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeModifiedItemBearerModReq',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABToBeModifiedListBearerModReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value265(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value266(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeModifiedListBearerModReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components267(V1@Add4, V1@Buf1, []).

'enc_E-RABModifyRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABModifyRequest_protocolIEs'(Enc2@element)
end].
'enc_E-RABModifyRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value268(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value269(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABModifyRequest_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components270(V1@V0, V1@Buf1, []).



'dec_E-RABModifyRequest'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABModifyRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABModifyRequest',Term1},Bytes4}.

'enc_E-RABSetupItemBearerSURes'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 4 ->
Enc7@element
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABSetupItemBearerSURes_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABSetupItemBearerSURes_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components271(V1@Add4, V1@Buf1, []).



'dec_E-RABSetupItemBearerSURes'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABSetupItemBearerSURes_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABSetupItemBearerSURes',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABSetupListBearerSURes'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupListBearerSURes_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value272(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value273(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABSetupListBearerSURes'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components274(V1@Add4, V1@Buf1, []).

'enc_E-RABSetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABSetupResponse_protocolIEs'(Enc2@element)
end].
'enc_E-RABSetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value275(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value276(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABSetupResponse_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components277(V1@V0, V1@Buf1, []).



'dec_E-RABSetupResponse'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABSetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABSetupResponse',Term1},Bytes4}.

'enc_E-RABToBeSetupItemBearerSUReq'(Val) ->
[begin
Enc1@element = element(7, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
'enc_E-RABLevelQoSParameters'(Enc5@element)
end,
begin
Enc6@element = element(4, Val),
Enc7@bits = bit_size(Enc6@element),
Enc7@bits@sub = Enc7@bits - 1,
if 0 =< Enc7@bits@sub, Enc7@bits@sub < 160 ->
[<<0:1,Enc7@bits@sub:8>>,
align|Enc6@element];
Enc7@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc7@bits:14>>|Enc6@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@element, 1)]
end
end,
align,
begin
Enc8@element = element(5, Val),
Enc9@len = byte_size(Enc8@element),
if Enc9@len =:= 4 ->
Enc8@element
end
end,
begin
Enc10@element = element(6, Val),
Enc11@len = byte_size(Enc10@element),
if Enc11@len < 128 ->
[Enc11@len|Enc10@element];
Enc11@len < 16384 ->
[<<2:2,Enc11@len:14>>|Enc10@element];
true ->
encode_fragmented(Enc10@element, 8)
end
end|begin
Enc12@element = element(7, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Enc12@element)
end
end].
'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components278(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeSetupItemBearerSUReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RABLevelQoSParameters
{Term2,Bytes4} = 'dec_E-RABLevelQoSParameters'(Bytes3),

%% attribute number 3 with type BIT STRING
{Term3,Bytes5} = begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = begin
V5@Pad2 = bit_size(Bytes5) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes5,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = begin
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:7,V6@V5:V6@V3/binary-unit:8,V6@Buf6/bitstring>> ->
{V6@V5,V6@Buf6};
<<1:1,0:1,V6@V4:14,V6@V6:V6@V4/binary-unit:8,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,1:1,V6@V4:6,V6@Buf5/bitstring>> ->
{V6@V6,V6@Buf7}  = decode_fragmented(V6@V4, V6@Buf5, 8),
{V6@V6,V6@Buf7}
end,
V6@Conv8 = binary:copy(V6@V0),
{V6@Conv8,V6@Buf1}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V7@V0,V7@Buf1} = case Bytes8 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABToBeSetupItemBearerSUReq',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_E-RABToBeSetupListBearerSUReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value279(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value280(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeSetupListBearerSUReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components281(V1@Add4, V1@Buf1, []).

'enc_E-RABSetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
'enc_E-RABSetupRequest_protocolIEs'(Enc2@element)
end].
'enc_E-RABSetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value282(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value283(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


'dec_E-RABSetupRequest_protocolIEs'(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components284(V1@V0, V1@Buf1, []).



'dec_E-RABSetupRequest'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_E-RABSetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'E-RABSetupRequest',Term1},Bytes4}.

'enc_HandoverCancelAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCancelAcknowledge_protocolIEs(Enc2@element)
end].
'enc_HandoverCancelAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value285(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value286(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverCancelAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components287(V1@V0, V1@Buf1, []).



dec_HandoverCancelAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCancelAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCancelAcknowledge',Term1},Bytes4}.

'enc_HandoverCancel'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCancel_protocolIEs(Enc2@element)
end].
'enc_HandoverCancel_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value288(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value289(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverCancel_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components290(V1@V0, V1@Buf1, []).



dec_HandoverCancel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCancel_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCancel',Term1},Bytes4}.

'enc_PathSwitchRequestFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequestFailure_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequestFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value291(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value292(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_PathSwitchRequestFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components293(V1@V0, V1@Buf1, []).



dec_PathSwitchRequestFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequestFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequestFailure',Term1},Bytes4}.

'enc_E-RABToBeSwitchedULItem'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 4 ->
Enc7@element
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABToBeSwitchedULItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeSwitchedULItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components294(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeSwitchedULItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeSwitchedULItem_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeSwitchedULItem',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABToBeSwitchedULList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedULList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value295(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value296(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeSwitchedULList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components297(V1@Add4, V1@Buf1, []).

'enc_PathSwitchRequestAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequestAcknowledge_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequestAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value298(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value299(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_PathSwitchRequestAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components300(V1@V0, V1@Buf1, []).



dec_PathSwitchRequestAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequestAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequestAcknowledge',Term1},Bytes4}.

'enc_E-RABToBeSwitchedDLItem'(Val) ->
[begin
Enc1@element = element(5, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 4 ->
Enc7@element
end
end|begin
Enc9@element = element(5, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Enc9@element)
end
end].
'enc_E-RABToBeSwitchedDLItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components301(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeSwitchedDLItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABToBeSwitchedDLItem_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABToBeSwitchedDLItem',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABToBeSwitchedDLList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value302(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value303(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeSwitchedDLList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components304(V1@Add4, V1@Buf1, []).

'enc_PathSwitchRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_PathSwitchRequest_protocolIEs(Enc2@element)
end].
'enc_PathSwitchRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value305(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value306(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_PathSwitchRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components307(V1@V0, V1@Buf1, []).



dec_PathSwitchRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PathSwitchRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PathSwitchRequest',Term1},Bytes4}.

'enc_HandoverNotify'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverNotify_protocolIEs(Enc2@element)
end].
'enc_HandoverNotify_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverNotify_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value308(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value309(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverNotify_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components310(V1@V0, V1@Buf1, []).



dec_HandoverNotify(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverNotify_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverNotify',Term1},Bytes4}.

'enc_HandoverFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverFailure_protocolIEs(Enc2@element)
end].
'enc_HandoverFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value311(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value312(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components313(V1@V0, V1@Buf1, []).



dec_HandoverFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverFailure',Term1},Bytes4}.

'enc_E-RABFailedToSetupItemHOReqAck'(Val) ->
[begin
Enc1@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
enc_Cause(Enc5@element)
end|begin
Enc6@element = element(4, Val),
if Enc6@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Enc6@element)
end
end].
'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components314(V1@Add4, V1@Buf1, []).



'dec_E-RABFailedToSetupItemHOReqAck'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type Cause
{Term2,Bytes4} = dec_Cause(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'E-RABFailedToSetupItemHOReqAck',Term1,Term2,Term3},Bytes7}.

'enc_E-RABFailedtoSetupListHOReqAck'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value315(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value316(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABFailedtoSetupListHOReqAck'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components317(V1@Add4, V1@Buf1, []).

'enc_E-RABAdmittedItem'(Val) ->
[begin
Enc1@element = element(5, Val),
Enc2@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(7, Val),
Enc4@element = element(8, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(9, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element bsr 4 =:= 0 ->
<<0:1,Enc7@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc7@element)]
end
end,
begin
Enc9@element = element(3, Val),
Enc10@bits = bit_size(Enc9@element),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1,Enc10@bits@sub:8>>,
align|Enc9@element];
Enc10@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc10@bits:14>>|Enc9@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc9@element, 1)]
end
end,
align,
begin
Enc11@element = element(4, Val),
Enc12@len = byte_size(Enc11@element),
if Enc12@len =:= 4 ->
Enc11@element
end
end,
begin
Enc13@element = element(5, Val),
if Enc13@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bits = bit_size(Enc13@element),
Enc14@bits@sub = Enc14@bits - 1,
if 0 =< Enc14@bits@sub, Enc14@bits@sub < 160 ->
[<<0:1,Enc14@bits@sub:8,0:7>>|Enc13@element];
Enc14@bits < 16384 ->
[<<1:1,2:9,Enc14@bits:14>>|Enc13@element];
true ->
[<<1:1,0:7>>|encode_fragmented(Enc13@element, 1)]
end
end
end
end,
begin
Enc16@element = element(6, Val),
if Enc16@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc17@len = byte_size(Enc16@element),
if Enc17@len =:= 4 ->
[align|Enc16@element]
end
end
end
end,
begin
Enc19@element = element(7, Val),
if Enc19@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc20@bits = bit_size(Enc19@element),
Enc20@bits@sub = Enc20@bits - 1,
if 0 =< Enc20@bits@sub, Enc20@bits@sub < 160 ->
[<<0:1,Enc20@bits@sub:8>>,
align|Enc19@element];
Enc20@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc20@bits:14>>|Enc19@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc19@element, 1)]
end
end
end
end,
begin
Enc22@element = element(8, Val),
if Enc22@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc23@len = byte_size(Enc22@element),
if Enc23@len =:= 4 ->
[align|Enc22@element]
end
end
end
end|begin
Enc25@element = element(9, Val),
if Enc25@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABAdmittedItem_iE-Extensions'(Enc25@element)
end
end].
'enc_E-RABAdmittedItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABAdmittedItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components318(V1@Add4, V1@Buf1, []).



'dec_E-RABAdmittedItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 4) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {list_to_bitstring([V6@V0]),V6@Buf1},
{V6@V13,V6@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:4/binary-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Conv4 = binary:copy(V7@V0),
{V7@Conv4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BIT STRING
{Term6,Bytes8} = case (Opt bsr 2) band 1 of
1 ->
begin
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:8/unsigned-unit:1,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
V8@Pad8 = bit_size(V8@Buf4) band 7,
<<_:V8@Pad8,V8@V6:V8@Add5/binary-unit:1,V8@Buf7/bitstring>> = V8@Buf4,
{V8@V6,V8@Buf7};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@V10:V8@V8/binary-unit:1,V8@Buf11/bitstring>> ->
{V8@V10,V8@Buf11};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@V11:V8@V9/binary-unit:1,V8@Buf12/bitstring>> ->
{V8@V11,V8@Buf12};
<<_:V8@Pad6,1:1,1:1,V8@V9:6,V8@Buf10/bitstring>> ->
{V8@V11,V8@Buf12}  = decode_fragmented(V8@V9, V8@Buf10, 1),
{V8@V11,V8@Buf12}
end,
{V8@V3,V8@Buf4}
end,
{V8@V13,V8@Buf14}  = {list_to_bitstring([V8@V0]),V8@Buf1},
{V8@V13,V8@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type OCTET STRING
{Term7,Bytes9} = case (Opt bsr 1) band 1 of
1 ->
begin
V9@Pad2 = bit_size(Bytes8) band 7,
<<_:V9@Pad2,V9@V0:4/binary-unit:8,V9@Buf1/bitstring>> = Bytes8,
V9@Conv4 = binary:copy(V9@V0),
{V9@Conv4,V9@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SEQUENCE OF
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_E-RABAdmittedItem_iE-Extensions'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V10@V0,V10@Buf1} = case Bytes10 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
V10@Pad6 = bit_size(V10@Buf2) band 7,
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<_:V10@Pad6,0:1,V10@V8:7,V10@Buf9/bitstring>> when V10@V8 =/= 0 ->
{V10@V8,V10@Buf9};
<<_:V10@Pad6,1:1,0:1,V10@V9:14,V10@Buf10/bitstring>> when V10@V9 =/= 0 ->
{V10@V9,V10@Buf10}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V11:V10@V0/bitstring-unit:1,V10@Buf12/bitstring>> = V10@Buf1,
{V10@V11,V10@Buf12}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'E-RABAdmittedItem',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_E-RABAdmittedList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABAdmittedList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABAdmittedList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value319(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABAdmittedList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value320(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABAdmittedList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components321(V1@Add4, V1@Buf1, []).

'enc_HandoverRequestAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequestAcknowledge_protocolIEs(Enc2@element)
end].
'enc_HandoverRequestAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value322(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value323(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverRequestAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components324(V1@V0, V1@Buf1, []).



dec_HandoverRequestAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequestAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequestAcknowledge',Term1},Bytes4}.

'enc_E-RABToBeSetupItemHOReq'(Val) ->
[begin
Enc1@element = element(6, Val),
if Enc1@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@element = element(2, Val),
if Enc3@element bsr 4 =:= 0 ->
<<0:1,Enc3@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@element)]
end
end,
begin
Enc5@element = element(3, Val),
Enc6@bits = bit_size(Enc5@element),
Enc6@bits@sub = Enc6@bits - 1,
if 0 =< Enc6@bits@sub, Enc6@bits@sub < 160 ->
[<<0:1,Enc6@bits@sub:8>>,
align|Enc5@element];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc5@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@element, 1)]
end
end,
align,
begin
Enc7@element = element(4, Val),
Enc8@len = byte_size(Enc7@element),
if Enc8@len =:= 4 ->
Enc7@element
end
end,
begin
Enc9@element = element(5, Val),
'enc_E-RABLevelQoSParameters'(Enc9@element)
end|begin
Enc10@element = element(6, Val),
if Enc10@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Enc10@element)
end
end].
'enc_E-RABToBeSetupItemHOReq_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components325(V1@Add4, V1@Buf1, []).



'dec_E-RABToBeSetupItemHOReq'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end,

%% attribute number 4 with type E-RABLevelQoSParameters
{Term4,Bytes6} = 'dec_E-RABLevelQoSParameters'(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_E-RABToBeSetupItemHOReq_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'E-RABToBeSetupItemHOReq',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_E-RABToBeSetupListHOReq'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value326(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value327(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABToBeSetupListHOReq'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components328(V1@Add4, V1@Buf1, []).

'enc_HandoverRequest'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequest_protocolIEs(Enc2@element)
end].
'enc_HandoverRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value329(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value330(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components331(V1@V0, V1@Buf1, []).



dec_HandoverRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequest',Term1},Bytes4}.

'enc_HandoverPreparationFailure'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverPreparationFailure_protocolIEs(Enc2@element)
end].
'enc_HandoverPreparationFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value332(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value333(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverPreparationFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components334(V1@V0, V1@Buf1, []).



dec_HandoverPreparationFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverPreparationFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverPreparationFailure',Term1},Bytes4}.

'enc_E-RABDataForwardingItem'(Val) ->
[begin
Enc1@element = element(3, Val),
Enc2@element = element(4, Val),
if Enc1@element =:= asn1_NOVALUE ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@element =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@element = element(5, Val),
Enc4@element = element(6, Val),
if Enc3@element =:= asn1_NOVALUE ->
if Enc4@element =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@element =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@element = element(7, Val),
if Enc5@element =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@element = element(2, Val),
if Enc7@element bsr 4 =:= 0 ->
<<0:1,Enc7@element:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc7@element)]
end
end,
begin
Enc9@element = element(3, Val),
if Enc9@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@bits = bit_size(Enc9@element),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1,Enc10@bits@sub:8>>,
align|Enc9@element];
Enc10@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc10@bits:14>>|Enc9@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc9@element, 1)]
end
end
end
end,
begin
Enc12@element = element(4, Val),
if Enc12@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc13@len = byte_size(Enc12@element),
if Enc13@len =:= 4 ->
[align|Enc12@element]
end
end
end
end,
begin
Enc15@element = element(5, Val),
if Enc15@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@bits = bit_size(Enc15@element),
Enc16@bits@sub = Enc16@bits - 1,
if 0 =< Enc16@bits@sub, Enc16@bits@sub < 160 ->
[<<0:1,Enc16@bits@sub:8>>,
align|Enc15@element];
Enc16@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc16@bits:14>>|Enc15@element];
true ->
[<<1:1>>,
align|encode_fragmented(Enc15@element, 1)]
end
end
end
end,
begin
Enc18@element = element(6, Val),
if Enc18@element =:= asn1_NOVALUE ->
[];
true ->
begin
Enc19@len = byte_size(Enc18@element),
if Enc19@len =:= 4 ->
[align|Enc18@element]
end
end
end
end|begin
Enc21@element = element(7, Val),
if Enc21@element =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABDataForwardingItem_iE-Extensions'(Enc21@element)
end
end].
'enc_E-RABDataForwardingItem_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Extension7(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension8(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABDataForwardingItem_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components335(V1@Add4, V1@Buf1, []).



'dec_E-RABDataForwardingItem'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:8/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
V4@Pad8 = bit_size(V4@Buf4) band 7,
<<_:V4@Pad8,V4@V6:V4@Add5/binary-unit:1,V4@Buf7/bitstring>> = V4@Buf4,
{V4@V6,V4@Buf7};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {list_to_bitstring([V4@V0]),V4@Buf1},
{V4@V13,V4@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
begin
V5@Pad2 = bit_size(Bytes4) band 7,
<<_:V5@Pad2,V5@V0:4/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv4 = binary:copy(V5@V0),
{V5@Conv4,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {list_to_bitstring([V6@V0]),V6@Buf1},
{V6@V13,V6@Buf14}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
V7@Pad2 = bit_size(Bytes6) band 7,
<<_:V7@Pad2,V7@V0:4/binary-unit:8,V7@Buf1/bitstring>> = Bytes6,
V7@Conv4 = binary:copy(V7@V0),
{V7@Conv4,V7@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_E-RABDataForwardingItem_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'E-RABDataForwardingItem',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_E-RABSubjecttoDataForwardingList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value336(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value337(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABSubjecttoDataForwardingList'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components338(V1@Add4, V1@Buf1, []).

'enc_HandoverCommand'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverCommand_protocolIEs(Enc2@element)
end].
'enc_HandoverCommand_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCommand_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value339(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value340(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverCommand_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components341(V1@V0, V1@Buf1, []).



dec_HandoverCommand(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCommand_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCommand',Term1},Bytes4}.

'enc_HandoverRequired'(Val) ->
[<<0:1>>|begin
Enc2@element = element(2, Val),
enc_HandoverRequired_protocolIEs(Enc2@element)
end].
'enc_HandoverRequired_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequired_protocolIEs_ProtocolIE-Field'(Val) ->
Enc1@element = element(2, Val),
[align,
begin
Enc2@element = Enc1@element,
if Enc2@element bsr 16 =:= 0 ->
<<Enc2@element:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@element}}})
end
end,
begin
Enc4@element = element(3, Val),
if Enc4@element =:= reject ->
<<0:2,0:6>>;
Enc4@element =:= ignore ->
<<1:2,0:6>>;
Enc4@element =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@element}}})
end
end|begin
Enc6@element = element(4, Val),
Enc7@output = enc_os_Value342(Enc6@element, Enc1@element),
Enc7@bin = complete(Enc7@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value343(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverRequired_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components344(V1@V0, V1@Buf1, []).



dec_HandoverRequired(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequired_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequired',Term1},Bytes4}.

'id-Target-ToSource-TransparentContainer-Secondary'() ->
139.

'id-Source-ToTarget-TransparentContainer-Secondary'() ->
138.

'id-DefaultPagingDRX'() ->
137.

'id-NASSecurityParameterstoE-UTRAN'() ->
136.

'id-NASSecurityParametersfromE-UTRAN'() ->
135.

'id-RRC-Establishment-Cause'() ->
134.

'id-MSClassmark3'() ->
133.

'id-MSClassmark2'() ->
132.

'id-TraceCollectionEntityIPAddress'() ->
131.

'id-SONConfigurationTransferMCT'() ->
130.

'id-SONConfigurationTransferECT'() ->
129.

'id-CSG-IdList'() ->
128.

'id-CSG-Id'() ->
127.

'id-NAS-DownlinkCount'() ->
126.

'id-SRVCCHOIndication'() ->
125.

'id-SRVCCOperationPossible'() ->
124.

'id-Target-ToSource-TransparentContainer'() ->
123.

'id-Inter-SystemInformationTransferTypeMDT'() ->
122.

'id-Inter-SystemInformationTransferTypeEDT'() ->
121.

'id-BroadcastCompletedAreaList'() ->
120.

'id-WarningMessageContents'() ->
119.

'id-DataCodingScheme'() ->
118.

'id-WarningSecurityInfo'() ->
117.

'id-WarningType'() ->
116.

'id-NumberofBroadcastRequest'() ->
115.

'id-RepetitionPeriod'() ->
114.

'id-WarningAreaList'() ->
113.

'id-SerialNumber'() ->
112.

'id-MessageIdentifier'() ->
111.

'id-E-RABReleasedList'() ->
110.

'id-CNDomain'() ->
109.

'id-CSFallbackIndicator'() ->
108.

'id-UESecurityCapabilities'() ->
107.

'id-SubscriberProfileIDforRFP'() ->
106.

'id-ServedGUMMEIs'() ->
105.

'id-Source-ToTarget-TransparentContainer'() ->
104.

'id-E-RABFailedToBeReleasedList'() ->
103.

'id-cdma2000OneXSRVCCInfo'() ->
102.

'id-OverloadResponse'() ->
101.

'id-EUTRAN-CGI'() ->
100.

'id-UE-S1AP-IDs'() ->
99.

'id-RequestType'() ->
98.

'id-cdma2000OneXRAND'() ->
97.

'id-S-TMSI'() ->
96.

'id-E-RABToBeSwitchedULList'() ->
95.

'id-E-RABToBeSwitchedULItem'() ->
94.

'id-UE-associatedLogicalS1-ConnectionListResAck'() ->
93.

'id-ResetType'() ->
92.

'id-UE-associatedLogicalS1-ConnectionItem'() ->
91.

'id-eNB-StatusTransfer-TransparentContainer'() ->
90.

'id-Bearers-SubjectToStatusTransfer-Item'() ->
89.

'id-SourceMME-UE-S1AP-ID'() ->
88.

'id-RelativeMMECapacity'() ->
87.

'id-E-UTRAN-Trace-ID'() ->
86.

'id-cdma2000HORequiredIndication'() ->
84.

'id-cdma2000HOStatus'() ->
83.

'id-UEIdentityIndexValue'() ->
80.

'id-Direct-Forwarding-Path-Availability'() ->
79.

'id-E-RABInformationListItem'() ->
78.

'id-GUMMEI-ID'() ->
75.

'id-UERadioCapability'() ->
74.

'id-SecurityKey'() ->
73.

'id-cdma2000SectorID'() ->
72.

'id-cdma2000RATType'() ->
71.

'id-cdma2000PDU'() ->
70.

'id-E-RABReleaseListBearerRelComp'() ->
69.

'id-TAI'() ->
67.

'id-uEaggregateMaximumBitrate'() ->
66.

'id-TimeToWait'() ->
65.

'id-SupportedTAs'() ->
64.

'id-ServedPLMNs'() ->
63.

'id-MMEname'() ->
61.

'id-eNBname'() ->
60.

'id-Global-ENB-ID'() ->
59.

'id-CriticalityDiagnostics'() ->
58.

'id-UTRANtoLTEHOInformationRes'() ->
57.

'id-GERANtoLTEHOInformationRes'() ->
55.

'id-E-RABToBeSetupListHOReq'() ->
53.

'id-E-RABToBeSetupItemCtxtSUReq'() ->
52.

'id-E-RABSetupListCtxtSURes'() ->
51.

'id-E-RABSetupItemCtxtSURes'() ->
50.

'id-E-RABReleaseItemHOCmd'() ->
49.

'id-E-RABFailedToSetupListCtxtSURes'() ->
48.

'id-TAIItem'() ->
47.

'id-TAIList'() ->
46.

'id-pagingDRX'() ->
44.

'id-UEPagingID'() ->
43.

'id-HandoverRestrictionList'() ->
41.

'id-SecurityContext'() ->
40.

'id-E-RABSetupItemBearerSURes'() ->
39.

'id-E-RABReleaseItem'() ->
38.

'id-E-RABModifyItemBearerModRes'() ->
37.

'id-E-RABToBeModifiedItemBearerModReq'() ->
36.

'id-E-RABItem'() ->
35.

'id-E-RABFailedToReleaseList'() ->
34.

'id-E-RABToBeReleasedList'() ->
33.

'id-E-RABFailedToModifyList'() ->
32.

'id-E-RABModifyListBearerModRes'() ->
31.

'id-E-RABToBeModifiedListBearerModReq'() ->
30.

'id-E-RABFailedToSetupListBearerSURes'() ->
29.

'id-E-RABSetupListBearerSURes'() ->
28.

'id-E-RABToBeSetupItemHOReq'() ->
27.

'id-NAS-PDU'() ->
26.

'id-TraceActivation'() ->
25.

'id-E-RABToBeSetupListCtxtSUReq'() ->
24.

'id-E-RABToBeSwitchedDLItem'() ->
23.

'id-E-RABToBeSwitchedDLList'() ->
22.

'id-E-RABFailedtoSetupItemHOReqAck'() ->
21.

'id-E-RABAdmittedItem'() ->
20.

'id-E-RABFailedToSetupListHOReqAck'() ->
19.

'id-E-RABAdmittedList'() ->
18.

'id-E-RABToBeSetupItemBearerSUReq'() ->
17.

'id-E-RABToBeSetupListBearerSUReq'() ->
16.

'id-E-RABReleaseItemBearerRelComp'() ->
15.

'id-E-RABDataForwardingItem'() ->
14.

'id-E-RABtoReleaseListHOCmd'() ->
13.

'id-E-RABSubjecttoDataForwardingList'() ->
12.

'id-eNB-UE-S1AP-ID'() ->
8.

'id-TargetID'() ->
4.

'id-SourceID'() ->
3.

'id-Cause'() ->
2.

'id-HandoverType'() ->
1.

'id-MME-UE-S1AP-ID'() ->
0.

'maxnoofMMECs'() ->
256.

'maxnoofGroupIDs'() ->
65535.

'maxnoofRATs'() ->
8.

'maxnoofeNBX2TLAs'() ->
2.

'maxnoofCellinEAI'() ->
65535.

'maxnoofCellinTAI'() ->
65535.

'maxnoofEmergencyAreaID'() ->
65535.

'maxnoofCellID'() ->
65535.

'maxnoofTAIforWarning'() ->
65535.

'maxnoofCells'() ->
16.

'maxNrOfIndividualS1ConnectionsToReset'() ->
256.

'maxnoofForbTACs'() ->
4096.

'maxnoofForbLACs'() ->
4096.

'maxnoofEPLMNsPlusOne'() ->
16.

'maxnoofEPLMNs'() ->
15.

'maxnoofPLMNsPerMME'() ->
32.

'maxnoofBPLMNs'() ->
6.

'maxNrOfErrors'() ->
256.

'maxnoofTACs'() ->
256.

'maxnoofTAIs'() ->
256.

'maxNrOfE-RABs'() ->
256.

'maxNrOfCSGs'() ->
256.

'maxProtocolIEs'() ->
65535.

'maxProtocolExtensions'() ->
65535.

'maxPrivateIEs'() ->
65535.

'id-CellTrafficTrace'() ->
42.

'id-MMEConfigurationTransfer'() ->
41.

'id-eNBConfigurationTransfer'() ->
40.

'id-PrivateMessage'() ->
39.

'id-MMEDirectInformationTransfer'() ->
38.

'id-eNBDirectInformationTransfer'() ->
37.

'id-WriteReplaceWarning'() ->
36.

'id-OverloadStop'() ->
35.

'id-OverloadStart'() ->
34.

'id-LocationReport'() ->
33.

'id-LocationReportingFailureIndication'() ->
32.

'id-LocationReportingControl'() ->
31.

'id-MMEConfigurationUpdate'() ->
30.

'id-ENBConfigurationUpdate'() ->
29.

'id-TraceFailureIndication'() ->
28.

'id-TraceStart'() ->
27.

'id-DeactivateTrace'() ->
26.

'id-MMEStatusTransfer'() ->
25.

'id-eNBStatusTransfer'() ->
24.

'id-UEContextRelease'() ->
23.

'id-UECapabilityInfoIndication'() ->
22.

'id-UEContextModification'() ->
21.

'id-UplinkS1cdma2000tunneling'() ->
20.

'id-DownlinkS1cdma2000tunneling'() ->
19.

'id-UEContextReleaseRequest'() ->
18.

'id-S1Setup'() ->
17.

'id-NASNonDeliveryIndication'() ->
16.

'id-ErrorIndication'() ->
15.

'id-Reset'() ->
14.

'id-uplinkNASTransport'() ->
13.

'id-initialUEMessage'() ->
12.

'id-downlinkNASTransport'() ->
11.

'id-Paging'() ->
10.

'id-InitialContextSetup'() ->
9.

'id-E-RABReleaseIndication'() ->
8.

'id-E-RABRelease'() ->
7.

'id-E-RABModify'() ->
6.

'id-E-RABSetup'() ->
5.

'id-HandoverCancel'() ->
4.

'id-PathSwitchRequest'() ->
3.

'id-HandoverNotification'() ->
2.

'id-HandoverResourceAllocation'() ->
1.

'id-HandoverPreparation'() ->
0.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    _ = complete(Arg),
    ok.

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components101(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components101(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components101(Num-1, Remain, [Term|Acc]).

dec_components104(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components104(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_WriteReplaceWarningResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components104(Num-1, Remain, [Term|Acc]).

dec_components107(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components107(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_WriteReplaceWarningRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components107(Num-1, Remain, [Term|Acc]).

dec_components108(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components108(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_OverloadStop_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components108(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LastVisitedCell-Item'(Bytes),
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components111(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components111(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_OverloadStart_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components111(Num-1, Remain, [Term|Acc]).

dec_components114(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components114(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components114(Num-1, Remain, [Term|Acc]).

dec_components117(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components117(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReportingFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components117(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-associatedLogicalS1-ConnectionItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components120(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components120(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReportingControl_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components120(Num-1, Remain, [Term|Acc]).

dec_components123(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components123(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellTrafficTrace_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components123(Num-1, Remain, [Term|Acc]).

dec_components126(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components126(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DeactivateTrace_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components126(Num-1, Remain, [Term|Acc]).

dec_components129(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components129(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceFailureIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components129(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-S1AP-ID-pair_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components132(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components132(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceStart_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components132(Num-1, Remain, [Term|Acc]).

dec_components135(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components135(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components135(Num-1, Remain, [Term|Acc]).

dec_components138(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components138(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components138(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEAggregateMaximumBitrate_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components141(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components141(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UECapabilityInfoIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components141(Num-1, Remain, [Term|Acc]).

dec_components144(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components144(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components144(Num-1, Remain, [Term|Acc]).

dec_components147(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components147(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkS1cdma2000tunneling_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components147(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components150(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components150(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components150(Num-1, Remain, [Term|Acc]).

dec_components153(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components153(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components153(Num-1, Remain, [Term|Acc]).

dec_components156(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components156(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components156(Num-1, Remain, [Term|Acc]).

dec_components159(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components159(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components159(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TargeteNB-ToSourceeNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components162(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components162(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components162(Num-1, Remain, [Term|Acc]).

dec_components165(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components165(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components165(Num-1, Remain, [Term|Acc]).

dec_components168(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components168(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components168(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TargetRNC-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components171(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components171(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components171(Num-1, Remain, [Term|Acc]).

dec_components174(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components174(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components174(Num-1, Remain, [Term|Acc]).

dec_components177(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components177(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components177(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TargeteNB-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components180(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components180(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-associatedLogicalS1-ConnectionListResAck_ProtocolIE-Field'(Bytes),
dec_components180(Num-1, Remain, [Term|Acc]).

dec_components183(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components183(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResetAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components183(Num-1, Remain, [Term|Acc]).

dec_components186(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components186(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-associatedLogicalS1-ConnectionListRes_ProtocolIE-Field'(Bytes),
dec_components186(Num-1, Remain, [Term|Acc]).

dec_components189(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components189(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Reset_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components189(Num-1, Remain, [Term|Acc]).

dec_components19(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components19(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CompletedCellinTAI-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components19(Num-1, Remain, [Term|Acc]).

dec_components192(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components192(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_NASNonDeliveryIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components192(Num-1, Remain, [Term|Acc]).

dec_components195(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components195(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UplinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components195(Num-1, Remain, [Term|Acc]).

dec_components198(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components198(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialUEMessage_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components198(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CompletedCellinTAI-Item'(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components201(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components201(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DownlinkNASTransport_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components201(Num-1, Remain, [Term|Acc]).

dec_components204(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components204(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components204(Num-1, Remain, [Term|Acc]).

dec_components207(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components207(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components207(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAI-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components210(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components210(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextModificationRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components210(Num-1, Remain, [Term|Acc]).

dec_components213(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components213(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseComplete_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components213(Num-1, Remain, [Term|Acc]).

dec_components216(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components216(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components216(Num-1, Remain, [Term|Acc]).

dec_components219(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components219(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextReleaseRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components219(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAI-Broadcast-Item'(Bytes),
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components220(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components220(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAIItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components220(Num-1, Remain, [Term|Acc]).

dec_components223(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components223(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAIList_ProtocolIE-Field'(Bytes),
dec_components223(Num-1, Remain, [Term|Acc]).

dec_components226(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components226(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Paging_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components226(Num-1, Remain, [Term|Acc]).

dec_components229(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components229(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components229(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TAI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components230(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components230(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupItemCtxtSURes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components230(Num-1, Remain, [Term|Acc]).

dec_components233(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components233(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupListCtxtSURes_ProtocolIE-Field'(Bytes),
dec_components233(Num-1, Remain, [Term|Acc]).

dec_components236(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components236(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components236(Num-1, Remain, [Term|Acc]).

dec_components237(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components237(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemCtxtSUReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components237(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = dec_TAI(Bytes),
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components240(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components240(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListCtxtSUReq_ProtocolIE-Field'(Bytes),
dec_components240(Num-1, Remain, [Term|Acc]).

dec_components243(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components243(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InitialContextSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components243(Num-1, Remain, [Term|Acc]).

dec_components246(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components246(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components246(Num-1, Remain, [Term|Acc]).

dec_components247(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components247(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseItemBearerRelComp_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components247(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S-TMSI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components250(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components250(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseListBearerRelComp_ProtocolIE-Field'(Bytes),
dec_components250(Num-1, Remain, [Term|Acc]).

dec_components253(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components253(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components253(Num-1, Remain, [Term|Acc]).

dec_components256(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components256(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABReleaseCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components256(Num-1, Remain, [Term|Acc]).

dec_components257(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components257(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyItemBearerModRes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components257(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SupportedTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components260(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components260(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyListBearerModRes_ProtocolIE-Field'(Bytes),
dec_components260(Num-1, Remain, [Term|Acc]).

dec_components263(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components263(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components263(Num-1, Remain, [Term|Acc]).

dec_components264(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components264(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeModifiedItemBearerModReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components264(Num-1, Remain, [Term|Acc]).

dec_components267(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components267(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeModifiedListBearerModReq_ProtocolIE-Field'(Bytes),
dec_components267(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SupportedTAs-Item'(Bytes),
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components270(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components270(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABModifyRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components270(Num-1, Remain, [Term|Acc]).

dec_components271(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components271(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupItemBearerSURes_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components271(Num-1, Remain, [Term|Acc]).

dec_components274(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components274(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupListBearerSURes_ProtocolIE-Field'(Bytes),
dec_components274(Num-1, Remain, [Term|Acc]).

dec_components277(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components277(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components277(Num-1, Remain, [Term|Acc]).

dec_components278(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components278(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemBearerSUReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components278(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:3/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary:copy(V1@V0),
{V1@Conv4,V1@Buf1}
end,
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components281(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components281(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListBearerSUReq_ProtocolIE-Field'(Bytes),
dec_components281(Num-1, Remain, [Term|Acc]).

dec_components284(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components284(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components284(Num-1, Remain, [Term|Acc]).

dec_components287(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components287(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCancelAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components287(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V2@V0:1/binary-unit:8,V2@Buf1/bitstring>> = Bytes,
V2@Conv2 = binary:copy(V2@V0),
{V2@Conv2,V2@Buf1}
end,
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components290(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components290(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components290(Num-1, Remain, [Term|Acc]).

dec_components293(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components293(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequestFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components293(Num-1, Remain, [Term|Acc]).

dec_components294(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components294(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedULItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components294(Num-1, Remain, [Term|Acc]).

dec_components297(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components297(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedULList_ProtocolIE-Field'(Bytes),
dec_components297(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V3@V0:2/binary-unit:8,V3@Buf1/bitstring>> = Bytes,
V3@Conv2 = binary:copy(V3@V0),
{V3@Conv2,V3@Buf1}
end,
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components300(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components300(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components300(Num-1, Remain, [Term|Acc]).

dec_components301(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components301(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedDLItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components301(Num-1, Remain, [Term|Acc]).

dec_components304(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components304(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSwitchedDLList_ProtocolIE-Field'(Bytes),
dec_components304(Num-1, Remain, [Term|Acc]).

dec_components307(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components307(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PathSwitchRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components307(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedGUMMEIsItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components310(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components310(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverNotify_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components310(Num-1, Remain, [Term|Acc]).

dec_components313(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components313(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components313(Num-1, Remain, [Term|Acc]).

dec_components314(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components314(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABFailedToSetupItemHOReqAck_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components314(Num-1, Remain, [Term|Acc]).

dec_components317(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components317(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABFailedtoSetupListHOReqAck_ProtocolIE-Field'(Bytes),
dec_components317(Num-1, Remain, [Term|Acc]).

dec_components318(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components318(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABAdmittedItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components318(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = dec_ServedGUMMEIsItem(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components321(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components321(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABAdmittedList_ProtocolIE-Field'(Bytes),
dec_components321(Num-1, Remain, [Term|Acc]).

dec_components324(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components324(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components324(Num-1, Remain, [Term|Acc]).

dec_components325(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components325(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupItemHOReq_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components325(Num-1, Remain, [Term|Acc]).

dec_components328(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components328(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABToBeSetupListHOReq_ProtocolIE-Field'(Bytes),
dec_components328(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SourceeNB-ToTargeteNB-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components331(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components331(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components331(Num-1, Remain, [Term|Acc]).

dec_components334(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components334(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components334(Num-1, Remain, [Term|Acc]).

dec_components335(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components335(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABDataForwardingItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components335(Num-1, Remain, [Term|Acc]).

dec_components338(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components338(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABSubjecttoDataForwardingList_ProtocolIE-Field'(Bytes),
dec_components338(Num-1, Remain, [Term|Acc]).

dec_components34(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components34(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SourceeNB-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components34(Num-1, Remain, [Term|Acc]).

dec_components341(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components341(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCommand_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components341(Num-1, Remain, [Term|Acc]).

dec_components344(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components344(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequired_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components344(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SONConfigurationTransfer_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SONInformationReply_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SecurityContext_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components38(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components38(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RIMTransfer_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components38(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RequestType_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components41(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components41(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LAI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components41(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components44(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components44(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components44(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes,
V4@Conv2 = binary:copy(V4@V0),
{V4@Conv2,V4@Buf1}
end,
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components47(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components47(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenLAs-Item'(Bytes),
dec_components47(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V5@V0:2/binary-unit:8,V5@Buf1/bitstring>> = Bytes,
V5@Conv2 = binary:copy(V5@V0),
{V5@Conv2,V5@Buf1}
end,
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components49(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components49(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components49(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenTAs-Item'(Bytes),
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_EUTRAN-CGI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components52(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components52(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABLevelQoSParameters_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components52(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components56(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components56(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABList_ProtocolIE-Field'(Bytes),
dec_components56(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABInformationListItem_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABInformationList_ProtocolIE-Field'(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components61(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components61(Num, Bytes, Acc) ->
{Term,Remain} = begin
V6@Pad2 = bit_size(Bytes) band 7,
<<_:V6@Pad2,V6@V0:3/binary-unit:8,V6@Buf1/bitstring>> = Bytes,
V6@Conv4 = binary:copy(V6@V0),
{V6@Conv4,V6@Buf1}
end,
dec_components61(Num-1, Remain, [Term|Acc]).

dec_components62(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components62(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V7@V0,V7@Buf1} = case Bytes of
<<0:1,V7@V3:8/unsigned-unit:1,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
V7@Pad8 = bit_size(V7@Buf4) band 7,
<<_:V7@Pad8,V7@V6:V7@Add5/binary-unit:1,V7@Buf7/bitstring>> = V7@Buf4,
{V7@V6,V7@Buf7};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@V10:V7@V8/binary-unit:1,V7@Buf11/bitstring>> ->
{V7@V10,V7@Buf11};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@V11:V7@V9/binary-unit:1,V7@Buf12/bitstring>> ->
{V7@V11,V7@Buf12};
<<_:V7@Pad6,1:1,1:1,V7@V9:6,V7@Buf10/bitstring>> ->
{V7@V11,V7@Buf12}  = decode_fragmented(V7@V9, V7@Buf10, 1),
{V7@V11,V7@Buf12}
end,
{V7@V3,V7@Buf4}
end,
{V7@V13,V7@Buf14}  = {list_to_bitstring([V7@V0]),V7@Buf1},
{V7@V13,V7@Buf14}
end,
dec_components62(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENB-StatusTransfer-TransparentContainer_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components64(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components64(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Global-ENB-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components64(Num-1, Remain, [Term|Acc]).

dec_components65(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components65(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GERAN-Cell-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components65(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CompletedCellinEAI-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components67(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components67(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CompletedCellinEAI-Item'(Bytes),
dec_components67(Num-1, Remain, [Term|Acc]).

dec_components68(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components68(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_EmergencyAreaID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components68(Num-1, Remain, [Term|Acc]).

dec_components69(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components69(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_EmergencyAreaID-Broadcast-Item'(Bytes),
dec_components69(Num-1, Remain, [Term|Acc]).

dec_components70(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components70(Num, Bytes, Acc) ->
{Term,Remain} = begin
V8@Pad2 = bit_size(Bytes) band 7,
<<_:V8@Pad2,V8@V0:3/binary-unit:8,V8@Buf1/bitstring>> = Bytes,
V8@Conv4 = binary:copy(V8@V0),
{V8@Conv4,V8@Buf1}
end,
dec_components70(Num-1, Remain, [Term|Acc]).

dec_components71(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components71(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_EUTRAN-CGI'(Bytes),
dec_components71(Num-1, Remain, [Term|Acc]).

dec_components72(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components72(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics-IE-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components72(Num-1, Remain, [Term|Acc]).

dec_components73(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components73(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics-IE-Item'(Bytes),
dec_components73(Num-1, Remain, [Term|Acc]).

dec_components74(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components74(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components74(Num-1, Remain, [Term|Acc]).

dec_components75(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components75(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components75(Num-1, Remain, [Term|Acc]).

dec_components76(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components76(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CSG-IdList-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components76(Num-1, Remain, [Term|Acc]).

dec_components77(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components77(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CSG-IdList-Item'(Bytes),
dec_components77(Num-1, Remain, [Term|Acc]).

dec_components78(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components78(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CGI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components78(Num-1, Remain, [Term|Acc]).

dec_components79(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components79(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellType_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components79(Num-1, Remain, [Term|Acc]).

dec_components80(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components80(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Cdma2000OneXSRVCCInfo_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components80(Num-1, Remain, [Term|Acc]).

dec_components81(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components81(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellID-Broadcast-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components81(Num-1, Remain, [Term|Acc]).

dec_components82(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components82(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellID-Broadcast-Item'(Bytes),
dec_components82(Num-1, Remain, [Term|Acc]).

dec_components83(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components83(Num, Bytes, Acc) ->
{Term,Remain} = begin
V9@Pad2 = bit_size(Bytes) band 7,
<<_:V9@Pad2,V9@V0:3/binary-unit:8,V9@Buf1/bitstring>> = Bytes,
V9@Conv4 = binary:copy(V9@V0),
{V9@Conv4,V9@Buf1}
end,
dec_components83(Num-1, Remain, [Term|Acc]).

dec_components84(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components84(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Bearers-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components84(Num-1, Remain, [Term|Acc]).

dec_components87(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components87(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Bearers-SubjectToStatusTransferList_ProtocolIE-Field'(Bytes),
dec_components87(Num-1, Remain, [Term|Acc]).

dec_components88(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components88(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components88(Num-1, Remain, [Term|Acc]).

dec_components89(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components89(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes),
dec_components89(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_X2TNLConfigurationInfo_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

dec_components92(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components92(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components92(Num-1, Remain, [Term|Acc]).

dec_components95(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components95(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components95(Num-1, Remain, [Term|Acc]).

dec_components98(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components98(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MMEDirectInformationTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components98(Num-1, Remain, [Term|Acc]).

dec_os_Extension8(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_InitiatingMessage6(Bytes, 0) ->
{Term,_} = dec_HandoverRequired(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 1) ->
{Term,_} = dec_HandoverRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 2) ->
{Term,_} = dec_HandoverNotify(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 3) ->
{Term,_} = dec_PathSwitchRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 4) ->
{Term,_} = dec_HandoverCancel(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 5) ->
{Term,_} = 'dec_E-RABSetupRequest'(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 6) ->
{Term,_} = 'dec_E-RABModifyRequest'(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 7) ->
{Term,_} = 'dec_E-RABReleaseCommand'(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 8) ->
{Term,_} = 'dec_E-RABReleaseIndication'(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 9) ->
{Term,_} = dec_InitialContextSetupRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 10) ->
{Term,_} = dec_Paging(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 11) ->
{Term,_} = dec_DownlinkNASTransport(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 12) ->
{Term,_} = dec_InitialUEMessage(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 13) ->
{Term,_} = dec_UplinkNASTransport(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 14) ->
{Term,_} = dec_Reset(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 15) ->
{Term,_} = dec_ErrorIndication(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 16) ->
{Term,_} = dec_NASNonDeliveryIndication(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 17) ->
{Term,_} = dec_S1SetupRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 18) ->
{Term,_} = dec_UEContextReleaseRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 19) ->
{Term,_} = dec_DownlinkS1cdma2000tunneling(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 20) ->
{Term,_} = dec_UplinkS1cdma2000tunneling(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 21) ->
{Term,_} = dec_UEContextModificationRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 22) ->
{Term,_} = dec_UECapabilityInfoIndication(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 23) ->
{Term,_} = dec_UEContextReleaseCommand(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 24) ->
{Term,_} = dec_ENBStatusTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 25) ->
{Term,_} = dec_MMEStatusTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 26) ->
{Term,_} = dec_DeactivateTrace(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 27) ->
{Term,_} = dec_TraceStart(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 28) ->
{Term,_} = dec_TraceFailureIndication(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 29) ->
{Term,_} = dec_ENBConfigurationUpdate(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 30) ->
{Term,_} = dec_MMEConfigurationUpdate(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 31) ->
{Term,_} = dec_LocationReportingControl(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 32) ->
{Term,_} = dec_LocationReportingFailureIndication(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 33) ->
{Term,_} = dec_LocationReport(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 34) ->
{Term,_} = dec_OverloadStart(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 35) ->
{Term,_} = dec_OverloadStop(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 36) ->
{Term,_} = dec_WriteReplaceWarningRequest(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 37) ->
{Term,_} = dec_ENBDirectInformationTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 38) ->
{Term,_} = dec_MMEDirectInformationTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 39) ->
{Term,_} = dec_PrivateMessage(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 40) ->
{Term,_} = dec_ENBConfigurationTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 41) ->
{Term,_} = dec_MMEConfigurationTransfer(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, 42) ->
{Term,_} = dec_CellTrafficTrace(Bytes),
Term;
dec_os_InitiatingMessage6(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_SuccessfulOutcome4(Bytes, 0) ->
{Term,_} = dec_HandoverCommand(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 1) ->
{Term,_} = dec_HandoverRequestAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 3) ->
{Term,_} = dec_PathSwitchRequestAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 4) ->
{Term,_} = dec_HandoverCancelAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 5) ->
{Term,_} = 'dec_E-RABSetupResponse'(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 6) ->
{Term,_} = 'dec_E-RABModifyResponse'(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 7) ->
{Term,_} = 'dec_E-RABReleaseResponse'(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 9) ->
{Term,_} = dec_InitialContextSetupResponse(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 14) ->
{Term,_} = dec_ResetAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 17) ->
{Term,_} = dec_S1SetupResponse(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 21) ->
{Term,_} = dec_UEContextModificationResponse(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 23) ->
{Term,_} = dec_UEContextReleaseComplete(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 29) ->
{Term,_} = dec_ENBConfigurationUpdateAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 30) ->
{Term,_} = dec_MMEConfigurationUpdateAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, 36) ->
{Term,_} = dec_WriteReplaceWarningResponse(Bytes),
Term;
dec_os_SuccessfulOutcome4(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_UnsuccessfulOutcome2(Bytes, 0) ->
{Term,_} = dec_HandoverPreparationFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 1) ->
{Term,_} = dec_HandoverFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 3) ->
{Term,_} = dec_PathSwitchRequestFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 9) ->
{Term,_} = dec_InitialContextSetupFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 17) ->
{Term,_} = dec_S1SetupFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 21) ->
{Term,_} = dec_UEContextModificationFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 29) ->
{Term,_} = dec_ENBConfigurationUpdateFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, 30) ->
{Term,_} = dec_MMEConfigurationUpdateFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome2(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value100(Bytes, 121) ->
{Term,_} = 'dec_Inter-SystemInformationTransferType'(Bytes),
Term;
dec_os_Value100(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value103(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value103(Bytes, 111) ->
{Term,_} = dec_MessageIdentifier(Bytes),
Term;
dec_os_Value103(Bytes, 112) ->
{Term,_} = dec_SerialNumber(Bytes),
Term;
dec_os_Value103(Bytes, 120) ->
{Term,_} = dec_BroadcastCompletedAreaList(Bytes),
Term;
dec_os_Value103(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value106(Bytes, 111) ->
{Term,_} = dec_MessageIdentifier(Bytes),
Term;
dec_os_Value106(Bytes, 112) ->
{Term,_} = dec_SerialNumber(Bytes),
Term;
dec_os_Value106(Bytes, 113) ->
{Term,_} = dec_WarningAreaList(Bytes),
Term;
dec_os_Value106(Bytes, 114) ->
{Term,_} = dec_RepetitionPeriod(Bytes),
Term;
dec_os_Value106(Bytes, 115) ->
{Term,_} = dec_NumberofBroadcastRequest(Bytes),
Term;
dec_os_Value106(Bytes, 116) ->
{Term,_} = dec_WarningType(Bytes),
Term;
dec_os_Value106(Bytes, 117) ->
{Term,_} = dec_WarningSecurityInfo(Bytes),
Term;
dec_os_Value106(Bytes, 118) ->
{Term,_} = dec_DataCodingScheme(Bytes),
Term;
dec_os_Value106(Bytes, 119) ->
{Term,_} = dec_WarningMessageContents(Bytes),
Term;
dec_os_Value106(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value110(Bytes, 101) ->
{Term,_} = dec_OverloadResponse(Bytes),
Term;
dec_os_Value110(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value113(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value113(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value113(Bytes, 67) ->
{Term,_} = dec_TAI(Bytes),
Term;
dec_os_Value113(Bytes, 98) ->
{Term,_} = dec_RequestType(Bytes),
Term;
dec_os_Value113(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value113(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value116(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value116(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value116(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value116(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value119(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value119(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value119(Bytes, 98) ->
{Term,_} = dec_RequestType(Bytes),
Term;
dec_os_Value119(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value122(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value122(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value122(Bytes, 86) ->
{Term,_} = 'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value122(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value122(Bytes, 131) ->
{Term,_} = dec_TransportLayerAddress(Bytes),
Term;
dec_os_Value122(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value125(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value125(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value125(Bytes, 86) ->
{Term,_} = 'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value125(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value128(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value128(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value128(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value128(Bytes, 86) ->
{Term,_} = 'dec_E-UTRAN-Trace-ID'(Bytes),
Term;
dec_os_Value128(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value131(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value131(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value131(Bytes, 25) ->
{Term,_} = dec_TraceActivation(Bytes),
Term;
dec_os_Value131(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value134(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value134(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value134(Bytes, 90) ->
{Term,_} = 'dec_ENB-StatusTransfer-TransparentContainer'(Bytes),
Term;
dec_os_Value134(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value137(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value137(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value137(Bytes, 90) ->
{Term,_} = 'dec_ENB-StatusTransfer-TransparentContainer'(Bytes),
Term;
dec_os_Value137(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value140(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value140(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value140(Bytes, 74) ->
{Term,_} = dec_UERadioCapability(Bytes),
Term;
dec_os_Value140(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value143(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value143(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value143(Bytes, 70) ->
{Term,_} = dec_Cdma2000PDU(Bytes),
Term;
dec_os_Value143(Bytes, 71) ->
{Term,_} = dec_Cdma2000RATType(Bytes),
Term;
dec_os_Value143(Bytes, 72) ->
{Term,_} = dec_Cdma2000SectorID(Bytes),
Term;
dec_os_Value143(Bytes, 84) ->
{Term,_} = dec_Cdma2000HORequiredIndication(Bytes),
Term;
dec_os_Value143(Bytes, 97) ->
{Term,_} = dec_Cdma2000OneXRAND(Bytes),
Term;
dec_os_Value143(Bytes, 102) ->
{Term,_} = dec_Cdma2000OneXSRVCCInfo(Bytes),
Term;
dec_os_Value143(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value146(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value146(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value146(Bytes, 12) ->
{Term,_} = 'dec_E-RABSubjecttoDataForwardingList'(Bytes),
Term;
dec_os_Value146(Bytes, 70) ->
{Term,_} = dec_Cdma2000PDU(Bytes),
Term;
dec_os_Value146(Bytes, 71) ->
{Term,_} = dec_Cdma2000RATType(Bytes),
Term;
dec_os_Value146(Bytes, 83) ->
{Term,_} = dec_Cdma2000HOStatus(Bytes),
Term;
dec_os_Value146(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value149(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value149(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value149(Bytes, 65) ->
{Term,_} = dec_TimeToWait(Bytes),
Term;
dec_os_Value149(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value152(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value152(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value155(Bytes, 61) ->
{Term,_} = dec_MMEname(Bytes),
Term;
dec_os_Value155(Bytes, 87) ->
{Term,_} = dec_RelativeMMECapacity(Bytes),
Term;
dec_os_Value155(Bytes, 105) ->
{Term,_} = dec_ServedGUMMEIs(Bytes),
Term;
dec_os_Value155(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value158(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value158(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value158(Bytes, 65) ->
{Term,_} = dec_TimeToWait(Bytes),
Term;
dec_os_Value158(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value161(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value161(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value164(Bytes, 60) ->
{Term,_} = dec_ENBname(Bytes),
Term;
dec_os_Value164(Bytes, 64) ->
{Term,_} = dec_SupportedTAs(Bytes),
Term;
dec_os_Value164(Bytes, 128) ->
{Term,_} = 'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value164(Bytes, 137) ->
{Term,_} = dec_PagingDRX(Bytes),
Term;
dec_os_Value164(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value167(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value167(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value167(Bytes, 65) ->
{Term,_} = dec_TimeToWait(Bytes),
Term;
dec_os_Value167(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value170(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value170(Bytes, 61) ->
{Term,_} = dec_MMEname(Bytes),
Term;
dec_os_Value170(Bytes, 87) ->
{Term,_} = dec_RelativeMMECapacity(Bytes),
Term;
dec_os_Value170(Bytes, 105) ->
{Term,_} = dec_ServedGUMMEIs(Bytes),
Term;
dec_os_Value170(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value173(Bytes, 59) ->
{Term,_} = 'dec_Global-ENB-ID'(Bytes),
Term;
dec_os_Value173(Bytes, 60) ->
{Term,_} = dec_ENBname(Bytes),
Term;
dec_os_Value173(Bytes, 64) ->
{Term,_} = dec_SupportedTAs(Bytes),
Term;
dec_os_Value173(Bytes, 128) ->
{Term,_} = 'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value173(Bytes, 137) ->
{Term,_} = dec_PagingDRX(Bytes),
Term;
dec_os_Value173(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value176(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value176(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value176(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value176(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value176(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value179(Bytes, 91) ->
{Term,_} = 'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes),
Term;
dec_os_Value179(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value182(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value182(Bytes, 93) ->
{Term,_} = 'dec_UE-associatedLogicalS1-ConnectionListResAck'(Bytes),
Term;
dec_os_Value182(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value185(Bytes, 91) ->
{Term,_} = 'dec_UE-associatedLogicalS1-ConnectionItem'(Bytes),
Term;
dec_os_Value185(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value188(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value188(Bytes, 92) ->
{Term,_} = dec_ResetType(Bytes),
Term;
dec_os_Value188(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value191(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value191(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value191(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value191(Bytes, 26) ->
{Term,_} = 'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value191(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value194(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value194(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value194(Bytes, 26) ->
{Term,_} = 'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value194(Bytes, 67) ->
{Term,_} = dec_TAI(Bytes),
Term;
dec_os_Value194(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value194(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value197(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value197(Bytes, 26) ->
{Term,_} = 'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value197(Bytes, 67) ->
{Term,_} = dec_TAI(Bytes),
Term;
dec_os_Value197(Bytes, 75) ->
{Term,_} = dec_GUMMEI(Bytes),
Term;
dec_os_Value197(Bytes, 96) ->
{Term,_} = 'dec_S-TMSI'(Bytes),
Term;
dec_os_Value197(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value197(Bytes, 127) ->
{Term,_} = 'dec_CSG-Id'(Bytes),
Term;
dec_os_Value197(Bytes, 134) ->
{Term,_} = 'dec_RRC-Establishment-Cause'(Bytes),
Term;
dec_os_Value197(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value200(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value200(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value200(Bytes, 26) ->
{Term,_} = 'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value200(Bytes, 41) ->
{Term,_} = dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value200(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value203(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value203(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value203(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value203(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value203(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value206(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value206(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value206(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value206(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value209(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value209(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value209(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value209(Bytes, 73) ->
{Term,_} = dec_SecurityKey(Bytes),
Term;
dec_os_Value209(Bytes, 106) ->
{Term,_} = dec_SubscriberProfileIDforRFP(Bytes),
Term;
dec_os_Value209(Bytes, 108) ->
{Term,_} = dec_CSFallbackIndicator(Bytes),
Term;
dec_os_Value209(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value212(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value212(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value212(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value212(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value215(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value215(Bytes, 99) ->
{Term,_} = 'dec_UE-S1AP-IDs'(Bytes),
Term;
dec_os_Value215(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value218(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value218(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value218(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value218(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value222(Bytes, 47) ->
{Term,_} = dec_TAIItem(Bytes),
Term;
dec_os_Value222(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value225(Bytes, 43) ->
{Term,_} = dec_UEPagingID(Bytes),
Term;
dec_os_Value225(Bytes, 44) ->
{Term,_} = dec_PagingDRX(Bytes),
Term;
dec_os_Value225(Bytes, 46) ->
{Term,_} = dec_TAIList(Bytes),
Term;
dec_os_Value225(Bytes, 80) ->
{Term,_} = dec_UEIdentityIndexValue(Bytes),
Term;
dec_os_Value225(Bytes, 109) ->
{Term,_} = dec_CNDomain(Bytes),
Term;
dec_os_Value225(Bytes, 128) ->
{Term,_} = 'dec_CSG-IdList'(Bytes),
Term;
dec_os_Value225(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value228(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value228(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value228(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value228(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value228(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value232(Bytes, 50) ->
{Term,_} = 'dec_E-RABSetupItemCtxtSURes'(Bytes),
Term;
dec_os_Value232(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value235(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value235(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value235(Bytes, 48) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value235(Bytes, 51) ->
{Term,_} = 'dec_E-RABSetupListCtxtSURes'(Bytes),
Term;
dec_os_Value235(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value235(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value239(Bytes, 52) ->
{Term,_} = 'dec_E-RABToBeSetupItemCtxtSUReq'(Bytes),
Term;
dec_os_Value239(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value242(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value242(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value242(Bytes, 24) ->
{Term,_} = 'dec_E-RABToBeSetupListCtxtSUReq'(Bytes),
Term;
dec_os_Value242(Bytes, 25) ->
{Term,_} = dec_TraceActivation(Bytes),
Term;
dec_os_Value242(Bytes, 41) ->
{Term,_} = dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value242(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value242(Bytes, 73) ->
{Term,_} = dec_SecurityKey(Bytes),
Term;
dec_os_Value242(Bytes, 74) ->
{Term,_} = dec_UERadioCapability(Bytes),
Term;
dec_os_Value242(Bytes, 106) ->
{Term,_} = dec_SubscriberProfileIDforRFP(Bytes),
Term;
dec_os_Value242(Bytes, 107) ->
{Term,_} = dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value242(Bytes, 108) ->
{Term,_} = dec_CSFallbackIndicator(Bytes),
Term;
dec_os_Value242(Bytes, 124) ->
{Term,_} = dec_SRVCCOperationPossible(Bytes),
Term;
dec_os_Value242(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value245(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value245(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value245(Bytes, 110) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value245(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value249(Bytes, 15) ->
{Term,_} = 'dec_E-RABReleaseItemBearerRelComp'(Bytes),
Term;
dec_os_Value249(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value252(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value252(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value252(Bytes, 34) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value252(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value252(Bytes, 69) ->
{Term,_} = 'dec_E-RABReleaseListBearerRelComp'(Bytes),
Term;
dec_os_Value252(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value255(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value255(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value255(Bytes, 26) ->
{Term,_} = 'dec_NAS-PDU'(Bytes),
Term;
dec_os_Value255(Bytes, 33) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value255(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value255(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value259(Bytes, 37) ->
{Term,_} = 'dec_E-RABModifyItemBearerModRes'(Bytes),
Term;
dec_os_Value259(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value262(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value262(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value262(Bytes, 31) ->
{Term,_} = 'dec_E-RABModifyListBearerModRes'(Bytes),
Term;
dec_os_Value262(Bytes, 32) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value262(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value262(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value266(Bytes, 36) ->
{Term,_} = 'dec_E-RABToBeModifiedItemBearerModReq'(Bytes),
Term;
dec_os_Value266(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value269(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value269(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value269(Bytes, 30) ->
{Term,_} = 'dec_E-RABToBeModifiedListBearerModReq'(Bytes),
Term;
dec_os_Value269(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value269(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value273(Bytes, 39) ->
{Term,_} = 'dec_E-RABSetupItemBearerSURes'(Bytes),
Term;
dec_os_Value273(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value276(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value276(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value276(Bytes, 28) ->
{Term,_} = 'dec_E-RABSetupListBearerSURes'(Bytes),
Term;
dec_os_Value276(Bytes, 29) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value276(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value276(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value280(Bytes, 17) ->
{Term,_} = 'dec_E-RABToBeSetupItemBearerSUReq'(Bytes),
Term;
dec_os_Value280(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value283(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value283(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value283(Bytes, 16) ->
{Term,_} = 'dec_E-RABToBeSetupListBearerSUReq'(Bytes),
Term;
dec_os_Value283(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value283(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value286(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value286(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value286(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value286(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value289(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value289(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value289(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value289(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value292(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value292(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value292(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value292(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value292(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value296(Bytes, 94) ->
{Term,_} = 'dec_E-RABToBeSwitchedULItem'(Bytes),
Term;
dec_os_Value296(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value299(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value299(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value299(Bytes, 33) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value299(Bytes, 40) ->
{Term,_} = dec_SecurityContext(Bytes),
Term;
dec_os_Value299(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value299(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value299(Bytes, 95) ->
{Term,_} = 'dec_E-RABToBeSwitchedULList'(Bytes),
Term;
dec_os_Value299(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value303(Bytes, 23) ->
{Term,_} = 'dec_E-RABToBeSwitchedDLItem'(Bytes),
Term;
dec_os_Value303(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value306(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value306(Bytes, 22) ->
{Term,_} = 'dec_E-RABToBeSwitchedDLList'(Bytes),
Term;
dec_os_Value306(Bytes, 67) ->
{Term,_} = dec_TAI(Bytes),
Term;
dec_os_Value306(Bytes, 88) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value306(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value306(Bytes, 107) ->
{Term,_} = dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value306(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value309(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value309(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value309(Bytes, 67) ->
{Term,_} = dec_TAI(Bytes),
Term;
dec_os_Value309(Bytes, 100) ->
{Term,_} = 'dec_EUTRAN-CGI'(Bytes),
Term;
dec_os_Value309(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value312(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value312(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value312(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value312(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value316(Bytes, 21) ->
{Term,_} = 'dec_E-RABFailedToSetupItemHOReqAck'(Bytes),
Term;
dec_os_Value316(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value320(Bytes, 20) ->
{Term,_} = 'dec_E-RABAdmittedItem'(Bytes),
Term;
dec_os_Value320(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value323(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value323(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value323(Bytes, 18) ->
{Term,_} = 'dec_E-RABAdmittedList'(Bytes),
Term;
dec_os_Value323(Bytes, 19) ->
{Term,_} = 'dec_E-RABFailedtoSetupListHOReqAck'(Bytes),
Term;
dec_os_Value323(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value323(Bytes, 123) ->
{Term,_} = 'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value323(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value327(Bytes, 27) ->
{Term,_} = 'dec_E-RABToBeSetupItemHOReq'(Bytes),
Term;
dec_os_Value327(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value330(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value330(Bytes, 1) ->
{Term,_} = dec_HandoverType(Bytes),
Term;
dec_os_Value330(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value330(Bytes, 25) ->
{Term,_} = dec_TraceActivation(Bytes),
Term;
dec_os_Value330(Bytes, 40) ->
{Term,_} = dec_SecurityContext(Bytes),
Term;
dec_os_Value330(Bytes, 41) ->
{Term,_} = dec_HandoverRestrictionList(Bytes),
Term;
dec_os_Value330(Bytes, 53) ->
{Term,_} = 'dec_E-RABToBeSetupListHOReq'(Bytes),
Term;
dec_os_Value330(Bytes, 66) ->
{Term,_} = dec_UEAggregateMaximumBitrate(Bytes),
Term;
dec_os_Value330(Bytes, 98) ->
{Term,_} = dec_RequestType(Bytes),
Term;
dec_os_Value330(Bytes, 104) ->
{Term,_} = 'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value330(Bytes, 107) ->
{Term,_} = dec_UESecurityCapabilities(Bytes),
Term;
dec_os_Value330(Bytes, 124) ->
{Term,_} = dec_SRVCCOperationPossible(Bytes),
Term;
dec_os_Value330(Bytes, 136) ->
{Term,_} = 'dec_NASSecurityParameterstoE-UTRAN'(Bytes),
Term;
dec_os_Value330(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value333(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value333(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value333(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value333(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value333(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value337(Bytes, 14) ->
{Term,_} = 'dec_E-RABDataForwardingItem'(Bytes),
Term;
dec_os_Value337(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value340(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value340(Bytes, 1) ->
{Term,_} = dec_HandoverType(Bytes),
Term;
dec_os_Value340(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value340(Bytes, 12) ->
{Term,_} = 'dec_E-RABSubjecttoDataForwardingList'(Bytes),
Term;
dec_os_Value340(Bytes, 13) ->
{Term,_} = 'dec_E-RABList'(Bytes),
Term;
dec_os_Value340(Bytes, 58) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value340(Bytes, 123) ->
{Term,_} = 'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value340(Bytes, 135) ->
{Term,_} = 'dec_NASSecurityParametersfromE-UTRAN'(Bytes),
Term;
dec_os_Value340(Bytes, 139) ->
{Term,_} = 'dec_Target-ToSource-TransparentContainer'(Bytes),
Term;
dec_os_Value340(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value343(Bytes, 0) ->
{Term,_} = 'dec_MME-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value343(Bytes, 1) ->
{Term,_} = dec_HandoverType(Bytes),
Term;
dec_os_Value343(Bytes, 2) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value343(Bytes, 4) ->
{Term,_} = dec_TargetID(Bytes),
Term;
dec_os_Value343(Bytes, 8) ->
{Term,_} = 'dec_ENB-UE-S1AP-ID'(Bytes),
Term;
dec_os_Value343(Bytes, 79) ->
{Term,_} = 'dec_Direct-Forwarding-Path-Availability'(Bytes),
Term;
dec_os_Value343(Bytes, 104) ->
{Term,_} = 'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value343(Bytes, 125) ->
{Term,_} = dec_SRVCCHOIndication(Bytes),
Term;
dec_os_Value343(Bytes, 132) ->
{Term,_} = dec_MSClassmark2(Bytes),
Term;
dec_os_Value343(Bytes, 133) ->
{Term,_} = dec_MSClassmark3(Bytes),
Term;
dec_os_Value343(Bytes, 138) ->
{Term,_} = 'dec_Source-ToTarget-TransparentContainer'(Bytes),
Term;
dec_os_Value343(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value55(Bytes, 35) ->
{Term,_} = 'dec_E-RABItem'(Bytes),
Term;
dec_os_Value55(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value59(Bytes, 78) ->
{Term,_} = 'dec_E-RABInformationListItem'(Bytes),
Term;
dec_os_Value59(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value86(Bytes, 89) ->
{Term,_} = 'dec_Bearers-SubjectToStatusTransfer-Item'(Bytes),
Term;
dec_os_Value86(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value91(Bytes, 130) ->
{Term,_} = dec_SONConfigurationTransfer(Bytes),
Term;
dec_os_Value91(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value94(Bytes, 129) ->
{Term,_} = dec_SONConfigurationTransfer(Bytes),
Term;
dec_os_Value94(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


dec_os_Value97(Bytes, 122) ->
{Term,_} = 'dec_Inter-SystemInformationTransferType'(Bytes),
Term;
dec_os_Value97(Bytes, Id) ->
{asn1_OPENTYPE,Bytes}.


enc_os_Extension7(Val, Id) ->
open_type_to_binary(Val).

enc_os_InitiatingMessage5(Val, Id) ->
if Id =:= 0 ->
enc_HandoverRequired(Val);
Id =:= 1 ->
enc_HandoverRequest(Val);
Id =:= 2 ->
enc_HandoverNotify(Val);
Id =:= 3 ->
enc_PathSwitchRequest(Val);
Id =:= 4 ->
enc_HandoverCancel(Val);
Id =:= 5 ->
'enc_E-RABSetupRequest'(Val);
Id =:= 6 ->
'enc_E-RABModifyRequest'(Val);
Id =:= 7 ->
'enc_E-RABReleaseCommand'(Val);
Id =:= 8 ->
'enc_E-RABReleaseIndication'(Val);
Id =:= 9 ->
enc_InitialContextSetupRequest(Val);
Id =:= 10 ->
enc_Paging(Val);
Id =:= 11 ->
enc_DownlinkNASTransport(Val);
Id =:= 12 ->
enc_InitialUEMessage(Val);
Id =:= 13 ->
enc_UplinkNASTransport(Val);
Id =:= 14 ->
enc_Reset(Val);
Id =:= 15 ->
enc_ErrorIndication(Val);
Id =:= 16 ->
enc_NASNonDeliveryIndication(Val);
Id =:= 17 ->
enc_S1SetupRequest(Val);
Id =:= 18 ->
enc_UEContextReleaseRequest(Val);
Id =:= 19 ->
enc_DownlinkS1cdma2000tunneling(Val);
Id =:= 20 ->
enc_UplinkS1cdma2000tunneling(Val);
Id =:= 21 ->
enc_UEContextModificationRequest(Val);
Id =:= 22 ->
enc_UECapabilityInfoIndication(Val);
Id =:= 23 ->
enc_UEContextReleaseCommand(Val);
Id =:= 24 ->
enc_ENBStatusTransfer(Val);
Id =:= 25 ->
enc_MMEStatusTransfer(Val);
Id =:= 26 ->
enc_DeactivateTrace(Val);
Id =:= 27 ->
enc_TraceStart(Val);
Id =:= 28 ->
enc_TraceFailureIndication(Val);
Id =:= 29 ->
enc_ENBConfigurationUpdate(Val);
Id =:= 30 ->
enc_MMEConfigurationUpdate(Val);
Id =:= 31 ->
enc_LocationReportingControl(Val);
Id =:= 32 ->
enc_LocationReportingFailureIndication(Val);
Id =:= 33 ->
enc_LocationReport(Val);
Id =:= 34 ->
enc_OverloadStart(Val);
Id =:= 35 ->
enc_OverloadStop(Val);
Id =:= 36 ->
enc_WriteReplaceWarningRequest(Val);
Id =:= 37 ->
enc_ENBDirectInformationTransfer(Val);
Id =:= 38 ->
enc_MMEDirectInformationTransfer(Val);
Id =:= 39 ->
enc_PrivateMessage(Val);
Id =:= 40 ->
enc_ENBConfigurationTransfer(Val);
Id =:= 41 ->
enc_MMEConfigurationTransfer(Val);
Id =:= 42 ->
enc_CellTrafficTrace(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_SuccessfulOutcome3(Val, Id) ->
if Id =:= 0 ->
enc_HandoverCommand(Val);
Id =:= 1 ->
enc_HandoverRequestAcknowledge(Val);
Id =:= 3 ->
enc_PathSwitchRequestAcknowledge(Val);
Id =:= 4 ->
enc_HandoverCancelAcknowledge(Val);
Id =:= 5 ->
'enc_E-RABSetupResponse'(Val);
Id =:= 6 ->
'enc_E-RABModifyResponse'(Val);
Id =:= 7 ->
'enc_E-RABReleaseResponse'(Val);
Id =:= 9 ->
enc_InitialContextSetupResponse(Val);
Id =:= 14 ->
enc_ResetAcknowledge(Val);
Id =:= 17 ->
enc_S1SetupResponse(Val);
Id =:= 21 ->
enc_UEContextModificationResponse(Val);
Id =:= 23 ->
enc_UEContextReleaseComplete(Val);
Id =:= 29 ->
enc_ENBConfigurationUpdateAcknowledge(Val);
Id =:= 30 ->
enc_MMEConfigurationUpdateAcknowledge(Val);
Id =:= 36 ->
enc_WriteReplaceWarningResponse(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_UnsuccessfulOutcome1(Val, Id) ->
if Id =:= 0 ->
enc_HandoverPreparationFailure(Val);
Id =:= 1 ->
enc_HandoverFailure(Val);
Id =:= 3 ->
enc_PathSwitchRequestFailure(Val);
Id =:= 9 ->
enc_InitialContextSetupFailure(Val);
Id =:= 17 ->
enc_S1SetupFailure(Val);
Id =:= 21 ->
enc_UEContextModificationFailure(Val);
Id =:= 29 ->
enc_ENBConfigurationUpdateFailure(Val);
Id =:= 30 ->
enc_MMEConfigurationUpdateFailure(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value102(Val, Id) ->
if Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 111 ->
enc_MessageIdentifier(Val);
Id =:= 112 ->
enc_SerialNumber(Val);
Id =:= 120 ->
enc_BroadcastCompletedAreaList(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value105(Val, Id) ->
if Id =:= 111 ->
enc_MessageIdentifier(Val);
Id =:= 112 ->
enc_SerialNumber(Val);
Id =:= 113 ->
enc_WarningAreaList(Val);
Id =:= 114 ->
enc_RepetitionPeriod(Val);
Id =:= 115 ->
enc_NumberofBroadcastRequest(Val);
Id =:= 116 ->
enc_WarningType(Val);
Id =:= 117 ->
enc_WarningSecurityInfo(Val);
Id =:= 118 ->
enc_DataCodingScheme(Val);
Id =:= 119 ->
enc_WarningMessageContents(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value109(Val, Id) ->
if Id =:= 101 ->
enc_OverloadResponse(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value112(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 67 ->
enc_TAI(Val);
Id =:= 98 ->
enc_RequestType(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value115(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value118(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 98 ->
enc_RequestType(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value121(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'enc_E-UTRAN-Trace-ID'(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
Id =:= 131 ->
enc_TransportLayerAddress(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value124(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'enc_E-UTRAN-Trace-ID'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value127(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 86 ->
'enc_E-UTRAN-Trace-ID'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value130(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 25 ->
enc_TraceActivation(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value133(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 90 ->
'enc_ENB-StatusTransfer-TransparentContainer'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value136(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 90 ->
'enc_ENB-StatusTransfer-TransparentContainer'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value139(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 74 ->
enc_UERadioCapability(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value142(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 70 ->
enc_Cdma2000PDU(Val);
Id =:= 71 ->
enc_Cdma2000RATType(Val);
Id =:= 72 ->
enc_Cdma2000SectorID(Val);
Id =:= 84 ->
enc_Cdma2000HORequiredIndication(Val);
Id =:= 97 ->
enc_Cdma2000OneXRAND(Val);
Id =:= 102 ->
enc_Cdma2000OneXSRVCCInfo(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value145(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 12 ->
'enc_E-RABSubjecttoDataForwardingList'(Val);
Id =:= 70 ->
enc_Cdma2000PDU(Val);
Id =:= 71 ->
enc_Cdma2000RATType(Val);
Id =:= 83 ->
enc_Cdma2000HOStatus(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value148(Val, Id) ->
if Id =:= 2 ->
enc_Cause(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
enc_TimeToWait(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value151(Val, Id) ->
if Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value154(Val, Id) ->
if Id =:= 61 ->
enc_MMEname(Val);
Id =:= 87 ->
enc_RelativeMMECapacity(Val);
Id =:= 105 ->
enc_ServedGUMMEIs(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value157(Val, Id) ->
if Id =:= 2 ->
enc_Cause(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
enc_TimeToWait(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value160(Val, Id) ->
if Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value163(Val, Id) ->
if Id =:= 60 ->
enc_ENBname(Val);
Id =:= 64 ->
enc_SupportedTAs(Val);
Id =:= 128 ->
'enc_CSG-IdList'(Val);
Id =:= 137 ->
enc_PagingDRX(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value166(Val, Id) ->
if Id =:= 2 ->
enc_Cause(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 65 ->
enc_TimeToWait(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value169(Val, Id) ->
if Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 61 ->
enc_MMEname(Val);
Id =:= 87 ->
enc_RelativeMMECapacity(Val);
Id =:= 105 ->
enc_ServedGUMMEIs(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value172(Val, Id) ->
if Id =:= 59 ->
'enc_Global-ENB-ID'(Val);
Id =:= 60 ->
enc_ENBname(Val);
Id =:= 64 ->
enc_SupportedTAs(Val);
Id =:= 128 ->
'enc_CSG-IdList'(Val);
Id =:= 137 ->
enc_PagingDRX(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value175(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value178(Val, Id) ->
if Id =:= 91 ->
'enc_UE-associatedLogicalS1-ConnectionItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value181(Val, Id) ->
if Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 93 ->
'enc_UE-associatedLogicalS1-ConnectionListResAck'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value184(Val, Id) ->
if Id =:= 91 ->
'enc_UE-associatedLogicalS1-ConnectionItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value187(Val, Id) ->
if Id =:= 2 ->
enc_Cause(Val);
Id =:= 92 ->
enc_ResetType(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value190(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'enc_NAS-PDU'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value193(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'enc_NAS-PDU'(Val);
Id =:= 67 ->
enc_TAI(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value196(Val, Id) ->
if Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'enc_NAS-PDU'(Val);
Id =:= 67 ->
enc_TAI(Val);
Id =:= 75 ->
enc_GUMMEI(Val);
Id =:= 96 ->
'enc_S-TMSI'(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
Id =:= 127 ->
'enc_CSG-Id'(Val);
Id =:= 134 ->
'enc_RRC-Establishment-Cause'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value199(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'enc_NAS-PDU'(Val);
Id =:= 41 ->
enc_HandoverRestrictionList(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value202(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value205(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value208(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
Id =:= 73 ->
enc_SecurityKey(Val);
Id =:= 106 ->
enc_SubscriberProfileIDforRFP(Val);
Id =:= 108 ->
enc_CSFallbackIndicator(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value211(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value214(Val, Id) ->
if Id =:= 2 ->
enc_Cause(Val);
Id =:= 99 ->
'enc_UE-S1AP-IDs'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value217(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value221(Val, Id) ->
if Id =:= 47 ->
enc_TAIItem(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value224(Val, Id) ->
if Id =:= 43 ->
enc_UEPagingID(Val);
Id =:= 44 ->
enc_PagingDRX(Val);
Id =:= 46 ->
enc_TAIList(Val);
Id =:= 80 ->
enc_UEIdentityIndexValue(Val);
Id =:= 109 ->
enc_CNDomain(Val);
Id =:= 128 ->
'enc_CSG-IdList'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value227(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value231(Val, Id) ->
if Id =:= 50 ->
'enc_E-RABSetupItemCtxtSURes'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value234(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 48 ->
'enc_E-RABList'(Val);
Id =:= 51 ->
'enc_E-RABSetupListCtxtSURes'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value238(Val, Id) ->
if Id =:= 52 ->
'enc_E-RABToBeSetupItemCtxtSUReq'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value241(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 24 ->
'enc_E-RABToBeSetupListCtxtSUReq'(Val);
Id =:= 25 ->
enc_TraceActivation(Val);
Id =:= 41 ->
enc_HandoverRestrictionList(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
Id =:= 73 ->
enc_SecurityKey(Val);
Id =:= 74 ->
enc_UERadioCapability(Val);
Id =:= 106 ->
enc_SubscriberProfileIDforRFP(Val);
Id =:= 107 ->
enc_UESecurityCapabilities(Val);
Id =:= 108 ->
enc_CSFallbackIndicator(Val);
Id =:= 124 ->
enc_SRVCCOperationPossible(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value244(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 110 ->
'enc_E-RABList'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value248(Val, Id) ->
if Id =:= 15 ->
'enc_E-RABReleaseItemBearerRelComp'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value251(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 34 ->
'enc_E-RABList'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 69 ->
'enc_E-RABReleaseListBearerRelComp'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value254(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 26 ->
'enc_NAS-PDU'(Val);
Id =:= 33 ->
'enc_E-RABList'(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value258(Val, Id) ->
if Id =:= 37 ->
'enc_E-RABModifyItemBearerModRes'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value261(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 31 ->
'enc_E-RABModifyListBearerModRes'(Val);
Id =:= 32 ->
'enc_E-RABList'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value265(Val, Id) ->
if Id =:= 36 ->
'enc_E-RABToBeModifiedItemBearerModReq'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value268(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 30 ->
'enc_E-RABToBeModifiedListBearerModReq'(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value272(Val, Id) ->
if Id =:= 39 ->
'enc_E-RABSetupItemBearerSURes'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value275(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 28 ->
'enc_E-RABSetupListBearerSURes'(Val);
Id =:= 29 ->
'enc_E-RABList'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value279(Val, Id) ->
if Id =:= 17 ->
'enc_E-RABToBeSetupItemBearerSUReq'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value282(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 16 ->
'enc_E-RABToBeSetupListBearerSUReq'(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value285(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value288(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value291(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value295(Val, Id) ->
if Id =:= 94 ->
'enc_E-RABToBeSwitchedULItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value298(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 33 ->
'enc_E-RABList'(Val);
Id =:= 40 ->
enc_SecurityContext(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
Id =:= 95 ->
'enc_E-RABToBeSwitchedULList'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value302(Val, Id) ->
if Id =:= 23 ->
'enc_E-RABToBeSwitchedDLItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value305(Val, Id) ->
if Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 22 ->
'enc_E-RABToBeSwitchedDLList'(Val);
Id =:= 67 ->
enc_TAI(Val);
Id =:= 88 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
Id =:= 107 ->
enc_UESecurityCapabilities(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value308(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 67 ->
enc_TAI(Val);
Id =:= 100 ->
'enc_EUTRAN-CGI'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value311(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value315(Val, Id) ->
if Id =:= 21 ->
'enc_E-RABFailedToSetupItemHOReqAck'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value319(Val, Id) ->
if Id =:= 20 ->
'enc_E-RABAdmittedItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value322(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 18 ->
'enc_E-RABAdmittedList'(Val);
Id =:= 19 ->
'enc_E-RABFailedtoSetupListHOReqAck'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 123 ->
'enc_Target-ToSource-TransparentContainer'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value326(Val, Id) ->
if Id =:= 27 ->
'enc_E-RABToBeSetupItemHOReq'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value329(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
enc_HandoverType(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 25 ->
enc_TraceActivation(Val);
Id =:= 40 ->
enc_SecurityContext(Val);
Id =:= 41 ->
enc_HandoverRestrictionList(Val);
Id =:= 53 ->
'enc_E-RABToBeSetupListHOReq'(Val);
Id =:= 66 ->
enc_UEAggregateMaximumBitrate(Val);
Id =:= 98 ->
enc_RequestType(Val);
Id =:= 104 ->
'enc_Source-ToTarget-TransparentContainer'(Val);
Id =:= 107 ->
enc_UESecurityCapabilities(Val);
Id =:= 124 ->
enc_SRVCCOperationPossible(Val);
Id =:= 136 ->
'enc_NASSecurityParameterstoE-UTRAN'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value332(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value336(Val, Id) ->
if Id =:= 14 ->
'enc_E-RABDataForwardingItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value339(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
enc_HandoverType(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 12 ->
'enc_E-RABSubjecttoDataForwardingList'(Val);
Id =:= 13 ->
'enc_E-RABList'(Val);
Id =:= 58 ->
enc_CriticalityDiagnostics(Val);
Id =:= 123 ->
'enc_Target-ToSource-TransparentContainer'(Val);
Id =:= 135 ->
'enc_NASSecurityParametersfromE-UTRAN'(Val);
Id =:= 139 ->
'enc_Target-ToSource-TransparentContainer'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value342(Val, Id) ->
if Id =:= 0 ->
'enc_MME-UE-S1AP-ID'(Val);
Id =:= 1 ->
enc_HandoverType(Val);
Id =:= 2 ->
enc_Cause(Val);
Id =:= 4 ->
enc_TargetID(Val);
Id =:= 8 ->
'enc_ENB-UE-S1AP-ID'(Val);
Id =:= 79 ->
'enc_Direct-Forwarding-Path-Availability'(Val);
Id =:= 104 ->
'enc_Source-ToTarget-TransparentContainer'(Val);
Id =:= 125 ->
enc_SRVCCHOIndication(Val);
Id =:= 132 ->
enc_MSClassmark2(Val);
Id =:= 133 ->
enc_MSClassmark3(Val);
Id =:= 138 ->
'enc_Source-ToTarget-TransparentContainer'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value54(Val, Id) ->
if Id =:= 35 ->
'enc_E-RABItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value58(Val, Id) ->
if Id =:= 78 ->
'enc_E-RABInformationListItem'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value85(Val, Id) ->
if Id =:= 89 ->
'enc_Bearers-SubjectToStatusTransfer-Item'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value90(Val, Id) ->
if Id =:= 130 ->
enc_SONConfigurationTransfer(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value93(Val, Id) ->
if Id =:= 129 ->
enc_SONConfigurationTransfer(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value96(Val, Id) ->
if Id =:= 122 ->
'enc_Inter-SystemInformationTransferType'(Val);
true ->
open_type_to_binary(Val)
end.

enc_os_Value99(Val, Id) ->
if Id =:= 121 ->
'enc_Inter-SystemInformationTransferType'(Val);
true ->
open_type_to_binary(Val)
end.

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

dec_subidentifiers([H|T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H|T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H|Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

decode_oid(Octets) ->
    [First|Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0,First|Rest];
            First < 80 ->
                [1,First - 40|Rest];
            true ->
                [2,First - 80|Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7),Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7),Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H|T], Acc) ->
    e_object_elements(T, [e_object_element(H)|Acc]).

e_object_identifier([E1,E2|Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head|Tail], []);
e_object_identifier([_,_|_Tail] = Oid) ->
    exit({error,{asn1,{illegal_value,Oid}}}).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

open_type_to_binary({asn1_OPENTYPE,Bin}) when is_binary(Bin) ->
    Bin.

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.
