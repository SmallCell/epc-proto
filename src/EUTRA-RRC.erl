%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:3.0.1
%% Purpose: encoder and decoder to the types in mod EUTRA-RRC

-module('EUTRA-RRC').
-compile(nowarn_unused_vars).
-include("EUTRA-RRC.hrl").
-asn1_info([{vsn,'3.0.1'},
            {module,'EUTRA-RRC'},
            {options,[{i,"/local/vlad/repos/mmesim/epc_proto/src"},
 warnings,ber,errors,
 {cwd,"/local/vlad/repos/mmesim/epc_proto"},
 {outdir,"/local/vlad/repos/mmesim/epc_proto/src"},
 uper,verbose,asn1config,
 {i,"."},
 {i,"/local/vlad/repos/mmesim/epc_proto/protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_UE-TimersAndConstants'/2,
'enc_SupportedBandList1XRTT'/2,
'enc_IRAT-ParametersCDMA2000-1XRTT'/2,
'enc_SupportedBandListHRPD'/2,
'enc_IRAT-ParametersCDMA2000-HRPD'/2,
'enc_SupportedBandGERAN'/2,
'enc_SupportedBandListGERAN'/2,
'enc_IRAT-ParametersGERAN'/2,
'enc_SupportedBandUTRA-TDD768'/2,
'enc_SupportedBandListUTRA-TDD768'/2,
'enc_IRAT-ParametersUTRA-TDD768'/2,
'enc_SupportedBandUTRA-TDD384'/2,
'enc_SupportedBandListUTRA-TDD384'/2,
'enc_IRAT-ParametersUTRA-TDD384'/2,
'enc_SupportedBandUTRA-TDD128'/2,
'enc_SupportedBandListUTRA-TDD128'/2,
'enc_IRAT-ParametersUTRA-TDD128'/2,
'enc_SupportedBandUTRA-FDD'/2,
'enc_SupportedBandListUTRA-FDD'/2,
'enc_IRAT-ParametersUTRA-FDD'/2,
'enc_InterRAT-BandInfo'/2,
'enc_InterRAT-BandList'/2,
'enc_InterFreqBandInfo'/2,
'enc_InterFreqBandList'/2,
'enc_BandInfoEUTRA'/2,
'enc_BandListEUTRA'/2,
'enc_MeasParameters'/2,
'enc_SupportedBandEUTRA'/2,
'enc_SupportedBandListEUTRA'/2,
'enc_RF-Parameters'/2,
'enc_PhyLayerParameters'/2,
'enc_PDCP-Parameters'/2,
'enc_AccessStratumRelease'/2,
'enc_UE-EUTRA-Capability'/2,
'enc_UE-CapabilityRAT-Container'/2,
'enc_UE-CapabilityRAT-ContainerList'/2,
'enc_S-TMSI'/2,
'enc_RRC-TransactionIdentifier'/2,
'enc_RAT-Type'/2,
'enc_RAND-CDMA2000'/2,
'enc_NeighCellConfig'/2,
'enc_MMEC'/2,
'enc_FilterCoefficient'/2,
'enc_DedicatedInfoNAS'/2,
'enc_DedicatedInfoCDMA2000'/2,
'enc_C-RNTI'/2,
'enc_TimeToTrigger'/2,
'enc_RSRQ-Range'/2,
'enc_RSRP-Range'/2,
'enc_ReportInterval'/2,
'enc_ReportConfigToAddMod'/2,
'enc_ReportConfigToAddModList'/2,
'enc_ThresholdCDMA2000'/2,
'enc_ThresholdGERAN'/2,
'enc_ThresholdUTRA'/2,
'enc_ReportConfigInterRAT'/2,
'enc_ReportConfigId'/2,
'enc_ThresholdEUTRA'/2,
'enc_ReportConfigEUTRA'/2,
'enc_QuantityConfigCDMA2000'/2,
'enc_QuantityConfigGERAN'/2,
'enc_QuantityConfigUTRA'/2,
'enc_QuantityConfigEUTRA'/2,
'enc_QuantityConfig'/2,
'enc_PLMN-IdentityList2'/2,
'enc_MeasResultCDMA2000'/2,
'enc_MeasResultListCDMA2000'/2,
'enc_MeasResultsCDMA2000'/2,
'enc_MeasResultGERAN'/2,
'enc_MeasResultListGERAN'/2,
'enc_MeasResultUTRA'/2,
'enc_MeasResultListUTRA'/2,
'enc_MeasResultEUTRA'/2,
'enc_MeasResultListEUTRA'/2,
'enc_MeasResults'/2,
'enc_CellsToAddModUTRA-TDD'/2,
'enc_CellsToAddModListUTRA-TDD'/2,
'enc_CellsToAddModUTRA-FDD'/2,
'enc_CellsToAddModListUTRA-FDD'/2,
'enc_MeasObjectUTRA'/2,
'enc_MeasObjectToAddMod'/2,
'enc_MeasObjectToAddModList'/2,
'enc_MeasObjectId'/2,
'enc_MeasObjectGERAN'/2,
'enc_BlackCellsToAddMod'/2,
'enc_BlackCellsToAddModList'/2,
'enc_CellsToAddMod'/2,
'enc_CellsToAddModList'/2,
'enc_MeasObjectEUTRA'/2,
'enc_CellsToAddModCDMA2000'/2,
'enc_CellsToAddModListCDMA2000'/2,
'enc_MeasObjectCDMA2000'/2,
'enc_MeasIdToAddMod'/2,
'enc_MeasIdToAddModList'/2,
'enc_MeasId'/2,
'enc_MeasGapConfig'/2,
'enc_ReportConfigToRemoveList'/2,
'enc_MeasObjectToRemoveList'/2,
'enc_MeasIdToRemoveList'/2,
'enc_MeasConfig'/2,
'enc_Hysteresis'/2,
'enc_AllowedMeasBandwidth'/2,
'enc_T-Reselection'/2,
'enc_TrackingAreaCode'/2,
'enc_SystemTimeInfoCDMA2000'/2,
'enc_SpeedStateScaleFactors'/2,
'enc_ReselectionThreshold'/2,
'enc_Q-OffsetRangeInterRAT'/2,
'enc_Q-OffsetRange'/2,
'enc_Q-RxLevMin'/2,
'enc_PreRegistrationZoneIdHRPD'/2,
'enc_SecondaryPreRegistrationZoneIdListHRPD'/2,
'enc_PreRegistrationInfoHRPD'/2,
'enc_MCC-MNC-Digit'/2,
'enc_MNC'/2,
'enc_MCC'/2,
'enc_PLMN-Identity'/2,
'enc_PhysCellIdUTRA-TDD'/2,
'enc_PhysCellIdUTRA-FDD'/2,
'enc_PhysCellIdGERAN'/2,
'enc_PhysCellIdCDMA2000'/2,
'enc_PhysCellIdRange'/2,
'enc_PhysCellId'/2,
'enc_MobilityStateParameters'/2,
'enc_MobilityParametersCDMA2000'/2,
'enc_CarrierFreqEUTRA'/2,
'enc_CarrierBandwidthEUTRA'/2,
'enc_MobilityControlInfo'/2,
'enc_CellGlobalIdCDMA2000'/2,
'enc_CellGlobalIdGERAN'/2,
'enc_CellGlobalIdUTRA'/2,
'enc_CellGlobalIdEUTRA'/2,
'enc_CSFB-RegistrationParam1XRTT'/2,
'enc_CellReselectionPriority'/2,
'enc_CellIndex'/2,
'enc_CellIndexList'/2,
'enc_CellIdentity'/2,
'enc_CDMA2000-Type'/2,
'enc_ExplicitListOfARFCNs'/2,
'enc_CarrierFreqsGERAN'/2,
'enc_CarrierFreqGERAN'/2,
'enc_CarrierFreqCDMA2000'/2,
'enc_BandIndicatorGERAN'/2,
'enc_BandclassCDMA2000'/2,
'enc_ARFCN-ValueUTRA'/2,
'enc_ARFCN-ValueGERAN'/2,
'enc_ARFCN-ValueEUTRA'/2,
'enc_ARFCN-ValueCDMA2000'/2,
'enc_AdditionalSpectrumEmission'/2,
'enc_ShortMAC-I'/2,
'enc_SecurityAlgorithmConfig'/2,
'enc_NextHopChainingCount'/2,
'enc_DeltaFList-PUCCH'/2,
'enc_UplinkPowerControlDedicated'/2,
'enc_UplinkPowerControlCommon'/2,
'enc_TPC-Index'/2,
'enc_TPC-PDCCH-Config'/2,
'enc_TimeAlignmentTimer'/2,
'enc_TDD-Config'/2,
'enc_N1-PUCCH-AN-PersistentList'/2,
'enc_SPS-ConfigUL'/2,
'enc_SPS-ConfigDL'/2,
'enc_SPS-Config'/2,
'enc_SoundingRS-UL-ConfigDedicated'/2,
'enc_SoundingRS-UL-ConfigCommon'/2,
'enc_SchedulingRequestConfig'/2,
'enc_T-StatusProhibit'/2,
'enc_T-Reordering'/2,
'enc_PollByte'/2,
'enc_PollPDU'/2,
'enc_T-PollRetransmit'/2,
'enc_SN-FieldLength'/2,
'enc_DL-UM-RLC'/2,
'enc_UL-UM-RLC'/2,
'enc_DL-AM-RLC'/2,
'enc_UL-AM-RLC'/2,
'enc_RLC-Config'/2,
'enc_DRB-ToReleaseList'/2,
'enc_DRB-ToAddMod'/2,
'enc_DRB-ToAddModList'/2,
'enc_SRB-ToAddMod'/2,
'enc_SRB-ToAddModList'/2,
'enc_RadioResourceConfigDedicated'/2,
'enc_UL-CyclicPrefixLength'/2,
'enc_PCCH-Config'/2,
'enc_BCCH-Config'/2,
'enc_RadioResourceConfigCommon'/2,
'enc_RadioResourceConfigCommonSIB'/2,
'enc_RACH-ConfigDedicated'/2,
'enc_RACH-ConfigCommon'/2,
'enc_UL-ReferenceSignalsPUSCH'/2,
'enc_PUSCH-ConfigDedicated'/2,
'enc_PUSCH-ConfigCommon'/2,
'enc_PUCCH-ConfigDedicated'/2,
'enc_PUCCH-ConfigCommon'/2,
'enc_PresenceAntennaPort1'/2,
'enc_PRACH-ConfigInfo'/2,
'enc_PRACH-Config'/2,
'enc_PRACH-ConfigSIB'/2,
'enc_P-Max'/2,
'enc_PhysicalConfigDedicated'/2,
'enc_PHICH-Config'/2,
'enc_PDSCH-ConfigDedicated'/2,
'enc_PDSCH-ConfigCommon'/2,
'enc_PDCP-Config'/2,
'enc_DRX-Config'/2,
'enc_MAC-MainConfig'/2,
'enc_LogicalChannelConfig'/2,
'enc_DRB-Identity'/2,
'enc_CQI-ReportPeriodic'/2,
'enc_CQI-ReportConfig'/2,
'enc_AntennaInfoDedicated'/2,
'enc_AntennaInfoCommon'/2,
'enc_SystemInformationBlockType11'/2,
'enc_SystemInformationBlockType10'/2,
'enc_SystemInformationBlockType9'/2,
'enc_BandClassInfoCDMA2000'/2,
'enc_BandClassListCDMA2000'/2,
'enc_PhysCellIdListCDMA2000'/2,
'enc_NeighCellsPerBandclassCDMA2000'/2,
'enc_NeighCellsPerBandclassListCDMA2000'/2,
'enc_NeighCellCDMA2000'/2,
'enc_NeighCellListCDMA2000'/2,
'enc_CellReselectionParametersCDMA2000'/2,
'enc_SystemInformationBlockType8'/2,
'enc_CarrierFreqsInfoGERAN'/2,
'enc_CarrierFreqsInfoListGERAN'/2,
'enc_SystemInformationBlockType7'/2,
'enc_CarrierFreqUTRA-TDD'/2,
'enc_CarrierFreqListUTRA-TDD'/2,
'enc_CarrierFreqUTRA-FDD'/2,
'enc_CarrierFreqListUTRA-FDD'/2,
'enc_SystemInformationBlockType6'/2,
'enc_InterFreqBlackCellList'/2,
'enc_InterFreqNeighCellInfo'/2,
'enc_InterFreqNeighCellList'/2,
'enc_InterFreqCarrierFreqInfo'/2,
'enc_InterFreqCarrierFreqList'/2,
'enc_SystemInformationBlockType5'/2,
'enc_IntraFreqBlackCellList'/2,
'enc_IntraFreqNeighCellInfo'/2,
'enc_IntraFreqNeighCellList'/2,
'enc_SystemInformationBlockType4'/2,
'enc_SystemInformationBlockType3'/2,
'enc_MBSFN-SubframeConfig'/2,
'enc_MBSFN-SubframeConfigList'/2,
'enc_AC-BarringConfig'/2,
'enc_SystemInformationBlockType2'/2,
'enc_ULInformationTransfer-r8-IEs'/2,
'enc_ULInformationTransfer'/2,
'enc_ULHandoverPreparationTransfer-r8-IEs'/2,
'enc_ULHandoverPreparationTransfer'/2,
'enc_UECapabilityInformation-r8-IEs'/2,
'enc_UECapabilityInformation'/2,
'enc_UE-CapabilityRequest'/2,
'enc_UECapabilityEnquiry-r8-IEs'/2,
'enc_UECapabilityEnquiry'/2,
'enc_SIB-Type'/2,
'enc_SIB-MappingInfo'/2,
'enc_SchedulingInfo'/2,
'enc_SchedulingInfoList'/2,
'enc_PLMN-IdentityInfo'/2,
'enc_PLMN-IdentityList'/2,
'enc_SystemInformationBlockType1'/2,
'enc_SystemInformation-r8-IEs'/2,
'enc_SystemInformation'/2,
'enc_SecurityModeFailure-r8-IEs'/2,
'enc_SecurityModeFailure'/2,
'enc_SecurityModeComplete-r8-IEs'/2,
'enc_SecurityModeComplete'/2,
'enc_SecurityConfigSMC'/2,
'enc_SecurityModeCommand-r8-IEs'/2,
'enc_SecurityModeCommand'/2,
'enc_RegisteredMME'/2,
'enc_RRCConnectionSetupComplete-r8-IEs'/2,
'enc_RRCConnectionSetupComplete'/2,
'enc_RRCConnectionSetup-r8-IEs'/2,
'enc_RRCConnectionSetup'/2,
'enc_EstablishmentCause'/2,
'enc_InitialUE-Identity'/2,
'enc_RRCConnectionRequest-r8-IEs'/2,
'enc_RRCConnectionRequest'/2,
'enc_BandClassPriority1XRTT'/2,
'enc_BandClassPriorityList1XRTT'/2,
'enc_BandClassPriorityHRPD'/2,
'enc_BandClassPriorityListHRPD'/2,
'enc_FreqPriorityUTRA-TDD'/2,
'enc_FreqPriorityListUTRA-TDD'/2,
'enc_FreqPriorityUTRA-FDD'/2,
'enc_FreqPriorityListUTRA-FDD'/2,
'enc_FreqsPriorityGERAN'/2,
'enc_FreqsPriorityListGERAN'/2,
'enc_FreqPriorityEUTRA'/2,
'enc_FreqPriorityListEUTRA'/2,
'enc_IdleModeMobilityControlInfo'/2,
'enc_RedirectedCarrierInfo'/2,
'enc_ReleaseCause'/2,
'enc_RRCConnectionRelease-r8-IEs'/2,
'enc_RRCConnectionRelease'/2,
'enc_RRCConnectionReject-r8-IEs'/2,
'enc_RRCConnectionReject'/2,
'enc_ReestablishmentCause'/2,
'enc_ReestabUE-Identity'/2,
'enc_RRCConnectionReestablishmentRequest-r8-IEs'/2,
'enc_RRCConnectionReestablishmentRequest'/2,
'enc_RRCConnectionReestablishmentReject-r8-IEs'/2,
'enc_RRCConnectionReestablishmentReject'/2,
'enc_RRCConnectionReestablishmentComplete-r8-IEs'/2,
'enc_RRCConnectionReestablishmentComplete'/2,
'enc_RRCConnectionReestablishment-r8-IEs'/2,
'enc_RRCConnectionReestablishment'/2,
'enc_RRCConnectionReconfigurationComplete-r8-IEs'/2,
'enc_RRCConnectionReconfigurationComplete'/2,
'enc_SecurityConfigHO'/2,
'enc_RRCConnectionReconfiguration-r8-IEs'/2,
'enc_RRCConnectionReconfiguration'/2,
'enc_IMSI-Digit'/2,
'enc_IMSI'/2,
'enc_PagingUE-Identity'/2,
'enc_PagingRecord'/2,
'enc_PagingRecordList'/2,
'enc_Paging'/2,
'enc_SystemInfoListGERAN'/2,
'enc_SI-OrPSI-GERAN'/2,
'enc_CellChangeOrder'/2,
'enc_Handover'/2,
'enc_MobilityFromEUTRACommand-r8-IEs'/2,
'enc_MobilityFromEUTRACommand'/2,
'enc_MeasurementReport-r8-IEs'/2,
'enc_MeasurementReport'/2,
'enc_MasterInformationBlock'/2,
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'/2,
'enc_HandoverFromEUTRAPreparationRequest'/2,
'enc_DLInformationTransfer-r8-IEs'/2,
'enc_DLInformationTransfer'/2,
'enc_CSFBParametersResponseCDMA2000-r8-IEs'/2,
'enc_CSFBParametersResponseCDMA2000'/2,
'enc_CSFBParametersRequestCDMA2000-r8-IEs'/2,
'enc_CSFBParametersRequestCDMA2000'/2,
'enc_DRB-CountInfo'/2,
'enc_DRB-CountInfoList'/2,
'enc_CounterCheckResponse-r8-IEs'/2,
'enc_CounterCheckResponse'/2,
'enc_DRB-CountMSB-Info'/2,
'enc_DRB-CountMSB-InfoList'/2,
'enc_CounterCheck-r8-IEs'/2,
'enc_CounterCheck'/2,
'enc_UL-DCCH-MessageType'/2,
'enc_UL-DCCH-Message'/2,
'enc_UL-CCCH-MessageType'/2,
'enc_UL-CCCH-Message'/2,
'enc_DL-DCCH-MessageType'/2,
'enc_DL-DCCH-Message'/2,
'enc_DL-CCCH-MessageType'/2,
'enc_DL-CCCH-Message'/2,
'enc_PCCH-MessageType'/2,
'enc_PCCH-Message'/2,
'enc_BCCH-DL-SCH-MessageType'/2,
'enc_BCCH-DL-SCH-Message'/2,
'enc_BCCH-BCH-MessageType'/2,
'enc_BCCH-BCH-Message'/2
]).

-export([
'dec_UE-TimersAndConstants'/2,
'dec_SupportedBandList1XRTT'/2,
'dec_IRAT-ParametersCDMA2000-1XRTT'/2,
'dec_SupportedBandListHRPD'/2,
'dec_IRAT-ParametersCDMA2000-HRPD'/2,
'dec_SupportedBandGERAN'/2,
'dec_SupportedBandListGERAN'/2,
'dec_IRAT-ParametersGERAN'/2,
'dec_SupportedBandUTRA-TDD768'/2,
'dec_SupportedBandListUTRA-TDD768'/2,
'dec_IRAT-ParametersUTRA-TDD768'/2,
'dec_SupportedBandUTRA-TDD384'/2,
'dec_SupportedBandListUTRA-TDD384'/2,
'dec_IRAT-ParametersUTRA-TDD384'/2,
'dec_SupportedBandUTRA-TDD128'/2,
'dec_SupportedBandListUTRA-TDD128'/2,
'dec_IRAT-ParametersUTRA-TDD128'/2,
'dec_SupportedBandUTRA-FDD'/2,
'dec_SupportedBandListUTRA-FDD'/2,
'dec_IRAT-ParametersUTRA-FDD'/2,
'dec_InterRAT-BandInfo'/2,
'dec_InterRAT-BandList'/2,
'dec_InterFreqBandInfo'/2,
'dec_InterFreqBandList'/2,
'dec_BandInfoEUTRA'/2,
'dec_BandListEUTRA'/2,
'dec_MeasParameters'/2,
'dec_SupportedBandEUTRA'/2,
'dec_SupportedBandListEUTRA'/2,
'dec_RF-Parameters'/2,
'dec_PhyLayerParameters'/2,
'dec_PDCP-Parameters'/2,
'dec_AccessStratumRelease'/2,
'dec_UE-EUTRA-Capability'/2,
'dec_UE-CapabilityRAT-Container'/2,
'dec_UE-CapabilityRAT-ContainerList'/2,
'dec_S-TMSI'/2,
'dec_RRC-TransactionIdentifier'/2,
'dec_RAT-Type'/2,
'dec_RAND-CDMA2000'/2,
'dec_NeighCellConfig'/2,
'dec_MMEC'/2,
'dec_FilterCoefficient'/2,
'dec_DedicatedInfoNAS'/2,
'dec_DedicatedInfoCDMA2000'/2,
'dec_C-RNTI'/2,
'dec_TimeToTrigger'/2,
'dec_RSRQ-Range'/2,
'dec_RSRP-Range'/2,
'dec_ReportInterval'/2,
'dec_ReportConfigToAddMod'/2,
'dec_ReportConfigToAddModList'/2,
'dec_ThresholdCDMA2000'/2,
'dec_ThresholdGERAN'/2,
'dec_ThresholdUTRA'/2,
'dec_ReportConfigInterRAT'/2,
'dec_ReportConfigId'/2,
'dec_ThresholdEUTRA'/2,
'dec_ReportConfigEUTRA'/2,
'dec_QuantityConfigCDMA2000'/2,
'dec_QuantityConfigGERAN'/2,
'dec_QuantityConfigUTRA'/2,
'dec_QuantityConfigEUTRA'/2,
'dec_QuantityConfig'/2,
'dec_PLMN-IdentityList2'/2,
'dec_MeasResultCDMA2000'/2,
'dec_MeasResultListCDMA2000'/2,
'dec_MeasResultsCDMA2000'/2,
'dec_MeasResultGERAN'/2,
'dec_MeasResultListGERAN'/2,
'dec_MeasResultUTRA'/2,
'dec_MeasResultListUTRA'/2,
'dec_MeasResultEUTRA'/2,
'dec_MeasResultListEUTRA'/2,
'dec_MeasResults'/2,
'dec_CellsToAddModUTRA-TDD'/2,
'dec_CellsToAddModListUTRA-TDD'/2,
'dec_CellsToAddModUTRA-FDD'/2,
'dec_CellsToAddModListUTRA-FDD'/2,
'dec_MeasObjectUTRA'/2,
'dec_MeasObjectToAddMod'/2,
'dec_MeasObjectToAddModList'/2,
'dec_MeasObjectId'/2,
'dec_MeasObjectGERAN'/2,
'dec_BlackCellsToAddMod'/2,
'dec_BlackCellsToAddModList'/2,
'dec_CellsToAddMod'/2,
'dec_CellsToAddModList'/2,
'dec_MeasObjectEUTRA'/2,
'dec_CellsToAddModCDMA2000'/2,
'dec_CellsToAddModListCDMA2000'/2,
'dec_MeasObjectCDMA2000'/2,
'dec_MeasIdToAddMod'/2,
'dec_MeasIdToAddModList'/2,
'dec_MeasId'/2,
'dec_MeasGapConfig'/2,
'dec_ReportConfigToRemoveList'/2,
'dec_MeasObjectToRemoveList'/2,
'dec_MeasIdToRemoveList'/2,
'dec_MeasConfig'/2,
'dec_Hysteresis'/2,
'dec_AllowedMeasBandwidth'/2,
'dec_T-Reselection'/2,
'dec_TrackingAreaCode'/2,
'dec_SystemTimeInfoCDMA2000'/2,
'dec_SpeedStateScaleFactors'/2,
'dec_ReselectionThreshold'/2,
'dec_Q-OffsetRangeInterRAT'/2,
'dec_Q-OffsetRange'/2,
'dec_Q-RxLevMin'/2,
'dec_PreRegistrationZoneIdHRPD'/2,
'dec_SecondaryPreRegistrationZoneIdListHRPD'/2,
'dec_PreRegistrationInfoHRPD'/2,
'dec_MCC-MNC-Digit'/2,
'dec_MNC'/2,
'dec_MCC'/2,
'dec_PLMN-Identity'/2,
'dec_PhysCellIdUTRA-TDD'/2,
'dec_PhysCellIdUTRA-FDD'/2,
'dec_PhysCellIdGERAN'/2,
'dec_PhysCellIdCDMA2000'/2,
'dec_PhysCellIdRange'/2,
'dec_PhysCellId'/2,
'dec_MobilityStateParameters'/2,
'dec_MobilityParametersCDMA2000'/2,
'dec_CarrierFreqEUTRA'/2,
'dec_CarrierBandwidthEUTRA'/2,
'dec_MobilityControlInfo'/2,
'dec_CellGlobalIdCDMA2000'/2,
'dec_CellGlobalIdGERAN'/2,
'dec_CellGlobalIdUTRA'/2,
'dec_CellGlobalIdEUTRA'/2,
'dec_CSFB-RegistrationParam1XRTT'/2,
'dec_CellReselectionPriority'/2,
'dec_CellIndex'/2,
'dec_CellIndexList'/2,
'dec_CellIdentity'/2,
'dec_CDMA2000-Type'/2,
'dec_ExplicitListOfARFCNs'/2,
'dec_CarrierFreqsGERAN'/2,
'dec_CarrierFreqGERAN'/2,
'dec_CarrierFreqCDMA2000'/2,
'dec_BandIndicatorGERAN'/2,
'dec_BandclassCDMA2000'/2,
'dec_ARFCN-ValueUTRA'/2,
'dec_ARFCN-ValueGERAN'/2,
'dec_ARFCN-ValueEUTRA'/2,
'dec_ARFCN-ValueCDMA2000'/2,
'dec_AdditionalSpectrumEmission'/2,
'dec_ShortMAC-I'/2,
'dec_SecurityAlgorithmConfig'/2,
'dec_NextHopChainingCount'/2,
'dec_DeltaFList-PUCCH'/2,
'dec_UplinkPowerControlDedicated'/2,
'dec_UplinkPowerControlCommon'/2,
'dec_TPC-Index'/2,
'dec_TPC-PDCCH-Config'/2,
'dec_TimeAlignmentTimer'/2,
'dec_TDD-Config'/2,
'dec_N1-PUCCH-AN-PersistentList'/2,
'dec_SPS-ConfigUL'/2,
'dec_SPS-ConfigDL'/2,
'dec_SPS-Config'/2,
'dec_SoundingRS-UL-ConfigDedicated'/2,
'dec_SoundingRS-UL-ConfigCommon'/2,
'dec_SchedulingRequestConfig'/2,
'dec_T-StatusProhibit'/2,
'dec_T-Reordering'/2,
'dec_PollByte'/2,
'dec_PollPDU'/2,
'dec_T-PollRetransmit'/2,
'dec_SN-FieldLength'/2,
'dec_DL-UM-RLC'/2,
'dec_UL-UM-RLC'/2,
'dec_DL-AM-RLC'/2,
'dec_UL-AM-RLC'/2,
'dec_RLC-Config'/2,
'dec_DRB-ToReleaseList'/2,
'dec_DRB-ToAddMod'/2,
'dec_DRB-ToAddModList'/2,
'dec_SRB-ToAddMod'/2,
'dec_SRB-ToAddModList'/2,
'dec_RadioResourceConfigDedicated'/2,
'dec_UL-CyclicPrefixLength'/2,
'dec_PCCH-Config'/2,
'dec_BCCH-Config'/2,
'dec_RadioResourceConfigCommon'/2,
'dec_RadioResourceConfigCommonSIB'/2,
'dec_RACH-ConfigDedicated'/2,
'dec_RACH-ConfigCommon'/2,
'dec_UL-ReferenceSignalsPUSCH'/2,
'dec_PUSCH-ConfigDedicated'/2,
'dec_PUSCH-ConfigCommon'/2,
'dec_PUCCH-ConfigDedicated'/2,
'dec_PUCCH-ConfigCommon'/2,
'dec_PresenceAntennaPort1'/2,
'dec_PRACH-ConfigInfo'/2,
'dec_PRACH-Config'/2,
'dec_PRACH-ConfigSIB'/2,
'dec_P-Max'/2,
'dec_PhysicalConfigDedicated'/2,
'dec_PHICH-Config'/2,
'dec_PDSCH-ConfigDedicated'/2,
'dec_PDSCH-ConfigCommon'/2,
'dec_PDCP-Config'/2,
'dec_DRX-Config'/2,
'dec_MAC-MainConfig'/2,
'dec_LogicalChannelConfig'/2,
'dec_DRB-Identity'/2,
'dec_CQI-ReportPeriodic'/2,
'dec_CQI-ReportConfig'/2,
'dec_AntennaInfoDedicated'/2,
'dec_AntennaInfoCommon'/2,
'dec_SystemInformationBlockType11'/2,
'dec_SystemInformationBlockType10'/2,
'dec_SystemInformationBlockType9'/2,
'dec_BandClassInfoCDMA2000'/2,
'dec_BandClassListCDMA2000'/2,
'dec_PhysCellIdListCDMA2000'/2,
'dec_NeighCellsPerBandclassCDMA2000'/2,
'dec_NeighCellsPerBandclassListCDMA2000'/2,
'dec_NeighCellCDMA2000'/2,
'dec_NeighCellListCDMA2000'/2,
'dec_CellReselectionParametersCDMA2000'/2,
'dec_SystemInformationBlockType8'/2,
'dec_CarrierFreqsInfoGERAN'/2,
'dec_CarrierFreqsInfoListGERAN'/2,
'dec_SystemInformationBlockType7'/2,
'dec_CarrierFreqUTRA-TDD'/2,
'dec_CarrierFreqListUTRA-TDD'/2,
'dec_CarrierFreqUTRA-FDD'/2,
'dec_CarrierFreqListUTRA-FDD'/2,
'dec_SystemInformationBlockType6'/2,
'dec_InterFreqBlackCellList'/2,
'dec_InterFreqNeighCellInfo'/2,
'dec_InterFreqNeighCellList'/2,
'dec_InterFreqCarrierFreqInfo'/2,
'dec_InterFreqCarrierFreqList'/2,
'dec_SystemInformationBlockType5'/2,
'dec_IntraFreqBlackCellList'/2,
'dec_IntraFreqNeighCellInfo'/2,
'dec_IntraFreqNeighCellList'/2,
'dec_SystemInformationBlockType4'/2,
'dec_SystemInformationBlockType3'/2,
'dec_MBSFN-SubframeConfig'/2,
'dec_MBSFN-SubframeConfigList'/2,
'dec_AC-BarringConfig'/2,
'dec_SystemInformationBlockType2'/2,
'dec_ULInformationTransfer-r8-IEs'/2,
'dec_ULInformationTransfer'/2,
'dec_ULHandoverPreparationTransfer-r8-IEs'/2,
'dec_ULHandoverPreparationTransfer'/2,
'dec_UECapabilityInformation-r8-IEs'/2,
'dec_UECapabilityInformation'/2,
'dec_UE-CapabilityRequest'/2,
'dec_UECapabilityEnquiry-r8-IEs'/2,
'dec_UECapabilityEnquiry'/2,
'dec_SIB-Type'/2,
'dec_SIB-MappingInfo'/2,
'dec_SchedulingInfo'/2,
'dec_SchedulingInfoList'/2,
'dec_PLMN-IdentityInfo'/2,
'dec_PLMN-IdentityList'/2,
'dec_SystemInformationBlockType1'/2,
'dec_SystemInformation-r8-IEs'/2,
'dec_SystemInformation'/2,
'dec_SecurityModeFailure-r8-IEs'/2,
'dec_SecurityModeFailure'/2,
'dec_SecurityModeComplete-r8-IEs'/2,
'dec_SecurityModeComplete'/2,
'dec_SecurityConfigSMC'/2,
'dec_SecurityModeCommand-r8-IEs'/2,
'dec_SecurityModeCommand'/2,
'dec_RegisteredMME'/2,
'dec_RRCConnectionSetupComplete-r8-IEs'/2,
'dec_RRCConnectionSetupComplete'/2,
'dec_RRCConnectionSetup-r8-IEs'/2,
'dec_RRCConnectionSetup'/2,
'dec_EstablishmentCause'/2,
'dec_InitialUE-Identity'/2,
'dec_RRCConnectionRequest-r8-IEs'/2,
'dec_RRCConnectionRequest'/2,
'dec_BandClassPriority1XRTT'/2,
'dec_BandClassPriorityList1XRTT'/2,
'dec_BandClassPriorityHRPD'/2,
'dec_BandClassPriorityListHRPD'/2,
'dec_FreqPriorityUTRA-TDD'/2,
'dec_FreqPriorityListUTRA-TDD'/2,
'dec_FreqPriorityUTRA-FDD'/2,
'dec_FreqPriorityListUTRA-FDD'/2,
'dec_FreqsPriorityGERAN'/2,
'dec_FreqsPriorityListGERAN'/2,
'dec_FreqPriorityEUTRA'/2,
'dec_FreqPriorityListEUTRA'/2,
'dec_IdleModeMobilityControlInfo'/2,
'dec_RedirectedCarrierInfo'/2,
'dec_ReleaseCause'/2,
'dec_RRCConnectionRelease-r8-IEs'/2,
'dec_RRCConnectionRelease'/2,
'dec_RRCConnectionReject-r8-IEs'/2,
'dec_RRCConnectionReject'/2,
'dec_ReestablishmentCause'/2,
'dec_ReestabUE-Identity'/2,
'dec_RRCConnectionReestablishmentRequest-r8-IEs'/2,
'dec_RRCConnectionReestablishmentRequest'/2,
'dec_RRCConnectionReestablishmentReject-r8-IEs'/2,
'dec_RRCConnectionReestablishmentReject'/2,
'dec_RRCConnectionReestablishmentComplete-r8-IEs'/2,
'dec_RRCConnectionReestablishmentComplete'/2,
'dec_RRCConnectionReestablishment-r8-IEs'/2,
'dec_RRCConnectionReestablishment'/2,
'dec_RRCConnectionReconfigurationComplete-r8-IEs'/2,
'dec_RRCConnectionReconfigurationComplete'/2,
'dec_SecurityConfigHO'/2,
'dec_RRCConnectionReconfiguration-r8-IEs'/2,
'dec_RRCConnectionReconfiguration'/2,
'dec_IMSI-Digit'/2,
'dec_IMSI'/2,
'dec_PagingUE-Identity'/2,
'dec_PagingRecord'/2,
'dec_PagingRecordList'/2,
'dec_Paging'/2,
'dec_SystemInfoListGERAN'/2,
'dec_SI-OrPSI-GERAN'/2,
'dec_CellChangeOrder'/2,
'dec_Handover'/2,
'dec_MobilityFromEUTRACommand-r8-IEs'/2,
'dec_MobilityFromEUTRACommand'/2,
'dec_MeasurementReport-r8-IEs'/2,
'dec_MeasurementReport'/2,
'dec_MasterInformationBlock'/2,
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'/2,
'dec_HandoverFromEUTRAPreparationRequest'/2,
'dec_DLInformationTransfer-r8-IEs'/2,
'dec_DLInformationTransfer'/2,
'dec_CSFBParametersResponseCDMA2000-r8-IEs'/2,
'dec_CSFBParametersResponseCDMA2000'/2,
'dec_CSFBParametersRequestCDMA2000-r8-IEs'/2,
'dec_CSFBParametersRequestCDMA2000'/2,
'dec_DRB-CountInfo'/2,
'dec_DRB-CountInfoList'/2,
'dec_CounterCheckResponse-r8-IEs'/2,
'dec_CounterCheckResponse'/2,
'dec_DRB-CountMSB-Info'/2,
'dec_DRB-CountMSB-InfoList'/2,
'dec_CounterCheck-r8-IEs'/2,
'dec_CounterCheck'/2,
'dec_UL-DCCH-MessageType'/2,
'dec_UL-DCCH-Message'/2,
'dec_UL-CCCH-MessageType'/2,
'dec_UL-CCCH-Message'/2,
'dec_DL-DCCH-MessageType'/2,
'dec_DL-DCCH-Message'/2,
'dec_DL-CCCH-MessageType'/2,
'dec_DL-CCCH-Message'/2,
'dec_PCCH-MessageType'/2,
'dec_PCCH-Message'/2,
'dec_BCCH-DL-SCH-MessageType'/2,
'dec_BCCH-DL-SCH-Message'/2,
'dec_BCCH-BCH-MessageType'/2,
'dec_BCCH-BCH-Message'/2
]).

-export([
'maxUTRA-TDD-Carrier'/0,
'maxUTRA-FDD-Carrier'/0,
'maxSI-Message'/0,
'maxSIB-1'/0,
'maxSIB'/0,
'maxReportConfigId'/0,
'maxRAT-Capabilities'/0,
'maxPNOffset'/0,
'maxPageRec'/0,
'maxObjectId'/0,
'maxMeasId'/0,
'maxMCS-1'/0,
'maxMBSFN-Allocations'/0,
'maxGNFG'/0,
'maxGERAN-SI'/0,
'maxFreq'/0,
'maxEARFCN'/0,
'maxDRB'/0,
'maxCellReport'/0,
'maxCellMeas'/0,
'maxCellIntra'/0,
'maxCellInter'/0,
'maxCellBlack'/0,
'maxCDMA-BandClass'/0,
'maxBands'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('UE-TimersAndConstants',Data) -> 'enc_UE-TimersAndConstants'(Data);
encode_disp('SupportedBandList1XRTT',Data) -> 'enc_SupportedBandList1XRTT'(Data);
encode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'enc_IRAT-ParametersCDMA2000-1XRTT'(Data);
encode_disp('SupportedBandListHRPD',Data) -> 'enc_SupportedBandListHRPD'(Data);
encode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'enc_IRAT-ParametersCDMA2000-HRPD'(Data);
encode_disp('SupportedBandGERAN',Data) -> 'enc_SupportedBandGERAN'(Data);
encode_disp('SupportedBandListGERAN',Data) -> 'enc_SupportedBandListGERAN'(Data);
encode_disp('IRAT-ParametersGERAN',Data) -> 'enc_IRAT-ParametersGERAN'(Data);
encode_disp('SupportedBandUTRA-TDD768',Data) -> 'enc_SupportedBandUTRA-TDD768'(Data);
encode_disp('SupportedBandListUTRA-TDD768',Data) -> 'enc_SupportedBandListUTRA-TDD768'(Data);
encode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'enc_IRAT-ParametersUTRA-TDD768'(Data);
encode_disp('SupportedBandUTRA-TDD384',Data) -> 'enc_SupportedBandUTRA-TDD384'(Data);
encode_disp('SupportedBandListUTRA-TDD384',Data) -> 'enc_SupportedBandListUTRA-TDD384'(Data);
encode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'enc_IRAT-ParametersUTRA-TDD384'(Data);
encode_disp('SupportedBandUTRA-TDD128',Data) -> 'enc_SupportedBandUTRA-TDD128'(Data);
encode_disp('SupportedBandListUTRA-TDD128',Data) -> 'enc_SupportedBandListUTRA-TDD128'(Data);
encode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'enc_IRAT-ParametersUTRA-TDD128'(Data);
encode_disp('SupportedBandUTRA-FDD',Data) -> 'enc_SupportedBandUTRA-FDD'(Data);
encode_disp('SupportedBandListUTRA-FDD',Data) -> 'enc_SupportedBandListUTRA-FDD'(Data);
encode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'enc_IRAT-ParametersUTRA-FDD'(Data);
encode_disp('InterRAT-BandInfo',Data) -> 'enc_InterRAT-BandInfo'(Data);
encode_disp('InterRAT-BandList',Data) -> 'enc_InterRAT-BandList'(Data);
encode_disp('InterFreqBandInfo',Data) -> 'enc_InterFreqBandInfo'(Data);
encode_disp('InterFreqBandList',Data) -> 'enc_InterFreqBandList'(Data);
encode_disp('BandInfoEUTRA',Data) -> 'enc_BandInfoEUTRA'(Data);
encode_disp('BandListEUTRA',Data) -> 'enc_BandListEUTRA'(Data);
encode_disp('MeasParameters',Data) -> 'enc_MeasParameters'(Data);
encode_disp('SupportedBandEUTRA',Data) -> 'enc_SupportedBandEUTRA'(Data);
encode_disp('SupportedBandListEUTRA',Data) -> 'enc_SupportedBandListEUTRA'(Data);
encode_disp('RF-Parameters',Data) -> 'enc_RF-Parameters'(Data);
encode_disp('PhyLayerParameters',Data) -> 'enc_PhyLayerParameters'(Data);
encode_disp('PDCP-Parameters',Data) -> 'enc_PDCP-Parameters'(Data);
encode_disp('AccessStratumRelease',Data) -> 'enc_AccessStratumRelease'(Data);
encode_disp('UE-EUTRA-Capability',Data) -> 'enc_UE-EUTRA-Capability'(Data);
encode_disp('UE-CapabilityRAT-Container',Data) -> 'enc_UE-CapabilityRAT-Container'(Data);
encode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'enc_UE-CapabilityRAT-ContainerList'(Data);
encode_disp('S-TMSI',Data) -> 'enc_S-TMSI'(Data);
encode_disp('RRC-TransactionIdentifier',Data) -> 'enc_RRC-TransactionIdentifier'(Data);
encode_disp('RAT-Type',Data) -> 'enc_RAT-Type'(Data);
encode_disp('RAND-CDMA2000',Data) -> 'enc_RAND-CDMA2000'(Data);
encode_disp('NeighCellConfig',Data) -> 'enc_NeighCellConfig'(Data);
encode_disp('MMEC',Data) -> 'enc_MMEC'(Data);
encode_disp('FilterCoefficient',Data) -> 'enc_FilterCoefficient'(Data);
encode_disp('DedicatedInfoNAS',Data) -> 'enc_DedicatedInfoNAS'(Data);
encode_disp('DedicatedInfoCDMA2000',Data) -> 'enc_DedicatedInfoCDMA2000'(Data);
encode_disp('C-RNTI',Data) -> 'enc_C-RNTI'(Data);
encode_disp('TimeToTrigger',Data) -> 'enc_TimeToTrigger'(Data);
encode_disp('RSRQ-Range',Data) -> 'enc_RSRQ-Range'(Data);
encode_disp('RSRP-Range',Data) -> 'enc_RSRP-Range'(Data);
encode_disp('ReportInterval',Data) -> 'enc_ReportInterval'(Data);
encode_disp('ReportConfigToAddMod',Data) -> 'enc_ReportConfigToAddMod'(Data);
encode_disp('ReportConfigToAddModList',Data) -> 'enc_ReportConfigToAddModList'(Data);
encode_disp('ThresholdCDMA2000',Data) -> 'enc_ThresholdCDMA2000'(Data);
encode_disp('ThresholdGERAN',Data) -> 'enc_ThresholdGERAN'(Data);
encode_disp('ThresholdUTRA',Data) -> 'enc_ThresholdUTRA'(Data);
encode_disp('ReportConfigInterRAT',Data) -> 'enc_ReportConfigInterRAT'(Data);
encode_disp('ReportConfigId',Data) -> 'enc_ReportConfigId'(Data);
encode_disp('ThresholdEUTRA',Data) -> 'enc_ThresholdEUTRA'(Data);
encode_disp('ReportConfigEUTRA',Data) -> 'enc_ReportConfigEUTRA'(Data);
encode_disp('QuantityConfigCDMA2000',Data) -> 'enc_QuantityConfigCDMA2000'(Data);
encode_disp('QuantityConfigGERAN',Data) -> 'enc_QuantityConfigGERAN'(Data);
encode_disp('QuantityConfigUTRA',Data) -> 'enc_QuantityConfigUTRA'(Data);
encode_disp('QuantityConfigEUTRA',Data) -> 'enc_QuantityConfigEUTRA'(Data);
encode_disp('QuantityConfig',Data) -> 'enc_QuantityConfig'(Data);
encode_disp('PLMN-IdentityList2',Data) -> 'enc_PLMN-IdentityList2'(Data);
encode_disp('MeasResultCDMA2000',Data) -> 'enc_MeasResultCDMA2000'(Data);
encode_disp('MeasResultListCDMA2000',Data) -> 'enc_MeasResultListCDMA2000'(Data);
encode_disp('MeasResultsCDMA2000',Data) -> 'enc_MeasResultsCDMA2000'(Data);
encode_disp('MeasResultGERAN',Data) -> 'enc_MeasResultGERAN'(Data);
encode_disp('MeasResultListGERAN',Data) -> 'enc_MeasResultListGERAN'(Data);
encode_disp('MeasResultUTRA',Data) -> 'enc_MeasResultUTRA'(Data);
encode_disp('MeasResultListUTRA',Data) -> 'enc_MeasResultListUTRA'(Data);
encode_disp('MeasResultEUTRA',Data) -> 'enc_MeasResultEUTRA'(Data);
encode_disp('MeasResultListEUTRA',Data) -> 'enc_MeasResultListEUTRA'(Data);
encode_disp('MeasResults',Data) -> 'enc_MeasResults'(Data);
encode_disp('CellsToAddModUTRA-TDD',Data) -> 'enc_CellsToAddModUTRA-TDD'(Data);
encode_disp('CellsToAddModListUTRA-TDD',Data) -> 'enc_CellsToAddModListUTRA-TDD'(Data);
encode_disp('CellsToAddModUTRA-FDD',Data) -> 'enc_CellsToAddModUTRA-FDD'(Data);
encode_disp('CellsToAddModListUTRA-FDD',Data) -> 'enc_CellsToAddModListUTRA-FDD'(Data);
encode_disp('MeasObjectUTRA',Data) -> 'enc_MeasObjectUTRA'(Data);
encode_disp('MeasObjectToAddMod',Data) -> 'enc_MeasObjectToAddMod'(Data);
encode_disp('MeasObjectToAddModList',Data) -> 'enc_MeasObjectToAddModList'(Data);
encode_disp('MeasObjectId',Data) -> 'enc_MeasObjectId'(Data);
encode_disp('MeasObjectGERAN',Data) -> 'enc_MeasObjectGERAN'(Data);
encode_disp('BlackCellsToAddMod',Data) -> 'enc_BlackCellsToAddMod'(Data);
encode_disp('BlackCellsToAddModList',Data) -> 'enc_BlackCellsToAddModList'(Data);
encode_disp('CellsToAddMod',Data) -> 'enc_CellsToAddMod'(Data);
encode_disp('CellsToAddModList',Data) -> 'enc_CellsToAddModList'(Data);
encode_disp('MeasObjectEUTRA',Data) -> 'enc_MeasObjectEUTRA'(Data);
encode_disp('CellsToAddModCDMA2000',Data) -> 'enc_CellsToAddModCDMA2000'(Data);
encode_disp('CellsToAddModListCDMA2000',Data) -> 'enc_CellsToAddModListCDMA2000'(Data);
encode_disp('MeasObjectCDMA2000',Data) -> 'enc_MeasObjectCDMA2000'(Data);
encode_disp('MeasIdToAddMod',Data) -> 'enc_MeasIdToAddMod'(Data);
encode_disp('MeasIdToAddModList',Data) -> 'enc_MeasIdToAddModList'(Data);
encode_disp('MeasId',Data) -> 'enc_MeasId'(Data);
encode_disp('MeasGapConfig',Data) -> 'enc_MeasGapConfig'(Data);
encode_disp('ReportConfigToRemoveList',Data) -> 'enc_ReportConfigToRemoveList'(Data);
encode_disp('MeasObjectToRemoveList',Data) -> 'enc_MeasObjectToRemoveList'(Data);
encode_disp('MeasIdToRemoveList',Data) -> 'enc_MeasIdToRemoveList'(Data);
encode_disp('MeasConfig',Data) -> 'enc_MeasConfig'(Data);
encode_disp('Hysteresis',Data) -> 'enc_Hysteresis'(Data);
encode_disp('AllowedMeasBandwidth',Data) -> 'enc_AllowedMeasBandwidth'(Data);
encode_disp('T-Reselection',Data) -> 'enc_T-Reselection'(Data);
encode_disp('TrackingAreaCode',Data) -> 'enc_TrackingAreaCode'(Data);
encode_disp('SystemTimeInfoCDMA2000',Data) -> 'enc_SystemTimeInfoCDMA2000'(Data);
encode_disp('SpeedStateScaleFactors',Data) -> 'enc_SpeedStateScaleFactors'(Data);
encode_disp('ReselectionThreshold',Data) -> 'enc_ReselectionThreshold'(Data);
encode_disp('Q-OffsetRangeInterRAT',Data) -> 'enc_Q-OffsetRangeInterRAT'(Data);
encode_disp('Q-OffsetRange',Data) -> 'enc_Q-OffsetRange'(Data);
encode_disp('Q-RxLevMin',Data) -> 'enc_Q-RxLevMin'(Data);
encode_disp('PreRegistrationZoneIdHRPD',Data) -> 'enc_PreRegistrationZoneIdHRPD'(Data);
encode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'enc_SecondaryPreRegistrationZoneIdListHRPD'(Data);
encode_disp('PreRegistrationInfoHRPD',Data) -> 'enc_PreRegistrationInfoHRPD'(Data);
encode_disp('MCC-MNC-Digit',Data) -> 'enc_MCC-MNC-Digit'(Data);
encode_disp('MNC',Data) -> 'enc_MNC'(Data);
encode_disp('MCC',Data) -> 'enc_MCC'(Data);
encode_disp('PLMN-Identity',Data) -> 'enc_PLMN-Identity'(Data);
encode_disp('PhysCellIdUTRA-TDD',Data) -> 'enc_PhysCellIdUTRA-TDD'(Data);
encode_disp('PhysCellIdUTRA-FDD',Data) -> 'enc_PhysCellIdUTRA-FDD'(Data);
encode_disp('PhysCellIdGERAN',Data) -> 'enc_PhysCellIdGERAN'(Data);
encode_disp('PhysCellIdCDMA2000',Data) -> 'enc_PhysCellIdCDMA2000'(Data);
encode_disp('PhysCellIdRange',Data) -> 'enc_PhysCellIdRange'(Data);
encode_disp('PhysCellId',Data) -> 'enc_PhysCellId'(Data);
encode_disp('MobilityStateParameters',Data) -> 'enc_MobilityStateParameters'(Data);
encode_disp('MobilityParametersCDMA2000',Data) -> 'enc_MobilityParametersCDMA2000'(Data);
encode_disp('CarrierFreqEUTRA',Data) -> 'enc_CarrierFreqEUTRA'(Data);
encode_disp('CarrierBandwidthEUTRA',Data) -> 'enc_CarrierBandwidthEUTRA'(Data);
encode_disp('MobilityControlInfo',Data) -> 'enc_MobilityControlInfo'(Data);
encode_disp('CellGlobalIdCDMA2000',Data) -> 'enc_CellGlobalIdCDMA2000'(Data);
encode_disp('CellGlobalIdGERAN',Data) -> 'enc_CellGlobalIdGERAN'(Data);
encode_disp('CellGlobalIdUTRA',Data) -> 'enc_CellGlobalIdUTRA'(Data);
encode_disp('CellGlobalIdEUTRA',Data) -> 'enc_CellGlobalIdEUTRA'(Data);
encode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'enc_CSFB-RegistrationParam1XRTT'(Data);
encode_disp('CellReselectionPriority',Data) -> 'enc_CellReselectionPriority'(Data);
encode_disp('CellIndex',Data) -> 'enc_CellIndex'(Data);
encode_disp('CellIndexList',Data) -> 'enc_CellIndexList'(Data);
encode_disp('CellIdentity',Data) -> 'enc_CellIdentity'(Data);
encode_disp('CDMA2000-Type',Data) -> 'enc_CDMA2000-Type'(Data);
encode_disp('ExplicitListOfARFCNs',Data) -> 'enc_ExplicitListOfARFCNs'(Data);
encode_disp('CarrierFreqsGERAN',Data) -> 'enc_CarrierFreqsGERAN'(Data);
encode_disp('CarrierFreqGERAN',Data) -> 'enc_CarrierFreqGERAN'(Data);
encode_disp('CarrierFreqCDMA2000',Data) -> 'enc_CarrierFreqCDMA2000'(Data);
encode_disp('BandIndicatorGERAN',Data) -> 'enc_BandIndicatorGERAN'(Data);
encode_disp('BandclassCDMA2000',Data) -> 'enc_BandclassCDMA2000'(Data);
encode_disp('ARFCN-ValueUTRA',Data) -> 'enc_ARFCN-ValueUTRA'(Data);
encode_disp('ARFCN-ValueGERAN',Data) -> 'enc_ARFCN-ValueGERAN'(Data);
encode_disp('ARFCN-ValueEUTRA',Data) -> 'enc_ARFCN-ValueEUTRA'(Data);
encode_disp('ARFCN-ValueCDMA2000',Data) -> 'enc_ARFCN-ValueCDMA2000'(Data);
encode_disp('AdditionalSpectrumEmission',Data) -> 'enc_AdditionalSpectrumEmission'(Data);
encode_disp('ShortMAC-I',Data) -> 'enc_ShortMAC-I'(Data);
encode_disp('SecurityAlgorithmConfig',Data) -> 'enc_SecurityAlgorithmConfig'(Data);
encode_disp('NextHopChainingCount',Data) -> 'enc_NextHopChainingCount'(Data);
encode_disp('DeltaFList-PUCCH',Data) -> 'enc_DeltaFList-PUCCH'(Data);
encode_disp('UplinkPowerControlDedicated',Data) -> 'enc_UplinkPowerControlDedicated'(Data);
encode_disp('UplinkPowerControlCommon',Data) -> 'enc_UplinkPowerControlCommon'(Data);
encode_disp('TPC-Index',Data) -> 'enc_TPC-Index'(Data);
encode_disp('TPC-PDCCH-Config',Data) -> 'enc_TPC-PDCCH-Config'(Data);
encode_disp('TimeAlignmentTimer',Data) -> 'enc_TimeAlignmentTimer'(Data);
encode_disp('TDD-Config',Data) -> 'enc_TDD-Config'(Data);
encode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'enc_N1-PUCCH-AN-PersistentList'(Data);
encode_disp('SPS-ConfigUL',Data) -> 'enc_SPS-ConfigUL'(Data);
encode_disp('SPS-ConfigDL',Data) -> 'enc_SPS-ConfigDL'(Data);
encode_disp('SPS-Config',Data) -> 'enc_SPS-Config'(Data);
encode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'enc_SoundingRS-UL-ConfigDedicated'(Data);
encode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'enc_SoundingRS-UL-ConfigCommon'(Data);
encode_disp('SchedulingRequestConfig',Data) -> 'enc_SchedulingRequestConfig'(Data);
encode_disp('T-StatusProhibit',Data) -> 'enc_T-StatusProhibit'(Data);
encode_disp('T-Reordering',Data) -> 'enc_T-Reordering'(Data);
encode_disp('PollByte',Data) -> 'enc_PollByte'(Data);
encode_disp('PollPDU',Data) -> 'enc_PollPDU'(Data);
encode_disp('T-PollRetransmit',Data) -> 'enc_T-PollRetransmit'(Data);
encode_disp('SN-FieldLength',Data) -> 'enc_SN-FieldLength'(Data);
encode_disp('DL-UM-RLC',Data) -> 'enc_DL-UM-RLC'(Data);
encode_disp('UL-UM-RLC',Data) -> 'enc_UL-UM-RLC'(Data);
encode_disp('DL-AM-RLC',Data) -> 'enc_DL-AM-RLC'(Data);
encode_disp('UL-AM-RLC',Data) -> 'enc_UL-AM-RLC'(Data);
encode_disp('RLC-Config',Data) -> 'enc_RLC-Config'(Data);
encode_disp('DRB-ToReleaseList',Data) -> 'enc_DRB-ToReleaseList'(Data);
encode_disp('DRB-ToAddMod',Data) -> 'enc_DRB-ToAddMod'(Data);
encode_disp('DRB-ToAddModList',Data) -> 'enc_DRB-ToAddModList'(Data);
encode_disp('SRB-ToAddMod',Data) -> 'enc_SRB-ToAddMod'(Data);
encode_disp('SRB-ToAddModList',Data) -> 'enc_SRB-ToAddModList'(Data);
encode_disp('RadioResourceConfigDedicated',Data) -> 'enc_RadioResourceConfigDedicated'(Data);
encode_disp('UL-CyclicPrefixLength',Data) -> 'enc_UL-CyclicPrefixLength'(Data);
encode_disp('PCCH-Config',Data) -> 'enc_PCCH-Config'(Data);
encode_disp('BCCH-Config',Data) -> 'enc_BCCH-Config'(Data);
encode_disp('RadioResourceConfigCommon',Data) -> 'enc_RadioResourceConfigCommon'(Data);
encode_disp('RadioResourceConfigCommonSIB',Data) -> 'enc_RadioResourceConfigCommonSIB'(Data);
encode_disp('RACH-ConfigDedicated',Data) -> 'enc_RACH-ConfigDedicated'(Data);
encode_disp('RACH-ConfigCommon',Data) -> 'enc_RACH-ConfigCommon'(Data);
encode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'enc_UL-ReferenceSignalsPUSCH'(Data);
encode_disp('PUSCH-ConfigDedicated',Data) -> 'enc_PUSCH-ConfigDedicated'(Data);
encode_disp('PUSCH-ConfigCommon',Data) -> 'enc_PUSCH-ConfigCommon'(Data);
encode_disp('PUCCH-ConfigDedicated',Data) -> 'enc_PUCCH-ConfigDedicated'(Data);
encode_disp('PUCCH-ConfigCommon',Data) -> 'enc_PUCCH-ConfigCommon'(Data);
encode_disp('PresenceAntennaPort1',Data) -> 'enc_PresenceAntennaPort1'(Data);
encode_disp('PRACH-ConfigInfo',Data) -> 'enc_PRACH-ConfigInfo'(Data);
encode_disp('PRACH-Config',Data) -> 'enc_PRACH-Config'(Data);
encode_disp('PRACH-ConfigSIB',Data) -> 'enc_PRACH-ConfigSIB'(Data);
encode_disp('P-Max',Data) -> 'enc_P-Max'(Data);
encode_disp('PhysicalConfigDedicated',Data) -> 'enc_PhysicalConfigDedicated'(Data);
encode_disp('PHICH-Config',Data) -> 'enc_PHICH-Config'(Data);
encode_disp('PDSCH-ConfigDedicated',Data) -> 'enc_PDSCH-ConfigDedicated'(Data);
encode_disp('PDSCH-ConfigCommon',Data) -> 'enc_PDSCH-ConfigCommon'(Data);
encode_disp('PDCP-Config',Data) -> 'enc_PDCP-Config'(Data);
encode_disp('DRX-Config',Data) -> 'enc_DRX-Config'(Data);
encode_disp('MAC-MainConfig',Data) -> 'enc_MAC-MainConfig'(Data);
encode_disp('LogicalChannelConfig',Data) -> 'enc_LogicalChannelConfig'(Data);
encode_disp('DRB-Identity',Data) -> 'enc_DRB-Identity'(Data);
encode_disp('CQI-ReportPeriodic',Data) -> 'enc_CQI-ReportPeriodic'(Data);
encode_disp('CQI-ReportConfig',Data) -> 'enc_CQI-ReportConfig'(Data);
encode_disp('AntennaInfoDedicated',Data) -> 'enc_AntennaInfoDedicated'(Data);
encode_disp('AntennaInfoCommon',Data) -> 'enc_AntennaInfoCommon'(Data);
encode_disp('SystemInformationBlockType11',Data) -> 'enc_SystemInformationBlockType11'(Data);
encode_disp('SystemInformationBlockType10',Data) -> 'enc_SystemInformationBlockType10'(Data);
encode_disp('SystemInformationBlockType9',Data) -> 'enc_SystemInformationBlockType9'(Data);
encode_disp('BandClassInfoCDMA2000',Data) -> 'enc_BandClassInfoCDMA2000'(Data);
encode_disp('BandClassListCDMA2000',Data) -> 'enc_BandClassListCDMA2000'(Data);
encode_disp('PhysCellIdListCDMA2000',Data) -> 'enc_PhysCellIdListCDMA2000'(Data);
encode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'enc_NeighCellsPerBandclassCDMA2000'(Data);
encode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'enc_NeighCellsPerBandclassListCDMA2000'(Data);
encode_disp('NeighCellCDMA2000',Data) -> 'enc_NeighCellCDMA2000'(Data);
encode_disp('NeighCellListCDMA2000',Data) -> 'enc_NeighCellListCDMA2000'(Data);
encode_disp('CellReselectionParametersCDMA2000',Data) -> 'enc_CellReselectionParametersCDMA2000'(Data);
encode_disp('SystemInformationBlockType8',Data) -> 'enc_SystemInformationBlockType8'(Data);
encode_disp('CarrierFreqsInfoGERAN',Data) -> 'enc_CarrierFreqsInfoGERAN'(Data);
encode_disp('CarrierFreqsInfoListGERAN',Data) -> 'enc_CarrierFreqsInfoListGERAN'(Data);
encode_disp('SystemInformationBlockType7',Data) -> 'enc_SystemInformationBlockType7'(Data);
encode_disp('CarrierFreqUTRA-TDD',Data) -> 'enc_CarrierFreqUTRA-TDD'(Data);
encode_disp('CarrierFreqListUTRA-TDD',Data) -> 'enc_CarrierFreqListUTRA-TDD'(Data);
encode_disp('CarrierFreqUTRA-FDD',Data) -> 'enc_CarrierFreqUTRA-FDD'(Data);
encode_disp('CarrierFreqListUTRA-FDD',Data) -> 'enc_CarrierFreqListUTRA-FDD'(Data);
encode_disp('SystemInformationBlockType6',Data) -> 'enc_SystemInformationBlockType6'(Data);
encode_disp('InterFreqBlackCellList',Data) -> 'enc_InterFreqBlackCellList'(Data);
encode_disp('InterFreqNeighCellInfo',Data) -> 'enc_InterFreqNeighCellInfo'(Data);
encode_disp('InterFreqNeighCellList',Data) -> 'enc_InterFreqNeighCellList'(Data);
encode_disp('InterFreqCarrierFreqInfo',Data) -> 'enc_InterFreqCarrierFreqInfo'(Data);
encode_disp('InterFreqCarrierFreqList',Data) -> 'enc_InterFreqCarrierFreqList'(Data);
encode_disp('SystemInformationBlockType5',Data) -> 'enc_SystemInformationBlockType5'(Data);
encode_disp('IntraFreqBlackCellList',Data) -> 'enc_IntraFreqBlackCellList'(Data);
encode_disp('IntraFreqNeighCellInfo',Data) -> 'enc_IntraFreqNeighCellInfo'(Data);
encode_disp('IntraFreqNeighCellList',Data) -> 'enc_IntraFreqNeighCellList'(Data);
encode_disp('SystemInformationBlockType4',Data) -> 'enc_SystemInformationBlockType4'(Data);
encode_disp('SystemInformationBlockType3',Data) -> 'enc_SystemInformationBlockType3'(Data);
encode_disp('MBSFN-SubframeConfig',Data) -> 'enc_MBSFN-SubframeConfig'(Data);
encode_disp('MBSFN-SubframeConfigList',Data) -> 'enc_MBSFN-SubframeConfigList'(Data);
encode_disp('AC-BarringConfig',Data) -> 'enc_AC-BarringConfig'(Data);
encode_disp('SystemInformationBlockType2',Data) -> 'enc_SystemInformationBlockType2'(Data);
encode_disp('ULInformationTransfer-r8-IEs',Data) -> 'enc_ULInformationTransfer-r8-IEs'(Data);
encode_disp('ULInformationTransfer',Data) -> 'enc_ULInformationTransfer'(Data);
encode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'enc_ULHandoverPreparationTransfer-r8-IEs'(Data);
encode_disp('ULHandoverPreparationTransfer',Data) -> 'enc_ULHandoverPreparationTransfer'(Data);
encode_disp('UECapabilityInformation-r8-IEs',Data) -> 'enc_UECapabilityInformation-r8-IEs'(Data);
encode_disp('UECapabilityInformation',Data) -> 'enc_UECapabilityInformation'(Data);
encode_disp('UE-CapabilityRequest',Data) -> 'enc_UE-CapabilityRequest'(Data);
encode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'enc_UECapabilityEnquiry-r8-IEs'(Data);
encode_disp('UECapabilityEnquiry',Data) -> 'enc_UECapabilityEnquiry'(Data);
encode_disp('SIB-Type',Data) -> 'enc_SIB-Type'(Data);
encode_disp('SIB-MappingInfo',Data) -> 'enc_SIB-MappingInfo'(Data);
encode_disp('SchedulingInfo',Data) -> 'enc_SchedulingInfo'(Data);
encode_disp('SchedulingInfoList',Data) -> 'enc_SchedulingInfoList'(Data);
encode_disp('PLMN-IdentityInfo',Data) -> 'enc_PLMN-IdentityInfo'(Data);
encode_disp('PLMN-IdentityList',Data) -> 'enc_PLMN-IdentityList'(Data);
encode_disp('SystemInformationBlockType1',Data) -> 'enc_SystemInformationBlockType1'(Data);
encode_disp('SystemInformation-r8-IEs',Data) -> 'enc_SystemInformation-r8-IEs'(Data);
encode_disp('SystemInformation',Data) -> 'enc_SystemInformation'(Data);
encode_disp('SecurityModeFailure-r8-IEs',Data) -> 'enc_SecurityModeFailure-r8-IEs'(Data);
encode_disp('SecurityModeFailure',Data) -> 'enc_SecurityModeFailure'(Data);
encode_disp('SecurityModeComplete-r8-IEs',Data) -> 'enc_SecurityModeComplete-r8-IEs'(Data);
encode_disp('SecurityModeComplete',Data) -> 'enc_SecurityModeComplete'(Data);
encode_disp('SecurityConfigSMC',Data) -> 'enc_SecurityConfigSMC'(Data);
encode_disp('SecurityModeCommand-r8-IEs',Data) -> 'enc_SecurityModeCommand-r8-IEs'(Data);
encode_disp('SecurityModeCommand',Data) -> 'enc_SecurityModeCommand'(Data);
encode_disp('RegisteredMME',Data) -> 'enc_RegisteredMME'(Data);
encode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'enc_RRCConnectionSetupComplete-r8-IEs'(Data);
encode_disp('RRCConnectionSetupComplete',Data) -> 'enc_RRCConnectionSetupComplete'(Data);
encode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'enc_RRCConnectionSetup-r8-IEs'(Data);
encode_disp('RRCConnectionSetup',Data) -> 'enc_RRCConnectionSetup'(Data);
encode_disp('EstablishmentCause',Data) -> 'enc_EstablishmentCause'(Data);
encode_disp('InitialUE-Identity',Data) -> 'enc_InitialUE-Identity'(Data);
encode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'enc_RRCConnectionRequest-r8-IEs'(Data);
encode_disp('RRCConnectionRequest',Data) -> 'enc_RRCConnectionRequest'(Data);
encode_disp('BandClassPriority1XRTT',Data) -> 'enc_BandClassPriority1XRTT'(Data);
encode_disp('BandClassPriorityList1XRTT',Data) -> 'enc_BandClassPriorityList1XRTT'(Data);
encode_disp('BandClassPriorityHRPD',Data) -> 'enc_BandClassPriorityHRPD'(Data);
encode_disp('BandClassPriorityListHRPD',Data) -> 'enc_BandClassPriorityListHRPD'(Data);
encode_disp('FreqPriorityUTRA-TDD',Data) -> 'enc_FreqPriorityUTRA-TDD'(Data);
encode_disp('FreqPriorityListUTRA-TDD',Data) -> 'enc_FreqPriorityListUTRA-TDD'(Data);
encode_disp('FreqPriorityUTRA-FDD',Data) -> 'enc_FreqPriorityUTRA-FDD'(Data);
encode_disp('FreqPriorityListUTRA-FDD',Data) -> 'enc_FreqPriorityListUTRA-FDD'(Data);
encode_disp('FreqsPriorityGERAN',Data) -> 'enc_FreqsPriorityGERAN'(Data);
encode_disp('FreqsPriorityListGERAN',Data) -> 'enc_FreqsPriorityListGERAN'(Data);
encode_disp('FreqPriorityEUTRA',Data) -> 'enc_FreqPriorityEUTRA'(Data);
encode_disp('FreqPriorityListEUTRA',Data) -> 'enc_FreqPriorityListEUTRA'(Data);
encode_disp('IdleModeMobilityControlInfo',Data) -> 'enc_IdleModeMobilityControlInfo'(Data);
encode_disp('RedirectedCarrierInfo',Data) -> 'enc_RedirectedCarrierInfo'(Data);
encode_disp('ReleaseCause',Data) -> 'enc_ReleaseCause'(Data);
encode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'enc_RRCConnectionRelease-r8-IEs'(Data);
encode_disp('RRCConnectionRelease',Data) -> 'enc_RRCConnectionRelease'(Data);
encode_disp('RRCConnectionReject-r8-IEs',Data) -> 'enc_RRCConnectionReject-r8-IEs'(Data);
encode_disp('RRCConnectionReject',Data) -> 'enc_RRCConnectionReject'(Data);
encode_disp('ReestablishmentCause',Data) -> 'enc_ReestablishmentCause'(Data);
encode_disp('ReestabUE-Identity',Data) -> 'enc_ReestabUE-Identity'(Data);
encode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentRequest',Data) -> 'enc_RRCConnectionReestablishmentRequest'(Data);
encode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentReject-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentReject',Data) -> 'enc_RRCConnectionReestablishmentReject'(Data);
encode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentComplete',Data) -> 'enc_RRCConnectionReestablishmentComplete'(Data);
encode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'enc_RRCConnectionReestablishment-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishment',Data) -> 'enc_RRCConnectionReestablishment'(Data);
encode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Data);
encode_disp('RRCConnectionReconfigurationComplete',Data) -> 'enc_RRCConnectionReconfigurationComplete'(Data);
encode_disp('SecurityConfigHO',Data) -> 'enc_SecurityConfigHO'(Data);
encode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'enc_RRCConnectionReconfiguration-r8-IEs'(Data);
encode_disp('RRCConnectionReconfiguration',Data) -> 'enc_RRCConnectionReconfiguration'(Data);
encode_disp('IMSI-Digit',Data) -> 'enc_IMSI-Digit'(Data);
encode_disp('IMSI',Data) -> 'enc_IMSI'(Data);
encode_disp('PagingUE-Identity',Data) -> 'enc_PagingUE-Identity'(Data);
encode_disp('PagingRecord',Data) -> 'enc_PagingRecord'(Data);
encode_disp('PagingRecordList',Data) -> 'enc_PagingRecordList'(Data);
encode_disp('Paging',Data) -> 'enc_Paging'(Data);
encode_disp('SystemInfoListGERAN',Data) -> 'enc_SystemInfoListGERAN'(Data);
encode_disp('SI-OrPSI-GERAN',Data) -> 'enc_SI-OrPSI-GERAN'(Data);
encode_disp('CellChangeOrder',Data) -> 'enc_CellChangeOrder'(Data);
encode_disp('Handover',Data) -> 'enc_Handover'(Data);
encode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'enc_MobilityFromEUTRACommand-r8-IEs'(Data);
encode_disp('MobilityFromEUTRACommand',Data) -> 'enc_MobilityFromEUTRACommand'(Data);
encode_disp('MeasurementReport-r8-IEs',Data) -> 'enc_MeasurementReport-r8-IEs'(Data);
encode_disp('MeasurementReport',Data) -> 'enc_MeasurementReport'(Data);
encode_disp('MasterInformationBlock',Data) -> 'enc_MasterInformationBlock'(Data);
encode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data);
encode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'enc_HandoverFromEUTRAPreparationRequest'(Data);
encode_disp('DLInformationTransfer-r8-IEs',Data) -> 'enc_DLInformationTransfer-r8-IEs'(Data);
encode_disp('DLInformationTransfer',Data) -> 'enc_DLInformationTransfer'(Data);
encode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Data);
encode_disp('CSFBParametersResponseCDMA2000',Data) -> 'enc_CSFBParametersResponseCDMA2000'(Data);
encode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Data);
encode_disp('CSFBParametersRequestCDMA2000',Data) -> 'enc_CSFBParametersRequestCDMA2000'(Data);
encode_disp('DRB-CountInfo',Data) -> 'enc_DRB-CountInfo'(Data);
encode_disp('DRB-CountInfoList',Data) -> 'enc_DRB-CountInfoList'(Data);
encode_disp('CounterCheckResponse-r8-IEs',Data) -> 'enc_CounterCheckResponse-r8-IEs'(Data);
encode_disp('CounterCheckResponse',Data) -> 'enc_CounterCheckResponse'(Data);
encode_disp('DRB-CountMSB-Info',Data) -> 'enc_DRB-CountMSB-Info'(Data);
encode_disp('DRB-CountMSB-InfoList',Data) -> 'enc_DRB-CountMSB-InfoList'(Data);
encode_disp('CounterCheck-r8-IEs',Data) -> 'enc_CounterCheck-r8-IEs'(Data);
encode_disp('CounterCheck',Data) -> 'enc_CounterCheck'(Data);
encode_disp('UL-DCCH-MessageType',Data) -> 'enc_UL-DCCH-MessageType'(Data);
encode_disp('UL-DCCH-Message',Data) -> 'enc_UL-DCCH-Message'(Data);
encode_disp('UL-CCCH-MessageType',Data) -> 'enc_UL-CCCH-MessageType'(Data);
encode_disp('UL-CCCH-Message',Data) -> 'enc_UL-CCCH-Message'(Data);
encode_disp('DL-DCCH-MessageType',Data) -> 'enc_DL-DCCH-MessageType'(Data);
encode_disp('DL-DCCH-Message',Data) -> 'enc_DL-DCCH-Message'(Data);
encode_disp('DL-CCCH-MessageType',Data) -> 'enc_DL-CCCH-MessageType'(Data);
encode_disp('DL-CCCH-Message',Data) -> 'enc_DL-CCCH-Message'(Data);
encode_disp('PCCH-MessageType',Data) -> 'enc_PCCH-MessageType'(Data);
encode_disp('PCCH-Message',Data) -> 'enc_PCCH-Message'(Data);
encode_disp('BCCH-DL-SCH-MessageType',Data) -> 'enc_BCCH-DL-SCH-MessageType'(Data);
encode_disp('BCCH-DL-SCH-Message',Data) -> 'enc_BCCH-DL-SCH-Message'(Data);
encode_disp('BCCH-BCH-MessageType',Data) -> 'enc_BCCH-BCH-MessageType'(Data);
encode_disp('BCCH-BCH-Message',Data) -> 'enc_BCCH-BCH-Message'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('UE-TimersAndConstants',Data) -> 'dec_UE-TimersAndConstants'(Data);
decode_disp('SupportedBandList1XRTT',Data) -> 'dec_SupportedBandList1XRTT'(Data);
decode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'dec_IRAT-ParametersCDMA2000-1XRTT'(Data);
decode_disp('SupportedBandListHRPD',Data) -> 'dec_SupportedBandListHRPD'(Data);
decode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'dec_IRAT-ParametersCDMA2000-HRPD'(Data);
decode_disp('SupportedBandGERAN',Data) -> 'dec_SupportedBandGERAN'(Data);
decode_disp('SupportedBandListGERAN',Data) -> 'dec_SupportedBandListGERAN'(Data);
decode_disp('IRAT-ParametersGERAN',Data) -> 'dec_IRAT-ParametersGERAN'(Data);
decode_disp('SupportedBandUTRA-TDD768',Data) -> 'dec_SupportedBandUTRA-TDD768'(Data);
decode_disp('SupportedBandListUTRA-TDD768',Data) -> 'dec_SupportedBandListUTRA-TDD768'(Data);
decode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'dec_IRAT-ParametersUTRA-TDD768'(Data);
decode_disp('SupportedBandUTRA-TDD384',Data) -> 'dec_SupportedBandUTRA-TDD384'(Data);
decode_disp('SupportedBandListUTRA-TDD384',Data) -> 'dec_SupportedBandListUTRA-TDD384'(Data);
decode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'dec_IRAT-ParametersUTRA-TDD384'(Data);
decode_disp('SupportedBandUTRA-TDD128',Data) -> 'dec_SupportedBandUTRA-TDD128'(Data);
decode_disp('SupportedBandListUTRA-TDD128',Data) -> 'dec_SupportedBandListUTRA-TDD128'(Data);
decode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'dec_IRAT-ParametersUTRA-TDD128'(Data);
decode_disp('SupportedBandUTRA-FDD',Data) -> 'dec_SupportedBandUTRA-FDD'(Data);
decode_disp('SupportedBandListUTRA-FDD',Data) -> 'dec_SupportedBandListUTRA-FDD'(Data);
decode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'dec_IRAT-ParametersUTRA-FDD'(Data);
decode_disp('InterRAT-BandInfo',Data) -> 'dec_InterRAT-BandInfo'(Data);
decode_disp('InterRAT-BandList',Data) -> 'dec_InterRAT-BandList'(Data);
decode_disp('InterFreqBandInfo',Data) -> 'dec_InterFreqBandInfo'(Data);
decode_disp('InterFreqBandList',Data) -> 'dec_InterFreqBandList'(Data);
decode_disp('BandInfoEUTRA',Data) -> 'dec_BandInfoEUTRA'(Data);
decode_disp('BandListEUTRA',Data) -> 'dec_BandListEUTRA'(Data);
decode_disp('MeasParameters',Data) -> 'dec_MeasParameters'(Data);
decode_disp('SupportedBandEUTRA',Data) -> 'dec_SupportedBandEUTRA'(Data);
decode_disp('SupportedBandListEUTRA',Data) -> 'dec_SupportedBandListEUTRA'(Data);
decode_disp('RF-Parameters',Data) -> 'dec_RF-Parameters'(Data);
decode_disp('PhyLayerParameters',Data) -> 'dec_PhyLayerParameters'(Data);
decode_disp('PDCP-Parameters',Data) -> 'dec_PDCP-Parameters'(Data);
decode_disp('AccessStratumRelease',Data) -> 'dec_AccessStratumRelease'(Data);
decode_disp('UE-EUTRA-Capability',Data) -> 'dec_UE-EUTRA-Capability'(Data);
decode_disp('UE-CapabilityRAT-Container',Data) -> 'dec_UE-CapabilityRAT-Container'(Data);
decode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'dec_UE-CapabilityRAT-ContainerList'(Data);
decode_disp('S-TMSI',Data) -> 'dec_S-TMSI'(Data);
decode_disp('RRC-TransactionIdentifier',Data) -> 'dec_RRC-TransactionIdentifier'(Data);
decode_disp('RAT-Type',Data) -> 'dec_RAT-Type'(Data);
decode_disp('RAND-CDMA2000',Data) -> 'dec_RAND-CDMA2000'(Data);
decode_disp('NeighCellConfig',Data) -> 'dec_NeighCellConfig'(Data);
decode_disp('MMEC',Data) -> 'dec_MMEC'(Data);
decode_disp('FilterCoefficient',Data) -> 'dec_FilterCoefficient'(Data);
decode_disp('DedicatedInfoNAS',Data) -> 'dec_DedicatedInfoNAS'(Data);
decode_disp('DedicatedInfoCDMA2000',Data) -> 'dec_DedicatedInfoCDMA2000'(Data);
decode_disp('C-RNTI',Data) -> 'dec_C-RNTI'(Data);
decode_disp('TimeToTrigger',Data) -> 'dec_TimeToTrigger'(Data);
decode_disp('RSRQ-Range',Data) -> 'dec_RSRQ-Range'(Data);
decode_disp('RSRP-Range',Data) -> 'dec_RSRP-Range'(Data);
decode_disp('ReportInterval',Data) -> 'dec_ReportInterval'(Data);
decode_disp('ReportConfigToAddMod',Data) -> 'dec_ReportConfigToAddMod'(Data);
decode_disp('ReportConfigToAddModList',Data) -> 'dec_ReportConfigToAddModList'(Data);
decode_disp('ThresholdCDMA2000',Data) -> 'dec_ThresholdCDMA2000'(Data);
decode_disp('ThresholdGERAN',Data) -> 'dec_ThresholdGERAN'(Data);
decode_disp('ThresholdUTRA',Data) -> 'dec_ThresholdUTRA'(Data);
decode_disp('ReportConfigInterRAT',Data) -> 'dec_ReportConfigInterRAT'(Data);
decode_disp('ReportConfigId',Data) -> 'dec_ReportConfigId'(Data);
decode_disp('ThresholdEUTRA',Data) -> 'dec_ThresholdEUTRA'(Data);
decode_disp('ReportConfigEUTRA',Data) -> 'dec_ReportConfigEUTRA'(Data);
decode_disp('QuantityConfigCDMA2000',Data) -> 'dec_QuantityConfigCDMA2000'(Data);
decode_disp('QuantityConfigGERAN',Data) -> 'dec_QuantityConfigGERAN'(Data);
decode_disp('QuantityConfigUTRA',Data) -> 'dec_QuantityConfigUTRA'(Data);
decode_disp('QuantityConfigEUTRA',Data) -> 'dec_QuantityConfigEUTRA'(Data);
decode_disp('QuantityConfig',Data) -> 'dec_QuantityConfig'(Data);
decode_disp('PLMN-IdentityList2',Data) -> 'dec_PLMN-IdentityList2'(Data);
decode_disp('MeasResultCDMA2000',Data) -> 'dec_MeasResultCDMA2000'(Data);
decode_disp('MeasResultListCDMA2000',Data) -> 'dec_MeasResultListCDMA2000'(Data);
decode_disp('MeasResultsCDMA2000',Data) -> 'dec_MeasResultsCDMA2000'(Data);
decode_disp('MeasResultGERAN',Data) -> 'dec_MeasResultGERAN'(Data);
decode_disp('MeasResultListGERAN',Data) -> 'dec_MeasResultListGERAN'(Data);
decode_disp('MeasResultUTRA',Data) -> 'dec_MeasResultUTRA'(Data);
decode_disp('MeasResultListUTRA',Data) -> 'dec_MeasResultListUTRA'(Data);
decode_disp('MeasResultEUTRA',Data) -> 'dec_MeasResultEUTRA'(Data);
decode_disp('MeasResultListEUTRA',Data) -> 'dec_MeasResultListEUTRA'(Data);
decode_disp('MeasResults',Data) -> 'dec_MeasResults'(Data);
decode_disp('CellsToAddModUTRA-TDD',Data) -> 'dec_CellsToAddModUTRA-TDD'(Data);
decode_disp('CellsToAddModListUTRA-TDD',Data) -> 'dec_CellsToAddModListUTRA-TDD'(Data);
decode_disp('CellsToAddModUTRA-FDD',Data) -> 'dec_CellsToAddModUTRA-FDD'(Data);
decode_disp('CellsToAddModListUTRA-FDD',Data) -> 'dec_CellsToAddModListUTRA-FDD'(Data);
decode_disp('MeasObjectUTRA',Data) -> 'dec_MeasObjectUTRA'(Data);
decode_disp('MeasObjectToAddMod',Data) -> 'dec_MeasObjectToAddMod'(Data);
decode_disp('MeasObjectToAddModList',Data) -> 'dec_MeasObjectToAddModList'(Data);
decode_disp('MeasObjectId',Data) -> 'dec_MeasObjectId'(Data);
decode_disp('MeasObjectGERAN',Data) -> 'dec_MeasObjectGERAN'(Data);
decode_disp('BlackCellsToAddMod',Data) -> 'dec_BlackCellsToAddMod'(Data);
decode_disp('BlackCellsToAddModList',Data) -> 'dec_BlackCellsToAddModList'(Data);
decode_disp('CellsToAddMod',Data) -> 'dec_CellsToAddMod'(Data);
decode_disp('CellsToAddModList',Data) -> 'dec_CellsToAddModList'(Data);
decode_disp('MeasObjectEUTRA',Data) -> 'dec_MeasObjectEUTRA'(Data);
decode_disp('CellsToAddModCDMA2000',Data) -> 'dec_CellsToAddModCDMA2000'(Data);
decode_disp('CellsToAddModListCDMA2000',Data) -> 'dec_CellsToAddModListCDMA2000'(Data);
decode_disp('MeasObjectCDMA2000',Data) -> 'dec_MeasObjectCDMA2000'(Data);
decode_disp('MeasIdToAddMod',Data) -> 'dec_MeasIdToAddMod'(Data);
decode_disp('MeasIdToAddModList',Data) -> 'dec_MeasIdToAddModList'(Data);
decode_disp('MeasId',Data) -> 'dec_MeasId'(Data);
decode_disp('MeasGapConfig',Data) -> 'dec_MeasGapConfig'(Data);
decode_disp('ReportConfigToRemoveList',Data) -> 'dec_ReportConfigToRemoveList'(Data);
decode_disp('MeasObjectToRemoveList',Data) -> 'dec_MeasObjectToRemoveList'(Data);
decode_disp('MeasIdToRemoveList',Data) -> 'dec_MeasIdToRemoveList'(Data);
decode_disp('MeasConfig',Data) -> 'dec_MeasConfig'(Data);
decode_disp('Hysteresis',Data) -> 'dec_Hysteresis'(Data);
decode_disp('AllowedMeasBandwidth',Data) -> 'dec_AllowedMeasBandwidth'(Data);
decode_disp('T-Reselection',Data) -> 'dec_T-Reselection'(Data);
decode_disp('TrackingAreaCode',Data) -> 'dec_TrackingAreaCode'(Data);
decode_disp('SystemTimeInfoCDMA2000',Data) -> 'dec_SystemTimeInfoCDMA2000'(Data);
decode_disp('SpeedStateScaleFactors',Data) -> 'dec_SpeedStateScaleFactors'(Data);
decode_disp('ReselectionThreshold',Data) -> 'dec_ReselectionThreshold'(Data);
decode_disp('Q-OffsetRangeInterRAT',Data) -> 'dec_Q-OffsetRangeInterRAT'(Data);
decode_disp('Q-OffsetRange',Data) -> 'dec_Q-OffsetRange'(Data);
decode_disp('Q-RxLevMin',Data) -> 'dec_Q-RxLevMin'(Data);
decode_disp('PreRegistrationZoneIdHRPD',Data) -> 'dec_PreRegistrationZoneIdHRPD'(Data);
decode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'dec_SecondaryPreRegistrationZoneIdListHRPD'(Data);
decode_disp('PreRegistrationInfoHRPD',Data) -> 'dec_PreRegistrationInfoHRPD'(Data);
decode_disp('MCC-MNC-Digit',Data) -> 'dec_MCC-MNC-Digit'(Data);
decode_disp('MNC',Data) -> 'dec_MNC'(Data);
decode_disp('MCC',Data) -> 'dec_MCC'(Data);
decode_disp('PLMN-Identity',Data) -> 'dec_PLMN-Identity'(Data);
decode_disp('PhysCellIdUTRA-TDD',Data) -> 'dec_PhysCellIdUTRA-TDD'(Data);
decode_disp('PhysCellIdUTRA-FDD',Data) -> 'dec_PhysCellIdUTRA-FDD'(Data);
decode_disp('PhysCellIdGERAN',Data) -> 'dec_PhysCellIdGERAN'(Data);
decode_disp('PhysCellIdCDMA2000',Data) -> 'dec_PhysCellIdCDMA2000'(Data);
decode_disp('PhysCellIdRange',Data) -> 'dec_PhysCellIdRange'(Data);
decode_disp('PhysCellId',Data) -> 'dec_PhysCellId'(Data);
decode_disp('MobilityStateParameters',Data) -> 'dec_MobilityStateParameters'(Data);
decode_disp('MobilityParametersCDMA2000',Data) -> 'dec_MobilityParametersCDMA2000'(Data);
decode_disp('CarrierFreqEUTRA',Data) -> 'dec_CarrierFreqEUTRA'(Data);
decode_disp('CarrierBandwidthEUTRA',Data) -> 'dec_CarrierBandwidthEUTRA'(Data);
decode_disp('MobilityControlInfo',Data) -> 'dec_MobilityControlInfo'(Data);
decode_disp('CellGlobalIdCDMA2000',Data) -> 'dec_CellGlobalIdCDMA2000'(Data);
decode_disp('CellGlobalIdGERAN',Data) -> 'dec_CellGlobalIdGERAN'(Data);
decode_disp('CellGlobalIdUTRA',Data) -> 'dec_CellGlobalIdUTRA'(Data);
decode_disp('CellGlobalIdEUTRA',Data) -> 'dec_CellGlobalIdEUTRA'(Data);
decode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'dec_CSFB-RegistrationParam1XRTT'(Data);
decode_disp('CellReselectionPriority',Data) -> 'dec_CellReselectionPriority'(Data);
decode_disp('CellIndex',Data) -> 'dec_CellIndex'(Data);
decode_disp('CellIndexList',Data) -> 'dec_CellIndexList'(Data);
decode_disp('CellIdentity',Data) -> 'dec_CellIdentity'(Data);
decode_disp('CDMA2000-Type',Data) -> 'dec_CDMA2000-Type'(Data);
decode_disp('ExplicitListOfARFCNs',Data) -> 'dec_ExplicitListOfARFCNs'(Data);
decode_disp('CarrierFreqsGERAN',Data) -> 'dec_CarrierFreqsGERAN'(Data);
decode_disp('CarrierFreqGERAN',Data) -> 'dec_CarrierFreqGERAN'(Data);
decode_disp('CarrierFreqCDMA2000',Data) -> 'dec_CarrierFreqCDMA2000'(Data);
decode_disp('BandIndicatorGERAN',Data) -> 'dec_BandIndicatorGERAN'(Data);
decode_disp('BandclassCDMA2000',Data) -> 'dec_BandclassCDMA2000'(Data);
decode_disp('ARFCN-ValueUTRA',Data) -> 'dec_ARFCN-ValueUTRA'(Data);
decode_disp('ARFCN-ValueGERAN',Data) -> 'dec_ARFCN-ValueGERAN'(Data);
decode_disp('ARFCN-ValueEUTRA',Data) -> 'dec_ARFCN-ValueEUTRA'(Data);
decode_disp('ARFCN-ValueCDMA2000',Data) -> 'dec_ARFCN-ValueCDMA2000'(Data);
decode_disp('AdditionalSpectrumEmission',Data) -> 'dec_AdditionalSpectrumEmission'(Data);
decode_disp('ShortMAC-I',Data) -> 'dec_ShortMAC-I'(Data);
decode_disp('SecurityAlgorithmConfig',Data) -> 'dec_SecurityAlgorithmConfig'(Data);
decode_disp('NextHopChainingCount',Data) -> 'dec_NextHopChainingCount'(Data);
decode_disp('DeltaFList-PUCCH',Data) -> 'dec_DeltaFList-PUCCH'(Data);
decode_disp('UplinkPowerControlDedicated',Data) -> 'dec_UplinkPowerControlDedicated'(Data);
decode_disp('UplinkPowerControlCommon',Data) -> 'dec_UplinkPowerControlCommon'(Data);
decode_disp('TPC-Index',Data) -> 'dec_TPC-Index'(Data);
decode_disp('TPC-PDCCH-Config',Data) -> 'dec_TPC-PDCCH-Config'(Data);
decode_disp('TimeAlignmentTimer',Data) -> 'dec_TimeAlignmentTimer'(Data);
decode_disp('TDD-Config',Data) -> 'dec_TDD-Config'(Data);
decode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'dec_N1-PUCCH-AN-PersistentList'(Data);
decode_disp('SPS-ConfigUL',Data) -> 'dec_SPS-ConfigUL'(Data);
decode_disp('SPS-ConfigDL',Data) -> 'dec_SPS-ConfigDL'(Data);
decode_disp('SPS-Config',Data) -> 'dec_SPS-Config'(Data);
decode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'dec_SoundingRS-UL-ConfigDedicated'(Data);
decode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'dec_SoundingRS-UL-ConfigCommon'(Data);
decode_disp('SchedulingRequestConfig',Data) -> 'dec_SchedulingRequestConfig'(Data);
decode_disp('T-StatusProhibit',Data) -> 'dec_T-StatusProhibit'(Data);
decode_disp('T-Reordering',Data) -> 'dec_T-Reordering'(Data);
decode_disp('PollByte',Data) -> 'dec_PollByte'(Data);
decode_disp('PollPDU',Data) -> 'dec_PollPDU'(Data);
decode_disp('T-PollRetransmit',Data) -> 'dec_T-PollRetransmit'(Data);
decode_disp('SN-FieldLength',Data) -> 'dec_SN-FieldLength'(Data);
decode_disp('DL-UM-RLC',Data) -> 'dec_DL-UM-RLC'(Data);
decode_disp('UL-UM-RLC',Data) -> 'dec_UL-UM-RLC'(Data);
decode_disp('DL-AM-RLC',Data) -> 'dec_DL-AM-RLC'(Data);
decode_disp('UL-AM-RLC',Data) -> 'dec_UL-AM-RLC'(Data);
decode_disp('RLC-Config',Data) -> 'dec_RLC-Config'(Data);
decode_disp('DRB-ToReleaseList',Data) -> 'dec_DRB-ToReleaseList'(Data);
decode_disp('DRB-ToAddMod',Data) -> 'dec_DRB-ToAddMod'(Data);
decode_disp('DRB-ToAddModList',Data) -> 'dec_DRB-ToAddModList'(Data);
decode_disp('SRB-ToAddMod',Data) -> 'dec_SRB-ToAddMod'(Data);
decode_disp('SRB-ToAddModList',Data) -> 'dec_SRB-ToAddModList'(Data);
decode_disp('RadioResourceConfigDedicated',Data) -> 'dec_RadioResourceConfigDedicated'(Data);
decode_disp('UL-CyclicPrefixLength',Data) -> 'dec_UL-CyclicPrefixLength'(Data);
decode_disp('PCCH-Config',Data) -> 'dec_PCCH-Config'(Data);
decode_disp('BCCH-Config',Data) -> 'dec_BCCH-Config'(Data);
decode_disp('RadioResourceConfigCommon',Data) -> 'dec_RadioResourceConfigCommon'(Data);
decode_disp('RadioResourceConfigCommonSIB',Data) -> 'dec_RadioResourceConfigCommonSIB'(Data);
decode_disp('RACH-ConfigDedicated',Data) -> 'dec_RACH-ConfigDedicated'(Data);
decode_disp('RACH-ConfigCommon',Data) -> 'dec_RACH-ConfigCommon'(Data);
decode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'dec_UL-ReferenceSignalsPUSCH'(Data);
decode_disp('PUSCH-ConfigDedicated',Data) -> 'dec_PUSCH-ConfigDedicated'(Data);
decode_disp('PUSCH-ConfigCommon',Data) -> 'dec_PUSCH-ConfigCommon'(Data);
decode_disp('PUCCH-ConfigDedicated',Data) -> 'dec_PUCCH-ConfigDedicated'(Data);
decode_disp('PUCCH-ConfigCommon',Data) -> 'dec_PUCCH-ConfigCommon'(Data);
decode_disp('PresenceAntennaPort1',Data) -> 'dec_PresenceAntennaPort1'(Data);
decode_disp('PRACH-ConfigInfo',Data) -> 'dec_PRACH-ConfigInfo'(Data);
decode_disp('PRACH-Config',Data) -> 'dec_PRACH-Config'(Data);
decode_disp('PRACH-ConfigSIB',Data) -> 'dec_PRACH-ConfigSIB'(Data);
decode_disp('P-Max',Data) -> 'dec_P-Max'(Data);
decode_disp('PhysicalConfigDedicated',Data) -> 'dec_PhysicalConfigDedicated'(Data);
decode_disp('PHICH-Config',Data) -> 'dec_PHICH-Config'(Data);
decode_disp('PDSCH-ConfigDedicated',Data) -> 'dec_PDSCH-ConfigDedicated'(Data);
decode_disp('PDSCH-ConfigCommon',Data) -> 'dec_PDSCH-ConfigCommon'(Data);
decode_disp('PDCP-Config',Data) -> 'dec_PDCP-Config'(Data);
decode_disp('DRX-Config',Data) -> 'dec_DRX-Config'(Data);
decode_disp('MAC-MainConfig',Data) -> 'dec_MAC-MainConfig'(Data);
decode_disp('LogicalChannelConfig',Data) -> 'dec_LogicalChannelConfig'(Data);
decode_disp('DRB-Identity',Data) -> 'dec_DRB-Identity'(Data);
decode_disp('CQI-ReportPeriodic',Data) -> 'dec_CQI-ReportPeriodic'(Data);
decode_disp('CQI-ReportConfig',Data) -> 'dec_CQI-ReportConfig'(Data);
decode_disp('AntennaInfoDedicated',Data) -> 'dec_AntennaInfoDedicated'(Data);
decode_disp('AntennaInfoCommon',Data) -> 'dec_AntennaInfoCommon'(Data);
decode_disp('SystemInformationBlockType11',Data) -> 'dec_SystemInformationBlockType11'(Data);
decode_disp('SystemInformationBlockType10',Data) -> 'dec_SystemInformationBlockType10'(Data);
decode_disp('SystemInformationBlockType9',Data) -> 'dec_SystemInformationBlockType9'(Data);
decode_disp('BandClassInfoCDMA2000',Data) -> 'dec_BandClassInfoCDMA2000'(Data);
decode_disp('BandClassListCDMA2000',Data) -> 'dec_BandClassListCDMA2000'(Data);
decode_disp('PhysCellIdListCDMA2000',Data) -> 'dec_PhysCellIdListCDMA2000'(Data);
decode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'dec_NeighCellsPerBandclassCDMA2000'(Data);
decode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'dec_NeighCellsPerBandclassListCDMA2000'(Data);
decode_disp('NeighCellCDMA2000',Data) -> 'dec_NeighCellCDMA2000'(Data);
decode_disp('NeighCellListCDMA2000',Data) -> 'dec_NeighCellListCDMA2000'(Data);
decode_disp('CellReselectionParametersCDMA2000',Data) -> 'dec_CellReselectionParametersCDMA2000'(Data);
decode_disp('SystemInformationBlockType8',Data) -> 'dec_SystemInformationBlockType8'(Data);
decode_disp('CarrierFreqsInfoGERAN',Data) -> 'dec_CarrierFreqsInfoGERAN'(Data);
decode_disp('CarrierFreqsInfoListGERAN',Data) -> 'dec_CarrierFreqsInfoListGERAN'(Data);
decode_disp('SystemInformationBlockType7',Data) -> 'dec_SystemInformationBlockType7'(Data);
decode_disp('CarrierFreqUTRA-TDD',Data) -> 'dec_CarrierFreqUTRA-TDD'(Data);
decode_disp('CarrierFreqListUTRA-TDD',Data) -> 'dec_CarrierFreqListUTRA-TDD'(Data);
decode_disp('CarrierFreqUTRA-FDD',Data) -> 'dec_CarrierFreqUTRA-FDD'(Data);
decode_disp('CarrierFreqListUTRA-FDD',Data) -> 'dec_CarrierFreqListUTRA-FDD'(Data);
decode_disp('SystemInformationBlockType6',Data) -> 'dec_SystemInformationBlockType6'(Data);
decode_disp('InterFreqBlackCellList',Data) -> 'dec_InterFreqBlackCellList'(Data);
decode_disp('InterFreqNeighCellInfo',Data) -> 'dec_InterFreqNeighCellInfo'(Data);
decode_disp('InterFreqNeighCellList',Data) -> 'dec_InterFreqNeighCellList'(Data);
decode_disp('InterFreqCarrierFreqInfo',Data) -> 'dec_InterFreqCarrierFreqInfo'(Data);
decode_disp('InterFreqCarrierFreqList',Data) -> 'dec_InterFreqCarrierFreqList'(Data);
decode_disp('SystemInformationBlockType5',Data) -> 'dec_SystemInformationBlockType5'(Data);
decode_disp('IntraFreqBlackCellList',Data) -> 'dec_IntraFreqBlackCellList'(Data);
decode_disp('IntraFreqNeighCellInfo',Data) -> 'dec_IntraFreqNeighCellInfo'(Data);
decode_disp('IntraFreqNeighCellList',Data) -> 'dec_IntraFreqNeighCellList'(Data);
decode_disp('SystemInformationBlockType4',Data) -> 'dec_SystemInformationBlockType4'(Data);
decode_disp('SystemInformationBlockType3',Data) -> 'dec_SystemInformationBlockType3'(Data);
decode_disp('MBSFN-SubframeConfig',Data) -> 'dec_MBSFN-SubframeConfig'(Data);
decode_disp('MBSFN-SubframeConfigList',Data) -> 'dec_MBSFN-SubframeConfigList'(Data);
decode_disp('AC-BarringConfig',Data) -> 'dec_AC-BarringConfig'(Data);
decode_disp('SystemInformationBlockType2',Data) -> 'dec_SystemInformationBlockType2'(Data);
decode_disp('ULInformationTransfer-r8-IEs',Data) -> 'dec_ULInformationTransfer-r8-IEs'(Data);
decode_disp('ULInformationTransfer',Data) -> 'dec_ULInformationTransfer'(Data);
decode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'dec_ULHandoverPreparationTransfer-r8-IEs'(Data);
decode_disp('ULHandoverPreparationTransfer',Data) -> 'dec_ULHandoverPreparationTransfer'(Data);
decode_disp('UECapabilityInformation-r8-IEs',Data) -> 'dec_UECapabilityInformation-r8-IEs'(Data);
decode_disp('UECapabilityInformation',Data) -> 'dec_UECapabilityInformation'(Data);
decode_disp('UE-CapabilityRequest',Data) -> 'dec_UE-CapabilityRequest'(Data);
decode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'dec_UECapabilityEnquiry-r8-IEs'(Data);
decode_disp('UECapabilityEnquiry',Data) -> 'dec_UECapabilityEnquiry'(Data);
decode_disp('SIB-Type',Data) -> 'dec_SIB-Type'(Data);
decode_disp('SIB-MappingInfo',Data) -> 'dec_SIB-MappingInfo'(Data);
decode_disp('SchedulingInfo',Data) -> 'dec_SchedulingInfo'(Data);
decode_disp('SchedulingInfoList',Data) -> 'dec_SchedulingInfoList'(Data);
decode_disp('PLMN-IdentityInfo',Data) -> 'dec_PLMN-IdentityInfo'(Data);
decode_disp('PLMN-IdentityList',Data) -> 'dec_PLMN-IdentityList'(Data);
decode_disp('SystemInformationBlockType1',Data) -> 'dec_SystemInformationBlockType1'(Data);
decode_disp('SystemInformation-r8-IEs',Data) -> 'dec_SystemInformation-r8-IEs'(Data);
decode_disp('SystemInformation',Data) -> 'dec_SystemInformation'(Data);
decode_disp('SecurityModeFailure-r8-IEs',Data) -> 'dec_SecurityModeFailure-r8-IEs'(Data);
decode_disp('SecurityModeFailure',Data) -> 'dec_SecurityModeFailure'(Data);
decode_disp('SecurityModeComplete-r8-IEs',Data) -> 'dec_SecurityModeComplete-r8-IEs'(Data);
decode_disp('SecurityModeComplete',Data) -> 'dec_SecurityModeComplete'(Data);
decode_disp('SecurityConfigSMC',Data) -> 'dec_SecurityConfigSMC'(Data);
decode_disp('SecurityModeCommand-r8-IEs',Data) -> 'dec_SecurityModeCommand-r8-IEs'(Data);
decode_disp('SecurityModeCommand',Data) -> 'dec_SecurityModeCommand'(Data);
decode_disp('RegisteredMME',Data) -> 'dec_RegisteredMME'(Data);
decode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'dec_RRCConnectionSetupComplete-r8-IEs'(Data);
decode_disp('RRCConnectionSetupComplete',Data) -> 'dec_RRCConnectionSetupComplete'(Data);
decode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'dec_RRCConnectionSetup-r8-IEs'(Data);
decode_disp('RRCConnectionSetup',Data) -> 'dec_RRCConnectionSetup'(Data);
decode_disp('EstablishmentCause',Data) -> 'dec_EstablishmentCause'(Data);
decode_disp('InitialUE-Identity',Data) -> 'dec_InitialUE-Identity'(Data);
decode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'dec_RRCConnectionRequest-r8-IEs'(Data);
decode_disp('RRCConnectionRequest',Data) -> 'dec_RRCConnectionRequest'(Data);
decode_disp('BandClassPriority1XRTT',Data) -> 'dec_BandClassPriority1XRTT'(Data);
decode_disp('BandClassPriorityList1XRTT',Data) -> 'dec_BandClassPriorityList1XRTT'(Data);
decode_disp('BandClassPriorityHRPD',Data) -> 'dec_BandClassPriorityHRPD'(Data);
decode_disp('BandClassPriorityListHRPD',Data) -> 'dec_BandClassPriorityListHRPD'(Data);
decode_disp('FreqPriorityUTRA-TDD',Data) -> 'dec_FreqPriorityUTRA-TDD'(Data);
decode_disp('FreqPriorityListUTRA-TDD',Data) -> 'dec_FreqPriorityListUTRA-TDD'(Data);
decode_disp('FreqPriorityUTRA-FDD',Data) -> 'dec_FreqPriorityUTRA-FDD'(Data);
decode_disp('FreqPriorityListUTRA-FDD',Data) -> 'dec_FreqPriorityListUTRA-FDD'(Data);
decode_disp('FreqsPriorityGERAN',Data) -> 'dec_FreqsPriorityGERAN'(Data);
decode_disp('FreqsPriorityListGERAN',Data) -> 'dec_FreqsPriorityListGERAN'(Data);
decode_disp('FreqPriorityEUTRA',Data) -> 'dec_FreqPriorityEUTRA'(Data);
decode_disp('FreqPriorityListEUTRA',Data) -> 'dec_FreqPriorityListEUTRA'(Data);
decode_disp('IdleModeMobilityControlInfo',Data) -> 'dec_IdleModeMobilityControlInfo'(Data);
decode_disp('RedirectedCarrierInfo',Data) -> 'dec_RedirectedCarrierInfo'(Data);
decode_disp('ReleaseCause',Data) -> 'dec_ReleaseCause'(Data);
decode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'dec_RRCConnectionRelease-r8-IEs'(Data);
decode_disp('RRCConnectionRelease',Data) -> 'dec_RRCConnectionRelease'(Data);
decode_disp('RRCConnectionReject-r8-IEs',Data) -> 'dec_RRCConnectionReject-r8-IEs'(Data);
decode_disp('RRCConnectionReject',Data) -> 'dec_RRCConnectionReject'(Data);
decode_disp('ReestablishmentCause',Data) -> 'dec_ReestablishmentCause'(Data);
decode_disp('ReestabUE-Identity',Data) -> 'dec_ReestabUE-Identity'(Data);
decode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentRequest',Data) -> 'dec_RRCConnectionReestablishmentRequest'(Data);
decode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentReject-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentReject',Data) -> 'dec_RRCConnectionReestablishmentReject'(Data);
decode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentComplete',Data) -> 'dec_RRCConnectionReestablishmentComplete'(Data);
decode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'dec_RRCConnectionReestablishment-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishment',Data) -> 'dec_RRCConnectionReestablishment'(Data);
decode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Data);
decode_disp('RRCConnectionReconfigurationComplete',Data) -> 'dec_RRCConnectionReconfigurationComplete'(Data);
decode_disp('SecurityConfigHO',Data) -> 'dec_SecurityConfigHO'(Data);
decode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'dec_RRCConnectionReconfiguration-r8-IEs'(Data);
decode_disp('RRCConnectionReconfiguration',Data) -> 'dec_RRCConnectionReconfiguration'(Data);
decode_disp('IMSI-Digit',Data) -> 'dec_IMSI-Digit'(Data);
decode_disp('IMSI',Data) -> 'dec_IMSI'(Data);
decode_disp('PagingUE-Identity',Data) -> 'dec_PagingUE-Identity'(Data);
decode_disp('PagingRecord',Data) -> 'dec_PagingRecord'(Data);
decode_disp('PagingRecordList',Data) -> 'dec_PagingRecordList'(Data);
decode_disp('Paging',Data) -> 'dec_Paging'(Data);
decode_disp('SystemInfoListGERAN',Data) -> 'dec_SystemInfoListGERAN'(Data);
decode_disp('SI-OrPSI-GERAN',Data) -> 'dec_SI-OrPSI-GERAN'(Data);
decode_disp('CellChangeOrder',Data) -> 'dec_CellChangeOrder'(Data);
decode_disp('Handover',Data) -> 'dec_Handover'(Data);
decode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'dec_MobilityFromEUTRACommand-r8-IEs'(Data);
decode_disp('MobilityFromEUTRACommand',Data) -> 'dec_MobilityFromEUTRACommand'(Data);
decode_disp('MeasurementReport-r8-IEs',Data) -> 'dec_MeasurementReport-r8-IEs'(Data);
decode_disp('MeasurementReport',Data) -> 'dec_MeasurementReport'(Data);
decode_disp('MasterInformationBlock',Data) -> 'dec_MasterInformationBlock'(Data);
decode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data);
decode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'dec_HandoverFromEUTRAPreparationRequest'(Data);
decode_disp('DLInformationTransfer-r8-IEs',Data) -> 'dec_DLInformationTransfer-r8-IEs'(Data);
decode_disp('DLInformationTransfer',Data) -> 'dec_DLInformationTransfer'(Data);
decode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Data);
decode_disp('CSFBParametersResponseCDMA2000',Data) -> 'dec_CSFBParametersResponseCDMA2000'(Data);
decode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Data);
decode_disp('CSFBParametersRequestCDMA2000',Data) -> 'dec_CSFBParametersRequestCDMA2000'(Data);
decode_disp('DRB-CountInfo',Data) -> 'dec_DRB-CountInfo'(Data);
decode_disp('DRB-CountInfoList',Data) -> 'dec_DRB-CountInfoList'(Data);
decode_disp('CounterCheckResponse-r8-IEs',Data) -> 'dec_CounterCheckResponse-r8-IEs'(Data);
decode_disp('CounterCheckResponse',Data) -> 'dec_CounterCheckResponse'(Data);
decode_disp('DRB-CountMSB-Info',Data) -> 'dec_DRB-CountMSB-Info'(Data);
decode_disp('DRB-CountMSB-InfoList',Data) -> 'dec_DRB-CountMSB-InfoList'(Data);
decode_disp('CounterCheck-r8-IEs',Data) -> 'dec_CounterCheck-r8-IEs'(Data);
decode_disp('CounterCheck',Data) -> 'dec_CounterCheck'(Data);
decode_disp('UL-DCCH-MessageType',Data) -> 'dec_UL-DCCH-MessageType'(Data);
decode_disp('UL-DCCH-Message',Data) -> 'dec_UL-DCCH-Message'(Data);
decode_disp('UL-CCCH-MessageType',Data) -> 'dec_UL-CCCH-MessageType'(Data);
decode_disp('UL-CCCH-Message',Data) -> 'dec_UL-CCCH-Message'(Data);
decode_disp('DL-DCCH-MessageType',Data) -> 'dec_DL-DCCH-MessageType'(Data);
decode_disp('DL-DCCH-Message',Data) -> 'dec_DL-DCCH-Message'(Data);
decode_disp('DL-CCCH-MessageType',Data) -> 'dec_DL-CCCH-MessageType'(Data);
decode_disp('DL-CCCH-Message',Data) -> 'dec_DL-CCCH-Message'(Data);
decode_disp('PCCH-MessageType',Data) -> 'dec_PCCH-MessageType'(Data);
decode_disp('PCCH-Message',Data) -> 'dec_PCCH-Message'(Data);
decode_disp('BCCH-DL-SCH-MessageType',Data) -> 'dec_BCCH-DL-SCH-MessageType'(Data);
decode_disp('BCCH-DL-SCH-Message',Data) -> 'dec_BCCH-DL-SCH-Message'(Data);
decode_disp('BCCH-BCH-MessageType',Data) -> 'dec_BCCH-BCH-MessageType'(Data);
decode_disp('BCCH-BCH-Message',Data) -> 'dec_BCCH-BCH-Message'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  UE-TimersAndConstants
%%================================
'enc_UE-TimersAndConstants'(Val) ->
    'enc_UE-TimersAndConstants'(Val, [<<48>>]).

'enc_UE-TimersAndConstants'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute t300(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ms100 -> encode_tags([<<128>>], [0], 1);
ms200 -> encode_tags([<<128>>], [1], 1);
ms300 -> encode_tags([<<128>>], [2], 1);
ms400 -> encode_tags([<<128>>], [3], 1);
ms600 -> encode_tags([<<128>>], [4], 1);
ms1000 -> encode_tags([<<128>>], [5], 1);
ms1500 -> encode_tags([<<128>>], [6], 1);
ms2000 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute t301(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ms100 -> encode_tags([<<129>>], [0], 1);
ms200 -> encode_tags([<<129>>], [1], 1);
ms300 -> encode_tags([<<129>>], [2], 1);
ms400 -> encode_tags([<<129>>], [3], 1);
ms600 -> encode_tags([<<129>>], [4], 1);
ms1000 -> encode_tags([<<129>>], [5], 1);
ms1500 -> encode_tags([<<129>>], [6], 1);
ms2000 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute t310(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
ms0 -> encode_tags([<<130>>], [0], 1);
ms50 -> encode_tags([<<130>>], [1], 1);
ms100 -> encode_tags([<<130>>], [2], 1);
ms200 -> encode_tags([<<130>>], [3], 1);
ms500 -> encode_tags([<<130>>], [4], 1);
ms1000 -> encode_tags([<<130>>], [5], 1);
ms2000 -> encode_tags([<<130>>], [6], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute n310(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
n1 -> encode_tags([<<131>>], [0], 1);
n2 -> encode_tags([<<131>>], [1], 1);
n3 -> encode_tags([<<131>>], [2], 1);
n4 -> encode_tags([<<131>>], [3], 1);
n6 -> encode_tags([<<131>>], [4], 1);
n8 -> encode_tags([<<131>>], [5], 1);
n10 -> encode_tags([<<131>>], [6], 1);
n20 -> encode_tags([<<131>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute t311(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
ms1000 -> encode_tags([<<132>>], [0], 1);
ms3000 -> encode_tags([<<132>>], [1], 1);
ms5000 -> encode_tags([<<132>>], [2], 1);
ms10000 -> encode_tags([<<132>>], [3], 1);
ms15000 -> encode_tags([<<132>>], [4], 1);
ms20000 -> encode_tags([<<132>>], [5], 1);
ms30000 -> encode_tags([<<132>>], [6], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute n311(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
n1 -> encode_tags([<<133>>], [0], 1);
n2 -> encode_tags([<<133>>], [1], 1);
n3 -> encode_tags([<<133>>], [2], 1);
n4 -> encode_tags([<<133>>], [3], 1);
n5 -> encode_tags([<<133>>], [4], 1);
n6 -> encode_tags([<<133>>], [5], 1);
n8 -> encode_tags([<<133>>], [6], 1);
n10 -> encode_tags([<<133>>], [7], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UE-TimersAndConstants'(Tlv) ->
   'dec_UE-TimersAndConstants'(Tlv, [16]).

'dec_UE-TimersAndConstants'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t300(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ms100;
1 -> ms200;
2 -> ms300;
3 -> ms400;
4 -> ms600;
5 -> ms1000;
6 -> ms1500;
7 -> ms2000;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute t301(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ms100;
1 -> ms200;
2 -> ms300;
3 -> ms400;
4 -> ms600;
5 -> ms1000;
6 -> ms1500;
7 -> ms2000;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute t310(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> ms0;
1 -> ms50;
2 -> ms100;
3 -> ms200;
4 -> ms500;
5 -> ms1000;
6 -> ms2000;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute n310(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n6;
5 -> n8;
6 -> n10;
7 -> n20;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

%%-------------------------------------------------
%% attribute t311(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> ms1000;
1 -> ms3000;
2 -> ms5000;
3 -> ms10000;
4 -> ms15000;
5 -> ms20000;
6 -> ms30000;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end,

%%-------------------------------------------------
%% attribute n311(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = case decode_integer(V6, [131077]) of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n5;
5 -> n6;
6 -> n8;
7 -> n10;
Default6 -> exit({error,{asn1,{illegal_enumerated,Default6}}})
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UE-TimersAndConstants', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  SupportedBandList1XRTT
%%================================
'enc_SupportedBandList1XRTT'(Val) ->
    'enc_SupportedBandList1XRTT'(Val, [<<48>>]).

'enc_SupportedBandList1XRTT'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandList1XRTT_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandList1XRTT_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandList1XRTT_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
bc0 -> encode_tags([<<10>>], [0], 1);
bc1 -> encode_tags([<<10>>], [1], 1);
bc2 -> encode_tags([<<10>>], [2], 1);
bc3 -> encode_tags([<<10>>], [3], 1);
bc4 -> encode_tags([<<10>>], [4], 1);
bc5 -> encode_tags([<<10>>], [5], 1);
bc6 -> encode_tags([<<10>>], [6], 1);
bc7 -> encode_tags([<<10>>], [7], 1);
bc8 -> encode_tags([<<10>>], [8], 1);
bc9 -> encode_tags([<<10>>], [9], 1);
bc10 -> encode_tags([<<10>>], [10], 1);
bc11 -> encode_tags([<<10>>], [11], 1);
bc12 -> encode_tags([<<10>>], [12], 1);
bc13 -> encode_tags([<<10>>], [13], 1);
bc14 -> encode_tags([<<10>>], [14], 1);
bc15 -> encode_tags([<<10>>], [15], 1);
bc16 -> encode_tags([<<10>>], [16], 1);
bc17 -> encode_tags([<<10>>], [17], 1);
spare14 -> encode_tags([<<10>>], [18], 1);
spare13 -> encode_tags([<<10>>], [19], 1);
spare12 -> encode_tags([<<10>>], [20], 1);
spare11 -> encode_tags([<<10>>], [21], 1);
spare10 -> encode_tags([<<10>>], [22], 1);
spare9 -> encode_tags([<<10>>], [23], 1);
spare8 -> encode_tags([<<10>>], [24], 1);
spare7 -> encode_tags([<<10>>], [25], 1);
spare6 -> encode_tags([<<10>>], [26], 1);
spare5 -> encode_tags([<<10>>], [27], 1);
spare4 -> encode_tags([<<10>>], [28], 1);
spare3 -> encode_tags([<<10>>], [29], 1);
spare2 -> encode_tags([<<10>>], [30], 1);
spare1 -> encode_tags([<<10>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandList1XRTT_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandList1XRTT'(Tlv) ->
   'dec_SupportedBandList1XRTT'(Tlv, [16]).

'dec_SupportedBandList1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersCDMA2000-1XRTT
%%================================
'enc_IRAT-ParametersCDMA2000-1XRTT'(Val) ->
    'enc_IRAT-ParametersCDMA2000-1XRTT'(Val, [<<48>>]).

'enc_IRAT-ParametersCDMA2000-1XRTT'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute supportedBandList1XRTT(1)   External EUTRA-RRC:SupportedBandList1XRTT
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandList1XRTT'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute tx-Config1XRTT(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
single -> encode_tags([<<129>>], [0], 1);
dual -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute rx-Config1XRTT(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
single -> encode_tags([<<130>>], [0], 1);
dual -> encode_tags([<<130>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersCDMA2000-1XRTT'(Tlv) ->
   'dec_IRAT-ParametersCDMA2000-1XRTT'(Tlv, [16]).

'dec_IRAT-ParametersCDMA2000-1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandList1XRTT(1)   External EUTRA-RRC:SupportedBandList1XRTT
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandList1XRTT'(V1, [131072]),

%%-------------------------------------------------
%% attribute tx-Config1XRTT(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> single;
1 -> dual;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute rx-Config1XRTT(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> single;
1 -> dual;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IRAT-ParametersCDMA2000-1XRTT', Term1, Term2, Term3}.



%%================================
%%  SupportedBandListHRPD
%%================================
'enc_SupportedBandListHRPD'(Val) ->
    'enc_SupportedBandListHRPD'(Val, [<<48>>]).

'enc_SupportedBandListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListHRPD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
bc0 -> encode_tags([<<10>>], [0], 1);
bc1 -> encode_tags([<<10>>], [1], 1);
bc2 -> encode_tags([<<10>>], [2], 1);
bc3 -> encode_tags([<<10>>], [3], 1);
bc4 -> encode_tags([<<10>>], [4], 1);
bc5 -> encode_tags([<<10>>], [5], 1);
bc6 -> encode_tags([<<10>>], [6], 1);
bc7 -> encode_tags([<<10>>], [7], 1);
bc8 -> encode_tags([<<10>>], [8], 1);
bc9 -> encode_tags([<<10>>], [9], 1);
bc10 -> encode_tags([<<10>>], [10], 1);
bc11 -> encode_tags([<<10>>], [11], 1);
bc12 -> encode_tags([<<10>>], [12], 1);
bc13 -> encode_tags([<<10>>], [13], 1);
bc14 -> encode_tags([<<10>>], [14], 1);
bc15 -> encode_tags([<<10>>], [15], 1);
bc16 -> encode_tags([<<10>>], [16], 1);
bc17 -> encode_tags([<<10>>], [17], 1);
spare14 -> encode_tags([<<10>>], [18], 1);
spare13 -> encode_tags([<<10>>], [19], 1);
spare12 -> encode_tags([<<10>>], [20], 1);
spare11 -> encode_tags([<<10>>], [21], 1);
spare10 -> encode_tags([<<10>>], [22], 1);
spare9 -> encode_tags([<<10>>], [23], 1);
spare8 -> encode_tags([<<10>>], [24], 1);
spare7 -> encode_tags([<<10>>], [25], 1);
spare6 -> encode_tags([<<10>>], [26], 1);
spare5 -> encode_tags([<<10>>], [27], 1);
spare4 -> encode_tags([<<10>>], [28], 1);
spare3 -> encode_tags([<<10>>], [29], 1);
spare2 -> encode_tags([<<10>>], [30], 1);
spare1 -> encode_tags([<<10>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListHRPD'(Tlv) ->
   'dec_SupportedBandListHRPD'(Tlv, [16]).

'dec_SupportedBandListHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersCDMA2000-HRPD
%%================================
'enc_IRAT-ParametersCDMA2000-HRPD'(Val) ->
    'enc_IRAT-ParametersCDMA2000-HRPD'(Val, [<<48>>]).

'enc_IRAT-ParametersCDMA2000-HRPD'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute supportedBandListHRPD(1)   External EUTRA-RRC:SupportedBandListHRPD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListHRPD'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute tx-ConfigHRPD(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
single -> encode_tags([<<129>>], [0], 1);
dual -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute rx-ConfigHRPD(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
single -> encode_tags([<<130>>], [0], 1);
dual -> encode_tags([<<130>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersCDMA2000-HRPD'(Tlv) ->
   'dec_IRAT-ParametersCDMA2000-HRPD'(Tlv, [16]).

'dec_IRAT-ParametersCDMA2000-HRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListHRPD(1)   External EUTRA-RRC:SupportedBandListHRPD
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListHRPD'(V1, [131072]),

%%-------------------------------------------------
%% attribute tx-ConfigHRPD(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> single;
1 -> dual;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute rx-ConfigHRPD(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> single;
1 -> dual;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'IRAT-ParametersCDMA2000-HRPD', Term1, Term2, Term3}.



%%================================
%%  SupportedBandGERAN
%%================================
'enc_SupportedBandGERAN'(Val) ->
    'enc_SupportedBandGERAN'(Val, [<<10>>]).

'enc_SupportedBandGERAN'(Val, TagIn) ->
case Val of
gsm450 -> encode_tags(TagIn, [0], 1);
gsm480 -> encode_tags(TagIn, [1], 1);
gsm710 -> encode_tags(TagIn, [2], 1);
gsm750 -> encode_tags(TagIn, [3], 1);
gsm810 -> encode_tags(TagIn, [4], 1);
gsm850 -> encode_tags(TagIn, [5], 1);
gsm900P -> encode_tags(TagIn, [6], 1);
gsm900E -> encode_tags(TagIn, [7], 1);
gsm900R -> encode_tags(TagIn, [8], 1);
gsm1800 -> encode_tags(TagIn, [9], 1);
gsm1900 -> encode_tags(TagIn, [10], 1);
spare5 -> encode_tags(TagIn, [11], 1);
spare4 -> encode_tags(TagIn, [12], 1);
spare3 -> encode_tags(TagIn, [13], 1);
spare2 -> encode_tags(TagIn, [14], 1);
spare1 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SupportedBandGERAN'(Tlv) ->
   'dec_SupportedBandGERAN'(Tlv, [10]).

'dec_SupportedBandGERAN'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> gsm450;
1 -> gsm480;
2 -> gsm710;
3 -> gsm750;
4 -> gsm810;
5 -> gsm850;
6 -> gsm900P;
7 -> gsm900E;
8 -> gsm900R;
9 -> gsm1800;
10 -> gsm1900;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SupportedBandListGERAN
%%================================
'enc_SupportedBandListGERAN'(Val) ->
    'enc_SupportedBandListGERAN'(Val, [<<48>>]).

'enc_SupportedBandListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListGERAN_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
gsm450 -> encode_tags([<<10>>], [0], 1);
gsm480 -> encode_tags([<<10>>], [1], 1);
gsm710 -> encode_tags([<<10>>], [2], 1);
gsm750 -> encode_tags([<<10>>], [3], 1);
gsm810 -> encode_tags([<<10>>], [4], 1);
gsm850 -> encode_tags([<<10>>], [5], 1);
gsm900P -> encode_tags([<<10>>], [6], 1);
gsm900E -> encode_tags([<<10>>], [7], 1);
gsm900R -> encode_tags([<<10>>], [8], 1);
gsm1800 -> encode_tags([<<10>>], [9], 1);
gsm1900 -> encode_tags([<<10>>], [10], 1);
spare5 -> encode_tags([<<10>>], [11], 1);
spare4 -> encode_tags([<<10>>], [12], 1);
spare3 -> encode_tags([<<10>>], [13], 1);
spare2 -> encode_tags([<<10>>], [14], 1);
spare1 -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListGERAN'(Tlv) ->
   'dec_SupportedBandListGERAN'(Tlv, [16]).

'dec_SupportedBandListGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> gsm450;
1 -> gsm480;
2 -> gsm710;
3 -> gsm750;
4 -> gsm810;
5 -> gsm850;
6 -> gsm900P;
7 -> gsm900E;
8 -> gsm900R;
9 -> gsm1800;
10 -> gsm1900;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersGERAN
%%================================
'enc_IRAT-ParametersGERAN'(Val) ->
    'enc_IRAT-ParametersGERAN'(Val, [<<48>>]).

'enc_IRAT-ParametersGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute supportedBandListGERAN(1)   External EUTRA-RRC:SupportedBandListGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute interRAT-PS-HO-ToGERAN(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersGERAN'(Tlv) ->
   'dec_IRAT-ParametersGERAN'(Tlv, [16]).

'dec_IRAT-ParametersGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListGERAN(1)   External EUTRA-RRC:SupportedBandListGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute interRAT-PS-HO-ToGERAN(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'IRAT-ParametersGERAN', Term1, Term2}.



%%================================
%%  SupportedBandUTRA-TDD768
%%================================
'enc_SupportedBandUTRA-TDD768'(Val) ->
    'enc_SupportedBandUTRA-TDD768'(Val, [<<10>>]).

'enc_SupportedBandUTRA-TDD768'(Val, TagIn) ->
case Val of
a -> encode_tags(TagIn, [0], 1);
b -> encode_tags(TagIn, [1], 1);
c -> encode_tags(TagIn, [2], 1);
d -> encode_tags(TagIn, [3], 1);
e -> encode_tags(TagIn, [4], 1);
f -> encode_tags(TagIn, [5], 1);
g -> encode_tags(TagIn, [6], 1);
h -> encode_tags(TagIn, [7], 1);
i -> encode_tags(TagIn, [8], 1);
j -> encode_tags(TagIn, [9], 1);
k -> encode_tags(TagIn, [10], 1);
l -> encode_tags(TagIn, [11], 1);
m -> encode_tags(TagIn, [12], 1);
n -> encode_tags(TagIn, [13], 1);
o -> encode_tags(TagIn, [14], 1);
p -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SupportedBandUTRA-TDD768'(Tlv) ->
   'dec_SupportedBandUTRA-TDD768'(Tlv, [10]).

'dec_SupportedBandUTRA-TDD768'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SupportedBandListUTRA-TDD768
%%================================
'enc_SupportedBandListUTRA-TDD768'(Val) ->
    'enc_SupportedBandListUTRA-TDD768'(Val, [<<48>>]).

'enc_SupportedBandListUTRA-TDD768'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD768_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD768_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD768_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
a -> encode_tags([<<10>>], [0], 1);
b -> encode_tags([<<10>>], [1], 1);
c -> encode_tags([<<10>>], [2], 1);
d -> encode_tags([<<10>>], [3], 1);
e -> encode_tags([<<10>>], [4], 1);
f -> encode_tags([<<10>>], [5], 1);
g -> encode_tags([<<10>>], [6], 1);
h -> encode_tags([<<10>>], [7], 1);
i -> encode_tags([<<10>>], [8], 1);
j -> encode_tags([<<10>>], [9], 1);
k -> encode_tags([<<10>>], [10], 1);
l -> encode_tags([<<10>>], [11], 1);
m -> encode_tags([<<10>>], [12], 1);
n -> encode_tags([<<10>>], [13], 1);
o -> encode_tags([<<10>>], [14], 1);
p -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListUTRA-TDD768_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD768'(Tlv) ->
   'dec_SupportedBandListUTRA-TDD768'(Tlv, [16]).

'dec_SupportedBandListUTRA-TDD768'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersUTRA-TDD768
%%================================
'enc_IRAT-ParametersUTRA-TDD768'(Val) ->
    'enc_IRAT-ParametersUTRA-TDD768'(Val, [<<48>>]).

'enc_IRAT-ParametersUTRA-TDD768'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD768(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD768
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD768'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD768'(Tlv) ->
   'dec_IRAT-ParametersUTRA-TDD768'(Tlv, [16]).

'dec_IRAT-ParametersUTRA-TDD768'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD768(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD768
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListUTRA-TDD768'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IRAT-ParametersUTRA-TDD768', Term1}.



%%================================
%%  SupportedBandUTRA-TDD384
%%================================
'enc_SupportedBandUTRA-TDD384'(Val) ->
    'enc_SupportedBandUTRA-TDD384'(Val, [<<10>>]).

'enc_SupportedBandUTRA-TDD384'(Val, TagIn) ->
case Val of
a -> encode_tags(TagIn, [0], 1);
b -> encode_tags(TagIn, [1], 1);
c -> encode_tags(TagIn, [2], 1);
d -> encode_tags(TagIn, [3], 1);
e -> encode_tags(TagIn, [4], 1);
f -> encode_tags(TagIn, [5], 1);
g -> encode_tags(TagIn, [6], 1);
h -> encode_tags(TagIn, [7], 1);
i -> encode_tags(TagIn, [8], 1);
j -> encode_tags(TagIn, [9], 1);
k -> encode_tags(TagIn, [10], 1);
l -> encode_tags(TagIn, [11], 1);
m -> encode_tags(TagIn, [12], 1);
n -> encode_tags(TagIn, [13], 1);
o -> encode_tags(TagIn, [14], 1);
p -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SupportedBandUTRA-TDD384'(Tlv) ->
   'dec_SupportedBandUTRA-TDD384'(Tlv, [10]).

'dec_SupportedBandUTRA-TDD384'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SupportedBandListUTRA-TDD384
%%================================
'enc_SupportedBandListUTRA-TDD384'(Val) ->
    'enc_SupportedBandListUTRA-TDD384'(Val, [<<48>>]).

'enc_SupportedBandListUTRA-TDD384'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD384_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD384_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD384_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
a -> encode_tags([<<10>>], [0], 1);
b -> encode_tags([<<10>>], [1], 1);
c -> encode_tags([<<10>>], [2], 1);
d -> encode_tags([<<10>>], [3], 1);
e -> encode_tags([<<10>>], [4], 1);
f -> encode_tags([<<10>>], [5], 1);
g -> encode_tags([<<10>>], [6], 1);
h -> encode_tags([<<10>>], [7], 1);
i -> encode_tags([<<10>>], [8], 1);
j -> encode_tags([<<10>>], [9], 1);
k -> encode_tags([<<10>>], [10], 1);
l -> encode_tags([<<10>>], [11], 1);
m -> encode_tags([<<10>>], [12], 1);
n -> encode_tags([<<10>>], [13], 1);
o -> encode_tags([<<10>>], [14], 1);
p -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListUTRA-TDD384_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD384'(Tlv) ->
   'dec_SupportedBandListUTRA-TDD384'(Tlv, [16]).

'dec_SupportedBandListUTRA-TDD384'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersUTRA-TDD384
%%================================
'enc_IRAT-ParametersUTRA-TDD384'(Val) ->
    'enc_IRAT-ParametersUTRA-TDD384'(Val, [<<48>>]).

'enc_IRAT-ParametersUTRA-TDD384'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD384(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD384
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD384'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD384'(Tlv) ->
   'dec_IRAT-ParametersUTRA-TDD384'(Tlv, [16]).

'dec_IRAT-ParametersUTRA-TDD384'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD384(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD384
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListUTRA-TDD384'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IRAT-ParametersUTRA-TDD384', Term1}.



%%================================
%%  SupportedBandUTRA-TDD128
%%================================
'enc_SupportedBandUTRA-TDD128'(Val) ->
    'enc_SupportedBandUTRA-TDD128'(Val, [<<10>>]).

'enc_SupportedBandUTRA-TDD128'(Val, TagIn) ->
case Val of
a -> encode_tags(TagIn, [0], 1);
b -> encode_tags(TagIn, [1], 1);
c -> encode_tags(TagIn, [2], 1);
d -> encode_tags(TagIn, [3], 1);
e -> encode_tags(TagIn, [4], 1);
f -> encode_tags(TagIn, [5], 1);
g -> encode_tags(TagIn, [6], 1);
h -> encode_tags(TagIn, [7], 1);
i -> encode_tags(TagIn, [8], 1);
j -> encode_tags(TagIn, [9], 1);
k -> encode_tags(TagIn, [10], 1);
l -> encode_tags(TagIn, [11], 1);
m -> encode_tags(TagIn, [12], 1);
n -> encode_tags(TagIn, [13], 1);
o -> encode_tags(TagIn, [14], 1);
p -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SupportedBandUTRA-TDD128'(Tlv) ->
   'dec_SupportedBandUTRA-TDD128'(Tlv, [10]).

'dec_SupportedBandUTRA-TDD128'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SupportedBandListUTRA-TDD128
%%================================
'enc_SupportedBandListUTRA-TDD128'(Val) ->
    'enc_SupportedBandListUTRA-TDD128'(Val, [<<48>>]).

'enc_SupportedBandListUTRA-TDD128'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD128_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD128_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD128_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
a -> encode_tags([<<10>>], [0], 1);
b -> encode_tags([<<10>>], [1], 1);
c -> encode_tags([<<10>>], [2], 1);
d -> encode_tags([<<10>>], [3], 1);
e -> encode_tags([<<10>>], [4], 1);
f -> encode_tags([<<10>>], [5], 1);
g -> encode_tags([<<10>>], [6], 1);
h -> encode_tags([<<10>>], [7], 1);
i -> encode_tags([<<10>>], [8], 1);
j -> encode_tags([<<10>>], [9], 1);
k -> encode_tags([<<10>>], [10], 1);
l -> encode_tags([<<10>>], [11], 1);
m -> encode_tags([<<10>>], [12], 1);
n -> encode_tags([<<10>>], [13], 1);
o -> encode_tags([<<10>>], [14], 1);
p -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListUTRA-TDD128_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD128'(Tlv) ->
   'dec_SupportedBandListUTRA-TDD128'(Tlv, [16]).

'dec_SupportedBandListUTRA-TDD128'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersUTRA-TDD128
%%================================
'enc_IRAT-ParametersUTRA-TDD128'(Val) ->
    'enc_IRAT-ParametersUTRA-TDD128'(Val, [<<48>>]).

'enc_IRAT-ParametersUTRA-TDD128'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD128(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD128
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD128'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD128'(Tlv) ->
   'dec_IRAT-ParametersUTRA-TDD128'(Tlv, [16]).

'dec_IRAT-ParametersUTRA-TDD128'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListUTRA-TDD128(1)   External EUTRA-RRC:SupportedBandListUTRA-TDD128
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListUTRA-TDD128'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IRAT-ParametersUTRA-TDD128', Term1}.



%%================================
%%  SupportedBandUTRA-FDD
%%================================
'enc_SupportedBandUTRA-FDD'(Val) ->
    'enc_SupportedBandUTRA-FDD'(Val, [<<10>>]).

'enc_SupportedBandUTRA-FDD'(Val, TagIn) ->
case Val of
bandI -> encode_tags(TagIn, [0], 1);
bandII -> encode_tags(TagIn, [1], 1);
bandIII -> encode_tags(TagIn, [2], 1);
bandIV -> encode_tags(TagIn, [3], 1);
bandV -> encode_tags(TagIn, [4], 1);
bandVI -> encode_tags(TagIn, [5], 1);
bandVII -> encode_tags(TagIn, [6], 1);
bandVIII -> encode_tags(TagIn, [7], 1);
bandIX -> encode_tags(TagIn, [8], 1);
bandX -> encode_tags(TagIn, [9], 1);
bandXI -> encode_tags(TagIn, [10], 1);
bandXII -> encode_tags(TagIn, [11], 1);
bandXIII -> encode_tags(TagIn, [12], 1);
bandXIV -> encode_tags(TagIn, [13], 1);
bandXV -> encode_tags(TagIn, [14], 1);
bandXVI -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SupportedBandUTRA-FDD'(Tlv) ->
   'dec_SupportedBandUTRA-FDD'(Tlv, [10]).

'dec_SupportedBandUTRA-FDD'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> bandI;
1 -> bandII;
2 -> bandIII;
3 -> bandIV;
4 -> bandV;
5 -> bandVI;
6 -> bandVII;
7 -> bandVIII;
8 -> bandIX;
9 -> bandX;
10 -> bandXI;
11 -> bandXII;
12 -> bandXIII;
13 -> bandXIV;
14 -> bandXV;
15 -> bandXVI;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SupportedBandListUTRA-FDD
%%================================
'enc_SupportedBandListUTRA-FDD'(Val) ->
    'enc_SupportedBandListUTRA-FDD'(Val, [<<48>>]).

'enc_SupportedBandListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-FDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
bandI -> encode_tags([<<10>>], [0], 1);
bandII -> encode_tags([<<10>>], [1], 1);
bandIII -> encode_tags([<<10>>], [2], 1);
bandIV -> encode_tags([<<10>>], [3], 1);
bandV -> encode_tags([<<10>>], [4], 1);
bandVI -> encode_tags([<<10>>], [5], 1);
bandVII -> encode_tags([<<10>>], [6], 1);
bandVIII -> encode_tags([<<10>>], [7], 1);
bandIX -> encode_tags([<<10>>], [8], 1);
bandX -> encode_tags([<<10>>], [9], 1);
bandXI -> encode_tags([<<10>>], [10], 1);
bandXII -> encode_tags([<<10>>], [11], 1);
bandXIII -> encode_tags([<<10>>], [12], 1);
bandXIV -> encode_tags([<<10>>], [13], 1);
bandXV -> encode_tags([<<10>>], [14], 1);
bandXVI -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SupportedBandListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-FDD'(Tlv) ->
   'dec_SupportedBandListUTRA-FDD'(Tlv, [16]).

'dec_SupportedBandListUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> bandI;
1 -> bandII;
2 -> bandIII;
3 -> bandIV;
4 -> bandV;
5 -> bandVI;
6 -> bandVII;
7 -> bandVIII;
8 -> bandIX;
9 -> bandX;
10 -> bandXI;
11 -> bandXII;
12 -> bandXIII;
13 -> bandXIV;
14 -> bandXV;
15 -> bandXVI;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  IRAT-ParametersUTRA-FDD
%%================================
'enc_IRAT-ParametersUTRA-FDD'(Val) ->
    'enc_IRAT-ParametersUTRA-FDD'(Val, [<<48>>]).

'enc_IRAT-ParametersUTRA-FDD'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute supportedBandListUTRA-FDD(1)   External EUTRA-RRC:SupportedBandListUTRA-FDD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-FDD'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-FDD'(Tlv) ->
   'dec_IRAT-ParametersUTRA-FDD'(Tlv, [16]).

'dec_IRAT-ParametersUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListUTRA-FDD(1)   External EUTRA-RRC:SupportedBandListUTRA-FDD
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListUTRA-FDD'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'IRAT-ParametersUTRA-FDD', Term1}.



%%================================
%%  InterRAT-BandInfo
%%================================
'enc_InterRAT-BandInfo'(Val) ->
    'enc_InterRAT-BandInfo'(Val, [<<48>>]).

'enc_InterRAT-BandInfo'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute interRAT-NeedForGaps(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InterRAT-BandInfo'(Tlv) ->
   'dec_InterRAT-BandInfo'(Tlv, [16]).

'dec_InterRAT-BandInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute interRAT-NeedForGaps(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'InterRAT-BandInfo', Term1}.



%%================================
%%  InterRAT-BandList
%%================================
'enc_InterRAT-BandList'(Val) ->
    'enc_InterRAT-BandList'(Val, [<<48>>]).

'enc_InterRAT-BandList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterRAT-BandList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InterRAT-BandList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterRAT-BandList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterRAT-BandInfo'(H, [<<48>>]),
   'enc_InterRAT-BandList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterRAT-BandList'(Tlv) ->
   'dec_InterRAT-BandList'(Tlv, [16]).

'dec_InterRAT-BandList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InterRAT-BandInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  InterFreqBandInfo
%%================================
'enc_InterFreqBandInfo'(Val) ->
    'enc_InterFreqBandInfo'(Val, [<<48>>]).

'enc_InterFreqBandInfo'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute interFreqNeedForGaps(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InterFreqBandInfo'(Tlv) ->
   'dec_InterFreqBandInfo'(Tlv, [16]).

'dec_InterFreqBandInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute interFreqNeedForGaps(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'InterFreqBandInfo', Term1}.



%%================================
%%  InterFreqBandList
%%================================
'enc_InterFreqBandList'(Val) ->
    'enc_InterFreqBandList'(Val, [<<48>>]).

'enc_InterFreqBandList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqBandList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InterFreqBandList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqBandList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqBandInfo'(H, [<<48>>]),
   'enc_InterFreqBandList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqBandList'(Tlv) ->
   'dec_InterFreqBandList'(Tlv, [16]).

'dec_InterFreqBandList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InterFreqBandInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  BandInfoEUTRA
%%================================
'enc_BandInfoEUTRA'(Val) ->
    'enc_BandInfoEUTRA'(Val, [<<48>>]).

'enc_BandInfoEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute interFreqBandList(1)   External EUTRA-RRC:InterFreqBandList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InterFreqBandList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute interRAT-BandList(2)   External EUTRA-RRC:InterRAT-BandList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterRAT-BandList'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BandInfoEUTRA'(Tlv) ->
   'dec_BandInfoEUTRA'(Tlv, [16]).

'dec_BandInfoEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute interFreqBandList(1)   External EUTRA-RRC:InterFreqBandList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InterFreqBandList'(V1, [131072]),

%%-------------------------------------------------
%% attribute interRAT-BandList(2)   External EUTRA-RRC:InterRAT-BandList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_InterRAT-BandList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BandInfoEUTRA', Term1, Term2}.



%%================================
%%  BandListEUTRA
%%================================
'enc_BandListEUTRA'(Val) ->
    'enc_BandListEUTRA'(Val, [<<48>>]).

'enc_BandListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandListEUTRA_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BandListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandInfoEUTRA'(H, [<<48>>]),
   'enc_BandListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandListEUTRA'(Tlv) ->
   'dec_BandListEUTRA'(Tlv, [16]).

'dec_BandListEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_BandInfoEUTRA'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasParameters
%%================================
'enc_MeasParameters'(Val) ->
    'enc_MeasParameters'(Val, [<<48>>]).

'enc_MeasParameters'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute bandListEUTRA(1)   External EUTRA-RRC:BandListEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BandListEUTRA'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasParameters'(Tlv) ->
   'dec_MeasParameters'(Tlv, [16]).

'dec_MeasParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandListEUTRA(1)   External EUTRA-RRC:BandListEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_BandListEUTRA'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'MeasParameters', Term1}.



%%================================
%%  SupportedBandEUTRA
%%================================
'enc_SupportedBandEUTRA'(Val) ->
    'enc_SupportedBandEUTRA'(Val, [<<48>>]).

'enc_SupportedBandEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bandEUTRA(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute halfDuplex(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SupportedBandEUTRA'(Tlv) ->
   'dec_SupportedBandEUTRA'(Tlv, [16]).

'dec_SupportedBandEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandEUTRA(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 64 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute halfDuplex(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SupportedBandEUTRA', Term1, Term2}.



%%================================
%%  SupportedBandListEUTRA
%%================================
'enc_SupportedBandListEUTRA'(Val) ->
    'enc_SupportedBandListEUTRA'(Val, [<<48>>]).

'enc_SupportedBandListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListEUTRA_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SupportedBandListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SupportedBandEUTRA'(H, [<<48>>]),
   'enc_SupportedBandListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListEUTRA'(Tlv) ->
   'dec_SupportedBandListEUTRA'(Tlv, [16]).

'dec_SupportedBandListEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SupportedBandEUTRA'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  RF-Parameters
%%================================
'enc_RF-Parameters'(Val) ->
    'enc_RF-Parameters'(Val, [<<48>>]).

'enc_RF-Parameters'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute supportedBandListEUTRA(1)   External EUTRA-RRC:SupportedBandListEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListEUTRA'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RF-Parameters'(Tlv) ->
   'dec_RF-Parameters'(Tlv, [16]).

'dec_RF-Parameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedBandListEUTRA(1)   External EUTRA-RRC:SupportedBandListEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SupportedBandListEUTRA'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RF-Parameters', Term1}.



%%================================
%%  PhyLayerParameters
%%================================
'enc_PhyLayerParameters'(Val) ->
    'enc_PhyLayerParameters'(Val, [<<48>>]).

'enc_PhyLayerParameters'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ue-TxAntennaSelectionSupported(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ue-SpecificRefSigsSupported(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PhyLayerParameters'(Tlv) ->
   'dec_PhyLayerParameters'(Tlv, [16]).

'dec_PhyLayerParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-TxAntennaSelectionSupported(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute ue-SpecificRefSigsSupported(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PhyLayerParameters', Term1, Term2}.



%%================================
%%  PDCP-Parameters
%%================================
'enc_PDCP-Parameters'(Val) ->
    'enc_PDCP-Parameters'(Val, [<<48>>]).

'enc_PDCP-Parameters'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute supportedROHC-Profiles(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PDCP-Parameters_supportedROHC-Profiles'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute maxNumberROHC-ContextSessions(2) with type ENUMERATED DEFAULT = cs16
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         cs16 -> {<<>>,0};
         _ ->
            case Cindex2 of
cs2 -> encode_tags([<<129>>], [0], 1);
cs4 -> encode_tags([<<129>>], [1], 1);
cs8 -> encode_tags([<<129>>], [2], 1);
cs12 -> encode_tags([<<129>>], [3], 1);
cs16 -> encode_tags([<<129>>], [4], 1);
cs24 -> encode_tags([<<129>>], [5], 1);
cs32 -> encode_tags([<<129>>], [6], 1);
cs48 -> encode_tags([<<129>>], [7], 1);
cs64 -> encode_tags([<<129>>], [8], 1);
cs128 -> encode_tags([<<129>>], [9], 1);
cs256 -> encode_tags([<<129>>], [10], 1);
cs512 -> encode_tags([<<129>>], [11], 1);
cs1024 -> encode_tags([<<129>>], [12], 1);
cs16384 -> encode_tags([<<129>>], [13], 1);
spare2 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Parameters_supportedROHC-Profiles
%%================================
'enc_PDCP-Parameters_supportedROHC-Profiles'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute profile0x0001(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute profile0x0002(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute profile0x0003(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute profile0x0004(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute profile0x0006(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute profile0x0101(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute profile0x0102(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute profile0x0103(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute profile0x0104(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PDCP-Parameters_supportedROHC-Profiles'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute profile0x0001(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute profile0x0002(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute profile0x0003(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute profile0x0004(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute profile0x0006(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute profile0x0101(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute profile0x0102(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute profile0x0103(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute profile0x0104(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'PDCP-Parameters_supportedROHC-Profiles', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



'dec_PDCP-Parameters'(Tlv) ->
   'dec_PDCP-Parameters'(Tlv, [16]).

'dec_PDCP-Parameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute supportedROHC-Profiles(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PDCP-Parameters_supportedROHC-Profiles'(V1, [131072]),

%%-------------------------------------------------
%% attribute maxNumberROHC-ContextSessions(2) with type ENUMERATED DEFAULT = cs16
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> cs2;
1 -> cs4;
2 -> cs8;
3 -> cs12;
4 -> cs16;
5 -> cs24;
6 -> cs32;
7 -> cs48;
8 -> cs64;
9 -> cs128;
10 -> cs256;
11 -> cs512;
12 -> cs1024;
13 -> cs16384;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        {cs16,Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PDCP-Parameters', Term1, Term2}.



%%================================
%%  AccessStratumRelease
%%================================
'enc_AccessStratumRelease'(Val) ->
    'enc_AccessStratumRelease'(Val, [<<10>>]).

'enc_AccessStratumRelease'(Val, TagIn) ->
case Val of
rel8 -> encode_tags(TagIn, [0], 1);
spare7 -> encode_tags(TagIn, [1], 1);
spare6 -> encode_tags(TagIn, [2], 1);
spare5 -> encode_tags(TagIn, [3], 1);
spare4 -> encode_tags(TagIn, [4], 1);
spare3 -> encode_tags(TagIn, [5], 1);
spare2 -> encode_tags(TagIn, [6], 1);
spare1 -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_AccessStratumRelease'(Tlv) ->
   'dec_AccessStratumRelease'(Tlv, [10]).

'dec_AccessStratumRelease'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> rel8;
1 -> spare7;
2 -> spare6;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  UE-EUTRA-Capability
%%================================
'enc_UE-EUTRA-Capability'(Val) ->
    'enc_UE-EUTRA-Capability'(Val, [<<48>>]).

'enc_UE-EUTRA-Capability'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute accessStratumRelease(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
rel8 -> encode_tags([<<128>>], [0], 1);
spare7 -> encode_tags([<<128>>], [1], 1);
spare6 -> encode_tags([<<128>>], [2], 1);
spare5 -> encode_tags([<<128>>], [3], 1);
spare4 -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ue-Category(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute pdcp-Parameters(3)   External EUTRA-RRC:PDCP-Parameters
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PDCP-Parameters'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute phyLayerParameters(4)   External EUTRA-RRC:PhyLayerParameters
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PhyLayerParameters'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute rf-Parameters(5)   External EUTRA-RRC:RF-Parameters
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_RF-Parameters'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute measParameters(6)   External EUTRA-RRC:MeasParameters
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_MeasParameters'(Cindex6, [<<165>>]),

%%-------------------------------------------------
%% attribute featureGroupIndicators(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(32, Cindex7, [<<134>>])
       end,

%%-------------------------------------------------
%% attribute interRAT-Parameters(8) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_UE-EUTRA-Capability_interRAT-Parameters'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(9) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UE-EUTRA-Capability_nonCriticalExtension'(Cindex9, [<<168>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UE-EUTRA-Capability_interRAT-Parameters
%%================================
'enc_UE-EUTRA-Capability_interRAT-Parameters'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute utraFDD(1)   External EUTRA-RRC:IRAT-ParametersUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-FDD'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute utraTDD128(2)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD128 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD128'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute utraTDD384(3)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD384 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD384'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute utraTDD768(4)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD768 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD768'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute geran(5)   External EUTRA-RRC:IRAT-ParametersGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersGERAN'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute cdma2000-HRPD(6)   External EUTRA-RRC:IRAT-ParametersCDMA2000-HRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersCDMA2000-HRPD'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute cdma2000-1xRTT(7)   External EUTRA-RRC:IRAT-ParametersCDMA2000-1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersCDMA2000-1XRTT'(Cindex7, [<<166>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-EUTRA-Capability_interRAT-Parameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute utraFDD(1)   External EUTRA-RRC:IRAT-ParametersUTRA-FDD OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_IRAT-ParametersUTRA-FDD'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute utraTDD128(2)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD128 OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IRAT-ParametersUTRA-TDD128'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute utraTDD384(3)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD384 OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_IRAT-ParametersUTRA-TDD384'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute utraTDD768(4)   External EUTRA-RRC:IRAT-ParametersUTRA-TDD768 OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_IRAT-ParametersUTRA-TDD768'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute geran(5)   External EUTRA-RRC:IRAT-ParametersGERAN OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_IRAT-ParametersGERAN'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute cdma2000-HRPD(6)   External EUTRA-RRC:IRAT-ParametersCDMA2000-HRPD OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_IRAT-ParametersCDMA2000-HRPD'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute cdma2000-1xRTT(7)   External EUTRA-RRC:IRAT-ParametersCDMA2000-1XRTT OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_IRAT-ParametersCDMA2000-1XRTT'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'UE-EUTRA-Capability_interRAT-Parameters', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.




%%================================
%%  UE-EUTRA-Capability_nonCriticalExtension
%%================================
'enc_UE-EUTRA-Capability_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-EUTRA-Capability_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UE-EUTRA-Capability_nonCriticalExtension'}.



'dec_UE-EUTRA-Capability'(Tlv) ->
   'dec_UE-EUTRA-Capability'(Tlv, [16]).

'dec_UE-EUTRA-Capability'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute accessStratumRelease(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> rel8;
1 -> spare7;
2 -> spare6;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute ue-Category(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pdcp-Parameters(3)   External EUTRA-RRC:PDCP-Parameters
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_PDCP-Parameters'(V3, [131074]),

%%-------------------------------------------------
%% attribute phyLayerParameters(4)   External EUTRA-RRC:PhyLayerParameters
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_PhyLayerParameters'(V4, [131075]),

%%-------------------------------------------------
%% attribute rf-Parameters(5)   External EUTRA-RRC:RF-Parameters
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_RF-Parameters'(V5, [131076]),

%%-------------------------------------------------
%% attribute measParameters(6)   External EUTRA-RRC:MeasParameters
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_MeasParameters'(V6, [131077]),

%%-------------------------------------------------
%% attribute featureGroupIndicators(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val2 = decode_native_bit_string(V7, []),
C1 = bit_size(Val2),
if C1 =:= 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute interRAT-Parameters(8) with type SEQUENCE
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_UE-EUTRA-Capability_interRAT-Parameters'(V8, [131079]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(9) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_UE-EUTRA-Capability_nonCriticalExtension'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'UE-EUTRA-Capability', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  UE-CapabilityRAT-Container
%%================================
'enc_UE-CapabilityRAT-Container'(Val) ->
    'enc_UE-CapabilityRAT-Container'(Val, [<<48>>]).

'enc_UE-CapabilityRAT-Container'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rat-Type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
eutra -> encode_tags([<<128>>], [0], 1);
utra -> encode_tags([<<128>>], [1], 1);
'geran-cs' -> encode_tags([<<128>>], [2], 1);
'geran-ps' -> encode_tags([<<128>>], [3], 1);
'cdma2000-1XRTT' -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ueCapabilityRAT-Container(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UE-CapabilityRAT-Container'(Tlv) ->
   'dec_UE-CapabilityRAT-Container'(Tlv, [16]).

'dec_UE-CapabilityRAT-Container'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rat-Type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute ueCapabilityRAT-Container(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'UE-CapabilityRAT-Container', Term1, Term2}.



%%================================
%%  UE-CapabilityRAT-ContainerList
%%================================
'enc_UE-CapabilityRAT-ContainerList'(Val) ->
    'enc_UE-CapabilityRAT-ContainerList'(Val, [<<48>>]).

'enc_UE-CapabilityRAT-ContainerList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRAT-ContainerList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-CapabilityRAT-ContainerList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-CapabilityRAT-ContainerList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRAT-Container'(H, [<<48>>]),
   'enc_UE-CapabilityRAT-ContainerList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-CapabilityRAT-ContainerList'(Tlv) ->
   'dec_UE-CapabilityRAT-ContainerList'(Tlv, [16]).

'dec_UE-CapabilityRAT-ContainerList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-CapabilityRAT-Container'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  S-TMSI
%%================================
'enc_S-TMSI'(Val) ->
    'enc_S-TMSI'(Val, [<<48>>]).

'enc_S-TMSI'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mmec(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(8, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute m-TMSI(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(32, Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_S-TMSI'(Tlv) ->
   'dec_S-TMSI'(Tlv, [16]).

'dec_S-TMSI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mmec(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute m-TMSI(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'S-TMSI', Term1, Term2}.



%%================================
%%  RRC-TransactionIdentifier
%%================================
'enc_RRC-TransactionIdentifier'(Val) ->
    'enc_RRC-TransactionIdentifier'(Val, [<<2>>]).

'enc_RRC-TransactionIdentifier'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RRC-TransactionIdentifier'(Tlv) ->
   'dec_RRC-TransactionIdentifier'(Tlv, [2]).

'dec_RRC-TransactionIdentifier'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RAT-Type
%%================================
'enc_RAT-Type'(Val) ->
    'enc_RAT-Type'(Val, [<<10>>]).

'enc_RAT-Type'(Val, TagIn) ->
case Val of
eutra -> encode_tags(TagIn, [0], 1);
utra -> encode_tags(TagIn, [1], 1);
'geran-cs' -> encode_tags(TagIn, [2], 1);
'geran-ps' -> encode_tags(TagIn, [3], 1);
'cdma2000-1XRTT' -> encode_tags(TagIn, [4], 1);
spare3 -> encode_tags(TagIn, [5], 1);
spare2 -> encode_tags(TagIn, [6], 1);
spare1 -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RAT-Type'(Tlv) ->
   'dec_RAT-Type'(Tlv, [10]).

'dec_RAT-Type'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  RAND-CDMA2000
%%================================
'enc_RAND-CDMA2000'(Val) ->
    'enc_RAND-CDMA2000'(Val, [<<3>>]).

'enc_RAND-CDMA2000'(Val, TagIn) ->
encode_unnamed_bit_string(32, Val, TagIn).


'dec_RAND-CDMA2000'(Tlv) ->
   'dec_RAND-CDMA2000'(Tlv, [3]).

'dec_RAND-CDMA2000'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NeighCellConfig
%%================================
'enc_NeighCellConfig'(Val) ->
    'enc_NeighCellConfig'(Val, [<<3>>]).

'enc_NeighCellConfig'(Val, TagIn) ->
encode_unnamed_bit_string(2, Val, TagIn).


'dec_NeighCellConfig'(Tlv) ->
   'dec_NeighCellConfig'(Tlv, [3]).

'dec_NeighCellConfig'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MMEC
%%================================
'enc_MMEC'(Val) ->
    'enc_MMEC'(Val, [<<3>>]).

'enc_MMEC'(Val, TagIn) ->
encode_unnamed_bit_string(8, Val, TagIn).


'dec_MMEC'(Tlv) ->
   'dec_MMEC'(Tlv, [3]).

'dec_MMEC'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  FilterCoefficient
%%================================
'enc_FilterCoefficient'(Val) ->
    'enc_FilterCoefficient'(Val, [<<10>>]).

'enc_FilterCoefficient'(Val, TagIn) ->
case Val of
fc0 -> encode_tags(TagIn, [0], 1);
fc1 -> encode_tags(TagIn, [1], 1);
fc2 -> encode_tags(TagIn, [2], 1);
fc3 -> encode_tags(TagIn, [3], 1);
fc4 -> encode_tags(TagIn, [4], 1);
fc5 -> encode_tags(TagIn, [5], 1);
fc6 -> encode_tags(TagIn, [6], 1);
fc7 -> encode_tags(TagIn, [7], 1);
fc8 -> encode_tags(TagIn, [8], 1);
fc9 -> encode_tags(TagIn, [9], 1);
fc11 -> encode_tags(TagIn, [10], 1);
fc13 -> encode_tags(TagIn, [11], 1);
fc15 -> encode_tags(TagIn, [12], 1);
fc17 -> encode_tags(TagIn, [13], 1);
fc19 -> encode_tags(TagIn, [14], 1);
spare1 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_FilterCoefficient'(Tlv) ->
   'dec_FilterCoefficient'(Tlv, [10]).

'dec_FilterCoefficient'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  DedicatedInfoNAS
%%================================
'enc_DedicatedInfoNAS'(Val) ->
    'enc_DedicatedInfoNAS'(Val, [<<4>>]).

'enc_DedicatedInfoNAS'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_DedicatedInfoNAS'(Tlv) ->
   'dec_DedicatedInfoNAS'(Tlv, [4]).

'dec_DedicatedInfoNAS'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  DedicatedInfoCDMA2000
%%================================
'enc_DedicatedInfoCDMA2000'(Val) ->
    'enc_DedicatedInfoCDMA2000'(Val, [<<4>>]).

'enc_DedicatedInfoCDMA2000'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_DedicatedInfoCDMA2000'(Tlv) ->
   'dec_DedicatedInfoCDMA2000'(Tlv, [4]).

'dec_DedicatedInfoCDMA2000'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  C-RNTI
%%================================
'enc_C-RNTI'(Val) ->
    'enc_C-RNTI'(Val, [<<3>>]).

'enc_C-RNTI'(Val, TagIn) ->
encode_unnamed_bit_string(16, Val, TagIn).


'dec_C-RNTI'(Tlv) ->
   'dec_C-RNTI'(Tlv, [3]).

'dec_C-RNTI'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TimeToTrigger
%%================================
'enc_TimeToTrigger'(Val) ->
    'enc_TimeToTrigger'(Val, [<<10>>]).

'enc_TimeToTrigger'(Val, TagIn) ->
case Val of
ms0 -> encode_tags(TagIn, [0], 1);
ms40 -> encode_tags(TagIn, [1], 1);
ms64 -> encode_tags(TagIn, [2], 1);
ms80 -> encode_tags(TagIn, [3], 1);
ms100 -> encode_tags(TagIn, [4], 1);
ms128 -> encode_tags(TagIn, [5], 1);
ms160 -> encode_tags(TagIn, [6], 1);
ms256 -> encode_tags(TagIn, [7], 1);
ms320 -> encode_tags(TagIn, [8], 1);
ms480 -> encode_tags(TagIn, [9], 1);
ms512 -> encode_tags(TagIn, [10], 1);
ms640 -> encode_tags(TagIn, [11], 1);
ms1024 -> encode_tags(TagIn, [12], 1);
ms1280 -> encode_tags(TagIn, [13], 1);
ms2560 -> encode_tags(TagIn, [14], 1);
ms5120 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimeToTrigger'(Tlv) ->
   'dec_TimeToTrigger'(Tlv, [10]).

'dec_TimeToTrigger'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RSRQ-Range
%%================================
'enc_RSRQ-Range'(Val) ->
    'enc_RSRQ-Range'(Val, [<<2>>]).

'enc_RSRQ-Range'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RSRQ-Range'(Tlv) ->
   'dec_RSRQ-Range'(Tlv, [2]).

'dec_RSRQ-Range'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 34 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RSRP-Range
%%================================
'enc_RSRP-Range'(Val) ->
    'enc_RSRP-Range'(Val, [<<2>>]).

'enc_RSRP-Range'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_RSRP-Range'(Tlv) ->
   'dec_RSRP-Range'(Tlv, [2]).

'dec_RSRP-Range'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 97 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ReportInterval
%%================================
'enc_ReportInterval'(Val) ->
    'enc_ReportInterval'(Val, [<<10>>]).

'enc_ReportInterval'(Val, TagIn) ->
case Val of
ms120 -> encode_tags(TagIn, [0], 1);
ms240 -> encode_tags(TagIn, [1], 1);
ms480 -> encode_tags(TagIn, [2], 1);
ms640 -> encode_tags(TagIn, [3], 1);
ms1024 -> encode_tags(TagIn, [4], 1);
ms2048 -> encode_tags(TagIn, [5], 1);
ms5120 -> encode_tags(TagIn, [6], 1);
ms10240 -> encode_tags(TagIn, [7], 1);
min1 -> encode_tags(TagIn, [8], 1);
min6 -> encode_tags(TagIn, [9], 1);
min12 -> encode_tags(TagIn, [10], 1);
min30 -> encode_tags(TagIn, [11], 1);
min60 -> encode_tags(TagIn, [12], 1);
spare3 -> encode_tags(TagIn, [13], 1);
spare2 -> encode_tags(TagIn, [14], 1);
spare1 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReportInterval'(Tlv) ->
   'dec_ReportInterval'(Tlv, [10]).

'dec_ReportInterval'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ReportConfigToAddMod
%%================================
'enc_ReportConfigToAddMod'(Val) ->
    'enc_ReportConfigToAddMod'(Val, [<<48>>]).

'enc_ReportConfigToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute reportConfigId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute reportConfig(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReportConfigToAddMod_reportConfig'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigToAddMod_reportConfig
%%================================
'enc_ReportConfigToAddMod_reportConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      reportConfigEUTRA ->
         'enc_ReportConfigEUTRA'(element(2,Val), [<<160>>]);
      reportConfigInterRAT ->
         'enc_ReportConfigInterRAT'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ReportConfigToAddMod_reportConfig'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'reportConfigEUTRA'
    {131072, V1} -> 
        {reportConfigEUTRA, 'dec_ReportConfigEUTRA'(V1, [])};


%% 'reportConfigInterRAT'
    {131073, V1} -> 
        {reportConfigInterRAT, 'dec_ReportConfigInterRAT'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_ReportConfigToAddMod'(Tlv) ->
   'dec_ReportConfigToAddMod'(Tlv, [16]).

'dec_ReportConfigToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute reportConfigId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reportConfig(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ReportConfigToAddMod_reportConfig'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReportConfigToAddMod', Term1, Term2}.



%%================================
%%  ReportConfigToAddModList
%%================================
'enc_ReportConfigToAddModList'(Val) ->
    'enc_ReportConfigToAddModList'(Val, [<<48>>]).

'enc_ReportConfigToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ReportConfigToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReportConfigToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToAddMod'(H, [<<48>>]),
   'enc_ReportConfigToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ReportConfigToAddModList'(Tlv) ->
   'dec_ReportConfigToAddModList'(Tlv, [16]).

'dec_ReportConfigToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ReportConfigToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ThresholdCDMA2000
%%================================
'enc_ThresholdCDMA2000'(Val) ->
    'enc_ThresholdCDMA2000'(Val, [<<2>>]).

'enc_ThresholdCDMA2000'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ThresholdCDMA2000'(Tlv) ->
   'dec_ThresholdCDMA2000'(Tlv, [2]).

'dec_ThresholdCDMA2000'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ThresholdGERAN
%%================================
'enc_ThresholdGERAN'(Val) ->
    'enc_ThresholdGERAN'(Val, [<<2>>]).

'enc_ThresholdGERAN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ThresholdGERAN'(Tlv) ->
   'dec_ThresholdGERAN'(Tlv, [2]).

'dec_ThresholdGERAN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ThresholdUTRA
%%================================
'enc_ThresholdUTRA'(Val) ->
    'enc_ThresholdUTRA'(Val, []).

'enc_ThresholdUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'utra-RSCP' ->
         encode_integer(element(2,Val), [<<128>>]);
      'utra-EcN0' ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ThresholdUTRA'(Tlv) ->
   'dec_ThresholdUTRA'(Tlv, []).

'dec_ThresholdUTRA'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'utra-RSCP'
    {131072, V1} -> 
        {'utra-RSCP', begin
Val1 = decode_integer(V1, []),
if -5 =< Val1, Val1 =< 91 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'utra-EcN0'
    {131073, V1} -> 
        {'utra-EcN0', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 49 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ReportConfigInterRAT
%%================================
'enc_ReportConfigInterRAT'(Val) ->
    'enc_ReportConfigInterRAT'(Val, [<<48>>]).

'enc_ReportConfigInterRAT'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute triggerType(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute maxReportCells(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute reportInterval(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
ms120 -> encode_tags([<<130>>], [0], 1);
ms240 -> encode_tags([<<130>>], [1], 1);
ms480 -> encode_tags([<<130>>], [2], 1);
ms640 -> encode_tags([<<130>>], [3], 1);
ms1024 -> encode_tags([<<130>>], [4], 1);
ms2048 -> encode_tags([<<130>>], [5], 1);
ms5120 -> encode_tags([<<130>>], [6], 1);
ms10240 -> encode_tags([<<130>>], [7], 1);
min1 -> encode_tags([<<130>>], [8], 1);
min6 -> encode_tags([<<130>>], [9], 1);
min12 -> encode_tags([<<130>>], [10], 1);
min30 -> encode_tags([<<130>>], [11], 1);
min60 -> encode_tags([<<130>>], [12], 1);
spare3 -> encode_tags([<<130>>], [13], 1);
spare2 -> encode_tags([<<130>>], [14], 1);
spare1 -> encode_tags([<<130>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute reportAmount(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
r1 -> encode_tags([<<131>>], [0], 1);
r2 -> encode_tags([<<131>>], [1], 1);
r4 -> encode_tags([<<131>>], [2], 1);
r8 -> encode_tags([<<131>>], [3], 1);
r16 -> encode_tags([<<131>>], [4], 1);
r32 -> encode_tags([<<131>>], [5], 1);
r64 -> encode_tags([<<131>>], [6], 1);
infinity -> encode_tags([<<131>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType
%%================================
'enc_ReportConfigInterRAT_triggerType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      event ->
         'enc_ReportConfigInterRAT_triggerType_event'(element(2,Val), [<<160>>]);
      periodical ->
         'enc_ReportConfigInterRAT_triggerType_periodical'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ReportConfigInterRAT_triggerType_event
%%================================
'enc_ReportConfigInterRAT_triggerType_event'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute eventId(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType_event_eventId'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute hysteresis(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute timeToTrigger(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
ms0 -> encode_tags([<<130>>], [0], 1);
ms40 -> encode_tags([<<130>>], [1], 1);
ms64 -> encode_tags([<<130>>], [2], 1);
ms80 -> encode_tags([<<130>>], [3], 1);
ms100 -> encode_tags([<<130>>], [4], 1);
ms128 -> encode_tags([<<130>>], [5], 1);
ms160 -> encode_tags([<<130>>], [6], 1);
ms256 -> encode_tags([<<130>>], [7], 1);
ms320 -> encode_tags([<<130>>], [8], 1);
ms480 -> encode_tags([<<130>>], [9], 1);
ms512 -> encode_tags([<<130>>], [10], 1);
ms640 -> encode_tags([<<130>>], [11], 1);
ms1024 -> encode_tags([<<130>>], [12], 1);
ms1280 -> encode_tags([<<130>>], [13], 1);
ms2560 -> encode_tags([<<130>>], [14], 1);
ms5120 -> encode_tags([<<130>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      eventB1 ->
         'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(element(2,Val), [<<160>>]);
      eventB2 ->
         'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB1
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute b1-Threshold(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'b1-ThresholdUTRA' ->
         'enc_ThresholdUTRA'(element(2,Val), [<<160>>]);
      'b1-ThresholdGERAN' ->
         encode_integer(element(2,Val), [<<129>>]);
      'b1-ThresholdCDMA2000' ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'b1-ThresholdUTRA'
    {131072, V1} -> 
        {'b1-ThresholdUTRA', 'dec_ThresholdUTRA'(V1, [])};


%% 'b1-ThresholdGERAN'
    {131073, V1} -> 
        {'b1-ThresholdGERAN', begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'b1-ThresholdCDMA2000'
    {131074, V1} -> 
        {'b1-ThresholdCDMA2000', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 63 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute b1-Threshold(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigInterRAT_triggerType_event_eventId_eventB1', Term1}.




%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB2
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute b2-Threshold1(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute b2-Threshold2(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'b2-Threshold2UTRA' ->
         'enc_ThresholdUTRA'(element(2,Val), [<<160>>]);
      'b2-Threshold2GERAN' ->
         encode_integer(element(2,Val), [<<129>>]);
      'b2-Threshold2CDMA2000' ->
         encode_integer(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'b2-Threshold2UTRA'
    {131072, V1} -> 
        {'b2-Threshold2UTRA', 'dec_ThresholdUTRA'(V1, [])};


%% 'b2-Threshold2GERAN'
    {131073, V1} -> 
        {'b2-Threshold2GERAN', begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'b2-Threshold2CDMA2000'
    {131074, V1} -> 
        {'b2-Threshold2CDMA2000', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 63 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute b2-Threshold1(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThresholdEUTRA'(V1, [131072]),

%%-------------------------------------------------
%% attribute b2-Threshold2(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReportConfigInterRAT_triggerType_event_eventId_eventB2', Term1, Term2}.

'dec_ReportConfigInterRAT_triggerType_event_eventId'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'eventB1'
    {131072, V1} -> 
        {eventB1, 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(V1, [])};


%% 'eventB2'
    {131073, V1} -> 
        {eventB2, 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_ReportConfigInterRAT_triggerType_event'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventId(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReportConfigInterRAT_triggerType_event_eventId'(V1, [131072]),

%%-------------------------------------------------
%% attribute hysteresis(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 30 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute timeToTrigger(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReportConfigInterRAT_triggerType_event', Term1, Term2, Term3}.




%%================================
%%  ReportConfigInterRAT_triggerType_periodical
%%================================
'enc_ReportConfigInterRAT_triggerType_periodical'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute purpose(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
reportStrongestCells -> encode_tags([<<128>>], [0], 1);
reportStrongestCellsForSON -> encode_tags([<<128>>], [1], 1);
reportCGI -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigInterRAT_triggerType_periodical'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute purpose(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> reportStrongestCells;
1 -> reportStrongestCellsForSON;
2 -> reportCGI;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigInterRAT_triggerType_periodical', Term1}.

'dec_ReportConfigInterRAT_triggerType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'event'
    {131072, V1} -> 
        {event, 'dec_ReportConfigInterRAT_triggerType_event'(V1, [])};


%% 'periodical'
    {131073, V1} -> 
        {periodical, 'dec_ReportConfigInterRAT_triggerType_periodical'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_ReportConfigInterRAT'(Tlv) ->
   'dec_ReportConfigInterRAT'(Tlv, [16]).

'dec_ReportConfigInterRAT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute triggerType(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReportConfigInterRAT_triggerType'(V1, [131072]),

%%-------------------------------------------------
%% attribute maxReportCells(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reportInterval(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute reportAmount(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> r1;
1 -> r2;
2 -> r4;
3 -> r8;
4 -> r16;
5 -> r32;
6 -> r64;
7 -> infinity;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ReportConfigInterRAT', Term1, Term2, Term3, Term4}.



%%================================
%%  ReportConfigId
%%================================
'enc_ReportConfigId'(Val) ->
    'enc_ReportConfigId'(Val, [<<2>>]).

'enc_ReportConfigId'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ReportConfigId'(Tlv) ->
   'dec_ReportConfigId'(Tlv, [2]).

'dec_ReportConfigId'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ThresholdEUTRA
%%================================
'enc_ThresholdEUTRA'(Val) ->
    'enc_ThresholdEUTRA'(Val, []).

'enc_ThresholdEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'threshold-RSRP' ->
         encode_integer(element(2,Val), [<<128>>]);
      'threshold-RSRQ' ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ThresholdEUTRA'(Tlv) ->
   'dec_ThresholdEUTRA'(Tlv, []).

'dec_ThresholdEUTRA'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'threshold-RSRP'
    {131072, V1} -> 
        {'threshold-RSRP', begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 97 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'threshold-RSRQ'
    {131073, V1} -> 
        {'threshold-RSRQ', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 34 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ReportConfigEUTRA
%%================================
'enc_ReportConfigEUTRA'(Val) ->
    'enc_ReportConfigEUTRA'(Val, [<<48>>]).

'enc_ReportConfigEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute triggerType(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigEUTRA_triggerType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute triggerQuantity(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
rsrp -> encode_tags([<<129>>], [0], 1);
rsrq -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute reportQuantity(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sameAsTriggerQuantity -> encode_tags([<<130>>], [0], 1);
both -> encode_tags([<<130>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute maxReportCells(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute reportInterval(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
ms120 -> encode_tags([<<132>>], [0], 1);
ms240 -> encode_tags([<<132>>], [1], 1);
ms480 -> encode_tags([<<132>>], [2], 1);
ms640 -> encode_tags([<<132>>], [3], 1);
ms1024 -> encode_tags([<<132>>], [4], 1);
ms2048 -> encode_tags([<<132>>], [5], 1);
ms5120 -> encode_tags([<<132>>], [6], 1);
ms10240 -> encode_tags([<<132>>], [7], 1);
min1 -> encode_tags([<<132>>], [8], 1);
min6 -> encode_tags([<<132>>], [9], 1);
min12 -> encode_tags([<<132>>], [10], 1);
min30 -> encode_tags([<<132>>], [11], 1);
min60 -> encode_tags([<<132>>], [12], 1);
spare3 -> encode_tags([<<132>>], [13], 1);
spare2 -> encode_tags([<<132>>], [14], 1);
spare1 -> encode_tags([<<132>>], [15], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute reportAmount(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
r1 -> encode_tags([<<133>>], [0], 1);
r2 -> encode_tags([<<133>>], [1], 1);
r4 -> encode_tags([<<133>>], [2], 1);
r8 -> encode_tags([<<133>>], [3], 1);
r16 -> encode_tags([<<133>>], [4], 1);
r32 -> encode_tags([<<133>>], [5], 1);
r64 -> encode_tags([<<133>>], [6], 1);
infinity -> encode_tags([<<133>>], [7], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigEUTRA_triggerType
%%================================
'enc_ReportConfigEUTRA_triggerType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      event ->
         'enc_ReportConfigEUTRA_triggerType_event'(element(2,Val), [<<160>>]);
      periodical ->
         'enc_ReportConfigEUTRA_triggerType_periodical'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ReportConfigEUTRA_triggerType_event
%%================================
'enc_ReportConfigEUTRA_triggerType_event'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute eventId(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigEUTRA_triggerType_event_eventId'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute hysteresis(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute timeToTrigger(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
ms0 -> encode_tags([<<130>>], [0], 1);
ms40 -> encode_tags([<<130>>], [1], 1);
ms64 -> encode_tags([<<130>>], [2], 1);
ms80 -> encode_tags([<<130>>], [3], 1);
ms100 -> encode_tags([<<130>>], [4], 1);
ms128 -> encode_tags([<<130>>], [5], 1);
ms160 -> encode_tags([<<130>>], [6], 1);
ms256 -> encode_tags([<<130>>], [7], 1);
ms320 -> encode_tags([<<130>>], [8], 1);
ms480 -> encode_tags([<<130>>], [9], 1);
ms512 -> encode_tags([<<130>>], [10], 1);
ms640 -> encode_tags([<<130>>], [11], 1);
ms1024 -> encode_tags([<<130>>], [12], 1);
ms1280 -> encode_tags([<<130>>], [13], 1);
ms2560 -> encode_tags([<<130>>], [14], 1);
ms5120 -> encode_tags([<<130>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      eventA1 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(element(2,Val), [<<160>>]);
      eventA2 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(element(2,Val), [<<161>>]);
      eventA3 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(element(2,Val), [<<162>>]);
      eventA4 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(element(2,Val), [<<163>>]);
      eventA5 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(element(2,Val), [<<164>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA1
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute a1-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute a1-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThresholdEUTRA'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event_eventId_eventA1', Term1}.




%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA2
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute a2-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute a2-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThresholdEUTRA'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event_eventId_eventA2', Term1}.




%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA3
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute a3-Offset(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute reportOnLeave(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute a3-Offset(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -30 =< Val1, Val1 =< 30 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reportOnLeave(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event_eventId_eventA3', Term1, Term2}.




%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA4
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute a4-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute a4-Threshold(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThresholdEUTRA'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event_eventId_eventA4', Term1}.




%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA5
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute a5-Threshold1(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute a5-Threshold2(2)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ThresholdEUTRA'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute a5-Threshold1(1)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ThresholdEUTRA'(V1, [131072]),

%%-------------------------------------------------
%% attribute a5-Threshold2(2)   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ThresholdEUTRA'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event_eventId_eventA5', Term1, Term2}.

'dec_ReportConfigEUTRA_triggerType_event_eventId'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'eventA1'
    {131072, V1} -> 
        {eventA1, 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(V1, [])};


%% 'eventA2'
    {131073, V1} -> 
        {eventA2, 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(V1, [])};


%% 'eventA3'
    {131074, V1} -> 
        {eventA3, 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(V1, [])};


%% 'eventA4'
    {131075, V1} -> 
        {eventA4, 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(V1, [])};


%% 'eventA5'
    {131076, V1} -> 
        {eventA5, 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_ReportConfigEUTRA_triggerType_event'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventId(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReportConfigEUTRA_triggerType_event_eventId'(V1, [131072]),

%%-------------------------------------------------
%% attribute hysteresis(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 30 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute timeToTrigger(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_event', Term1, Term2, Term3}.




%%================================
%%  ReportConfigEUTRA_triggerType_periodical
%%================================
'enc_ReportConfigEUTRA_triggerType_periodical'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute purpose(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
reportStrongestCells -> encode_tags([<<128>>], [0], 1);
reportCGI -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_periodical'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute purpose(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> reportStrongestCells;
1 -> reportCGI;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ReportConfigEUTRA_triggerType_periodical', Term1}.

'dec_ReportConfigEUTRA_triggerType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'event'
    {131072, V1} -> 
        {event, 'dec_ReportConfigEUTRA_triggerType_event'(V1, [])};


%% 'periodical'
    {131073, V1} -> 
        {periodical, 'dec_ReportConfigEUTRA_triggerType_periodical'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_ReportConfigEUTRA'(Tlv) ->
   'dec_ReportConfigEUTRA'(Tlv, [16]).

'dec_ReportConfigEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute triggerType(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReportConfigEUTRA_triggerType'(V1, [131072]),

%%-------------------------------------------------
%% attribute triggerQuantity(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> rsrp;
1 -> rsrq;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute reportQuantity(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> sameAsTriggerQuantity;
1 -> both;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute maxReportCells(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_integer(V4, [131075]),
if 1 =< Val1, Val1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reportInterval(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute reportAmount(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = case decode_integer(V6, [131077]) of
0 -> r1;
1 -> r2;
2 -> r4;
3 -> r8;
4 -> r16;
5 -> r32;
6 -> r64;
7 -> infinity;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ReportConfigEUTRA', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  QuantityConfigCDMA2000
%%================================
'enc_QuantityConfigCDMA2000'(Val) ->
    'enc_QuantityConfigCDMA2000'(Val, [<<48>>]).

'enc_QuantityConfigCDMA2000'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute measQuantityCDMA2000(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
pilotStrength -> encode_tags([<<128>>], [0], 1);
pilotPnPhaseAndPilotStrength -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_QuantityConfigCDMA2000'(Tlv) ->
   'dec_QuantityConfigCDMA2000'(Tlv, [16]).

'dec_QuantityConfigCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measQuantityCDMA2000(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> pilotStrength;
1 -> pilotPnPhaseAndPilotStrength;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'QuantityConfigCDMA2000', Term1}.



%%================================
%%  QuantityConfigGERAN
%%================================
'enc_QuantityConfigGERAN'(Val) ->
    'enc_QuantityConfigGERAN'(Val, [<<48>>]).

'enc_QuantityConfigGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute measQuantityGERAN(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
rssi -> encode_tags([<<128>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute filterCoefficient(2) with type ENUMERATED DEFAULT = fc2
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         fc2 -> {<<>>,0};
         _ ->
            case Cindex2 of
fc0 -> encode_tags([<<129>>], [0], 1);
fc1 -> encode_tags([<<129>>], [1], 1);
fc2 -> encode_tags([<<129>>], [2], 1);
fc3 -> encode_tags([<<129>>], [3], 1);
fc4 -> encode_tags([<<129>>], [4], 1);
fc5 -> encode_tags([<<129>>], [5], 1);
fc6 -> encode_tags([<<129>>], [6], 1);
fc7 -> encode_tags([<<129>>], [7], 1);
fc8 -> encode_tags([<<129>>], [8], 1);
fc9 -> encode_tags([<<129>>], [9], 1);
fc11 -> encode_tags([<<129>>], [10], 1);
fc13 -> encode_tags([<<129>>], [11], 1);
fc15 -> encode_tags([<<129>>], [12], 1);
fc17 -> encode_tags([<<129>>], [13], 1);
fc19 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_QuantityConfigGERAN'(Tlv) ->
   'dec_QuantityConfigGERAN'(Tlv, [16]).

'dec_QuantityConfigGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measQuantityGERAN(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> rssi;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute filterCoefficient(2) with type ENUMERATED DEFAULT = fc2
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default2 -> {asn1_enum,Default2}
end, TempTlv3};
    _ ->
        {fc2,Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'QuantityConfigGERAN', Term1, Term2}.



%%================================
%%  QuantityConfigUTRA
%%================================
'enc_QuantityConfigUTRA'(Val) ->
    'enc_QuantityConfigUTRA'(Val, [<<48>>]).

'enc_QuantityConfigUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute measQuantityUTRA-FDD(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'cpich-RSCP' -> encode_tags([<<128>>], [0], 1);
'cpich-EcN0' -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute measQuantityUTRA-TDD(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'pccpch-RSCP' -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute filterCoefficient(3) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case Cindex3 of
fc0 -> encode_tags([<<130>>], [0], 1);
fc1 -> encode_tags([<<130>>], [1], 1);
fc2 -> encode_tags([<<130>>], [2], 1);
fc3 -> encode_tags([<<130>>], [3], 1);
fc4 -> encode_tags([<<130>>], [4], 1);
fc5 -> encode_tags([<<130>>], [5], 1);
fc6 -> encode_tags([<<130>>], [6], 1);
fc7 -> encode_tags([<<130>>], [7], 1);
fc8 -> encode_tags([<<130>>], [8], 1);
fc9 -> encode_tags([<<130>>], [9], 1);
fc11 -> encode_tags([<<130>>], [10], 1);
fc13 -> encode_tags([<<130>>], [11], 1);
fc15 -> encode_tags([<<130>>], [12], 1);
fc17 -> encode_tags([<<130>>], [13], 1);
fc19 -> encode_tags([<<130>>], [14], 1);
spare1 -> encode_tags([<<130>>], [15], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_QuantityConfigUTRA'(Tlv) ->
   'dec_QuantityConfigUTRA'(Tlv, [16]).

'dec_QuantityConfigUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measQuantityUTRA-FDD(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> 'cpich-RSCP';
1 -> 'cpich-EcN0';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute measQuantityUTRA-TDD(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'pccpch-RSCP';
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute filterCoefficient(3) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default3 -> {asn1_enum,Default3}
end, TempTlv4};
    _ ->
        {fc4,Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'QuantityConfigUTRA', Term1, Term2, Term3}.



%%================================
%%  QuantityConfigEUTRA
%%================================
'enc_QuantityConfigEUTRA'(Val) ->
    'enc_QuantityConfigEUTRA'(Val, [<<48>>]).

'enc_QuantityConfigEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute filterCoefficientRSRP(1) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case Cindex1 of
fc0 -> encode_tags([<<128>>], [0], 1);
fc1 -> encode_tags([<<128>>], [1], 1);
fc2 -> encode_tags([<<128>>], [2], 1);
fc3 -> encode_tags([<<128>>], [3], 1);
fc4 -> encode_tags([<<128>>], [4], 1);
fc5 -> encode_tags([<<128>>], [5], 1);
fc6 -> encode_tags([<<128>>], [6], 1);
fc7 -> encode_tags([<<128>>], [7], 1);
fc8 -> encode_tags([<<128>>], [8], 1);
fc9 -> encode_tags([<<128>>], [9], 1);
fc11 -> encode_tags([<<128>>], [10], 1);
fc13 -> encode_tags([<<128>>], [11], 1);
fc15 -> encode_tags([<<128>>], [12], 1);
fc17 -> encode_tags([<<128>>], [13], 1);
fc19 -> encode_tags([<<128>>], [14], 1);
spare1 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute filterCoefficientRSRQ(2) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case Cindex2 of
fc0 -> encode_tags([<<129>>], [0], 1);
fc1 -> encode_tags([<<129>>], [1], 1);
fc2 -> encode_tags([<<129>>], [2], 1);
fc3 -> encode_tags([<<129>>], [3], 1);
fc4 -> encode_tags([<<129>>], [4], 1);
fc5 -> encode_tags([<<129>>], [5], 1);
fc6 -> encode_tags([<<129>>], [6], 1);
fc7 -> encode_tags([<<129>>], [7], 1);
fc8 -> encode_tags([<<129>>], [8], 1);
fc9 -> encode_tags([<<129>>], [9], 1);
fc11 -> encode_tags([<<129>>], [10], 1);
fc13 -> encode_tags([<<129>>], [11], 1);
fc15 -> encode_tags([<<129>>], [12], 1);
fc17 -> encode_tags([<<129>>], [13], 1);
fc19 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_QuantityConfigEUTRA'(Tlv) ->
   'dec_QuantityConfigEUTRA'(Tlv, [16]).

'dec_QuantityConfigEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute filterCoefficientRSRP(1) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end, TempTlv2};
    _ ->
        {fc4,Tlv1}
end,

%%-------------------------------------------------
%% attribute filterCoefficientRSRQ(2) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default2 -> {asn1_enum,Default2}
end, TempTlv3};
    _ ->
        {fc4,Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'QuantityConfigEUTRA', Term1, Term2}.



%%================================
%%  QuantityConfig
%%================================
'enc_QuantityConfig'(Val) ->
    'enc_QuantityConfig'(Val, [<<48>>]).

'enc_QuantityConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute quantityConfigEUTRA(1)   External EUTRA-RRC:QuantityConfigEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigEUTRA'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute quantityConfigUTRA(2)   External EUTRA-RRC:QuantityConfigUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigUTRA'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute quantityConfigGERAN(3)   External EUTRA-RRC:QuantityConfigGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigGERAN'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute quantityConfigCDMA2000(4)   External EUTRA-RRC:QuantityConfigCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigCDMA2000'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_QuantityConfig'(Tlv) ->
   'dec_QuantityConfig'(Tlv, [16]).

'dec_QuantityConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute quantityConfigEUTRA(1)   External EUTRA-RRC:QuantityConfigEUTRA OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_QuantityConfigEUTRA'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute quantityConfigUTRA(2)   External EUTRA-RRC:QuantityConfigUTRA OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_QuantityConfigUTRA'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute quantityConfigGERAN(3)   External EUTRA-RRC:QuantityConfigGERAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_QuantityConfigGERAN'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute quantityConfigCDMA2000(4)   External EUTRA-RRC:QuantityConfigCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_QuantityConfigCDMA2000'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'QuantityConfig', Term1, Term2, Term3, Term4}.



%%================================
%%  PLMN-IdentityList2
%%================================
'enc_PLMN-IdentityList2'(Val) ->
    'enc_PLMN-IdentityList2'(Val, [<<48>>]).

'enc_PLMN-IdentityList2'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityList2_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PLMN-IdentityList2_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PLMN-IdentityList2_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PLMN-Identity'(H, [<<48>>]),
   'enc_PLMN-IdentityList2_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PLMN-IdentityList2'(Tlv) ->
   'dec_PLMN-IdentityList2'(Tlv, [16]).

'dec_PLMN-IdentityList2'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PLMN-Identity'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasResultCDMA2000
%%================================
'enc_MeasResultCDMA2000'(Val) ->
    'enc_MeasResultCDMA2000'(Val, [<<48>>]).

'enc_MeasResultCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cgi-Info(2)   External EUTRA-RRC:CellGlobalIdCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellGlobalIdCDMA2000'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultCDMA2000_measResult'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasResultCDMA2000_measResult
%%================================
'enc_MeasResultCDMA2000_measResult'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute pilotPnPhase(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute pilotStrength(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultCDMA2000_measResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pilotPnPhase(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 32767 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute pilotStrength(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 63 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasResultCDMA2000_measResult', Term1, Term2}.



'dec_MeasResultCDMA2000'(Tlv) ->
   'dec_MeasResultCDMA2000'(Tlv, [16]).

'dec_MeasResultCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cgi-Info(2)   External EUTRA-RRC:CellGlobalIdCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellGlobalIdCDMA2000'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_MeasResultCDMA2000_measResult'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MeasResultCDMA2000', Term1, Term2, Term3}.



%%================================
%%  MeasResultListCDMA2000
%%================================
'enc_MeasResultListCDMA2000'(Val) ->
    'enc_MeasResultListCDMA2000'(Val, [<<48>>]).

'enc_MeasResultListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasResultListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultCDMA2000'(H, [<<48>>]),
   'enc_MeasResultListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListCDMA2000'(Tlv) ->
   'dec_MeasResultListCDMA2000'(Tlv, [16]).

'dec_MeasResultListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasResultCDMA2000'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasResultsCDMA2000
%%================================
'enc_MeasResultsCDMA2000'(Val) ->
    'enc_MeasResultsCDMA2000'(Val, [<<48>>]).

'enc_MeasResultsCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute preRegistrationStatusHRPD(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute measResultListCDMA2000(2)   External EUTRA-RRC:MeasResultListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasResultListCDMA2000'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasResultsCDMA2000'(Tlv) ->
   'dec_MeasResultsCDMA2000'(Tlv, [16]).

'dec_MeasResultsCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preRegistrationStatusHRPD(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute measResultListCDMA2000(2)   External EUTRA-RRC:MeasResultListCDMA2000
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MeasResultListCDMA2000'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasResultsCDMA2000', Term1, Term2}.



%%================================
%%  MeasResultGERAN
%%================================
'enc_MeasResultGERAN'(Val) ->
    'enc_MeasResultGERAN'(Val, [<<48>>]).

'enc_MeasResultGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1)   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute physCellId(2)   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdGERAN'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute cgi-Info(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultGERAN_cgi-Info'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute measResult(4) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_MeasResultGERAN_measResult'(Cindex4, [<<163>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasResultGERAN_cgi-Info
%%================================
'enc_MeasResultGERAN_cgi-Info'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute routingAreaCode(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(8, Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultGERAN_cgi-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CellGlobalIdGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute routingAreaCode(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasResultGERAN_cgi-Info', Term1, Term2}.




%%================================
%%  MeasResultGERAN_measResult
%%================================
'enc_MeasResultGERAN_measResult'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute rssi(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultGERAN_measResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rssi(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasResultGERAN_measResult', Term1}.



'dec_MeasResultGERAN'(Tlv) ->
   'dec_MeasResultGERAN'(Tlv, [16]).

'dec_MeasResultGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1)   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CarrierFreqGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute physCellId(2)   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PhysCellIdGERAN'(V2, [131073]),

%%-------------------------------------------------
%% attribute cgi-Info(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_MeasResultGERAN_cgi-Info'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute measResult(4) with type SEQUENCE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_MeasResultGERAN_measResult'(V4, [131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MeasResultGERAN', Term1, Term2, Term3, Term4}.



%%================================
%%  MeasResultListGERAN
%%================================
'enc_MeasResultListGERAN'(Val) ->
    'enc_MeasResultListGERAN'(Val, [<<48>>]).

'enc_MeasResultListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListGERAN_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasResultListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultGERAN'(H, [<<48>>]),
   'enc_MeasResultListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListGERAN'(Tlv) ->
   'dec_MeasResultListGERAN'(Tlv, [16]).

'dec_MeasResultListGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasResultGERAN'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasResultUTRA
%%================================
'enc_MeasResultUTRA'(Val) ->
    'enc_MeasResultUTRA'(Val, [<<48>>]).

'enc_MeasResultUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute physCellId(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasResultUTRA_physCellId'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cgi-Info(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultUTRA_cgi-Info'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultUTRA_measResult'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasResultUTRA_physCellId
%%================================
'enc_MeasResultUTRA_physCellId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      fdd ->
         encode_integer(element(2,Val), [<<128>>]);
      tdd ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasResultUTRA_physCellId'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'fdd'
    {131072, V1} -> 
        {fdd, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'tdd'
    {131073, V1} -> 
        {tdd, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 127 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  MeasResultUTRA_cgi-Info
%%================================
'enc_MeasResultUTRA_cgi-Info'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdUTRA'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute locationAreaCode(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(16, Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute routingAreaCode(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(8, Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute plmn-IdentityList(4)   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-IdentityList2'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultUTRA_cgi-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CellGlobalIdUTRA'(V1, [131072]),

%%-------------------------------------------------
%% attribute locationAreaCode(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute routingAreaCode(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_native_bit_string(V3, []),
C2 = bit_size(Val2),
if C2 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute plmn-IdentityList(4)   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_PLMN-IdentityList2'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MeasResultUTRA_cgi-Info', Term1, Term2, Term3, Term4}.




%%================================
%%  MeasResultUTRA_measResult
%%================================
'enc_MeasResultUTRA_measResult'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute utra-RSCP(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute utra-EcN0(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultUTRA_measResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute utra-RSCP(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if -5 =< Val1, Val1 =< 91 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute utra-EcN0(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 49 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasResultUTRA_measResult', Term1, Term2}.



'dec_MeasResultUTRA'(Tlv) ->
   'dec_MeasResultUTRA'(Tlv, [16]).

'dec_MeasResultUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MeasResultUTRA_physCellId'(V1, [131072]),

%%-------------------------------------------------
%% attribute cgi-Info(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MeasResultUTRA_cgi-Info'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_MeasResultUTRA_measResult'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MeasResultUTRA', Term1, Term2, Term3}.



%%================================
%%  MeasResultListUTRA
%%================================
'enc_MeasResultListUTRA'(Val) ->
    'enc_MeasResultListUTRA'(Val, [<<48>>]).

'enc_MeasResultListUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListUTRA_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasResultListUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultUTRA'(H, [<<48>>]),
   'enc_MeasResultListUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListUTRA'(Tlv) ->
   'dec_MeasResultListUTRA'(Tlv, [16]).

'dec_MeasResultListUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasResultUTRA'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasResultEUTRA
%%================================
'enc_MeasResultEUTRA'(Val) ->
    'enc_MeasResultEUTRA'(Val, [<<48>>]).

'enc_MeasResultEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cgi-Info(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultEUTRA_cgi-Info'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultEUTRA_measResult'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasResultEUTRA_cgi-Info
%%================================
'enc_MeasResultEUTRA_cgi-Info'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdEUTRA'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute trackingAreaCode(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute plmn-IdentityList(3)   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-IdentityList2'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultEUTRA_cgi-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellGlobalId(1)   External EUTRA-RRC:CellGlobalIdEUTRA
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CellGlobalIdEUTRA'(V1, [131072]),

%%-------------------------------------------------
%% attribute trackingAreaCode(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute plmn-IdentityList(3)   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PLMN-IdentityList2'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MeasResultEUTRA_cgi-Info', Term1, Term2, Term3}.




%%================================
%%  MeasResultEUTRA_measResult
%%================================
'enc_MeasResultEUTRA_measResult'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rsrpResult(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute rsrqResult(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResultEUTRA_measResult'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rsrpResult(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 97 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rsrqResult(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 34 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasResultEUTRA_measResult', Term1, Term2}.



'dec_MeasResultEUTRA'(Tlv) ->
   'dec_MeasResultEUTRA'(Tlv, [16]).

'dec_MeasResultEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cgi-Info(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MeasResultEUTRA_cgi-Info'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute measResult(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_MeasResultEUTRA_measResult'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MeasResultEUTRA', Term1, Term2, Term3}.



%%================================
%%  MeasResultListEUTRA
%%================================
'enc_MeasResultListEUTRA'(Val) ->
    'enc_MeasResultListEUTRA'(Val, [<<48>>]).

'enc_MeasResultListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListEUTRA_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasResultListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultEUTRA'(H, [<<48>>]),
   'enc_MeasResultListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListEUTRA'(Tlv) ->
   'dec_MeasResultListEUTRA'(Tlv, [16]).

'dec_MeasResultListEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasResultEUTRA'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasResults
%%================================
'enc_MeasResults'(Val) ->
    'enc_MeasResults'(Val, [<<48>>]).

'enc_MeasResults'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute measId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute measResultServCell(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasResults_measResultServCell'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute measResultNeighCells(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResults_measResultNeighCells'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasResults_measResultServCell
%%================================
'enc_MeasResults_measResultServCell'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rsrpResult(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute rsrqResult(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasResults_measResultServCell'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rsrpResult(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 97 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute rsrqResult(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 34 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasResults_measResultServCell', Term1, Term2}.




%%================================
%%  MeasResults_measResultNeighCells
%%================================
'enc_MeasResults_measResultNeighCells'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      measResultListEUTRA ->
         'enc_MeasResultListEUTRA'(element(2,Val), [<<160>>]);
      measResultListUTRA ->
         'enc_MeasResultListUTRA'(element(2,Val), [<<161>>]);
      measResultListGERAN ->
         'enc_MeasResultListGERAN'(element(2,Val), [<<162>>]);
      measResultsCDMA2000 ->
         'enc_MeasResultsCDMA2000'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasResults_measResultNeighCells'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'measResultListEUTRA'
    {131072, V1} -> 
        {measResultListEUTRA, 'dec_MeasResultListEUTRA'(V1, [])};


%% 'measResultListUTRA'
    {131073, V1} -> 
        {measResultListUTRA, 'dec_MeasResultListUTRA'(V1, [])};


%% 'measResultListGERAN'
    {131074, V1} -> 
        {measResultListGERAN, 'dec_MeasResultListGERAN'(V1, [])};


%% 'measResultsCDMA2000'
    {131075, V1} -> 
        {measResultsCDMA2000, 'dec_MeasResultsCDMA2000'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


'dec_MeasResults'(Tlv) ->
   'dec_MeasResults'(Tlv, [16]).

'dec_MeasResults'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute measResultServCell(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MeasResults_measResultServCell'(V2, [131073]),

%%-------------------------------------------------
%% attribute measResultNeighCells(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_MeasResults_measResultNeighCells'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasResults', Term1, Term2, Term3}.



%%================================
%%  CellsToAddModUTRA-TDD
%%================================
'enc_CellsToAddModUTRA-TDD'(Val) ->
    'enc_CellsToAddModUTRA-TDD'(Val, [<<48>>]).

'enc_CellsToAddModUTRA-TDD'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellsToAddModUTRA-TDD'(Tlv) ->
   'dec_CellsToAddModUTRA-TDD'(Tlv, [16]).

'dec_CellsToAddModUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 127 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellsToAddModUTRA-TDD', Term1, Term2}.



%%================================
%%  CellsToAddModListUTRA-TDD
%%================================
'enc_CellsToAddModListUTRA-TDD'(Val) ->
    'enc_CellsToAddModListUTRA-TDD'(Val, [<<48>>]).

'enc_CellsToAddModListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListUTRA-TDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellsToAddModListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModUTRA-TDD'(H, [<<48>>]),
   'enc_CellsToAddModListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListUTRA-TDD'(Tlv) ->
   'dec_CellsToAddModListUTRA-TDD'(Tlv, [16]).

'dec_CellsToAddModListUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellsToAddModUTRA-TDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CellsToAddModUTRA-FDD
%%================================
'enc_CellsToAddModUTRA-FDD'(Val) ->
    'enc_CellsToAddModUTRA-FDD'(Val, [<<48>>]).

'enc_CellsToAddModUTRA-FDD'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellsToAddModUTRA-FDD'(Tlv) ->
   'dec_CellsToAddModUTRA-FDD'(Tlv, [16]).

'dec_CellsToAddModUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 511 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellsToAddModUTRA-FDD', Term1, Term2}.



%%================================
%%  CellsToAddModListUTRA-FDD
%%================================
'enc_CellsToAddModListUTRA-FDD'(Val) ->
    'enc_CellsToAddModListUTRA-FDD'(Val, [<<48>>]).

'enc_CellsToAddModListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListUTRA-FDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellsToAddModListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModUTRA-FDD'(H, [<<48>>]),
   'enc_CellsToAddModListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListUTRA-FDD'(Tlv) ->
   'dec_CellsToAddModListUTRA-FDD'(Tlv, [16]).

'dec_CellsToAddModListUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellsToAddModUTRA-FDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasObjectUTRA
%%================================
'enc_MeasObjectUTRA'(Val) ->
    'enc_MeasObjectUTRA'(Val, [<<48>>]).

'enc_MeasObjectUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute offsetFreq(2) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(3)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute cellsToAddModList(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectUTRA_cellsToAddModList'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(5) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectUTRA_cellForWhichToReportCGI'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasObjectUTRA_cellsToAddModList
%%================================
'enc_MeasObjectUTRA_cellsToAddModList'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'cellsToAddModListUTRA-FDD' ->
         'enc_CellsToAddModListUTRA-FDD'(element(2,Val), [<<160>>]);
      'cellsToAddModListUTRA-TDD' ->
         'enc_CellsToAddModListUTRA-TDD'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasObjectUTRA_cellsToAddModList'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cellsToAddModListUTRA-FDD'
    {131072, V1} -> 
        {'cellsToAddModListUTRA-FDD', 'dec_CellsToAddModListUTRA-FDD'(V1, [])};


%% 'cellsToAddModListUTRA-TDD'
    {131073, V1} -> 
        {'cellsToAddModListUTRA-TDD', 'dec_CellsToAddModListUTRA-TDD'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  MeasObjectUTRA_cellForWhichToReportCGI
%%================================
'enc_MeasObjectUTRA_cellForWhichToReportCGI'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'utra-FDD' ->
         encode_integer(element(2,Val), [<<128>>]);
      'utra-TDD' ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasObjectUTRA_cellForWhichToReportCGI'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'utra-FDD'
    {131072, V1} -> 
        {'utra-FDD', begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'utra-TDD'
    {131073, V1} -> 
        {'utra-TDD', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 127 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MeasObjectUTRA'(Tlv) ->
   'dec_MeasObjectUTRA'(Tlv, [16]).

'dec_MeasObjectUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute offsetFreq(2) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if -15 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        {0,Tlv2}
end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(3)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CellIndexList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute cellsToAddModList(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_MeasObjectUTRA_cellsToAddModList'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(5) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_MeasObjectUTRA_cellForWhichToReportCGI'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasObjectUTRA', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  MeasObjectToAddMod
%%================================
'enc_MeasObjectToAddMod'(Val) ->
    'enc_MeasObjectToAddMod'(Val, [<<48>>]).

'enc_MeasObjectToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute measObjectId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute measObject(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasObjectToAddMod_measObject'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasObjectToAddMod_measObject
%%================================
'enc_MeasObjectToAddMod_measObject'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      measObjectEUTRA ->
         'enc_MeasObjectEUTRA'(element(2,Val), [<<160>>]);
      measObjectUTRA ->
         'enc_MeasObjectUTRA'(element(2,Val), [<<161>>]);
      measObjectGERAN ->
         'enc_MeasObjectGERAN'(element(2,Val), [<<162>>]);
      measObjectCDMA2000 ->
         'enc_MeasObjectCDMA2000'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasObjectToAddMod_measObject'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'measObjectEUTRA'
    {131072, V1} -> 
        {measObjectEUTRA, 'dec_MeasObjectEUTRA'(V1, [])};


%% 'measObjectUTRA'
    {131073, V1} -> 
        {measObjectUTRA, 'dec_MeasObjectUTRA'(V1, [])};


%% 'measObjectGERAN'
    {131074, V1} -> 
        {measObjectGERAN, 'dec_MeasObjectGERAN'(V1, [])};


%% 'measObjectCDMA2000'
    {131075, V1} -> 
        {measObjectCDMA2000, 'dec_MeasObjectCDMA2000'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


'dec_MeasObjectToAddMod'(Tlv) ->
   'dec_MeasObjectToAddMod'(Tlv, [16]).

'dec_MeasObjectToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measObjectId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute measObject(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MeasObjectToAddMod_measObject'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasObjectToAddMod', Term1, Term2}.



%%================================
%%  MeasObjectToAddModList
%%================================
'enc_MeasObjectToAddModList'(Val) ->
    'enc_MeasObjectToAddModList'(Val, [<<48>>]).

'enc_MeasObjectToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasObjectToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasObjectToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToAddMod'(H, [<<48>>]),
   'enc_MeasObjectToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasObjectToAddModList'(Tlv) ->
   'dec_MeasObjectToAddModList'(Tlv, [16]).

'dec_MeasObjectToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasObjectToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasObjectId
%%================================
'enc_MeasObjectId'(Val) ->
    'enc_MeasObjectId'(Val, [<<2>>]).

'enc_MeasObjectId'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_MeasObjectId'(Tlv) ->
   'dec_MeasObjectId'(Tlv, [2]).

'dec_MeasObjectId'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MeasObjectGERAN
%%================================
'enc_MeasObjectGERAN'(Val) ->
    'enc_MeasObjectGERAN'(Val, [<<48>>]).

'enc_MeasObjectGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute offsetFreq(2) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute ncc-Permitted(3) with type BIT STRING DEFAULT = <<255>>
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_DEFAULT -> {<<>>,0};
         <<255>> -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(8, Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(4)   External EUTRA-RRC:PhysCellIdGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysCellIdGERAN'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasObjectGERAN'(Tlv) ->
   'dec_MeasObjectGERAN'(Tlv, [16]).

'dec_MeasObjectGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CarrierFreqsGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute offsetFreq(2) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if -15 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        {0,Tlv2}
end,

%%-------------------------------------------------
%% attribute ncc-Permitted(3) with type BIT STRING DEFAULT = <<255>>
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val2 = decode_native_bit_string(V3, []),
C1 = bit_size(Val2),
if C1 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        {<<255>>,Tlv3}
end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(4)   External EUTRA-RRC:PhysCellIdGERAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_PhysCellIdGERAN'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasObjectGERAN', Term1, Term2, Term3, Term4}.



%%================================
%%  BlackCellsToAddMod
%%================================
'enc_BlackCellsToAddMod'(Val) ->
    'enc_BlackCellsToAddMod'(Val, [<<48>>]).

'enc_BlackCellsToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellIdRange(2)   External EUTRA-RRC:PhysCellIdRange
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdRange'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BlackCellsToAddMod'(Tlv) ->
   'dec_BlackCellsToAddMod'(Tlv, [16]).

'dec_BlackCellsToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellIdRange(2)   External EUTRA-RRC:PhysCellIdRange
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PhysCellIdRange'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BlackCellsToAddMod', Term1, Term2}.



%%================================
%%  BlackCellsToAddModList
%%================================
'enc_BlackCellsToAddModList'(Val) ->
    'enc_BlackCellsToAddModList'(Val, [<<48>>]).

'enc_BlackCellsToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BlackCellsToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BlackCellsToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BlackCellsToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BlackCellsToAddMod'(H, [<<48>>]),
   'enc_BlackCellsToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BlackCellsToAddModList'(Tlv) ->
   'dec_BlackCellsToAddModList'(Tlv, [16]).

'dec_BlackCellsToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_BlackCellsToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CellsToAddMod
%%================================
'enc_CellsToAddMod'(Val) ->
    'enc_CellsToAddMod'(Val, [<<48>>]).

'enc_CellsToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cellIndividualOffset(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'dB-24' -> encode_tags([<<130>>], [0], 1);
'dB-22' -> encode_tags([<<130>>], [1], 1);
'dB-20' -> encode_tags([<<130>>], [2], 1);
'dB-18' -> encode_tags([<<130>>], [3], 1);
'dB-16' -> encode_tags([<<130>>], [4], 1);
'dB-14' -> encode_tags([<<130>>], [5], 1);
'dB-12' -> encode_tags([<<130>>], [6], 1);
'dB-10' -> encode_tags([<<130>>], [7], 1);
'dB-8' -> encode_tags([<<130>>], [8], 1);
'dB-6' -> encode_tags([<<130>>], [9], 1);
'dB-5' -> encode_tags([<<130>>], [10], 1);
'dB-4' -> encode_tags([<<130>>], [11], 1);
'dB-3' -> encode_tags([<<130>>], [12], 1);
'dB-2' -> encode_tags([<<130>>], [13], 1);
'dB-1' -> encode_tags([<<130>>], [14], 1);
dB0 -> encode_tags([<<130>>], [15], 1);
dB1 -> encode_tags([<<130>>], [16], 1);
dB2 -> encode_tags([<<130>>], [17], 1);
dB3 -> encode_tags([<<130>>], [18], 1);
dB4 -> encode_tags([<<130>>], [19], 1);
dB5 -> encode_tags([<<130>>], [20], 1);
dB6 -> encode_tags([<<130>>], [21], 1);
dB8 -> encode_tags([<<130>>], [22], 1);
dB10 -> encode_tags([<<130>>], [23], 1);
dB12 -> encode_tags([<<130>>], [24], 1);
dB14 -> encode_tags([<<130>>], [25], 1);
dB16 -> encode_tags([<<130>>], [26], 1);
dB18 -> encode_tags([<<130>>], [27], 1);
dB20 -> encode_tags([<<130>>], [28], 1);
dB22 -> encode_tags([<<130>>], [29], 1);
dB24 -> encode_tags([<<130>>], [30], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellsToAddMod'(Tlv) ->
   'dec_CellsToAddMod'(Tlv, [16]).

'dec_CellsToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 503 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellIndividualOffset(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'CellsToAddMod', Term1, Term2, Term3}.



%%================================
%%  CellsToAddModList
%%================================
'enc_CellsToAddModList'(Val) ->
    'enc_CellsToAddModList'(Val, [<<48>>]).

'enc_CellsToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellsToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddMod'(H, [<<48>>]),
   'enc_CellsToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModList'(Tlv) ->
   'dec_CellsToAddModList'(Tlv, [16]).

'dec_CellsToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellsToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasObjectEUTRA
%%================================
'enc_MeasObjectEUTRA'(Val) ->
    'enc_MeasObjectEUTRA'(Val, [<<48>>]).

'enc_MeasObjectEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
mbw6 -> encode_tags([<<129>>], [0], 1);
mbw15 -> encode_tags([<<129>>], [1], 1);
mbw25 -> encode_tags([<<129>>], [2], 1);
mbw50 -> encode_tags([<<129>>], [3], 1);
mbw75 -> encode_tags([<<129>>], [4], 1);
mbw100 -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute neighCellConfig(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_unnamed_bit_string(2, Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute offsetFreq(5) with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_DEFAULT -> {<<>>,0};
         dB0 -> {<<>>,0};
         _ ->
            case Cindex5 of
'dB-24' -> encode_tags([<<132>>], [0], 1);
'dB-22' -> encode_tags([<<132>>], [1], 1);
'dB-20' -> encode_tags([<<132>>], [2], 1);
'dB-18' -> encode_tags([<<132>>], [3], 1);
'dB-16' -> encode_tags([<<132>>], [4], 1);
'dB-14' -> encode_tags([<<132>>], [5], 1);
'dB-12' -> encode_tags([<<132>>], [6], 1);
'dB-10' -> encode_tags([<<132>>], [7], 1);
'dB-8' -> encode_tags([<<132>>], [8], 1);
'dB-6' -> encode_tags([<<132>>], [9], 1);
'dB-5' -> encode_tags([<<132>>], [10], 1);
'dB-4' -> encode_tags([<<132>>], [11], 1);
'dB-3' -> encode_tags([<<132>>], [12], 1);
'dB-2' -> encode_tags([<<132>>], [13], 1);
'dB-1' -> encode_tags([<<132>>], [14], 1);
dB0 -> encode_tags([<<132>>], [15], 1);
dB1 -> encode_tags([<<132>>], [16], 1);
dB2 -> encode_tags([<<132>>], [17], 1);
dB3 -> encode_tags([<<132>>], [18], 1);
dB4 -> encode_tags([<<132>>], [19], 1);
dB5 -> encode_tags([<<132>>], [20], 1);
dB6 -> encode_tags([<<132>>], [21], 1);
dB8 -> encode_tags([<<132>>], [22], 1);
dB10 -> encode_tags([<<132>>], [23], 1);
dB12 -> encode_tags([<<132>>], [24], 1);
dB14 -> encode_tags([<<132>>], [25], 1);
dB16 -> encode_tags([<<132>>], [26], 1);
dB18 -> encode_tags([<<132>>], [27], 1);
dB20 -> encode_tags([<<132>>], [28], 1);
dB22 -> encode_tags([<<132>>], [29], 1);
dB24 -> encode_tags([<<132>>], [30], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(6)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute cellsToAddModList(7)   External EUTRA-RRC:CellsToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellsToAddModList'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute blackCellsToRemoveList(8)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute blackCellsToAddModList(9)   External EUTRA-RRC:BlackCellsToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BlackCellsToAddModList'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasObjectEUTRA'(Tlv) ->
   'dec_MeasObjectEUTRA'(Tlv, [16]).

'dec_MeasObjectEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute neighCellConfig(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_native_bit_string(V4, [131075]),
C1 = bit_size(Val2),
if C1 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute offsetFreq(5) with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv6};
    _ ->
        {dB0,Tlv5}
end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(6)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_CellIndexList'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute cellsToAddModList(7)   External EUTRA-RRC:CellsToAddModList OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_CellsToAddModList'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute blackCellsToRemoveList(8)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_CellIndexList'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute blackCellsToAddModList(9)   External EUTRA-RRC:BlackCellsToAddModList OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_BlackCellsToAddModList'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val3 = decode_integer(V10, []),
if 0 =< Val3, Val3 =< 503 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasObjectEUTRA', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  CellsToAddModCDMA2000
%%================================
'enc_CellsToAddModCDMA2000'(Val) ->
    'enc_CellsToAddModCDMA2000'(Val, [<<48>>]).

'enc_CellsToAddModCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellsToAddModCDMA2000'(Tlv) ->
   'dec_CellsToAddModCDMA2000'(Tlv, [16]).

'dec_CellsToAddModCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 511 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellsToAddModCDMA2000', Term1, Term2}.



%%================================
%%  CellsToAddModListCDMA2000
%%================================
'enc_CellsToAddModListCDMA2000'(Val) ->
    'enc_CellsToAddModListCDMA2000'(Val, [<<48>>]).

'enc_CellsToAddModListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellsToAddModListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModCDMA2000'(H, [<<48>>]),
   'enc_CellsToAddModListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListCDMA2000'(Tlv) ->
   'dec_CellsToAddModListCDMA2000'(Tlv, [16]).

'dec_CellsToAddModListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellsToAddModCDMA2000'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasObjectCDMA2000
%%================================
'enc_MeasObjectCDMA2000'(Val) ->
    'enc_MeasObjectCDMA2000'(Val, [<<48>>]).

'enc_MeasObjectCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
type1XRTT -> encode_tags([<<128>>], [0], 1);
typeHRPD -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqCDMA2000'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute searchWindowSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute offsetFreq(4) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(5)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute cellsToAddModList(6)   External EUTRA-RRC:CellsToAddModListCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellsToAddModListCDMA2000'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasObjectCDMA2000'(Tlv) ->
   'dec_MeasObjectCDMA2000'(Tlv, [16]).

'dec_MeasObjectCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> type1XRTT;
1 -> typeHRPD;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqCDMA2000
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CarrierFreqCDMA2000'(V2, [131073]),

%%-------------------------------------------------
%% attribute searchWindowSize(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_integer(V3, []),
if 0 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute offsetFreq(4) with type INTEGER DEFAULT = 0
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if -15 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        {0,Tlv4}
end,

%%-------------------------------------------------
%% attribute cellsToRemoveList(5)   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CellIndexList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute cellsToAddModList(6)   External EUTRA-RRC:CellsToAddModListCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_CellsToAddModListCDMA2000'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute cellForWhichToReportCGI(7) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_integer(V7, []),
if 0 =< Val3, Val3 =< 511 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasObjectCDMA2000', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  MeasIdToAddMod
%%================================
'enc_MeasIdToAddMod'(Val) ->
    'enc_MeasIdToAddMod'(Val, [<<48>>]).

'enc_MeasIdToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute measId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute measObjectId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute reportConfigId(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MeasIdToAddMod'(Tlv) ->
   'dec_MeasIdToAddMod'(Tlv, [16]).

'dec_MeasIdToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute measObjectId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute reportConfigId(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 1 =< Val3, Val3 =< 32 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MeasIdToAddMod', Term1, Term2, Term3}.



%%================================
%%  MeasIdToAddModList
%%================================
'enc_MeasIdToAddModList'(Val) ->
    'enc_MeasIdToAddModList'(Val, [<<48>>]).

'enc_MeasIdToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasIdToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasIdToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasIdToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasIdToAddMod'(H, [<<48>>]),
   'enc_MeasIdToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasIdToAddModList'(Tlv) ->
   'dec_MeasIdToAddModList'(Tlv, [16]).

'dec_MeasIdToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MeasIdToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  MeasId
%%================================
'enc_MeasId'(Val) ->
    'enc_MeasId'(Val, [<<2>>]).

'enc_MeasId'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_MeasId'(Tlv) ->
   'dec_MeasId'(Tlv, [2]).

'dec_MeasId'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MeasGapConfig
%%================================
'enc_MeasGapConfig'(Val) ->
    'enc_MeasGapConfig'(Val, []).

'enc_MeasGapConfig'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_MeasGapConfig_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MeasGapConfig_setup
%%================================
'enc_MeasGapConfig_setup'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute gapOffset(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasGapConfig_setup_gapOffset'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasGapConfig_setup_gapOffset
%%================================
'enc_MeasGapConfig_setup_gapOffset'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      gp0 ->
         encode_integer(element(2,Val), [<<128>>]);
      gp1 ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasGapConfig_setup_gapOffset'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'gp0'
    {131072, V1} -> 
        {gp0, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 39 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'gp1'
    {131073, V1} -> 
        {gp1, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 79 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_MeasGapConfig_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute gapOffset(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MeasGapConfig_setup_gapOffset'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'MeasGapConfig_setup', Term1}.



'dec_MeasGapConfig'(Tlv) ->
   'dec_MeasGapConfig'(Tlv, []).

'dec_MeasGapConfig'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_MeasGapConfig_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  ReportConfigToRemoveList
%%================================
'enc_ReportConfigToRemoveList'(Val) ->
    'enc_ReportConfigToRemoveList'(Val, [<<48>>]).

'enc_ReportConfigToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToRemoveList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ReportConfigToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReportConfigToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ReportConfigToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ReportConfigToRemoveList'(Tlv) ->
   'dec_ReportConfigToRemoveList'(Tlv, [16]).

'dec_ReportConfigToRemoveList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MeasObjectToRemoveList
%%================================
'enc_MeasObjectToRemoveList'(Val) ->
    'enc_MeasObjectToRemoveList'(Val, [<<48>>]).

'enc_MeasObjectToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToRemoveList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasObjectToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasObjectToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MeasObjectToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasObjectToRemoveList'(Tlv) ->
   'dec_MeasObjectToRemoveList'(Tlv, [16]).

'dec_MeasObjectToRemoveList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MeasIdToRemoveList
%%================================
'enc_MeasIdToRemoveList'(Val) ->
    'enc_MeasIdToRemoveList'(Val, [<<48>>]).

'enc_MeasIdToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasIdToRemoveList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MeasIdToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasIdToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MeasIdToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasIdToRemoveList'(Tlv) ->
   'dec_MeasIdToRemoveList'(Tlv, [16]).

'dec_MeasIdToRemoveList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MeasConfig
%%================================
'enc_MeasConfig'(Val) ->
    'enc_MeasConfig'(Val, [<<48>>]).

'enc_MeasConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11} = Val,

%%-------------------------------------------------
%% attribute measObjectToRemoveList(1)   External EUTRA-RRC:MeasObjectToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectToRemoveList'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute measObjectToAddModList(2)   External EUTRA-RRC:MeasObjectToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectToAddModList'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute reportConfigToRemoveList(3)   External EUTRA-RRC:ReportConfigToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReportConfigToRemoveList'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute reportConfigToAddModList(4)   External EUTRA-RRC:ReportConfigToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReportConfigToAddModList'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute measIdToRemoveList(5)   External EUTRA-RRC:MeasIdToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasIdToRemoveList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute measIdToAddModList(6)   External EUTRA-RRC:MeasIdToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasIdToAddModList'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute quantityConfig(7)   External EUTRA-RRC:QuantityConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfig'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute measGapConfig(8)   External EUTRA-RRC:MeasGapConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasGapConfig'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute s-Measure(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex9, [<<136>>])
       end,

%%-------------------------------------------------
%% attribute preRegistrationInfoHRPD(10)   External EUTRA-RRC:PreRegistrationInfoHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PreRegistrationInfoHRPD'(Cindex10, [<<169>>])
       end,

%%-------------------------------------------------
%% attribute speedStatePars(11) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasConfig_speedStatePars'(Cindex11, [<<170>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasConfig_speedStatePars
%%================================
'enc_MeasConfig_speedStatePars'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_MeasConfig_speedStatePars_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MeasConfig_speedStatePars_setup
%%================================
'enc_MeasConfig_speedStatePars_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mobilityStateParameters(1)   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MobilityStateParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute timeToTrigger-SF(2)   External EUTRA-RRC:SpeedStateScaleFactors
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SpeedStateScaleFactors'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasConfig_speedStatePars_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mobilityStateParameters(1)   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MobilityStateParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute timeToTrigger-SF(2)   External EUTRA-RRC:SpeedStateScaleFactors
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SpeedStateScaleFactors'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasConfig_speedStatePars_setup', Term1, Term2}.

'dec_MeasConfig_speedStatePars'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_MeasConfig_speedStatePars_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MeasConfig'(Tlv) ->
   'dec_MeasConfig'(Tlv, [16]).

'dec_MeasConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measObjectToRemoveList(1)   External EUTRA-RRC:MeasObjectToRemoveList OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_MeasObjectToRemoveList'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute measObjectToAddModList(2)   External EUTRA-RRC:MeasObjectToAddModList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MeasObjectToAddModList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute reportConfigToRemoveList(3)   External EUTRA-RRC:ReportConfigToRemoveList OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ReportConfigToRemoveList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute reportConfigToAddModList(4)   External EUTRA-RRC:ReportConfigToAddModList OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ReportConfigToAddModList'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute measIdToRemoveList(5)   External EUTRA-RRC:MeasIdToRemoveList OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_MeasIdToRemoveList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute measIdToAddModList(6)   External EUTRA-RRC:MeasIdToAddModList OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_MeasIdToAddModList'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute quantityConfig(7)   External EUTRA-RRC:QuantityConfig OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_QuantityConfig'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute measGapConfig(8)   External EUTRA-RRC:MeasGapConfig OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_MeasGapConfig'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute s-Measure(9) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {begin
Val1 = decode_integer(V9, []),
if 0 =< Val1, Val1 =< 97 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute preRegistrationInfoHRPD(10)   External EUTRA-RRC:PreRegistrationInfoHRPD OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_PreRegistrationInfoHRPD'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute speedStatePars(11) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_MeasConfig_speedStatePars'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

case Tlv12 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MeasConfig', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}.



%%================================
%%  Hysteresis
%%================================
'enc_Hysteresis'(Val) ->
    'enc_Hysteresis'(Val, [<<2>>]).

'enc_Hysteresis'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Hysteresis'(Tlv) ->
   'dec_Hysteresis'(Tlv, [2]).

'dec_Hysteresis'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 30 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AllowedMeasBandwidth
%%================================
'enc_AllowedMeasBandwidth'(Val) ->
    'enc_AllowedMeasBandwidth'(Val, [<<10>>]).

'enc_AllowedMeasBandwidth'(Val, TagIn) ->
case Val of
mbw6 -> encode_tags(TagIn, [0], 1);
mbw15 -> encode_tags(TagIn, [1], 1);
mbw25 -> encode_tags(TagIn, [2], 1);
mbw50 -> encode_tags(TagIn, [3], 1);
mbw75 -> encode_tags(TagIn, [4], 1);
mbw100 -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_AllowedMeasBandwidth'(Tlv) ->
   'dec_AllowedMeasBandwidth'(Tlv, [10]).

'dec_AllowedMeasBandwidth'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  T-Reselection
%%================================
'enc_T-Reselection'(Val) ->
    'enc_T-Reselection'(Val, [<<2>>]).

'enc_T-Reselection'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_T-Reselection'(Tlv) ->
   'dec_T-Reselection'(Tlv, [2]).

'dec_T-Reselection'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TrackingAreaCode
%%================================
'enc_TrackingAreaCode'(Val) ->
    'enc_TrackingAreaCode'(Val, [<<3>>]).

'enc_TrackingAreaCode'(Val, TagIn) ->
encode_unnamed_bit_string(16, Val, TagIn).


'dec_TrackingAreaCode'(Tlv) ->
   'dec_TrackingAreaCode'(Tlv, [3]).

'dec_TrackingAreaCode'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SystemTimeInfoCDMA2000
%%================================
'enc_SystemTimeInfoCDMA2000'(Val) ->
    'enc_SystemTimeInfoCDMA2000'(Val, [<<48>>]).

'enc_SystemTimeInfoCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cdma-EUTRA-Synchronisation(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cdma-SystemTime(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemTimeInfoCDMA2000_cdma-SystemTime
%%================================
'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      synchronousSystemTime ->
         encode_unnamed_bit_string(39, element(2,Val), [<<128>>]);
      asynchronousSystemTime ->
         encode_unnamed_bit_string(49, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'synchronousSystemTime'
    {131072, V1} -> 
        {synchronousSystemTime, begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 39 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'asynchronousSystemTime'
    {131073, V1} -> 
        {asynchronousSystemTime, begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 49 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SystemTimeInfoCDMA2000'(Tlv) ->
   'dec_SystemTimeInfoCDMA2000'(Tlv, [16]).

'dec_SystemTimeInfoCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cdma-EUTRA-Synchronisation(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute cdma-SystemTime(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemTimeInfoCDMA2000', Term1, Term2}.



%%================================
%%  SpeedStateScaleFactors
%%================================
'enc_SpeedStateScaleFactors'(Val) ->
    'enc_SpeedStateScaleFactors'(Val, [<<48>>]).

'enc_SpeedStateScaleFactors'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sf-Medium(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
oDot25 -> encode_tags([<<128>>], [0], 1);
oDot5 -> encode_tags([<<128>>], [1], 1);
oDot75 -> encode_tags([<<128>>], [2], 1);
lDot0 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute sf-High(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
oDot25 -> encode_tags([<<129>>], [0], 1);
oDot5 -> encode_tags([<<129>>], [1], 1);
oDot75 -> encode_tags([<<129>>], [2], 1);
lDot0 -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SpeedStateScaleFactors'(Tlv) ->
   'dec_SpeedStateScaleFactors'(Tlv, [16]).

'dec_SpeedStateScaleFactors'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sf-Medium(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> oDot25;
1 -> oDot5;
2 -> oDot75;
3 -> lDot0;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute sf-High(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> oDot25;
1 -> oDot5;
2 -> oDot75;
3 -> lDot0;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SpeedStateScaleFactors', Term1, Term2}.



%%================================
%%  ReselectionThreshold
%%================================
'enc_ReselectionThreshold'(Val) ->
    'enc_ReselectionThreshold'(Val, [<<2>>]).

'enc_ReselectionThreshold'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ReselectionThreshold'(Tlv) ->
   'dec_ReselectionThreshold'(Tlv, [2]).

'dec_ReselectionThreshold'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 31 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Q-OffsetRangeInterRAT
%%================================
'enc_Q-OffsetRangeInterRAT'(Val) ->
    'enc_Q-OffsetRangeInterRAT'(Val, [<<2>>]).

'enc_Q-OffsetRangeInterRAT'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Q-OffsetRangeInterRAT'(Tlv) ->
   'dec_Q-OffsetRangeInterRAT'(Tlv, [2]).

'dec_Q-OffsetRangeInterRAT'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -15 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Q-OffsetRange
%%================================
'enc_Q-OffsetRange'(Val) ->
    'enc_Q-OffsetRange'(Val, [<<10>>]).

'enc_Q-OffsetRange'(Val, TagIn) ->
case Val of
'dB-24' -> encode_tags(TagIn, [0], 1);
'dB-22' -> encode_tags(TagIn, [1], 1);
'dB-20' -> encode_tags(TagIn, [2], 1);
'dB-18' -> encode_tags(TagIn, [3], 1);
'dB-16' -> encode_tags(TagIn, [4], 1);
'dB-14' -> encode_tags(TagIn, [5], 1);
'dB-12' -> encode_tags(TagIn, [6], 1);
'dB-10' -> encode_tags(TagIn, [7], 1);
'dB-8' -> encode_tags(TagIn, [8], 1);
'dB-6' -> encode_tags(TagIn, [9], 1);
'dB-5' -> encode_tags(TagIn, [10], 1);
'dB-4' -> encode_tags(TagIn, [11], 1);
'dB-3' -> encode_tags(TagIn, [12], 1);
'dB-2' -> encode_tags(TagIn, [13], 1);
'dB-1' -> encode_tags(TagIn, [14], 1);
dB0 -> encode_tags(TagIn, [15], 1);
dB1 -> encode_tags(TagIn, [16], 1);
dB2 -> encode_tags(TagIn, [17], 1);
dB3 -> encode_tags(TagIn, [18], 1);
dB4 -> encode_tags(TagIn, [19], 1);
dB5 -> encode_tags(TagIn, [20], 1);
dB6 -> encode_tags(TagIn, [21], 1);
dB8 -> encode_tags(TagIn, [22], 1);
dB10 -> encode_tags(TagIn, [23], 1);
dB12 -> encode_tags(TagIn, [24], 1);
dB14 -> encode_tags(TagIn, [25], 1);
dB16 -> encode_tags(TagIn, [26], 1);
dB18 -> encode_tags(TagIn, [27], 1);
dB20 -> encode_tags(TagIn, [28], 1);
dB22 -> encode_tags(TagIn, [29], 1);
dB24 -> encode_tags(TagIn, [30], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Q-OffsetRange'(Tlv) ->
   'dec_Q-OffsetRange'(Tlv, [10]).

'dec_Q-OffsetRange'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Q-RxLevMin
%%================================
'enc_Q-RxLevMin'(Val) ->
    'enc_Q-RxLevMin'(Val, [<<2>>]).

'enc_Q-RxLevMin'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Q-RxLevMin'(Tlv) ->
   'dec_Q-RxLevMin'(Tlv, [2]).

'dec_Q-RxLevMin'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -70 =< Val1, Val1 =< -22 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PreRegistrationZoneIdHRPD
%%================================
'enc_PreRegistrationZoneIdHRPD'(Val) ->
    'enc_PreRegistrationZoneIdHRPD'(Val, [<<2>>]).

'enc_PreRegistrationZoneIdHRPD'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PreRegistrationZoneIdHRPD'(Tlv) ->
   'dec_PreRegistrationZoneIdHRPD'(Tlv, [2]).

'dec_PreRegistrationZoneIdHRPD'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SecondaryPreRegistrationZoneIdListHRPD
%%================================
'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val) ->
    'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val, [<<48>>]).

'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SecondaryPreRegistrationZoneIdListHRPD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SecondaryPreRegistrationZoneIdListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SecondaryPreRegistrationZoneIdListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_SecondaryPreRegistrationZoneIdListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SecondaryPreRegistrationZoneIdListHRPD'(Tlv) ->
   'dec_SecondaryPreRegistrationZoneIdListHRPD'(Tlv, [16]).

'dec_SecondaryPreRegistrationZoneIdListHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  PreRegistrationInfoHRPD
%%================================
'enc_PreRegistrationInfoHRPD'(Val) ->
    'enc_PreRegistrationInfoHRPD'(Val, [<<48>>]).

'enc_PreRegistrationInfoHRPD'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute preRegistrationAllowed(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute preRegistrationZoneId(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute secondaryPreRegistrationZoneIdList(3)   External EUTRA-RRC:SecondaryPreRegistrationZoneIdListHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecondaryPreRegistrationZoneIdListHRPD'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PreRegistrationInfoHRPD'(Tlv) ->
   'dec_PreRegistrationInfoHRPD'(Tlv, [16]).

'dec_PreRegistrationInfoHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preRegistrationAllowed(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute preRegistrationZoneId(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute secondaryPreRegistrationZoneIdList(3)   External EUTRA-RRC:SecondaryPreRegistrationZoneIdListHRPD OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SecondaryPreRegistrationZoneIdListHRPD'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'PreRegistrationInfoHRPD', Term1, Term2, Term3}.



%%================================
%%  MCC-MNC-Digit
%%================================
'enc_MCC-MNC-Digit'(Val) ->
    'enc_MCC-MNC-Digit'(Val, [<<2>>]).

'enc_MCC-MNC-Digit'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_MCC-MNC-Digit'(Tlv) ->
   'dec_MCC-MNC-Digit'(Tlv, [2]).

'dec_MCC-MNC-Digit'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MNC
%%================================
'enc_MNC'(Val) ->
    'enc_MNC'(Val, [<<48>>]).

'enc_MNC'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MNC_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MNC_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MNC_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MNC_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MNC'(Tlv) ->
   'dec_MNC'(Tlv, [16]).

'dec_MNC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  MCC
%%================================
'enc_MCC'(Val) ->
    'enc_MCC'(Val, [<<48>>]).

'enc_MCC'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MCC_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MCC_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MCC_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_MCC_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MCC'(Tlv) ->
   'dec_MCC'(Tlv, [16]).

'dec_MCC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  PLMN-Identity
%%================================
'enc_PLMN-Identity'(Val) ->
    'enc_PLMN-Identity'(Val, [<<48>>]).

'enc_PLMN-Identity'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mcc(1)   External EUTRA-RRC:MCC OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MCC'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute mnc(2)   External EUTRA-RRC:MNC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MNC'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PLMN-Identity'(Tlv) ->
   'dec_PLMN-Identity'(Tlv, [16]).

'dec_PLMN-Identity'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mcc(1)   External EUTRA-RRC:MCC OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_MCC'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute mnc(2)   External EUTRA-RRC:MNC
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MNC'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PLMN-Identity', Term1, Term2}.



%%================================
%%  PhysCellIdUTRA-TDD
%%================================
'enc_PhysCellIdUTRA-TDD'(Val) ->
    'enc_PhysCellIdUTRA-TDD'(Val, [<<2>>]).

'enc_PhysCellIdUTRA-TDD'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PhysCellIdUTRA-TDD'(Tlv) ->
   'dec_PhysCellIdUTRA-TDD'(Tlv, [2]).

'dec_PhysCellIdUTRA-TDD'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 127 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PhysCellIdUTRA-FDD
%%================================
'enc_PhysCellIdUTRA-FDD'(Val) ->
    'enc_PhysCellIdUTRA-FDD'(Val, [<<2>>]).

'enc_PhysCellIdUTRA-FDD'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PhysCellIdUTRA-FDD'(Tlv) ->
   'dec_PhysCellIdUTRA-FDD'(Tlv, [2]).

'dec_PhysCellIdUTRA-FDD'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PhysCellIdGERAN
%%================================
'enc_PhysCellIdGERAN'(Val) ->
    'enc_PhysCellIdGERAN'(Val, [<<48>>]).

'enc_PhysCellIdGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute networkColourCode(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(3, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute baseStationColourCode(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(3, Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PhysCellIdGERAN'(Tlv) ->
   'dec_PhysCellIdGERAN'(Tlv, [16]).

'dec_PhysCellIdGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute networkColourCode(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute baseStationColourCode(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 3 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PhysCellIdGERAN', Term1, Term2}.



%%================================
%%  PhysCellIdCDMA2000
%%================================
'enc_PhysCellIdCDMA2000'(Val) ->
    'enc_PhysCellIdCDMA2000'(Val, [<<2>>]).

'enc_PhysCellIdCDMA2000'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PhysCellIdCDMA2000'(Tlv) ->
   'dec_PhysCellIdCDMA2000'(Tlv, [2]).

'dec_PhysCellIdCDMA2000'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PhysCellIdRange
%%================================
'enc_PhysCellIdRange'(Val) ->
    'enc_PhysCellIdRange'(Val, [<<48>>]).

'enc_PhysCellIdRange'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute start(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute range(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
n4 -> encode_tags([<<129>>], [0], 1);
n8 -> encode_tags([<<129>>], [1], 1);
n12 -> encode_tags([<<129>>], [2], 1);
n16 -> encode_tags([<<129>>], [3], 1);
n24 -> encode_tags([<<129>>], [4], 1);
n32 -> encode_tags([<<129>>], [5], 1);
n48 -> encode_tags([<<129>>], [6], 1);
n64 -> encode_tags([<<129>>], [7], 1);
n84 -> encode_tags([<<129>>], [8], 1);
n96 -> encode_tags([<<129>>], [9], 1);
n128 -> encode_tags([<<129>>], [10], 1);
n168 -> encode_tags([<<129>>], [11], 1);
n252 -> encode_tags([<<129>>], [12], 1);
n504 -> encode_tags([<<129>>], [13], 1);
spare2 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PhysCellIdRange'(Tlv) ->
   'dec_PhysCellIdRange'(Tlv, [16]).

'dec_PhysCellIdRange'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute start(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute range(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n24;
5 -> n32;
6 -> n48;
7 -> n64;
8 -> n84;
9 -> n96;
10 -> n128;
11 -> n168;
12 -> n252;
13 -> n504;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PhysCellIdRange', Term1, Term2}.



%%================================
%%  PhysCellId
%%================================
'enc_PhysCellId'(Val) ->
    'enc_PhysCellId'(Val, [<<2>>]).

'enc_PhysCellId'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PhysCellId'(Tlv) ->
   'dec_PhysCellId'(Tlv, [2]).

'dec_PhysCellId'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MobilityStateParameters
%%================================
'enc_MobilityStateParameters'(Val) ->
    'enc_MobilityStateParameters'(Val, [<<48>>]).

'enc_MobilityStateParameters'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute t-Evaluation(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
s30 -> encode_tags([<<128>>], [0], 1);
s60 -> encode_tags([<<128>>], [1], 1);
s120 -> encode_tags([<<128>>], [2], 1);
s180 -> encode_tags([<<128>>], [3], 1);
s240 -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute t-HystNormal(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
s30 -> encode_tags([<<129>>], [0], 1);
s60 -> encode_tags([<<129>>], [1], 1);
s120 -> encode_tags([<<129>>], [2], 1);
s180 -> encode_tags([<<129>>], [3], 1);
s240 -> encode_tags([<<129>>], [4], 1);
spare3 -> encode_tags([<<129>>], [5], 1);
spare2 -> encode_tags([<<129>>], [6], 1);
spare1 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute n-CellChangeMedium(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute n-CellChangeHigh(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MobilityStateParameters'(Tlv) ->
   'dec_MobilityStateParameters'(Tlv, [16]).

'dec_MobilityStateParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t-Evaluation(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> s30;
1 -> s60;
2 -> s120;
3 -> s180;
4 -> s240;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute t-HystNormal(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> s30;
1 -> s60;
2 -> s120;
3 -> s180;
4 -> s240;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute n-CellChangeMedium(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 1 =< Val1, Val1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute n-CellChangeHigh(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_integer(V4, [131075]),
if 1 =< Val2, Val2 =< 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MobilityStateParameters', Term1, Term2, Term3, Term4}.



%%================================
%%  MobilityParametersCDMA2000
%%================================
'enc_MobilityParametersCDMA2000'(Val) ->
    'enc_MobilityParametersCDMA2000'(Val, [<<4>>]).

'enc_MobilityParametersCDMA2000'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MobilityParametersCDMA2000'(Tlv) ->
   'dec_MobilityParametersCDMA2000'(Tlv, [4]).

'dec_MobilityParametersCDMA2000'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  CarrierFreqEUTRA
%%================================
'enc_CarrierFreqEUTRA'(Val) ->
    'enc_CarrierFreqEUTRA'(Val, [<<48>>]).

'enc_CarrierFreqEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute dl-CarrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ul-CarrierFreq(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierFreqEUTRA'(Tlv) ->
   'dec_CarrierFreqEUTRA'(Tlv, [16]).

'dec_CarrierFreqEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dl-CarrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute ul-CarrierFreq(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CarrierFreqEUTRA', Term1, Term2}.



%%================================
%%  CarrierBandwidthEUTRA
%%================================
'enc_CarrierBandwidthEUTRA'(Val) ->
    'enc_CarrierBandwidthEUTRA'(Val, [<<48>>]).

'enc_CarrierBandwidthEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute dl-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n6 -> encode_tags([<<128>>], [0], 1);
n15 -> encode_tags([<<128>>], [1], 1);
n25 -> encode_tags([<<128>>], [2], 1);
n50 -> encode_tags([<<128>>], [3], 1);
n75 -> encode_tags([<<128>>], [4], 1);
n100 -> encode_tags([<<128>>], [5], 1);
spare10 -> encode_tags([<<128>>], [6], 1);
spare9 -> encode_tags([<<128>>], [7], 1);
spare8 -> encode_tags([<<128>>], [8], 1);
spare7 -> encode_tags([<<128>>], [9], 1);
spare6 -> encode_tags([<<128>>], [10], 1);
spare5 -> encode_tags([<<128>>], [11], 1);
spare4 -> encode_tags([<<128>>], [12], 1);
spare3 -> encode_tags([<<128>>], [13], 1);
spare2 -> encode_tags([<<128>>], [14], 1);
spare1 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ul-Bandwidth(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
n6 -> encode_tags([<<129>>], [0], 1);
n15 -> encode_tags([<<129>>], [1], 1);
n25 -> encode_tags([<<129>>], [2], 1);
n50 -> encode_tags([<<129>>], [3], 1);
n75 -> encode_tags([<<129>>], [4], 1);
n100 -> encode_tags([<<129>>], [5], 1);
spare10 -> encode_tags([<<129>>], [6], 1);
spare9 -> encode_tags([<<129>>], [7], 1);
spare8 -> encode_tags([<<129>>], [8], 1);
spare7 -> encode_tags([<<129>>], [9], 1);
spare6 -> encode_tags([<<129>>], [10], 1);
spare5 -> encode_tags([<<129>>], [11], 1);
spare4 -> encode_tags([<<129>>], [12], 1);
spare3 -> encode_tags([<<129>>], [13], 1);
spare2 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierBandwidthEUTRA'(Tlv) ->
   'dec_CarrierBandwidthEUTRA'(Tlv, [16]).

'dec_CarrierBandwidthEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dl-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
6 -> spare10;
7 -> spare9;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ul-Bandwidth(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
6 -> spare10;
7 -> spare9;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CarrierBandwidthEUTRA', Term1, Term2}.



%%================================
%%  MobilityControlInfo
%%================================
'enc_MobilityControlInfo'(Val) ->
    'enc_MobilityControlInfo'(Val, [<<48>>]).

'enc_MobilityControlInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute targetPhysCellId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqEUTRA'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute carrierBandwidth(3)   External EUTRA-RRC:CarrierBandwidthEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierBandwidthEUTRA'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute additionalSpectrumEmission(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute t304(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
ms50 -> encode_tags([<<132>>], [0], 1);
ms100 -> encode_tags([<<132>>], [1], 1);
ms150 -> encode_tags([<<132>>], [2], 1);
ms200 -> encode_tags([<<132>>], [3], 1);
ms500 -> encode_tags([<<132>>], [4], 1);
ms1000 -> encode_tags([<<132>>], [5], 1);
ms2000 -> encode_tags([<<132>>], [6], 1);
spare1 -> encode_tags([<<132>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute newUE-Identity(6) with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_unnamed_bit_string(16, Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute radioResourceConfigCommon(7)   External EUTRA-RRC:RadioResourceConfigCommon
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_RadioResourceConfigCommon'(Cindex7, [<<166>>]),

%%-------------------------------------------------
%% attribute rach-ConfigDedicated(8)   External EUTRA-RRC:RACH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigDedicated'(Cindex8, [<<167>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MobilityControlInfo'(Tlv) ->
   'dec_MobilityControlInfo'(Tlv, [16]).

'dec_MobilityControlInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute targetPhysCellId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqEUTRA OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CarrierFreqEUTRA'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute carrierBandwidth(3)   External EUTRA-RRC:CarrierBandwidthEUTRA OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CarrierBandwidthEUTRA'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute additionalSpectrumEmission(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if 1 =< Val2, Val2 =< 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute t304(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms200;
4 -> ms500;
5 -> ms1000;
6 -> ms2000;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute newUE-Identity(6) with type BIT STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val3 = decode_native_bit_string(V6, [131077]),
C1 = bit_size(Val3),
if C1 =:= 16 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute radioResourceConfigCommon(7)   External EUTRA-RRC:RadioResourceConfigCommon
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = 'dec_RadioResourceConfigCommon'(V7, [131078]),

%%-------------------------------------------------
%% attribute rach-ConfigDedicated(8)   External EUTRA-RRC:RACH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_RACH-ConfigDedicated'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MobilityControlInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



%%================================
%%  CellGlobalIdCDMA2000
%%================================
'enc_CellGlobalIdCDMA2000'(Val) ->
    'enc_CellGlobalIdCDMA2000'(Val, []).

'enc_CellGlobalIdCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      cellGlobalId1XRTT ->
         encode_unnamed_bit_string(47, element(2,Val), [<<128>>]);
      cellGlobalIdHRPD ->
         encode_unnamed_bit_string(128, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_CellGlobalIdCDMA2000'(Tlv) ->
   'dec_CellGlobalIdCDMA2000'(Tlv, []).

'dec_CellGlobalIdCDMA2000'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'cellGlobalId1XRTT'
    {131072, V1} -> 
        {cellGlobalId1XRTT, begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 47 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'cellGlobalIdHRPD'
    {131073, V1} -> 
        {cellGlobalIdHRPD, begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 128 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CellGlobalIdGERAN
%%================================
'enc_CellGlobalIdGERAN'(Val) ->
    'enc_CellGlobalIdGERAN'(Val, [<<48>>]).

'enc_CellGlobalIdGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute locationAreaCode(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cellIdentity(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(16, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellGlobalIdGERAN'(Tlv) ->
   'dec_CellGlobalIdGERAN'(Tlv, [16]).

'dec_CellGlobalIdGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PLMN-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute locationAreaCode(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellIdentity(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_native_bit_string(V3, [131074]),
C2 = bit_size(Val2),
if C2 =:= 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'CellGlobalIdGERAN', Term1, Term2, Term3}.



%%================================
%%  CellGlobalIdUTRA
%%================================
'enc_CellGlobalIdUTRA'(Val) ->
    'enc_CellGlobalIdUTRA'(Val, [<<48>>]).

'enc_CellGlobalIdUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellIdentity(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(28, Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellGlobalIdUTRA'(Tlv) ->
   'dec_CellGlobalIdUTRA'(Tlv, [16]).

'dec_CellGlobalIdUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PLMN-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellIdentity(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 28 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellGlobalIdUTRA', Term1, Term2}.



%%================================
%%  CellGlobalIdEUTRA
%%================================
'enc_CellGlobalIdEUTRA'(Val) ->
    'enc_CellGlobalIdEUTRA'(Val, [<<48>>]).

'enc_CellGlobalIdEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellIdentity(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(28, Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellGlobalIdEUTRA'(Tlv) ->
   'dec_CellGlobalIdEUTRA'(Tlv, [16]).

'dec_CellGlobalIdEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PLMN-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellIdentity(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 28 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellGlobalIdEUTRA', Term1, Term2}.



%%================================
%%  CSFB-RegistrationParam1XRTT
%%================================
'enc_CSFB-RegistrationParam1XRTT'(Val) ->
    'enc_CSFB-RegistrationParam1XRTT'(Val, [<<48>>]).

'enc_CSFB-RegistrationParam1XRTT'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13} = Val,

%%-------------------------------------------------
%% attribute sid(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(15, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nid(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute multipleSID(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute multipleNID(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute homeReg(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute foreignSIDReg(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute foreignNIDReg(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute parameterReg(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute powerUpReg(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

%%-------------------------------------------------
%% attribute registrationPeriod(10) with type BIT STRING
%%-------------------------------------------------
   {EncBytes10,EncLen10} = encode_unnamed_bit_string(7, Cindex10, [<<137>>]),

%%-------------------------------------------------
%% attribute registrationZone(11) with type BIT STRING
%%-------------------------------------------------
   {EncBytes11,EncLen11} = encode_unnamed_bit_string(12, Cindex11, [<<138>>]),

%%-------------------------------------------------
%% attribute totalZone(12) with type BIT STRING
%%-------------------------------------------------
   {EncBytes12,EncLen12} = encode_unnamed_bit_string(3, Cindex12, [<<139>>]),

%%-------------------------------------------------
%% attribute zoneTimer(13) with type BIT STRING
%%-------------------------------------------------
   {EncBytes13,EncLen13} = encode_unnamed_bit_string(3, Cindex13, [<<140>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CSFB-RegistrationParam1XRTT'(Tlv) ->
   'dec_CSFB-RegistrationParam1XRTT'(Tlv, [16]).

'dec_CSFB-RegistrationParam1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sid(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nid(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute multipleSID(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute multipleNID(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute homeReg(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute foreignSIDReg(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute foreignNIDReg(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute parameterReg(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute powerUpReg(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

%%-------------------------------------------------
%% attribute registrationPeriod(10) with type BIT STRING
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = begin
Val3 = decode_native_bit_string(V10, [131081]),
C3 = bit_size(Val3),
if C3 =:= 7 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute registrationZone(11) with type BIT STRING
%%-------------------------------------------------
[V11|Tlv12] = Tlv11, 
Term11 = begin
Val4 = decode_native_bit_string(V11, [131082]),
C4 = bit_size(Val4),
if C4 =:= 12 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute totalZone(12) with type BIT STRING
%%-------------------------------------------------
[V12|Tlv13] = Tlv12, 
Term12 = begin
Val5 = decode_native_bit_string(V12, [131083]),
C5 = bit_size(Val5),
if C5 =:= 3 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute zoneTimer(13) with type BIT STRING
%%-------------------------------------------------
[V13|Tlv14] = Tlv13, 
Term13 = begin
Val6 = decode_native_bit_string(V13, [131084]),
C6 = bit_size(Val6),
if C6 =:= 3 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv14 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv14}}}) % extra fields not allowed
end,
   {'CSFB-RegistrationParam1XRTT', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}.



%%================================
%%  CellReselectionPriority
%%================================
'enc_CellReselectionPriority'(Val) ->
    'enc_CellReselectionPriority'(Val, [<<2>>]).

'enc_CellReselectionPriority'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CellReselectionPriority'(Tlv) ->
   'dec_CellReselectionPriority'(Tlv, [2]).

'dec_CellReselectionPriority'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CellIndex
%%================================
'enc_CellIndex'(Val) ->
    'enc_CellIndex'(Val, [<<2>>]).

'enc_CellIndex'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_CellIndex'(Tlv) ->
   'dec_CellIndex'(Tlv, [2]).

'dec_CellIndex'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CellIndexList
%%================================
'enc_CellIndexList'(Val) ->
    'enc_CellIndexList'(Val, [<<48>>]).

'enc_CellIndexList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellIndexList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellIndexList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellIndexList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_CellIndexList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellIndexList'(Tlv) ->
   'dec_CellIndexList'(Tlv, [16]).

'dec_CellIndexList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  CellIdentity
%%================================
'enc_CellIdentity'(Val) ->
    'enc_CellIdentity'(Val, [<<3>>]).

'enc_CellIdentity'(Val, TagIn) ->
encode_unnamed_bit_string(28, Val, TagIn).


'dec_CellIdentity'(Tlv) ->
   'dec_CellIdentity'(Tlv, [3]).

'dec_CellIdentity'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 28 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CDMA2000-Type
%%================================
'enc_CDMA2000-Type'(Val) ->
    'enc_CDMA2000-Type'(Val, [<<10>>]).

'enc_CDMA2000-Type'(Val, TagIn) ->
case Val of
type1XRTT -> encode_tags(TagIn, [0], 1);
typeHRPD -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CDMA2000-Type'(Tlv) ->
   'dec_CDMA2000-Type'(Tlv, [10]).

'dec_CDMA2000-Type'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> type1XRTT;
1 -> typeHRPD;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ExplicitListOfARFCNs
%%================================
'enc_ExplicitListOfARFCNs'(Val) ->
    'enc_ExplicitListOfARFCNs'(Val, [<<48>>]).

'enc_ExplicitListOfARFCNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ExplicitListOfARFCNs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ExplicitListOfARFCNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ExplicitListOfARFCNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_ExplicitListOfARFCNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ExplicitListOfARFCNs'(Tlv) ->
   'dec_ExplicitListOfARFCNs'(Tlv, [16]).

'dec_ExplicitListOfARFCNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 1023 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  CarrierFreqsGERAN
%%================================
'enc_CarrierFreqsGERAN'(Val) ->
    'enc_CarrierFreqsGERAN'(Val, [<<48>>]).

'enc_CarrierFreqsGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute startingARFCN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute bandIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
dcs1800 -> encode_tags([<<129>>], [0], 1);
pcs1900 -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute followingARFCNs(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_CarrierFreqsGERAN_followingARFCNs'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CarrierFreqsGERAN_followingARFCNs
%%================================
'enc_CarrierFreqsGERAN_followingARFCNs'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitListOfARFCNs ->
         'enc_ExplicitListOfARFCNs'(element(2,Val), [<<160>>]);
      equallySpacedARFCNs ->
         'enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(element(2,Val), [<<161>>]);
      variableBitMapOfARFCNs ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs
%%================================
'enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute arfcn-Spacing(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute numberOfFollowingARFCNs(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute arfcn-Spacing(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute numberOfFollowingARFCNs(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 31 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs', Term1, Term2}.

'dec_CarrierFreqsGERAN_followingARFCNs'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'explicitListOfARFCNs'
    {131072, V1} -> 
        {explicitListOfARFCNs, 'dec_ExplicitListOfARFCNs'(V1, [])};


%% 'equallySpacedARFCNs'
    {131073, V1} -> 
        {equallySpacedARFCNs, 'dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(V1, [])};


%% 'variableBitMapOfARFCNs'
    {131074, V1} -> 
        {variableBitMapOfARFCNs, begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_CarrierFreqsGERAN'(Tlv) ->
   'dec_CarrierFreqsGERAN'(Tlv, [16]).

'dec_CarrierFreqsGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute startingARFCN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 1023 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute bandIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> dcs1800;
1 -> pcs1900;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute followingARFCNs(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_CarrierFreqsGERAN_followingARFCNs'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'CarrierFreqsGERAN', Term1, Term2, Term3}.



%%================================
%%  CarrierFreqGERAN
%%================================
'enc_CarrierFreqGERAN'(Val) ->
    'enc_CarrierFreqGERAN'(Val, [<<48>>]).

'enc_CarrierFreqGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute arfcn(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute bandIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
dcs1800 -> encode_tags([<<129>>], [0], 1);
pcs1900 -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierFreqGERAN'(Tlv) ->
   'dec_CarrierFreqGERAN'(Tlv, [16]).

'dec_CarrierFreqGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute arfcn(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 1023 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute bandIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> dcs1800;
1 -> pcs1900;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CarrierFreqGERAN', Term1, Term2}.



%%================================
%%  CarrierFreqCDMA2000
%%================================
'enc_CarrierFreqCDMA2000'(Val) ->
    'enc_CarrierFreqCDMA2000'(Val, [<<48>>]).

'enc_CarrierFreqCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bc0 -> encode_tags([<<128>>], [0], 1);
bc1 -> encode_tags([<<128>>], [1], 1);
bc2 -> encode_tags([<<128>>], [2], 1);
bc3 -> encode_tags([<<128>>], [3], 1);
bc4 -> encode_tags([<<128>>], [4], 1);
bc5 -> encode_tags([<<128>>], [5], 1);
bc6 -> encode_tags([<<128>>], [6], 1);
bc7 -> encode_tags([<<128>>], [7], 1);
bc8 -> encode_tags([<<128>>], [8], 1);
bc9 -> encode_tags([<<128>>], [9], 1);
bc10 -> encode_tags([<<128>>], [10], 1);
bc11 -> encode_tags([<<128>>], [11], 1);
bc12 -> encode_tags([<<128>>], [12], 1);
bc13 -> encode_tags([<<128>>], [13], 1);
bc14 -> encode_tags([<<128>>], [14], 1);
bc15 -> encode_tags([<<128>>], [15], 1);
bc16 -> encode_tags([<<128>>], [16], 1);
bc17 -> encode_tags([<<128>>], [17], 1);
spare14 -> encode_tags([<<128>>], [18], 1);
spare13 -> encode_tags([<<128>>], [19], 1);
spare12 -> encode_tags([<<128>>], [20], 1);
spare11 -> encode_tags([<<128>>], [21], 1);
spare10 -> encode_tags([<<128>>], [22], 1);
spare9 -> encode_tags([<<128>>], [23], 1);
spare8 -> encode_tags([<<128>>], [24], 1);
spare7 -> encode_tags([<<128>>], [25], 1);
spare6 -> encode_tags([<<128>>], [26], 1);
spare5 -> encode_tags([<<128>>], [27], 1);
spare4 -> encode_tags([<<128>>], [28], 1);
spare3 -> encode_tags([<<128>>], [29], 1);
spare2 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute arfcn(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierFreqCDMA2000'(Tlv) ->
   'dec_CarrierFreqCDMA2000'(Tlv, [16]).

'dec_CarrierFreqCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute arfcn(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CarrierFreqCDMA2000', Term1, Term2}.



%%================================
%%  BandIndicatorGERAN
%%================================
'enc_BandIndicatorGERAN'(Val) ->
    'enc_BandIndicatorGERAN'(Val, [<<10>>]).

'enc_BandIndicatorGERAN'(Val, TagIn) ->
case Val of
dcs1800 -> encode_tags(TagIn, [0], 1);
pcs1900 -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_BandIndicatorGERAN'(Tlv) ->
   'dec_BandIndicatorGERAN'(Tlv, [10]).

'dec_BandIndicatorGERAN'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> dcs1800;
1 -> pcs1900;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  BandclassCDMA2000
%%================================
'enc_BandclassCDMA2000'(Val) ->
    'enc_BandclassCDMA2000'(Val, [<<10>>]).

'enc_BandclassCDMA2000'(Val, TagIn) ->
case Val of
bc0 -> encode_tags(TagIn, [0], 1);
bc1 -> encode_tags(TagIn, [1], 1);
bc2 -> encode_tags(TagIn, [2], 1);
bc3 -> encode_tags(TagIn, [3], 1);
bc4 -> encode_tags(TagIn, [4], 1);
bc5 -> encode_tags(TagIn, [5], 1);
bc6 -> encode_tags(TagIn, [6], 1);
bc7 -> encode_tags(TagIn, [7], 1);
bc8 -> encode_tags(TagIn, [8], 1);
bc9 -> encode_tags(TagIn, [9], 1);
bc10 -> encode_tags(TagIn, [10], 1);
bc11 -> encode_tags(TagIn, [11], 1);
bc12 -> encode_tags(TagIn, [12], 1);
bc13 -> encode_tags(TagIn, [13], 1);
bc14 -> encode_tags(TagIn, [14], 1);
bc15 -> encode_tags(TagIn, [15], 1);
bc16 -> encode_tags(TagIn, [16], 1);
bc17 -> encode_tags(TagIn, [17], 1);
spare14 -> encode_tags(TagIn, [18], 1);
spare13 -> encode_tags(TagIn, [19], 1);
spare12 -> encode_tags(TagIn, [20], 1);
spare11 -> encode_tags(TagIn, [21], 1);
spare10 -> encode_tags(TagIn, [22], 1);
spare9 -> encode_tags(TagIn, [23], 1);
spare8 -> encode_tags(TagIn, [24], 1);
spare7 -> encode_tags(TagIn, [25], 1);
spare6 -> encode_tags(TagIn, [26], 1);
spare5 -> encode_tags(TagIn, [27], 1);
spare4 -> encode_tags(TagIn, [28], 1);
spare3 -> encode_tags(TagIn, [29], 1);
spare2 -> encode_tags(TagIn, [30], 1);
spare1 -> encode_tags(TagIn, [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_BandclassCDMA2000'(Tlv) ->
   'dec_BandclassCDMA2000'(Tlv, [10]).

'dec_BandclassCDMA2000'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ARFCN-ValueUTRA
%%================================
'enc_ARFCN-ValueUTRA'(Val) ->
    'enc_ARFCN-ValueUTRA'(Val, [<<2>>]).

'enc_ARFCN-ValueUTRA'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ARFCN-ValueUTRA'(Tlv) ->
   'dec_ARFCN-ValueUTRA'(Tlv, [2]).

'dec_ARFCN-ValueUTRA'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ARFCN-ValueGERAN
%%================================
'enc_ARFCN-ValueGERAN'(Val) ->
    'enc_ARFCN-ValueGERAN'(Val, [<<2>>]).

'enc_ARFCN-ValueGERAN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ARFCN-ValueGERAN'(Tlv) ->
   'dec_ARFCN-ValueGERAN'(Tlv, [2]).

'dec_ARFCN-ValueGERAN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 1023 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ARFCN-ValueEUTRA
%%================================
'enc_ARFCN-ValueEUTRA'(Val) ->
    'enc_ARFCN-ValueEUTRA'(Val, [<<2>>]).

'enc_ARFCN-ValueEUTRA'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ARFCN-ValueEUTRA'(Tlv) ->
   'dec_ARFCN-ValueEUTRA'(Tlv, [2]).

'dec_ARFCN-ValueEUTRA'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ARFCN-ValueCDMA2000
%%================================
'enc_ARFCN-ValueCDMA2000'(Val) ->
    'enc_ARFCN-ValueCDMA2000'(Val, [<<2>>]).

'enc_ARFCN-ValueCDMA2000'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ARFCN-ValueCDMA2000'(Tlv) ->
   'dec_ARFCN-ValueCDMA2000'(Tlv, [2]).

'dec_ARFCN-ValueCDMA2000'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AdditionalSpectrumEmission
%%================================
'enc_AdditionalSpectrumEmission'(Val) ->
    'enc_AdditionalSpectrumEmission'(Val, [<<2>>]).

'enc_AdditionalSpectrumEmission'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_AdditionalSpectrumEmission'(Tlv) ->
   'dec_AdditionalSpectrumEmission'(Tlv, [2]).

'dec_AdditionalSpectrumEmission'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ShortMAC-I
%%================================
'enc_ShortMAC-I'(Val) ->
    'enc_ShortMAC-I'(Val, [<<3>>]).

'enc_ShortMAC-I'(Val, TagIn) ->
encode_unnamed_bit_string(16, Val, TagIn).


'dec_ShortMAC-I'(Tlv) ->
   'dec_ShortMAC-I'(Tlv, [3]).

'dec_ShortMAC-I'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SecurityAlgorithmConfig
%%================================
'enc_SecurityAlgorithmConfig'(Val) ->
    'enc_SecurityAlgorithmConfig'(Val, [<<48>>]).

'enc_SecurityAlgorithmConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cipheringAlgorithm(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
eea0 -> encode_tags([<<128>>], [0], 1);
eea1 -> encode_tags([<<128>>], [1], 1);
eea2 -> encode_tags([<<128>>], [2], 1);
spare5 -> encode_tags([<<128>>], [3], 1);
spare4 -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute integrityProtAlgorithm(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reserved -> encode_tags([<<129>>], [0], 1);
eia1 -> encode_tags([<<129>>], [1], 1);
eia2 -> encode_tags([<<129>>], [2], 1);
spare5 -> encode_tags([<<129>>], [3], 1);
spare4 -> encode_tags([<<129>>], [4], 1);
spare3 -> encode_tags([<<129>>], [5], 1);
spare2 -> encode_tags([<<129>>], [6], 1);
spare1 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SecurityAlgorithmConfig'(Tlv) ->
   'dec_SecurityAlgorithmConfig'(Tlv, [16]).

'dec_SecurityAlgorithmConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cipheringAlgorithm(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> eea0;
1 -> eea1;
2 -> eea2;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute integrityProtAlgorithm(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reserved;
1 -> eia1;
2 -> eia2;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default2 -> {asn1_enum,Default2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityAlgorithmConfig', Term1, Term2}.



%%================================
%%  NextHopChainingCount
%%================================
'enc_NextHopChainingCount'(Val) ->
    'enc_NextHopChainingCount'(Val, [<<2>>]).

'enc_NextHopChainingCount'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_NextHopChainingCount'(Tlv) ->
   'dec_NextHopChainingCount'(Tlv, [2]).

'dec_NextHopChainingCount'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DeltaFList-PUCCH
%%================================
'enc_DeltaFList-PUCCH'(Val) ->
    'enc_DeltaFList-PUCCH'(Val, [<<48>>]).

'enc_DeltaFList-PUCCH'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format1(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'deltaF-2' -> encode_tags([<<128>>], [0], 1);
deltaF0 -> encode_tags([<<128>>], [1], 1);
deltaF2 -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format1b(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
deltaF1 -> encode_tags([<<129>>], [0], 1);
deltaF3 -> encode_tags([<<129>>], [1], 1);
deltaF5 -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'deltaF-2' -> encode_tags([<<130>>], [0], 1);
deltaF0 -> encode_tags([<<130>>], [1], 1);
deltaF1 -> encode_tags([<<130>>], [2], 1);
deltaF2 -> encode_tags([<<130>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2a(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
'deltaF-2' -> encode_tags([<<131>>], [0], 1);
deltaF0 -> encode_tags([<<131>>], [1], 1);
deltaF2 -> encode_tags([<<131>>], [2], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2b(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
'deltaF-2' -> encode_tags([<<132>>], [0], 1);
deltaF0 -> encode_tags([<<132>>], [1], 1);
deltaF2 -> encode_tags([<<132>>], [2], 1);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DeltaFList-PUCCH'(Tlv) ->
   'dec_DeltaFList-PUCCH'(Tlv, [16]).

'dec_DeltaFList-PUCCH'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format1(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format1b(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> deltaF1;
1 -> deltaF3;
2 -> deltaF5;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF1;
3 -> deltaF2;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2a(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

%%-------------------------------------------------
%% attribute deltaF-PUCCH-Format2b(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
Default5 -> exit({error,{asn1,{illegal_enumerated,Default5}}})
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'DeltaFList-PUCCH', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  UplinkPowerControlDedicated
%%================================
'enc_UplinkPowerControlDedicated'(Val) ->
    'enc_UplinkPowerControlDedicated'(Val, [<<48>>]).

'enc_UplinkPowerControlDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute p0-UE-PUSCH(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute deltaMCS-Enabled(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
en0 -> encode_tags([<<129>>], [0], 1);
en1 -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute accumulationEnabled(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute p0-UE-PUCCH(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute pSRS-Offset(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute filterCoefficient(6) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case Cindex6 of
fc0 -> encode_tags([<<133>>], [0], 1);
fc1 -> encode_tags([<<133>>], [1], 1);
fc2 -> encode_tags([<<133>>], [2], 1);
fc3 -> encode_tags([<<133>>], [3], 1);
fc4 -> encode_tags([<<133>>], [4], 1);
fc5 -> encode_tags([<<133>>], [5], 1);
fc6 -> encode_tags([<<133>>], [6], 1);
fc7 -> encode_tags([<<133>>], [7], 1);
fc8 -> encode_tags([<<133>>], [8], 1);
fc9 -> encode_tags([<<133>>], [9], 1);
fc11 -> encode_tags([<<133>>], [10], 1);
fc13 -> encode_tags([<<133>>], [11], 1);
fc15 -> encode_tags([<<133>>], [12], 1);
fc17 -> encode_tags([<<133>>], [13], 1);
fc19 -> encode_tags([<<133>>], [14], 1);
spare1 -> encode_tags([<<133>>], [15], 1);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UplinkPowerControlDedicated'(Tlv) ->
   'dec_UplinkPowerControlDedicated'(Tlv, [16]).

'dec_UplinkPowerControlDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute p0-UE-PUSCH(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -8 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute deltaMCS-Enabled(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> en0;
1 -> en1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute accumulationEnabled(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute p0-UE-PUCCH(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_integer(V4, [131075]),
if -8 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pSRS-Offset(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val3 = decode_integer(V5, [131076]),
if 0 =< Val3, Val3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute filterCoefficient(6) with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {case decode_integer(V6, []) of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1;
Default2 -> {asn1_enum,Default2}
end, TempTlv7};
    _ ->
        {fc4,Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'UplinkPowerControlDedicated', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  UplinkPowerControlCommon
%%================================
'enc_UplinkPowerControlCommon'(Val) ->
    'enc_UplinkPowerControlCommon'(Val, [<<48>>]).

'enc_UplinkPowerControlCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute p0-NominalPUSCH(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute alpha(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
al0 -> encode_tags([<<129>>], [0], 1);
al04 -> encode_tags([<<129>>], [1], 1);
al05 -> encode_tags([<<129>>], [2], 1);
al06 -> encode_tags([<<129>>], [3], 1);
al07 -> encode_tags([<<129>>], [4], 1);
al08 -> encode_tags([<<129>>], [5], 1);
al09 -> encode_tags([<<129>>], [6], 1);
al1 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute p0-NominalPUCCH(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute deltaFList-PUCCH(4)   External EUTRA-RRC:DeltaFList-PUCCH
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DeltaFList-PUCCH'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute deltaPreambleMsg3(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UplinkPowerControlCommon'(Tlv) ->
   'dec_UplinkPowerControlCommon'(Tlv, [16]).

'dec_UplinkPowerControlCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute p0-NominalPUSCH(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -126 =< Val1, Val1 =< 24 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute alpha(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> al0;
1 -> al04;
2 -> al05;
3 -> al06;
4 -> al07;
5 -> al08;
6 -> al09;
7 -> al1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute p0-NominalPUCCH(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if -127 =< Val2, Val2 =< -96 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute deltaFList-PUCCH(4)   External EUTRA-RRC:DeltaFList-PUCCH
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_DeltaFList-PUCCH'(V4, [131075]),

%%-------------------------------------------------
%% attribute deltaPreambleMsg3(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val3 = decode_integer(V5, [131076]),
if -1 =< Val3, Val3 =< 6 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'UplinkPowerControlCommon', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  TPC-Index
%%================================
'enc_TPC-Index'(Val) ->
    'enc_TPC-Index'(Val, []).

'enc_TPC-Index'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      indexOfFormat3 ->
         encode_integer(element(2,Val), [<<128>>]);
      indexOfFormat3A ->
         encode_integer(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_TPC-Index'(Tlv) ->
   'dec_TPC-Index'(Tlv, []).

'dec_TPC-Index'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'indexOfFormat3'
    {131072, V1} -> 
        {indexOfFormat3, begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'indexOfFormat3A'
    {131073, V1} -> 
        {indexOfFormat3A, begin
Val2 = decode_integer(V1, []),
if 1 =< Val2, Val2 =< 31 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  TPC-PDCCH-Config
%%================================
'enc_TPC-PDCCH-Config'(Val) ->
    'enc_TPC-PDCCH-Config'(Val, []).

'enc_TPC-PDCCH-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_TPC-PDCCH-Config_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  TPC-PDCCH-Config_setup
%%================================
'enc_TPC-PDCCH-Config_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute tpc-RNTI(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(16, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute tpc-Index(2)   External EUTRA-RRC:TPC-Index
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TPC-Index'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TPC-PDCCH-Config_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute tpc-RNTI(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute tpc-Index(2)   External EUTRA-RRC:TPC-Index
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_TPC-Index'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TPC-PDCCH-Config_setup', Term1, Term2}.



'dec_TPC-PDCCH-Config'(Tlv) ->
   'dec_TPC-PDCCH-Config'(Tlv, []).

'dec_TPC-PDCCH-Config'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_TPC-PDCCH-Config_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  TimeAlignmentTimer
%%================================
'enc_TimeAlignmentTimer'(Val) ->
    'enc_TimeAlignmentTimer'(Val, [<<10>>]).

'enc_TimeAlignmentTimer'(Val, TagIn) ->
case Val of
sf500 -> encode_tags(TagIn, [0], 1);
sf750 -> encode_tags(TagIn, [1], 1);
sf1280 -> encode_tags(TagIn, [2], 1);
sf1920 -> encode_tags(TagIn, [3], 1);
sf2560 -> encode_tags(TagIn, [4], 1);
sf5120 -> encode_tags(TagIn, [5], 1);
sf10240 -> encode_tags(TagIn, [6], 1);
infinity -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimeAlignmentTimer'(Tlv) ->
   'dec_TimeAlignmentTimer'(Tlv, [10]).

'dec_TimeAlignmentTimer'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  TDD-Config
%%================================
'enc_TDD-Config'(Val) ->
    'enc_TDD-Config'(Val, [<<48>>]).

'enc_TDD-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute subframeAssignment(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
sa0 -> encode_tags([<<128>>], [0], 1);
sa1 -> encode_tags([<<128>>], [1], 1);
sa2 -> encode_tags([<<128>>], [2], 1);
sa3 -> encode_tags([<<128>>], [3], 1);
sa4 -> encode_tags([<<128>>], [4], 1);
sa5 -> encode_tags([<<128>>], [5], 1);
sa6 -> encode_tags([<<128>>], [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute specialSubframePatterns(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ssp0 -> encode_tags([<<129>>], [0], 1);
ssp1 -> encode_tags([<<129>>], [1], 1);
ssp2 -> encode_tags([<<129>>], [2], 1);
ssp3 -> encode_tags([<<129>>], [3], 1);
ssp4 -> encode_tags([<<129>>], [4], 1);
ssp5 -> encode_tags([<<129>>], [5], 1);
ssp6 -> encode_tags([<<129>>], [6], 1);
ssp7 -> encode_tags([<<129>>], [7], 1);
ssp8 -> encode_tags([<<129>>], [8], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_TDD-Config'(Tlv) ->
   'dec_TDD-Config'(Tlv, [16]).

'dec_TDD-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute subframeAssignment(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute specialSubframePatterns(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'TDD-Config', Term1, Term2}.



%%================================
%%  N1-PUCCH-AN-PersistentList
%%================================
'enc_N1-PUCCH-AN-PersistentList'(Val) ->
    'enc_N1-PUCCH-AN-PersistentList'(Val, [<<48>>]).

'enc_N1-PUCCH-AN-PersistentList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_N1-PUCCH-AN-PersistentList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_N1-PUCCH-AN-PersistentList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_N1-PUCCH-AN-PersistentList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_N1-PUCCH-AN-PersistentList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_N1-PUCCH-AN-PersistentList'(Tlv) ->
   'dec_N1-PUCCH-AN-PersistentList'(Tlv, [16]).

'dec_N1-PUCCH-AN-PersistentList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  SPS-ConfigUL
%%================================
'enc_SPS-ConfigUL'(Val) ->
    'enc_SPS-ConfigUL'(Val, []).

'enc_SPS-ConfigUL'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_SPS-ConfigUL_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SPS-ConfigUL_setup
%%================================
'enc_SPS-ConfigUL_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute semiPersistSchedIntervalUL(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
sf10 -> encode_tags([<<128>>], [0], 1);
sf20 -> encode_tags([<<128>>], [1], 1);
sf32 -> encode_tags([<<128>>], [2], 1);
sf40 -> encode_tags([<<128>>], [3], 1);
sf64 -> encode_tags([<<128>>], [4], 1);
sf80 -> encode_tags([<<128>>], [5], 1);
sf128 -> encode_tags([<<128>>], [6], 1);
sf160 -> encode_tags([<<128>>], [7], 1);
sf320 -> encode_tags([<<128>>], [8], 1);
sf640 -> encode_tags([<<128>>], [9], 1);
spare6 -> encode_tags([<<128>>], [10], 1);
spare5 -> encode_tags([<<128>>], [11], 1);
spare4 -> encode_tags([<<128>>], [12], 1);
spare3 -> encode_tags([<<128>>], [13], 1);
spare2 -> encode_tags([<<128>>], [14], 1);
spare1 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute implicitReleaseAfter(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
e2 -> encode_tags([<<129>>], [0], 1);
e3 -> encode_tags([<<129>>], [1], 1);
e4 -> encode_tags([<<129>>], [2], 1);
e8 -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute p0-Persistent(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigUL_setup_p0-Persistent'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute twoIntervalsConfig(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
true -> encode_tags([<<131>>], [0], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SPS-ConfigUL_setup_p0-Persistent
%%================================
'enc_SPS-ConfigUL_setup_p0-Persistent'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute p0-NominalPUSCH-Persistent(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute p0-UE-PUSCH-Persistent(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SPS-ConfigUL_setup_p0-Persistent'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute p0-NominalPUSCH-Persistent(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -126 =< Val1, Val1 =< 24 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p0-UE-PUSCH-Persistent(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if -8 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SPS-ConfigUL_setup_p0-Persistent', Term1, Term2}.

'dec_SPS-ConfigUL_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute semiPersistSchedIntervalUL(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> sf10;
1 -> sf20;
2 -> sf32;
3 -> sf40;
4 -> sf64;
5 -> sf80;
6 -> sf128;
7 -> sf160;
8 -> sf320;
9 -> sf640;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute implicitReleaseAfter(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> e2;
1 -> e3;
2 -> e4;
3 -> e8;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute p0-Persistent(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SPS-ConfigUL_setup_p0-Persistent'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute twoIntervalsConfig(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> true;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SPS-ConfigUL_setup', Term1, Term2, Term3, Term4}.



'dec_SPS-ConfigUL'(Tlv) ->
   'dec_SPS-ConfigUL'(Tlv, []).

'dec_SPS-ConfigUL'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_SPS-ConfigUL_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  SPS-ConfigDL
%%================================
'enc_SPS-ConfigDL'(Val) ->
    'enc_SPS-ConfigDL'(Val, []).

'enc_SPS-ConfigDL'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_SPS-ConfigDL_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SPS-ConfigDL_setup
%%================================
'enc_SPS-ConfigDL_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute semiPersistSchedIntervalDL(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
sf10 -> encode_tags([<<128>>], [0], 1);
sf20 -> encode_tags([<<128>>], [1], 1);
sf32 -> encode_tags([<<128>>], [2], 1);
sf40 -> encode_tags([<<128>>], [3], 1);
sf64 -> encode_tags([<<128>>], [4], 1);
sf80 -> encode_tags([<<128>>], [5], 1);
sf128 -> encode_tags([<<128>>], [6], 1);
sf160 -> encode_tags([<<128>>], [7], 1);
sf320 -> encode_tags([<<128>>], [8], 1);
sf640 -> encode_tags([<<128>>], [9], 1);
spare6 -> encode_tags([<<128>>], [10], 1);
spare5 -> encode_tags([<<128>>], [11], 1);
spare4 -> encode_tags([<<128>>], [12], 1);
spare3 -> encode_tags([<<128>>], [13], 1);
spare2 -> encode_tags([<<128>>], [14], 1);
spare1 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute numberOfConfSPS-Processes(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute n1-PUCCH-AN-PersistentList(3)   External EUTRA-RRC:N1-PUCCH-AN-PersistentList
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_N1-PUCCH-AN-PersistentList'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SPS-ConfigDL_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute semiPersistSchedIntervalDL(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> sf10;
1 -> sf20;
2 -> sf32;
3 -> sf40;
4 -> sf64;
5 -> sf80;
6 -> sf128;
7 -> sf160;
8 -> sf320;
9 -> sf640;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute numberOfConfSPS-Processes(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute n1-PUCCH-AN-PersistentList(3)   External EUTRA-RRC:N1-PUCCH-AN-PersistentList
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_N1-PUCCH-AN-PersistentList'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SPS-ConfigDL_setup', Term1, Term2, Term3}.



'dec_SPS-ConfigDL'(Tlv) ->
   'dec_SPS-ConfigDL'(Tlv, []).

'dec_SPS-ConfigDL'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_SPS-ConfigDL_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  SPS-Config
%%================================
'enc_SPS-Config'(Val) ->
    'enc_SPS-Config'(Val, [<<48>>]).

'enc_SPS-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute semiPersistSchedC-RNTI(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(16, Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute sps-ConfigDL(2)   External EUTRA-RRC:SPS-ConfigDL OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigDL'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute sps-ConfigUL(3)   External EUTRA-RRC:SPS-ConfigUL OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigUL'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SPS-Config'(Tlv) ->
   'dec_SPS-Config'(Tlv, [16]).

'dec_SPS-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute semiPersistSchedC-RNTI(1) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute sps-ConfigDL(2)   External EUTRA-RRC:SPS-ConfigDL OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SPS-ConfigDL'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute sps-ConfigUL(3)   External EUTRA-RRC:SPS-ConfigUL OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SPS-ConfigUL'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SPS-Config', Term1, Term2, Term3}.



%%================================
%%  SoundingRS-UL-ConfigDedicated
%%================================
'enc_SoundingRS-UL-ConfigDedicated'(Val) ->
    'enc_SoundingRS-UL-ConfigDedicated'(Val, []).

'enc_SoundingRS-UL-ConfigDedicated'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_SoundingRS-UL-ConfigDedicated_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SoundingRS-UL-ConfigDedicated_setup
%%================================
'enc_SoundingRS-UL-ConfigDedicated_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute srs-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bw0 -> encode_tags([<<128>>], [0], 1);
bw1 -> encode_tags([<<128>>], [1], 1);
bw2 -> encode_tags([<<128>>], [2], 1);
bw3 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute srs-HoppingBandwidth(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
hbw0 -> encode_tags([<<129>>], [0], 1);
hbw1 -> encode_tags([<<129>>], [1], 1);
hbw2 -> encode_tags([<<129>>], [2], 1);
hbw3 -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute freqDomainPosition(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute duration(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute srs-ConfigIndex(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute transmissionComb(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute cyclicShift(7) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case Cindex7 of
cs0 -> encode_tags([<<134>>], [0], 1);
cs1 -> encode_tags([<<134>>], [1], 1);
cs2 -> encode_tags([<<134>>], [2], 1);
cs3 -> encode_tags([<<134>>], [3], 1);
cs4 -> encode_tags([<<134>>], [4], 1);
cs5 -> encode_tags([<<134>>], [5], 1);
cs6 -> encode_tags([<<134>>], [6], 1);
cs7 -> encode_tags([<<134>>], [7], 1);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SoundingRS-UL-ConfigDedicated_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute srs-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bw0;
1 -> bw1;
2 -> bw2;
3 -> bw3;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute srs-HoppingBandwidth(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> hbw0;
1 -> hbw1;
2 -> hbw2;
3 -> hbw3;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute freqDomainPosition(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 23 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute duration(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute srs-ConfigIndex(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val2 = decode_integer(V5, [131076]),
if 0 =< Val2, Val2 =< 1023 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute transmissionComb(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val3 = decode_integer(V6, [131077]),
if 0 =< Val3, Val3 =< 1 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cyclicShift(7) with type ENUMERATED
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = case decode_integer(V7, [131078]) of
0 -> cs0;
1 -> cs1;
2 -> cs2;
3 -> cs3;
4 -> cs4;
5 -> cs5;
6 -> cs6;
7 -> cs7;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'SoundingRS-UL-ConfigDedicated_setup', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



'dec_SoundingRS-UL-ConfigDedicated'(Tlv) ->
   'dec_SoundingRS-UL-ConfigDedicated'(Tlv, []).

'dec_SoundingRS-UL-ConfigDedicated'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_SoundingRS-UL-ConfigDedicated_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  SoundingRS-UL-ConfigCommon
%%================================
'enc_SoundingRS-UL-ConfigCommon'(Val) ->
    'enc_SoundingRS-UL-ConfigCommon'(Val, []).

'enc_SoundingRS-UL-ConfigCommon'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_SoundingRS-UL-ConfigCommon_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SoundingRS-UL-ConfigCommon_setup
%%================================
'enc_SoundingRS-UL-ConfigCommon_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute srs-BandwidthConfig(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bw0 -> encode_tags([<<128>>], [0], 1);
bw1 -> encode_tags([<<128>>], [1], 1);
bw2 -> encode_tags([<<128>>], [2], 1);
bw3 -> encode_tags([<<128>>], [3], 1);
bw4 -> encode_tags([<<128>>], [4], 1);
bw5 -> encode_tags([<<128>>], [5], 1);
bw6 -> encode_tags([<<128>>], [6], 1);
bw7 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute srs-SubframeConfig(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
sc0 -> encode_tags([<<129>>], [0], 1);
sc1 -> encode_tags([<<129>>], [1], 1);
sc2 -> encode_tags([<<129>>], [2], 1);
sc3 -> encode_tags([<<129>>], [3], 1);
sc4 -> encode_tags([<<129>>], [4], 1);
sc5 -> encode_tags([<<129>>], [5], 1);
sc6 -> encode_tags([<<129>>], [6], 1);
sc7 -> encode_tags([<<129>>], [7], 1);
sc8 -> encode_tags([<<129>>], [8], 1);
sc9 -> encode_tags([<<129>>], [9], 1);
sc10 -> encode_tags([<<129>>], [10], 1);
sc11 -> encode_tags([<<129>>], [11], 1);
sc12 -> encode_tags([<<129>>], [12], 1);
sc13 -> encode_tags([<<129>>], [13], 1);
sc14 -> encode_tags([<<129>>], [14], 1);
sc15 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute ackNackSRS-SimultaneousTransmission(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute srs-MaxUpPts(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
true -> encode_tags([<<131>>], [0], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SoundingRS-UL-ConfigCommon_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute srs-BandwidthConfig(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bw0;
1 -> bw1;
2 -> bw2;
3 -> bw3;
4 -> bw4;
5 -> bw5;
6 -> bw6;
7 -> bw7;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute srs-SubframeConfig(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> sc0;
1 -> sc1;
2 -> sc2;
3 -> sc3;
4 -> sc4;
5 -> sc5;
6 -> sc6;
7 -> sc7;
8 -> sc8;
9 -> sc9;
10 -> sc10;
11 -> sc11;
12 -> sc12;
13 -> sc13;
14 -> sc14;
15 -> sc15;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute ackNackSRS-SimultaneousTransmission(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute srs-MaxUpPts(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> true;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'SoundingRS-UL-ConfigCommon_setup', Term1, Term2, Term3, Term4}.



'dec_SoundingRS-UL-ConfigCommon'(Tlv) ->
   'dec_SoundingRS-UL-ConfigCommon'(Tlv, []).

'dec_SoundingRS-UL-ConfigCommon'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_SoundingRS-UL-ConfigCommon_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  SchedulingRequestConfig
%%================================
'enc_SchedulingRequestConfig'(Val) ->
    'enc_SchedulingRequestConfig'(Val, []).

'enc_SchedulingRequestConfig'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_SchedulingRequestConfig_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SchedulingRequestConfig_setup
%%================================
'enc_SchedulingRequestConfig_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute sr-PUCCH-ResourceIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute sr-ConfigIndex(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute dsr-TransMax(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
n4 -> encode_tags([<<130>>], [0], 1);
n8 -> encode_tags([<<130>>], [1], 1);
n16 -> encode_tags([<<130>>], [2], 1);
n32 -> encode_tags([<<130>>], [3], 1);
n64 -> encode_tags([<<130>>], [4], 1);
spare3 -> encode_tags([<<130>>], [5], 1);
spare2 -> encode_tags([<<130>>], [6], 1);
spare1 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SchedulingRequestConfig_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sr-PUCCH-ResourceIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute sr-ConfigIndex(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 155 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dsr-TransMax(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> n4;
1 -> n8;
2 -> n16;
3 -> n32;
4 -> n64;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SchedulingRequestConfig_setup', Term1, Term2, Term3}.



'dec_SchedulingRequestConfig'(Tlv) ->
   'dec_SchedulingRequestConfig'(Tlv, []).

'dec_SchedulingRequestConfig'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_SchedulingRequestConfig_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  T-StatusProhibit
%%================================
'enc_T-StatusProhibit'(Val) ->
    'enc_T-StatusProhibit'(Val, [<<10>>]).

'enc_T-StatusProhibit'(Val, TagIn) ->
case Val of
ms0 -> encode_tags(TagIn, [0], 1);
ms5 -> encode_tags(TagIn, [1], 1);
ms10 -> encode_tags(TagIn, [2], 1);
ms15 -> encode_tags(TagIn, [3], 1);
ms20 -> encode_tags(TagIn, [4], 1);
ms25 -> encode_tags(TagIn, [5], 1);
ms30 -> encode_tags(TagIn, [6], 1);
ms35 -> encode_tags(TagIn, [7], 1);
ms40 -> encode_tags(TagIn, [8], 1);
ms45 -> encode_tags(TagIn, [9], 1);
ms50 -> encode_tags(TagIn, [10], 1);
ms55 -> encode_tags(TagIn, [11], 1);
ms60 -> encode_tags(TagIn, [12], 1);
ms65 -> encode_tags(TagIn, [13], 1);
ms70 -> encode_tags(TagIn, [14], 1);
ms75 -> encode_tags(TagIn, [15], 1);
ms80 -> encode_tags(TagIn, [16], 1);
ms85 -> encode_tags(TagIn, [17], 1);
ms90 -> encode_tags(TagIn, [18], 1);
ms95 -> encode_tags(TagIn, [19], 1);
ms100 -> encode_tags(TagIn, [20], 1);
ms105 -> encode_tags(TagIn, [21], 1);
ms110 -> encode_tags(TagIn, [22], 1);
ms115 -> encode_tags(TagIn, [23], 1);
ms120 -> encode_tags(TagIn, [24], 1);
ms125 -> encode_tags(TagIn, [25], 1);
ms130 -> encode_tags(TagIn, [26], 1);
ms135 -> encode_tags(TagIn, [27], 1);
ms140 -> encode_tags(TagIn, [28], 1);
ms145 -> encode_tags(TagIn, [29], 1);
ms150 -> encode_tags(TagIn, [30], 1);
ms155 -> encode_tags(TagIn, [31], 1);
ms160 -> encode_tags(TagIn, [32], 1);
ms165 -> encode_tags(TagIn, [33], 1);
ms170 -> encode_tags(TagIn, [34], 1);
ms175 -> encode_tags(TagIn, [35], 1);
ms180 -> encode_tags(TagIn, [36], 1);
ms185 -> encode_tags(TagIn, [37], 1);
ms190 -> encode_tags(TagIn, [38], 1);
ms195 -> encode_tags(TagIn, [39], 1);
ms200 -> encode_tags(TagIn, [40], 1);
ms205 -> encode_tags(TagIn, [41], 1);
ms210 -> encode_tags(TagIn, [42], 1);
ms215 -> encode_tags(TagIn, [43], 1);
ms220 -> encode_tags(TagIn, [44], 1);
ms225 -> encode_tags(TagIn, [45], 1);
ms230 -> encode_tags(TagIn, [46], 1);
ms235 -> encode_tags(TagIn, [47], 1);
ms240 -> encode_tags(TagIn, [48], 1);
ms245 -> encode_tags(TagIn, [49], 1);
ms250 -> encode_tags(TagIn, [50], 1);
ms300 -> encode_tags(TagIn, [51], 1);
ms350 -> encode_tags(TagIn, [52], 1);
ms400 -> encode_tags(TagIn, [53], 1);
ms450 -> encode_tags(TagIn, [54], 1);
ms500 -> encode_tags(TagIn, [55], 1);
spare8 -> encode_tags(TagIn, [56], 1);
spare7 -> encode_tags(TagIn, [57], 1);
spare6 -> encode_tags(TagIn, [58], 1);
spare5 -> encode_tags(TagIn, [59], 1);
spare4 -> encode_tags(TagIn, [60], 1);
spare3 -> encode_tags(TagIn, [61], 1);
spare2 -> encode_tags(TagIn, [62], 1);
spare1 -> encode_tags(TagIn, [63], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_T-StatusProhibit'(Tlv) ->
   'dec_T-StatusProhibit'(Tlv, [10]).

'dec_T-StatusProhibit'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms105;
22 -> ms110;
23 -> ms115;
24 -> ms120;
25 -> ms125;
26 -> ms130;
27 -> ms135;
28 -> ms140;
29 -> ms145;
30 -> ms150;
31 -> ms155;
32 -> ms160;
33 -> ms165;
34 -> ms170;
35 -> ms175;
36 -> ms180;
37 -> ms185;
38 -> ms190;
39 -> ms195;
40 -> ms200;
41 -> ms205;
42 -> ms210;
43 -> ms215;
44 -> ms220;
45 -> ms225;
46 -> ms230;
47 -> ms235;
48 -> ms240;
49 -> ms245;
50 -> ms250;
51 -> ms300;
52 -> ms350;
53 -> ms400;
54 -> ms450;
55 -> ms500;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  T-Reordering
%%================================
'enc_T-Reordering'(Val) ->
    'enc_T-Reordering'(Val, [<<10>>]).

'enc_T-Reordering'(Val, TagIn) ->
case Val of
ms0 -> encode_tags(TagIn, [0], 1);
ms5 -> encode_tags(TagIn, [1], 1);
ms10 -> encode_tags(TagIn, [2], 1);
ms15 -> encode_tags(TagIn, [3], 1);
ms20 -> encode_tags(TagIn, [4], 1);
ms25 -> encode_tags(TagIn, [5], 1);
ms30 -> encode_tags(TagIn, [6], 1);
ms35 -> encode_tags(TagIn, [7], 1);
ms40 -> encode_tags(TagIn, [8], 1);
ms45 -> encode_tags(TagIn, [9], 1);
ms50 -> encode_tags(TagIn, [10], 1);
ms55 -> encode_tags(TagIn, [11], 1);
ms60 -> encode_tags(TagIn, [12], 1);
ms65 -> encode_tags(TagIn, [13], 1);
ms70 -> encode_tags(TagIn, [14], 1);
ms75 -> encode_tags(TagIn, [15], 1);
ms80 -> encode_tags(TagIn, [16], 1);
ms85 -> encode_tags(TagIn, [17], 1);
ms90 -> encode_tags(TagIn, [18], 1);
ms95 -> encode_tags(TagIn, [19], 1);
ms100 -> encode_tags(TagIn, [20], 1);
ms110 -> encode_tags(TagIn, [21], 1);
ms120 -> encode_tags(TagIn, [22], 1);
ms130 -> encode_tags(TagIn, [23], 1);
ms140 -> encode_tags(TagIn, [24], 1);
ms150 -> encode_tags(TagIn, [25], 1);
ms160 -> encode_tags(TagIn, [26], 1);
ms170 -> encode_tags(TagIn, [27], 1);
ms180 -> encode_tags(TagIn, [28], 1);
ms190 -> encode_tags(TagIn, [29], 1);
ms200 -> encode_tags(TagIn, [30], 1);
spare1 -> encode_tags(TagIn, [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_T-Reordering'(Tlv) ->
   'dec_T-Reordering'(Tlv, [10]).

'dec_T-Reordering'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PollByte
%%================================
'enc_PollByte'(Val) ->
    'enc_PollByte'(Val, [<<10>>]).

'enc_PollByte'(Val, TagIn) ->
case Val of
kB25 -> encode_tags(TagIn, [0], 1);
kB50 -> encode_tags(TagIn, [1], 1);
kB75 -> encode_tags(TagIn, [2], 1);
kB100 -> encode_tags(TagIn, [3], 1);
kB125 -> encode_tags(TagIn, [4], 1);
kB250 -> encode_tags(TagIn, [5], 1);
kB375 -> encode_tags(TagIn, [6], 1);
kB500 -> encode_tags(TagIn, [7], 1);
kB750 -> encode_tags(TagIn, [8], 1);
kB1000 -> encode_tags(TagIn, [9], 1);
kB1250 -> encode_tags(TagIn, [10], 1);
kB1500 -> encode_tags(TagIn, [11], 1);
kB2000 -> encode_tags(TagIn, [12], 1);
kB3000 -> encode_tags(TagIn, [13], 1);
kBinfinity -> encode_tags(TagIn, [14], 1);
spare1 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_PollByte'(Tlv) ->
   'dec_PollByte'(Tlv, [10]).

'dec_PollByte'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> kB25;
1 -> kB50;
2 -> kB75;
3 -> kB100;
4 -> kB125;
5 -> kB250;
6 -> kB375;
7 -> kB500;
8 -> kB750;
9 -> kB1000;
10 -> kB1250;
11 -> kB1500;
12 -> kB2000;
13 -> kB3000;
14 -> kBinfinity;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PollPDU
%%================================
'enc_PollPDU'(Val) ->
    'enc_PollPDU'(Val, [<<10>>]).

'enc_PollPDU'(Val, TagIn) ->
case Val of
p4 -> encode_tags(TagIn, [0], 1);
p8 -> encode_tags(TagIn, [1], 1);
p16 -> encode_tags(TagIn, [2], 1);
p32 -> encode_tags(TagIn, [3], 1);
p64 -> encode_tags(TagIn, [4], 1);
p128 -> encode_tags(TagIn, [5], 1);
p256 -> encode_tags(TagIn, [6], 1);
pInfinity -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_PollPDU'(Tlv) ->
   'dec_PollPDU'(Tlv, [10]).

'dec_PollPDU'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> p4;
1 -> p8;
2 -> p16;
3 -> p32;
4 -> p64;
5 -> p128;
6 -> p256;
7 -> pInfinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  T-PollRetransmit
%%================================
'enc_T-PollRetransmit'(Val) ->
    'enc_T-PollRetransmit'(Val, [<<10>>]).

'enc_T-PollRetransmit'(Val, TagIn) ->
case Val of
ms5 -> encode_tags(TagIn, [0], 1);
ms10 -> encode_tags(TagIn, [1], 1);
ms15 -> encode_tags(TagIn, [2], 1);
ms20 -> encode_tags(TagIn, [3], 1);
ms25 -> encode_tags(TagIn, [4], 1);
ms30 -> encode_tags(TagIn, [5], 1);
ms35 -> encode_tags(TagIn, [6], 1);
ms40 -> encode_tags(TagIn, [7], 1);
ms45 -> encode_tags(TagIn, [8], 1);
ms50 -> encode_tags(TagIn, [9], 1);
ms55 -> encode_tags(TagIn, [10], 1);
ms60 -> encode_tags(TagIn, [11], 1);
ms65 -> encode_tags(TagIn, [12], 1);
ms70 -> encode_tags(TagIn, [13], 1);
ms75 -> encode_tags(TagIn, [14], 1);
ms80 -> encode_tags(TagIn, [15], 1);
ms85 -> encode_tags(TagIn, [16], 1);
ms90 -> encode_tags(TagIn, [17], 1);
ms95 -> encode_tags(TagIn, [18], 1);
ms100 -> encode_tags(TagIn, [19], 1);
ms105 -> encode_tags(TagIn, [20], 1);
ms110 -> encode_tags(TagIn, [21], 1);
ms115 -> encode_tags(TagIn, [22], 1);
ms120 -> encode_tags(TagIn, [23], 1);
ms125 -> encode_tags(TagIn, [24], 1);
ms130 -> encode_tags(TagIn, [25], 1);
ms135 -> encode_tags(TagIn, [26], 1);
ms140 -> encode_tags(TagIn, [27], 1);
ms145 -> encode_tags(TagIn, [28], 1);
ms150 -> encode_tags(TagIn, [29], 1);
ms155 -> encode_tags(TagIn, [30], 1);
ms160 -> encode_tags(TagIn, [31], 1);
ms165 -> encode_tags(TagIn, [32], 1);
ms170 -> encode_tags(TagIn, [33], 1);
ms175 -> encode_tags(TagIn, [34], 1);
ms180 -> encode_tags(TagIn, [35], 1);
ms185 -> encode_tags(TagIn, [36], 1);
ms190 -> encode_tags(TagIn, [37], 1);
ms195 -> encode_tags(TagIn, [38], 1);
ms200 -> encode_tags(TagIn, [39], 1);
ms205 -> encode_tags(TagIn, [40], 1);
ms210 -> encode_tags(TagIn, [41], 1);
ms215 -> encode_tags(TagIn, [42], 1);
ms220 -> encode_tags(TagIn, [43], 1);
ms225 -> encode_tags(TagIn, [44], 1);
ms230 -> encode_tags(TagIn, [45], 1);
ms235 -> encode_tags(TagIn, [46], 1);
ms240 -> encode_tags(TagIn, [47], 1);
ms245 -> encode_tags(TagIn, [48], 1);
ms250 -> encode_tags(TagIn, [49], 1);
ms300 -> encode_tags(TagIn, [50], 1);
ms350 -> encode_tags(TagIn, [51], 1);
ms400 -> encode_tags(TagIn, [52], 1);
ms450 -> encode_tags(TagIn, [53], 1);
ms500 -> encode_tags(TagIn, [54], 1);
spare9 -> encode_tags(TagIn, [55], 1);
spare8 -> encode_tags(TagIn, [56], 1);
spare7 -> encode_tags(TagIn, [57], 1);
spare6 -> encode_tags(TagIn, [58], 1);
spare5 -> encode_tags(TagIn, [59], 1);
spare4 -> encode_tags(TagIn, [60], 1);
spare3 -> encode_tags(TagIn, [61], 1);
spare2 -> encode_tags(TagIn, [62], 1);
spare1 -> encode_tags(TagIn, [63], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_T-PollRetransmit'(Tlv) ->
   'dec_T-PollRetransmit'(Tlv, [10]).

'dec_T-PollRetransmit'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ms5;
1 -> ms10;
2 -> ms15;
3 -> ms20;
4 -> ms25;
5 -> ms30;
6 -> ms35;
7 -> ms40;
8 -> ms45;
9 -> ms50;
10 -> ms55;
11 -> ms60;
12 -> ms65;
13 -> ms70;
14 -> ms75;
15 -> ms80;
16 -> ms85;
17 -> ms90;
18 -> ms95;
19 -> ms100;
20 -> ms105;
21 -> ms110;
22 -> ms115;
23 -> ms120;
24 -> ms125;
25 -> ms130;
26 -> ms135;
27 -> ms140;
28 -> ms145;
29 -> ms150;
30 -> ms155;
31 -> ms160;
32 -> ms165;
33 -> ms170;
34 -> ms175;
35 -> ms180;
36 -> ms185;
37 -> ms190;
38 -> ms195;
39 -> ms200;
40 -> ms205;
41 -> ms210;
42 -> ms215;
43 -> ms220;
44 -> ms225;
45 -> ms230;
46 -> ms235;
47 -> ms240;
48 -> ms245;
49 -> ms250;
50 -> ms300;
51 -> ms350;
52 -> ms400;
53 -> ms450;
54 -> ms500;
55 -> spare9;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  SN-FieldLength
%%================================
'enc_SN-FieldLength'(Val) ->
    'enc_SN-FieldLength'(Val, [<<10>>]).

'enc_SN-FieldLength'(Val, TagIn) ->
case Val of
size5 -> encode_tags(TagIn, [0], 1);
size10 -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SN-FieldLength'(Tlv) ->
   'dec_SN-FieldLength'(Tlv, [10]).

'dec_SN-FieldLength'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> size5;
1 -> size10;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  DL-UM-RLC
%%================================
'enc_DL-UM-RLC'(Val) ->
    'enc_DL-UM-RLC'(Val, [<<48>>]).

'enc_DL-UM-RLC'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sn-FieldLength(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
size5 -> encode_tags([<<128>>], [0], 1);
size10 -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute t-Reordering(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ms0 -> encode_tags([<<129>>], [0], 1);
ms5 -> encode_tags([<<129>>], [1], 1);
ms10 -> encode_tags([<<129>>], [2], 1);
ms15 -> encode_tags([<<129>>], [3], 1);
ms20 -> encode_tags([<<129>>], [4], 1);
ms25 -> encode_tags([<<129>>], [5], 1);
ms30 -> encode_tags([<<129>>], [6], 1);
ms35 -> encode_tags([<<129>>], [7], 1);
ms40 -> encode_tags([<<129>>], [8], 1);
ms45 -> encode_tags([<<129>>], [9], 1);
ms50 -> encode_tags([<<129>>], [10], 1);
ms55 -> encode_tags([<<129>>], [11], 1);
ms60 -> encode_tags([<<129>>], [12], 1);
ms65 -> encode_tags([<<129>>], [13], 1);
ms70 -> encode_tags([<<129>>], [14], 1);
ms75 -> encode_tags([<<129>>], [15], 1);
ms80 -> encode_tags([<<129>>], [16], 1);
ms85 -> encode_tags([<<129>>], [17], 1);
ms90 -> encode_tags([<<129>>], [18], 1);
ms95 -> encode_tags([<<129>>], [19], 1);
ms100 -> encode_tags([<<129>>], [20], 1);
ms110 -> encode_tags([<<129>>], [21], 1);
ms120 -> encode_tags([<<129>>], [22], 1);
ms130 -> encode_tags([<<129>>], [23], 1);
ms140 -> encode_tags([<<129>>], [24], 1);
ms150 -> encode_tags([<<129>>], [25], 1);
ms160 -> encode_tags([<<129>>], [26], 1);
ms170 -> encode_tags([<<129>>], [27], 1);
ms180 -> encode_tags([<<129>>], [28], 1);
ms190 -> encode_tags([<<129>>], [29], 1);
ms200 -> encode_tags([<<129>>], [30], 1);
spare1 -> encode_tags([<<129>>], [31], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DL-UM-RLC'(Tlv) ->
   'dec_DL-UM-RLC'(Tlv, [16]).

'dec_DL-UM-RLC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sn-FieldLength(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> size5;
1 -> size10;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute t-Reordering(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DL-UM-RLC', Term1, Term2}.



%%================================
%%  UL-UM-RLC
%%================================
'enc_UL-UM-RLC'(Val) ->
    'enc_UL-UM-RLC'(Val, [<<48>>]).

'enc_UL-UM-RLC'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute sn-FieldLength(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
size5 -> encode_tags([<<128>>], [0], 1);
size10 -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UL-UM-RLC'(Tlv) ->
   'dec_UL-UM-RLC'(Tlv, [16]).

'dec_UL-UM-RLC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sn-FieldLength(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> size5;
1 -> size10;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'UL-UM-RLC', Term1}.



%%================================
%%  DL-AM-RLC
%%================================
'enc_DL-AM-RLC'(Val) ->
    'enc_DL-AM-RLC'(Val, [<<48>>]).

'enc_DL-AM-RLC'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute t-Reordering(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ms0 -> encode_tags([<<128>>], [0], 1);
ms5 -> encode_tags([<<128>>], [1], 1);
ms10 -> encode_tags([<<128>>], [2], 1);
ms15 -> encode_tags([<<128>>], [3], 1);
ms20 -> encode_tags([<<128>>], [4], 1);
ms25 -> encode_tags([<<128>>], [5], 1);
ms30 -> encode_tags([<<128>>], [6], 1);
ms35 -> encode_tags([<<128>>], [7], 1);
ms40 -> encode_tags([<<128>>], [8], 1);
ms45 -> encode_tags([<<128>>], [9], 1);
ms50 -> encode_tags([<<128>>], [10], 1);
ms55 -> encode_tags([<<128>>], [11], 1);
ms60 -> encode_tags([<<128>>], [12], 1);
ms65 -> encode_tags([<<128>>], [13], 1);
ms70 -> encode_tags([<<128>>], [14], 1);
ms75 -> encode_tags([<<128>>], [15], 1);
ms80 -> encode_tags([<<128>>], [16], 1);
ms85 -> encode_tags([<<128>>], [17], 1);
ms90 -> encode_tags([<<128>>], [18], 1);
ms95 -> encode_tags([<<128>>], [19], 1);
ms100 -> encode_tags([<<128>>], [20], 1);
ms110 -> encode_tags([<<128>>], [21], 1);
ms120 -> encode_tags([<<128>>], [22], 1);
ms130 -> encode_tags([<<128>>], [23], 1);
ms140 -> encode_tags([<<128>>], [24], 1);
ms150 -> encode_tags([<<128>>], [25], 1);
ms160 -> encode_tags([<<128>>], [26], 1);
ms170 -> encode_tags([<<128>>], [27], 1);
ms180 -> encode_tags([<<128>>], [28], 1);
ms190 -> encode_tags([<<128>>], [29], 1);
ms200 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute t-StatusProhibit(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ms0 -> encode_tags([<<129>>], [0], 1);
ms5 -> encode_tags([<<129>>], [1], 1);
ms10 -> encode_tags([<<129>>], [2], 1);
ms15 -> encode_tags([<<129>>], [3], 1);
ms20 -> encode_tags([<<129>>], [4], 1);
ms25 -> encode_tags([<<129>>], [5], 1);
ms30 -> encode_tags([<<129>>], [6], 1);
ms35 -> encode_tags([<<129>>], [7], 1);
ms40 -> encode_tags([<<129>>], [8], 1);
ms45 -> encode_tags([<<129>>], [9], 1);
ms50 -> encode_tags([<<129>>], [10], 1);
ms55 -> encode_tags([<<129>>], [11], 1);
ms60 -> encode_tags([<<129>>], [12], 1);
ms65 -> encode_tags([<<129>>], [13], 1);
ms70 -> encode_tags([<<129>>], [14], 1);
ms75 -> encode_tags([<<129>>], [15], 1);
ms80 -> encode_tags([<<129>>], [16], 1);
ms85 -> encode_tags([<<129>>], [17], 1);
ms90 -> encode_tags([<<129>>], [18], 1);
ms95 -> encode_tags([<<129>>], [19], 1);
ms100 -> encode_tags([<<129>>], [20], 1);
ms105 -> encode_tags([<<129>>], [21], 1);
ms110 -> encode_tags([<<129>>], [22], 1);
ms115 -> encode_tags([<<129>>], [23], 1);
ms120 -> encode_tags([<<129>>], [24], 1);
ms125 -> encode_tags([<<129>>], [25], 1);
ms130 -> encode_tags([<<129>>], [26], 1);
ms135 -> encode_tags([<<129>>], [27], 1);
ms140 -> encode_tags([<<129>>], [28], 1);
ms145 -> encode_tags([<<129>>], [29], 1);
ms150 -> encode_tags([<<129>>], [30], 1);
ms155 -> encode_tags([<<129>>], [31], 1);
ms160 -> encode_tags([<<129>>], [32], 1);
ms165 -> encode_tags([<<129>>], [33], 1);
ms170 -> encode_tags([<<129>>], [34], 1);
ms175 -> encode_tags([<<129>>], [35], 1);
ms180 -> encode_tags([<<129>>], [36], 1);
ms185 -> encode_tags([<<129>>], [37], 1);
ms190 -> encode_tags([<<129>>], [38], 1);
ms195 -> encode_tags([<<129>>], [39], 1);
ms200 -> encode_tags([<<129>>], [40], 1);
ms205 -> encode_tags([<<129>>], [41], 1);
ms210 -> encode_tags([<<129>>], [42], 1);
ms215 -> encode_tags([<<129>>], [43], 1);
ms220 -> encode_tags([<<129>>], [44], 1);
ms225 -> encode_tags([<<129>>], [45], 1);
ms230 -> encode_tags([<<129>>], [46], 1);
ms235 -> encode_tags([<<129>>], [47], 1);
ms240 -> encode_tags([<<129>>], [48], 1);
ms245 -> encode_tags([<<129>>], [49], 1);
ms250 -> encode_tags([<<129>>], [50], 1);
ms300 -> encode_tags([<<129>>], [51], 1);
ms350 -> encode_tags([<<129>>], [52], 1);
ms400 -> encode_tags([<<129>>], [53], 1);
ms450 -> encode_tags([<<129>>], [54], 1);
ms500 -> encode_tags([<<129>>], [55], 1);
spare8 -> encode_tags([<<129>>], [56], 1);
spare7 -> encode_tags([<<129>>], [57], 1);
spare6 -> encode_tags([<<129>>], [58], 1);
spare5 -> encode_tags([<<129>>], [59], 1);
spare4 -> encode_tags([<<129>>], [60], 1);
spare3 -> encode_tags([<<129>>], [61], 1);
spare2 -> encode_tags([<<129>>], [62], 1);
spare1 -> encode_tags([<<129>>], [63], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DL-AM-RLC'(Tlv) ->
   'dec_DL-AM-RLC'(Tlv, [16]).

'dec_DL-AM-RLC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t-Reordering(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute t-StatusProhibit(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms105;
22 -> ms110;
23 -> ms115;
24 -> ms120;
25 -> ms125;
26 -> ms130;
27 -> ms135;
28 -> ms140;
29 -> ms145;
30 -> ms150;
31 -> ms155;
32 -> ms160;
33 -> ms165;
34 -> ms170;
35 -> ms175;
36 -> ms180;
37 -> ms185;
38 -> ms190;
39 -> ms195;
40 -> ms200;
41 -> ms205;
42 -> ms210;
43 -> ms215;
44 -> ms220;
45 -> ms225;
46 -> ms230;
47 -> ms235;
48 -> ms240;
49 -> ms245;
50 -> ms250;
51 -> ms300;
52 -> ms350;
53 -> ms400;
54 -> ms450;
55 -> ms500;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DL-AM-RLC', Term1, Term2}.



%%================================
%%  UL-AM-RLC
%%================================
'enc_UL-AM-RLC'(Val) ->
    'enc_UL-AM-RLC'(Val, [<<48>>]).

'enc_UL-AM-RLC'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute t-PollRetransmit(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ms5 -> encode_tags([<<128>>], [0], 1);
ms10 -> encode_tags([<<128>>], [1], 1);
ms15 -> encode_tags([<<128>>], [2], 1);
ms20 -> encode_tags([<<128>>], [3], 1);
ms25 -> encode_tags([<<128>>], [4], 1);
ms30 -> encode_tags([<<128>>], [5], 1);
ms35 -> encode_tags([<<128>>], [6], 1);
ms40 -> encode_tags([<<128>>], [7], 1);
ms45 -> encode_tags([<<128>>], [8], 1);
ms50 -> encode_tags([<<128>>], [9], 1);
ms55 -> encode_tags([<<128>>], [10], 1);
ms60 -> encode_tags([<<128>>], [11], 1);
ms65 -> encode_tags([<<128>>], [12], 1);
ms70 -> encode_tags([<<128>>], [13], 1);
ms75 -> encode_tags([<<128>>], [14], 1);
ms80 -> encode_tags([<<128>>], [15], 1);
ms85 -> encode_tags([<<128>>], [16], 1);
ms90 -> encode_tags([<<128>>], [17], 1);
ms95 -> encode_tags([<<128>>], [18], 1);
ms100 -> encode_tags([<<128>>], [19], 1);
ms105 -> encode_tags([<<128>>], [20], 1);
ms110 -> encode_tags([<<128>>], [21], 1);
ms115 -> encode_tags([<<128>>], [22], 1);
ms120 -> encode_tags([<<128>>], [23], 1);
ms125 -> encode_tags([<<128>>], [24], 1);
ms130 -> encode_tags([<<128>>], [25], 1);
ms135 -> encode_tags([<<128>>], [26], 1);
ms140 -> encode_tags([<<128>>], [27], 1);
ms145 -> encode_tags([<<128>>], [28], 1);
ms150 -> encode_tags([<<128>>], [29], 1);
ms155 -> encode_tags([<<128>>], [30], 1);
ms160 -> encode_tags([<<128>>], [31], 1);
ms165 -> encode_tags([<<128>>], [32], 1);
ms170 -> encode_tags([<<128>>], [33], 1);
ms175 -> encode_tags([<<128>>], [34], 1);
ms180 -> encode_tags([<<128>>], [35], 1);
ms185 -> encode_tags([<<128>>], [36], 1);
ms190 -> encode_tags([<<128>>], [37], 1);
ms195 -> encode_tags([<<128>>], [38], 1);
ms200 -> encode_tags([<<128>>], [39], 1);
ms205 -> encode_tags([<<128>>], [40], 1);
ms210 -> encode_tags([<<128>>], [41], 1);
ms215 -> encode_tags([<<128>>], [42], 1);
ms220 -> encode_tags([<<128>>], [43], 1);
ms225 -> encode_tags([<<128>>], [44], 1);
ms230 -> encode_tags([<<128>>], [45], 1);
ms235 -> encode_tags([<<128>>], [46], 1);
ms240 -> encode_tags([<<128>>], [47], 1);
ms245 -> encode_tags([<<128>>], [48], 1);
ms250 -> encode_tags([<<128>>], [49], 1);
ms300 -> encode_tags([<<128>>], [50], 1);
ms350 -> encode_tags([<<128>>], [51], 1);
ms400 -> encode_tags([<<128>>], [52], 1);
ms450 -> encode_tags([<<128>>], [53], 1);
ms500 -> encode_tags([<<128>>], [54], 1);
spare9 -> encode_tags([<<128>>], [55], 1);
spare8 -> encode_tags([<<128>>], [56], 1);
spare7 -> encode_tags([<<128>>], [57], 1);
spare6 -> encode_tags([<<128>>], [58], 1);
spare5 -> encode_tags([<<128>>], [59], 1);
spare4 -> encode_tags([<<128>>], [60], 1);
spare3 -> encode_tags([<<128>>], [61], 1);
spare2 -> encode_tags([<<128>>], [62], 1);
spare1 -> encode_tags([<<128>>], [63], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute pollPDU(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
p4 -> encode_tags([<<129>>], [0], 1);
p8 -> encode_tags([<<129>>], [1], 1);
p16 -> encode_tags([<<129>>], [2], 1);
p32 -> encode_tags([<<129>>], [3], 1);
p64 -> encode_tags([<<129>>], [4], 1);
p128 -> encode_tags([<<129>>], [5], 1);
p256 -> encode_tags([<<129>>], [6], 1);
pInfinity -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute pollByte(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
kB25 -> encode_tags([<<130>>], [0], 1);
kB50 -> encode_tags([<<130>>], [1], 1);
kB75 -> encode_tags([<<130>>], [2], 1);
kB100 -> encode_tags([<<130>>], [3], 1);
kB125 -> encode_tags([<<130>>], [4], 1);
kB250 -> encode_tags([<<130>>], [5], 1);
kB375 -> encode_tags([<<130>>], [6], 1);
kB500 -> encode_tags([<<130>>], [7], 1);
kB750 -> encode_tags([<<130>>], [8], 1);
kB1000 -> encode_tags([<<130>>], [9], 1);
kB1250 -> encode_tags([<<130>>], [10], 1);
kB1500 -> encode_tags([<<130>>], [11], 1);
kB2000 -> encode_tags([<<130>>], [12], 1);
kB3000 -> encode_tags([<<130>>], [13], 1);
kBinfinity -> encode_tags([<<130>>], [14], 1);
spare1 -> encode_tags([<<130>>], [15], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute maxRetxThreshold(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
t1 -> encode_tags([<<131>>], [0], 1);
t2 -> encode_tags([<<131>>], [1], 1);
t3 -> encode_tags([<<131>>], [2], 1);
t4 -> encode_tags([<<131>>], [3], 1);
t6 -> encode_tags([<<131>>], [4], 1);
t8 -> encode_tags([<<131>>], [5], 1);
t16 -> encode_tags([<<131>>], [6], 1);
t32 -> encode_tags([<<131>>], [7], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UL-AM-RLC'(Tlv) ->
   'dec_UL-AM-RLC'(Tlv, [16]).

'dec_UL-AM-RLC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t-PollRetransmit(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ms5;
1 -> ms10;
2 -> ms15;
3 -> ms20;
4 -> ms25;
5 -> ms30;
6 -> ms35;
7 -> ms40;
8 -> ms45;
9 -> ms50;
10 -> ms55;
11 -> ms60;
12 -> ms65;
13 -> ms70;
14 -> ms75;
15 -> ms80;
16 -> ms85;
17 -> ms90;
18 -> ms95;
19 -> ms100;
20 -> ms105;
21 -> ms110;
22 -> ms115;
23 -> ms120;
24 -> ms125;
25 -> ms130;
26 -> ms135;
27 -> ms140;
28 -> ms145;
29 -> ms150;
30 -> ms155;
31 -> ms160;
32 -> ms165;
33 -> ms170;
34 -> ms175;
35 -> ms180;
36 -> ms185;
37 -> ms190;
38 -> ms195;
39 -> ms200;
40 -> ms205;
41 -> ms210;
42 -> ms215;
43 -> ms220;
44 -> ms225;
45 -> ms230;
46 -> ms235;
47 -> ms240;
48 -> ms245;
49 -> ms250;
50 -> ms300;
51 -> ms350;
52 -> ms400;
53 -> ms450;
54 -> ms500;
55 -> spare9;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute pollPDU(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> p4;
1 -> p8;
2 -> p16;
3 -> p32;
4 -> p64;
5 -> p128;
6 -> p256;
7 -> pInfinity;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute pollByte(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> kB25;
1 -> kB50;
2 -> kB75;
3 -> kB100;
4 -> kB125;
5 -> kB250;
6 -> kB375;
7 -> kB500;
8 -> kB750;
9 -> kB1000;
10 -> kB1250;
11 -> kB1500;
12 -> kB2000;
13 -> kB3000;
14 -> kBinfinity;
15 -> spare1;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute maxRetxThreshold(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> t1;
1 -> t2;
2 -> t3;
3 -> t4;
4 -> t6;
5 -> t8;
6 -> t16;
7 -> t32;
Default4 -> exit({error,{asn1,{illegal_enumerated,Default4}}})
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'UL-AM-RLC', Term1, Term2, Term3, Term4}.



%%================================
%%  RLC-Config
%%================================
'enc_RLC-Config'(Val) ->
    'enc_RLC-Config'(Val, []).

'enc_RLC-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      am ->
         'enc_RLC-Config_am'(element(2,Val), [<<160>>]);
      'um-Bi-Directional' ->
         'enc_RLC-Config_um-Bi-Directional'(element(2,Val), [<<161>>]);
      'um-Uni-Directional-UL' ->
         'enc_RLC-Config_um-Uni-Directional-UL'(element(2,Val), [<<162>>]);
      'um-Uni-Directional-DL' ->
         'enc_RLC-Config_um-Uni-Directional-DL'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RLC-Config_am
%%================================
'enc_RLC-Config_am'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ul-AM-RLC(1)   External EUTRA-RRC:UL-AM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-AM-RLC'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dl-AM-RLC(2)   External EUTRA-RRC:DL-AM-RLC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DL-AM-RLC'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RLC-Config_am'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-AM-RLC(1)   External EUTRA-RRC:UL-AM-RLC
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UL-AM-RLC'(V1, [131072]),

%%-------------------------------------------------
%% attribute dl-AM-RLC(2)   External EUTRA-RRC:DL-AM-RLC
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DL-AM-RLC'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RLC-Config_am', Term1, Term2}.




%%================================
%%  RLC-Config_um-Bi-Directional
%%================================
'enc_RLC-Config_um-Bi-Directional'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ul-UM-RLC(1)   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-UM-RLC'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute dl-UM-RLC(2)   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DL-UM-RLC'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Bi-Directional'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-UM-RLC(1)   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UL-UM-RLC'(V1, [131072]),

%%-------------------------------------------------
%% attribute dl-UM-RLC(2)   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DL-UM-RLC'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RLC-Config_um-Bi-Directional', Term1, Term2}.




%%================================
%%  RLC-Config_um-Uni-Directional-UL
%%================================
'enc_RLC-Config_um-Uni-Directional-UL'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute ul-UM-RLC(1)   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-UM-RLC'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Uni-Directional-UL'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-UM-RLC(1)   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UL-UM-RLC'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RLC-Config_um-Uni-Directional-UL', Term1}.




%%================================
%%  RLC-Config_um-Uni-Directional-DL
%%================================
'enc_RLC-Config_um-Uni-Directional-DL'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute dl-UM-RLC(1)   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-UM-RLC'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Uni-Directional-DL'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dl-UM-RLC(1)   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DL-UM-RLC'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RLC-Config_um-Uni-Directional-DL', Term1}.



'dec_RLC-Config'(Tlv) ->
   'dec_RLC-Config'(Tlv, []).

'dec_RLC-Config'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'am'
    {131072, V1} -> 
        {am, 'dec_RLC-Config_am'(V1, [])};


%% 'um-Bi-Directional'
    {131073, V1} -> 
        {'um-Bi-Directional', 'dec_RLC-Config_um-Bi-Directional'(V1, [])};


%% 'um-Uni-Directional-UL'
    {131074, V1} -> 
        {'um-Uni-Directional-UL', 'dec_RLC-Config_um-Uni-Directional-UL'(V1, [])};


%% 'um-Uni-Directional-DL'
    {131075, V1} -> 
        {'um-Uni-Directional-DL', 'dec_RLC-Config_um-Uni-Directional-DL'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  DRB-ToReleaseList
%%================================
'enc_DRB-ToReleaseList'(Val) ->
    'enc_DRB-ToReleaseList'(Val, [<<48>>]).

'enc_DRB-ToReleaseList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-ToReleaseList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DRB-ToReleaseList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-ToReleaseList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_DRB-ToReleaseList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-ToReleaseList'(Tlv) ->
   'dec_DRB-ToReleaseList'(Tlv, [16]).

'dec_DRB-ToReleaseList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  DRB-ToAddMod
%%================================
'enc_DRB-ToAddMod'(Val) ->
    'enc_DRB-ToAddMod'(Val, [<<48>>]).

'enc_DRB-ToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute eps-BearerIdentity(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute drb-Identity(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute pdcp-Config(3)   External EUTRA-RRC:PDCP-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute rlc-Config(4)   External EUTRA-RRC:RLC-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RLC-Config'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute logicalChannelIdentity(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute logicalChannelConfig(6)   External EUTRA-RRC:LogicalChannelConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LogicalChannelConfig'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DRB-ToAddMod'(Tlv) ->
   'dec_DRB-ToAddMod'(Tlv, [16]).

'dec_DRB-ToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eps-BearerIdentity(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute drb-Identity(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 1 =< Val2, Val2 =< 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pdcp-Config(3)   External EUTRA-RRC:PDCP-Config OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PDCP-Config'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute rlc-Config(4)   External EUTRA-RRC:RLC-Config OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RLC-Config'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute logicalChannelIdentity(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val3 = decode_integer(V5, []),
if 3 =< Val3, Val3 =< 10 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute logicalChannelConfig(6)   External EUTRA-RRC:LogicalChannelConfig OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_LogicalChannelConfig'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'DRB-ToAddMod', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  DRB-ToAddModList
%%================================
'enc_DRB-ToAddModList'(Val) ->
    'enc_DRB-ToAddModList'(Val, [<<48>>]).

'enc_DRB-ToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-ToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DRB-ToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-ToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-ToAddMod'(H, [<<48>>]),
   'enc_DRB-ToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-ToAddModList'(Tlv) ->
   'dec_DRB-ToAddModList'(Tlv, [16]).

'dec_DRB-ToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DRB-ToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SRB-ToAddMod
%%================================
'enc_SRB-ToAddMod'(Val) ->
    'enc_SRB-ToAddMod'(Val, [<<48>>]).

'enc_SRB-ToAddMod'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute srb-Identity(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute rlc-Config(2) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddMod_rlc-Config'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute logicalChannelConfig(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddMod_logicalChannelConfig'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SRB-ToAddMod_rlc-Config
%%================================
'enc_SRB-ToAddMod_rlc-Config'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_RLC-Config'(element(2,Val), [<<160>>]);
      defaultValue ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_SRB-ToAddMod_rlc-Config'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'explicitValue'
    {131072, V1} -> 
        {explicitValue, 'dec_RLC-Config'(V1, [])};


%% 'defaultValue'
    {131073, V1} -> 
        {defaultValue, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  SRB-ToAddMod_logicalChannelConfig
%%================================
'enc_SRB-ToAddMod_logicalChannelConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_LogicalChannelConfig'(element(2,Val), [<<160>>]);
      defaultValue ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_SRB-ToAddMod_logicalChannelConfig'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'explicitValue'
    {131072, V1} -> 
        {explicitValue, 'dec_LogicalChannelConfig'(V1, [])};


%% 'defaultValue'
    {131073, V1} -> 
        {defaultValue, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SRB-ToAddMod'(Tlv) ->
   'dec_SRB-ToAddMod'(Tlv, [16]).

'dec_SRB-ToAddMod'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute srb-Identity(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute rlc-Config(2) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SRB-ToAddMod_rlc-Config'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute logicalChannelConfig(3) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SRB-ToAddMod_logicalChannelConfig'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SRB-ToAddMod', Term1, Term2, Term3}.



%%================================
%%  SRB-ToAddModList
%%================================
'enc_SRB-ToAddModList'(Val) ->
    'enc_SRB-ToAddModList'(Val, [<<48>>]).

'enc_SRB-ToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SRB-ToAddModList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SRB-ToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SRB-ToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SRB-ToAddMod'(H, [<<48>>]),
   'enc_SRB-ToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SRB-ToAddModList'(Tlv) ->
   'dec_SRB-ToAddModList'(Tlv, [16]).

'dec_SRB-ToAddModList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SRB-ToAddMod'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  RadioResourceConfigDedicated
%%================================
'enc_RadioResourceConfigDedicated'(Val) ->
    'enc_RadioResourceConfigDedicated'(Val, [<<48>>]).

'enc_RadioResourceConfigDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute srb-ToAddModList(1)   External EUTRA-RRC:SRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddModList'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute drb-ToAddModList(2)   External EUTRA-RRC:DRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRB-ToAddModList'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute drb-ToReleaseList(3)   External EUTRA-RRC:DRB-ToReleaseList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRB-ToReleaseList'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute mac-MainConfig(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceConfigDedicated_mac-MainConfig'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute sps-Config(5)   External EUTRA-RRC:SPS-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-Config'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute physicalConfigDedicated(6)   External EUTRA-RRC:PhysicalConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysicalConfigDedicated'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RadioResourceConfigDedicated_mac-MainConfig
%%================================
'enc_RadioResourceConfigDedicated_mac-MainConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_MAC-MainConfig'(element(2,Val), [<<160>>]);
      defaultValue ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RadioResourceConfigDedicated_mac-MainConfig'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'explicitValue'
    {131072, V1} -> 
        {explicitValue, 'dec_MAC-MainConfig'(V1, [])};


%% 'defaultValue'
    {131073, V1} -> 
        {defaultValue, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RadioResourceConfigDedicated'(Tlv) ->
   'dec_RadioResourceConfigDedicated'(Tlv, [16]).

'dec_RadioResourceConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute srb-ToAddModList(1)   External EUTRA-RRC:SRB-ToAddModList OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SRB-ToAddModList'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute drb-ToAddModList(2)   External EUTRA-RRC:DRB-ToAddModList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_DRB-ToAddModList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute drb-ToReleaseList(3)   External EUTRA-RRC:DRB-ToReleaseList OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_DRB-ToReleaseList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute mac-MainConfig(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RadioResourceConfigDedicated_mac-MainConfig'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute sps-Config(5)   External EUTRA-RRC:SPS-Config OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_SPS-Config'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute physicalConfigDedicated(6)   External EUTRA-RRC:PhysicalConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_PhysicalConfigDedicated'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RadioResourceConfigDedicated', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  UL-CyclicPrefixLength
%%================================
'enc_UL-CyclicPrefixLength'(Val) ->
    'enc_UL-CyclicPrefixLength'(Val, [<<10>>]).

'enc_UL-CyclicPrefixLength'(Val, TagIn) ->
case Val of
len1 -> encode_tags(TagIn, [0], 1);
len2 -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_UL-CyclicPrefixLength'(Tlv) ->
   'dec_UL-CyclicPrefixLength'(Tlv, [10]).

'dec_UL-CyclicPrefixLength'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> len1;
1 -> len2;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PCCH-Config
%%================================
'enc_PCCH-Config'(Val) ->
    'enc_PCCH-Config'(Val, [<<48>>]).

'enc_PCCH-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute defaultPagingCycle(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
rf32 -> encode_tags([<<128>>], [0], 1);
rf64 -> encode_tags([<<128>>], [1], 1);
rf128 -> encode_tags([<<128>>], [2], 1);
rf256 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute nB(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
fourT -> encode_tags([<<129>>], [0], 1);
twoT -> encode_tags([<<129>>], [1], 1);
oneT -> encode_tags([<<129>>], [2], 1);
halfT -> encode_tags([<<129>>], [3], 1);
quarterT -> encode_tags([<<129>>], [4], 1);
oneEighthT -> encode_tags([<<129>>], [5], 1);
oneSixteenthT -> encode_tags([<<129>>], [6], 1);
oneThirtySecondT -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PCCH-Config'(Tlv) ->
   'dec_PCCH-Config'(Tlv, [16]).

'dec_PCCH-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute defaultPagingCycle(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> rf32;
1 -> rf64;
2 -> rf128;
3 -> rf256;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute nB(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> fourT;
1 -> twoT;
2 -> oneT;
3 -> halfT;
4 -> quarterT;
5 -> oneEighthT;
6 -> oneSixteenthT;
7 -> oneThirtySecondT;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PCCH-Config', Term1, Term2}.



%%================================
%%  BCCH-Config
%%================================
'enc_BCCH-Config'(Val) ->
    'enc_BCCH-Config'(Val, [<<48>>]).

'enc_BCCH-Config'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute modificationPeriodCoeff(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n2 -> encode_tags([<<128>>], [0], 1);
n4 -> encode_tags([<<128>>], [1], 1);
n8 -> encode_tags([<<128>>], [2], 1);
n16 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BCCH-Config'(Tlv) ->
   'dec_BCCH-Config'(Tlv, [16]).

'dec_BCCH-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute modificationPeriodCoeff(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n2;
1 -> n4;
2 -> n8;
3 -> n16;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'BCCH-Config', Term1}.



%%================================
%%  RadioResourceConfigCommon
%%================================
'enc_RadioResourceConfigCommon'(Val) ->
    'enc_RadioResourceConfigCommon'(Val, [<<48>>]).

'enc_RadioResourceConfigCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12} = Val,

%%-------------------------------------------------
%% attribute rach-ConfigCommon(1)   External EUTRA-RRC:RACH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigCommon'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute prach-Config(2)   External EUTRA-RRC:PRACH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PRACH-Config'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute pdsch-ConfigCommon(3)   External EUTRA-RRC:PDSCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDSCH-ConfigCommon'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute pusch-ConfigCommon(4)   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PUSCH-ConfigCommon'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute phich-Config(5)   External EUTRA-RRC:PHICH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PHICH-Config'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute pucch-ConfigCommon(6)   External EUTRA-RRC:PUCCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUCCH-ConfigCommon'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigCommon(7)   External EUTRA-RRC:SoundingRS-UL-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SoundingRS-UL-ConfigCommon'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute uplinkPowerControlCommon(8)   External EUTRA-RRC:UplinkPowerControlCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UplinkPowerControlCommon'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute antennaInfoCommon(9)   External EUTRA-RRC:AntennaInfoCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AntennaInfoCommon'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute p-Max(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute tdd-Config(11)   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case Cindex11 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TDD-Config'(Cindex11, [<<170>>])
       end,

%%-------------------------------------------------
%% attribute ul-CyclicPrefixLength(12) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes12,EncLen12} = case Cindex12 of
len1 -> encode_tags([<<139>>], [0], 1);
len2 -> encode_tags([<<139>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RadioResourceConfigCommon'(Tlv) ->
   'dec_RadioResourceConfigCommon'(Tlv, [16]).

'dec_RadioResourceConfigCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rach-ConfigCommon(1)   External EUTRA-RRC:RACH-ConfigCommon OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_RACH-ConfigCommon'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute prach-Config(2)   External EUTRA-RRC:PRACH-Config
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PRACH-Config'(V2, [131073]),

%%-------------------------------------------------
%% attribute pdsch-ConfigCommon(3)   External EUTRA-RRC:PDSCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PDSCH-ConfigCommon'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute pusch-ConfigCommon(4)   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_PUSCH-ConfigCommon'(V4, [131075]),

%%-------------------------------------------------
%% attribute phich-Config(5)   External EUTRA-RRC:PHICH-Config OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_PHICH-Config'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute pucch-ConfigCommon(6)   External EUTRA-RRC:PUCCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_PUCCH-ConfigCommon'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigCommon(7)   External EUTRA-RRC:SoundingRS-UL-ConfigCommon OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_SoundingRS-UL-ConfigCommon'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute uplinkPowerControlCommon(8)   External EUTRA-RRC:UplinkPowerControlCommon OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_UplinkPowerControlCommon'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute antennaInfoCommon(9)   External EUTRA-RRC:AntennaInfoCommon OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_AntennaInfoCommon'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute p-Max(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val1 = decode_integer(V10, []),
if -30 =< Val1, Val1 =< 33 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute tdd-Config(11)   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
{Term11,Tlv12} = case Tlv11 of
[{131082,V11}|TempTlv12] ->
    {'dec_TDD-Config'(V11, []), TempTlv12};
    _ ->
        { asn1_NOVALUE, Tlv11}
end,

%%-------------------------------------------------
%% attribute ul-CyclicPrefixLength(12) with type ENUMERATED
%%-------------------------------------------------
[V12|Tlv13] = Tlv12, 
Term12 = case decode_integer(V12, [131083]) of
0 -> len1;
1 -> len2;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv13 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RadioResourceConfigCommon', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}.



%%================================
%%  RadioResourceConfigCommonSIB
%%================================
'enc_RadioResourceConfigCommonSIB'(Val) ->
    'enc_RadioResourceConfigCommonSIB'(Val, [<<48>>]).

'enc_RadioResourceConfigCommonSIB'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute rach-ConfigCommon(1)   External EUTRA-RRC:RACH-ConfigCommon
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RACH-ConfigCommon'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute bcch-Config(2)   External EUTRA-RRC:BCCH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BCCH-Config'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute pcch-Config(3)   External EUTRA-RRC:PCCH-Config
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PCCH-Config'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute prach-Config(4)   External EUTRA-RRC:PRACH-ConfigSIB
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PRACH-ConfigSIB'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute pdsch-ConfigCommon(5)   External EUTRA-RRC:PDSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_PDSCH-ConfigCommon'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute pusch-ConfigCommon(6)   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_PUSCH-ConfigCommon'(Cindex6, [<<165>>]),

%%-------------------------------------------------
%% attribute pucch-ConfigCommon(7)   External EUTRA-RRC:PUCCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_PUCCH-ConfigCommon'(Cindex7, [<<166>>]),

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigCommon(8)   External EUTRA-RRC:SoundingRS-UL-ConfigCommon
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_SoundingRS-UL-ConfigCommon'(Cindex8, [<<167>>]),

%%-------------------------------------------------
%% attribute uplinkPowerControlCommon(9)   External EUTRA-RRC:UplinkPowerControlCommon
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_UplinkPowerControlCommon'(Cindex9, [<<168>>]),

%%-------------------------------------------------
%% attribute ul-CyclicPrefixLength(10) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes10,EncLen10} = case Cindex10 of
len1 -> encode_tags([<<137>>], [0], 1);
len2 -> encode_tags([<<137>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RadioResourceConfigCommonSIB'(Tlv) ->
   'dec_RadioResourceConfigCommonSIB'(Tlv, [16]).

'dec_RadioResourceConfigCommonSIB'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rach-ConfigCommon(1)   External EUTRA-RRC:RACH-ConfigCommon
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RACH-ConfigCommon'(V1, [131072]),

%%-------------------------------------------------
%% attribute bcch-Config(2)   External EUTRA-RRC:BCCH-Config
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_BCCH-Config'(V2, [131073]),

%%-------------------------------------------------
%% attribute pcch-Config(3)   External EUTRA-RRC:PCCH-Config
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_PCCH-Config'(V3, [131074]),

%%-------------------------------------------------
%% attribute prach-Config(4)   External EUTRA-RRC:PRACH-ConfigSIB
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_PRACH-ConfigSIB'(V4, [131075]),

%%-------------------------------------------------
%% attribute pdsch-ConfigCommon(5)   External EUTRA-RRC:PDSCH-ConfigCommon
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_PDSCH-ConfigCommon'(V5, [131076]),

%%-------------------------------------------------
%% attribute pusch-ConfigCommon(6)   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_PUSCH-ConfigCommon'(V6, [131077]),

%%-------------------------------------------------
%% attribute pucch-ConfigCommon(7)   External EUTRA-RRC:PUCCH-ConfigCommon
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = 'dec_PUCCH-ConfigCommon'(V7, [131078]),

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigCommon(8)   External EUTRA-RRC:SoundingRS-UL-ConfigCommon
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = 'dec_SoundingRS-UL-ConfigCommon'(V8, [131079]),

%%-------------------------------------------------
%% attribute uplinkPowerControlCommon(9)   External EUTRA-RRC:UplinkPowerControlCommon
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = 'dec_UplinkPowerControlCommon'(V9, [131080]),

%%-------------------------------------------------
%% attribute ul-CyclicPrefixLength(10) with type ENUMERATED
%%-------------------------------------------------
[V10|Tlv11] = Tlv10, 
Term10 = case decode_integer(V10, [131081]) of
0 -> len1;
1 -> len2;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv11 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RadioResourceConfigCommonSIB', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  RACH-ConfigDedicated
%%================================
'enc_RACH-ConfigDedicated'(Val) ->
    'enc_RACH-ConfigDedicated'(Val, [<<48>>]).

'enc_RACH-ConfigDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ra-PreambleIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ra-PRACH-MaskIndex(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RACH-ConfigDedicated'(Tlv) ->
   'dec_RACH-ConfigDedicated'(Tlv, [16]).

'dec_RACH-ConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ra-PreambleIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute ra-PRACH-MaskIndex(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RACH-ConfigDedicated', Term1, Term2}.



%%================================
%%  RACH-ConfigCommon
%%================================
'enc_RACH-ConfigCommon'(Val) ->
    'enc_RACH-ConfigCommon'(Val, [<<48>>]).

'enc_RACH-ConfigCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute preambleInfo(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RACH-ConfigCommon_preambleInfo'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute powerRampingParameters(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RACH-ConfigCommon_powerRampingParameters'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute ra-SupervisionInfo(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RACH-ConfigCommon_ra-SupervisionInfo'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute maxHARQ-Msg3Tx(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RACH-ConfigCommon_preambleInfo
%%================================
'enc_RACH-ConfigCommon_preambleInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute numberOfRA-Preambles(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n4 -> encode_tags([<<128>>], [0], 1);
n8 -> encode_tags([<<128>>], [1], 1);
n12 -> encode_tags([<<128>>], [2], 1);
n16 -> encode_tags([<<128>>], [3], 1);
n20 -> encode_tags([<<128>>], [4], 1);
n24 -> encode_tags([<<128>>], [5], 1);
n28 -> encode_tags([<<128>>], [6], 1);
n32 -> encode_tags([<<128>>], [7], 1);
n36 -> encode_tags([<<128>>], [8], 1);
n40 -> encode_tags([<<128>>], [9], 1);
n44 -> encode_tags([<<128>>], [10], 1);
n48 -> encode_tags([<<128>>], [11], 1);
n52 -> encode_tags([<<128>>], [12], 1);
n56 -> encode_tags([<<128>>], [13], 1);
n60 -> encode_tags([<<128>>], [14], 1);
n64 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute preamblesGroupAConfig(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig
%%================================
'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute sizeOfRA-PreamblesGroupA(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n4 -> encode_tags([<<128>>], [0], 1);
n8 -> encode_tags([<<128>>], [1], 1);
n12 -> encode_tags([<<128>>], [2], 1);
n16 -> encode_tags([<<128>>], [3], 1);
n20 -> encode_tags([<<128>>], [4], 1);
n24 -> encode_tags([<<128>>], [5], 1);
n28 -> encode_tags([<<128>>], [6], 1);
n32 -> encode_tags([<<128>>], [7], 1);
n36 -> encode_tags([<<128>>], [8], 1);
n40 -> encode_tags([<<128>>], [9], 1);
n44 -> encode_tags([<<128>>], [10], 1);
n48 -> encode_tags([<<128>>], [11], 1);
n52 -> encode_tags([<<128>>], [12], 1);
n56 -> encode_tags([<<128>>], [13], 1);
n60 -> encode_tags([<<128>>], [14], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute messageSizeGroupA(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
b56 -> encode_tags([<<129>>], [0], 1);
b144 -> encode_tags([<<129>>], [1], 1);
b208 -> encode_tags([<<129>>], [2], 1);
b256 -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute messagePowerOffsetGroupB(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
minusinfinity -> encode_tags([<<130>>], [0], 1);
dB0 -> encode_tags([<<130>>], [1], 1);
dB5 -> encode_tags([<<130>>], [2], 1);
dB8 -> encode_tags([<<130>>], [3], 1);
dB10 -> encode_tags([<<130>>], [4], 1);
dB12 -> encode_tags([<<130>>], [5], 1);
dB15 -> encode_tags([<<130>>], [6], 1);
dB18 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sizeOfRA-PreamblesGroupA(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n20;
5 -> n24;
6 -> n28;
7 -> n32;
8 -> n36;
9 -> n40;
10 -> n44;
11 -> n48;
12 -> n52;
13 -> n56;
14 -> n60;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute messageSizeGroupA(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> b56;
1 -> b144;
2 -> b208;
3 -> b256;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute messagePowerOffsetGroupB(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> minusinfinity;
1 -> dB0;
2 -> dB5;
3 -> dB8;
4 -> dB10;
5 -> dB12;
6 -> dB15;
7 -> dB18;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig', Term1, Term2, Term3}.

'dec_RACH-ConfigCommon_preambleInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute numberOfRA-Preambles(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n20;
5 -> n24;
6 -> n28;
7 -> n32;
8 -> n36;
9 -> n40;
10 -> n44;
11 -> n48;
12 -> n52;
13 -> n56;
14 -> n60;
15 -> n64;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute preamblesGroupAConfig(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RACH-ConfigCommon_preambleInfo', Term1, Term2}.




%%================================
%%  RACH-ConfigCommon_powerRampingParameters
%%================================
'enc_RACH-ConfigCommon_powerRampingParameters'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute powerRampingStep(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
dB0 -> encode_tags([<<128>>], [0], 1);
dB2 -> encode_tags([<<128>>], [1], 1);
dB4 -> encode_tags([<<128>>], [2], 1);
dB6 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute preambleInitialReceivedTargetPower(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'dBm-120' -> encode_tags([<<129>>], [0], 1);
'dBm-118' -> encode_tags([<<129>>], [1], 1);
'dBm-116' -> encode_tags([<<129>>], [2], 1);
'dBm-114' -> encode_tags([<<129>>], [3], 1);
'dBm-112' -> encode_tags([<<129>>], [4], 1);
'dBm-110' -> encode_tags([<<129>>], [5], 1);
'dBm-108' -> encode_tags([<<129>>], [6], 1);
'dBm-106' -> encode_tags([<<129>>], [7], 1);
'dBm-104' -> encode_tags([<<129>>], [8], 1);
'dBm-102' -> encode_tags([<<129>>], [9], 1);
'dBm-100' -> encode_tags([<<129>>], [10], 1);
'dBm-98' -> encode_tags([<<129>>], [11], 1);
'dBm-96' -> encode_tags([<<129>>], [12], 1);
'dBm-94' -> encode_tags([<<129>>], [13], 1);
'dBm-92' -> encode_tags([<<129>>], [14], 1);
'dBm-90' -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_powerRampingParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute powerRampingStep(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> dB0;
1 -> dB2;
2 -> dB4;
3 -> dB6;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute preambleInitialReceivedTargetPower(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'dBm-120';
1 -> 'dBm-118';
2 -> 'dBm-116';
3 -> 'dBm-114';
4 -> 'dBm-112';
5 -> 'dBm-110';
6 -> 'dBm-108';
7 -> 'dBm-106';
8 -> 'dBm-104';
9 -> 'dBm-102';
10 -> 'dBm-100';
11 -> 'dBm-98';
12 -> 'dBm-96';
13 -> 'dBm-94';
14 -> 'dBm-92';
15 -> 'dBm-90';
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RACH-ConfigCommon_powerRampingParameters', Term1, Term2}.




%%================================
%%  RACH-ConfigCommon_ra-SupervisionInfo
%%================================
'enc_RACH-ConfigCommon_ra-SupervisionInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute preambleTransMax(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n3 -> encode_tags([<<128>>], [0], 1);
n4 -> encode_tags([<<128>>], [1], 1);
n5 -> encode_tags([<<128>>], [2], 1);
n6 -> encode_tags([<<128>>], [3], 1);
n7 -> encode_tags([<<128>>], [4], 1);
n8 -> encode_tags([<<128>>], [5], 1);
n10 -> encode_tags([<<128>>], [6], 1);
n20 -> encode_tags([<<128>>], [7], 1);
n50 -> encode_tags([<<128>>], [8], 1);
n100 -> encode_tags([<<128>>], [9], 1);
n200 -> encode_tags([<<128>>], [10], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ra-ResponseWindowSize(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
sf2 -> encode_tags([<<129>>], [0], 1);
sf3 -> encode_tags([<<129>>], [1], 1);
sf4 -> encode_tags([<<129>>], [2], 1);
sf5 -> encode_tags([<<129>>], [3], 1);
sf6 -> encode_tags([<<129>>], [4], 1);
sf7 -> encode_tags([<<129>>], [5], 1);
sf8 -> encode_tags([<<129>>], [6], 1);
sf10 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute mac-ContentionResolutionTimer(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sf8 -> encode_tags([<<130>>], [0], 1);
sf16 -> encode_tags([<<130>>], [1], 1);
sf24 -> encode_tags([<<130>>], [2], 1);
sf32 -> encode_tags([<<130>>], [3], 1);
sf40 -> encode_tags([<<130>>], [4], 1);
sf48 -> encode_tags([<<130>>], [5], 1);
sf56 -> encode_tags([<<130>>], [6], 1);
sf64 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_ra-SupervisionInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preambleTransMax(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n3;
1 -> n4;
2 -> n5;
3 -> n6;
4 -> n7;
5 -> n8;
6 -> n10;
7 -> n20;
8 -> n50;
9 -> n100;
10 -> n200;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ra-ResponseWindowSize(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> sf2;
1 -> sf3;
2 -> sf4;
3 -> sf5;
4 -> sf6;
5 -> sf7;
6 -> sf8;
7 -> sf10;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute mac-ContentionResolutionTimer(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> sf8;
1 -> sf16;
2 -> sf24;
3 -> sf32;
4 -> sf40;
5 -> sf48;
6 -> sf56;
7 -> sf64;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RACH-ConfigCommon_ra-SupervisionInfo', Term1, Term2, Term3}.



'dec_RACH-ConfigCommon'(Tlv) ->
   'dec_RACH-ConfigCommon'(Tlv, [16]).

'dec_RACH-ConfigCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preambleInfo(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RACH-ConfigCommon_preambleInfo'(V1, [131072]),

%%-------------------------------------------------
%% attribute powerRampingParameters(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RACH-ConfigCommon_powerRampingParameters'(V2, [131073]),

%%-------------------------------------------------
%% attribute ra-SupervisionInfo(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_RACH-ConfigCommon_ra-SupervisionInfo'(V3, [131074]),

%%-------------------------------------------------
%% attribute maxHARQ-Msg3Tx(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val1 = decode_integer(V4, [131075]),
if 1 =< Val1, Val1 =< 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RACH-ConfigCommon', Term1, Term2, Term3, Term4}.



%%================================
%%  UL-ReferenceSignalsPUSCH
%%================================
'enc_UL-ReferenceSignalsPUSCH'(Val) ->
    'enc_UL-ReferenceSignalsPUSCH'(Val, [<<48>>]).

'enc_UL-ReferenceSignalsPUSCH'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute groupHoppingEnabled(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute groupAssignmentPUSCH(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute sequenceHoppingEnabled(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute cyclicShift(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UL-ReferenceSignalsPUSCH'(Tlv) ->
   'dec_UL-ReferenceSignalsPUSCH'(Tlv, [16]).

'dec_UL-ReferenceSignalsPUSCH'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute groupHoppingEnabled(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute groupAssignmentPUSCH(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 29 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute sequenceHoppingEnabled(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute cyclicShift(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_integer(V4, [131075]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'UL-ReferenceSignalsPUSCH', Term1, Term2, Term3, Term4}.



%%================================
%%  PUSCH-ConfigDedicated
%%================================
'enc_PUSCH-ConfigDedicated'(Val) ->
    'enc_PUSCH-ConfigDedicated'(Val, [<<48>>]).

'enc_PUSCH-ConfigDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute betaOffset-ACK-Index(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute betaOffset-RI-Index(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute betaOffset-CQI-Index(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PUSCH-ConfigDedicated'(Tlv) ->
   'dec_PUSCH-ConfigDedicated'(Tlv, [16]).

'dec_PUSCH-ConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute betaOffset-ACK-Index(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute betaOffset-RI-Index(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute betaOffset-CQI-Index(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 15 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'PUSCH-ConfigDedicated', Term1, Term2, Term3}.



%%================================
%%  PUSCH-ConfigCommon
%%================================
'enc_PUSCH-ConfigCommon'(Val) ->
    'enc_PUSCH-ConfigCommon'(Val, [<<48>>]).

'enc_PUSCH-ConfigCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute pusch-ConfigBasic(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute ul-ReferenceSignalsPUSCH(2)   External EUTRA-RRC:UL-ReferenceSignalsPUSCH
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UL-ReferenceSignalsPUSCH'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PUSCH-ConfigCommon_pusch-ConfigBasic
%%================================
'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute n-SB(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute hoppingMode(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
interSubFrame -> encode_tags([<<129>>], [0], 1);
intraAndInterSubFrame -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute pusch-HoppingOffset(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute enable64QAM(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute n-SB(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute hoppingMode(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> interSubFrame;
1 -> intraAndInterSubFrame;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute pusch-HoppingOffset(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 0 =< Val2, Val2 =< 98 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute enable64QAM(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'PUSCH-ConfigCommon_pusch-ConfigBasic', Term1, Term2, Term3, Term4}.



'dec_PUSCH-ConfigCommon'(Tlv) ->
   'dec_PUSCH-ConfigCommon'(Tlv, [16]).

'dec_PUSCH-ConfigCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pusch-ConfigBasic(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(V1, [131072]),

%%-------------------------------------------------
%% attribute ul-ReferenceSignalsPUSCH(2)   External EUTRA-RRC:UL-ReferenceSignalsPUSCH
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UL-ReferenceSignalsPUSCH'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PUSCH-ConfigCommon', Term1, Term2}.



%%================================
%%  PUCCH-ConfigDedicated
%%================================
'enc_PUCCH-ConfigDedicated'(Val) ->
    'enc_PUCCH-ConfigDedicated'(Val, [<<48>>]).

'enc_PUCCH-ConfigDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ackNackRepetition(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute tdd-AckNackFeedbackMode(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
bundling -> encode_tags([<<129>>], [0], 1);
multiplexing -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PUCCH-ConfigDedicated_ackNackRepetition
%%================================
'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  PUCCH-ConfigDedicated_ackNackRepetition_setup
%%================================
'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute repetitionFactor(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n2 -> encode_tags([<<128>>], [0], 1);
n4 -> encode_tags([<<128>>], [1], 1);
n6 -> encode_tags([<<128>>], [2], 1);
spare1 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute n1PUCCH-AN-Rep(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute repetitionFactor(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n2;
1 -> n4;
2 -> n6;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute n1PUCCH-AN-Rep(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PUCCH-ConfigDedicated_ackNackRepetition_setup', Term1, Term2}.

'dec_PUCCH-ConfigDedicated_ackNackRepetition'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_PUCCH-ConfigDedicated'(Tlv) ->
   'dec_PUCCH-ConfigDedicated'(Tlv, [16]).

'dec_PUCCH-ConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ackNackRepetition(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PUCCH-ConfigDedicated_ackNackRepetition'(V1, [131072]),

%%-------------------------------------------------
%% attribute tdd-AckNackFeedbackMode(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> bundling;
1 -> multiplexing;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PUCCH-ConfigDedicated', Term1, Term2}.



%%================================
%%  PUCCH-ConfigCommon
%%================================
'enc_PUCCH-ConfigCommon'(Val) ->
    'enc_PUCCH-ConfigCommon'(Val, [<<48>>]).

'enc_PUCCH-ConfigCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute deltaPUCCH-Shift(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ds1 -> encode_tags([<<128>>], [0], 1);
ds2 -> encode_tags([<<128>>], [1], 1);
ds3 -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute nRB-CQI(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nCS-AN(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute n1PUCCH-AN(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PUCCH-ConfigCommon'(Tlv) ->
   'dec_PUCCH-ConfigCommon'(Tlv, [16]).

'dec_PUCCH-ConfigCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute deltaPUCCH-Shift(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ds1;
1 -> ds2;
2 -> ds3;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute nRB-CQI(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 98 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nCS-AN(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute n1PUCCH-AN(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val3 = decode_integer(V4, [131075]),
if 0 =< Val3, Val3 =< 2047 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'PUCCH-ConfigCommon', Term1, Term2, Term3, Term4}.



%%================================
%%  PresenceAntennaPort1
%%================================
'enc_PresenceAntennaPort1'(Val) ->
    'enc_PresenceAntennaPort1'(Val, [<<1>>]).

'enc_PresenceAntennaPort1'(Val, TagIn) ->
encode_boolean(Val, TagIn).


'dec_PresenceAntennaPort1'(Tlv) ->
   'dec_PresenceAntennaPort1'(Tlv, [1]).

'dec_PresenceAntennaPort1'(Tlv, TagIn) ->
decode_boolean(Tlv, TagIn).



%%================================
%%  PRACH-ConfigInfo
%%================================
'enc_PRACH-ConfigInfo'(Val) ->
    'enc_PRACH-ConfigInfo'(Val, [<<48>>]).

'enc_PRACH-ConfigInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute prach-ConfigIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute highSpeedFlag(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute zeroCorrelationZoneConfig(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute prach-FreqOffset(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PRACH-ConfigInfo'(Tlv) ->
   'dec_PRACH-ConfigInfo'(Tlv, [16]).

'dec_PRACH-ConfigInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute prach-ConfigIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 63 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute highSpeedFlag(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute zeroCorrelationZoneConfig(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 0 =< Val2, Val2 =< 15 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute prach-FreqOffset(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val3 = decode_integer(V4, [131075]),
if 0 =< Val3, Val3 =< 94 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'PRACH-ConfigInfo', Term1, Term2, Term3, Term4}.



%%================================
%%  PRACH-Config
%%================================
'enc_PRACH-Config'(Val) ->
    'enc_PRACH-Config'(Val, [<<48>>]).

'enc_PRACH-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rootSequenceIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute prach-ConfigInfo(2)   External EUTRA-RRC:PRACH-ConfigInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PRACH-ConfigInfo'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PRACH-Config'(Tlv) ->
   'dec_PRACH-Config'(Tlv, [16]).

'dec_PRACH-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rootSequenceIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 837 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute prach-ConfigInfo(2)   External EUTRA-RRC:PRACH-ConfigInfo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_PRACH-ConfigInfo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PRACH-Config', Term1, Term2}.



%%================================
%%  PRACH-ConfigSIB
%%================================
'enc_PRACH-ConfigSIB'(Val) ->
    'enc_PRACH-ConfigSIB'(Val, [<<48>>]).

'enc_PRACH-ConfigSIB'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rootSequenceIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute prach-ConfigInfo(2)   External EUTRA-RRC:PRACH-ConfigInfo
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PRACH-ConfigInfo'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PRACH-ConfigSIB'(Tlv) ->
   'dec_PRACH-ConfigSIB'(Tlv, [16]).

'dec_PRACH-ConfigSIB'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rootSequenceIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 837 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute prach-ConfigInfo(2)   External EUTRA-RRC:PRACH-ConfigInfo
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PRACH-ConfigInfo'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PRACH-ConfigSIB', Term1, Term2}.



%%================================
%%  P-Max
%%================================
'enc_P-Max'(Val) ->
    'enc_P-Max'(Val, [<<2>>]).

'enc_P-Max'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_P-Max'(Tlv) ->
   'dec_P-Max'(Tlv, [2]).

'dec_P-Max'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if -30 =< Val1, Val1 =< 33 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PhysicalConfigDedicated
%%================================
'enc_PhysicalConfigDedicated'(Val) ->
    'enc_PhysicalConfigDedicated'(Val, [<<48>>]).

'enc_PhysicalConfigDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute pdsch-ConfigDedicated(1)   External EUTRA-RRC:PDSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDSCH-ConfigDedicated'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute pucch-ConfigDedicated(2)   External EUTRA-RRC:PUCCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUCCH-ConfigDedicated'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute pusch-ConfigDedicated(3)   External EUTRA-RRC:PUSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUSCH-ConfigDedicated'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute uplinkPowerControlDedicated(4)   External EUTRA-RRC:UplinkPowerControlDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UplinkPowerControlDedicated'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute tpc-PDCCH-ConfigPUCCH(5)   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TPC-PDCCH-Config'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute tpc-PDCCH-ConfigPUSCH(6)   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TPC-PDCCH-Config'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute cqi-ReportConfig(7)   External EUTRA-RRC:CQI-ReportConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CQI-ReportConfig'(Cindex7, [<<166>>])
       end,

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigDedicated(8)   External EUTRA-RRC:SoundingRS-UL-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SoundingRS-UL-ConfigDedicated'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute antennaInfo(9) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysicalConfigDedicated_antennaInfo'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute schedulingRequestConfig(10)   External EUTRA-RRC:SchedulingRequestConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SchedulingRequestConfig'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PhysicalConfigDedicated_antennaInfo
%%================================
'enc_PhysicalConfigDedicated_antennaInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_AntennaInfoDedicated'(element(2,Val), [<<160>>]);
      defaultValue ->
         encode_null(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_PhysicalConfigDedicated_antennaInfo'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'explicitValue'
    {131072, V1} -> 
        {explicitValue, 'dec_AntennaInfoDedicated'(V1, [])};


%% 'defaultValue'
    {131073, V1} -> 
        {defaultValue, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_PhysicalConfigDedicated'(Tlv) ->
   'dec_PhysicalConfigDedicated'(Tlv, [16]).

'dec_PhysicalConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pdsch-ConfigDedicated(1)   External EUTRA-RRC:PDSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_PDSCH-ConfigDedicated'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute pucch-ConfigDedicated(2)   External EUTRA-RRC:PUCCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_PUCCH-ConfigDedicated'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute pusch-ConfigDedicated(3)   External EUTRA-RRC:PUSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PUSCH-ConfigDedicated'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute uplinkPowerControlDedicated(4)   External EUTRA-RRC:UplinkPowerControlDedicated OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_UplinkPowerControlDedicated'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute tpc-PDCCH-ConfigPUCCH(5)   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_TPC-PDCCH-Config'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute tpc-PDCCH-ConfigPUSCH(6)   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_TPC-PDCCH-Config'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute cqi-ReportConfig(7)   External EUTRA-RRC:CQI-ReportConfig OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_CQI-ReportConfig'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

%%-------------------------------------------------
%% attribute soundingRS-UL-ConfigDedicated(8)   External EUTRA-RRC:SoundingRS-UL-ConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_SoundingRS-UL-ConfigDedicated'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute antennaInfo(9) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_PhysicalConfigDedicated_antennaInfo'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute schedulingRequestConfig(10)   External EUTRA-RRC:SchedulingRequestConfig OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_SchedulingRequestConfig'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PhysicalConfigDedicated', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  PHICH-Config
%%================================
'enc_PHICH-Config'(Val) ->
    'enc_PHICH-Config'(Val, [<<48>>]).

'enc_PHICH-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute phich-Duration(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
normal -> encode_tags([<<128>>], [0], 1);
extended -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute phich-Resource(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
oneSixth -> encode_tags([<<129>>], [0], 1);
half -> encode_tags([<<129>>], [1], 1);
one -> encode_tags([<<129>>], [2], 1);
two -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PHICH-Config'(Tlv) ->
   'dec_PHICH-Config'(Tlv, [16]).

'dec_PHICH-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute phich-Duration(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> normal;
1 -> extended;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute phich-Resource(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> oneSixth;
1 -> half;
2 -> one;
3 -> two;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PHICH-Config', Term1, Term2}.



%%================================
%%  PDSCH-ConfigDedicated
%%================================
'enc_PDSCH-ConfigDedicated'(Val) ->
    'enc_PDSCH-ConfigDedicated'(Val, [<<48>>]).

'enc_PDSCH-ConfigDedicated'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute p-a(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'dB-6' -> encode_tags([<<128>>], [0], 1);
'dB-4dot77' -> encode_tags([<<128>>], [1], 1);
'dB-3' -> encode_tags([<<128>>], [2], 1);
'dB-1dot77' -> encode_tags([<<128>>], [3], 1);
dB0 -> encode_tags([<<128>>], [4], 1);
dB1 -> encode_tags([<<128>>], [5], 1);
dB2 -> encode_tags([<<128>>], [6], 1);
dB3 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PDSCH-ConfigDedicated'(Tlv) ->
   'dec_PDSCH-ConfigDedicated'(Tlv, [16]).

'dec_PDSCH-ConfigDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute p-a(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> 'dB-6';
1 -> 'dB-4dot77';
2 -> 'dB-3';
3 -> 'dB-1dot77';
4 -> dB0;
5 -> dB1;
6 -> dB2;
7 -> dB3;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PDSCH-ConfigDedicated', Term1}.



%%================================
%%  PDSCH-ConfigCommon
%%================================
'enc_PDSCH-ConfigCommon'(Val) ->
    'enc_PDSCH-ConfigCommon'(Val, [<<48>>]).

'enc_PDSCH-ConfigCommon'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute referenceSignalPower(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute p-b(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PDSCH-ConfigCommon'(Tlv) ->
   'dec_PDSCH-ConfigCommon'(Tlv, [16]).

'dec_PDSCH-ConfigCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute referenceSignalPower(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -60 =< Val1, Val1 =< 50 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-b(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 3 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PDSCH-ConfigCommon', Term1, Term2}.



%%================================
%%  PDCP-Config
%%================================
'enc_PDCP-Config'(Val) ->
    'enc_PDCP-Config'(Val, [<<48>>]).

'enc_PDCP-Config'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute discardTimer(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
ms50 -> encode_tags([<<128>>], [0], 1);
ms100 -> encode_tags([<<128>>], [1], 1);
ms150 -> encode_tags([<<128>>], [2], 1);
ms300 -> encode_tags([<<128>>], [3], 1);
ms500 -> encode_tags([<<128>>], [4], 1);
ms750 -> encode_tags([<<128>>], [5], 1);
ms1500 -> encode_tags([<<128>>], [6], 1);
infinity -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute rlc-AM(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config_rlc-AM'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute rlc-UM(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config_rlc-UM'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute headerCompression(4) with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PDCP-Config_headerCompression'(Cindex4, [<<163>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Config_rlc-AM
%%================================
'enc_PDCP-Config_rlc-AM'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute statusReportRequired(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PDCP-Config_rlc-AM'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute statusReportRequired(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PDCP-Config_rlc-AM', Term1}.




%%================================
%%  PDCP-Config_rlc-UM
%%================================
'enc_PDCP-Config_rlc-UM'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute pdcp-SN-Size(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
len7bits -> encode_tags([<<128>>], [0], 1);
len12bits -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PDCP-Config_rlc-UM'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pdcp-SN-Size(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> len7bits;
1 -> len12bits;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PDCP-Config_rlc-UM', Term1}.




%%================================
%%  PDCP-Config_headerCompression
%%================================
'enc_PDCP-Config_headerCompression'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      notUsed ->
         encode_null(element(2,Val), [<<128>>]);
      rohc ->
         'enc_PDCP-Config_headerCompression_rohc'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  PDCP-Config_headerCompression_rohc
%%================================
'enc_PDCP-Config_headerCompression_rohc'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute maxCID(1) with type INTEGER DEFAULT = 15
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_DEFAULT -> {<<>>,0};
         15 -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute profiles(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PDCP-Config_headerCompression_rohc_profiles'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Config_headerCompression_rohc_profiles
%%================================
'enc_PDCP-Config_headerCompression_rohc_profiles'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute profile0x0001(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute profile0x0002(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute profile0x0003(3) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_boolean(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute profile0x0004(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute profile0x0006(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute profile0x0101(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute profile0x0102(7) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_boolean(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute profile0x0103(8) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_boolean(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute profile0x0104(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PDCP-Config_headerCompression_rohc_profiles'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute profile0x0001(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute profile0x0002(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute profile0x0003(3) with type BOOLEAN
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_boolean(V3, [131074]),

%%-------------------------------------------------
%% attribute profile0x0004(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

%%-------------------------------------------------
%% attribute profile0x0006(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute profile0x0101(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute profile0x0102(7) with type BOOLEAN
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_boolean(V7, [131078]),

%%-------------------------------------------------
%% attribute profile0x0103(8) with type BOOLEAN
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = decode_boolean(V8, [131079]),

%%-------------------------------------------------
%% attribute profile0x0104(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'PDCP-Config_headerCompression_rohc_profiles', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.

'dec_PDCP-Config_headerCompression_rohc'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute maxCID(1) with type INTEGER DEFAULT = 15
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 1 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        {15,Tlv1}
end,

%%-------------------------------------------------
%% attribute profiles(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PDCP-Config_headerCompression_rohc_profiles'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PDCP-Config_headerCompression_rohc', Term1, Term2}.

'dec_PDCP-Config_headerCompression'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'notUsed'
    {131072, V1} -> 
        {notUsed, decode_null(V1, [])};


%% 'rohc'
    {131073, V1} -> 
        {rohc, 'dec_PDCP-Config_headerCompression_rohc'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_PDCP-Config'(Tlv) ->
   'dec_PDCP-Config'(Tlv, [16]).

'dec_PDCP-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute discardTimer(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms300;
4 -> ms500;
5 -> ms750;
6 -> ms1500;
7 -> infinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute rlc-AM(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_PDCP-Config_rlc-AM'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute rlc-UM(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PDCP-Config_rlc-UM'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute headerCompression(4) with type CHOICE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_PDCP-Config_headerCompression'(V4, [131075]),

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PDCP-Config', Term1, Term2, Term3, Term4}.



%%================================
%%  DRX-Config
%%================================
'enc_DRX-Config'(Val) ->
    'enc_DRX-Config'(Val, []).

'enc_DRX-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_DRX-Config_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  DRX-Config_setup
%%================================
'enc_DRX-Config_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute onDurationTimer(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
psf1 -> encode_tags([<<128>>], [0], 1);
psf2 -> encode_tags([<<128>>], [1], 1);
psf3 -> encode_tags([<<128>>], [2], 1);
psf4 -> encode_tags([<<128>>], [3], 1);
psf5 -> encode_tags([<<128>>], [4], 1);
psf6 -> encode_tags([<<128>>], [5], 1);
psf8 -> encode_tags([<<128>>], [6], 1);
psf10 -> encode_tags([<<128>>], [7], 1);
psf20 -> encode_tags([<<128>>], [8], 1);
psf30 -> encode_tags([<<128>>], [9], 1);
psf40 -> encode_tags([<<128>>], [10], 1);
psf50 -> encode_tags([<<128>>], [11], 1);
psf60 -> encode_tags([<<128>>], [12], 1);
psf80 -> encode_tags([<<128>>], [13], 1);
psf100 -> encode_tags([<<128>>], [14], 1);
psf200 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute drx-InactivityTimer(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
psf1 -> encode_tags([<<129>>], [0], 1);
psf2 -> encode_tags([<<129>>], [1], 1);
psf3 -> encode_tags([<<129>>], [2], 1);
psf4 -> encode_tags([<<129>>], [3], 1);
psf5 -> encode_tags([<<129>>], [4], 1);
psf6 -> encode_tags([<<129>>], [5], 1);
psf8 -> encode_tags([<<129>>], [6], 1);
psf10 -> encode_tags([<<129>>], [7], 1);
psf20 -> encode_tags([<<129>>], [8], 1);
psf30 -> encode_tags([<<129>>], [9], 1);
psf40 -> encode_tags([<<129>>], [10], 1);
psf50 -> encode_tags([<<129>>], [11], 1);
psf60 -> encode_tags([<<129>>], [12], 1);
psf80 -> encode_tags([<<129>>], [13], 1);
psf100 -> encode_tags([<<129>>], [14], 1);
psf200 -> encode_tags([<<129>>], [15], 1);
psf300 -> encode_tags([<<129>>], [16], 1);
psf500 -> encode_tags([<<129>>], [17], 1);
psf750 -> encode_tags([<<129>>], [18], 1);
psf1280 -> encode_tags([<<129>>], [19], 1);
psf1920 -> encode_tags([<<129>>], [20], 1);
psf2560 -> encode_tags([<<129>>], [21], 1);
spare10 -> encode_tags([<<129>>], [22], 1);
spare9 -> encode_tags([<<129>>], [23], 1);
spare8 -> encode_tags([<<129>>], [24], 1);
spare7 -> encode_tags([<<129>>], [25], 1);
spare6 -> encode_tags([<<129>>], [26], 1);
spare5 -> encode_tags([<<129>>], [27], 1);
spare4 -> encode_tags([<<129>>], [28], 1);
spare3 -> encode_tags([<<129>>], [29], 1);
spare2 -> encode_tags([<<129>>], [30], 1);
spare1 -> encode_tags([<<129>>], [31], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute drx-RetransmissionTimer(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
psf1 -> encode_tags([<<130>>], [0], 1);
psf2 -> encode_tags([<<130>>], [1], 1);
psf4 -> encode_tags([<<130>>], [2], 1);
psf6 -> encode_tags([<<130>>], [3], 1);
psf8 -> encode_tags([<<130>>], [4], 1);
psf16 -> encode_tags([<<130>>], [5], 1);
psf24 -> encode_tags([<<130>>], [6], 1);
psf33 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute longDRX-CycleStartOffset(4) with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute shortDRX(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRX-Config_setup_shortDRX'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DRX-Config_setup_longDRX-CycleStartOffset
%%================================
'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      sf10 ->
         encode_integer(element(2,Val), [<<128>>]);
      sf20 ->
         encode_integer(element(2,Val), [<<129>>]);
      sf32 ->
         encode_integer(element(2,Val), [<<130>>]);
      sf40 ->
         encode_integer(element(2,Val), [<<131>>]);
      sf64 ->
         encode_integer(element(2,Val), [<<132>>]);
      sf80 ->
         encode_integer(element(2,Val), [<<133>>]);
      sf128 ->
         encode_integer(element(2,Val), [<<134>>]);
      sf160 ->
         encode_integer(element(2,Val), [<<135>>]);
      sf256 ->
         encode_integer(element(2,Val), [<<136>>]);
      sf320 ->
         encode_integer(element(2,Val), [<<137>>]);
      sf512 ->
         encode_integer(element(2,Val), [<<138>>]);
      sf640 ->
         encode_integer(element(2,Val), [<<139>>]);
      sf1024 ->
         encode_integer(element(2,Val), [<<140>>]);
      sf1280 ->
         encode_integer(element(2,Val), [<<141>>]);
      sf2048 ->
         encode_integer(element(2,Val), [<<142>>]);
      sf2560 ->
         encode_integer(element(2,Val), [<<143>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_DRX-Config_setup_longDRX-CycleStartOffset'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sf10'
    {131072, V1} -> 
        {sf10, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf20'
    {131073, V1} -> 
        {sf20, begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 19 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf32'
    {131074, V1} -> 
        {sf32, begin
Val3 = decode_integer(V1, []),
if 0 =< Val3, Val3 =< 31 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf40'
    {131075, V1} -> 
        {sf40, begin
Val4 = decode_integer(V1, []),
if 0 =< Val4, Val4 =< 39 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf64'
    {131076, V1} -> 
        {sf64, begin
Val5 = decode_integer(V1, []),
if 0 =< Val5, Val5 =< 63 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf80'
    {131077, V1} -> 
        {sf80, begin
Val6 = decode_integer(V1, []),
if 0 =< Val6, Val6 =< 79 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf128'
    {131078, V1} -> 
        {sf128, begin
Val7 = decode_integer(V1, []),
if 0 =< Val7, Val7 =< 127 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf160'
    {131079, V1} -> 
        {sf160, begin
Val8 = decode_integer(V1, []),
if 0 =< Val8, Val8 =< 159 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf256'
    {131080, V1} -> 
        {sf256, begin
Val9 = decode_integer(V1, []),
if 0 =< Val9, Val9 =< 255 ->
Val9;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf320'
    {131081, V1} -> 
        {sf320, begin
Val10 = decode_integer(V1, []),
if 0 =< Val10, Val10 =< 319 ->
Val10;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf512'
    {131082, V1} -> 
        {sf512, begin
Val11 = decode_integer(V1, []),
if 0 =< Val11, Val11 =< 511 ->
Val11;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf640'
    {131083, V1} -> 
        {sf640, begin
Val12 = decode_integer(V1, []),
if 0 =< Val12, Val12 =< 639 ->
Val12;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf1024'
    {131084, V1} -> 
        {sf1024, begin
Val13 = decode_integer(V1, []),
if 0 =< Val13, Val13 =< 1023 ->
Val13;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf1280'
    {131085, V1} -> 
        {sf1280, begin
Val14 = decode_integer(V1, []),
if 0 =< Val14, Val14 =< 1279 ->
Val14;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf2048'
    {131086, V1} -> 
        {sf2048, begin
Val15 = decode_integer(V1, []),
if 0 =< Val15, Val15 =< 2047 ->
Val15;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'sf2560'
    {131087, V1} -> 
        {sf2560, begin
Val16 = decode_integer(V1, []),
if 0 =< Val16, Val16 =< 2559 ->
Val16;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  DRX-Config_setup_shortDRX
%%================================
'enc_DRX-Config_setup_shortDRX'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute shortDRX-Cycle(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
sf2 -> encode_tags([<<128>>], [0], 1);
sf5 -> encode_tags([<<128>>], [1], 1);
sf8 -> encode_tags([<<128>>], [2], 1);
sf10 -> encode_tags([<<128>>], [3], 1);
sf16 -> encode_tags([<<128>>], [4], 1);
sf20 -> encode_tags([<<128>>], [5], 1);
sf32 -> encode_tags([<<128>>], [6], 1);
sf40 -> encode_tags([<<128>>], [7], 1);
sf64 -> encode_tags([<<128>>], [8], 1);
sf80 -> encode_tags([<<128>>], [9], 1);
sf128 -> encode_tags([<<128>>], [10], 1);
sf160 -> encode_tags([<<128>>], [11], 1);
sf256 -> encode_tags([<<128>>], [12], 1);
sf320 -> encode_tags([<<128>>], [13], 1);
sf512 -> encode_tags([<<128>>], [14], 1);
sf640 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute drxShortCycleTimer(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DRX-Config_setup_shortDRX'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute shortDRX-Cycle(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> sf2;
1 -> sf5;
2 -> sf8;
3 -> sf10;
4 -> sf16;
5 -> sf20;
6 -> sf32;
7 -> sf40;
8 -> sf64;
9 -> sf80;
10 -> sf128;
11 -> sf160;
12 -> sf256;
13 -> sf320;
14 -> sf512;
15 -> sf640;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute drxShortCycleTimer(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 1 =< Val1, Val1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DRX-Config_setup_shortDRX', Term1, Term2}.

'dec_DRX-Config_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute onDurationTimer(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> psf1;
1 -> psf2;
2 -> psf3;
3 -> psf4;
4 -> psf5;
5 -> psf6;
6 -> psf8;
7 -> psf10;
8 -> psf20;
9 -> psf30;
10 -> psf40;
11 -> psf50;
12 -> psf60;
13 -> psf80;
14 -> psf100;
15 -> psf200;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute drx-InactivityTimer(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> psf1;
1 -> psf2;
2 -> psf3;
3 -> psf4;
4 -> psf5;
5 -> psf6;
6 -> psf8;
7 -> psf10;
8 -> psf20;
9 -> psf30;
10 -> psf40;
11 -> psf50;
12 -> psf60;
13 -> psf80;
14 -> psf100;
15 -> psf200;
16 -> psf300;
17 -> psf500;
18 -> psf750;
19 -> psf1280;
20 -> psf1920;
21 -> psf2560;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute drx-RetransmissionTimer(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> psf1;
1 -> psf2;
2 -> psf4;
3 -> psf6;
4 -> psf8;
5 -> psf16;
6 -> psf24;
7 -> psf33;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute longDRX-CycleStartOffset(4) with type CHOICE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_DRX-Config_setup_longDRX-CycleStartOffset'(V4, [131075]),

%%-------------------------------------------------
%% attribute shortDRX(5) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_DRX-Config_setup_shortDRX'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'DRX-Config_setup', Term1, Term2, Term3, Term4, Term5}.



'dec_DRX-Config'(Tlv) ->
   'dec_DRX-Config'(Tlv, []).

'dec_DRX-Config'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_DRX-Config_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  MAC-MainConfig
%%================================
'enc_MAC-MainConfig'(Val) ->
    'enc_MAC-MainConfig'(Val, [<<48>>]).

'enc_MAC-MainConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute ul-SCH-Config(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MAC-MainConfig_ul-SCH-Config'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute drx-Config(2)   External EUTRA-RRC:DRX-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRX-Config'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute timeAlignmentTimerDedicated(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sf500 -> encode_tags([<<130>>], [0], 1);
sf750 -> encode_tags([<<130>>], [1], 1);
sf1280 -> encode_tags([<<130>>], [2], 1);
sf1920 -> encode_tags([<<130>>], [3], 1);
sf2560 -> encode_tags([<<130>>], [4], 1);
sf5120 -> encode_tags([<<130>>], [5], 1);
sf10240 -> encode_tags([<<130>>], [6], 1);
infinity -> encode_tags([<<130>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute phr-Config(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MAC-MainConfig_phr-Config'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MAC-MainConfig_ul-SCH-Config
%%================================
'enc_MAC-MainConfig_ul-SCH-Config'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute maxHARQ-Tx(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
n1 -> encode_tags([<<128>>], [0], 1);
n2 -> encode_tags([<<128>>], [1], 1);
n3 -> encode_tags([<<128>>], [2], 1);
n4 -> encode_tags([<<128>>], [3], 1);
n5 -> encode_tags([<<128>>], [4], 1);
n6 -> encode_tags([<<128>>], [5], 1);
n7 -> encode_tags([<<128>>], [6], 1);
n8 -> encode_tags([<<128>>], [7], 1);
n10 -> encode_tags([<<128>>], [8], 1);
n12 -> encode_tags([<<128>>], [9], 1);
n16 -> encode_tags([<<128>>], [10], 1);
n20 -> encode_tags([<<128>>], [11], 1);
n24 -> encode_tags([<<128>>], [12], 1);
n28 -> encode_tags([<<128>>], [13], 1);
spare2 -> encode_tags([<<128>>], [14], 1);
spare1 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute periodicBSR-Timer(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
sf5 -> encode_tags([<<129>>], [0], 1);
sf10 -> encode_tags([<<129>>], [1], 1);
sf16 -> encode_tags([<<129>>], [2], 1);
sf20 -> encode_tags([<<129>>], [3], 1);
sf32 -> encode_tags([<<129>>], [4], 1);
sf40 -> encode_tags([<<129>>], [5], 1);
sf64 -> encode_tags([<<129>>], [6], 1);
sf80 -> encode_tags([<<129>>], [7], 1);
sf128 -> encode_tags([<<129>>], [8], 1);
sf160 -> encode_tags([<<129>>], [9], 1);
sf320 -> encode_tags([<<129>>], [10], 1);
sf640 -> encode_tags([<<129>>], [11], 1);
sf1280 -> encode_tags([<<129>>], [12], 1);
sf2560 -> encode_tags([<<129>>], [13], 1);
infinity -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute retxBSR-Timer(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sf320 -> encode_tags([<<130>>], [0], 1);
sf640 -> encode_tags([<<130>>], [1], 1);
sf1280 -> encode_tags([<<130>>], [2], 1);
sf2560 -> encode_tags([<<130>>], [3], 1);
sf5120 -> encode_tags([<<130>>], [4], 1);
sf10240 -> encode_tags([<<130>>], [5], 1);
spare2 -> encode_tags([<<130>>], [6], 1);
spare1 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute ttiBundling(4) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_boolean(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MAC-MainConfig_ul-SCH-Config'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute maxHARQ-Tx(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n5;
5 -> n6;
6 -> n7;
7 -> n8;
8 -> n10;
9 -> n12;
10 -> n16;
11 -> n20;
12 -> n24;
13 -> n28;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute periodicBSR-Timer(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> sf5;
1 -> sf10;
2 -> sf16;
3 -> sf20;
4 -> sf32;
5 -> sf40;
6 -> sf64;
7 -> sf80;
8 -> sf128;
9 -> sf160;
10 -> sf320;
11 -> sf640;
12 -> sf1280;
13 -> sf2560;
14 -> infinity;
15 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute retxBSR-Timer(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> sf320;
1 -> sf640;
2 -> sf1280;
3 -> sf2560;
4 -> sf5120;
5 -> sf10240;
6 -> spare2;
7 -> spare1;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

%%-------------------------------------------------
%% attribute ttiBundling(4) with type BOOLEAN
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_boolean(V4, [131075]),

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MAC-MainConfig_ul-SCH-Config', Term1, Term2, Term3, Term4}.




%%================================
%%  MAC-MainConfig_phr-Config
%%================================
'enc_MAC-MainConfig_phr-Config'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_MAC-MainConfig_phr-Config_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MAC-MainConfig_phr-Config_setup
%%================================
'enc_MAC-MainConfig_phr-Config_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute periodicPHR-Timer(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
sf10 -> encode_tags([<<128>>], [0], 1);
sf20 -> encode_tags([<<128>>], [1], 1);
sf50 -> encode_tags([<<128>>], [2], 1);
sf100 -> encode_tags([<<128>>], [3], 1);
sf200 -> encode_tags([<<128>>], [4], 1);
sf500 -> encode_tags([<<128>>], [5], 1);
sf1000 -> encode_tags([<<128>>], [6], 1);
infinity -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute prohibitPHR-Timer(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
sf0 -> encode_tags([<<129>>], [0], 1);
sf10 -> encode_tags([<<129>>], [1], 1);
sf20 -> encode_tags([<<129>>], [2], 1);
sf50 -> encode_tags([<<129>>], [3], 1);
sf100 -> encode_tags([<<129>>], [4], 1);
sf200 -> encode_tags([<<129>>], [5], 1);
sf500 -> encode_tags([<<129>>], [6], 1);
sf1000 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute dl-PathlossChange(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
dB1 -> encode_tags([<<130>>], [0], 1);
dB3 -> encode_tags([<<130>>], [1], 1);
dB6 -> encode_tags([<<130>>], [2], 1);
infinity -> encode_tags([<<130>>], [3], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MAC-MainConfig_phr-Config_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute periodicPHR-Timer(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> sf10;
1 -> sf20;
2 -> sf50;
3 -> sf100;
4 -> sf200;
5 -> sf500;
6 -> sf1000;
7 -> infinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute prohibitPHR-Timer(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> sf0;
1 -> sf10;
2 -> sf20;
3 -> sf50;
4 -> sf100;
5 -> sf200;
6 -> sf500;
7 -> sf1000;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute dl-PathlossChange(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> dB1;
1 -> dB3;
2 -> dB6;
3 -> infinity;
Default3 -> exit({error,{asn1,{illegal_enumerated,Default3}}})
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MAC-MainConfig_phr-Config_setup', Term1, Term2, Term3}.

'dec_MAC-MainConfig_phr-Config'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_MAC-MainConfig_phr-Config_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MAC-MainConfig'(Tlv) ->
   'dec_MAC-MainConfig'(Tlv, [16]).

'dec_MAC-MainConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-SCH-Config(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_MAC-MainConfig_ul-SCH-Config'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute drx-Config(2)   External EUTRA-RRC:DRX-Config OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_DRX-Config'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute timeAlignmentTimerDedicated(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute phr-Config(4) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_MAC-MainConfig_phr-Config'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'MAC-MainConfig', Term1, Term2, Term3, Term4}.



%%================================
%%  LogicalChannelConfig
%%================================
'enc_LogicalChannelConfig'(Val) ->
    'enc_LogicalChannelConfig'(Val, [<<48>>]).

'enc_LogicalChannelConfig'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute ul-SpecificParameters(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LogicalChannelConfig_ul-SpecificParameters'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LogicalChannelConfig_ul-SpecificParameters
%%================================
'enc_LogicalChannelConfig_ul-SpecificParameters'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute priority(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute prioritisedBitRate(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
kBps0 -> encode_tags([<<129>>], [0], 1);
kBps8 -> encode_tags([<<129>>], [1], 1);
kBps16 -> encode_tags([<<129>>], [2], 1);
kBps32 -> encode_tags([<<129>>], [3], 1);
kBps64 -> encode_tags([<<129>>], [4], 1);
kBps128 -> encode_tags([<<129>>], [5], 1);
kBps256 -> encode_tags([<<129>>], [6], 1);
infinity -> encode_tags([<<129>>], [7], 1);
spare8 -> encode_tags([<<129>>], [8], 1);
spare7 -> encode_tags([<<129>>], [9], 1);
spare6 -> encode_tags([<<129>>], [10], 1);
spare5 -> encode_tags([<<129>>], [11], 1);
spare4 -> encode_tags([<<129>>], [12], 1);
spare3 -> encode_tags([<<129>>], [13], 1);
spare2 -> encode_tags([<<129>>], [14], 1);
spare1 -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute bucketSizeDuration(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
ms50 -> encode_tags([<<130>>], [0], 1);
ms100 -> encode_tags([<<130>>], [1], 1);
ms150 -> encode_tags([<<130>>], [2], 1);
ms300 -> encode_tags([<<130>>], [3], 1);
ms500 -> encode_tags([<<130>>], [4], 1);
ms1000 -> encode_tags([<<130>>], [5], 1);
spare2 -> encode_tags([<<130>>], [6], 1);
spare1 -> encode_tags([<<130>>], [7], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute logicalChannelGroup(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LogicalChannelConfig_ul-SpecificParameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute priority(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute prioritisedBitRate(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> kBps0;
1 -> kBps8;
2 -> kBps16;
3 -> kBps32;
4 -> kBps64;
5 -> kBps128;
6 -> kBps256;
7 -> infinity;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute bucketSizeDuration(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms300;
4 -> ms500;
5 -> ms1000;
6 -> spare2;
7 -> spare1;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute logicalChannelGroup(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val2 = decode_integer(V4, []),
if 0 =< Val2, Val2 =< 3 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'LogicalChannelConfig_ul-SpecificParameters', Term1, Term2, Term3, Term4}.



'dec_LogicalChannelConfig'(Tlv) ->
   'dec_LogicalChannelConfig'(Tlv, [16]).

'dec_LogicalChannelConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-SpecificParameters(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_LogicalChannelConfig_ul-SpecificParameters'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LogicalChannelConfig', Term1}.



%%================================
%%  DRB-Identity
%%================================
'enc_DRB-Identity'(Val) ->
    'enc_DRB-Identity'(Val, [<<2>>]).

'enc_DRB-Identity'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DRB-Identity'(Tlv) ->
   'dec_DRB-Identity'(Tlv, [2]).

'dec_DRB-Identity'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  CQI-ReportPeriodic
%%================================
'enc_CQI-ReportPeriodic'(Val) ->
    'enc_CQI-ReportPeriodic'(Val, []).

'enc_CQI-ReportPeriodic'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         'enc_CQI-ReportPeriodic_setup'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CQI-ReportPeriodic_setup
%%================================
'enc_CQI-ReportPeriodic_setup'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute cqi-PUCCH-ResourceIndex(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cqi-pmi-ConfigIndex(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cqi-FormatIndicatorPeriodic(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute ri-ConfigIndex(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute simultaneousAckNackAndCQI(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic
%%================================
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      widebandCQI ->
         encode_null(element(2,Val), [<<128>>]);
      subbandCQI ->
         'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI
%%================================
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Val, TagIn) ->
   {_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute k(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute k(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI', Term1}.

'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'widebandCQI'
    {131072, V1} -> 
        {widebandCQI, decode_null(V1, [])};


%% 'subbandCQI'
    {131073, V1} -> 
        {subbandCQI, 'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.
'dec_CQI-ReportPeriodic_setup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cqi-PUCCH-ResourceIndex(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 1185 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cqi-pmi-ConfigIndex(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 1023 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cqi-FormatIndicatorPeriodic(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(V3, [131074]),

%%-------------------------------------------------
%% attribute ri-ConfigIndex(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val3 = decode_integer(V4, []),
if 0 =< Val3, Val3 =< 1023 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute simultaneousAckNackAndCQI(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

case Tlv6 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv6}}}) % extra fields not allowed
end,
   {'CQI-ReportPeriodic_setup', Term1, Term2, Term3, Term4, Term5}.



'dec_CQI-ReportPeriodic'(Tlv) ->
   'dec_CQI-ReportPeriodic'(Tlv, []).

'dec_CQI-ReportPeriodic'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, 'dec_CQI-ReportPeriodic_setup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CQI-ReportConfig
%%================================
'enc_CQI-ReportConfig'(Val) ->
    'enc_CQI-ReportConfig'(Val, [<<48>>]).

'enc_CQI-ReportConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute cqi-ReportModeAperiodic(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex1 of
rm12 -> encode_tags([<<128>>], [0], 1);
rm20 -> encode_tags([<<128>>], [1], 1);
rm22 -> encode_tags([<<128>>], [2], 1);
rm30 -> encode_tags([<<128>>], [3], 1);
rm31 -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute nomPDSCH-RS-EPRE-Offset(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cqi-ReportPeriodic(3)   External EUTRA-RRC:CQI-ReportPeriodic OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CQI-ReportPeriodic'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CQI-ReportConfig'(Tlv) ->
   'dec_CQI-ReportConfig'(Tlv, [16]).

'dec_CQI-ReportConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cqi-ReportModeAperiodic(1) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {case decode_integer(V1, []) of
0 -> rm12;
1 -> rm20;
2 -> rm22;
3 -> rm30;
4 -> rm31;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute nomPDSCH-RS-EPRE-Offset(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if -1 =< Val1, Val1 =< 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cqi-ReportPeriodic(3)   External EUTRA-RRC:CQI-ReportPeriodic OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CQI-ReportPeriodic'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'CQI-ReportConfig', Term1, Term2, Term3}.



%%================================
%%  AntennaInfoDedicated
%%================================
'enc_AntennaInfoDedicated'(Val) ->
    'enc_AntennaInfoDedicated'(Val, [<<48>>]).

'enc_AntennaInfoDedicated'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute transmissionMode(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
tm1 -> encode_tags([<<128>>], [0], 1);
tm2 -> encode_tags([<<128>>], [1], 1);
tm3 -> encode_tags([<<128>>], [2], 1);
tm4 -> encode_tags([<<128>>], [3], 1);
tm5 -> encode_tags([<<128>>], [4], 1);
tm6 -> encode_tags([<<128>>], [5], 1);
tm7 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute codebookSubsetRestriction(2) with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AntennaInfoDedicated_codebookSubsetRestriction'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ue-TransmitAntennaSelection(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AntennaInfoDedicated_codebookSubsetRestriction
%%================================
'enc_AntennaInfoDedicated_codebookSubsetRestriction'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'n2TxAntenna-tm3' ->
         encode_unnamed_bit_string(2, element(2,Val), [<<128>>]);
      'n4TxAntenna-tm3' ->
         encode_unnamed_bit_string(4, element(2,Val), [<<129>>]);
      'n2TxAntenna-tm4' ->
         encode_unnamed_bit_string(6, element(2,Val), [<<130>>]);
      'n4TxAntenna-tm4' ->
         encode_unnamed_bit_string(64, element(2,Val), [<<131>>]);
      'n2TxAntenna-tm5' ->
         encode_unnamed_bit_string(4, element(2,Val), [<<132>>]);
      'n4TxAntenna-tm5' ->
         encode_unnamed_bit_string(16, element(2,Val), [<<133>>]);
      'n2TxAntenna-tm6' ->
         encode_unnamed_bit_string(4, element(2,Val), [<<134>>]);
      'n4TxAntenna-tm6' ->
         encode_unnamed_bit_string(16, element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_AntennaInfoDedicated_codebookSubsetRestriction'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'n2TxAntenna-tm3'
    {131072, V1} -> 
        {'n2TxAntenna-tm3', begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n4TxAntenna-tm3'
    {131073, V1} -> 
        {'n4TxAntenna-tm3', begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 4 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n2TxAntenna-tm4'
    {131074, V1} -> 
        {'n2TxAntenna-tm4', begin
Val3 = decode_native_bit_string(V1, []),
C3 = bit_size(Val3),
if C3 =:= 6 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n4TxAntenna-tm4'
    {131075, V1} -> 
        {'n4TxAntenna-tm4', begin
Val4 = decode_native_bit_string(V1, []),
C4 = bit_size(Val4),
if C4 =:= 64 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n2TxAntenna-tm5'
    {131076, V1} -> 
        {'n2TxAntenna-tm5', begin
Val5 = decode_native_bit_string(V1, []),
C5 = bit_size(Val5),
if C5 =:= 4 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n4TxAntenna-tm5'
    {131077, V1} -> 
        {'n4TxAntenna-tm5', begin
Val6 = decode_native_bit_string(V1, []),
C6 = bit_size(Val6),
if C6 =:= 16 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n2TxAntenna-tm6'
    {131078, V1} -> 
        {'n2TxAntenna-tm6', begin
Val7 = decode_native_bit_string(V1, []),
C7 = bit_size(Val7),
if C7 =:= 4 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'n4TxAntenna-tm6'
    {131079, V1} -> 
        {'n4TxAntenna-tm6', begin
Val8 = decode_native_bit_string(V1, []),
C8 = bit_size(Val8),
if C8 =:= 16 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  AntennaInfoDedicated_ue-TransmitAntennaSelection
%%================================
'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         encode_null(element(2,Val), [<<128>>]);
      setup ->
         case element(2,Val) of
closedLoop -> encode_tags([<<129>>], [0], 1);
openLoop -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'release'
    {131072, V1} -> 
        {release, decode_null(V1, [])};


%% 'setup'
    {131073, V1} -> 
        {setup, case decode_integer(V1, []) of
0 -> closedLoop;
1 -> openLoop;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_AntennaInfoDedicated'(Tlv) ->
   'dec_AntennaInfoDedicated'(Tlv, [16]).

'dec_AntennaInfoDedicated'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute transmissionMode(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> tm1;
1 -> tm2;
2 -> tm3;
3 -> tm4;
4 -> tm5;
5 -> tm6;
6 -> tm7;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute codebookSubsetRestriction(2) with type CHOICE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AntennaInfoDedicated_codebookSubsetRestriction'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ue-TransmitAntennaSelection(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'AntennaInfoDedicated', Term1, Term2, Term3}.



%%================================
%%  AntennaInfoCommon
%%================================
'enc_AntennaInfoCommon'(Val) ->
    'enc_AntennaInfoCommon'(Val, [<<48>>]).

'enc_AntennaInfoCommon'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute antennaPortsCount(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
an1 -> encode_tags([<<128>>], [0], 1);
an2 -> encode_tags([<<128>>], [1], 1);
an4 -> encode_tags([<<128>>], [2], 1);
spare1 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AntennaInfoCommon'(Tlv) ->
   'dec_AntennaInfoCommon'(Tlv, [16]).

'dec_AntennaInfoCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute antennaPortsCount(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> an1;
1 -> an2;
2 -> an4;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'AntennaInfoCommon', Term1}.



%%================================
%%  SystemInformationBlockType11
%%================================
'enc_SystemInformationBlockType11'(Val) ->
    'enc_SystemInformationBlockType11'(Val, [<<48>>]).

'enc_SystemInformationBlockType11'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute messageIdentifier(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(16, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serialNumber(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute warningMessageSegmentType(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
notLastSegment -> encode_tags([<<130>>], [0], 1);
lastSegment -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute warningMessageSegmentNumber(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute warningMessageSegment(5) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_restricted_string(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute dataCodingScheme(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex6, [<<133>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType11'(Tlv) ->
   'dec_SystemInformationBlockType11'(Tlv, [16]).

'dec_SystemInformationBlockType11'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageIdentifier(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute serialNumber(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute warningMessageSegmentType(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> notLastSegment;
1 -> lastSegment;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute warningMessageSegmentNumber(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val3 = decode_integer(V4, [131075]),
if 0 =< Val3, Val3 =< 63 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute warningMessageSegment(5) with type OCTET STRING
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_octet_string(V5, [131076]),

%%-------------------------------------------------
%% attribute dataCodingScheme(6) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {begin
Val4 = decode_octet_string(V6, []),
C3 = byte_size(Val4),
if C3 =:= 1 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType11', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  SystemInformationBlockType10
%%================================
'enc_SystemInformationBlockType10'(Val) ->
    'enc_SystemInformationBlockType10'(Val, [<<48>>]).

'enc_SystemInformationBlockType10'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute messageIdentifier(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(16, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute serialNumber(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute warningType(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute warningSecurityInfo(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex4, [<<131>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType10'(Tlv) ->
   'dec_SystemInformationBlockType10'(Tlv, [16]).

'dec_SystemInformationBlockType10'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute messageIdentifier(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute serialNumber(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 16 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute warningType(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_octet_string(V3, [131074]),
C3 = byte_size(Val3),
if C3 =:= 2 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute warningSecurityInfo(4) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_octet_string(V4, []),
C4 = byte_size(Val4),
if C4 =:= 50 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType10', Term1, Term2, Term3, Term4}.



%%================================
%%  SystemInformationBlockType9
%%================================
'enc_SystemInformationBlockType9'(Val) ->
    'enc_SystemInformationBlockType9'(Val, [<<48>>]).

'enc_SystemInformationBlockType9'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute hnb-Name(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex1, [<<128>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType9'(Tlv) ->
   'dec_SystemInformationBlockType9'(Tlv, [16]).

'dec_SystemInformationBlockType9'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute hnb-Name(1) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_octet_string(V1, []),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 48 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType9', Term1}.



%%================================
%%  BandClassInfoCDMA2000
%%================================
'enc_BandClassInfoCDMA2000'(Val) ->
    'enc_BandClassInfoCDMA2000'(Val, [<<48>>]).

'enc_BandClassInfoCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bc0 -> encode_tags([<<128>>], [0], 1);
bc1 -> encode_tags([<<128>>], [1], 1);
bc2 -> encode_tags([<<128>>], [2], 1);
bc3 -> encode_tags([<<128>>], [3], 1);
bc4 -> encode_tags([<<128>>], [4], 1);
bc5 -> encode_tags([<<128>>], [5], 1);
bc6 -> encode_tags([<<128>>], [6], 1);
bc7 -> encode_tags([<<128>>], [7], 1);
bc8 -> encode_tags([<<128>>], [8], 1);
bc9 -> encode_tags([<<128>>], [9], 1);
bc10 -> encode_tags([<<128>>], [10], 1);
bc11 -> encode_tags([<<128>>], [11], 1);
bc12 -> encode_tags([<<128>>], [12], 1);
bc13 -> encode_tags([<<128>>], [13], 1);
bc14 -> encode_tags([<<128>>], [14], 1);
bc15 -> encode_tags([<<128>>], [15], 1);
bc16 -> encode_tags([<<128>>], [16], 1);
bc17 -> encode_tags([<<128>>], [17], 1);
spare14 -> encode_tags([<<128>>], [18], 1);
spare13 -> encode_tags([<<128>>], [19], 1);
spare12 -> encode_tags([<<128>>], [20], 1);
spare11 -> encode_tags([<<128>>], [21], 1);
spare10 -> encode_tags([<<128>>], [22], 1);
spare9 -> encode_tags([<<128>>], [23], 1);
spare8 -> encode_tags([<<128>>], [24], 1);
spare7 -> encode_tags([<<128>>], [25], 1);
spare6 -> encode_tags([<<128>>], [26], 1);
spare5 -> encode_tags([<<128>>], [27], 1);
spare4 -> encode_tags([<<128>>], [28], 1);
spare3 -> encode_tags([<<128>>], [29], 1);
spare2 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BandClassInfoCDMA2000'(Tlv) ->
   'dec_BandClassInfoCDMA2000'(Tlv, [16]).

'dec_BandClassInfoCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 0 =< Val2, Val2 =< 63 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val3 = decode_integer(V4, [131075]),
if 0 =< Val3, Val3 =< 63 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'BandClassInfoCDMA2000', Term1, Term2, Term3, Term4}.



%%================================
%%  BandClassListCDMA2000
%%================================
'enc_BandClassListCDMA2000'(Val) ->
    'enc_BandClassListCDMA2000'(Val, [<<48>>]).

'enc_BandClassListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BandClassListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassInfoCDMA2000'(H, [<<48>>]),
   'enc_BandClassListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassListCDMA2000'(Tlv) ->
   'dec_BandClassListCDMA2000'(Tlv, [16]).

'dec_BandClassListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_BandClassInfoCDMA2000'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  PhysCellIdListCDMA2000
%%================================
'enc_PhysCellIdListCDMA2000'(Val) ->
    'enc_PhysCellIdListCDMA2000'(Val, [<<48>>]).

'enc_PhysCellIdListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PhysCellIdListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PhysCellIdListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_PhysCellIdListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PhysCellIdListCDMA2000'(Tlv) ->
   'dec_PhysCellIdListCDMA2000'(Tlv, [16]).

'dec_PhysCellIdListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 511 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  NeighCellsPerBandclassCDMA2000
%%================================
'enc_NeighCellsPerBandclassCDMA2000'(Val) ->
    'enc_NeighCellsPerBandclassCDMA2000'(Val, [<<48>>]).

'enc_NeighCellsPerBandclassCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute arfcn(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellIdList(2)   External EUTRA-RRC:PhysCellIdListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdListCDMA2000'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_NeighCellsPerBandclassCDMA2000'(Tlv) ->
   'dec_NeighCellsPerBandclassCDMA2000'(Tlv, [16]).

'dec_NeighCellsPerBandclassCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute arfcn(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 2047 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellIdList(2)   External EUTRA-RRC:PhysCellIdListCDMA2000
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PhysCellIdListCDMA2000'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'NeighCellsPerBandclassCDMA2000', Term1, Term2}.



%%================================
%%  NeighCellsPerBandclassListCDMA2000
%%================================
'enc_NeighCellsPerBandclassListCDMA2000'(Val) ->
    'enc_NeighCellsPerBandclassListCDMA2000'(Val, [<<48>>]).

'enc_NeighCellsPerBandclassListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NeighCellsPerBandclassListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NeighCellsPerBandclassListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NeighCellsPerBandclassListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NeighCellsPerBandclassCDMA2000'(H, [<<48>>]),
   'enc_NeighCellsPerBandclassListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_NeighCellsPerBandclassListCDMA2000'(Tlv) ->
   'dec_NeighCellsPerBandclassListCDMA2000'(Tlv, [16]).

'dec_NeighCellsPerBandclassListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NeighCellsPerBandclassCDMA2000'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  NeighCellCDMA2000
%%================================
'enc_NeighCellCDMA2000'(Val) ->
    'enc_NeighCellCDMA2000'(Val, [<<48>>]).

'enc_NeighCellCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bc0 -> encode_tags([<<128>>], [0], 1);
bc1 -> encode_tags([<<128>>], [1], 1);
bc2 -> encode_tags([<<128>>], [2], 1);
bc3 -> encode_tags([<<128>>], [3], 1);
bc4 -> encode_tags([<<128>>], [4], 1);
bc5 -> encode_tags([<<128>>], [5], 1);
bc6 -> encode_tags([<<128>>], [6], 1);
bc7 -> encode_tags([<<128>>], [7], 1);
bc8 -> encode_tags([<<128>>], [8], 1);
bc9 -> encode_tags([<<128>>], [9], 1);
bc10 -> encode_tags([<<128>>], [10], 1);
bc11 -> encode_tags([<<128>>], [11], 1);
bc12 -> encode_tags([<<128>>], [12], 1);
bc13 -> encode_tags([<<128>>], [13], 1);
bc14 -> encode_tags([<<128>>], [14], 1);
bc15 -> encode_tags([<<128>>], [15], 1);
bc16 -> encode_tags([<<128>>], [16], 1);
bc17 -> encode_tags([<<128>>], [17], 1);
spare14 -> encode_tags([<<128>>], [18], 1);
spare13 -> encode_tags([<<128>>], [19], 1);
spare12 -> encode_tags([<<128>>], [20], 1);
spare11 -> encode_tags([<<128>>], [21], 1);
spare10 -> encode_tags([<<128>>], [22], 1);
spare9 -> encode_tags([<<128>>], [23], 1);
spare8 -> encode_tags([<<128>>], [24], 1);
spare7 -> encode_tags([<<128>>], [25], 1);
spare6 -> encode_tags([<<128>>], [26], 1);
spare5 -> encode_tags([<<128>>], [27], 1);
spare4 -> encode_tags([<<128>>], [28], 1);
spare3 -> encode_tags([<<128>>], [29], 1);
spare2 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute neighCellsPerFreqList(2)   External EUTRA-RRC:NeighCellsPerBandclassListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NeighCellsPerBandclassListCDMA2000'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_NeighCellCDMA2000'(Tlv) ->
   'dec_NeighCellCDMA2000'(Tlv, [16]).

'dec_NeighCellCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute neighCellsPerFreqList(2)   External EUTRA-RRC:NeighCellsPerBandclassListCDMA2000
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_NeighCellsPerBandclassListCDMA2000'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'NeighCellCDMA2000', Term1, Term2}.



%%================================
%%  NeighCellListCDMA2000
%%================================
'enc_NeighCellListCDMA2000'(Val) ->
    'enc_NeighCellListCDMA2000'(Val, [<<48>>]).

'enc_NeighCellListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NeighCellListCDMA2000_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_NeighCellListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NeighCellListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NeighCellCDMA2000'(H, [<<48>>]),
   'enc_NeighCellListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_NeighCellListCDMA2000'(Tlv) ->
   'dec_NeighCellListCDMA2000'(Tlv, [16]).

'dec_NeighCellListCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_NeighCellCDMA2000'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CellReselectionParametersCDMA2000
%%================================
'enc_CellReselectionParametersCDMA2000'(Val) ->
    'enc_CellReselectionParametersCDMA2000'(Val, [<<48>>]).

'enc_CellReselectionParametersCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute bandClassList(1)   External EUTRA-RRC:BandClassListCDMA2000
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BandClassListCDMA2000'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute neighCellList(2)   External EUTRA-RRC:NeighCellListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NeighCellListCDMA2000'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute t-ReselectionCDMA2000(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute t-ReselectionCDMA2000-SF(4)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CellReselectionParametersCDMA2000'(Tlv) ->
   'dec_CellReselectionParametersCDMA2000'(Tlv, [16]).

'dec_CellReselectionParametersCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClassList(1)   External EUTRA-RRC:BandClassListCDMA2000
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_BandClassListCDMA2000'(V1, [131072]),

%%-------------------------------------------------
%% attribute neighCellList(2)   External EUTRA-RRC:NeighCellListCDMA2000
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_NeighCellListCDMA2000'(V2, [131073]),

%%-------------------------------------------------
%% attribute t-ReselectionCDMA2000(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionCDMA2000-SF(4)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SpeedStateScaleFactors'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'CellReselectionParametersCDMA2000', Term1, Term2, Term3, Term4}.



%%================================
%%  SystemInformationBlockType8
%%================================
'enc_SystemInformationBlockType8'(Val) ->
    'enc_SystemInformationBlockType8'(Val, [<<48>>]).

'enc_SystemInformationBlockType8'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute systemTimeInfo(1)   External EUTRA-RRC:SystemTimeInfoCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemTimeInfoCDMA2000'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute searchWindowSize(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute parametersHRPD(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType8_parametersHRPD'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute parameters1XRTT(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType8_parameters1XRTT'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType8_parametersHRPD
%%================================
'enc_SystemInformationBlockType8_parametersHRPD'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute preRegistrationInfoHRPD(1)   External EUTRA-RRC:PreRegistrationInfoHRPD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PreRegistrationInfoHRPD'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellReselectionParametersHRPD(2)   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellReselectionParametersCDMA2000'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType8_parametersHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute preRegistrationInfoHRPD(1)   External EUTRA-RRC:PreRegistrationInfoHRPD
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PreRegistrationInfoHRPD'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellReselectionParametersHRPD(2)   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellReselectionParametersCDMA2000'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType8_parametersHRPD', Term1, Term2}.




%%================================
%%  SystemInformationBlockType8_parameters1XRTT
%%================================
'enc_SystemInformationBlockType8_parameters1XRTT'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute csfb-RegistrationParam1XRTT(1)   External EUTRA-RRC:CSFB-RegistrationParam1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFB-RegistrationParam1XRTT'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute longCodeState1XRTT(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(42, Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute cellReselectionParameters1XRTT(3)   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellReselectionParametersCDMA2000'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType8_parameters1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute csfb-RegistrationParam1XRTT(1)   External EUTRA-RRC:CSFB-RegistrationParam1XRTT OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_CSFB-RegistrationParam1XRTT'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute longCodeState1XRTT(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 42 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute cellReselectionParameters1XRTT(3)   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CellReselectionParametersCDMA2000'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType8_parameters1XRTT', Term1, Term2, Term3}.



'dec_SystemInformationBlockType8'(Tlv) ->
   'dec_SystemInformationBlockType8'(Tlv, [16]).

'dec_SystemInformationBlockType8'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute systemTimeInfo(1)   External EUTRA-RRC:SystemTimeInfoCDMA2000 OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SystemTimeInfoCDMA2000'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute searchWindowSize(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_integer(V2, []),
if 0 =< Val1, Val1 =< 15 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute parametersHRPD(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_SystemInformationBlockType8_parametersHRPD'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute parameters1XRTT(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SystemInformationBlockType8_parameters1XRTT'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType8', Term1, Term2, Term3, Term4}.



%%================================
%%  CarrierFreqsInfoGERAN
%%================================
'enc_CarrierFreqsInfoGERAN'(Val) ->
    'enc_CarrierFreqsInfoGERAN'(Val, [<<48>>]).

'enc_CarrierFreqsInfoGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute commonInfo(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqsInfoGERAN_commonInfo'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CarrierFreqsInfoGERAN_commonInfo
%%================================
'enc_CarrierFreqsInfoGERAN_commonInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute cellReselectionPriority(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ncc-Permitted(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(8, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute q-RxLevMin(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute p-MaxGERAN(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex4, [<<131>>])
       end,

%%-------------------------------------------------
%% attribute threshX-High(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute threshX-Low(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CarrierFreqsInfoGERAN_commonInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellReselectionPriority(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ncc-Permitted(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val2),
if C1 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-RxLevMin(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 45 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-MaxGERAN(4) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {begin
Val4 = decode_integer(V4, []),
if 0 =< Val4, Val4 =< 39 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute threshX-High(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val5 = decode_integer(V5, [131076]),
if 0 =< Val5, Val5 =< 31 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute threshX-Low(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val6 = decode_integer(V6, [131077]),
if 0 =< Val6, Val6 =< 31 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'CarrierFreqsInfoGERAN_commonInfo', Term1, Term2, Term3, Term4, Term5, Term6}.



'dec_CarrierFreqsInfoGERAN'(Tlv) ->
   'dec_CarrierFreqsInfoGERAN'(Tlv, [16]).

'dec_CarrierFreqsInfoGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CarrierFreqsGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute commonInfo(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CarrierFreqsInfoGERAN_commonInfo'(V2, [131073]),

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CarrierFreqsInfoGERAN', Term1, Term2}.



%%================================
%%  CarrierFreqsInfoListGERAN
%%================================
'enc_CarrierFreqsInfoListGERAN'(Val) ->
    'enc_CarrierFreqsInfoListGERAN'(Val, [<<48>>]).

'enc_CarrierFreqsInfoListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqsInfoListGERAN_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CarrierFreqsInfoListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqsInfoListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqsInfoGERAN'(H, [<<48>>]),
   'enc_CarrierFreqsInfoListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqsInfoListGERAN'(Tlv) ->
   'dec_CarrierFreqsInfoListGERAN'(Tlv, [16]).

'dec_CarrierFreqsInfoListGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CarrierFreqsInfoGERAN'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SystemInformationBlockType7
%%================================
'enc_SystemInformationBlockType7'(Val) ->
    'enc_SystemInformationBlockType7'(Val, [<<48>>]).

'enc_SystemInformationBlockType7'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute t-ReselectionGERAN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute t-ReselectionGERAN-SF(2)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute carrierFreqsInfoList(3)   External EUTRA-RRC:CarrierFreqsInfoListGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqsInfoListGERAN'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType7'(Tlv) ->
   'dec_SystemInformationBlockType7'(Tlv, [16]).

'dec_SystemInformationBlockType7'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t-ReselectionGERAN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionGERAN-SF(2)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SpeedStateScaleFactors'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute carrierFreqsInfoList(3)   External EUTRA-RRC:CarrierFreqsInfoListGERAN OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CarrierFreqsInfoListGERAN'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType7', Term1, Term2, Term3}.



%%================================
%%  CarrierFreqUTRA-TDD
%%================================
'enc_CarrierFreqUTRA-TDD'(Val) ->
    'enc_CarrierFreqUTRA-TDD'(Val, [<<48>>]).

'enc_CarrierFreqUTRA-TDD'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute q-RxLevMin(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute p-MaxUTRA(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierFreqUTRA-TDD'(Tlv) ->
   'dec_CarrierFreqUTRA-TDD'(Tlv, [16]).

'dec_CarrierFreqUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 31 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 31 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-RxLevMin(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val5 = decode_integer(V5, [131076]),
if -60 =< Val5, Val5 =< -13 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-MaxUTRA(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val6 = decode_integer(V6, [131077]),
if -50 =< Val6, Val6 =< 33 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CarrierFreqUTRA-TDD', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  CarrierFreqListUTRA-TDD
%%================================
'enc_CarrierFreqListUTRA-TDD'(Val) ->
    'enc_CarrierFreqListUTRA-TDD'(Val, [<<48>>]).

'enc_CarrierFreqListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqListUTRA-TDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CarrierFreqListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqUTRA-TDD'(H, [<<48>>]),
   'enc_CarrierFreqListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqListUTRA-TDD'(Tlv) ->
   'dec_CarrierFreqListUTRA-TDD'(Tlv, [16]).

'dec_CarrierFreqListUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CarrierFreqUTRA-TDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CarrierFreqUTRA-FDD
%%================================
'enc_CarrierFreqUTRA-FDD'(Val) ->
    'enc_CarrierFreqUTRA-FDD'(Val, [<<48>>]).

'enc_CarrierFreqUTRA-FDD'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute q-RxLevMin(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute p-MaxUTRA(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute q-QualMin(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<134>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_CarrierFreqUTRA-FDD'(Tlv) ->
   'dec_CarrierFreqUTRA-FDD'(Tlv, [16]).

'dec_CarrierFreqUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute threshX-High(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 31 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute threshX-Low(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 31 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-RxLevMin(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val5 = decode_integer(V5, [131076]),
if -60 =< Val5, Val5 =< -13 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-MaxUTRA(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val6 = decode_integer(V6, [131077]),
if -50 =< Val6, Val6 =< 33 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-QualMin(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
Val7 = decode_integer(V7, [131078]),
if -24 =< Val7, Val7 =< 0 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CarrierFreqUTRA-FDD', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  CarrierFreqListUTRA-FDD
%%================================
'enc_CarrierFreqListUTRA-FDD'(Val) ->
    'enc_CarrierFreqListUTRA-FDD'(Val, [<<48>>]).

'enc_CarrierFreqListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqListUTRA-FDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CarrierFreqListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqUTRA-FDD'(H, [<<48>>]),
   'enc_CarrierFreqListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqListUTRA-FDD'(Tlv) ->
   'dec_CarrierFreqListUTRA-FDD'(Tlv, [16]).

'dec_CarrierFreqListUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CarrierFreqUTRA-FDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SystemInformationBlockType6
%%================================
'enc_SystemInformationBlockType6'(Val) ->
    'enc_SystemInformationBlockType6'(Val, [<<48>>]).

'enc_SystemInformationBlockType6'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute carrierFreqListUTRA-FDD(1)   External EUTRA-RRC:CarrierFreqListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqListUTRA-FDD'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute carrierFreqListUTRA-TDD(2)   External EUTRA-RRC:CarrierFreqListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqListUTRA-TDD'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute t-ReselectionUTRA(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute t-ReselectionUTRA-SF(4)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType6'(Tlv) ->
   'dec_SystemInformationBlockType6'(Tlv, [16]).

'dec_SystemInformationBlockType6'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreqListUTRA-FDD(1)   External EUTRA-RRC:CarrierFreqListUTRA-FDD OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_CarrierFreqListUTRA-FDD'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute carrierFreqListUTRA-TDD(2)   External EUTRA-RRC:CarrierFreqListUTRA-TDD OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CarrierFreqListUTRA-TDD'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute t-ReselectionUTRA(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionUTRA-SF(4)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SpeedStateScaleFactors'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType6', Term1, Term2, Term3, Term4}.



%%================================
%%  InterFreqBlackCellList
%%================================
'enc_InterFreqBlackCellList'(Val) ->
    'enc_InterFreqBlackCellList'(Val, [<<48>>]).

'enc_InterFreqBlackCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqBlackCellList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InterFreqBlackCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqBlackCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdRange'(H, [<<48>>]),
   'enc_InterFreqBlackCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqBlackCellList'(Tlv) ->
   'dec_InterFreqBlackCellList'(Tlv, [16]).

'dec_InterFreqBlackCellList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PhysCellIdRange'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  InterFreqNeighCellInfo
%%================================
'enc_InterFreqNeighCellInfo'(Val) ->
    'enc_InterFreqNeighCellInfo'(Val, [<<48>>]).

'enc_InterFreqNeighCellInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute q-OffsetCell(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'dB-24' -> encode_tags([<<129>>], [0], 1);
'dB-22' -> encode_tags([<<129>>], [1], 1);
'dB-20' -> encode_tags([<<129>>], [2], 1);
'dB-18' -> encode_tags([<<129>>], [3], 1);
'dB-16' -> encode_tags([<<129>>], [4], 1);
'dB-14' -> encode_tags([<<129>>], [5], 1);
'dB-12' -> encode_tags([<<129>>], [6], 1);
'dB-10' -> encode_tags([<<129>>], [7], 1);
'dB-8' -> encode_tags([<<129>>], [8], 1);
'dB-6' -> encode_tags([<<129>>], [9], 1);
'dB-5' -> encode_tags([<<129>>], [10], 1);
'dB-4' -> encode_tags([<<129>>], [11], 1);
'dB-3' -> encode_tags([<<129>>], [12], 1);
'dB-2' -> encode_tags([<<129>>], [13], 1);
'dB-1' -> encode_tags([<<129>>], [14], 1);
dB0 -> encode_tags([<<129>>], [15], 1);
dB1 -> encode_tags([<<129>>], [16], 1);
dB2 -> encode_tags([<<129>>], [17], 1);
dB3 -> encode_tags([<<129>>], [18], 1);
dB4 -> encode_tags([<<129>>], [19], 1);
dB5 -> encode_tags([<<129>>], [20], 1);
dB6 -> encode_tags([<<129>>], [21], 1);
dB8 -> encode_tags([<<129>>], [22], 1);
dB10 -> encode_tags([<<129>>], [23], 1);
dB12 -> encode_tags([<<129>>], [24], 1);
dB14 -> encode_tags([<<129>>], [25], 1);
dB16 -> encode_tags([<<129>>], [26], 1);
dB18 -> encode_tags([<<129>>], [27], 1);
dB20 -> encode_tags([<<129>>], [28], 1);
dB22 -> encode_tags([<<129>>], [29], 1);
dB24 -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InterFreqNeighCellInfo'(Tlv) ->
   'dec_InterFreqNeighCellInfo'(Tlv, [16]).

'dec_InterFreqNeighCellInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-OffsetCell(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'InterFreqNeighCellInfo', Term1, Term2}.



%%================================
%%  InterFreqNeighCellList
%%================================
'enc_InterFreqNeighCellList'(Val) ->
    'enc_InterFreqNeighCellList'(Val, [<<48>>]).

'enc_InterFreqNeighCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqNeighCellList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InterFreqNeighCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqNeighCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqNeighCellInfo'(H, [<<48>>]),
   'enc_InterFreqNeighCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqNeighCellList'(Tlv) ->
   'dec_InterFreqNeighCellList'(Tlv, [16]).

'dec_InterFreqNeighCellList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InterFreqNeighCellInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  InterFreqCarrierFreqInfo
%%================================
'enc_InterFreqCarrierFreqInfo'(Val) ->
    'enc_InterFreqCarrierFreqInfo'(Val, [<<48>>]).

'enc_InterFreqCarrierFreqInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10, Cindex11, Cindex12, Cindex13, Cindex14} = Val,

%%-------------------------------------------------
%% attribute dl-CarrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute q-RxLevMin(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute p-Max(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA-SF(5)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute threshX-High(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute threshX-Low(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(8) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes8,EncLen8} = case Cindex8 of
mbw6 -> encode_tags([<<135>>], [0], 1);
mbw15 -> encode_tags([<<135>>], [1], 1);
mbw25 -> encode_tags([<<135>>], [2], 1);
mbw50 -> encode_tags([<<135>>], [3], 1);
mbw75 -> encode_tags([<<135>>], [4], 1);
mbw100 -> encode_tags([<<135>>], [5], 1);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(9) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = encode_boolean(Cindex9, [<<136>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex10, [<<137>>])
       end,

%%-------------------------------------------------
%% attribute neighCellConfig(11) with type BIT STRING
%%-------------------------------------------------
   {EncBytes11,EncLen11} = encode_unnamed_bit_string(2, Cindex11, [<<138>>]),

%%-------------------------------------------------
%% attribute q-OffsetFreq(12) with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case Cindex12 of
         asn1_DEFAULT -> {<<>>,0};
         dB0 -> {<<>>,0};
         _ ->
            case Cindex12 of
'dB-24' -> encode_tags([<<139>>], [0], 1);
'dB-22' -> encode_tags([<<139>>], [1], 1);
'dB-20' -> encode_tags([<<139>>], [2], 1);
'dB-18' -> encode_tags([<<139>>], [3], 1);
'dB-16' -> encode_tags([<<139>>], [4], 1);
'dB-14' -> encode_tags([<<139>>], [5], 1);
'dB-12' -> encode_tags([<<139>>], [6], 1);
'dB-10' -> encode_tags([<<139>>], [7], 1);
'dB-8' -> encode_tags([<<139>>], [8], 1);
'dB-6' -> encode_tags([<<139>>], [9], 1);
'dB-5' -> encode_tags([<<139>>], [10], 1);
'dB-4' -> encode_tags([<<139>>], [11], 1);
'dB-3' -> encode_tags([<<139>>], [12], 1);
'dB-2' -> encode_tags([<<139>>], [13], 1);
'dB-1' -> encode_tags([<<139>>], [14], 1);
dB0 -> encode_tags([<<139>>], [15], 1);
dB1 -> encode_tags([<<139>>], [16], 1);
dB2 -> encode_tags([<<139>>], [17], 1);
dB3 -> encode_tags([<<139>>], [18], 1);
dB4 -> encode_tags([<<139>>], [19], 1);
dB5 -> encode_tags([<<139>>], [20], 1);
dB6 -> encode_tags([<<139>>], [21], 1);
dB8 -> encode_tags([<<139>>], [22], 1);
dB10 -> encode_tags([<<139>>], [23], 1);
dB12 -> encode_tags([<<139>>], [24], 1);
dB14 -> encode_tags([<<139>>], [25], 1);
dB16 -> encode_tags([<<139>>], [26], 1);
dB18 -> encode_tags([<<139>>], [27], 1);
dB20 -> encode_tags([<<139>>], [28], 1);
dB22 -> encode_tags([<<139>>], [29], 1);
dB24 -> encode_tags([<<139>>], [30], 1);
Enumval11 -> exit({error,{asn1, {enumerated_not_in_range,Enumval11}}})
end
       end,

%%-------------------------------------------------
%% attribute interFreqNeighCellList(13)   External EUTRA-RRC:InterFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case Cindex13 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterFreqNeighCellList'(Cindex13, [<<172>>])
       end,

%%-------------------------------------------------
%% attribute interFreqBlackCellList(14)   External EUTRA-RRC:InterFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case Cindex14 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterFreqBlackCellList'(Cindex14, [<<173>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InterFreqCarrierFreqInfo'(Tlv) ->
   'dec_InterFreqCarrierFreqInfo'(Tlv, [16]).

'dec_InterFreqCarrierFreqInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dl-CarrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-RxLevMin(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if -70 =< Val2, Val2 =< -22 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-Max(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_integer(V3, []),
if -30 =< Val3, Val3 =< 33 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 7 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA-SF(5)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_SpeedStateScaleFactors'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute threshX-High(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val5 = decode_integer(V6, [131077]),
if 0 =< Val5, Val5 =< 31 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute threshX-Low(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
Val6 = decode_integer(V7, [131078]),
if 0 =< Val6, Val6 =< 31 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(8) with type ENUMERATED
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = case decode_integer(V8, [131079]) of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(9) with type BOOLEAN
%%-------------------------------------------------
[V9|Tlv10] = Tlv9, 
Term9 = decode_boolean(V9, [131080]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(10) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {begin
Val7 = decode_integer(V10, []),
if 0 =< Val7, Val7 =< 7 ->
Val7;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

%%-------------------------------------------------
%% attribute neighCellConfig(11) with type BIT STRING
%%-------------------------------------------------
[V11|Tlv12] = Tlv11, 
Term11 = begin
Val8 = decode_native_bit_string(V11, [131082]),
C1 = bit_size(Val8),
if C1 =:= 2 ->
Val8;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-OffsetFreq(12) with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
{Term12,Tlv13} = case Tlv12 of
[{131083,V12}|TempTlv13] ->
    {case decode_integer(V12, []) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv13};
    _ ->
        {dB0,Tlv12}
end,

%%-------------------------------------------------
%% attribute interFreqNeighCellList(13)   External EUTRA-RRC:InterFreqNeighCellList OPTIONAL
%%-------------------------------------------------
{Term13,Tlv14} = case Tlv13 of
[{131084,V13}|TempTlv14] ->
    {'dec_InterFreqNeighCellList'(V13, []), TempTlv14};
    _ ->
        { asn1_NOVALUE, Tlv13}
end,

%%-------------------------------------------------
%% attribute interFreqBlackCellList(14)   External EUTRA-RRC:InterFreqBlackCellList OPTIONAL
%%-------------------------------------------------
{Term14,Tlv15} = case Tlv14 of
[{131085,V14}|TempTlv15] ->
    {'dec_InterFreqBlackCellList'(V14, []), TempTlv15};
    _ ->
        { asn1_NOVALUE, Tlv14}
end,

case Tlv15 of [] -> true; _ -> true end, % ... extra fields skipped
   {'InterFreqCarrierFreqInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14}.



%%================================
%%  InterFreqCarrierFreqList
%%================================
'enc_InterFreqCarrierFreqList'(Val) ->
    'enc_InterFreqCarrierFreqList'(Val, [<<48>>]).

'enc_InterFreqCarrierFreqList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqCarrierFreqList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_InterFreqCarrierFreqList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqCarrierFreqList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqCarrierFreqInfo'(H, [<<48>>]),
   'enc_InterFreqCarrierFreqList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqCarrierFreqList'(Tlv) ->
   'dec_InterFreqCarrierFreqList'(Tlv, [16]).

'dec_InterFreqCarrierFreqList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_InterFreqCarrierFreqInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SystemInformationBlockType5
%%================================
'enc_SystemInformationBlockType5'(Val) ->
    'enc_SystemInformationBlockType5'(Val, [<<48>>]).

'enc_SystemInformationBlockType5'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute interFreqCarrierFreqList(1)   External EUTRA-RRC:InterFreqCarrierFreqList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InterFreqCarrierFreqList'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType5'(Tlv) ->
   'dec_SystemInformationBlockType5'(Tlv, [16]).

'dec_SystemInformationBlockType5'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute interFreqCarrierFreqList(1)   External EUTRA-RRC:InterFreqCarrierFreqList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InterFreqCarrierFreqList'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType5', Term1}.



%%================================
%%  IntraFreqBlackCellList
%%================================
'enc_IntraFreqBlackCellList'(Val) ->
    'enc_IntraFreqBlackCellList'(Val, [<<48>>]).

'enc_IntraFreqBlackCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraFreqBlackCellList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IntraFreqBlackCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraFreqBlackCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdRange'(H, [<<48>>]),
   'enc_IntraFreqBlackCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraFreqBlackCellList'(Tlv) ->
   'dec_IntraFreqBlackCellList'(Tlv, [16]).

'dec_IntraFreqBlackCellList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PhysCellIdRange'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  IntraFreqNeighCellInfo
%%================================
'enc_IntraFreqNeighCellInfo'(Val) ->
    'enc_IntraFreqNeighCellInfo'(Val, [<<48>>]).

'enc_IntraFreqNeighCellInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute q-OffsetCell(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'dB-24' -> encode_tags([<<129>>], [0], 1);
'dB-22' -> encode_tags([<<129>>], [1], 1);
'dB-20' -> encode_tags([<<129>>], [2], 1);
'dB-18' -> encode_tags([<<129>>], [3], 1);
'dB-16' -> encode_tags([<<129>>], [4], 1);
'dB-14' -> encode_tags([<<129>>], [5], 1);
'dB-12' -> encode_tags([<<129>>], [6], 1);
'dB-10' -> encode_tags([<<129>>], [7], 1);
'dB-8' -> encode_tags([<<129>>], [8], 1);
'dB-6' -> encode_tags([<<129>>], [9], 1);
'dB-5' -> encode_tags([<<129>>], [10], 1);
'dB-4' -> encode_tags([<<129>>], [11], 1);
'dB-3' -> encode_tags([<<129>>], [12], 1);
'dB-2' -> encode_tags([<<129>>], [13], 1);
'dB-1' -> encode_tags([<<129>>], [14], 1);
dB0 -> encode_tags([<<129>>], [15], 1);
dB1 -> encode_tags([<<129>>], [16], 1);
dB2 -> encode_tags([<<129>>], [17], 1);
dB3 -> encode_tags([<<129>>], [18], 1);
dB4 -> encode_tags([<<129>>], [19], 1);
dB5 -> encode_tags([<<129>>], [20], 1);
dB6 -> encode_tags([<<129>>], [21], 1);
dB8 -> encode_tags([<<129>>], [22], 1);
dB10 -> encode_tags([<<129>>], [23], 1);
dB12 -> encode_tags([<<129>>], [24], 1);
dB14 -> encode_tags([<<129>>], [25], 1);
dB16 -> encode_tags([<<129>>], [26], 1);
dB18 -> encode_tags([<<129>>], [27], 1);
dB20 -> encode_tags([<<129>>], [28], 1);
dB22 -> encode_tags([<<129>>], [29], 1);
dB24 -> encode_tags([<<129>>], [30], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IntraFreqNeighCellInfo'(Tlv) ->
   'dec_IntraFreqNeighCellInfo'(Tlv, [16]).

'dec_IntraFreqNeighCellInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 503 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-OffsetCell(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'IntraFreqNeighCellInfo', Term1, Term2}.



%%================================
%%  IntraFreqNeighCellList
%%================================
'enc_IntraFreqNeighCellList'(Val) ->
    'enc_IntraFreqNeighCellList'(Val, [<<48>>]).

'enc_IntraFreqNeighCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraFreqNeighCellList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IntraFreqNeighCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraFreqNeighCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_IntraFreqNeighCellInfo'(H, [<<48>>]),
   'enc_IntraFreqNeighCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraFreqNeighCellList'(Tlv) ->
   'dec_IntraFreqNeighCellList'(Tlv, [16]).

'dec_IntraFreqNeighCellList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_IntraFreqNeighCellInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SystemInformationBlockType4
%%================================
'enc_SystemInformationBlockType4'(Val) ->
    'enc_SystemInformationBlockType4'(Val, [<<48>>]).

'enc_SystemInformationBlockType4'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute intraFreqNeighCellList(1)   External EUTRA-RRC:IntraFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraFreqNeighCellList'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute intraFreqBlackCellList(2)   External EUTRA-RRC:IntraFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraFreqBlackCellList'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute csg-PhysCellIdRange(3)   External EUTRA-RRC:PhysCellIdRange OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysCellIdRange'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType4'(Tlv) ->
   'dec_SystemInformationBlockType4'(Tlv, [16]).

'dec_SystemInformationBlockType4'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute intraFreqNeighCellList(1)   External EUTRA-RRC:IntraFreqNeighCellList OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_IntraFreqNeighCellList'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute intraFreqBlackCellList(2)   External EUTRA-RRC:IntraFreqBlackCellList OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_IntraFreqBlackCellList'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute csg-PhysCellIdRange(3)   External EUTRA-RRC:PhysCellIdRange OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_PhysCellIdRange'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType4', Term1, Term2, Term3}.



%%================================
%%  SystemInformationBlockType3
%%================================
'enc_SystemInformationBlockType3'(Val) ->
    'enc_SystemInformationBlockType3'(Val, [<<48>>]).

'enc_SystemInformationBlockType3'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute cellReselectionInfoCommon(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformationBlockType3_cellReselectionInfoCommon'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellReselectionServingFreqInfo(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute intraFreqCellReselectionInfo(3) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute q-Hyst(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
dB0 -> encode_tags([<<128>>], [0], 1);
dB1 -> encode_tags([<<128>>], [1], 1);
dB2 -> encode_tags([<<128>>], [2], 1);
dB3 -> encode_tags([<<128>>], [3], 1);
dB4 -> encode_tags([<<128>>], [4], 1);
dB5 -> encode_tags([<<128>>], [5], 1);
dB6 -> encode_tags([<<128>>], [6], 1);
dB8 -> encode_tags([<<128>>], [7], 1);
dB10 -> encode_tags([<<128>>], [8], 1);
dB12 -> encode_tags([<<128>>], [9], 1);
dB14 -> encode_tags([<<128>>], [10], 1);
dB16 -> encode_tags([<<128>>], [11], 1);
dB18 -> encode_tags([<<128>>], [12], 1);
dB20 -> encode_tags([<<128>>], [13], 1);
dB22 -> encode_tags([<<128>>], [14], 1);
dB24 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute speedStateReselectionPars(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute mobilityStateParameters(1)   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MobilityStateParameters'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute q-HystSF(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sf-Medium(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'dB-6' -> encode_tags([<<128>>], [0], 1);
'dB-4' -> encode_tags([<<128>>], [1], 1);
'dB-2' -> encode_tags([<<128>>], [2], 1);
dB0 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute sf-High(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'dB-6' -> encode_tags([<<129>>], [0], 1);
'dB-4' -> encode_tags([<<129>>], [1], 1);
'dB-2' -> encode_tags([<<129>>], [2], 1);
dB0 -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sf-Medium(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> 'dB-6';
1 -> 'dB-4';
2 -> 'dB-2';
3 -> dB0;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute sf-High(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'dB-6';
1 -> 'dB-4';
2 -> 'dB-2';
3 -> dB0;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF', Term1, Term2}.

'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mobilityStateParameters(1)   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MobilityStateParameters'(V1, [131072]),

%%-------------------------------------------------
%% attribute q-HystSF(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars', Term1, Term2}.

'dec_SystemInformationBlockType3_cellReselectionInfoCommon'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute q-Hyst(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> dB0;
1 -> dB1;
2 -> dB2;
3 -> dB3;
4 -> dB4;
5 -> dB5;
6 -> dB6;
7 -> dB8;
8 -> dB10;
9 -> dB12;
10 -> dB14;
11 -> dB16;
12 -> dB18;
13 -> dB20;
14 -> dB22;
15 -> dB24;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute speedStateReselectionPars(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType3_cellReselectionInfoCommon', Term1, Term2}.




%%================================
%%  SystemInformationBlockType3_cellReselectionServingFreqInfo
%%================================
'enc_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute s-NonIntraSearch(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute threshServingLow(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute s-NonIntraSearch(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 31 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute threshServingLow(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 31 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 7 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType3_cellReselectionServingFreqInfo', Term1, Term2, Term3}.




%%================================
%%  SystemInformationBlockType3_intraFreqCellReselectionInfo
%%================================
'enc_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8} = Val,

%%-------------------------------------------------
%% attribute q-RxLevMin(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute p-Max(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute s-IntraSearch(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex4 of
mbw6 -> encode_tags([<<131>>], [0], 1);
mbw15 -> encode_tags([<<131>>], [1], 1);
mbw25 -> encode_tags([<<131>>], [2], 1);
mbw50 -> encode_tags([<<131>>], [3], 1);
mbw75 -> encode_tags([<<131>>], [4], 1);
mbw100 -> encode_tags([<<131>>], [5], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(5) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_boolean(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute neighCellConfig(6) with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_unnamed_bit_string(2, Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA(7) with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_integer(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA-SF(8)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(Cindex8, [<<167>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute q-RxLevMin(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -70 =< Val1, Val1 =< -22 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute p-Max(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if -30 =< Val2, Val2 =< 33 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute s-IntraSearch(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val3 = decode_integer(V3, []),
if 0 =< Val3, Val3 =< 31 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute allowedMeasBandwidth(4) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {case decode_integer(V4, []) of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute presenceAntennaPort1(5) with type BOOLEAN
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_boolean(V5, [131076]),

%%-------------------------------------------------
%% attribute neighCellConfig(6) with type BIT STRING
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val4 = decode_native_bit_string(V6, [131077]),
C1 = bit_size(Val4),
if C1 =:= 2 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA(7) with type INTEGER
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = begin
Val5 = decode_integer(V7, [131078]),
if 0 =< Val5, Val5 =< 7 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute t-ReselectionEUTRA-SF(8)   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_SpeedStateScaleFactors'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

case Tlv9 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv9}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType3_intraFreqCellReselectionInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}.



'dec_SystemInformationBlockType3'(Tlv) ->
   'dec_SystemInformationBlockType3'(Tlv, [16]).

'dec_SystemInformationBlockType3'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellReselectionInfoCommon(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellReselectionServingFreqInfo(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SystemInformationBlockType3_cellReselectionServingFreqInfo'(V2, [131073]),

%%-------------------------------------------------
%% attribute intraFreqCellReselectionInfo(3) with type SEQUENCE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_SystemInformationBlockType3_intraFreqCellReselectionInfo'(V3, [131074]),

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType3', Term1, Term2, Term3}.



%%================================
%%  MBSFN-SubframeConfig
%%================================
'enc_MBSFN-SubframeConfig'(Val) ->
    'enc_MBSFN-SubframeConfig'(Val, [<<48>>]).

'enc_MBSFN-SubframeConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute radioframeAllocationPeriod(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n1 -> encode_tags([<<128>>], [0], 1);
n2 -> encode_tags([<<128>>], [1], 1);
n4 -> encode_tags([<<128>>], [2], 1);
n8 -> encode_tags([<<128>>], [3], 1);
n16 -> encode_tags([<<128>>], [4], 1);
n32 -> encode_tags([<<128>>], [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute radioframeAllocationOffset(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute subframeAllocation(3) with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MBSFN-SubframeConfig_subframeAllocation'(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MBSFN-SubframeConfig_subframeAllocation
%%================================
'enc_MBSFN-SubframeConfig_subframeAllocation'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      oneFrame ->
         encode_unnamed_bit_string(6, element(2,Val), [<<128>>]);
      fourFrames ->
         encode_unnamed_bit_string(24, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MBSFN-SubframeConfig_subframeAllocation'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'oneFrame'
    {131072, V1} -> 
        {oneFrame, begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'fourFrames'
    {131073, V1} -> 
        {fourFrames, begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 24 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MBSFN-SubframeConfig'(Tlv) ->
   'dec_MBSFN-SubframeConfig'(Tlv, [16]).

'dec_MBSFN-SubframeConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute radioframeAllocationPeriod(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n1;
1 -> n2;
2 -> n4;
3 -> n8;
4 -> n16;
5 -> n32;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute radioframeAllocationOffset(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute subframeAllocation(3) with type CHOICE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_MBSFN-SubframeConfig_subframeAllocation'(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MBSFN-SubframeConfig', Term1, Term2, Term3}.



%%================================
%%  MBSFN-SubframeConfigList
%%================================
'enc_MBSFN-SubframeConfigList'(Val) ->
    'enc_MBSFN-SubframeConfigList'(Val, [<<48>>]).

'enc_MBSFN-SubframeConfigList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MBSFN-SubframeConfigList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_MBSFN-SubframeConfigList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MBSFN-SubframeConfigList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MBSFN-SubframeConfig'(H, [<<48>>]),
   'enc_MBSFN-SubframeConfigList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MBSFN-SubframeConfigList'(Tlv) ->
   'dec_MBSFN-SubframeConfigList'(Tlv, [16]).

'dec_MBSFN-SubframeConfigList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_MBSFN-SubframeConfig'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  AC-BarringConfig
%%================================
'enc_AC-BarringConfig'(Val) ->
    'enc_AC-BarringConfig'(Val, [<<48>>]).

'enc_AC-BarringConfig'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute ac-BarringFactor(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
p00 -> encode_tags([<<128>>], [0], 1);
p05 -> encode_tags([<<128>>], [1], 1);
p10 -> encode_tags([<<128>>], [2], 1);
p15 -> encode_tags([<<128>>], [3], 1);
p20 -> encode_tags([<<128>>], [4], 1);
p25 -> encode_tags([<<128>>], [5], 1);
p30 -> encode_tags([<<128>>], [6], 1);
p40 -> encode_tags([<<128>>], [7], 1);
p50 -> encode_tags([<<128>>], [8], 1);
p60 -> encode_tags([<<128>>], [9], 1);
p70 -> encode_tags([<<128>>], [10], 1);
p75 -> encode_tags([<<128>>], [11], 1);
p80 -> encode_tags([<<128>>], [12], 1);
p85 -> encode_tags([<<128>>], [13], 1);
p90 -> encode_tags([<<128>>], [14], 1);
p95 -> encode_tags([<<128>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute ac-BarringTime(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
s4 -> encode_tags([<<129>>], [0], 1);
s8 -> encode_tags([<<129>>], [1], 1);
s16 -> encode_tags([<<129>>], [2], 1);
s32 -> encode_tags([<<129>>], [3], 1);
s64 -> encode_tags([<<129>>], [4], 1);
s128 -> encode_tags([<<129>>], [5], 1);
s256 -> encode_tags([<<129>>], [6], 1);
s512 -> encode_tags([<<129>>], [7], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute ac-BarringForSpecialAC(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(5, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_AC-BarringConfig'(Tlv) ->
   'dec_AC-BarringConfig'(Tlv, [16]).

'dec_AC-BarringConfig'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ac-BarringFactor(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> p00;
1 -> p05;
2 -> p10;
3 -> p15;
4 -> p20;
5 -> p25;
6 -> p30;
7 -> p40;
8 -> p50;
9 -> p60;
10 -> p70;
11 -> p75;
12 -> p80;
13 -> p85;
14 -> p90;
15 -> p95;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute ac-BarringTime(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> s4;
1 -> s8;
2 -> s16;
3 -> s32;
4 -> s64;
5 -> s128;
6 -> s256;
7 -> s512;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute ac-BarringForSpecialAC(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_native_bit_string(V3, [131074]),
C1 = bit_size(Val1),
if C1 =:= 5 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'AC-BarringConfig', Term1, Term2, Term3}.



%%================================
%%  SystemInformationBlockType2
%%================================
'enc_SystemInformationBlockType2'(Val) ->
    'enc_SystemInformationBlockType2'(Val, [<<48>>]).

'enc_SystemInformationBlockType2'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute ac-BarringInfo(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType2_ac-BarringInfo'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute radioResourceConfigCommon(2)   External EUTRA-RRC:RadioResourceConfigCommonSIB
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RadioResourceConfigCommonSIB'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute ue-TimersAndConstants(3)   External EUTRA-RRC:UE-TimersAndConstants
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_UE-TimersAndConstants'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute freqInfo(4) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_SystemInformationBlockType2_freqInfo'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute mbsfn-SubframeConfigList(5)   External EUTRA-RRC:MBSFN-SubframeConfigList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MBSFN-SubframeConfigList'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute timeAlignmentTimerCommon(6) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case Cindex6 of
sf500 -> encode_tags([<<133>>], [0], 1);
sf750 -> encode_tags([<<133>>], [1], 1);
sf1280 -> encode_tags([<<133>>], [2], 1);
sf1920 -> encode_tags([<<133>>], [3], 1);
sf2560 -> encode_tags([<<133>>], [4], 1);
sf5120 -> encode_tags([<<133>>], [5], 1);
sf10240 -> encode_tags([<<133>>], [6], 1);
infinity -> encode_tags([<<133>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType2_ac-BarringInfo
%%================================
'enc_SystemInformationBlockType2_ac-BarringInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute ac-BarringForEmergency(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute ac-BarringForMO-Signalling(2)   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AC-BarringConfig'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ac-BarringForMO-Data(3)   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AC-BarringConfig'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType2_ac-BarringInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ac-BarringForEmergency(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute ac-BarringForMO-Signalling(2)   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_AC-BarringConfig'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ac-BarringForMO-Data(3)   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_AC-BarringConfig'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType2_ac-BarringInfo', Term1, Term2, Term3}.




%%================================
%%  SystemInformationBlockType2_freqInfo
%%================================
'enc_SystemInformationBlockType2_freqInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute ul-CarrierFreq(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute ul-Bandwidth(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
n6 -> encode_tags([<<129>>], [0], 1);
n15 -> encode_tags([<<129>>], [1], 1);
n25 -> encode_tags([<<129>>], [2], 1);
n50 -> encode_tags([<<129>>], [3], 1);
n75 -> encode_tags([<<129>>], [4], 1);
n100 -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute additionalSpectrumEmission(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType2_freqInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ul-CarrierFreq(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute ul-Bandwidth(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute additionalSpectrumEmission(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_integer(V3, [131074]),
if 1 =< Val2, Val2 =< 32 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType2_freqInfo', Term1, Term2, Term3}.



'dec_SystemInformationBlockType2'(Tlv) ->
   'dec_SystemInformationBlockType2'(Tlv, [16]).

'dec_SystemInformationBlockType2'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ac-BarringInfo(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SystemInformationBlockType2_ac-BarringInfo'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute radioResourceConfigCommon(2)   External EUTRA-RRC:RadioResourceConfigCommonSIB
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RadioResourceConfigCommonSIB'(V2, [131073]),

%%-------------------------------------------------
%% attribute ue-TimersAndConstants(3)   External EUTRA-RRC:UE-TimersAndConstants
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_UE-TimersAndConstants'(V3, [131074]),

%%-------------------------------------------------
%% attribute freqInfo(4) with type SEQUENCE
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_SystemInformationBlockType2_freqInfo'(V4, [131075]),

%%-------------------------------------------------
%% attribute mbsfn-SubframeConfigList(5)   External EUTRA-RRC:MBSFN-SubframeConfigList OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_MBSFN-SubframeConfigList'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute timeAlignmentTimerCommon(6) with type ENUMERATED
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = case decode_integer(V6, [131077]) of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SystemInformationBlockType2', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  ULInformationTransfer-r8-IEs
%%================================
'enc_ULInformationTransfer-r8-IEs'(Val) ->
    'enc_ULInformationTransfer-r8-IEs'(Val, [<<48>>]).

'enc_ULInformationTransfer-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute dedicatedInfoType(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ULInformationTransfer-r8-IEs_dedicatedInfoType
%%================================
'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      dedicatedInfoNAS ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      'dedicatedInfoCDMA2000-1XRTT' ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      'dedicatedInfoCDMA2000-HRPD' ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'dedicatedInfoNAS'
    {131072, V1} -> 
        {dedicatedInfoNAS, decode_octet_string(V1, [])};


%% 'dedicatedInfoCDMA2000-1XRTT'
    {131073, V1} -> 
        {'dedicatedInfoCDMA2000-1XRTT', decode_octet_string(V1, [])};


%% 'dedicatedInfoCDMA2000-HRPD'
    {131074, V1} -> 
        {'dedicatedInfoCDMA2000-HRPD', decode_octet_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  ULInformationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ULInformationTransfer-r8-IEs_nonCriticalExtension'}.



'dec_ULInformationTransfer-r8-IEs'(Tlv) ->
   'dec_ULInformationTransfer-r8-IEs'(Tlv, [16]).

'dec_ULInformationTransfer-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dedicatedInfoType(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'ULInformationTransfer-r8-IEs', Term1, Term2}.



%%================================
%%  ULInformationTransfer
%%================================
'enc_ULInformationTransfer'(Val) ->
    'enc_ULInformationTransfer'(Val, [<<48>>]).

'enc_ULInformationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULInformationTransfer_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ULInformationTransfer_criticalExtensions
%%================================
'enc_ULInformationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_ULInformationTransfer_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ULInformationTransfer_criticalExtensions_c1
%%================================
'enc_ULInformationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ulInformationTransfer-r8' ->
         'enc_ULInformationTransfer-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ULInformationTransfer_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ulInformationTransfer-r8'
    {131072, V1} -> 
        {'ulInformationTransfer-r8', 'dec_ULInformationTransfer-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  ULInformationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'}.

'dec_ULInformationTransfer_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_ULInformationTransfer_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_ULInformationTransfer'(Tlv) ->
   'dec_ULInformationTransfer'(Tlv, [16]).

'dec_ULInformationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ULInformationTransfer_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ULInformationTransfer', Term1}.



%%================================
%%  ULHandoverPreparationTransfer-r8-IEs
%%================================
'enc_ULHandoverPreparationTransfer-r8-IEs'(Val) ->
    'enc_ULHandoverPreparationTransfer-r8-IEs'(Val, [<<48>>]).

'enc_ULHandoverPreparationTransfer-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
type1XRTT -> encode_tags([<<128>>], [0], 1);
typeHRPD -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute meid(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(56, Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute dedicatedInfo(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'}.



'dec_ULHandoverPreparationTransfer-r8-IEs'(Tlv) ->
   'dec_ULHandoverPreparationTransfer-r8-IEs'(Tlv, [16]).

'dec_ULHandoverPreparationTransfer-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> type1XRTT;
1 -> typeHRPD;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute meid(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 56 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute dedicatedInfo(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'ULHandoverPreparationTransfer-r8-IEs', Term1, Term2, Term3, Term4}.



%%================================
%%  ULHandoverPreparationTransfer
%%================================
'enc_ULHandoverPreparationTransfer'(Val) ->
    'enc_ULHandoverPreparationTransfer'(Val, [<<48>>]).

'enc_ULHandoverPreparationTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULHandoverPreparationTransfer_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions
%%================================
'enc_ULHandoverPreparationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions_c1
%%================================
'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ulHandoverPreparationTransfer-r8' ->
         'enc_ULHandoverPreparationTransfer-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_ULHandoverPreparationTransfer_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ulHandoverPreparationTransfer-r8'
    {131072, V1} -> 
        {'ulHandoverPreparationTransfer-r8', 'dec_ULHandoverPreparationTransfer-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'}.

'dec_ULHandoverPreparationTransfer_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_ULHandoverPreparationTransfer_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_ULHandoverPreparationTransfer'(Tlv) ->
   'dec_ULHandoverPreparationTransfer'(Tlv, [16]).

'dec_ULHandoverPreparationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ULHandoverPreparationTransfer_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'ULHandoverPreparationTransfer', Term1}.



%%================================
%%  UECapabilityInformation-r8-IEs
%%================================
'enc_UECapabilityInformation-r8-IEs'(Val) ->
    'enc_UECapabilityInformation-r8-IEs'(Val, [<<48>>]).

'enc_UECapabilityInformation-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ue-CapabilityRAT-ContainerList(1)   External EUTRA-RRC:UE-CapabilityRAT-ContainerList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UE-CapabilityRAT-ContainerList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityInformation-r8-IEs_nonCriticalExtension
%%================================
'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UECapabilityInformation-r8-IEs_nonCriticalExtension'}.



'dec_UECapabilityInformation-r8-IEs'(Tlv) ->
   'dec_UECapabilityInformation-r8-IEs'(Tlv, [16]).

'dec_UECapabilityInformation-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-CapabilityRAT-ContainerList(1)   External EUTRA-RRC:UE-CapabilityRAT-ContainerList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UE-CapabilityRAT-ContainerList'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'UECapabilityInformation-r8-IEs', Term1, Term2}.



%%================================
%%  UECapabilityInformation
%%================================
'enc_UECapabilityInformation'(Val) ->
    'enc_UECapabilityInformation'(Val, [<<48>>]).

'enc_UECapabilityInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UECapabilityInformation_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityInformation_criticalExtensions
%%================================
'enc_UECapabilityInformation_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UECapabilityInformation_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  UECapabilityInformation_criticalExtensions_c1
%%================================
'enc_UECapabilityInformation_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ueCapabilityInformation-r8' ->
         'enc_UECapabilityInformation-r8-IEs'(element(2,Val), [<<160>>]);
      spare7 ->
         encode_null(element(2,Val), [<<129>>]);
      spare6 ->
         encode_null(element(2,Val), [<<130>>]);
      spare5 ->
         encode_null(element(2,Val), [<<131>>]);
      spare4 ->
         encode_null(element(2,Val), [<<132>>]);
      spare3 ->
         encode_null(element(2,Val), [<<133>>]);
      spare2 ->
         encode_null(element(2,Val), [<<134>>]);
      spare1 ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_UECapabilityInformation_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ueCapabilityInformation-r8'
    {131072, V1} -> 
        {'ueCapabilityInformation-r8', 'dec_UECapabilityInformation-r8-IEs'(V1, [])};


%% 'spare7'
    {131073, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131074, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131075, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131076, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131077, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131078, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131079, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  UECapabilityInformation_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'}.

'dec_UECapabilityInformation_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_UECapabilityInformation_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_UECapabilityInformation'(Tlv) ->
   'dec_UECapabilityInformation'(Tlv, [16]).

'dec_UECapabilityInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UECapabilityInformation_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'UECapabilityInformation', Term1, Term2}.



%%================================
%%  UE-CapabilityRequest
%%================================
'enc_UE-CapabilityRequest'(Val) ->
    'enc_UE-CapabilityRequest'(Val, [<<48>>]).

'enc_UE-CapabilityRequest'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRequest_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-CapabilityRequest_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-CapabilityRequest_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
eutra -> encode_tags([<<10>>], [0], 1);
utra -> encode_tags([<<10>>], [1], 1);
'geran-cs' -> encode_tags([<<10>>], [2], 1);
'geran-ps' -> encode_tags([<<10>>], [3], 1);
'cdma2000-1XRTT' -> encode_tags([<<10>>], [4], 1);
spare3 -> encode_tags([<<10>>], [5], 1);
spare2 -> encode_tags([<<10>>], [6], 1);
spare1 -> encode_tags([<<10>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_UE-CapabilityRequest_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-CapabilityRequest'(Tlv) ->
   'dec_UE-CapabilityRequest'(Tlv, [16]).

'dec_UE-CapabilityRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  UECapabilityEnquiry-r8-IEs
%%================================
'enc_UECapabilityEnquiry-r8-IEs'(Val) ->
    'enc_UECapabilityEnquiry-r8-IEs'(Val, [<<48>>]).

'enc_UECapabilityEnquiry-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ue-CapabilityRequest(1)   External EUTRA-RRC:UE-CapabilityRequest
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UE-CapabilityRequest'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityEnquiry-r8-IEs_nonCriticalExtension
%%================================
'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UECapabilityEnquiry-r8-IEs_nonCriticalExtension'}.



'dec_UECapabilityEnquiry-r8-IEs'(Tlv) ->
   'dec_UECapabilityEnquiry-r8-IEs'(Tlv, [16]).

'dec_UECapabilityEnquiry-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-CapabilityRequest(1)   External EUTRA-RRC:UE-CapabilityRequest
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UE-CapabilityRequest'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'UECapabilityEnquiry-r8-IEs', Term1, Term2}.



%%================================
%%  UECapabilityEnquiry
%%================================
'enc_UECapabilityEnquiry'(Val) ->
    'enc_UECapabilityEnquiry'(Val, [<<48>>]).

'enc_UECapabilityEnquiry'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UECapabilityEnquiry_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityEnquiry_criticalExtensions
%%================================
'enc_UECapabilityEnquiry_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UECapabilityEnquiry_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  UECapabilityEnquiry_criticalExtensions_c1
%%================================
'enc_UECapabilityEnquiry_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ueCapabilityEnquiry-r8' ->
         'enc_UECapabilityEnquiry-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_UECapabilityEnquiry_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'ueCapabilityEnquiry-r8'
    {131072, V1} -> 
        {'ueCapabilityEnquiry-r8', 'dec_UECapabilityEnquiry-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'}.

'dec_UECapabilityEnquiry_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_UECapabilityEnquiry_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_UECapabilityEnquiry'(Tlv) ->
   'dec_UECapabilityEnquiry'(Tlv, [16]).

'dec_UECapabilityEnquiry'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UECapabilityEnquiry_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'UECapabilityEnquiry', Term1, Term2}.



%%================================
%%  SIB-Type
%%================================
'enc_SIB-Type'(Val) ->
    'enc_SIB-Type'(Val, [<<10>>]).

'enc_SIB-Type'(Val, TagIn) ->
case Val of
sibType3 -> encode_tags(TagIn, [0], 1);
sibType4 -> encode_tags(TagIn, [1], 1);
sibType5 -> encode_tags(TagIn, [2], 1);
sibType6 -> encode_tags(TagIn, [3], 1);
sibType7 -> encode_tags(TagIn, [4], 1);
sibType8 -> encode_tags(TagIn, [5], 1);
sibType9 -> encode_tags(TagIn, [6], 1);
sibType10 -> encode_tags(TagIn, [7], 1);
sibType11 -> encode_tags(TagIn, [8], 1);
spare7 -> encode_tags(TagIn, [9], 1);
spare6 -> encode_tags(TagIn, [10], 1);
spare5 -> encode_tags(TagIn, [11], 1);
spare4 -> encode_tags(TagIn, [12], 1);
spare3 -> encode_tags(TagIn, [13], 1);
spare2 -> encode_tags(TagIn, [14], 1);
spare1 -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SIB-Type'(Tlv) ->
   'dec_SIB-Type'(Tlv, [10]).

'dec_SIB-Type'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> sibType3;
1 -> sibType4;
2 -> sibType5;
3 -> sibType6;
4 -> sibType7;
5 -> sibType8;
6 -> sibType9;
7 -> sibType10;
8 -> sibType11;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SIB-MappingInfo
%%================================
'enc_SIB-MappingInfo'(Val) ->
    'enc_SIB-MappingInfo'(Val, [<<48>>]).

'enc_SIB-MappingInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SIB-MappingInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SIB-MappingInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SIB-MappingInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
sibType3 -> encode_tags([<<10>>], [0], 1);
sibType4 -> encode_tags([<<10>>], [1], 1);
sibType5 -> encode_tags([<<10>>], [2], 1);
sibType6 -> encode_tags([<<10>>], [3], 1);
sibType7 -> encode_tags([<<10>>], [4], 1);
sibType8 -> encode_tags([<<10>>], [5], 1);
sibType9 -> encode_tags([<<10>>], [6], 1);
sibType10 -> encode_tags([<<10>>], [7], 1);
sibType11 -> encode_tags([<<10>>], [8], 1);
spare7 -> encode_tags([<<10>>], [9], 1);
spare6 -> encode_tags([<<10>>], [10], 1);
spare5 -> encode_tags([<<10>>], [11], 1);
spare4 -> encode_tags([<<10>>], [12], 1);
spare3 -> encode_tags([<<10>>], [13], 1);
spare2 -> encode_tags([<<10>>], [14], 1);
spare1 -> encode_tags([<<10>>], [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_SIB-MappingInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SIB-MappingInfo'(Tlv) ->
   'dec_SIB-MappingInfo'(Tlv, [16]).

'dec_SIB-MappingInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> sibType3;
1 -> sibType4;
2 -> sibType5;
3 -> sibType6;
4 -> sibType7;
5 -> sibType8;
6 -> sibType9;
7 -> sibType10;
8 -> sibType11;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1;
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  SchedulingInfo
%%================================
'enc_SchedulingInfo'(Val) ->
    'enc_SchedulingInfo'(Val, [<<48>>]).

'enc_SchedulingInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute si-Periodicity(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
rf8 -> encode_tags([<<128>>], [0], 1);
rf16 -> encode_tags([<<128>>], [1], 1);
rf32 -> encode_tags([<<128>>], [2], 1);
rf64 -> encode_tags([<<128>>], [3], 1);
rf128 -> encode_tags([<<128>>], [4], 1);
rf256 -> encode_tags([<<128>>], [5], 1);
rf512 -> encode_tags([<<128>>], [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute sib-MappingInfo(2)   External EUTRA-RRC:SIB-MappingInfo
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SIB-MappingInfo'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SchedulingInfo'(Tlv) ->
   'dec_SchedulingInfo'(Tlv, [16]).

'dec_SchedulingInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute si-Periodicity(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> rf8;
1 -> rf16;
2 -> rf32;
3 -> rf64;
4 -> rf128;
5 -> rf256;
6 -> rf512;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute sib-MappingInfo(2)   External EUTRA-RRC:SIB-MappingInfo
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SIB-MappingInfo'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SchedulingInfo', Term1, Term2}.



%%================================
%%  SchedulingInfoList
%%================================
'enc_SchedulingInfoList'(Val) ->
    'enc_SchedulingInfoList'(Val, [<<48>>]).

'enc_SchedulingInfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SchedulingInfoList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SchedulingInfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SchedulingInfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SchedulingInfo'(H, [<<48>>]),
   'enc_SchedulingInfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SchedulingInfoList'(Tlv) ->
   'dec_SchedulingInfoList'(Tlv, [16]).

'dec_SchedulingInfoList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SchedulingInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  PLMN-IdentityInfo
%%================================
'enc_PLMN-IdentityInfo'(Val) ->
    'enc_PLMN-IdentityInfo'(Val, [<<48>>]).

'enc_PLMN-IdentityInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellReservedForOperatorUse(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reserved -> encode_tags([<<129>>], [0], 1);
notReserved -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PLMN-IdentityInfo'(Tlv) ->
   'dec_PLMN-IdentityInfo'(Tlv, [16]).

'dec_PLMN-IdentityInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PLMN-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellReservedForOperatorUse(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reserved;
1 -> notReserved;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'PLMN-IdentityInfo', Term1, Term2}.



%%================================
%%  PLMN-IdentityList
%%================================
'enc_PLMN-IdentityList'(Val) ->
    'enc_PLMN-IdentityList'(Val, [<<48>>]).

'enc_PLMN-IdentityList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PLMN-IdentityList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PLMN-IdentityList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityInfo'(H, [<<48>>]),
   'enc_PLMN-IdentityList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PLMN-IdentityList'(Tlv) ->
   'dec_PLMN-IdentityList'(Tlv, [16]).

'dec_PLMN-IdentityList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PLMN-IdentityInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SystemInformationBlockType1
%%================================
'enc_SystemInformationBlockType1'(Val) ->
    'enc_SystemInformationBlockType1'(Val, [<<48>>]).

'enc_SystemInformationBlockType1'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9} = Val,

%%-------------------------------------------------
%% attribute cellAccessRelatedInfo(1) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformationBlockType1_cellAccessRelatedInfo'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellSelectionInfo(2) with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType1_cellSelectionInfo'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute p-Max(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute freqBandIndicator(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute schedulingInfoList(5)   External EUTRA-RRC:SchedulingInfoList
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_SchedulingInfoList'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute tdd-Config(6)   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TDD-Config'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute si-WindowLength(7) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case Cindex7 of
ms1 -> encode_tags([<<134>>], [0], 1);
ms2 -> encode_tags([<<134>>], [1], 1);
ms5 -> encode_tags([<<134>>], [2], 1);
ms10 -> encode_tags([<<134>>], [3], 1);
ms15 -> encode_tags([<<134>>], [4], 1);
ms20 -> encode_tags([<<134>>], [5], 1);
ms40 -> encode_tags([<<134>>], [6], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute systemInfoValueTag(8) with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = encode_integer(Cindex8, [<<135>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(9) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType1_nonCriticalExtension'(Cindex9, [<<168>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType1_cellAccessRelatedInfo
%%================================
'enc_SystemInformationBlockType1_cellAccessRelatedInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute plmn-IdentityList(1)   External EUTRA-RRC:PLMN-IdentityList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-IdentityList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute trackingAreaCode(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute cellIdentity(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(28, Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute cellBarred(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
barred -> encode_tags([<<131>>], [0], 1);
notBarred -> encode_tags([<<131>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute intraFreqReselection(5) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case Cindex5 of
allowed -> encode_tags([<<132>>], [0], 1);
notAllowed -> encode_tags([<<132>>], [1], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute csg-Indication(6) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_boolean(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute csg-Identity(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(27, Cindex7, [<<134>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_cellAccessRelatedInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-IdentityList(1)   External EUTRA-RRC:PLMN-IdentityList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PLMN-IdentityList'(V1, [131072]),

%%-------------------------------------------------
%% attribute trackingAreaCode(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellIdentity(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_native_bit_string(V3, [131074]),
C2 = bit_size(Val2),
if C2 =:= 28 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellBarred(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> barred;
1 -> notBarred;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute intraFreqReselection(5) with type ENUMERATED
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = case decode_integer(V5, [131076]) of
0 -> allowed;
1 -> notAllowed;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute csg-Indication(6) with type BOOLEAN
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = decode_boolean(V6, [131077]),

%%-------------------------------------------------
%% attribute csg-Identity(7) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {begin
Val3 = decode_native_bit_string(V7, []),
C3 = bit_size(Val3),
if C3 =:= 27 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv8}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType1_cellAccessRelatedInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.




%%================================
%%  SystemInformationBlockType1_cellSelectionInfo
%%================================
'enc_SystemInformationBlockType1_cellSelectionInfo'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute q-RxLevMin(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute q-RxLevMinOffset(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex2, [<<129>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_cellSelectionInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute q-RxLevMin(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if -70 =< Val1, Val1 =< -22 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute q-RxLevMinOffset(2) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val2 = decode_integer(V2, []),
if 1 =< Val2, Val2 =< 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType1_cellSelectionInfo', Term1, Term2}.




%%================================
%%  SystemInformationBlockType1_nonCriticalExtension
%%================================
'enc_SystemInformationBlockType1_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SystemInformationBlockType1_nonCriticalExtension'}.



'dec_SystemInformationBlockType1'(Tlv) ->
   'dec_SystemInformationBlockType1'(Tlv, [16]).

'dec_SystemInformationBlockType1'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cellAccessRelatedInfo(1) with type SEQUENCE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SystemInformationBlockType1_cellAccessRelatedInfo'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellSelectionInfo(2) with type SEQUENCE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SystemInformationBlockType1_cellSelectionInfo'(V2, [131073]),

%%-------------------------------------------------
%% attribute p-Max(3) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_integer(V3, []),
if -30 =< Val1, Val1 =< 33 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute freqBandIndicator(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_integer(V4, [131075]),
if 1 =< Val2, Val2 =< 64 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute schedulingInfoList(5)   External EUTRA-RRC:SchedulingInfoList
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_SchedulingInfoList'(V5, [131076]),

%%-------------------------------------------------
%% attribute tdd-Config(6)   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_TDD-Config'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute si-WindowLength(7) with type ENUMERATED
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = case decode_integer(V7, [131078]) of
0 -> ms1;
1 -> ms2;
2 -> ms5;
3 -> ms10;
4 -> ms15;
5 -> ms20;
6 -> ms40;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute systemInfoValueTag(8) with type INTEGER
%%-------------------------------------------------
[V8|Tlv9] = Tlv8, 
Term8 = begin
Val3 = decode_integer(V8, [131079]),
if 0 =< Val3, Val3 =< 31 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(9) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_SystemInformationBlockType1_nonCriticalExtension'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

case Tlv10 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv10}}}) % extra fields not allowed
end,
   {'SystemInformationBlockType1', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}.



%%================================
%%  SystemInformation-r8-IEs
%%================================
'enc_SystemInformation-r8-IEs'(Val) ->
    'enc_SystemInformation-r8-IEs'(Val, [<<48>>]).

'enc_SystemInformation-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute sib-TypeAndInfo(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformation-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformation-r8-IEs_sib-TypeAndInfo
%%================================
'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(H, []),
   'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF
%%================================
'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      sib2 ->
         'enc_SystemInformationBlockType2'(element(2,Val), [<<160>>]);
      sib3 ->
         'enc_SystemInformationBlockType3'(element(2,Val), [<<161>>]);
      sib4 ->
         'enc_SystemInformationBlockType4'(element(2,Val), [<<162>>]);
      sib5 ->
         'enc_SystemInformationBlockType5'(element(2,Val), [<<163>>]);
      sib6 ->
         'enc_SystemInformationBlockType6'(element(2,Val), [<<164>>]);
      sib7 ->
         'enc_SystemInformationBlockType7'(element(2,Val), [<<165>>]);
      sib8 ->
         'enc_SystemInformationBlockType8'(element(2,Val), [<<166>>]);
      sib9 ->
         'enc_SystemInformationBlockType9'(element(2,Val), [<<167>>]);
      sib10 ->
         'enc_SystemInformationBlockType10'(element(2,Val), [<<168>>]);
      sib11 ->
         'enc_SystemInformationBlockType11'(element(2,Val), [<<169>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'sib2'
    {131072, V1} -> 
        {sib2, 'dec_SystemInformationBlockType2'(V1, [])};


%% 'sib3'
    {131073, V1} -> 
        {sib3, 'dec_SystemInformationBlockType3'(V1, [])};


%% 'sib4'
    {131074, V1} -> 
        {sib4, 'dec_SystemInformationBlockType4'(V1, [])};


%% 'sib5'
    {131075, V1} -> 
        {sib5, 'dec_SystemInformationBlockType5'(V1, [])};


%% 'sib6'
    {131076, V1} -> 
        {sib6, 'dec_SystemInformationBlockType6'(V1, [])};


%% 'sib7'
    {131077, V1} -> 
        {sib7, 'dec_SystemInformationBlockType7'(V1, [])};


%% 'sib8'
    {131078, V1} -> 
        {sib8, 'dec_SystemInformationBlockType8'(V1, [])};


%% 'sib9'
    {131079, V1} -> 
        {sib9, 'dec_SystemInformationBlockType9'(V1, [])};


%% 'sib10'
    {131080, V1} -> 
        {sib10, 'dec_SystemInformationBlockType10'(V1, [])};


%% 'sib11'
    {131081, V1} -> 
        {sib11, 'dec_SystemInformationBlockType11'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(V1, []) || V1 <- Tlv1].





%%================================
%%  SystemInformation-r8-IEs_nonCriticalExtension
%%================================
'enc_SystemInformation-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformation-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SystemInformation-r8-IEs_nonCriticalExtension'}.



'dec_SystemInformation-r8-IEs'(Tlv) ->
   'dec_SystemInformation-r8-IEs'(Tlv, [16]).

'dec_SystemInformation-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute sib-TypeAndInfo(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SystemInformation-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SystemInformation-r8-IEs', Term1, Term2}.



%%================================
%%  SystemInformation
%%================================
'enc_SystemInformation'(Val) ->
    'enc_SystemInformation'(Val, [<<48>>]).

'enc_SystemInformation'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformation_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SystemInformation_criticalExtensions
%%================================
'enc_SystemInformation_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'systemInformation-r8' ->
         'enc_SystemInformation-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_SystemInformation_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SystemInformation_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SystemInformation_criticalExtensions_criticalExtensionsFuture'}.

'dec_SystemInformation_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'systemInformation-r8'
    {131072, V1} -> 
        {'systemInformation-r8', 'dec_SystemInformation-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_SystemInformation_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SystemInformation'(Tlv) ->
   'dec_SystemInformation'(Tlv, [16]).

'dec_SystemInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SystemInformation_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'SystemInformation', Term1}.



%%================================
%%  SecurityModeFailure-r8-IEs
%%================================
'enc_SecurityModeFailure-r8-IEs'(Val) ->
    'enc_SecurityModeFailure-r8-IEs'(Val, [<<48>>]).

'enc_SecurityModeFailure-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeFailure-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeFailure-r8-IEs_nonCriticalExtension'}.



'dec_SecurityModeFailure-r8-IEs'(Tlv) ->
   'dec_SecurityModeFailure-r8-IEs'(Tlv, [16]).

'dec_SecurityModeFailure-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'SecurityModeFailure-r8-IEs', Term1}.



%%================================
%%  SecurityModeFailure
%%================================
'enc_SecurityModeFailure'(Val) ->
    'enc_SecurityModeFailure'(Val, [<<48>>]).

'enc_SecurityModeFailure'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeFailure_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeFailure_criticalExtensions
%%================================
'enc_SecurityModeFailure_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeFailure-r8' ->
         'enc_SecurityModeFailure-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SecurityModeFailure_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'}.

'dec_SecurityModeFailure_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'securityModeFailure-r8'
    {131072, V1} -> 
        {'securityModeFailure-r8', 'dec_SecurityModeFailure-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SecurityModeFailure'(Tlv) ->
   'dec_SecurityModeFailure'(Tlv, [16]).

'dec_SecurityModeFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SecurityModeFailure_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityModeFailure', Term1, Term2}.



%%================================
%%  SecurityModeComplete-r8-IEs
%%================================
'enc_SecurityModeComplete-r8-IEs'(Val) ->
    'enc_SecurityModeComplete-r8-IEs'(Val, [<<48>>]).

'enc_SecurityModeComplete-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeComplete-r8-IEs_nonCriticalExtension'}.



'dec_SecurityModeComplete-r8-IEs'(Tlv) ->
   'dec_SecurityModeComplete-r8-IEs'(Tlv, [16]).

'dec_SecurityModeComplete-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'SecurityModeComplete-r8-IEs', Term1}.



%%================================
%%  SecurityModeComplete
%%================================
'enc_SecurityModeComplete'(Val) ->
    'enc_SecurityModeComplete'(Val, [<<48>>]).

'enc_SecurityModeComplete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeComplete_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeComplete_criticalExtensions
%%================================
'enc_SecurityModeComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeComplete-r8' ->
         'enc_SecurityModeComplete-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SecurityModeComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'}.

'dec_SecurityModeComplete_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'securityModeComplete-r8'
    {131072, V1} -> 
        {'securityModeComplete-r8', 'dec_SecurityModeComplete-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SecurityModeComplete'(Tlv) ->
   'dec_SecurityModeComplete'(Tlv, [16]).

'dec_SecurityModeComplete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SecurityModeComplete_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityModeComplete', Term1, Term2}.



%%================================
%%  SecurityConfigSMC
%%================================
'enc_SecurityConfigSMC'(Val) ->
    'enc_SecurityConfigSMC'(Val, [<<48>>]).

'enc_SecurityConfigSMC'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityAlgorithmConfig'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SecurityConfigSMC'(Tlv) ->
   'dec_SecurityConfigSMC'(Tlv, [16]).

'dec_SecurityConfigSMC'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SecurityAlgorithmConfig'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SecurityConfigSMC', Term1}.



%%================================
%%  SecurityModeCommand-r8-IEs
%%================================
'enc_SecurityModeCommand-r8-IEs'(Val) ->
    'enc_SecurityModeCommand-r8-IEs'(Val, [<<48>>]).

'enc_SecurityModeCommand-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute securityConfigSMC(1)   External EUTRA-RRC:SecurityConfigSMC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityConfigSMC'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeCommand-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeCommand-r8-IEs_nonCriticalExtension'}.



'dec_SecurityModeCommand-r8-IEs'(Tlv) ->
   'dec_SecurityModeCommand-r8-IEs'(Tlv, [16]).

'dec_SecurityModeCommand-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute securityConfigSMC(1)   External EUTRA-RRC:SecurityConfigSMC
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SecurityConfigSMC'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityModeCommand-r8-IEs', Term1, Term2}.



%%================================
%%  SecurityModeCommand
%%================================
'enc_SecurityModeCommand'(Val) ->
    'enc_SecurityModeCommand'(Val, [<<48>>]).

'enc_SecurityModeCommand'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeCommand_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeCommand_criticalExtensions
%%================================
'enc_SecurityModeCommand_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_SecurityModeCommand_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SecurityModeCommand_criticalExtensions_c1
%%================================
'enc_SecurityModeCommand_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeCommand-r8' ->
         'enc_SecurityModeCommand-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_SecurityModeCommand_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'securityModeCommand-r8'
    {131072, V1} -> 
        {'securityModeCommand-r8', 'dec_SecurityModeCommand-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  SecurityModeCommand_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'}.

'dec_SecurityModeCommand_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_SecurityModeCommand_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SecurityModeCommand'(Tlv) ->
   'dec_SecurityModeCommand'(Tlv, [16]).

'dec_SecurityModeCommand'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_SecurityModeCommand_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityModeCommand', Term1, Term2}.



%%================================
%%  RegisteredMME
%%================================
'enc_RegisteredMME'(Val) ->
    'enc_RegisteredMME'(Val, [<<48>>]).

'enc_RegisteredMME'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-Identity'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute mmegi(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(16, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute mmec(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(8, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RegisteredMME'(Tlv) ->
   'dec_RegisteredMME'(Tlv, [16]).

'dec_RegisteredMME'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute plmn-Identity(1)   External EUTRA-RRC:PLMN-Identity OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_PLMN-Identity'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute mmegi(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_native_bit_string(V2, [131073]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute mmec(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val2 = decode_native_bit_string(V3, [131074]),
C2 = bit_size(Val2),
if C2 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RegisteredMME', Term1, Term2, Term3}.



%%================================
%%  RRCConnectionSetupComplete-r8-IEs
%%================================
'enc_RRCConnectionSetupComplete-r8-IEs'(Val) ->
    'enc_RRCConnectionSetupComplete-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionSetupComplete-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute selectedPLMN-Identity(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute registeredMME(2)   External EUTRA-RRC:RegisteredMME OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RegisteredMME'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute dedicatedInfoNAS(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionSetupComplete-r8-IEs'(Tlv) ->
   'dec_RRCConnectionSetupComplete-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionSetupComplete-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute selectedPLMN-Identity(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute registeredMME(2)   External EUTRA-RRC:RegisteredMME OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RegisteredMME'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute dedicatedInfoNAS(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_octet_string(V3, [131074]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'RRCConnectionSetupComplete-r8-IEs', Term1, Term2, Term3, Term4}.



%%================================
%%  RRCConnectionSetupComplete
%%================================
'enc_RRCConnectionSetupComplete'(Val) ->
    'enc_RRCConnectionSetupComplete'(Val, [<<48>>]).

'enc_RRCConnectionSetupComplete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionSetupComplete_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetupComplete_criticalExtensions
%%================================
'enc_RRCConnectionSetupComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionSetupComplete_criticalExtensions_c1
%%================================
'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionSetupComplete-r8' ->
         'enc_RRCConnectionSetupComplete-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionSetupComplete_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionSetupComplete-r8'
    {131072, V1} -> 
        {'rrcConnectionSetupComplete-r8', 'dec_RRCConnectionSetupComplete-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionSetupComplete_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionSetupComplete_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionSetupComplete'(Tlv) ->
   'dec_RRCConnectionSetupComplete'(Tlv, [16]).

'dec_RRCConnectionSetupComplete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionSetupComplete_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionSetupComplete', Term1, Term2}.



%%================================
%%  RRCConnectionSetup-r8-IEs
%%================================
'enc_RRCConnectionSetup-r8-IEs'(Val) ->
    'enc_RRCConnectionSetup-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionSetup-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(1)   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RadioResourceConfigDedicated'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetup-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionSetup-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionSetup-r8-IEs'(Tlv) ->
   'dec_RRCConnectionSetup-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionSetup-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(1)   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RadioResourceConfigDedicated'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionSetup-r8-IEs', Term1, Term2}.



%%================================
%%  RRCConnectionSetup
%%================================
'enc_RRCConnectionSetup'(Val) ->
    'enc_RRCConnectionSetup'(Val, [<<48>>]).

'enc_RRCConnectionSetup'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionSetup_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetup_criticalExtensions
%%================================
'enc_RRCConnectionSetup_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionSetup_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionSetup_criticalExtensions_c1
%%================================
'enc_RRCConnectionSetup_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionSetup-r8' ->
         'enc_RRCConnectionSetup-r8-IEs'(element(2,Val), [<<160>>]);
      spare7 ->
         encode_null(element(2,Val), [<<129>>]);
      spare6 ->
         encode_null(element(2,Val), [<<130>>]);
      spare5 ->
         encode_null(element(2,Val), [<<131>>]);
      spare4 ->
         encode_null(element(2,Val), [<<132>>]);
      spare3 ->
         encode_null(element(2,Val), [<<133>>]);
      spare2 ->
         encode_null(element(2,Val), [<<134>>]);
      spare1 ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionSetup_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionSetup-r8'
    {131072, V1} -> 
        {'rrcConnectionSetup-r8', 'dec_RRCConnectionSetup-r8-IEs'(V1, [])};


%% 'spare7'
    {131073, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131074, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131075, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131076, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131077, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131078, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131079, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionSetup_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionSetup_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionSetup'(Tlv) ->
   'dec_RRCConnectionSetup'(Tlv, [16]).

'dec_RRCConnectionSetup'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionSetup_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionSetup', Term1, Term2}.



%%================================
%%  EstablishmentCause
%%================================
'enc_EstablishmentCause'(Val) ->
    'enc_EstablishmentCause'(Val, [<<10>>]).

'enc_EstablishmentCause'(Val, TagIn) ->
case Val of
emergency -> encode_tags(TagIn, [0], 1);
highPriorityAccess -> encode_tags(TagIn, [1], 1);
'mt-Access' -> encode_tags(TagIn, [2], 1);
'mo-Signalling' -> encode_tags(TagIn, [3], 1);
'mo-Data' -> encode_tags(TagIn, [4], 1);
spare3 -> encode_tags(TagIn, [5], 1);
spare2 -> encode_tags(TagIn, [6], 1);
spare1 -> encode_tags(TagIn, [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EstablishmentCause'(Tlv) ->
   'dec_EstablishmentCause'(Tlv, [10]).

'dec_EstablishmentCause'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  InitialUE-Identity
%%================================
'enc_InitialUE-Identity'(Val) ->
    'enc_InitialUE-Identity'(Val, []).

'enc_InitialUE-Identity'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's-TMSI' ->
         'enc_S-TMSI'(element(2,Val), [<<160>>]);
      randomValue ->
         encode_unnamed_bit_string(40, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_InitialUE-Identity'(Tlv) ->
   'dec_InitialUE-Identity'(Tlv, []).

'dec_InitialUE-Identity'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 's-TMSI'
    {131072, V1} -> 
        {'s-TMSI', 'dec_S-TMSI'(V1, [])};


%% 'randomValue'
    {131073, V1} -> 
        {randomValue, begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 40 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  RRCConnectionRequest-r8-IEs
%%================================
'enc_RRCConnectionRequest-r8-IEs'(Val) ->
    'enc_RRCConnectionRequest-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionRequest-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:InitialUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialUE-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute establishmentCause(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
emergency -> encode_tags([<<129>>], [0], 1);
highPriorityAccess -> encode_tags([<<129>>], [1], 1);
'mt-Access' -> encode_tags([<<129>>], [2], 1);
'mo-Signalling' -> encode_tags([<<129>>], [3], 1);
'mo-Data' -> encode_tags([<<129>>], [4], 1);
spare3 -> encode_tags([<<129>>], [5], 1);
spare2 -> encode_tags([<<129>>], [6], 1);
spare1 -> encode_tags([<<129>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute spare(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(1, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RRCConnectionRequest-r8-IEs'(Tlv) ->
   'dec_RRCConnectionRequest-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionRequest-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:InitialUE-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_InitialUE-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute establishmentCause(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute spare(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_native_bit_string(V3, [131074]),
C1 = bit_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RRCConnectionRequest-r8-IEs', Term1, Term2, Term3}.



%%================================
%%  RRCConnectionRequest
%%================================
'enc_RRCConnectionRequest'(Val) ->
    'enc_RRCConnectionRequest'(Val, [<<48>>]).

'enc_RRCConnectionRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionRequest_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRequest_criticalExtensions
%%================================
'enc_RRCConnectionRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionRequest-r8' ->
         'enc_RRCConnectionRequest-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionRequest_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionRequest-r8'
    {131072, V1} -> 
        {'rrcConnectionRequest-r8', 'dec_RRCConnectionRequest-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionRequest'(Tlv) ->
   'dec_RRCConnectionRequest'(Tlv, [16]).

'dec_RRCConnectionRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RRCConnectionRequest_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionRequest', Term1}.



%%================================
%%  BandClassPriority1XRTT
%%================================
'enc_BandClassPriority1XRTT'(Val) ->
    'enc_BandClassPriority1XRTT'(Val, [<<48>>]).

'enc_BandClassPriority1XRTT'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bc0 -> encode_tags([<<128>>], [0], 1);
bc1 -> encode_tags([<<128>>], [1], 1);
bc2 -> encode_tags([<<128>>], [2], 1);
bc3 -> encode_tags([<<128>>], [3], 1);
bc4 -> encode_tags([<<128>>], [4], 1);
bc5 -> encode_tags([<<128>>], [5], 1);
bc6 -> encode_tags([<<128>>], [6], 1);
bc7 -> encode_tags([<<128>>], [7], 1);
bc8 -> encode_tags([<<128>>], [8], 1);
bc9 -> encode_tags([<<128>>], [9], 1);
bc10 -> encode_tags([<<128>>], [10], 1);
bc11 -> encode_tags([<<128>>], [11], 1);
bc12 -> encode_tags([<<128>>], [12], 1);
bc13 -> encode_tags([<<128>>], [13], 1);
bc14 -> encode_tags([<<128>>], [14], 1);
bc15 -> encode_tags([<<128>>], [15], 1);
bc16 -> encode_tags([<<128>>], [16], 1);
bc17 -> encode_tags([<<128>>], [17], 1);
spare14 -> encode_tags([<<128>>], [18], 1);
spare13 -> encode_tags([<<128>>], [19], 1);
spare12 -> encode_tags([<<128>>], [20], 1);
spare11 -> encode_tags([<<128>>], [21], 1);
spare10 -> encode_tags([<<128>>], [22], 1);
spare9 -> encode_tags([<<128>>], [23], 1);
spare8 -> encode_tags([<<128>>], [24], 1);
spare7 -> encode_tags([<<128>>], [25], 1);
spare6 -> encode_tags([<<128>>], [26], 1);
spare5 -> encode_tags([<<128>>], [27], 1);
spare4 -> encode_tags([<<128>>], [28], 1);
spare3 -> encode_tags([<<128>>], [29], 1);
spare2 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BandClassPriority1XRTT'(Tlv) ->
   'dec_BandClassPriority1XRTT'(Tlv, [16]).

'dec_BandClassPriority1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BandClassPriority1XRTT', Term1, Term2}.



%%================================
%%  BandClassPriorityList1XRTT
%%================================
'enc_BandClassPriorityList1XRTT'(Val) ->
    'enc_BandClassPriorityList1XRTT'(Val, [<<48>>]).

'enc_BandClassPriorityList1XRTT'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityList1XRTT_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BandClassPriorityList1XRTT_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassPriorityList1XRTT_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassPriority1XRTT'(H, [<<48>>]),
   'enc_BandClassPriorityList1XRTT_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassPriorityList1XRTT'(Tlv) ->
   'dec_BandClassPriorityList1XRTT'(Tlv, [16]).

'dec_BandClassPriorityList1XRTT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_BandClassPriority1XRTT'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  BandClassPriorityHRPD
%%================================
'enc_BandClassPriorityHRPD'(Val) ->
    'enc_BandClassPriorityHRPD'(Val, [<<48>>]).

'enc_BandClassPriorityHRPD'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
bc0 -> encode_tags([<<128>>], [0], 1);
bc1 -> encode_tags([<<128>>], [1], 1);
bc2 -> encode_tags([<<128>>], [2], 1);
bc3 -> encode_tags([<<128>>], [3], 1);
bc4 -> encode_tags([<<128>>], [4], 1);
bc5 -> encode_tags([<<128>>], [5], 1);
bc6 -> encode_tags([<<128>>], [6], 1);
bc7 -> encode_tags([<<128>>], [7], 1);
bc8 -> encode_tags([<<128>>], [8], 1);
bc9 -> encode_tags([<<128>>], [9], 1);
bc10 -> encode_tags([<<128>>], [10], 1);
bc11 -> encode_tags([<<128>>], [11], 1);
bc12 -> encode_tags([<<128>>], [12], 1);
bc13 -> encode_tags([<<128>>], [13], 1);
bc14 -> encode_tags([<<128>>], [14], 1);
bc15 -> encode_tags([<<128>>], [15], 1);
bc16 -> encode_tags([<<128>>], [16], 1);
bc17 -> encode_tags([<<128>>], [17], 1);
spare14 -> encode_tags([<<128>>], [18], 1);
spare13 -> encode_tags([<<128>>], [19], 1);
spare12 -> encode_tags([<<128>>], [20], 1);
spare11 -> encode_tags([<<128>>], [21], 1);
spare10 -> encode_tags([<<128>>], [22], 1);
spare9 -> encode_tags([<<128>>], [23], 1);
spare8 -> encode_tags([<<128>>], [24], 1);
spare7 -> encode_tags([<<128>>], [25], 1);
spare6 -> encode_tags([<<128>>], [26], 1);
spare5 -> encode_tags([<<128>>], [27], 1);
spare4 -> encode_tags([<<128>>], [28], 1);
spare3 -> encode_tags([<<128>>], [29], 1);
spare2 -> encode_tags([<<128>>], [30], 1);
spare1 -> encode_tags([<<128>>], [31], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BandClassPriorityHRPD'(Tlv) ->
   'dec_BandClassPriorityHRPD'(Tlv, [16]).

'dec_BandClassPriorityHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute bandClass(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'BandClassPriorityHRPD', Term1, Term2}.



%%================================
%%  BandClassPriorityListHRPD
%%================================
'enc_BandClassPriorityListHRPD'(Val) ->
    'enc_BandClassPriorityListHRPD'(Val, [<<48>>]).

'enc_BandClassPriorityListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityListHRPD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BandClassPriorityListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassPriorityListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityHRPD'(H, [<<48>>]),
   'enc_BandClassPriorityListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassPriorityListHRPD'(Tlv) ->
   'dec_BandClassPriorityListHRPD'(Tlv, [16]).

'dec_BandClassPriorityListHRPD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_BandClassPriorityHRPD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  FreqPriorityUTRA-TDD
%%================================
'enc_FreqPriorityUTRA-TDD'(Val) ->
    'enc_FreqPriorityUTRA-TDD'(Val, [<<48>>]).

'enc_FreqPriorityUTRA-TDD'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FreqPriorityUTRA-TDD'(Tlv) ->
   'dec_FreqPriorityUTRA-TDD'(Tlv, [16]).

'dec_FreqPriorityUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FreqPriorityUTRA-TDD', Term1, Term2}.



%%================================
%%  FreqPriorityListUTRA-TDD
%%================================
'enc_FreqPriorityListUTRA-TDD'(Val) ->
    'enc_FreqPriorityListUTRA-TDD'(Val, [<<48>>]).

'enc_FreqPriorityListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListUTRA-TDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_FreqPriorityListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityUTRA-TDD'(H, [<<48>>]),
   'enc_FreqPriorityListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListUTRA-TDD'(Tlv) ->
   'dec_FreqPriorityListUTRA-TDD'(Tlv, [16]).

'dec_FreqPriorityListUTRA-TDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_FreqPriorityUTRA-TDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  FreqPriorityUTRA-FDD
%%================================
'enc_FreqPriorityUTRA-FDD'(Val) ->
    'enc_FreqPriorityUTRA-FDD'(Val, [<<48>>]).

'enc_FreqPriorityUTRA-FDD'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FreqPriorityUTRA-FDD'(Tlv) ->
   'dec_FreqPriorityUTRA-FDD'(Tlv, [16]).

'dec_FreqPriorityUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 16383 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FreqPriorityUTRA-FDD', Term1, Term2}.



%%================================
%%  FreqPriorityListUTRA-FDD
%%================================
'enc_FreqPriorityListUTRA-FDD'(Val) ->
    'enc_FreqPriorityListUTRA-FDD'(Val, [<<48>>]).

'enc_FreqPriorityListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListUTRA-FDD_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_FreqPriorityListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityUTRA-FDD'(H, [<<48>>]),
   'enc_FreqPriorityListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListUTRA-FDD'(Tlv) ->
   'dec_FreqPriorityListUTRA-FDD'(Tlv, [16]).

'dec_FreqPriorityListUTRA-FDD'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_FreqPriorityUTRA-FDD'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  FreqsPriorityGERAN
%%================================
'enc_FreqsPriorityGERAN'(Val) ->
    'enc_FreqsPriorityGERAN'(Val, [<<48>>]).

'enc_FreqsPriorityGERAN'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FreqsPriorityGERAN'(Tlv) ->
   'dec_FreqsPriorityGERAN'(Tlv, [16]).

'dec_FreqsPriorityGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreqs(1)   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CarrierFreqsGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FreqsPriorityGERAN', Term1, Term2}.



%%================================
%%  FreqsPriorityListGERAN
%%================================
'enc_FreqsPriorityListGERAN'(Val) ->
    'enc_FreqsPriorityListGERAN'(Val, [<<48>>]).

'enc_FreqsPriorityListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqsPriorityListGERAN_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_FreqsPriorityListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqsPriorityListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqsPriorityGERAN'(H, [<<48>>]),
   'enc_FreqsPriorityListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqsPriorityListGERAN'(Tlv) ->
   'dec_FreqsPriorityListGERAN'(Tlv, [16]).

'dec_FreqsPriorityListGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_FreqsPriorityGERAN'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  FreqPriorityEUTRA
%%================================
'enc_FreqPriorityEUTRA'(Val) ->
    'enc_FreqPriorityEUTRA'(Val, [<<48>>]).

'enc_FreqPriorityEUTRA'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_FreqPriorityEUTRA'(Tlv) ->
   'dec_FreqPriorityEUTRA'(Tlv, [16]).

'dec_FreqPriorityEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute carrierFreq(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute cellReselectionPriority(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'FreqPriorityEUTRA', Term1, Term2}.



%%================================
%%  FreqPriorityListEUTRA
%%================================
'enc_FreqPriorityListEUTRA'(Val) ->
    'enc_FreqPriorityListEUTRA'(Val, [<<48>>]).

'enc_FreqPriorityListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListEUTRA_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_FreqPriorityListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityEUTRA'(H, [<<48>>]),
   'enc_FreqPriorityListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListEUTRA'(Tlv) ->
   'dec_FreqPriorityListEUTRA'(Tlv, [16]).

'dec_FreqPriorityListEUTRA'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_FreqPriorityEUTRA'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  IdleModeMobilityControlInfo
%%================================
'enc_IdleModeMobilityControlInfo'(Val) ->
    'enc_IdleModeMobilityControlInfo'(Val, [<<48>>]).

'enc_IdleModeMobilityControlInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute freqPriorityListEUTRA(1)   External EUTRA-RRC:FreqPriorityListEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListEUTRA'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute freqPriorityListGERAN(2)   External EUTRA-RRC:FreqsPriorityListGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqsPriorityListGERAN'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute freqPriorityListUTRA-FDD(3)   External EUTRA-RRC:FreqPriorityListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListUTRA-FDD'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute freqPriorityListUTRA-TDD(4)   External EUTRA-RRC:FreqPriorityListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListUTRA-TDD'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute bandClassPriorityListHRPD(5)   External EUTRA-RRC:BandClassPriorityListHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BandClassPriorityListHRPD'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute bandClassPriorityList1XRTT(6)   External EUTRA-RRC:BandClassPriorityList1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BandClassPriorityList1XRTT'(Cindex6, [<<165>>])
       end,

%%-------------------------------------------------
%% attribute t320(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex7 of
min5 -> encode_tags([<<134>>], [0], 1);
min10 -> encode_tags([<<134>>], [1], 1);
min20 -> encode_tags([<<134>>], [2], 1);
min30 -> encode_tags([<<134>>], [3], 1);
min60 -> encode_tags([<<134>>], [4], 1);
min120 -> encode_tags([<<134>>], [5], 1);
min180 -> encode_tags([<<134>>], [6], 1);
spare1 -> encode_tags([<<134>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_IdleModeMobilityControlInfo'(Tlv) ->
   'dec_IdleModeMobilityControlInfo'(Tlv, [16]).

'dec_IdleModeMobilityControlInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute freqPriorityListEUTRA(1)   External EUTRA-RRC:FreqPriorityListEUTRA OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_FreqPriorityListEUTRA'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute freqPriorityListGERAN(2)   External EUTRA-RRC:FreqsPriorityListGERAN OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_FreqsPriorityListGERAN'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute freqPriorityListUTRA-FDD(3)   External EUTRA-RRC:FreqPriorityListUTRA-FDD OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_FreqPriorityListUTRA-FDD'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute freqPriorityListUTRA-TDD(4)   External EUTRA-RRC:FreqPriorityListUTRA-TDD OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_FreqPriorityListUTRA-TDD'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute bandClassPriorityListHRPD(5)   External EUTRA-RRC:BandClassPriorityListHRPD OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_BandClassPriorityListHRPD'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute bandClassPriorityList1XRTT(6)   External EUTRA-RRC:BandClassPriorityList1XRTT OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_BandClassPriorityList1XRTT'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

%%-------------------------------------------------
%% attribute t320(7) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {case decode_integer(V7, []) of
0 -> min5;
1 -> min10;
2 -> min20;
3 -> min30;
4 -> min60;
5 -> min120;
6 -> min180;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
   {'IdleModeMobilityControlInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  RedirectedCarrierInfo
%%================================
'enc_RedirectedCarrierInfo'(Val) ->
    'enc_RedirectedCarrierInfo'(Val, []).

'enc_RedirectedCarrierInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      eutra ->
         encode_integer(element(2,Val), [<<128>>]);
      geran ->
         'enc_CarrierFreqsGERAN'(element(2,Val), [<<161>>]);
      'utra-FDD' ->
         encode_integer(element(2,Val), [<<130>>]);
      'utra-TDD' ->
         encode_integer(element(2,Val), [<<131>>]);
      'cdma2000-HRPD' ->
         'enc_CarrierFreqCDMA2000'(element(2,Val), [<<164>>]);
      'cdma2000-1xRTT' ->
         'enc_CarrierFreqCDMA2000'(element(2,Val), [<<165>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_RedirectedCarrierInfo'(Tlv) ->
   'dec_RedirectedCarrierInfo'(Tlv, []).

'dec_RedirectedCarrierInfo'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'eutra'
    {131072, V1} -> 
        {eutra, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'geran'
    {131073, V1} -> 
        {geran, 'dec_CarrierFreqsGERAN'(V1, [])};


%% 'utra-FDD'
    {131074, V1} -> 
        {'utra-FDD', begin
Val2 = decode_integer(V1, []),
if 0 =< Val2, Val2 =< 16383 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'utra-TDD'
    {131075, V1} -> 
        {'utra-TDD', begin
Val3 = decode_integer(V1, []),
if 0 =< Val3, Val3 =< 16383 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'cdma2000-HRPD'
    {131076, V1} -> 
        {'cdma2000-HRPD', 'dec_CarrierFreqCDMA2000'(V1, [])};


%% 'cdma2000-1xRTT'
    {131077, V1} -> 
        {'cdma2000-1xRTT', 'dec_CarrierFreqCDMA2000'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ReleaseCause
%%================================
'enc_ReleaseCause'(Val) ->
    'enc_ReleaseCause'(Val, [<<10>>]).

'enc_ReleaseCause'(Val, TagIn) ->
case Val of
loadBalancingTAUrequired -> encode_tags(TagIn, [0], 1);
other -> encode_tags(TagIn, [1], 1);
spare2 -> encode_tags(TagIn, [2], 1);
spare1 -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReleaseCause'(Tlv) ->
   'dec_ReleaseCause'(Tlv, [10]).

'dec_ReleaseCause'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> loadBalancingTAUrequired;
1 -> other;
2 -> spare2;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  RRCConnectionRelease-r8-IEs
%%================================
'enc_RRCConnectionRelease-r8-IEs'(Val) ->
    'enc_RRCConnectionRelease-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionRelease-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
loadBalancingTAUrequired -> encode_tags([<<128>>], [0], 1);
other -> encode_tags([<<128>>], [1], 1);
spare2 -> encode_tags([<<128>>], [2], 1);
spare1 -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute redirectedCarrierInfo(2)   External EUTRA-RRC:RedirectedCarrierInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RedirectedCarrierInfo'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute idleModeMobilityControlInfo(3)   External EUTRA-RRC:IdleModeMobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IdleModeMobilityControlInfo'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRelease-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionRelease-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionRelease-r8-IEs'(Tlv) ->
   'dec_RRCConnectionRelease-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionRelease-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute releaseCause(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> loadBalancingTAUrequired;
1 -> other;
2 -> spare2;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute redirectedCarrierInfo(2)   External EUTRA-RRC:RedirectedCarrierInfo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RedirectedCarrierInfo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute idleModeMobilityControlInfo(3)   External EUTRA-RRC:IdleModeMobilityControlInfo OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_IdleModeMobilityControlInfo'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'RRCConnectionRelease-r8-IEs', Term1, Term2, Term3, Term4}.



%%================================
%%  RRCConnectionRelease
%%================================
'enc_RRCConnectionRelease'(Val) ->
    'enc_RRCConnectionRelease'(Val, [<<48>>]).

'enc_RRCConnectionRelease'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionRelease_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRelease_criticalExtensions
%%================================
'enc_RRCConnectionRelease_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionRelease_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionRelease_criticalExtensions_c1
%%================================
'enc_RRCConnectionRelease_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionRelease-r8' ->
         'enc_RRCConnectionRelease-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionRelease_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionRelease-r8'
    {131072, V1} -> 
        {'rrcConnectionRelease-r8', 'dec_RRCConnectionRelease-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionRelease_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionRelease_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionRelease'(Tlv) ->
   'dec_RRCConnectionRelease'(Tlv, [16]).

'dec_RRCConnectionRelease'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionRelease_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionRelease', Term1, Term2}.



%%================================
%%  RRCConnectionReject-r8-IEs
%%================================
'enc_RRCConnectionReject-r8-IEs'(Val) ->
    'enc_RRCConnectionReject-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReject-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute waitTime(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReject-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReject-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReject-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReject-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReject-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute waitTime(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionReject-r8-IEs', Term1, Term2}.



%%================================
%%  RRCConnectionReject
%%================================
'enc_RRCConnectionReject'(Val) ->
    'enc_RRCConnectionReject'(Val, [<<48>>]).

'enc_RRCConnectionReject'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReject_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReject_criticalExtensions
%%================================
'enc_RRCConnectionReject_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReject_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReject_criticalExtensions_c1
%%================================
'enc_RRCConnectionReject_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReject-r8' ->
         'enc_RRCConnectionReject-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionReject_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReject-r8'
    {131072, V1} -> 
        {'rrcConnectionReject-r8', 'dec_RRCConnectionReject-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionReject_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReject_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionReject_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReject'(Tlv) ->
   'dec_RRCConnectionReject'(Tlv, [16]).

'dec_RRCConnectionReject'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RRCConnectionReject_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReject', Term1}.



%%================================
%%  ReestablishmentCause
%%================================
'enc_ReestablishmentCause'(Val) ->
    'enc_ReestablishmentCause'(Val, [<<10>>]).

'enc_ReestablishmentCause'(Val, TagIn) ->
case Val of
reconfigurationFailure -> encode_tags(TagIn, [0], 1);
handoverFailure -> encode_tags(TagIn, [1], 1);
otherFailure -> encode_tags(TagIn, [2], 1);
spare1 -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReestablishmentCause'(Tlv) ->
   'dec_ReestablishmentCause'(Tlv, [10]).

'dec_ReestablishmentCause'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> reconfigurationFailure;
1 -> handoverFailure;
2 -> otherFailure;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ReestabUE-Identity
%%================================
'enc_ReestabUE-Identity'(Val) ->
    'enc_ReestabUE-Identity'(Val, [<<48>>]).

'enc_ReestabUE-Identity'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute c-RNTI(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(16, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute shortMAC-I(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(16, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_ReestabUE-Identity'(Tlv) ->
   'dec_ReestabUE-Identity'(Tlv, [16]).

'dec_ReestabUE-Identity'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute c-RNTI(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 16 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute physCellId(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 503 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute shortMAC-I(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_native_bit_string(V3, [131074]),
C2 = bit_size(Val3),
if C2 =:= 16 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ReestabUE-Identity', Term1, Term2, Term3}.



%%================================
%%  RRCConnectionReestablishmentRequest-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Val) ->
    'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:ReestabUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReestabUE-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute reestablishmentCause(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reconfigurationFailure -> encode_tags([<<129>>], [0], 1);
handoverFailure -> encode_tags([<<129>>], [1], 1);
otherFailure -> encode_tags([<<129>>], [2], 1);
spare1 -> encode_tags([<<129>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute spare(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(2, Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:ReestabUE-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ReestabUE-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute reestablishmentCause(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reconfigurationFailure;
1 -> handoverFailure;
2 -> otherFailure;
3 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute spare(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_native_bit_string(V3, [131074]),
C1 = bit_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentRequest-r8-IEs', Term1, Term2, Term3}.



%%================================
%%  RRCConnectionReestablishmentRequest
%%================================
'enc_RRCConnectionReestablishmentRequest'(Val) ->
    'enc_RRCConnectionReestablishmentRequest'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentRequest_criticalExtensions
%%================================
'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentRequest-r8' ->
         'enc_RRCConnectionReestablishmentRequest-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReestablishmentRequest_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishmentRequest-r8'
    {131072, V1} -> 
        {'rrcConnectionReestablishmentRequest-r8', 'dec_RRCConnectionReestablishmentRequest-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReestablishmentRequest'(Tlv) ->
   'dec_RRCConnectionReestablishmentRequest'(Tlv, [16]).

'dec_RRCConnectionReestablishmentRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RRCConnectionReestablishmentRequest_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentRequest', Term1}.



%%================================
%%  RRCConnectionReestablishmentReject-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentReject-r8-IEs'(Val) ->
    'enc_RRCConnectionReestablishmentReject-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentReject-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReestablishmentReject-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReestablishmentReject-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReestablishmentReject-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentReject-r8-IEs', Term1}.



%%================================
%%  RRCConnectionReestablishmentReject
%%================================
'enc_RRCConnectionReestablishmentReject'(Val) ->
    'enc_RRCConnectionReestablishmentReject'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentReject'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReestablishmentReject_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentReject_criticalExtensions
%%================================
'enc_RRCConnectionReestablishmentReject_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentReject-r8' ->
         'enc_RRCConnectionReestablishmentReject-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReestablishmentReject_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishmentReject-r8'
    {131072, V1} -> 
        {'rrcConnectionReestablishmentReject-r8', 'dec_RRCConnectionReestablishmentReject-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReestablishmentReject'(Tlv) ->
   'dec_RRCConnectionReestablishmentReject'(Tlv, [16]).

'dec_RRCConnectionReestablishmentReject'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RRCConnectionReestablishmentReject_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentReject', Term1}.



%%================================
%%  RRCConnectionReestablishmentComplete-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Val) ->
    'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentComplete-r8-IEs', Term1}.



%%================================
%%  RRCConnectionReestablishmentComplete
%%================================
'enc_RRCConnectionReestablishmentComplete'(Val) ->
    'enc_RRCConnectionReestablishmentComplete'(Val, [<<48>>]).

'enc_RRCConnectionReestablishmentComplete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentComplete_criticalExtensions
%%================================
'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentComplete-r8' ->
         'enc_RRCConnectionReestablishmentComplete-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReestablishmentComplete_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishmentComplete-r8'
    {131072, V1} -> 
        {'rrcConnectionReestablishmentComplete-r8', 'dec_RRCConnectionReestablishmentComplete-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReestablishmentComplete'(Tlv) ->
   'dec_RRCConnectionReestablishmentComplete'(Tlv, [16]).

'dec_RRCConnectionReestablishmentComplete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionReestablishmentComplete_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishmentComplete', Term1, Term2}.



%%================================
%%  RRCConnectionReestablishment-r8-IEs
%%================================
'enc_RRCConnectionReestablishment-r8-IEs'(Val) ->
    'enc_RRCConnectionReestablishment-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReestablishment-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(1)   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RadioResourceConfigDedicated'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nextHopChainingCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishment-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReestablishment-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReestablishment-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReestablishment-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(1)   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_RadioResourceConfigDedicated'(V1, [131072]),

%%-------------------------------------------------
%% attribute nextHopChainingCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishment-r8-IEs', Term1, Term2, Term3}.



%%================================
%%  RRCConnectionReestablishment
%%================================
'enc_RRCConnectionReestablishment'(Val) ->
    'enc_RRCConnectionReestablishment'(Val, [<<48>>]).

'enc_RRCConnectionReestablishment'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReestablishment_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishment_criticalExtensions
%%================================
'enc_RRCConnectionReestablishment_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReestablishment_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishment_criticalExtensions_c1
%%================================
'enc_RRCConnectionReestablishment_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishment-r8' ->
         'enc_RRCConnectionReestablishment-r8-IEs'(element(2,Val), [<<160>>]);
      spare7 ->
         encode_null(element(2,Val), [<<129>>]);
      spare6 ->
         encode_null(element(2,Val), [<<130>>]);
      spare5 ->
         encode_null(element(2,Val), [<<131>>]);
      spare4 ->
         encode_null(element(2,Val), [<<132>>]);
      spare3 ->
         encode_null(element(2,Val), [<<133>>]);
      spare2 ->
         encode_null(element(2,Val), [<<134>>]);
      spare1 ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionReestablishment_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishment-r8'
    {131072, V1} -> 
        {'rrcConnectionReestablishment-r8', 'dec_RRCConnectionReestablishment-r8-IEs'(V1, [])};


%% 'spare7'
    {131073, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131074, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131075, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131076, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131077, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131078, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131079, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReestablishment_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionReestablishment_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReestablishment'(Tlv) ->
   'dec_RRCConnectionReestablishment'(Tlv, [16]).

'dec_RRCConnectionReestablishment'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionReestablishment_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionReestablishment', Term1, Term2}.



%%================================
%%  RRCConnectionReconfigurationComplete-r8-IEs
%%================================
'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Val) ->
    'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'RRCConnectionReconfigurationComplete-r8-IEs', Term1}.



%%================================
%%  RRCConnectionReconfigurationComplete
%%================================
'enc_RRCConnectionReconfigurationComplete'(Val) ->
    'enc_RRCConnectionReconfigurationComplete'(Val, [<<48>>]).

'enc_RRCConnectionReconfigurationComplete'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfigurationComplete_criticalExtensions
%%================================
'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReconfigurationComplete-r8' ->
         'enc_RRCConnectionReconfigurationComplete-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReconfigurationComplete_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReconfigurationComplete-r8'
    {131072, V1} -> 
        {'rrcConnectionReconfigurationComplete-r8', 'dec_RRCConnectionReconfigurationComplete-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReconfigurationComplete'(Tlv) ->
   'dec_RRCConnectionReconfigurationComplete'(Tlv, [16]).

'dec_RRCConnectionReconfigurationComplete'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionReconfigurationComplete_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionReconfigurationComplete', Term1, Term2}.



%%================================
%%  SecurityConfigHO
%%================================
'enc_SecurityConfigHO'(Val) ->
    'enc_SecurityConfigHO'(Val, [<<48>>]).

'enc_SecurityConfigHO'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute handoverType(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityConfigHO_handoverType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SecurityConfigHO_handoverType
%%================================
'enc_SecurityConfigHO_handoverType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      intraLTE ->
         'enc_SecurityConfigHO_handoverType_intraLTE'(element(2,Val), [<<160>>]);
      interRAT ->
         'enc_SecurityConfigHO_handoverType_interRAT'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  SecurityConfigHO_handoverType_intraLTE
%%================================
'enc_SecurityConfigHO_handoverType_intraLTE'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityAlgorithmConfig'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute keyChangeIndicator(2) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_boolean(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nextHopChainingCount(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityConfigHO_handoverType_intraLTE'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_SecurityAlgorithmConfig'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute keyChangeIndicator(2) with type BOOLEAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_boolean(V2, [131073]),

%%-------------------------------------------------
%% attribute nextHopChainingCount(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SecurityConfigHO_handoverType_intraLTE', Term1, Term2, Term3}.




%%================================
%%  SecurityConfigHO_handoverType_interRAT
%%================================
'enc_SecurityConfigHO_handoverType_interRAT'(Val, TagIn) ->
   {_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityAlgorithmConfig'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nas-SecurityParamToEUTRA(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SecurityConfigHO_handoverType_interRAT'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute securityAlgorithmConfig(1)   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SecurityAlgorithmConfig'(V1, [131072]),

%%-------------------------------------------------
%% attribute nas-SecurityParamToEUTRA(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if C1 =:= 6 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'SecurityConfigHO_handoverType_interRAT', Term1, Term2}.

'dec_SecurityConfigHO_handoverType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'intraLTE'
    {131072, V1} -> 
        {intraLTE, 'dec_SecurityConfigHO_handoverType_intraLTE'(V1, [])};


%% 'interRAT'
    {131073, V1} -> 
        {interRAT, 'dec_SecurityConfigHO_handoverType_interRAT'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_SecurityConfigHO'(Tlv) ->
   'dec_SecurityConfigHO'(Tlv, [16]).

'dec_SecurityConfigHO'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute handoverType(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SecurityConfigHO_handoverType'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SecurityConfigHO', Term1}.



%%================================
%%  RRCConnectionReconfiguration-r8-IEs
%%================================
'enc_RRCConnectionReconfiguration-r8-IEs'(Val) ->
    'enc_RRCConnectionReconfiguration-r8-IEs'(Val, [<<48>>]).

'enc_RRCConnectionReconfiguration-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute measConfig(1)   External EUTRA-RRC:MeasConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasConfig'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute mobilityControlInfo(2)   External EUTRA-RRC:MobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MobilityControlInfo'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute dedicatedInfoNASList(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(4)   External EUTRA-RRC:RadioResourceConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceConfigDedicated'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute securityConfigHO(5)   External EUTRA-RRC:SecurityConfigHO OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityConfigHO'(Cindex5, [<<164>>])
       end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(6) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList
%%================================
'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[decode_octet_string(V1, [4]) || V1 <- Tlv1].





%%================================
%%  RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'}.



'dec_RRCConnectionReconfiguration-r8-IEs'(Tlv) ->
   'dec_RRCConnectionReconfiguration-r8-IEs'(Tlv, [16]).

'dec_RRCConnectionReconfiguration-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measConfig(1)   External EUTRA-RRC:MeasConfig OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_MeasConfig'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute mobilityControlInfo(2)   External EUTRA-RRC:MobilityControlInfo OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MobilityControlInfo'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute dedicatedInfoNASList(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute radioResourceConfigDedicated(4)   External EUTRA-RRC:RadioResourceConfigDedicated OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RadioResourceConfigDedicated'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute securityConfigHO(5)   External EUTRA-RRC:SecurityConfigHO OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_SecurityConfigHO'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(6) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv7}}}) % extra fields not allowed
end,
   {'RRCConnectionReconfiguration-r8-IEs', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  RRCConnectionReconfiguration
%%================================
'enc_RRCConnectionReconfiguration'(Val) ->
    'enc_RRCConnectionReconfiguration'(Val, [<<48>>]).

'enc_RRCConnectionReconfiguration'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReconfiguration_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfiguration_criticalExtensions
%%================================
'enc_RRCConnectionReconfiguration_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  RRCConnectionReconfiguration_criticalExtensions_c1
%%================================
'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReconfiguration-r8' ->
         'enc_RRCConnectionReconfiguration-r8-IEs'(element(2,Val), [<<160>>]);
      spare7 ->
         encode_null(element(2,Val), [<<129>>]);
      spare6 ->
         encode_null(element(2,Val), [<<130>>]);
      spare5 ->
         encode_null(element(2,Val), [<<131>>]);
      spare4 ->
         encode_null(element(2,Val), [<<132>>]);
      spare3 ->
         encode_null(element(2,Val), [<<133>>]);
      spare2 ->
         encode_null(element(2,Val), [<<134>>]);
      spare1 ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_RRCConnectionReconfiguration_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReconfiguration-r8'
    {131072, V1} -> 
        {'rrcConnectionReconfiguration-r8', 'dec_RRCConnectionReconfiguration-r8-IEs'(V1, [])};


%% 'spare7'
    {131073, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131074, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131075, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131076, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131077, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131078, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131079, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'}.

'dec_RRCConnectionReconfiguration_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_RRCConnectionReconfiguration_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_RRCConnectionReconfiguration'(Tlv) ->
   'dec_RRCConnectionReconfiguration'(Tlv, [16]).

'dec_RRCConnectionReconfiguration'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_RRCConnectionReconfiguration_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'RRCConnectionReconfiguration', Term1, Term2}.



%%================================
%%  IMSI-Digit
%%================================
'enc_IMSI-Digit'(Val) ->
    'enc_IMSI-Digit'(Val, [<<2>>]).

'enc_IMSI-Digit'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_IMSI-Digit'(Tlv) ->
   'dec_IMSI-Digit'(Tlv, [2]).

'dec_IMSI-Digit'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IMSI
%%================================
'enc_IMSI'(Val) ->
    'enc_IMSI'(Val, [<<48>>]).

'enc_IMSI'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IMSI_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_IMSI_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IMSI_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_integer(H, [<<2>>]),
   'enc_IMSI_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IMSI'(Tlv) ->
   'dec_IMSI'(Tlv, [16]).

'dec_IMSI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_integer(V1, [2]),
if 0 =< Val1, Val1 =< 9 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  PagingUE-Identity
%%================================
'enc_PagingUE-Identity'(Val) ->
    'enc_PagingUE-Identity'(Val, []).

'enc_PagingUE-Identity'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's-TMSI' ->
         'enc_S-TMSI'(element(2,Val), [<<160>>]);
      imsi ->
         'enc_IMSI'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_PagingUE-Identity'(Tlv) ->
   'dec_PagingUE-Identity'(Tlv, []).

'dec_PagingUE-Identity'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 's-TMSI'
    {131072, V1} -> 
        {'s-TMSI', 'dec_S-TMSI'(V1, [])};


%% 'imsi'
    {131073, V1} -> 
        {imsi, 'dec_IMSI'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  PagingRecord
%%================================
'enc_PagingRecord'(Val) ->
    'enc_PagingRecord'(Val, [<<48>>]).

'enc_PagingRecord'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:PagingUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PagingUE-Identity'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cn-Domain(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ps -> encode_tags([<<129>>], [0], 1);
cs -> encode_tags([<<129>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PagingRecord'(Tlv) ->
   'dec_PagingRecord'(Tlv, [16]).

'dec_PagingRecord'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute ue-Identity(1)   External EUTRA-RRC:PagingUE-Identity
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PagingUE-Identity'(V1, [131072]),

%%-------------------------------------------------
%% attribute cn-Domain(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ps;
1 -> cs;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PagingRecord', Term1, Term2}.



%%================================
%%  PagingRecordList
%%================================
'enc_PagingRecordList'(Val) ->
    'enc_PagingRecordList'(Val, [<<48>>]).

'enc_PagingRecordList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PagingRecordList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PagingRecordList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PagingRecordList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PagingRecord'(H, [<<48>>]),
   'enc_PagingRecordList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PagingRecordList'(Tlv) ->
   'dec_PagingRecordList'(Tlv, [16]).

'dec_PagingRecordList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PagingRecord'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Paging
%%================================
'enc_Paging'(Val) ->
    'enc_Paging'(Val, [<<48>>]).

'enc_Paging'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute pagingRecordList(1)   External EUTRA-RRC:PagingRecordList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PagingRecordList'(Cindex1, [<<160>>])
       end,

%%-------------------------------------------------
%% attribute systemInfoModification(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
true -> encode_tags([<<129>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end
       end,

%%-------------------------------------------------
%% attribute etws-Indication(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
true -> encode_tags([<<130>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Paging_nonCriticalExtension'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Paging_nonCriticalExtension
%%================================
'enc_Paging_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Paging_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'Paging_nonCriticalExtension'}.



'dec_Paging'(Tlv) ->
   'dec_Paging'(Tlv, [16]).

'dec_Paging'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pagingRecordList(1)   External EUTRA-RRC:PagingRecordList OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_PagingRecordList'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute systemInfoModification(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> true;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute etws-Indication(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> true;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Paging_nonCriticalExtension'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Paging', Term1, Term2, Term3, Term4}.



%%================================
%%  SystemInfoListGERAN
%%================================
'enc_SystemInfoListGERAN'(Val) ->
    'enc_SystemInfoListGERAN'(Val, [<<48>>]).

'enc_SystemInfoListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SystemInfoListGERAN_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SystemInfoListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SystemInfoListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_SystemInfoListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SystemInfoListGERAN'(Tlv) ->
   'dec_SystemInfoListGERAN'(Tlv, [16]).

'dec_SystemInfoListGERAN'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if 1 =< C1, C1 =< 23 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  SI-OrPSI-GERAN
%%================================
'enc_SI-OrPSI-GERAN'(Val) ->
    'enc_SI-OrPSI-GERAN'(Val, []).

'enc_SI-OrPSI-GERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      si ->
         'enc_SystemInfoListGERAN'(element(2,Val), [<<160>>]);
      psi ->
         'enc_SystemInfoListGERAN'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_SI-OrPSI-GERAN'(Tlv) ->
   'dec_SI-OrPSI-GERAN'(Tlv, []).

'dec_SI-OrPSI-GERAN'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'si'
    {131072, V1} -> 
        {si, 'dec_SystemInfoListGERAN'(V1, [])};


%% 'psi'
    {131073, V1} -> 
        {psi, 'dec_SystemInfoListGERAN'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  CellChangeOrder
%%================================
'enc_CellChangeOrder'(Val) ->
    'enc_CellChangeOrder'(Val, [<<48>>]).

'enc_CellChangeOrder'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute t304(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ms100 -> encode_tags([<<128>>], [0], 1);
ms200 -> encode_tags([<<128>>], [1], 1);
ms500 -> encode_tags([<<128>>], [2], 1);
ms1000 -> encode_tags([<<128>>], [3], 1);
ms2000 -> encode_tags([<<128>>], [4], 1);
ms4000 -> encode_tags([<<128>>], [5], 1);
ms8000 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute targetRAT-Type(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CellChangeOrder_targetRAT-Type'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellChangeOrder_targetRAT-Type
%%================================
'enc_CellChangeOrder_targetRAT-Type'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      geran ->
         'enc_CellChangeOrder_targetRAT-Type_geran'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CellChangeOrder_targetRAT-Type_geran
%%================================
'enc_CellChangeOrder_targetRAT-Type_geran'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute physCellId(1)   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PhysCellIdGERAN'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqGERAN'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute networkControlOrder(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(2, Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute systemInformation(4)   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SI-OrPSI-GERAN'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellChangeOrder_targetRAT-Type_geran'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute physCellId(1)   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PhysCellIdGERAN'(V1, [131072]),

%%-------------------------------------------------
%% attribute carrierFreq(2)   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CarrierFreqGERAN'(V2, [131073]),

%%-------------------------------------------------
%% attribute networkControlOrder(3) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_native_bit_string(V3, []),
C1 = bit_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute systemInformation(4)   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SI-OrPSI-GERAN'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'CellChangeOrder_targetRAT-Type_geran', Term1, Term2, Term3, Term4}.

'dec_CellChangeOrder_targetRAT-Type'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'geran'
    {131072, V1} -> 
        {geran, 'dec_CellChangeOrder_targetRAT-Type_geran'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


'dec_CellChangeOrder'(Tlv) ->
   'dec_CellChangeOrder'(Tlv, [16]).

'dec_CellChangeOrder'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute t304(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ms100;
1 -> ms200;
2 -> ms500;
3 -> ms1000;
4 -> ms2000;
5 -> ms4000;
6 -> ms8000;
7 -> spare1;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute targetRAT-Type(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CellChangeOrder_targetRAT-Type'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CellChangeOrder', Term1, Term2}.



%%================================
%%  Handover
%%================================
'enc_Handover'(Val) ->
    'enc_Handover'(Val, [<<48>>]).

'enc_Handover'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute targetRAT-Type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
utra -> encode_tags([<<128>>], [0], 1);
geran -> encode_tags([<<128>>], [1], 1);
'cdma2000-1XRTT' -> encode_tags([<<128>>], [2], 1);
'cdma2000-HRPD' -> encode_tags([<<128>>], [3], 1);
spare4 -> encode_tags([<<128>>], [4], 1);
spare3 -> encode_tags([<<128>>], [5], 1);
spare2 -> encode_tags([<<128>>], [6], 1);
spare1 -> encode_tags([<<128>>], [7], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute targetRAT-MessageContainer(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nas-SecurityParamFromEUTRA(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute systemInformation(4)   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SI-OrPSI-GERAN'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_Handover'(Tlv) ->
   'dec_Handover'(Tlv, [16]).

'dec_Handover'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute targetRAT-Type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> utra;
1 -> geran;
2 -> 'cdma2000-1XRTT';
3 -> 'cdma2000-HRPD';
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute targetRAT-MessageContainer(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

%%-------------------------------------------------
%% attribute nas-SecurityParamFromEUTRA(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {begin
Val1 = decode_octet_string(V3, []),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute systemInformation(4)   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SI-OrPSI-GERAN'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'Handover', Term1, Term2, Term3, Term4}.



%%================================
%%  MobilityFromEUTRACommand-r8-IEs
%%================================
'enc_MobilityFromEUTRACommand-r8-IEs'(Val) ->
    'enc_MobilityFromEUTRACommand-r8-IEs'(Val, [<<48>>]).

'enc_MobilityFromEUTRACommand-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute cs-FallbackIndicator(1) with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_boolean(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute purpose(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MobilityFromEUTRACommand-r8-IEs_purpose
%%================================
'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      handover ->
         'enc_Handover'(element(2,Val), [<<160>>]);
      cellChangeOrder ->
         'enc_CellChangeOrder'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'handover'
    {131072, V1} -> 
        {handover, 'dec_Handover'(V1, [])};


%% 'cellChangeOrder'
    {131073, V1} -> 
        {cellChangeOrder, 'dec_CellChangeOrder'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension
%%================================
'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'}.



'dec_MobilityFromEUTRACommand-r8-IEs'(Tlv) ->
   'dec_MobilityFromEUTRACommand-r8-IEs'(Tlv, [16]).

'dec_MobilityFromEUTRACommand-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cs-FallbackIndicator(1) with type BOOLEAN
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_boolean(V1, [131072]),

%%-------------------------------------------------
%% attribute purpose(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(V2, [131073]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'MobilityFromEUTRACommand-r8-IEs', Term1, Term2, Term3}.



%%================================
%%  MobilityFromEUTRACommand
%%================================
'enc_MobilityFromEUTRACommand'(Val) ->
    'enc_MobilityFromEUTRACommand'(Val, [<<48>>]).

'enc_MobilityFromEUTRACommand'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MobilityFromEUTRACommand_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MobilityFromEUTRACommand_criticalExtensions
%%================================
'enc_MobilityFromEUTRACommand_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MobilityFromEUTRACommand_criticalExtensions_c1
%%================================
'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'mobilityFromEUTRACommand-r8' ->
         'enc_MobilityFromEUTRACommand-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MobilityFromEUTRACommand_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'mobilityFromEUTRACommand-r8'
    {131072, V1} -> 
        {'mobilityFromEUTRACommand-r8', 'dec_MobilityFromEUTRACommand-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'}.

'dec_MobilityFromEUTRACommand_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_MobilityFromEUTRACommand_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MobilityFromEUTRACommand'(Tlv) ->
   'dec_MobilityFromEUTRACommand'(Tlv, [16]).

'dec_MobilityFromEUTRACommand'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_MobilityFromEUTRACommand_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MobilityFromEUTRACommand', Term1, Term2}.



%%================================
%%  MeasurementReport-r8-IEs
%%================================
'enc_MeasurementReport-r8-IEs'(Val) ->
    'enc_MeasurementReport-r8-IEs'(Val, [<<48>>]).

'enc_MeasurementReport-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute measResults(1)   External EUTRA-RRC:MeasResults
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasResults'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasurementReport-r8-IEs_nonCriticalExtension
%%================================
'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'MeasurementReport-r8-IEs_nonCriticalExtension'}.



'dec_MeasurementReport-r8-IEs'(Tlv) ->
   'dec_MeasurementReport-r8-IEs'(Tlv, [16]).

'dec_MeasurementReport-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute measResults(1)   External EUTRA-RRC:MeasResults
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MeasResults'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'MeasurementReport-r8-IEs', Term1, Term2}.



%%================================
%%  MeasurementReport
%%================================
'enc_MeasurementReport'(Val) ->
    'enc_MeasurementReport'(Val, [<<48>>]).

'enc_MeasurementReport'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasurementReport_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  MeasurementReport_criticalExtensions
%%================================
'enc_MeasurementReport_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_MeasurementReport_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  MeasurementReport_criticalExtensions_c1
%%================================
'enc_MeasurementReport_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'measurementReport-r8' ->
         'enc_MeasurementReport-r8-IEs'(element(2,Val), [<<160>>]);
      spare7 ->
         encode_null(element(2,Val), [<<129>>]);
      spare6 ->
         encode_null(element(2,Val), [<<130>>]);
      spare5 ->
         encode_null(element(2,Val), [<<131>>]);
      spare4 ->
         encode_null(element(2,Val), [<<132>>]);
      spare3 ->
         encode_null(element(2,Val), [<<133>>]);
      spare2 ->
         encode_null(element(2,Val), [<<134>>]);
      spare1 ->
         encode_null(element(2,Val), [<<135>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_MeasurementReport_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'measurementReport-r8'
    {131072, V1} -> 
        {'measurementReport-r8', 'dec_MeasurementReport-r8-IEs'(V1, [])};


%% 'spare7'
    {131073, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131074, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131075, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131076, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131077, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131078, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131079, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  MeasurementReport_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'MeasurementReport_criticalExtensions_criticalExtensionsFuture'}.

'dec_MeasurementReport_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_MeasurementReport_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_MeasurementReport'(Tlv) ->
   'dec_MeasurementReport'(Tlv, [16]).

'dec_MeasurementReport'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_MeasurementReport_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'MeasurementReport', Term1}.



%%================================
%%  MasterInformationBlock
%%================================
'enc_MasterInformationBlock'(Val) ->
    'enc_MasterInformationBlock'(Val, [<<48>>]).

'enc_MasterInformationBlock'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute dl-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
n6 -> encode_tags([<<128>>], [0], 1);
n15 -> encode_tags([<<128>>], [1], 1);
n25 -> encode_tags([<<128>>], [2], 1);
n50 -> encode_tags([<<128>>], [3], 1);
n75 -> encode_tags([<<128>>], [4], 1);
n100 -> encode_tags([<<128>>], [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute phich-Config(2)   External EUTRA-RRC:PHICH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PHICH-Config'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute systemFrameNumber(3) with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_unnamed_bit_string(8, Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute spare(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_unnamed_bit_string(10, Cindex4, [<<131>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_MasterInformationBlock'(Tlv) ->
   'dec_MasterInformationBlock'(Tlv, [16]).

'dec_MasterInformationBlock'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dl-Bandwidth(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute phich-Config(2)   External EUTRA-RRC:PHICH-Config
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_PHICH-Config'(V2, [131073]),

%%-------------------------------------------------
%% attribute systemFrameNumber(3) with type BIT STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_native_bit_string(V3, [131074]),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute spare(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val2 = decode_native_bit_string(V4, [131075]),
C2 = bit_size(Val2),
if C2 =:= 10 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'MasterInformationBlock', Term1, Term2, Term3, Term4}.



%%================================
%%  HandoverFromEUTRAPreparationRequest-r8-IEs
%%================================
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Val) ->
    'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Val, [<<48>>]).

'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
type1XRTT -> encode_tags([<<128>>], [0], 1);
typeHRPD -> encode_tags([<<128>>], [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute rand(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(32, Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute mobilityParameters(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_restricted_string(Cindex3, [<<130>>])
       end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension
%%================================
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'}.



'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Tlv) ->
   'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Tlv, [16]).

'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cdma2000-Type(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> type1XRTT;
1 -> typeHRPD;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute rand(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute mobilityParameters(3) with type OCTET STRING OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {decode_octet_string(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute nonCriticalExtension(4) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv5}}}) % extra fields not allowed
end,
   {'HandoverFromEUTRAPreparationRequest-r8-IEs', Term1, Term2, Term3, Term4}.



%%================================
%%  HandoverFromEUTRAPreparationRequest
%%================================
'enc_HandoverFromEUTRAPreparationRequest'(Val) ->
    'enc_HandoverFromEUTRAPreparationRequest'(Val, [<<48>>]).

'enc_HandoverFromEUTRAPreparationRequest'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions
%%================================
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions_c1
%%================================
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'handoverFromEUTRAPreparationRequest-r8' ->
         'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'handoverFromEUTRAPreparationRequest-r8'
    {131072, V1} -> 
        {'handoverFromEUTRAPreparationRequest-r8', 'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'}.

'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_HandoverFromEUTRAPreparationRequest'(Tlv) ->
   'dec_HandoverFromEUTRAPreparationRequest'(Tlv, [16]).

'dec_HandoverFromEUTRAPreparationRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'HandoverFromEUTRAPreparationRequest', Term1, Term2}.



%%================================
%%  DLInformationTransfer-r8-IEs
%%================================
'enc_DLInformationTransfer-r8-IEs'(Val) ->
    'enc_DLInformationTransfer-r8-IEs'(Val, [<<48>>]).

'enc_DLInformationTransfer-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute dedicatedInfoType(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DLInformationTransfer-r8-IEs_dedicatedInfoType
%%================================
'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      dedicatedInfoNAS ->
         encode_restricted_string(element(2,Val), [<<128>>]);
      'dedicatedInfoCDMA2000-1XRTT' ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      'dedicatedInfoCDMA2000-HRPD' ->
         encode_restricted_string(element(2,Val), [<<130>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'dedicatedInfoNAS'
    {131072, V1} -> 
        {dedicatedInfoNAS, decode_octet_string(V1, [])};


%% 'dedicatedInfoCDMA2000-1XRTT'
    {131073, V1} -> 
        {'dedicatedInfoCDMA2000-1XRTT', decode_octet_string(V1, [])};


%% 'dedicatedInfoCDMA2000-HRPD'
    {131074, V1} -> 
        {'dedicatedInfoCDMA2000-HRPD', decode_octet_string(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  DLInformationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'DLInformationTransfer-r8-IEs_nonCriticalExtension'}.



'dec_DLInformationTransfer-r8-IEs'(Tlv) ->
   'dec_DLInformationTransfer-r8-IEs'(Tlv, [16]).

'dec_DLInformationTransfer-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dedicatedInfoType(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DLInformationTransfer-r8-IEs', Term1, Term2}.



%%================================
%%  DLInformationTransfer
%%================================
'enc_DLInformationTransfer'(Val) ->
    'enc_DLInformationTransfer'(Val, [<<48>>]).

'enc_DLInformationTransfer'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DLInformationTransfer_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  DLInformationTransfer_criticalExtensions
%%================================
'enc_DLInformationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DLInformationTransfer_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  DLInformationTransfer_criticalExtensions_c1
%%================================
'enc_DLInformationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'dlInformationTransfer-r8' ->
         'enc_DLInformationTransfer-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_DLInformationTransfer_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'dlInformationTransfer-r8'
    {131072, V1} -> 
        {'dlInformationTransfer-r8', 'dec_DLInformationTransfer-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  DLInformationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'}.

'dec_DLInformationTransfer_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_DLInformationTransfer_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_DLInformationTransfer'(Tlv) ->
   'dec_DLInformationTransfer'(Tlv, [16]).

'dec_DLInformationTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_DLInformationTransfer_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'DLInformationTransfer', Term1, Term2}.



%%================================
%%  CSFBParametersResponseCDMA2000-r8-IEs
%%================================
'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Val) ->
    'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Val, [<<48>>]).

'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute rand(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(32, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute mobilityParameters(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension
%%================================
'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'}.



'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Tlv) ->
   'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Tlv, [16]).

'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rand(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute mobilityParameters(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_octet_string(V2, [131073]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(3) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'CSFBParametersResponseCDMA2000-r8-IEs', Term1, Term2, Term3}.



%%================================
%%  CSFBParametersResponseCDMA2000
%%================================
'enc_CSFBParametersResponseCDMA2000'(Val) ->
    'enc_CSFBParametersResponseCDMA2000'(Val, [<<48>>]).

'enc_CSFBParametersResponseCDMA2000'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersResponseCDMA2000_criticalExtensions
%%================================
'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'csfbParametersResponseCDMA2000-r8' ->
         'enc_CSFBParametersResponseCDMA2000-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'}.

'dec_CSFBParametersResponseCDMA2000_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'csfbParametersResponseCDMA2000-r8'
    {131072, V1} -> 
        {'csfbParametersResponseCDMA2000-r8', 'dec_CSFBParametersResponseCDMA2000-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_CSFBParametersResponseCDMA2000'(Tlv) ->
   'dec_CSFBParametersResponseCDMA2000'(Tlv, [16]).

'dec_CSFBParametersResponseCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CSFBParametersResponseCDMA2000_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CSFBParametersResponseCDMA2000', Term1, Term2}.



%%================================
%%  CSFBParametersRequestCDMA2000-r8-IEs
%%================================
'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Val) ->
    'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Val, [<<48>>]).

'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Cindex1, [<<160>>])
       end,

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension
%%================================
'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'}.



'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Tlv) ->
   'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Tlv, [16]).

'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute nonCriticalExtension(1) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(V1, []), TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CSFBParametersRequestCDMA2000-r8-IEs', Term1}.



%%================================
%%  CSFBParametersRequestCDMA2000
%%================================
'enc_CSFBParametersRequestCDMA2000'(Val) ->
    'enc_CSFBParametersRequestCDMA2000'(Val, [<<48>>]).

'enc_CSFBParametersRequestCDMA2000'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersRequestCDMA2000_criticalExtensions
%%================================
'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'csfbParametersRequestCDMA2000-r8' ->
         'enc_CSFBParametersRequestCDMA2000-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'}.

'dec_CSFBParametersRequestCDMA2000_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'csfbParametersRequestCDMA2000-r8'
    {131072, V1} -> 
        {'csfbParametersRequestCDMA2000-r8', 'dec_CSFBParametersRequestCDMA2000-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_CSFBParametersRequestCDMA2000'(Tlv) ->
   'dec_CSFBParametersRequestCDMA2000'(Tlv, [16]).

'dec_CSFBParametersRequestCDMA2000'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute criticalExtensions(1) with type CHOICE
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_CSFBParametersRequestCDMA2000_criticalExtensions'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'CSFBParametersRequestCDMA2000', Term1}.



%%================================
%%  DRB-CountInfo
%%================================
'enc_DRB-CountInfo'(Val) ->
    'enc_DRB-CountInfo'(Val, [<<48>>]).

'enc_DRB-CountInfo'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute drb-Identity(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute count-Uplink(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute count-Downlink(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DRB-CountInfo'(Tlv) ->
   'dec_DRB-CountInfo'(Tlv, [16]).

'dec_DRB-CountInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute drb-Identity(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute count-Uplink(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 4294967295 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute count-Downlink(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 4294967295 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'DRB-CountInfo', Term1, Term2, Term3}.



%%================================
%%  DRB-CountInfoList
%%================================
'enc_DRB-CountInfoList'(Val) ->
    'enc_DRB-CountInfoList'(Val, [<<48>>]).

'enc_DRB-CountInfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-CountInfoList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DRB-CountInfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-CountInfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-CountInfo'(H, [<<48>>]),
   'enc_DRB-CountInfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-CountInfoList'(Tlv) ->
   'dec_DRB-CountInfoList'(Tlv, [16]).

'dec_DRB-CountInfoList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DRB-CountInfo'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CounterCheckResponse-r8-IEs
%%================================
'enc_CounterCheckResponse-r8-IEs'(Val) ->
    'enc_CounterCheckResponse-r8-IEs'(Val, [<<48>>]).

'enc_CounterCheckResponse-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute drb-CountInfoList(1)   External EUTRA-RRC:DRB-CountInfoList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DRB-CountInfoList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CounterCheckResponse-r8-IEs_nonCriticalExtension
%%================================
'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CounterCheckResponse-r8-IEs_nonCriticalExtension'}.



'dec_CounterCheckResponse-r8-IEs'(Tlv) ->
   'dec_CounterCheckResponse-r8-IEs'(Tlv, [16]).

'dec_CounterCheckResponse-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute drb-CountInfoList(1)   External EUTRA-RRC:DRB-CountInfoList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DRB-CountInfoList'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CounterCheckResponse-r8-IEs', Term1, Term2}.



%%================================
%%  CounterCheckResponse
%%================================
'enc_CounterCheckResponse'(Val) ->
    'enc_CounterCheckResponse'(Val, [<<48>>]).

'enc_CounterCheckResponse'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CounterCheckResponse_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CounterCheckResponse_criticalExtensions
%%================================
'enc_CounterCheckResponse_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'counterCheckResponse-r8' ->
         'enc_CounterCheckResponse-r8-IEs'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CounterCheckResponse_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'}.

'dec_CounterCheckResponse_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'counterCheckResponse-r8'
    {131072, V1} -> 
        {'counterCheckResponse-r8', 'dec_CounterCheckResponse-r8-IEs'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_CounterCheckResponse'(Tlv) ->
   'dec_CounterCheckResponse'(Tlv, [16]).

'dec_CounterCheckResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CounterCheckResponse_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CounterCheckResponse', Term1, Term2}.



%%================================
%%  DRB-CountMSB-Info
%%================================
'enc_DRB-CountMSB-Info'(Val) ->
    'enc_DRB-CountMSB-Info'(Val, [<<48>>]).

'enc_DRB-CountMSB-Info'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute drb-Identity(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute countMSB-Uplink(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute countMSB-Downlink(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DRB-CountMSB-Info'(Tlv) ->
   'dec_DRB-CountMSB-Info'(Tlv, [16]).

'dec_DRB-CountMSB-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute drb-Identity(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 1 =< Val1, Val1 =< 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute countMSB-Uplink(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 33554431 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute countMSB-Downlink(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 33554431 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'DRB-CountMSB-Info', Term1, Term2, Term3}.



%%================================
%%  DRB-CountMSB-InfoList
%%================================
'enc_DRB-CountMSB-InfoList'(Val) ->
    'enc_DRB-CountMSB-InfoList'(Val, [<<48>>]).

'enc_DRB-CountMSB-InfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-CountMSB-InfoList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_DRB-CountMSB-InfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-CountMSB-InfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-CountMSB-Info'(H, [<<48>>]),
   'enc_DRB-CountMSB-InfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-CountMSB-InfoList'(Tlv) ->
   'dec_DRB-CountMSB-InfoList'(Tlv, [16]).

'dec_DRB-CountMSB-InfoList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_DRB-CountMSB-Info'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CounterCheck-r8-IEs
%%================================
'enc_CounterCheck-r8-IEs'(Val) ->
    'enc_CounterCheck-r8-IEs'(Val, [<<48>>]).

'enc_CounterCheck-r8-IEs'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute drb-CountMSB-InfoList(1)   External EUTRA-RRC:DRB-CountMSB-InfoList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DRB-CountMSB-InfoList'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CounterCheck-r8-IEs_nonCriticalExtension'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CounterCheck-r8-IEs_nonCriticalExtension
%%================================
'enc_CounterCheck-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CounterCheck-r8-IEs_nonCriticalExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CounterCheck-r8-IEs_nonCriticalExtension'}.



'dec_CounterCheck-r8-IEs'(Tlv) ->
   'dec_CounterCheck-r8-IEs'(Tlv, [16]).

'dec_CounterCheck-r8-IEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute drb-CountMSB-InfoList(1)   External EUTRA-RRC:DRB-CountMSB-InfoList
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DRB-CountMSB-InfoList'(V1, [131072]),

%%-------------------------------------------------
%% attribute nonCriticalExtension(2) with type SEQUENCE OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CounterCheck-r8-IEs_nonCriticalExtension'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CounterCheck-r8-IEs', Term1, Term2}.



%%================================
%%  CounterCheck
%%================================
'enc_CounterCheck'(Val) ->
    'enc_CounterCheck'(Val, [<<48>>]).

'enc_CounterCheck'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CounterCheck_criticalExtensions'(Cindex2, [<<161>>]),

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CounterCheck_criticalExtensions
%%================================
'enc_CounterCheck_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_CounterCheck_criticalExtensions_c1'(element(2,Val), [<<160>>]);
      criticalExtensionsFuture ->
         'enc_CounterCheck_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  CounterCheck_criticalExtensions_c1
%%================================
'enc_CounterCheck_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'counterCheck-r8' ->
         'enc_CounterCheck-r8-IEs'(element(2,Val), [<<160>>]);
      spare3 ->
         encode_null(element(2,Val), [<<129>>]);
      spare2 ->
         encode_null(element(2,Val), [<<130>>]);
      spare1 ->
         encode_null(element(2,Val), [<<131>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_CounterCheck_criticalExtensions_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'counterCheck-r8'
    {131072, V1} -> 
        {'counterCheck-r8', 'dec_CounterCheck-r8-IEs'(V1, [])};


%% 'spare3'
    {131073, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131074, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131075, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  CounterCheck_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'CounterCheck_criticalExtensions_criticalExtensionsFuture'}.

'dec_CounterCheck_criticalExtensions'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_CounterCheck_criticalExtensions_c1'(V1, [])};


%% 'criticalExtensionsFuture'
    {131073, V1} -> 
        {criticalExtensionsFuture, 'dec_CounterCheck_criticalExtensions_criticalExtensionsFuture'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


'dec_CounterCheck'(Tlv) ->
   'dec_CounterCheck'(Tlv, [16]).

'dec_CounterCheck'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rrc-TransactionIdentifier(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticalExtensions(2) with type CHOICE
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CounterCheck_criticalExtensions'(V2, [131073]),

case Tlv3 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv3}}}) % extra fields not allowed
end,
   {'CounterCheck', Term1, Term2}.



%%================================
%%  UL-DCCH-MessageType
%%================================
'enc_UL-DCCH-MessageType'(Val) ->
    'enc_UL-DCCH-MessageType'(Val, []).

'enc_UL-DCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UL-DCCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_UL-DCCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  UL-DCCH-MessageType_c1
%%================================
'enc_UL-DCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      csfbParametersRequestCDMA2000 ->
         'enc_CSFBParametersRequestCDMA2000'(element(2,Val), [<<160>>]);
      measurementReport ->
         'enc_MeasurementReport'(element(2,Val), [<<161>>]);
      rrcConnectionReconfigurationComplete ->
         'enc_RRCConnectionReconfigurationComplete'(element(2,Val), [<<162>>]);
      rrcConnectionReestablishmentComplete ->
         'enc_RRCConnectionReestablishmentComplete'(element(2,Val), [<<163>>]);
      rrcConnectionSetupComplete ->
         'enc_RRCConnectionSetupComplete'(element(2,Val), [<<164>>]);
      securityModeComplete ->
         'enc_SecurityModeComplete'(element(2,Val), [<<165>>]);
      securityModeFailure ->
         'enc_SecurityModeFailure'(element(2,Val), [<<166>>]);
      ueCapabilityInformation ->
         'enc_UECapabilityInformation'(element(2,Val), [<<167>>]);
      ulHandoverPreparationTransfer ->
         'enc_ULHandoverPreparationTransfer'(element(2,Val), [<<168>>]);
      ulInformationTransfer ->
         'enc_ULInformationTransfer'(element(2,Val), [<<169>>]);
      counterCheckResponse ->
         'enc_CounterCheckResponse'(element(2,Val), [<<170>>]);
      spare5 ->
         encode_null(element(2,Val), [<<139>>]);
      spare4 ->
         encode_null(element(2,Val), [<<140>>]);
      spare3 ->
         encode_null(element(2,Val), [<<141>>]);
      spare2 ->
         encode_null(element(2,Val), [<<142>>]);
      spare1 ->
         encode_null(element(2,Val), [<<143>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_UL-DCCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'csfbParametersRequestCDMA2000'
    {131072, V1} -> 
        {csfbParametersRequestCDMA2000, 'dec_CSFBParametersRequestCDMA2000'(V1, [])};


%% 'measurementReport'
    {131073, V1} -> 
        {measurementReport, 'dec_MeasurementReport'(V1, [])};


%% 'rrcConnectionReconfigurationComplete'
    {131074, V1} -> 
        {rrcConnectionReconfigurationComplete, 'dec_RRCConnectionReconfigurationComplete'(V1, [])};


%% 'rrcConnectionReestablishmentComplete'
    {131075, V1} -> 
        {rrcConnectionReestablishmentComplete, 'dec_RRCConnectionReestablishmentComplete'(V1, [])};


%% 'rrcConnectionSetupComplete'
    {131076, V1} -> 
        {rrcConnectionSetupComplete, 'dec_RRCConnectionSetupComplete'(V1, [])};


%% 'securityModeComplete'
    {131077, V1} -> 
        {securityModeComplete, 'dec_SecurityModeComplete'(V1, [])};


%% 'securityModeFailure'
    {131078, V1} -> 
        {securityModeFailure, 'dec_SecurityModeFailure'(V1, [])};


%% 'ueCapabilityInformation'
    {131079, V1} -> 
        {ueCapabilityInformation, 'dec_UECapabilityInformation'(V1, [])};


%% 'ulHandoverPreparationTransfer'
    {131080, V1} -> 
        {ulHandoverPreparationTransfer, 'dec_ULHandoverPreparationTransfer'(V1, [])};


%% 'ulInformationTransfer'
    {131081, V1} -> 
        {ulInformationTransfer, 'dec_ULInformationTransfer'(V1, [])};


%% 'counterCheckResponse'
    {131082, V1} -> 
        {counterCheckResponse, 'dec_CounterCheckResponse'(V1, [])};


%% 'spare5'
    {131083, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131084, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131085, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131086, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131087, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  UL-DCCH-MessageType_messageClassExtension
%%================================
'enc_UL-DCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UL-DCCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UL-DCCH-MessageType_messageClassExtension'}.



'dec_UL-DCCH-MessageType'(Tlv) ->
   'dec_UL-DCCH-MessageType'(Tlv, []).

'dec_UL-DCCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_UL-DCCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_UL-DCCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  UL-DCCH-Message
%%================================
'enc_UL-DCCH-Message'(Val) ->
    'enc_UL-DCCH-Message'(Val, [<<48>>]).

'enc_UL-DCCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:UL-DCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-DCCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UL-DCCH-Message'(Tlv) ->
   'dec_UL-DCCH-Message'(Tlv, [16]).

'dec_UL-DCCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:UL-DCCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UL-DCCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'UL-DCCH-Message', Term1}.



%%================================
%%  UL-CCCH-MessageType
%%================================
'enc_UL-CCCH-MessageType'(Val) ->
    'enc_UL-CCCH-MessageType'(Val, []).

'enc_UL-CCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UL-CCCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_UL-CCCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  UL-CCCH-MessageType_c1
%%================================
'enc_UL-CCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      rrcConnectionReestablishmentRequest ->
         'enc_RRCConnectionReestablishmentRequest'(element(2,Val), [<<160>>]);
      rrcConnectionRequest ->
         'enc_RRCConnectionRequest'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_UL-CCCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishmentRequest'
    {131072, V1} -> 
        {rrcConnectionReestablishmentRequest, 'dec_RRCConnectionReestablishmentRequest'(V1, [])};


%% 'rrcConnectionRequest'
    {131073, V1} -> 
        {rrcConnectionRequest, 'dec_RRCConnectionRequest'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  UL-CCCH-MessageType_messageClassExtension
%%================================
'enc_UL-CCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UL-CCCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'UL-CCCH-MessageType_messageClassExtension'}.



'dec_UL-CCCH-MessageType'(Tlv) ->
   'dec_UL-CCCH-MessageType'(Tlv, []).

'dec_UL-CCCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_UL-CCCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_UL-CCCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  UL-CCCH-Message
%%================================
'enc_UL-CCCH-Message'(Val) ->
    'enc_UL-CCCH-Message'(Val, [<<48>>]).

'enc_UL-CCCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:UL-CCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-CCCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UL-CCCH-Message'(Tlv) ->
   'dec_UL-CCCH-Message'(Tlv, [16]).

'dec_UL-CCCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:UL-CCCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UL-CCCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'UL-CCCH-Message', Term1}.



%%================================
%%  DL-DCCH-MessageType
%%================================
'enc_DL-DCCH-MessageType'(Val) ->
    'enc_DL-DCCH-MessageType'(Val, []).

'enc_DL-DCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DL-DCCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_DL-DCCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  DL-DCCH-MessageType_c1
%%================================
'enc_DL-DCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      csfbParametersResponseCDMA2000 ->
         'enc_CSFBParametersResponseCDMA2000'(element(2,Val), [<<160>>]);
      dlInformationTransfer ->
         'enc_DLInformationTransfer'(element(2,Val), [<<161>>]);
      handoverFromEUTRAPreparationRequest ->
         'enc_HandoverFromEUTRAPreparationRequest'(element(2,Val), [<<162>>]);
      mobilityFromEUTRACommand ->
         'enc_MobilityFromEUTRACommand'(element(2,Val), [<<163>>]);
      rrcConnectionReconfiguration ->
         'enc_RRCConnectionReconfiguration'(element(2,Val), [<<164>>]);
      rrcConnectionRelease ->
         'enc_RRCConnectionRelease'(element(2,Val), [<<165>>]);
      securityModeCommand ->
         'enc_SecurityModeCommand'(element(2,Val), [<<166>>]);
      ueCapabilityEnquiry ->
         'enc_UECapabilityEnquiry'(element(2,Val), [<<167>>]);
      counterCheck ->
         'enc_CounterCheck'(element(2,Val), [<<168>>]);
      spare7 ->
         encode_null(element(2,Val), [<<137>>]);
      spare6 ->
         encode_null(element(2,Val), [<<138>>]);
      spare5 ->
         encode_null(element(2,Val), [<<139>>]);
      spare4 ->
         encode_null(element(2,Val), [<<140>>]);
      spare3 ->
         encode_null(element(2,Val), [<<141>>]);
      spare2 ->
         encode_null(element(2,Val), [<<142>>]);
      spare1 ->
         encode_null(element(2,Val), [<<143>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_DL-DCCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'csfbParametersResponseCDMA2000'
    {131072, V1} -> 
        {csfbParametersResponseCDMA2000, 'dec_CSFBParametersResponseCDMA2000'(V1, [])};


%% 'dlInformationTransfer'
    {131073, V1} -> 
        {dlInformationTransfer, 'dec_DLInformationTransfer'(V1, [])};


%% 'handoverFromEUTRAPreparationRequest'
    {131074, V1} -> 
        {handoverFromEUTRAPreparationRequest, 'dec_HandoverFromEUTRAPreparationRequest'(V1, [])};


%% 'mobilityFromEUTRACommand'
    {131075, V1} -> 
        {mobilityFromEUTRACommand, 'dec_MobilityFromEUTRACommand'(V1, [])};


%% 'rrcConnectionReconfiguration'
    {131076, V1} -> 
        {rrcConnectionReconfiguration, 'dec_RRCConnectionReconfiguration'(V1, [])};


%% 'rrcConnectionRelease'
    {131077, V1} -> 
        {rrcConnectionRelease, 'dec_RRCConnectionRelease'(V1, [])};


%% 'securityModeCommand'
    {131078, V1} -> 
        {securityModeCommand, 'dec_SecurityModeCommand'(V1, [])};


%% 'ueCapabilityEnquiry'
    {131079, V1} -> 
        {ueCapabilityEnquiry, 'dec_UECapabilityEnquiry'(V1, [])};


%% 'counterCheck'
    {131080, V1} -> 
        {counterCheck, 'dec_CounterCheck'(V1, [])};


%% 'spare7'
    {131081, V1} -> 
        {spare7, decode_null(V1, [])};


%% 'spare6'
    {131082, V1} -> 
        {spare6, decode_null(V1, [])};


%% 'spare5'
    {131083, V1} -> 
        {spare5, decode_null(V1, [])};


%% 'spare4'
    {131084, V1} -> 
        {spare4, decode_null(V1, [])};


%% 'spare3'
    {131085, V1} -> 
        {spare3, decode_null(V1, [])};


%% 'spare2'
    {131086, V1} -> 
        {spare2, decode_null(V1, [])};


%% 'spare1'
    {131087, V1} -> 
        {spare1, decode_null(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  DL-DCCH-MessageType_messageClassExtension
%%================================
'enc_DL-DCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DL-DCCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'DL-DCCH-MessageType_messageClassExtension'}.



'dec_DL-DCCH-MessageType'(Tlv) ->
   'dec_DL-DCCH-MessageType'(Tlv, []).

'dec_DL-DCCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_DL-DCCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_DL-DCCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DL-DCCH-Message
%%================================
'enc_DL-DCCH-Message'(Val) ->
    'enc_DL-DCCH-Message'(Val, [<<48>>]).

'enc_DL-DCCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:DL-DCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-DCCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DL-DCCH-Message'(Tlv) ->
   'dec_DL-DCCH-Message'(Tlv, [16]).

'dec_DL-DCCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:DL-DCCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DL-DCCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'DL-DCCH-Message', Term1}.



%%================================
%%  DL-CCCH-MessageType
%%================================
'enc_DL-CCCH-MessageType'(Val) ->
    'enc_DL-CCCH-MessageType'(Val, []).

'enc_DL-CCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DL-CCCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_DL-CCCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  DL-CCCH-MessageType_c1
%%================================
'enc_DL-CCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      rrcConnectionReestablishment ->
         'enc_RRCConnectionReestablishment'(element(2,Val), [<<160>>]);
      rrcConnectionReestablishmentReject ->
         'enc_RRCConnectionReestablishmentReject'(element(2,Val), [<<161>>]);
      rrcConnectionReject ->
         'enc_RRCConnectionReject'(element(2,Val), [<<162>>]);
      rrcConnectionSetup ->
         'enc_RRCConnectionSetup'(element(2,Val), [<<163>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_DL-CCCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'rrcConnectionReestablishment'
    {131072, V1} -> 
        {rrcConnectionReestablishment, 'dec_RRCConnectionReestablishment'(V1, [])};


%% 'rrcConnectionReestablishmentReject'
    {131073, V1} -> 
        {rrcConnectionReestablishmentReject, 'dec_RRCConnectionReestablishmentReject'(V1, [])};


%% 'rrcConnectionReject'
    {131074, V1} -> 
        {rrcConnectionReject, 'dec_RRCConnectionReject'(V1, [])};


%% 'rrcConnectionSetup'
    {131075, V1} -> 
        {rrcConnectionSetup, 'dec_RRCConnectionSetup'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  DL-CCCH-MessageType_messageClassExtension
%%================================
'enc_DL-CCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_DL-CCCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'DL-CCCH-MessageType_messageClassExtension'}.



'dec_DL-CCCH-MessageType'(Tlv) ->
   'dec_DL-CCCH-MessageType'(Tlv, []).

'dec_DL-CCCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_DL-CCCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_DL-CCCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  DL-CCCH-Message
%%================================
'enc_DL-CCCH-Message'(Val) ->
    'enc_DL-CCCH-Message'(Val, [<<48>>]).

'enc_DL-CCCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:DL-CCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-CCCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_DL-CCCH-Message'(Tlv) ->
   'dec_DL-CCCH-Message'(Tlv, [16]).

'dec_DL-CCCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:DL-CCCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_DL-CCCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'DL-CCCH-Message', Term1}.



%%================================
%%  PCCH-MessageType
%%================================
'enc_PCCH-MessageType'(Val) ->
    'enc_PCCH-MessageType'(Val, []).

'enc_PCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_PCCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_PCCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  PCCH-MessageType_c1
%%================================
'enc_PCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      paging ->
         'enc_Paging'(element(2,Val), [<<160>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_PCCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'paging'
    {131072, V1} -> 
        {paging, 'dec_Paging'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  PCCH-MessageType_messageClassExtension
%%================================
'enc_PCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PCCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'PCCH-MessageType_messageClassExtension'}.



'dec_PCCH-MessageType'(Tlv) ->
   'dec_PCCH-MessageType'(Tlv, []).

'dec_PCCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_PCCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_PCCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  PCCH-Message
%%================================
'enc_PCCH-Message'(Val) ->
    'enc_PCCH-Message'(Val, [<<48>>]).

'enc_PCCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:PCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PCCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_PCCH-Message'(Tlv) ->
   'dec_PCCH-Message'(Tlv, [16]).

'dec_PCCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:PCCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PCCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'PCCH-Message', Term1}.



%%================================
%%  BCCH-DL-SCH-MessageType
%%================================
'enc_BCCH-DL-SCH-MessageType'(Val) ->
    'enc_BCCH-DL-SCH-MessageType'(Val, []).

'enc_BCCH-DL-SCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_BCCH-DL-SCH-MessageType_c1'(element(2,Val), [<<160>>]);
      messageClassExtension ->
         'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).





%%================================
%%  BCCH-DL-SCH-MessageType_c1
%%================================
'enc_BCCH-DL-SCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      systemInformation ->
         'enc_SystemInformation'(element(2,Val), [<<160>>]);
      systemInformationBlockType1 ->
         'enc_SystemInformationBlockType1'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).


'dec_BCCH-DL-SCH-MessageType_c1'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'systemInformation'
    {131072, V1} -> 
        {systemInformation, 'dec_SystemInformation'(V1, [])};


%% 'systemInformationBlockType1'
    {131073, V1} -> 
        {systemInformationBlockType1, 'dec_SystemInformationBlockType1'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.



%%================================
%%  BCCH-DL-SCH-MessageType_messageClassExtension
%%================================
'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(Val, TagIn) ->
   {_} = Val,

   BytesSoFar = [],
LenSoFar = 0,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
match_tags(Tlv, TagIn),


   {'BCCH-DL-SCH-MessageType_messageClassExtension'}.



'dec_BCCH-DL-SCH-MessageType'(Tlv) ->
   'dec_BCCH-DL-SCH-MessageType'(Tlv, []).

'dec_BCCH-DL-SCH-MessageType'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'c1'
    {131072, V1} -> 
        {c1, 'dec_BCCH-DL-SCH-MessageType_c1'(V1, [])};


%% 'messageClassExtension'
    {131073, V1} -> 
        {messageClassExtension, 'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  BCCH-DL-SCH-Message
%%================================
'enc_BCCH-DL-SCH-Message'(Val) ->
    'enc_BCCH-DL-SCH-Message'(Val, [<<48>>]).

'enc_BCCH-DL-SCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:BCCH-DL-SCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BCCH-DL-SCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BCCH-DL-SCH-Message'(Tlv) ->
   'dec_BCCH-DL-SCH-Message'(Tlv, [16]).

'dec_BCCH-DL-SCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:BCCH-DL-SCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_BCCH-DL-SCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'BCCH-DL-SCH-Message', Term1}.



%%================================
%%  BCCH-BCH-MessageType
%%================================
'enc_BCCH-BCH-MessageType'(Val) ->
    'enc_BCCH-BCH-MessageType'(Val, [<<48>>]).

'enc_BCCH-BCH-MessageType'(Val, TagIn) ->
   'enc_MasterInformationBlock'(Val, TagIn).


'dec_BCCH-BCH-MessageType'(Tlv) ->
   'dec_BCCH-BCH-MessageType'(Tlv, [16]).

'dec_BCCH-BCH-MessageType'(Tlv, TagIn) ->
'dec_MasterInformationBlock'(Tlv, TagIn).



%%================================
%%  BCCH-BCH-Message
%%================================
'enc_BCCH-BCH-Message'(Val) ->
    'enc_BCCH-BCH-Message'(Val, [<<48>>]).

'enc_BCCH-BCH-Message'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:BCCH-BCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BCCH-BCH-MessageType'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_BCCH-BCH-Message'(Tlv) ->
   'dec_BCCH-BCH-Message'(Tlv, [16]).

'dec_BCCH-BCH-Message'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute message(1)   External EUTRA-RRC:BCCH-BCH-MessageType
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_BCCH-BCH-MessageType'(V1, [131072]),

case Tlv2 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv2}}}) % extra fields not allowed
end,
   {'BCCH-BCH-Message', Term1}.

'maxUTRA-TDD-Carrier'() ->
16.

'maxUTRA-FDD-Carrier'() ->
16.

'maxSI-Message'() ->
32.

'maxSIB-1'() ->
31.

'maxSIB'() ->
32.

'maxReportConfigId'() ->
32.

'maxRAT-Capabilities'() ->
8.

'maxPNOffset'() ->
511.

'maxPageRec'() ->
16.

'maxObjectId'() ->
32.

'maxMeasId'() ->
32.

'maxMCS-1'() ->
16.

'maxMBSFN-Allocations'() ->
8.

'maxGNFG'() ->
16.

'maxGERAN-SI'() ->
10.

'maxFreq'() ->
8.

'maxEARFCN'() ->
65535.

'maxDRB'() ->
11.

'maxCellReport'() ->
8.

'maxCellMeas'() ->
32.

'maxCellIntra'() ->
16.

'maxCellInter'() ->
16.

'maxCellBlack'() ->
16.

'maxCDMA-BandClass'() ->
32.

'maxBands'() ->
64.


%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

decode_boolean(Tlv, TagIn) ->
    Val = match_tags(Tlv, TagIn),
    case Val of
        <<0:8>> ->
            false;
        <<_:8>> ->
            true;
        _ ->
            exit({error,{asn1,{decode_boolean,Val}}})
    end.

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

encode_boolean(true, TagIn) ->
    encode_tags(TagIn, [255], 1);
encode_boolean(false, TagIn) ->
    encode_tags(TagIn, [0], 1);
encode_boolean(X, _) ->
    exit({error,{asn1,{encode_boolean,X}}}).

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(MaxBits, Bits, TagIn) ->
    NumBits = bit_size(Bits),
    Unused = (8 - NumBits band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    if
        NumBits > MaxBits ->
            exit({error,
                  {asn1,
                   {bitstring_length,{{was,NumBits},{maximum,MaxBits}}}}});
        true ->
            encode_tags(TagIn, Bin, byte_size(Bin))
    end.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).
