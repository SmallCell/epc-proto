%% Generated by the Erlang ASN.1 UNALIGNED PER-compiler version, utilizing bit-syntax:2.0.4
%% Purpose: encoder and decoder to the types in mod EUTRA-RRC

-module('EUTRA-RRC').
-compile(nowarn_unused_vars).
-include("EUTRA-RRC.hrl").
-asn1_info([{vsn,'2.0.4'},
            {module,'EUTRA-RRC'},
            {options,[{i,"src"},
 {outdir,"src"},
 uper,verbose,compact_bit_string,noobj,
 {i,"."},
 {i,"protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0]).
-export([
'enc_UE-TimersAndConstants'/1,
'enc_SupportedBandList1XRTT'/1,
'enc_IRAT-ParametersCDMA2000-1XRTT'/1,
'enc_SupportedBandListHRPD'/1,
'enc_IRAT-ParametersCDMA2000-HRPD'/1,
'enc_SupportedBandGERAN'/1,
'enc_SupportedBandListGERAN'/1,
'enc_IRAT-ParametersGERAN'/1,
'enc_SupportedBandUTRA-TDD768'/1,
'enc_SupportedBandListUTRA-TDD768'/1,
'enc_IRAT-ParametersUTRA-TDD768'/1,
'enc_SupportedBandUTRA-TDD384'/1,
'enc_SupportedBandListUTRA-TDD384'/1,
'enc_IRAT-ParametersUTRA-TDD384'/1,
'enc_SupportedBandUTRA-TDD128'/1,
'enc_SupportedBandListUTRA-TDD128'/1,
'enc_IRAT-ParametersUTRA-TDD128'/1,
'enc_SupportedBandUTRA-FDD'/1,
'enc_SupportedBandListUTRA-FDD'/1,
'enc_IRAT-ParametersUTRA-FDD'/1,
'enc_InterRAT-BandInfo'/1,
'enc_InterRAT-BandList'/1,
'enc_InterFreqBandInfo'/1,
'enc_InterFreqBandList'/1,
'enc_BandInfoEUTRA'/1,
'enc_BandListEUTRA'/1,
'enc_MeasParameters'/1,
'enc_SupportedBandEUTRA'/1,
'enc_SupportedBandListEUTRA'/1,
'enc_RF-Parameters'/1,
'enc_PhyLayerParameters'/1,
'enc_PDCP-Parameters'/1,
'enc_AccessStratumRelease'/1,
'enc_UE-EUTRA-Capability'/1,
'enc_UE-CapabilityRAT-Container'/1,
'enc_UE-CapabilityRAT-ContainerList'/1,
'enc_S-TMSI'/1,
'enc_RRC-TransactionIdentifier'/1,
'enc_RAT-Type'/1,
'enc_RAND-CDMA2000'/1,
'enc_NeighCellConfig'/1,
'enc_MMEC'/1,
'enc_FilterCoefficient'/1,
'enc_DedicatedInfoNAS'/1,
'enc_DedicatedInfoCDMA2000'/1,
'enc_C-RNTI'/1,
'enc_TimeToTrigger'/1,
'enc_RSRQ-Range'/1,
'enc_RSRP-Range'/1,
'enc_ReportInterval'/1,
'enc_ReportConfigToAddMod'/1,
'enc_ReportConfigToAddModList'/1,
'enc_ThresholdCDMA2000'/1,
'enc_ThresholdGERAN'/1,
'enc_ThresholdUTRA'/1,
'enc_ReportConfigInterRAT'/1,
'enc_ReportConfigId'/1,
'enc_ThresholdEUTRA'/1,
'enc_ReportConfigEUTRA'/1,
'enc_QuantityConfigCDMA2000'/1,
'enc_QuantityConfigGERAN'/1,
'enc_QuantityConfigUTRA'/1,
'enc_QuantityConfigEUTRA'/1,
'enc_QuantityConfig'/1,
'enc_PLMN-IdentityList2'/1,
'enc_MeasResultCDMA2000'/1,
'enc_MeasResultListCDMA2000'/1,
'enc_MeasResultsCDMA2000'/1,
'enc_MeasResultGERAN'/1,
'enc_MeasResultListGERAN'/1,
'enc_MeasResultUTRA'/1,
'enc_MeasResultListUTRA'/1,
'enc_MeasResultEUTRA'/1,
'enc_MeasResultListEUTRA'/1,
'enc_MeasResults'/1,
'enc_CellsToAddModUTRA-TDD'/1,
'enc_CellsToAddModListUTRA-TDD'/1,
'enc_CellsToAddModUTRA-FDD'/1,
'enc_CellsToAddModListUTRA-FDD'/1,
'enc_MeasObjectUTRA'/1,
'enc_MeasObjectToAddMod'/1,
'enc_MeasObjectToAddModList'/1,
'enc_MeasObjectId'/1,
'enc_MeasObjectGERAN'/1,
'enc_BlackCellsToAddMod'/1,
'enc_BlackCellsToAddModList'/1,
'enc_CellsToAddMod'/1,
'enc_CellsToAddModList'/1,
'enc_MeasObjectEUTRA'/1,
'enc_CellsToAddModCDMA2000'/1,
'enc_CellsToAddModListCDMA2000'/1,
'enc_MeasObjectCDMA2000'/1,
'enc_MeasIdToAddMod'/1,
'enc_MeasIdToAddModList'/1,
'enc_MeasId'/1,
'enc_MeasGapConfig'/1,
'enc_ReportConfigToRemoveList'/1,
'enc_MeasObjectToRemoveList'/1,
'enc_MeasIdToRemoveList'/1,
'enc_MeasConfig'/1,
'enc_Hysteresis'/1,
'enc_AllowedMeasBandwidth'/1,
'enc_T-Reselection'/1,
'enc_TrackingAreaCode'/1,
'enc_SystemTimeInfoCDMA2000'/1,
'enc_SpeedStateScaleFactors'/1,
'enc_ReselectionThreshold'/1,
'enc_Q-OffsetRangeInterRAT'/1,
'enc_Q-OffsetRange'/1,
'enc_Q-RxLevMin'/1,
'enc_PreRegistrationZoneIdHRPD'/1,
'enc_SecondaryPreRegistrationZoneIdListHRPD'/1,
'enc_PreRegistrationInfoHRPD'/1,
'enc_MCC-MNC-Digit'/1,
'enc_MNC'/1,
'enc_MCC'/1,
'enc_PLMN-Identity'/1,
'enc_PhysCellIdUTRA-TDD'/1,
'enc_PhysCellIdUTRA-FDD'/1,
'enc_PhysCellIdGERAN'/1,
'enc_PhysCellIdCDMA2000'/1,
'enc_PhysCellIdRange'/1,
'enc_PhysCellId'/1,
'enc_MobilityStateParameters'/1,
'enc_MobilityParametersCDMA2000'/1,
'enc_CarrierFreqEUTRA'/1,
'enc_CarrierBandwidthEUTRA'/1,
'enc_MobilityControlInfo'/1,
'enc_CellGlobalIdCDMA2000'/1,
'enc_CellGlobalIdGERAN'/1,
'enc_CellGlobalIdUTRA'/1,
'enc_CellGlobalIdEUTRA'/1,
'enc_CSFB-RegistrationParam1XRTT'/1,
'enc_CellReselectionPriority'/1,
'enc_CellIndex'/1,
'enc_CellIndexList'/1,
'enc_CellIdentity'/1,
'enc_CDMA2000-Type'/1,
'enc_ExplicitListOfARFCNs'/1,
'enc_CarrierFreqsGERAN'/1,
'enc_CarrierFreqGERAN'/1,
'enc_CarrierFreqCDMA2000'/1,
'enc_BandIndicatorGERAN'/1,
'enc_BandclassCDMA2000'/1,
'enc_ARFCN-ValueUTRA'/1,
'enc_ARFCN-ValueGERAN'/1,
'enc_ARFCN-ValueEUTRA'/1,
'enc_ARFCN-ValueCDMA2000'/1,
'enc_AdditionalSpectrumEmission'/1,
'enc_ShortMAC-I'/1,
'enc_SecurityAlgorithmConfig'/1,
'enc_NextHopChainingCount'/1,
'enc_DeltaFList-PUCCH'/1,
'enc_UplinkPowerControlDedicated'/1,
'enc_UplinkPowerControlCommon'/1,
'enc_TPC-Index'/1,
'enc_TPC-PDCCH-Config'/1,
'enc_TimeAlignmentTimer'/1,
'enc_TDD-Config'/1,
'enc_N1-PUCCH-AN-PersistentList'/1,
'enc_SPS-ConfigUL'/1,
'enc_SPS-ConfigDL'/1,
'enc_SPS-Config'/1,
'enc_SoundingRS-UL-ConfigDedicated'/1,
'enc_SoundingRS-UL-ConfigCommon'/1,
'enc_SchedulingRequestConfig'/1,
'enc_T-StatusProhibit'/1,
'enc_T-Reordering'/1,
'enc_PollByte'/1,
'enc_PollPDU'/1,
'enc_T-PollRetransmit'/1,
'enc_SN-FieldLength'/1,
'enc_DL-UM-RLC'/1,
'enc_UL-UM-RLC'/1,
'enc_DL-AM-RLC'/1,
'enc_UL-AM-RLC'/1,
'enc_RLC-Config'/1,
'enc_DRB-ToReleaseList'/1,
'enc_DRB-ToAddMod'/1,
'enc_DRB-ToAddModList'/1,
'enc_SRB-ToAddMod'/1,
'enc_SRB-ToAddModList'/1,
'enc_RadioResourceConfigDedicated'/1,
'enc_UL-CyclicPrefixLength'/1,
'enc_PCCH-Config'/1,
'enc_BCCH-Config'/1,
'enc_RadioResourceConfigCommon'/1,
'enc_RadioResourceConfigCommonSIB'/1,
'enc_RACH-ConfigDedicated'/1,
'enc_RACH-ConfigCommon'/1,
'enc_UL-ReferenceSignalsPUSCH'/1,
'enc_PUSCH-ConfigDedicated'/1,
'enc_PUSCH-ConfigCommon'/1,
'enc_PUCCH-ConfigDedicated'/1,
'enc_PUCCH-ConfigCommon'/1,
'enc_PresenceAntennaPort1'/1,
'enc_PRACH-ConfigInfo'/1,
'enc_PRACH-Config'/1,
'enc_PRACH-ConfigSIB'/1,
'enc_P-Max'/1,
'enc_PhysicalConfigDedicated'/1,
'enc_PHICH-Config'/1,
'enc_PDSCH-ConfigDedicated'/1,
'enc_PDSCH-ConfigCommon'/1,
'enc_PDCP-Config'/1,
'enc_DRX-Config'/1,
'enc_MAC-MainConfig'/1,
'enc_LogicalChannelConfig'/1,
'enc_DRB-Identity'/1,
'enc_CQI-ReportPeriodic'/1,
'enc_CQI-ReportConfig'/1,
'enc_AntennaInfoDedicated'/1,
'enc_AntennaInfoCommon'/1,
'enc_SystemInformationBlockType11'/1,
'enc_SystemInformationBlockType10'/1,
'enc_SystemInformationBlockType9'/1,
'enc_BandClassInfoCDMA2000'/1,
'enc_BandClassListCDMA2000'/1,
'enc_PhysCellIdListCDMA2000'/1,
'enc_NeighCellsPerBandclassCDMA2000'/1,
'enc_NeighCellsPerBandclassListCDMA2000'/1,
'enc_NeighCellCDMA2000'/1,
'enc_NeighCellListCDMA2000'/1,
'enc_CellReselectionParametersCDMA2000'/1,
'enc_SystemInformationBlockType8'/1,
'enc_CarrierFreqsInfoGERAN'/1,
'enc_CarrierFreqsInfoListGERAN'/1,
'enc_SystemInformationBlockType7'/1,
'enc_CarrierFreqUTRA-TDD'/1,
'enc_CarrierFreqListUTRA-TDD'/1,
'enc_CarrierFreqUTRA-FDD'/1,
'enc_CarrierFreqListUTRA-FDD'/1,
'enc_SystemInformationBlockType6'/1,
'enc_InterFreqBlackCellList'/1,
'enc_InterFreqNeighCellInfo'/1,
'enc_InterFreqNeighCellList'/1,
'enc_InterFreqCarrierFreqInfo'/1,
'enc_InterFreqCarrierFreqList'/1,
'enc_SystemInformationBlockType5'/1,
'enc_IntraFreqBlackCellList'/1,
'enc_IntraFreqNeighCellInfo'/1,
'enc_IntraFreqNeighCellList'/1,
'enc_SystemInformationBlockType4'/1,
'enc_SystemInformationBlockType3'/1,
'enc_MBSFN-SubframeConfig'/1,
'enc_MBSFN-SubframeConfigList'/1,
'enc_AC-BarringConfig'/1,
'enc_SystemInformationBlockType2'/1,
'enc_ULInformationTransfer-r8-IEs'/1,
'enc_ULInformationTransfer'/1,
'enc_ULHandoverPreparationTransfer-r8-IEs'/1,
'enc_ULHandoverPreparationTransfer'/1,
'enc_UECapabilityInformation-r8-IEs'/1,
'enc_UECapabilityInformation'/1,
'enc_UE-CapabilityRequest'/1,
'enc_UECapabilityEnquiry-r8-IEs'/1,
'enc_UECapabilityEnquiry'/1,
'enc_SIB-Type'/1,
'enc_SIB-MappingInfo'/1,
'enc_SchedulingInfo'/1,
'enc_SchedulingInfoList'/1,
'enc_PLMN-IdentityInfo'/1,
'enc_PLMN-IdentityList'/1,
'enc_SystemInformationBlockType1'/1,
'enc_SystemInformation-r8-IEs'/1,
'enc_SystemInformation'/1,
'enc_SecurityModeFailure-r8-IEs'/1,
'enc_SecurityModeFailure'/1,
'enc_SecurityModeComplete-r8-IEs'/1,
'enc_SecurityModeComplete'/1,
'enc_SecurityConfigSMC'/1,
'enc_SecurityModeCommand-r8-IEs'/1,
'enc_SecurityModeCommand'/1,
'enc_RegisteredMME'/1,
'enc_RRCConnectionSetupComplete-r8-IEs'/1,
'enc_RRCConnectionSetupComplete'/1,
'enc_RRCConnectionSetup-r8-IEs'/1,
'enc_RRCConnectionSetup'/1,
'enc_EstablishmentCause'/1,
'enc_InitialUE-Identity'/1,
'enc_RRCConnectionRequest-r8-IEs'/1,
'enc_RRCConnectionRequest'/1,
'enc_BandClassPriority1XRTT'/1,
'enc_BandClassPriorityList1XRTT'/1,
'enc_BandClassPriorityHRPD'/1,
'enc_BandClassPriorityListHRPD'/1,
'enc_FreqPriorityUTRA-TDD'/1,
'enc_FreqPriorityListUTRA-TDD'/1,
'enc_FreqPriorityUTRA-FDD'/1,
'enc_FreqPriorityListUTRA-FDD'/1,
'enc_FreqsPriorityGERAN'/1,
'enc_FreqsPriorityListGERAN'/1,
'enc_FreqPriorityEUTRA'/1,
'enc_FreqPriorityListEUTRA'/1,
'enc_IdleModeMobilityControlInfo'/1,
'enc_RedirectedCarrierInfo'/1,
'enc_ReleaseCause'/1,
'enc_RRCConnectionRelease-r8-IEs'/1,
'enc_RRCConnectionRelease'/1,
'enc_RRCConnectionReject-r8-IEs'/1,
'enc_RRCConnectionReject'/1,
'enc_ReestablishmentCause'/1,
'enc_ReestabUE-Identity'/1,
'enc_RRCConnectionReestablishmentRequest-r8-IEs'/1,
'enc_RRCConnectionReestablishmentRequest'/1,
'enc_RRCConnectionReestablishmentReject-r8-IEs'/1,
'enc_RRCConnectionReestablishmentReject'/1,
'enc_RRCConnectionReestablishmentComplete-r8-IEs'/1,
'enc_RRCConnectionReestablishmentComplete'/1,
'enc_RRCConnectionReestablishment-r8-IEs'/1,
'enc_RRCConnectionReestablishment'/1,
'enc_RRCConnectionReconfigurationComplete-r8-IEs'/1,
'enc_RRCConnectionReconfigurationComplete'/1,
'enc_SecurityConfigHO'/1,
'enc_RRCConnectionReconfiguration-r8-IEs'/1,
'enc_RRCConnectionReconfiguration'/1,
'enc_IMSI-Digit'/1,
'enc_IMSI'/1,
'enc_PagingUE-Identity'/1,
'enc_PagingRecord'/1,
'enc_PagingRecordList'/1,
'enc_Paging'/1,
'enc_SystemInfoListGERAN'/1,
'enc_SI-OrPSI-GERAN'/1,
'enc_CellChangeOrder'/1,
'enc_Handover'/1,
'enc_MobilityFromEUTRACommand-r8-IEs'/1,
'enc_MobilityFromEUTRACommand'/1,
'enc_MeasurementReport-r8-IEs'/1,
'enc_MeasurementReport'/1,
'enc_MasterInformationBlock'/1,
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'/1,
'enc_HandoverFromEUTRAPreparationRequest'/1,
'enc_DLInformationTransfer-r8-IEs'/1,
'enc_DLInformationTransfer'/1,
'enc_CSFBParametersResponseCDMA2000-r8-IEs'/1,
'enc_CSFBParametersResponseCDMA2000'/1,
'enc_CSFBParametersRequestCDMA2000-r8-IEs'/1,
'enc_CSFBParametersRequestCDMA2000'/1,
'enc_DRB-CountInfo'/1,
'enc_DRB-CountInfoList'/1,
'enc_CounterCheckResponse-r8-IEs'/1,
'enc_CounterCheckResponse'/1,
'enc_DRB-CountMSB-Info'/1,
'enc_DRB-CountMSB-InfoList'/1,
'enc_CounterCheck-r8-IEs'/1,
'enc_CounterCheck'/1,
'enc_UL-DCCH-MessageType'/1,
'enc_UL-DCCH-Message'/1,
'enc_UL-CCCH-MessageType'/1,
'enc_UL-CCCH-Message'/1,
'enc_DL-DCCH-MessageType'/1,
'enc_DL-DCCH-Message'/1,
'enc_DL-CCCH-MessageType'/1,
'enc_DL-CCCH-Message'/1,
'enc_PCCH-MessageType'/1,
'enc_PCCH-Message'/1,
'enc_BCCH-DL-SCH-MessageType'/1,
'enc_BCCH-DL-SCH-Message'/1,
'enc_BCCH-BCH-MessageType'/1,
'enc_BCCH-BCH-Message'/1
]).

-export([
'dec_UE-TimersAndConstants'/1,
'dec_SupportedBandList1XRTT'/1,
'dec_IRAT-ParametersCDMA2000-1XRTT'/1,
'dec_SupportedBandListHRPD'/1,
'dec_IRAT-ParametersCDMA2000-HRPD'/1,
'dec_SupportedBandGERAN'/1,
'dec_SupportedBandListGERAN'/1,
'dec_IRAT-ParametersGERAN'/1,
'dec_SupportedBandUTRA-TDD768'/1,
'dec_SupportedBandListUTRA-TDD768'/1,
'dec_IRAT-ParametersUTRA-TDD768'/1,
'dec_SupportedBandUTRA-TDD384'/1,
'dec_SupportedBandListUTRA-TDD384'/1,
'dec_IRAT-ParametersUTRA-TDD384'/1,
'dec_SupportedBandUTRA-TDD128'/1,
'dec_SupportedBandListUTRA-TDD128'/1,
'dec_IRAT-ParametersUTRA-TDD128'/1,
'dec_SupportedBandUTRA-FDD'/1,
'dec_SupportedBandListUTRA-FDD'/1,
'dec_IRAT-ParametersUTRA-FDD'/1,
'dec_InterRAT-BandInfo'/1,
'dec_InterRAT-BandList'/1,
'dec_InterFreqBandInfo'/1,
'dec_InterFreqBandList'/1,
'dec_BandInfoEUTRA'/1,
'dec_BandListEUTRA'/1,
'dec_MeasParameters'/1,
'dec_SupportedBandEUTRA'/1,
'dec_SupportedBandListEUTRA'/1,
'dec_RF-Parameters'/1,
'dec_PhyLayerParameters'/1,
'dec_PDCP-Parameters'/1,
'dec_AccessStratumRelease'/1,
'dec_UE-EUTRA-Capability'/1,
'dec_UE-CapabilityRAT-Container'/1,
'dec_UE-CapabilityRAT-ContainerList'/1,
'dec_S-TMSI'/1,
'dec_RRC-TransactionIdentifier'/1,
'dec_RAT-Type'/1,
'dec_RAND-CDMA2000'/1,
'dec_NeighCellConfig'/1,
'dec_MMEC'/1,
'dec_FilterCoefficient'/1,
'dec_DedicatedInfoNAS'/1,
'dec_DedicatedInfoCDMA2000'/1,
'dec_C-RNTI'/1,
'dec_TimeToTrigger'/1,
'dec_RSRQ-Range'/1,
'dec_RSRP-Range'/1,
'dec_ReportInterval'/1,
'dec_ReportConfigToAddMod'/1,
'dec_ReportConfigToAddModList'/1,
'dec_ThresholdCDMA2000'/1,
'dec_ThresholdGERAN'/1,
'dec_ThresholdUTRA'/1,
'dec_ReportConfigInterRAT'/1,
'dec_ReportConfigId'/1,
'dec_ThresholdEUTRA'/1,
'dec_ReportConfigEUTRA'/1,
'dec_QuantityConfigCDMA2000'/1,
'dec_QuantityConfigGERAN'/1,
'dec_QuantityConfigUTRA'/1,
'dec_QuantityConfigEUTRA'/1,
'dec_QuantityConfig'/1,
'dec_PLMN-IdentityList2'/1,
'dec_MeasResultCDMA2000'/1,
'dec_MeasResultListCDMA2000'/1,
'dec_MeasResultsCDMA2000'/1,
'dec_MeasResultGERAN'/1,
'dec_MeasResultListGERAN'/1,
'dec_MeasResultUTRA'/1,
'dec_MeasResultListUTRA'/1,
'dec_MeasResultEUTRA'/1,
'dec_MeasResultListEUTRA'/1,
'dec_MeasResults'/1,
'dec_CellsToAddModUTRA-TDD'/1,
'dec_CellsToAddModListUTRA-TDD'/1,
'dec_CellsToAddModUTRA-FDD'/1,
'dec_CellsToAddModListUTRA-FDD'/1,
'dec_MeasObjectUTRA'/1,
'dec_MeasObjectToAddMod'/1,
'dec_MeasObjectToAddModList'/1,
'dec_MeasObjectId'/1,
'dec_MeasObjectGERAN'/1,
'dec_BlackCellsToAddMod'/1,
'dec_BlackCellsToAddModList'/1,
'dec_CellsToAddMod'/1,
'dec_CellsToAddModList'/1,
'dec_MeasObjectEUTRA'/1,
'dec_CellsToAddModCDMA2000'/1,
'dec_CellsToAddModListCDMA2000'/1,
'dec_MeasObjectCDMA2000'/1,
'dec_MeasIdToAddMod'/1,
'dec_MeasIdToAddModList'/1,
'dec_MeasId'/1,
'dec_MeasGapConfig'/1,
'dec_ReportConfigToRemoveList'/1,
'dec_MeasObjectToRemoveList'/1,
'dec_MeasIdToRemoveList'/1,
'dec_MeasConfig'/1,
'dec_Hysteresis'/1,
'dec_AllowedMeasBandwidth'/1,
'dec_T-Reselection'/1,
'dec_TrackingAreaCode'/1,
'dec_SystemTimeInfoCDMA2000'/1,
'dec_SpeedStateScaleFactors'/1,
'dec_ReselectionThreshold'/1,
'dec_Q-OffsetRangeInterRAT'/1,
'dec_Q-OffsetRange'/1,
'dec_Q-RxLevMin'/1,
'dec_PreRegistrationZoneIdHRPD'/1,
'dec_SecondaryPreRegistrationZoneIdListHRPD'/1,
'dec_PreRegistrationInfoHRPD'/1,
'dec_MCC-MNC-Digit'/1,
'dec_MNC'/1,
'dec_MCC'/1,
'dec_PLMN-Identity'/1,
'dec_PhysCellIdUTRA-TDD'/1,
'dec_PhysCellIdUTRA-FDD'/1,
'dec_PhysCellIdGERAN'/1,
'dec_PhysCellIdCDMA2000'/1,
'dec_PhysCellIdRange'/1,
'dec_PhysCellId'/1,
'dec_MobilityStateParameters'/1,
'dec_MobilityParametersCDMA2000'/1,
'dec_CarrierFreqEUTRA'/1,
'dec_CarrierBandwidthEUTRA'/1,
'dec_MobilityControlInfo'/1,
'dec_CellGlobalIdCDMA2000'/1,
'dec_CellGlobalIdGERAN'/1,
'dec_CellGlobalIdUTRA'/1,
'dec_CellGlobalIdEUTRA'/1,
'dec_CSFB-RegistrationParam1XRTT'/1,
'dec_CellReselectionPriority'/1,
'dec_CellIndex'/1,
'dec_CellIndexList'/1,
'dec_CellIdentity'/1,
'dec_CDMA2000-Type'/1,
'dec_ExplicitListOfARFCNs'/1,
'dec_CarrierFreqsGERAN'/1,
'dec_CarrierFreqGERAN'/1,
'dec_CarrierFreqCDMA2000'/1,
'dec_BandIndicatorGERAN'/1,
'dec_BandclassCDMA2000'/1,
'dec_ARFCN-ValueUTRA'/1,
'dec_ARFCN-ValueGERAN'/1,
'dec_ARFCN-ValueEUTRA'/1,
'dec_ARFCN-ValueCDMA2000'/1,
'dec_AdditionalSpectrumEmission'/1,
'dec_ShortMAC-I'/1,
'dec_SecurityAlgorithmConfig'/1,
'dec_NextHopChainingCount'/1,
'dec_DeltaFList-PUCCH'/1,
'dec_UplinkPowerControlDedicated'/1,
'dec_UplinkPowerControlCommon'/1,
'dec_TPC-Index'/1,
'dec_TPC-PDCCH-Config'/1,
'dec_TimeAlignmentTimer'/1,
'dec_TDD-Config'/1,
'dec_N1-PUCCH-AN-PersistentList'/1,
'dec_SPS-ConfigUL'/1,
'dec_SPS-ConfigDL'/1,
'dec_SPS-Config'/1,
'dec_SoundingRS-UL-ConfigDedicated'/1,
'dec_SoundingRS-UL-ConfigCommon'/1,
'dec_SchedulingRequestConfig'/1,
'dec_T-StatusProhibit'/1,
'dec_T-Reordering'/1,
'dec_PollByte'/1,
'dec_PollPDU'/1,
'dec_T-PollRetransmit'/1,
'dec_SN-FieldLength'/1,
'dec_DL-UM-RLC'/1,
'dec_UL-UM-RLC'/1,
'dec_DL-AM-RLC'/1,
'dec_UL-AM-RLC'/1,
'dec_RLC-Config'/1,
'dec_DRB-ToReleaseList'/1,
'dec_DRB-ToAddMod'/1,
'dec_DRB-ToAddModList'/1,
'dec_SRB-ToAddMod'/1,
'dec_SRB-ToAddModList'/1,
'dec_RadioResourceConfigDedicated'/1,
'dec_UL-CyclicPrefixLength'/1,
'dec_PCCH-Config'/1,
'dec_BCCH-Config'/1,
'dec_RadioResourceConfigCommon'/1,
'dec_RadioResourceConfigCommonSIB'/1,
'dec_RACH-ConfigDedicated'/1,
'dec_RACH-ConfigCommon'/1,
'dec_UL-ReferenceSignalsPUSCH'/1,
'dec_PUSCH-ConfigDedicated'/1,
'dec_PUSCH-ConfigCommon'/1,
'dec_PUCCH-ConfigDedicated'/1,
'dec_PUCCH-ConfigCommon'/1,
'dec_PresenceAntennaPort1'/1,
'dec_PRACH-ConfigInfo'/1,
'dec_PRACH-Config'/1,
'dec_PRACH-ConfigSIB'/1,
'dec_P-Max'/1,
'dec_PhysicalConfigDedicated'/1,
'dec_PHICH-Config'/1,
'dec_PDSCH-ConfigDedicated'/1,
'dec_PDSCH-ConfigCommon'/1,
'dec_PDCP-Config'/1,
'dec_DRX-Config'/1,
'dec_MAC-MainConfig'/1,
'dec_LogicalChannelConfig'/1,
'dec_DRB-Identity'/1,
'dec_CQI-ReportPeriodic'/1,
'dec_CQI-ReportConfig'/1,
'dec_AntennaInfoDedicated'/1,
'dec_AntennaInfoCommon'/1,
'dec_SystemInformationBlockType11'/1,
'dec_SystemInformationBlockType10'/1,
'dec_SystemInformationBlockType9'/1,
'dec_BandClassInfoCDMA2000'/1,
'dec_BandClassListCDMA2000'/1,
'dec_PhysCellIdListCDMA2000'/1,
'dec_NeighCellsPerBandclassCDMA2000'/1,
'dec_NeighCellsPerBandclassListCDMA2000'/1,
'dec_NeighCellCDMA2000'/1,
'dec_NeighCellListCDMA2000'/1,
'dec_CellReselectionParametersCDMA2000'/1,
'dec_SystemInformationBlockType8'/1,
'dec_CarrierFreqsInfoGERAN'/1,
'dec_CarrierFreqsInfoListGERAN'/1,
'dec_SystemInformationBlockType7'/1,
'dec_CarrierFreqUTRA-TDD'/1,
'dec_CarrierFreqListUTRA-TDD'/1,
'dec_CarrierFreqUTRA-FDD'/1,
'dec_CarrierFreqListUTRA-FDD'/1,
'dec_SystemInformationBlockType6'/1,
'dec_InterFreqBlackCellList'/1,
'dec_InterFreqNeighCellInfo'/1,
'dec_InterFreqNeighCellList'/1,
'dec_InterFreqCarrierFreqInfo'/1,
'dec_InterFreqCarrierFreqList'/1,
'dec_SystemInformationBlockType5'/1,
'dec_IntraFreqBlackCellList'/1,
'dec_IntraFreqNeighCellInfo'/1,
'dec_IntraFreqNeighCellList'/1,
'dec_SystemInformationBlockType4'/1,
'dec_SystemInformationBlockType3'/1,
'dec_MBSFN-SubframeConfig'/1,
'dec_MBSFN-SubframeConfigList'/1,
'dec_AC-BarringConfig'/1,
'dec_SystemInformationBlockType2'/1,
'dec_ULInformationTransfer-r8-IEs'/1,
'dec_ULInformationTransfer'/1,
'dec_ULHandoverPreparationTransfer-r8-IEs'/1,
'dec_ULHandoverPreparationTransfer'/1,
'dec_UECapabilityInformation-r8-IEs'/1,
'dec_UECapabilityInformation'/1,
'dec_UE-CapabilityRequest'/1,
'dec_UECapabilityEnquiry-r8-IEs'/1,
'dec_UECapabilityEnquiry'/1,
'dec_SIB-Type'/1,
'dec_SIB-MappingInfo'/1,
'dec_SchedulingInfo'/1,
'dec_SchedulingInfoList'/1,
'dec_PLMN-IdentityInfo'/1,
'dec_PLMN-IdentityList'/1,
'dec_SystemInformationBlockType1'/1,
'dec_SystemInformation-r8-IEs'/1,
'dec_SystemInformation'/1,
'dec_SecurityModeFailure-r8-IEs'/1,
'dec_SecurityModeFailure'/1,
'dec_SecurityModeComplete-r8-IEs'/1,
'dec_SecurityModeComplete'/1,
'dec_SecurityConfigSMC'/1,
'dec_SecurityModeCommand-r8-IEs'/1,
'dec_SecurityModeCommand'/1,
'dec_RegisteredMME'/1,
'dec_RRCConnectionSetupComplete-r8-IEs'/1,
'dec_RRCConnectionSetupComplete'/1,
'dec_RRCConnectionSetup-r8-IEs'/1,
'dec_RRCConnectionSetup'/1,
'dec_EstablishmentCause'/1,
'dec_InitialUE-Identity'/1,
'dec_RRCConnectionRequest-r8-IEs'/1,
'dec_RRCConnectionRequest'/1,
'dec_BandClassPriority1XRTT'/1,
'dec_BandClassPriorityList1XRTT'/1,
'dec_BandClassPriorityHRPD'/1,
'dec_BandClassPriorityListHRPD'/1,
'dec_FreqPriorityUTRA-TDD'/1,
'dec_FreqPriorityListUTRA-TDD'/1,
'dec_FreqPriorityUTRA-FDD'/1,
'dec_FreqPriorityListUTRA-FDD'/1,
'dec_FreqsPriorityGERAN'/1,
'dec_FreqsPriorityListGERAN'/1,
'dec_FreqPriorityEUTRA'/1,
'dec_FreqPriorityListEUTRA'/1,
'dec_IdleModeMobilityControlInfo'/1,
'dec_RedirectedCarrierInfo'/1,
'dec_ReleaseCause'/1,
'dec_RRCConnectionRelease-r8-IEs'/1,
'dec_RRCConnectionRelease'/1,
'dec_RRCConnectionReject-r8-IEs'/1,
'dec_RRCConnectionReject'/1,
'dec_ReestablishmentCause'/1,
'dec_ReestabUE-Identity'/1,
'dec_RRCConnectionReestablishmentRequest-r8-IEs'/1,
'dec_RRCConnectionReestablishmentRequest'/1,
'dec_RRCConnectionReestablishmentReject-r8-IEs'/1,
'dec_RRCConnectionReestablishmentReject'/1,
'dec_RRCConnectionReestablishmentComplete-r8-IEs'/1,
'dec_RRCConnectionReestablishmentComplete'/1,
'dec_RRCConnectionReestablishment-r8-IEs'/1,
'dec_RRCConnectionReestablishment'/1,
'dec_RRCConnectionReconfigurationComplete-r8-IEs'/1,
'dec_RRCConnectionReconfigurationComplete'/1,
'dec_SecurityConfigHO'/1,
'dec_RRCConnectionReconfiguration-r8-IEs'/1,
'dec_RRCConnectionReconfiguration'/1,
'dec_IMSI-Digit'/1,
'dec_IMSI'/1,
'dec_PagingUE-Identity'/1,
'dec_PagingRecord'/1,
'dec_PagingRecordList'/1,
'dec_Paging'/1,
'dec_SystemInfoListGERAN'/1,
'dec_SI-OrPSI-GERAN'/1,
'dec_CellChangeOrder'/1,
'dec_Handover'/1,
'dec_MobilityFromEUTRACommand-r8-IEs'/1,
'dec_MobilityFromEUTRACommand'/1,
'dec_MeasurementReport-r8-IEs'/1,
'dec_MeasurementReport'/1,
'dec_MasterInformationBlock'/1,
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'/1,
'dec_HandoverFromEUTRAPreparationRequest'/1,
'dec_DLInformationTransfer-r8-IEs'/1,
'dec_DLInformationTransfer'/1,
'dec_CSFBParametersResponseCDMA2000-r8-IEs'/1,
'dec_CSFBParametersResponseCDMA2000'/1,
'dec_CSFBParametersRequestCDMA2000-r8-IEs'/1,
'dec_CSFBParametersRequestCDMA2000'/1,
'dec_DRB-CountInfo'/1,
'dec_DRB-CountInfoList'/1,
'dec_CounterCheckResponse-r8-IEs'/1,
'dec_CounterCheckResponse'/1,
'dec_DRB-CountMSB-Info'/1,
'dec_DRB-CountMSB-InfoList'/1,
'dec_CounterCheck-r8-IEs'/1,
'dec_CounterCheck'/1,
'dec_UL-DCCH-MessageType'/1,
'dec_UL-DCCH-Message'/1,
'dec_UL-CCCH-MessageType'/1,
'dec_UL-CCCH-Message'/1,
'dec_DL-DCCH-MessageType'/1,
'dec_DL-DCCH-Message'/1,
'dec_DL-CCCH-MessageType'/1,
'dec_DL-CCCH-Message'/1,
'dec_PCCH-MessageType'/1,
'dec_PCCH-Message'/1,
'dec_BCCH-DL-SCH-MessageType'/1,
'dec_BCCH-DL-SCH-Message'/1,
'dec_BCCH-BCH-MessageType'/1,
'dec_BCCH-BCH-Message'/1
]).

-export([
'maxUTRA-TDD-Carrier'/0,
'maxUTRA-FDD-Carrier'/0,
'maxSI-Message'/0,
'maxSIB-1'/0,
'maxSIB'/0,
'maxReportConfigId'/0,
'maxRAT-Capabilities'/0,
'maxPNOffset'/0,
'maxPageRec'/0,
'maxObjectId'/0,
'maxMeasId'/0,
'maxMCS-1'/0,
'maxMBSFN-Allocations'/0,
'maxGNFG'/0,
'maxGERAN-SI'/0,
'maxFreq'/0,
'maxEARFCN'/0,
'maxDRB'/0,
'maxCellReport'/0,
'maxCellMeas'/0,
'maxCellIntra'/0,
'maxCellInter'/0,
'maxCellBlack'/0,
'maxCDMA-BandClass'/0,
'maxBands'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> uper.

bit_string_format() -> compact.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('UE-TimersAndConstants',Data) -> 'enc_UE-TimersAndConstants'(Data);
encode_disp('SupportedBandList1XRTT',Data) -> 'enc_SupportedBandList1XRTT'(Data);
encode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'enc_IRAT-ParametersCDMA2000-1XRTT'(Data);
encode_disp('SupportedBandListHRPD',Data) -> 'enc_SupportedBandListHRPD'(Data);
encode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'enc_IRAT-ParametersCDMA2000-HRPD'(Data);
encode_disp('SupportedBandGERAN',Data) -> 'enc_SupportedBandGERAN'(Data);
encode_disp('SupportedBandListGERAN',Data) -> 'enc_SupportedBandListGERAN'(Data);
encode_disp('IRAT-ParametersGERAN',Data) -> 'enc_IRAT-ParametersGERAN'(Data);
encode_disp('SupportedBandUTRA-TDD768',Data) -> 'enc_SupportedBandUTRA-TDD768'(Data);
encode_disp('SupportedBandListUTRA-TDD768',Data) -> 'enc_SupportedBandListUTRA-TDD768'(Data);
encode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'enc_IRAT-ParametersUTRA-TDD768'(Data);
encode_disp('SupportedBandUTRA-TDD384',Data) -> 'enc_SupportedBandUTRA-TDD384'(Data);
encode_disp('SupportedBandListUTRA-TDD384',Data) -> 'enc_SupportedBandListUTRA-TDD384'(Data);
encode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'enc_IRAT-ParametersUTRA-TDD384'(Data);
encode_disp('SupportedBandUTRA-TDD128',Data) -> 'enc_SupportedBandUTRA-TDD128'(Data);
encode_disp('SupportedBandListUTRA-TDD128',Data) -> 'enc_SupportedBandListUTRA-TDD128'(Data);
encode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'enc_IRAT-ParametersUTRA-TDD128'(Data);
encode_disp('SupportedBandUTRA-FDD',Data) -> 'enc_SupportedBandUTRA-FDD'(Data);
encode_disp('SupportedBandListUTRA-FDD',Data) -> 'enc_SupportedBandListUTRA-FDD'(Data);
encode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'enc_IRAT-ParametersUTRA-FDD'(Data);
encode_disp('InterRAT-BandInfo',Data) -> 'enc_InterRAT-BandInfo'(Data);
encode_disp('InterRAT-BandList',Data) -> 'enc_InterRAT-BandList'(Data);
encode_disp('InterFreqBandInfo',Data) -> 'enc_InterFreqBandInfo'(Data);
encode_disp('InterFreqBandList',Data) -> 'enc_InterFreqBandList'(Data);
encode_disp('BandInfoEUTRA',Data) -> 'enc_BandInfoEUTRA'(Data);
encode_disp('BandListEUTRA',Data) -> 'enc_BandListEUTRA'(Data);
encode_disp('MeasParameters',Data) -> 'enc_MeasParameters'(Data);
encode_disp('SupportedBandEUTRA',Data) -> 'enc_SupportedBandEUTRA'(Data);
encode_disp('SupportedBandListEUTRA',Data) -> 'enc_SupportedBandListEUTRA'(Data);
encode_disp('RF-Parameters',Data) -> 'enc_RF-Parameters'(Data);
encode_disp('PhyLayerParameters',Data) -> 'enc_PhyLayerParameters'(Data);
encode_disp('PDCP-Parameters',Data) -> 'enc_PDCP-Parameters'(Data);
encode_disp('AccessStratumRelease',Data) -> 'enc_AccessStratumRelease'(Data);
encode_disp('UE-EUTRA-Capability',Data) -> 'enc_UE-EUTRA-Capability'(Data);
encode_disp('UE-CapabilityRAT-Container',Data) -> 'enc_UE-CapabilityRAT-Container'(Data);
encode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'enc_UE-CapabilityRAT-ContainerList'(Data);
encode_disp('S-TMSI',Data) -> 'enc_S-TMSI'(Data);
encode_disp('RRC-TransactionIdentifier',Data) -> 'enc_RRC-TransactionIdentifier'(Data);
encode_disp('RAT-Type',Data) -> 'enc_RAT-Type'(Data);
encode_disp('RAND-CDMA2000',Data) -> 'enc_RAND-CDMA2000'(Data);
encode_disp('NeighCellConfig',Data) -> 'enc_NeighCellConfig'(Data);
encode_disp('MMEC',Data) -> 'enc_MMEC'(Data);
encode_disp('FilterCoefficient',Data) -> 'enc_FilterCoefficient'(Data);
encode_disp('DedicatedInfoNAS',Data) -> 'enc_DedicatedInfoNAS'(Data);
encode_disp('DedicatedInfoCDMA2000',Data) -> 'enc_DedicatedInfoCDMA2000'(Data);
encode_disp('C-RNTI',Data) -> 'enc_C-RNTI'(Data);
encode_disp('TimeToTrigger',Data) -> 'enc_TimeToTrigger'(Data);
encode_disp('RSRQ-Range',Data) -> 'enc_RSRQ-Range'(Data);
encode_disp('RSRP-Range',Data) -> 'enc_RSRP-Range'(Data);
encode_disp('ReportInterval',Data) -> 'enc_ReportInterval'(Data);
encode_disp('ReportConfigToAddMod',Data) -> 'enc_ReportConfigToAddMod'(Data);
encode_disp('ReportConfigToAddModList',Data) -> 'enc_ReportConfigToAddModList'(Data);
encode_disp('ThresholdCDMA2000',Data) -> 'enc_ThresholdCDMA2000'(Data);
encode_disp('ThresholdGERAN',Data) -> 'enc_ThresholdGERAN'(Data);
encode_disp('ThresholdUTRA',Data) -> 'enc_ThresholdUTRA'(Data);
encode_disp('ReportConfigInterRAT',Data) -> 'enc_ReportConfigInterRAT'(Data);
encode_disp('ReportConfigId',Data) -> 'enc_ReportConfigId'(Data);
encode_disp('ThresholdEUTRA',Data) -> 'enc_ThresholdEUTRA'(Data);
encode_disp('ReportConfigEUTRA',Data) -> 'enc_ReportConfigEUTRA'(Data);
encode_disp('QuantityConfigCDMA2000',Data) -> 'enc_QuantityConfigCDMA2000'(Data);
encode_disp('QuantityConfigGERAN',Data) -> 'enc_QuantityConfigGERAN'(Data);
encode_disp('QuantityConfigUTRA',Data) -> 'enc_QuantityConfigUTRA'(Data);
encode_disp('QuantityConfigEUTRA',Data) -> 'enc_QuantityConfigEUTRA'(Data);
encode_disp('QuantityConfig',Data) -> 'enc_QuantityConfig'(Data);
encode_disp('PLMN-IdentityList2',Data) -> 'enc_PLMN-IdentityList2'(Data);
encode_disp('MeasResultCDMA2000',Data) -> 'enc_MeasResultCDMA2000'(Data);
encode_disp('MeasResultListCDMA2000',Data) -> 'enc_MeasResultListCDMA2000'(Data);
encode_disp('MeasResultsCDMA2000',Data) -> 'enc_MeasResultsCDMA2000'(Data);
encode_disp('MeasResultGERAN',Data) -> 'enc_MeasResultGERAN'(Data);
encode_disp('MeasResultListGERAN',Data) -> 'enc_MeasResultListGERAN'(Data);
encode_disp('MeasResultUTRA',Data) -> 'enc_MeasResultUTRA'(Data);
encode_disp('MeasResultListUTRA',Data) -> 'enc_MeasResultListUTRA'(Data);
encode_disp('MeasResultEUTRA',Data) -> 'enc_MeasResultEUTRA'(Data);
encode_disp('MeasResultListEUTRA',Data) -> 'enc_MeasResultListEUTRA'(Data);
encode_disp('MeasResults',Data) -> 'enc_MeasResults'(Data);
encode_disp('CellsToAddModUTRA-TDD',Data) -> 'enc_CellsToAddModUTRA-TDD'(Data);
encode_disp('CellsToAddModListUTRA-TDD',Data) -> 'enc_CellsToAddModListUTRA-TDD'(Data);
encode_disp('CellsToAddModUTRA-FDD',Data) -> 'enc_CellsToAddModUTRA-FDD'(Data);
encode_disp('CellsToAddModListUTRA-FDD',Data) -> 'enc_CellsToAddModListUTRA-FDD'(Data);
encode_disp('MeasObjectUTRA',Data) -> 'enc_MeasObjectUTRA'(Data);
encode_disp('MeasObjectToAddMod',Data) -> 'enc_MeasObjectToAddMod'(Data);
encode_disp('MeasObjectToAddModList',Data) -> 'enc_MeasObjectToAddModList'(Data);
encode_disp('MeasObjectId',Data) -> 'enc_MeasObjectId'(Data);
encode_disp('MeasObjectGERAN',Data) -> 'enc_MeasObjectGERAN'(Data);
encode_disp('BlackCellsToAddMod',Data) -> 'enc_BlackCellsToAddMod'(Data);
encode_disp('BlackCellsToAddModList',Data) -> 'enc_BlackCellsToAddModList'(Data);
encode_disp('CellsToAddMod',Data) -> 'enc_CellsToAddMod'(Data);
encode_disp('CellsToAddModList',Data) -> 'enc_CellsToAddModList'(Data);
encode_disp('MeasObjectEUTRA',Data) -> 'enc_MeasObjectEUTRA'(Data);
encode_disp('CellsToAddModCDMA2000',Data) -> 'enc_CellsToAddModCDMA2000'(Data);
encode_disp('CellsToAddModListCDMA2000',Data) -> 'enc_CellsToAddModListCDMA2000'(Data);
encode_disp('MeasObjectCDMA2000',Data) -> 'enc_MeasObjectCDMA2000'(Data);
encode_disp('MeasIdToAddMod',Data) -> 'enc_MeasIdToAddMod'(Data);
encode_disp('MeasIdToAddModList',Data) -> 'enc_MeasIdToAddModList'(Data);
encode_disp('MeasId',Data) -> 'enc_MeasId'(Data);
encode_disp('MeasGapConfig',Data) -> 'enc_MeasGapConfig'(Data);
encode_disp('ReportConfigToRemoveList',Data) -> 'enc_ReportConfigToRemoveList'(Data);
encode_disp('MeasObjectToRemoveList',Data) -> 'enc_MeasObjectToRemoveList'(Data);
encode_disp('MeasIdToRemoveList',Data) -> 'enc_MeasIdToRemoveList'(Data);
encode_disp('MeasConfig',Data) -> 'enc_MeasConfig'(Data);
encode_disp('Hysteresis',Data) -> 'enc_Hysteresis'(Data);
encode_disp('AllowedMeasBandwidth',Data) -> 'enc_AllowedMeasBandwidth'(Data);
encode_disp('T-Reselection',Data) -> 'enc_T-Reselection'(Data);
encode_disp('TrackingAreaCode',Data) -> 'enc_TrackingAreaCode'(Data);
encode_disp('SystemTimeInfoCDMA2000',Data) -> 'enc_SystemTimeInfoCDMA2000'(Data);
encode_disp('SpeedStateScaleFactors',Data) -> 'enc_SpeedStateScaleFactors'(Data);
encode_disp('ReselectionThreshold',Data) -> 'enc_ReselectionThreshold'(Data);
encode_disp('Q-OffsetRangeInterRAT',Data) -> 'enc_Q-OffsetRangeInterRAT'(Data);
encode_disp('Q-OffsetRange',Data) -> 'enc_Q-OffsetRange'(Data);
encode_disp('Q-RxLevMin',Data) -> 'enc_Q-RxLevMin'(Data);
encode_disp('PreRegistrationZoneIdHRPD',Data) -> 'enc_PreRegistrationZoneIdHRPD'(Data);
encode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'enc_SecondaryPreRegistrationZoneIdListHRPD'(Data);
encode_disp('PreRegistrationInfoHRPD',Data) -> 'enc_PreRegistrationInfoHRPD'(Data);
encode_disp('MCC-MNC-Digit',Data) -> 'enc_MCC-MNC-Digit'(Data);
encode_disp('MNC',Data) -> 'enc_MNC'(Data);
encode_disp('MCC',Data) -> 'enc_MCC'(Data);
encode_disp('PLMN-Identity',Data) -> 'enc_PLMN-Identity'(Data);
encode_disp('PhysCellIdUTRA-TDD',Data) -> 'enc_PhysCellIdUTRA-TDD'(Data);
encode_disp('PhysCellIdUTRA-FDD',Data) -> 'enc_PhysCellIdUTRA-FDD'(Data);
encode_disp('PhysCellIdGERAN',Data) -> 'enc_PhysCellIdGERAN'(Data);
encode_disp('PhysCellIdCDMA2000',Data) -> 'enc_PhysCellIdCDMA2000'(Data);
encode_disp('PhysCellIdRange',Data) -> 'enc_PhysCellIdRange'(Data);
encode_disp('PhysCellId',Data) -> 'enc_PhysCellId'(Data);
encode_disp('MobilityStateParameters',Data) -> 'enc_MobilityStateParameters'(Data);
encode_disp('MobilityParametersCDMA2000',Data) -> 'enc_MobilityParametersCDMA2000'(Data);
encode_disp('CarrierFreqEUTRA',Data) -> 'enc_CarrierFreqEUTRA'(Data);
encode_disp('CarrierBandwidthEUTRA',Data) -> 'enc_CarrierBandwidthEUTRA'(Data);
encode_disp('MobilityControlInfo',Data) -> 'enc_MobilityControlInfo'(Data);
encode_disp('CellGlobalIdCDMA2000',Data) -> 'enc_CellGlobalIdCDMA2000'(Data);
encode_disp('CellGlobalIdGERAN',Data) -> 'enc_CellGlobalIdGERAN'(Data);
encode_disp('CellGlobalIdUTRA',Data) -> 'enc_CellGlobalIdUTRA'(Data);
encode_disp('CellGlobalIdEUTRA',Data) -> 'enc_CellGlobalIdEUTRA'(Data);
encode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'enc_CSFB-RegistrationParam1XRTT'(Data);
encode_disp('CellReselectionPriority',Data) -> 'enc_CellReselectionPriority'(Data);
encode_disp('CellIndex',Data) -> 'enc_CellIndex'(Data);
encode_disp('CellIndexList',Data) -> 'enc_CellIndexList'(Data);
encode_disp('CellIdentity',Data) -> 'enc_CellIdentity'(Data);
encode_disp('CDMA2000-Type',Data) -> 'enc_CDMA2000-Type'(Data);
encode_disp('ExplicitListOfARFCNs',Data) -> 'enc_ExplicitListOfARFCNs'(Data);
encode_disp('CarrierFreqsGERAN',Data) -> 'enc_CarrierFreqsGERAN'(Data);
encode_disp('CarrierFreqGERAN',Data) -> 'enc_CarrierFreqGERAN'(Data);
encode_disp('CarrierFreqCDMA2000',Data) -> 'enc_CarrierFreqCDMA2000'(Data);
encode_disp('BandIndicatorGERAN',Data) -> 'enc_BandIndicatorGERAN'(Data);
encode_disp('BandclassCDMA2000',Data) -> 'enc_BandclassCDMA2000'(Data);
encode_disp('ARFCN-ValueUTRA',Data) -> 'enc_ARFCN-ValueUTRA'(Data);
encode_disp('ARFCN-ValueGERAN',Data) -> 'enc_ARFCN-ValueGERAN'(Data);
encode_disp('ARFCN-ValueEUTRA',Data) -> 'enc_ARFCN-ValueEUTRA'(Data);
encode_disp('ARFCN-ValueCDMA2000',Data) -> 'enc_ARFCN-ValueCDMA2000'(Data);
encode_disp('AdditionalSpectrumEmission',Data) -> 'enc_AdditionalSpectrumEmission'(Data);
encode_disp('ShortMAC-I',Data) -> 'enc_ShortMAC-I'(Data);
encode_disp('SecurityAlgorithmConfig',Data) -> 'enc_SecurityAlgorithmConfig'(Data);
encode_disp('NextHopChainingCount',Data) -> 'enc_NextHopChainingCount'(Data);
encode_disp('DeltaFList-PUCCH',Data) -> 'enc_DeltaFList-PUCCH'(Data);
encode_disp('UplinkPowerControlDedicated',Data) -> 'enc_UplinkPowerControlDedicated'(Data);
encode_disp('UplinkPowerControlCommon',Data) -> 'enc_UplinkPowerControlCommon'(Data);
encode_disp('TPC-Index',Data) -> 'enc_TPC-Index'(Data);
encode_disp('TPC-PDCCH-Config',Data) -> 'enc_TPC-PDCCH-Config'(Data);
encode_disp('TimeAlignmentTimer',Data) -> 'enc_TimeAlignmentTimer'(Data);
encode_disp('TDD-Config',Data) -> 'enc_TDD-Config'(Data);
encode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'enc_N1-PUCCH-AN-PersistentList'(Data);
encode_disp('SPS-ConfigUL',Data) -> 'enc_SPS-ConfigUL'(Data);
encode_disp('SPS-ConfigDL',Data) -> 'enc_SPS-ConfigDL'(Data);
encode_disp('SPS-Config',Data) -> 'enc_SPS-Config'(Data);
encode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'enc_SoundingRS-UL-ConfigDedicated'(Data);
encode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'enc_SoundingRS-UL-ConfigCommon'(Data);
encode_disp('SchedulingRequestConfig',Data) -> 'enc_SchedulingRequestConfig'(Data);
encode_disp('T-StatusProhibit',Data) -> 'enc_T-StatusProhibit'(Data);
encode_disp('T-Reordering',Data) -> 'enc_T-Reordering'(Data);
encode_disp('PollByte',Data) -> 'enc_PollByte'(Data);
encode_disp('PollPDU',Data) -> 'enc_PollPDU'(Data);
encode_disp('T-PollRetransmit',Data) -> 'enc_T-PollRetransmit'(Data);
encode_disp('SN-FieldLength',Data) -> 'enc_SN-FieldLength'(Data);
encode_disp('DL-UM-RLC',Data) -> 'enc_DL-UM-RLC'(Data);
encode_disp('UL-UM-RLC',Data) -> 'enc_UL-UM-RLC'(Data);
encode_disp('DL-AM-RLC',Data) -> 'enc_DL-AM-RLC'(Data);
encode_disp('UL-AM-RLC',Data) -> 'enc_UL-AM-RLC'(Data);
encode_disp('RLC-Config',Data) -> 'enc_RLC-Config'(Data);
encode_disp('DRB-ToReleaseList',Data) -> 'enc_DRB-ToReleaseList'(Data);
encode_disp('DRB-ToAddMod',Data) -> 'enc_DRB-ToAddMod'(Data);
encode_disp('DRB-ToAddModList',Data) -> 'enc_DRB-ToAddModList'(Data);
encode_disp('SRB-ToAddMod',Data) -> 'enc_SRB-ToAddMod'(Data);
encode_disp('SRB-ToAddModList',Data) -> 'enc_SRB-ToAddModList'(Data);
encode_disp('RadioResourceConfigDedicated',Data) -> 'enc_RadioResourceConfigDedicated'(Data);
encode_disp('UL-CyclicPrefixLength',Data) -> 'enc_UL-CyclicPrefixLength'(Data);
encode_disp('PCCH-Config',Data) -> 'enc_PCCH-Config'(Data);
encode_disp('BCCH-Config',Data) -> 'enc_BCCH-Config'(Data);
encode_disp('RadioResourceConfigCommon',Data) -> 'enc_RadioResourceConfigCommon'(Data);
encode_disp('RadioResourceConfigCommonSIB',Data) -> 'enc_RadioResourceConfigCommonSIB'(Data);
encode_disp('RACH-ConfigDedicated',Data) -> 'enc_RACH-ConfigDedicated'(Data);
encode_disp('RACH-ConfigCommon',Data) -> 'enc_RACH-ConfigCommon'(Data);
encode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'enc_UL-ReferenceSignalsPUSCH'(Data);
encode_disp('PUSCH-ConfigDedicated',Data) -> 'enc_PUSCH-ConfigDedicated'(Data);
encode_disp('PUSCH-ConfigCommon',Data) -> 'enc_PUSCH-ConfigCommon'(Data);
encode_disp('PUCCH-ConfigDedicated',Data) -> 'enc_PUCCH-ConfigDedicated'(Data);
encode_disp('PUCCH-ConfigCommon',Data) -> 'enc_PUCCH-ConfigCommon'(Data);
encode_disp('PresenceAntennaPort1',Data) -> 'enc_PresenceAntennaPort1'(Data);
encode_disp('PRACH-ConfigInfo',Data) -> 'enc_PRACH-ConfigInfo'(Data);
encode_disp('PRACH-Config',Data) -> 'enc_PRACH-Config'(Data);
encode_disp('PRACH-ConfigSIB',Data) -> 'enc_PRACH-ConfigSIB'(Data);
encode_disp('P-Max',Data) -> 'enc_P-Max'(Data);
encode_disp('PhysicalConfigDedicated',Data) -> 'enc_PhysicalConfigDedicated'(Data);
encode_disp('PHICH-Config',Data) -> 'enc_PHICH-Config'(Data);
encode_disp('PDSCH-ConfigDedicated',Data) -> 'enc_PDSCH-ConfigDedicated'(Data);
encode_disp('PDSCH-ConfigCommon',Data) -> 'enc_PDSCH-ConfigCommon'(Data);
encode_disp('PDCP-Config',Data) -> 'enc_PDCP-Config'(Data);
encode_disp('DRX-Config',Data) -> 'enc_DRX-Config'(Data);
encode_disp('MAC-MainConfig',Data) -> 'enc_MAC-MainConfig'(Data);
encode_disp('LogicalChannelConfig',Data) -> 'enc_LogicalChannelConfig'(Data);
encode_disp('DRB-Identity',Data) -> 'enc_DRB-Identity'(Data);
encode_disp('CQI-ReportPeriodic',Data) -> 'enc_CQI-ReportPeriodic'(Data);
encode_disp('CQI-ReportConfig',Data) -> 'enc_CQI-ReportConfig'(Data);
encode_disp('AntennaInfoDedicated',Data) -> 'enc_AntennaInfoDedicated'(Data);
encode_disp('AntennaInfoCommon',Data) -> 'enc_AntennaInfoCommon'(Data);
encode_disp('SystemInformationBlockType11',Data) -> 'enc_SystemInformationBlockType11'(Data);
encode_disp('SystemInformationBlockType10',Data) -> 'enc_SystemInformationBlockType10'(Data);
encode_disp('SystemInformationBlockType9',Data) -> 'enc_SystemInformationBlockType9'(Data);
encode_disp('BandClassInfoCDMA2000',Data) -> 'enc_BandClassInfoCDMA2000'(Data);
encode_disp('BandClassListCDMA2000',Data) -> 'enc_BandClassListCDMA2000'(Data);
encode_disp('PhysCellIdListCDMA2000',Data) -> 'enc_PhysCellIdListCDMA2000'(Data);
encode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'enc_NeighCellsPerBandclassCDMA2000'(Data);
encode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'enc_NeighCellsPerBandclassListCDMA2000'(Data);
encode_disp('NeighCellCDMA2000',Data) -> 'enc_NeighCellCDMA2000'(Data);
encode_disp('NeighCellListCDMA2000',Data) -> 'enc_NeighCellListCDMA2000'(Data);
encode_disp('CellReselectionParametersCDMA2000',Data) -> 'enc_CellReselectionParametersCDMA2000'(Data);
encode_disp('SystemInformationBlockType8',Data) -> 'enc_SystemInformationBlockType8'(Data);
encode_disp('CarrierFreqsInfoGERAN',Data) -> 'enc_CarrierFreqsInfoGERAN'(Data);
encode_disp('CarrierFreqsInfoListGERAN',Data) -> 'enc_CarrierFreqsInfoListGERAN'(Data);
encode_disp('SystemInformationBlockType7',Data) -> 'enc_SystemInformationBlockType7'(Data);
encode_disp('CarrierFreqUTRA-TDD',Data) -> 'enc_CarrierFreqUTRA-TDD'(Data);
encode_disp('CarrierFreqListUTRA-TDD',Data) -> 'enc_CarrierFreqListUTRA-TDD'(Data);
encode_disp('CarrierFreqUTRA-FDD',Data) -> 'enc_CarrierFreqUTRA-FDD'(Data);
encode_disp('CarrierFreqListUTRA-FDD',Data) -> 'enc_CarrierFreqListUTRA-FDD'(Data);
encode_disp('SystemInformationBlockType6',Data) -> 'enc_SystemInformationBlockType6'(Data);
encode_disp('InterFreqBlackCellList',Data) -> 'enc_InterFreqBlackCellList'(Data);
encode_disp('InterFreqNeighCellInfo',Data) -> 'enc_InterFreqNeighCellInfo'(Data);
encode_disp('InterFreqNeighCellList',Data) -> 'enc_InterFreqNeighCellList'(Data);
encode_disp('InterFreqCarrierFreqInfo',Data) -> 'enc_InterFreqCarrierFreqInfo'(Data);
encode_disp('InterFreqCarrierFreqList',Data) -> 'enc_InterFreqCarrierFreqList'(Data);
encode_disp('SystemInformationBlockType5',Data) -> 'enc_SystemInformationBlockType5'(Data);
encode_disp('IntraFreqBlackCellList',Data) -> 'enc_IntraFreqBlackCellList'(Data);
encode_disp('IntraFreqNeighCellInfo',Data) -> 'enc_IntraFreqNeighCellInfo'(Data);
encode_disp('IntraFreqNeighCellList',Data) -> 'enc_IntraFreqNeighCellList'(Data);
encode_disp('SystemInformationBlockType4',Data) -> 'enc_SystemInformationBlockType4'(Data);
encode_disp('SystemInformationBlockType3',Data) -> 'enc_SystemInformationBlockType3'(Data);
encode_disp('MBSFN-SubframeConfig',Data) -> 'enc_MBSFN-SubframeConfig'(Data);
encode_disp('MBSFN-SubframeConfigList',Data) -> 'enc_MBSFN-SubframeConfigList'(Data);
encode_disp('AC-BarringConfig',Data) -> 'enc_AC-BarringConfig'(Data);
encode_disp('SystemInformationBlockType2',Data) -> 'enc_SystemInformationBlockType2'(Data);
encode_disp('ULInformationTransfer-r8-IEs',Data) -> 'enc_ULInformationTransfer-r8-IEs'(Data);
encode_disp('ULInformationTransfer',Data) -> 'enc_ULInformationTransfer'(Data);
encode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'enc_ULHandoverPreparationTransfer-r8-IEs'(Data);
encode_disp('ULHandoverPreparationTransfer',Data) -> 'enc_ULHandoverPreparationTransfer'(Data);
encode_disp('UECapabilityInformation-r8-IEs',Data) -> 'enc_UECapabilityInformation-r8-IEs'(Data);
encode_disp('UECapabilityInformation',Data) -> 'enc_UECapabilityInformation'(Data);
encode_disp('UE-CapabilityRequest',Data) -> 'enc_UE-CapabilityRequest'(Data);
encode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'enc_UECapabilityEnquiry-r8-IEs'(Data);
encode_disp('UECapabilityEnquiry',Data) -> 'enc_UECapabilityEnquiry'(Data);
encode_disp('SIB-Type',Data) -> 'enc_SIB-Type'(Data);
encode_disp('SIB-MappingInfo',Data) -> 'enc_SIB-MappingInfo'(Data);
encode_disp('SchedulingInfo',Data) -> 'enc_SchedulingInfo'(Data);
encode_disp('SchedulingInfoList',Data) -> 'enc_SchedulingInfoList'(Data);
encode_disp('PLMN-IdentityInfo',Data) -> 'enc_PLMN-IdentityInfo'(Data);
encode_disp('PLMN-IdentityList',Data) -> 'enc_PLMN-IdentityList'(Data);
encode_disp('SystemInformationBlockType1',Data) -> 'enc_SystemInformationBlockType1'(Data);
encode_disp('SystemInformation-r8-IEs',Data) -> 'enc_SystemInformation-r8-IEs'(Data);
encode_disp('SystemInformation',Data) -> 'enc_SystemInformation'(Data);
encode_disp('SecurityModeFailure-r8-IEs',Data) -> 'enc_SecurityModeFailure-r8-IEs'(Data);
encode_disp('SecurityModeFailure',Data) -> 'enc_SecurityModeFailure'(Data);
encode_disp('SecurityModeComplete-r8-IEs',Data) -> 'enc_SecurityModeComplete-r8-IEs'(Data);
encode_disp('SecurityModeComplete',Data) -> 'enc_SecurityModeComplete'(Data);
encode_disp('SecurityConfigSMC',Data) -> 'enc_SecurityConfigSMC'(Data);
encode_disp('SecurityModeCommand-r8-IEs',Data) -> 'enc_SecurityModeCommand-r8-IEs'(Data);
encode_disp('SecurityModeCommand',Data) -> 'enc_SecurityModeCommand'(Data);
encode_disp('RegisteredMME',Data) -> 'enc_RegisteredMME'(Data);
encode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'enc_RRCConnectionSetupComplete-r8-IEs'(Data);
encode_disp('RRCConnectionSetupComplete',Data) -> 'enc_RRCConnectionSetupComplete'(Data);
encode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'enc_RRCConnectionSetup-r8-IEs'(Data);
encode_disp('RRCConnectionSetup',Data) -> 'enc_RRCConnectionSetup'(Data);
encode_disp('EstablishmentCause',Data) -> 'enc_EstablishmentCause'(Data);
encode_disp('InitialUE-Identity',Data) -> 'enc_InitialUE-Identity'(Data);
encode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'enc_RRCConnectionRequest-r8-IEs'(Data);
encode_disp('RRCConnectionRequest',Data) -> 'enc_RRCConnectionRequest'(Data);
encode_disp('BandClassPriority1XRTT',Data) -> 'enc_BandClassPriority1XRTT'(Data);
encode_disp('BandClassPriorityList1XRTT',Data) -> 'enc_BandClassPriorityList1XRTT'(Data);
encode_disp('BandClassPriorityHRPD',Data) -> 'enc_BandClassPriorityHRPD'(Data);
encode_disp('BandClassPriorityListHRPD',Data) -> 'enc_BandClassPriorityListHRPD'(Data);
encode_disp('FreqPriorityUTRA-TDD',Data) -> 'enc_FreqPriorityUTRA-TDD'(Data);
encode_disp('FreqPriorityListUTRA-TDD',Data) -> 'enc_FreqPriorityListUTRA-TDD'(Data);
encode_disp('FreqPriorityUTRA-FDD',Data) -> 'enc_FreqPriorityUTRA-FDD'(Data);
encode_disp('FreqPriorityListUTRA-FDD',Data) -> 'enc_FreqPriorityListUTRA-FDD'(Data);
encode_disp('FreqsPriorityGERAN',Data) -> 'enc_FreqsPriorityGERAN'(Data);
encode_disp('FreqsPriorityListGERAN',Data) -> 'enc_FreqsPriorityListGERAN'(Data);
encode_disp('FreqPriorityEUTRA',Data) -> 'enc_FreqPriorityEUTRA'(Data);
encode_disp('FreqPriorityListEUTRA',Data) -> 'enc_FreqPriorityListEUTRA'(Data);
encode_disp('IdleModeMobilityControlInfo',Data) -> 'enc_IdleModeMobilityControlInfo'(Data);
encode_disp('RedirectedCarrierInfo',Data) -> 'enc_RedirectedCarrierInfo'(Data);
encode_disp('ReleaseCause',Data) -> 'enc_ReleaseCause'(Data);
encode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'enc_RRCConnectionRelease-r8-IEs'(Data);
encode_disp('RRCConnectionRelease',Data) -> 'enc_RRCConnectionRelease'(Data);
encode_disp('RRCConnectionReject-r8-IEs',Data) -> 'enc_RRCConnectionReject-r8-IEs'(Data);
encode_disp('RRCConnectionReject',Data) -> 'enc_RRCConnectionReject'(Data);
encode_disp('ReestablishmentCause',Data) -> 'enc_ReestablishmentCause'(Data);
encode_disp('ReestabUE-Identity',Data) -> 'enc_ReestabUE-Identity'(Data);
encode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentRequest',Data) -> 'enc_RRCConnectionReestablishmentRequest'(Data);
encode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentReject-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentReject',Data) -> 'enc_RRCConnectionReestablishmentReject'(Data);
encode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishmentComplete',Data) -> 'enc_RRCConnectionReestablishmentComplete'(Data);
encode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'enc_RRCConnectionReestablishment-r8-IEs'(Data);
encode_disp('RRCConnectionReestablishment',Data) -> 'enc_RRCConnectionReestablishment'(Data);
encode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Data);
encode_disp('RRCConnectionReconfigurationComplete',Data) -> 'enc_RRCConnectionReconfigurationComplete'(Data);
encode_disp('SecurityConfigHO',Data) -> 'enc_SecurityConfigHO'(Data);
encode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'enc_RRCConnectionReconfiguration-r8-IEs'(Data);
encode_disp('RRCConnectionReconfiguration',Data) -> 'enc_RRCConnectionReconfiguration'(Data);
encode_disp('IMSI-Digit',Data) -> 'enc_IMSI-Digit'(Data);
encode_disp('IMSI',Data) -> 'enc_IMSI'(Data);
encode_disp('PagingUE-Identity',Data) -> 'enc_PagingUE-Identity'(Data);
encode_disp('PagingRecord',Data) -> 'enc_PagingRecord'(Data);
encode_disp('PagingRecordList',Data) -> 'enc_PagingRecordList'(Data);
encode_disp('Paging',Data) -> 'enc_Paging'(Data);
encode_disp('SystemInfoListGERAN',Data) -> 'enc_SystemInfoListGERAN'(Data);
encode_disp('SI-OrPSI-GERAN',Data) -> 'enc_SI-OrPSI-GERAN'(Data);
encode_disp('CellChangeOrder',Data) -> 'enc_CellChangeOrder'(Data);
encode_disp('Handover',Data) -> 'enc_Handover'(Data);
encode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'enc_MobilityFromEUTRACommand-r8-IEs'(Data);
encode_disp('MobilityFromEUTRACommand',Data) -> 'enc_MobilityFromEUTRACommand'(Data);
encode_disp('MeasurementReport-r8-IEs',Data) -> 'enc_MeasurementReport-r8-IEs'(Data);
encode_disp('MeasurementReport',Data) -> 'enc_MeasurementReport'(Data);
encode_disp('MasterInformationBlock',Data) -> 'enc_MasterInformationBlock'(Data);
encode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data);
encode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'enc_HandoverFromEUTRAPreparationRequest'(Data);
encode_disp('DLInformationTransfer-r8-IEs',Data) -> 'enc_DLInformationTransfer-r8-IEs'(Data);
encode_disp('DLInformationTransfer',Data) -> 'enc_DLInformationTransfer'(Data);
encode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Data);
encode_disp('CSFBParametersResponseCDMA2000',Data) -> 'enc_CSFBParametersResponseCDMA2000'(Data);
encode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Data);
encode_disp('CSFBParametersRequestCDMA2000',Data) -> 'enc_CSFBParametersRequestCDMA2000'(Data);
encode_disp('DRB-CountInfo',Data) -> 'enc_DRB-CountInfo'(Data);
encode_disp('DRB-CountInfoList',Data) -> 'enc_DRB-CountInfoList'(Data);
encode_disp('CounterCheckResponse-r8-IEs',Data) -> 'enc_CounterCheckResponse-r8-IEs'(Data);
encode_disp('CounterCheckResponse',Data) -> 'enc_CounterCheckResponse'(Data);
encode_disp('DRB-CountMSB-Info',Data) -> 'enc_DRB-CountMSB-Info'(Data);
encode_disp('DRB-CountMSB-InfoList',Data) -> 'enc_DRB-CountMSB-InfoList'(Data);
encode_disp('CounterCheck-r8-IEs',Data) -> 'enc_CounterCheck-r8-IEs'(Data);
encode_disp('CounterCheck',Data) -> 'enc_CounterCheck'(Data);
encode_disp('UL-DCCH-MessageType',Data) -> 'enc_UL-DCCH-MessageType'(Data);
encode_disp('UL-DCCH-Message',Data) -> 'enc_UL-DCCH-Message'(Data);
encode_disp('UL-CCCH-MessageType',Data) -> 'enc_UL-CCCH-MessageType'(Data);
encode_disp('UL-CCCH-Message',Data) -> 'enc_UL-CCCH-Message'(Data);
encode_disp('DL-DCCH-MessageType',Data) -> 'enc_DL-DCCH-MessageType'(Data);
encode_disp('DL-DCCH-Message',Data) -> 'enc_DL-DCCH-Message'(Data);
encode_disp('DL-CCCH-MessageType',Data) -> 'enc_DL-CCCH-MessageType'(Data);
encode_disp('DL-CCCH-Message',Data) -> 'enc_DL-CCCH-Message'(Data);
encode_disp('PCCH-MessageType',Data) -> 'enc_PCCH-MessageType'(Data);
encode_disp('PCCH-Message',Data) -> 'enc_PCCH-Message'(Data);
encode_disp('BCCH-DL-SCH-MessageType',Data) -> 'enc_BCCH-DL-SCH-MessageType'(Data);
encode_disp('BCCH-DL-SCH-Message',Data) -> 'enc_BCCH-DL-SCH-Message'(Data);
encode_disp('BCCH-BCH-MessageType',Data) -> 'enc_BCCH-BCH-MessageType'(Data);
encode_disp('BCCH-BCH-Message',Data) -> 'enc_BCCH-BCH-Message'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('UE-TimersAndConstants',Data) -> 'dec_UE-TimersAndConstants'(Data);
decode_disp('SupportedBandList1XRTT',Data) -> 'dec_SupportedBandList1XRTT'(Data);
decode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'dec_IRAT-ParametersCDMA2000-1XRTT'(Data);
decode_disp('SupportedBandListHRPD',Data) -> 'dec_SupportedBandListHRPD'(Data);
decode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'dec_IRAT-ParametersCDMA2000-HRPD'(Data);
decode_disp('SupportedBandGERAN',Data) -> 'dec_SupportedBandGERAN'(Data);
decode_disp('SupportedBandListGERAN',Data) -> 'dec_SupportedBandListGERAN'(Data);
decode_disp('IRAT-ParametersGERAN',Data) -> 'dec_IRAT-ParametersGERAN'(Data);
decode_disp('SupportedBandUTRA-TDD768',Data) -> 'dec_SupportedBandUTRA-TDD768'(Data);
decode_disp('SupportedBandListUTRA-TDD768',Data) -> 'dec_SupportedBandListUTRA-TDD768'(Data);
decode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'dec_IRAT-ParametersUTRA-TDD768'(Data);
decode_disp('SupportedBandUTRA-TDD384',Data) -> 'dec_SupportedBandUTRA-TDD384'(Data);
decode_disp('SupportedBandListUTRA-TDD384',Data) -> 'dec_SupportedBandListUTRA-TDD384'(Data);
decode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'dec_IRAT-ParametersUTRA-TDD384'(Data);
decode_disp('SupportedBandUTRA-TDD128',Data) -> 'dec_SupportedBandUTRA-TDD128'(Data);
decode_disp('SupportedBandListUTRA-TDD128',Data) -> 'dec_SupportedBandListUTRA-TDD128'(Data);
decode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'dec_IRAT-ParametersUTRA-TDD128'(Data);
decode_disp('SupportedBandUTRA-FDD',Data) -> 'dec_SupportedBandUTRA-FDD'(Data);
decode_disp('SupportedBandListUTRA-FDD',Data) -> 'dec_SupportedBandListUTRA-FDD'(Data);
decode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'dec_IRAT-ParametersUTRA-FDD'(Data);
decode_disp('InterRAT-BandInfo',Data) -> 'dec_InterRAT-BandInfo'(Data);
decode_disp('InterRAT-BandList',Data) -> 'dec_InterRAT-BandList'(Data);
decode_disp('InterFreqBandInfo',Data) -> 'dec_InterFreqBandInfo'(Data);
decode_disp('InterFreqBandList',Data) -> 'dec_InterFreqBandList'(Data);
decode_disp('BandInfoEUTRA',Data) -> 'dec_BandInfoEUTRA'(Data);
decode_disp('BandListEUTRA',Data) -> 'dec_BandListEUTRA'(Data);
decode_disp('MeasParameters',Data) -> 'dec_MeasParameters'(Data);
decode_disp('SupportedBandEUTRA',Data) -> 'dec_SupportedBandEUTRA'(Data);
decode_disp('SupportedBandListEUTRA',Data) -> 'dec_SupportedBandListEUTRA'(Data);
decode_disp('RF-Parameters',Data) -> 'dec_RF-Parameters'(Data);
decode_disp('PhyLayerParameters',Data) -> 'dec_PhyLayerParameters'(Data);
decode_disp('PDCP-Parameters',Data) -> 'dec_PDCP-Parameters'(Data);
decode_disp('AccessStratumRelease',Data) -> 'dec_AccessStratumRelease'(Data);
decode_disp('UE-EUTRA-Capability',Data) -> 'dec_UE-EUTRA-Capability'(Data);
decode_disp('UE-CapabilityRAT-Container',Data) -> 'dec_UE-CapabilityRAT-Container'(Data);
decode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'dec_UE-CapabilityRAT-ContainerList'(Data);
decode_disp('S-TMSI',Data) -> 'dec_S-TMSI'(Data);
decode_disp('RRC-TransactionIdentifier',Data) -> 'dec_RRC-TransactionIdentifier'(Data);
decode_disp('RAT-Type',Data) -> 'dec_RAT-Type'(Data);
decode_disp('RAND-CDMA2000',Data) -> 'dec_RAND-CDMA2000'(Data);
decode_disp('NeighCellConfig',Data) -> 'dec_NeighCellConfig'(Data);
decode_disp('MMEC',Data) -> 'dec_MMEC'(Data);
decode_disp('FilterCoefficient',Data) -> 'dec_FilterCoefficient'(Data);
decode_disp('DedicatedInfoNAS',Data) -> 'dec_DedicatedInfoNAS'(Data);
decode_disp('DedicatedInfoCDMA2000',Data) -> 'dec_DedicatedInfoCDMA2000'(Data);
decode_disp('C-RNTI',Data) -> 'dec_C-RNTI'(Data);
decode_disp('TimeToTrigger',Data) -> 'dec_TimeToTrigger'(Data);
decode_disp('RSRQ-Range',Data) -> 'dec_RSRQ-Range'(Data);
decode_disp('RSRP-Range',Data) -> 'dec_RSRP-Range'(Data);
decode_disp('ReportInterval',Data) -> 'dec_ReportInterval'(Data);
decode_disp('ReportConfigToAddMod',Data) -> 'dec_ReportConfigToAddMod'(Data);
decode_disp('ReportConfigToAddModList',Data) -> 'dec_ReportConfigToAddModList'(Data);
decode_disp('ThresholdCDMA2000',Data) -> 'dec_ThresholdCDMA2000'(Data);
decode_disp('ThresholdGERAN',Data) -> 'dec_ThresholdGERAN'(Data);
decode_disp('ThresholdUTRA',Data) -> 'dec_ThresholdUTRA'(Data);
decode_disp('ReportConfigInterRAT',Data) -> 'dec_ReportConfigInterRAT'(Data);
decode_disp('ReportConfigId',Data) -> 'dec_ReportConfigId'(Data);
decode_disp('ThresholdEUTRA',Data) -> 'dec_ThresholdEUTRA'(Data);
decode_disp('ReportConfigEUTRA',Data) -> 'dec_ReportConfigEUTRA'(Data);
decode_disp('QuantityConfigCDMA2000',Data) -> 'dec_QuantityConfigCDMA2000'(Data);
decode_disp('QuantityConfigGERAN',Data) -> 'dec_QuantityConfigGERAN'(Data);
decode_disp('QuantityConfigUTRA',Data) -> 'dec_QuantityConfigUTRA'(Data);
decode_disp('QuantityConfigEUTRA',Data) -> 'dec_QuantityConfigEUTRA'(Data);
decode_disp('QuantityConfig',Data) -> 'dec_QuantityConfig'(Data);
decode_disp('PLMN-IdentityList2',Data) -> 'dec_PLMN-IdentityList2'(Data);
decode_disp('MeasResultCDMA2000',Data) -> 'dec_MeasResultCDMA2000'(Data);
decode_disp('MeasResultListCDMA2000',Data) -> 'dec_MeasResultListCDMA2000'(Data);
decode_disp('MeasResultsCDMA2000',Data) -> 'dec_MeasResultsCDMA2000'(Data);
decode_disp('MeasResultGERAN',Data) -> 'dec_MeasResultGERAN'(Data);
decode_disp('MeasResultListGERAN',Data) -> 'dec_MeasResultListGERAN'(Data);
decode_disp('MeasResultUTRA',Data) -> 'dec_MeasResultUTRA'(Data);
decode_disp('MeasResultListUTRA',Data) -> 'dec_MeasResultListUTRA'(Data);
decode_disp('MeasResultEUTRA',Data) -> 'dec_MeasResultEUTRA'(Data);
decode_disp('MeasResultListEUTRA',Data) -> 'dec_MeasResultListEUTRA'(Data);
decode_disp('MeasResults',Data) -> 'dec_MeasResults'(Data);
decode_disp('CellsToAddModUTRA-TDD',Data) -> 'dec_CellsToAddModUTRA-TDD'(Data);
decode_disp('CellsToAddModListUTRA-TDD',Data) -> 'dec_CellsToAddModListUTRA-TDD'(Data);
decode_disp('CellsToAddModUTRA-FDD',Data) -> 'dec_CellsToAddModUTRA-FDD'(Data);
decode_disp('CellsToAddModListUTRA-FDD',Data) -> 'dec_CellsToAddModListUTRA-FDD'(Data);
decode_disp('MeasObjectUTRA',Data) -> 'dec_MeasObjectUTRA'(Data);
decode_disp('MeasObjectToAddMod',Data) -> 'dec_MeasObjectToAddMod'(Data);
decode_disp('MeasObjectToAddModList',Data) -> 'dec_MeasObjectToAddModList'(Data);
decode_disp('MeasObjectId',Data) -> 'dec_MeasObjectId'(Data);
decode_disp('MeasObjectGERAN',Data) -> 'dec_MeasObjectGERAN'(Data);
decode_disp('BlackCellsToAddMod',Data) -> 'dec_BlackCellsToAddMod'(Data);
decode_disp('BlackCellsToAddModList',Data) -> 'dec_BlackCellsToAddModList'(Data);
decode_disp('CellsToAddMod',Data) -> 'dec_CellsToAddMod'(Data);
decode_disp('CellsToAddModList',Data) -> 'dec_CellsToAddModList'(Data);
decode_disp('MeasObjectEUTRA',Data) -> 'dec_MeasObjectEUTRA'(Data);
decode_disp('CellsToAddModCDMA2000',Data) -> 'dec_CellsToAddModCDMA2000'(Data);
decode_disp('CellsToAddModListCDMA2000',Data) -> 'dec_CellsToAddModListCDMA2000'(Data);
decode_disp('MeasObjectCDMA2000',Data) -> 'dec_MeasObjectCDMA2000'(Data);
decode_disp('MeasIdToAddMod',Data) -> 'dec_MeasIdToAddMod'(Data);
decode_disp('MeasIdToAddModList',Data) -> 'dec_MeasIdToAddModList'(Data);
decode_disp('MeasId',Data) -> 'dec_MeasId'(Data);
decode_disp('MeasGapConfig',Data) -> 'dec_MeasGapConfig'(Data);
decode_disp('ReportConfigToRemoveList',Data) -> 'dec_ReportConfigToRemoveList'(Data);
decode_disp('MeasObjectToRemoveList',Data) -> 'dec_MeasObjectToRemoveList'(Data);
decode_disp('MeasIdToRemoveList',Data) -> 'dec_MeasIdToRemoveList'(Data);
decode_disp('MeasConfig',Data) -> 'dec_MeasConfig'(Data);
decode_disp('Hysteresis',Data) -> 'dec_Hysteresis'(Data);
decode_disp('AllowedMeasBandwidth',Data) -> 'dec_AllowedMeasBandwidth'(Data);
decode_disp('T-Reselection',Data) -> 'dec_T-Reselection'(Data);
decode_disp('TrackingAreaCode',Data) -> 'dec_TrackingAreaCode'(Data);
decode_disp('SystemTimeInfoCDMA2000',Data) -> 'dec_SystemTimeInfoCDMA2000'(Data);
decode_disp('SpeedStateScaleFactors',Data) -> 'dec_SpeedStateScaleFactors'(Data);
decode_disp('ReselectionThreshold',Data) -> 'dec_ReselectionThreshold'(Data);
decode_disp('Q-OffsetRangeInterRAT',Data) -> 'dec_Q-OffsetRangeInterRAT'(Data);
decode_disp('Q-OffsetRange',Data) -> 'dec_Q-OffsetRange'(Data);
decode_disp('Q-RxLevMin',Data) -> 'dec_Q-RxLevMin'(Data);
decode_disp('PreRegistrationZoneIdHRPD',Data) -> 'dec_PreRegistrationZoneIdHRPD'(Data);
decode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'dec_SecondaryPreRegistrationZoneIdListHRPD'(Data);
decode_disp('PreRegistrationInfoHRPD',Data) -> 'dec_PreRegistrationInfoHRPD'(Data);
decode_disp('MCC-MNC-Digit',Data) -> 'dec_MCC-MNC-Digit'(Data);
decode_disp('MNC',Data) -> 'dec_MNC'(Data);
decode_disp('MCC',Data) -> 'dec_MCC'(Data);
decode_disp('PLMN-Identity',Data) -> 'dec_PLMN-Identity'(Data);
decode_disp('PhysCellIdUTRA-TDD',Data) -> 'dec_PhysCellIdUTRA-TDD'(Data);
decode_disp('PhysCellIdUTRA-FDD',Data) -> 'dec_PhysCellIdUTRA-FDD'(Data);
decode_disp('PhysCellIdGERAN',Data) -> 'dec_PhysCellIdGERAN'(Data);
decode_disp('PhysCellIdCDMA2000',Data) -> 'dec_PhysCellIdCDMA2000'(Data);
decode_disp('PhysCellIdRange',Data) -> 'dec_PhysCellIdRange'(Data);
decode_disp('PhysCellId',Data) -> 'dec_PhysCellId'(Data);
decode_disp('MobilityStateParameters',Data) -> 'dec_MobilityStateParameters'(Data);
decode_disp('MobilityParametersCDMA2000',Data) -> 'dec_MobilityParametersCDMA2000'(Data);
decode_disp('CarrierFreqEUTRA',Data) -> 'dec_CarrierFreqEUTRA'(Data);
decode_disp('CarrierBandwidthEUTRA',Data) -> 'dec_CarrierBandwidthEUTRA'(Data);
decode_disp('MobilityControlInfo',Data) -> 'dec_MobilityControlInfo'(Data);
decode_disp('CellGlobalIdCDMA2000',Data) -> 'dec_CellGlobalIdCDMA2000'(Data);
decode_disp('CellGlobalIdGERAN',Data) -> 'dec_CellGlobalIdGERAN'(Data);
decode_disp('CellGlobalIdUTRA',Data) -> 'dec_CellGlobalIdUTRA'(Data);
decode_disp('CellGlobalIdEUTRA',Data) -> 'dec_CellGlobalIdEUTRA'(Data);
decode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'dec_CSFB-RegistrationParam1XRTT'(Data);
decode_disp('CellReselectionPriority',Data) -> 'dec_CellReselectionPriority'(Data);
decode_disp('CellIndex',Data) -> 'dec_CellIndex'(Data);
decode_disp('CellIndexList',Data) -> 'dec_CellIndexList'(Data);
decode_disp('CellIdentity',Data) -> 'dec_CellIdentity'(Data);
decode_disp('CDMA2000-Type',Data) -> 'dec_CDMA2000-Type'(Data);
decode_disp('ExplicitListOfARFCNs',Data) -> 'dec_ExplicitListOfARFCNs'(Data);
decode_disp('CarrierFreqsGERAN',Data) -> 'dec_CarrierFreqsGERAN'(Data);
decode_disp('CarrierFreqGERAN',Data) -> 'dec_CarrierFreqGERAN'(Data);
decode_disp('CarrierFreqCDMA2000',Data) -> 'dec_CarrierFreqCDMA2000'(Data);
decode_disp('BandIndicatorGERAN',Data) -> 'dec_BandIndicatorGERAN'(Data);
decode_disp('BandclassCDMA2000',Data) -> 'dec_BandclassCDMA2000'(Data);
decode_disp('ARFCN-ValueUTRA',Data) -> 'dec_ARFCN-ValueUTRA'(Data);
decode_disp('ARFCN-ValueGERAN',Data) -> 'dec_ARFCN-ValueGERAN'(Data);
decode_disp('ARFCN-ValueEUTRA',Data) -> 'dec_ARFCN-ValueEUTRA'(Data);
decode_disp('ARFCN-ValueCDMA2000',Data) -> 'dec_ARFCN-ValueCDMA2000'(Data);
decode_disp('AdditionalSpectrumEmission',Data) -> 'dec_AdditionalSpectrumEmission'(Data);
decode_disp('ShortMAC-I',Data) -> 'dec_ShortMAC-I'(Data);
decode_disp('SecurityAlgorithmConfig',Data) -> 'dec_SecurityAlgorithmConfig'(Data);
decode_disp('NextHopChainingCount',Data) -> 'dec_NextHopChainingCount'(Data);
decode_disp('DeltaFList-PUCCH',Data) -> 'dec_DeltaFList-PUCCH'(Data);
decode_disp('UplinkPowerControlDedicated',Data) -> 'dec_UplinkPowerControlDedicated'(Data);
decode_disp('UplinkPowerControlCommon',Data) -> 'dec_UplinkPowerControlCommon'(Data);
decode_disp('TPC-Index',Data) -> 'dec_TPC-Index'(Data);
decode_disp('TPC-PDCCH-Config',Data) -> 'dec_TPC-PDCCH-Config'(Data);
decode_disp('TimeAlignmentTimer',Data) -> 'dec_TimeAlignmentTimer'(Data);
decode_disp('TDD-Config',Data) -> 'dec_TDD-Config'(Data);
decode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'dec_N1-PUCCH-AN-PersistentList'(Data);
decode_disp('SPS-ConfigUL',Data) -> 'dec_SPS-ConfigUL'(Data);
decode_disp('SPS-ConfigDL',Data) -> 'dec_SPS-ConfigDL'(Data);
decode_disp('SPS-Config',Data) -> 'dec_SPS-Config'(Data);
decode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'dec_SoundingRS-UL-ConfigDedicated'(Data);
decode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'dec_SoundingRS-UL-ConfigCommon'(Data);
decode_disp('SchedulingRequestConfig',Data) -> 'dec_SchedulingRequestConfig'(Data);
decode_disp('T-StatusProhibit',Data) -> 'dec_T-StatusProhibit'(Data);
decode_disp('T-Reordering',Data) -> 'dec_T-Reordering'(Data);
decode_disp('PollByte',Data) -> 'dec_PollByte'(Data);
decode_disp('PollPDU',Data) -> 'dec_PollPDU'(Data);
decode_disp('T-PollRetransmit',Data) -> 'dec_T-PollRetransmit'(Data);
decode_disp('SN-FieldLength',Data) -> 'dec_SN-FieldLength'(Data);
decode_disp('DL-UM-RLC',Data) -> 'dec_DL-UM-RLC'(Data);
decode_disp('UL-UM-RLC',Data) -> 'dec_UL-UM-RLC'(Data);
decode_disp('DL-AM-RLC',Data) -> 'dec_DL-AM-RLC'(Data);
decode_disp('UL-AM-RLC',Data) -> 'dec_UL-AM-RLC'(Data);
decode_disp('RLC-Config',Data) -> 'dec_RLC-Config'(Data);
decode_disp('DRB-ToReleaseList',Data) -> 'dec_DRB-ToReleaseList'(Data);
decode_disp('DRB-ToAddMod',Data) -> 'dec_DRB-ToAddMod'(Data);
decode_disp('DRB-ToAddModList',Data) -> 'dec_DRB-ToAddModList'(Data);
decode_disp('SRB-ToAddMod',Data) -> 'dec_SRB-ToAddMod'(Data);
decode_disp('SRB-ToAddModList',Data) -> 'dec_SRB-ToAddModList'(Data);
decode_disp('RadioResourceConfigDedicated',Data) -> 'dec_RadioResourceConfigDedicated'(Data);
decode_disp('UL-CyclicPrefixLength',Data) -> 'dec_UL-CyclicPrefixLength'(Data);
decode_disp('PCCH-Config',Data) -> 'dec_PCCH-Config'(Data);
decode_disp('BCCH-Config',Data) -> 'dec_BCCH-Config'(Data);
decode_disp('RadioResourceConfigCommon',Data) -> 'dec_RadioResourceConfigCommon'(Data);
decode_disp('RadioResourceConfigCommonSIB',Data) -> 'dec_RadioResourceConfigCommonSIB'(Data);
decode_disp('RACH-ConfigDedicated',Data) -> 'dec_RACH-ConfigDedicated'(Data);
decode_disp('RACH-ConfigCommon',Data) -> 'dec_RACH-ConfigCommon'(Data);
decode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'dec_UL-ReferenceSignalsPUSCH'(Data);
decode_disp('PUSCH-ConfigDedicated',Data) -> 'dec_PUSCH-ConfigDedicated'(Data);
decode_disp('PUSCH-ConfigCommon',Data) -> 'dec_PUSCH-ConfigCommon'(Data);
decode_disp('PUCCH-ConfigDedicated',Data) -> 'dec_PUCCH-ConfigDedicated'(Data);
decode_disp('PUCCH-ConfigCommon',Data) -> 'dec_PUCCH-ConfigCommon'(Data);
decode_disp('PresenceAntennaPort1',Data) -> 'dec_PresenceAntennaPort1'(Data);
decode_disp('PRACH-ConfigInfo',Data) -> 'dec_PRACH-ConfigInfo'(Data);
decode_disp('PRACH-Config',Data) -> 'dec_PRACH-Config'(Data);
decode_disp('PRACH-ConfigSIB',Data) -> 'dec_PRACH-ConfigSIB'(Data);
decode_disp('P-Max',Data) -> 'dec_P-Max'(Data);
decode_disp('PhysicalConfigDedicated',Data) -> 'dec_PhysicalConfigDedicated'(Data);
decode_disp('PHICH-Config',Data) -> 'dec_PHICH-Config'(Data);
decode_disp('PDSCH-ConfigDedicated',Data) -> 'dec_PDSCH-ConfigDedicated'(Data);
decode_disp('PDSCH-ConfigCommon',Data) -> 'dec_PDSCH-ConfigCommon'(Data);
decode_disp('PDCP-Config',Data) -> 'dec_PDCP-Config'(Data);
decode_disp('DRX-Config',Data) -> 'dec_DRX-Config'(Data);
decode_disp('MAC-MainConfig',Data) -> 'dec_MAC-MainConfig'(Data);
decode_disp('LogicalChannelConfig',Data) -> 'dec_LogicalChannelConfig'(Data);
decode_disp('DRB-Identity',Data) -> 'dec_DRB-Identity'(Data);
decode_disp('CQI-ReportPeriodic',Data) -> 'dec_CQI-ReportPeriodic'(Data);
decode_disp('CQI-ReportConfig',Data) -> 'dec_CQI-ReportConfig'(Data);
decode_disp('AntennaInfoDedicated',Data) -> 'dec_AntennaInfoDedicated'(Data);
decode_disp('AntennaInfoCommon',Data) -> 'dec_AntennaInfoCommon'(Data);
decode_disp('SystemInformationBlockType11',Data) -> 'dec_SystemInformationBlockType11'(Data);
decode_disp('SystemInformationBlockType10',Data) -> 'dec_SystemInformationBlockType10'(Data);
decode_disp('SystemInformationBlockType9',Data) -> 'dec_SystemInformationBlockType9'(Data);
decode_disp('BandClassInfoCDMA2000',Data) -> 'dec_BandClassInfoCDMA2000'(Data);
decode_disp('BandClassListCDMA2000',Data) -> 'dec_BandClassListCDMA2000'(Data);
decode_disp('PhysCellIdListCDMA2000',Data) -> 'dec_PhysCellIdListCDMA2000'(Data);
decode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'dec_NeighCellsPerBandclassCDMA2000'(Data);
decode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'dec_NeighCellsPerBandclassListCDMA2000'(Data);
decode_disp('NeighCellCDMA2000',Data) -> 'dec_NeighCellCDMA2000'(Data);
decode_disp('NeighCellListCDMA2000',Data) -> 'dec_NeighCellListCDMA2000'(Data);
decode_disp('CellReselectionParametersCDMA2000',Data) -> 'dec_CellReselectionParametersCDMA2000'(Data);
decode_disp('SystemInformationBlockType8',Data) -> 'dec_SystemInformationBlockType8'(Data);
decode_disp('CarrierFreqsInfoGERAN',Data) -> 'dec_CarrierFreqsInfoGERAN'(Data);
decode_disp('CarrierFreqsInfoListGERAN',Data) -> 'dec_CarrierFreqsInfoListGERAN'(Data);
decode_disp('SystemInformationBlockType7',Data) -> 'dec_SystemInformationBlockType7'(Data);
decode_disp('CarrierFreqUTRA-TDD',Data) -> 'dec_CarrierFreqUTRA-TDD'(Data);
decode_disp('CarrierFreqListUTRA-TDD',Data) -> 'dec_CarrierFreqListUTRA-TDD'(Data);
decode_disp('CarrierFreqUTRA-FDD',Data) -> 'dec_CarrierFreqUTRA-FDD'(Data);
decode_disp('CarrierFreqListUTRA-FDD',Data) -> 'dec_CarrierFreqListUTRA-FDD'(Data);
decode_disp('SystemInformationBlockType6',Data) -> 'dec_SystemInformationBlockType6'(Data);
decode_disp('InterFreqBlackCellList',Data) -> 'dec_InterFreqBlackCellList'(Data);
decode_disp('InterFreqNeighCellInfo',Data) -> 'dec_InterFreqNeighCellInfo'(Data);
decode_disp('InterFreqNeighCellList',Data) -> 'dec_InterFreqNeighCellList'(Data);
decode_disp('InterFreqCarrierFreqInfo',Data) -> 'dec_InterFreqCarrierFreqInfo'(Data);
decode_disp('InterFreqCarrierFreqList',Data) -> 'dec_InterFreqCarrierFreqList'(Data);
decode_disp('SystemInformationBlockType5',Data) -> 'dec_SystemInformationBlockType5'(Data);
decode_disp('IntraFreqBlackCellList',Data) -> 'dec_IntraFreqBlackCellList'(Data);
decode_disp('IntraFreqNeighCellInfo',Data) -> 'dec_IntraFreqNeighCellInfo'(Data);
decode_disp('IntraFreqNeighCellList',Data) -> 'dec_IntraFreqNeighCellList'(Data);
decode_disp('SystemInformationBlockType4',Data) -> 'dec_SystemInformationBlockType4'(Data);
decode_disp('SystemInformationBlockType3',Data) -> 'dec_SystemInformationBlockType3'(Data);
decode_disp('MBSFN-SubframeConfig',Data) -> 'dec_MBSFN-SubframeConfig'(Data);
decode_disp('MBSFN-SubframeConfigList',Data) -> 'dec_MBSFN-SubframeConfigList'(Data);
decode_disp('AC-BarringConfig',Data) -> 'dec_AC-BarringConfig'(Data);
decode_disp('SystemInformationBlockType2',Data) -> 'dec_SystemInformationBlockType2'(Data);
decode_disp('ULInformationTransfer-r8-IEs',Data) -> 'dec_ULInformationTransfer-r8-IEs'(Data);
decode_disp('ULInformationTransfer',Data) -> 'dec_ULInformationTransfer'(Data);
decode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'dec_ULHandoverPreparationTransfer-r8-IEs'(Data);
decode_disp('ULHandoverPreparationTransfer',Data) -> 'dec_ULHandoverPreparationTransfer'(Data);
decode_disp('UECapabilityInformation-r8-IEs',Data) -> 'dec_UECapabilityInformation-r8-IEs'(Data);
decode_disp('UECapabilityInformation',Data) -> 'dec_UECapabilityInformation'(Data);
decode_disp('UE-CapabilityRequest',Data) -> 'dec_UE-CapabilityRequest'(Data);
decode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'dec_UECapabilityEnquiry-r8-IEs'(Data);
decode_disp('UECapabilityEnquiry',Data) -> 'dec_UECapabilityEnquiry'(Data);
decode_disp('SIB-Type',Data) -> 'dec_SIB-Type'(Data);
decode_disp('SIB-MappingInfo',Data) -> 'dec_SIB-MappingInfo'(Data);
decode_disp('SchedulingInfo',Data) -> 'dec_SchedulingInfo'(Data);
decode_disp('SchedulingInfoList',Data) -> 'dec_SchedulingInfoList'(Data);
decode_disp('PLMN-IdentityInfo',Data) -> 'dec_PLMN-IdentityInfo'(Data);
decode_disp('PLMN-IdentityList',Data) -> 'dec_PLMN-IdentityList'(Data);
decode_disp('SystemInformationBlockType1',Data) -> 'dec_SystemInformationBlockType1'(Data);
decode_disp('SystemInformation-r8-IEs',Data) -> 'dec_SystemInformation-r8-IEs'(Data);
decode_disp('SystemInformation',Data) -> 'dec_SystemInformation'(Data);
decode_disp('SecurityModeFailure-r8-IEs',Data) -> 'dec_SecurityModeFailure-r8-IEs'(Data);
decode_disp('SecurityModeFailure',Data) -> 'dec_SecurityModeFailure'(Data);
decode_disp('SecurityModeComplete-r8-IEs',Data) -> 'dec_SecurityModeComplete-r8-IEs'(Data);
decode_disp('SecurityModeComplete',Data) -> 'dec_SecurityModeComplete'(Data);
decode_disp('SecurityConfigSMC',Data) -> 'dec_SecurityConfigSMC'(Data);
decode_disp('SecurityModeCommand-r8-IEs',Data) -> 'dec_SecurityModeCommand-r8-IEs'(Data);
decode_disp('SecurityModeCommand',Data) -> 'dec_SecurityModeCommand'(Data);
decode_disp('RegisteredMME',Data) -> 'dec_RegisteredMME'(Data);
decode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'dec_RRCConnectionSetupComplete-r8-IEs'(Data);
decode_disp('RRCConnectionSetupComplete',Data) -> 'dec_RRCConnectionSetupComplete'(Data);
decode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'dec_RRCConnectionSetup-r8-IEs'(Data);
decode_disp('RRCConnectionSetup',Data) -> 'dec_RRCConnectionSetup'(Data);
decode_disp('EstablishmentCause',Data) -> 'dec_EstablishmentCause'(Data);
decode_disp('InitialUE-Identity',Data) -> 'dec_InitialUE-Identity'(Data);
decode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'dec_RRCConnectionRequest-r8-IEs'(Data);
decode_disp('RRCConnectionRequest',Data) -> 'dec_RRCConnectionRequest'(Data);
decode_disp('BandClassPriority1XRTT',Data) -> 'dec_BandClassPriority1XRTT'(Data);
decode_disp('BandClassPriorityList1XRTT',Data) -> 'dec_BandClassPriorityList1XRTT'(Data);
decode_disp('BandClassPriorityHRPD',Data) -> 'dec_BandClassPriorityHRPD'(Data);
decode_disp('BandClassPriorityListHRPD',Data) -> 'dec_BandClassPriorityListHRPD'(Data);
decode_disp('FreqPriorityUTRA-TDD',Data) -> 'dec_FreqPriorityUTRA-TDD'(Data);
decode_disp('FreqPriorityListUTRA-TDD',Data) -> 'dec_FreqPriorityListUTRA-TDD'(Data);
decode_disp('FreqPriorityUTRA-FDD',Data) -> 'dec_FreqPriorityUTRA-FDD'(Data);
decode_disp('FreqPriorityListUTRA-FDD',Data) -> 'dec_FreqPriorityListUTRA-FDD'(Data);
decode_disp('FreqsPriorityGERAN',Data) -> 'dec_FreqsPriorityGERAN'(Data);
decode_disp('FreqsPriorityListGERAN',Data) -> 'dec_FreqsPriorityListGERAN'(Data);
decode_disp('FreqPriorityEUTRA',Data) -> 'dec_FreqPriorityEUTRA'(Data);
decode_disp('FreqPriorityListEUTRA',Data) -> 'dec_FreqPriorityListEUTRA'(Data);
decode_disp('IdleModeMobilityControlInfo',Data) -> 'dec_IdleModeMobilityControlInfo'(Data);
decode_disp('RedirectedCarrierInfo',Data) -> 'dec_RedirectedCarrierInfo'(Data);
decode_disp('ReleaseCause',Data) -> 'dec_ReleaseCause'(Data);
decode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'dec_RRCConnectionRelease-r8-IEs'(Data);
decode_disp('RRCConnectionRelease',Data) -> 'dec_RRCConnectionRelease'(Data);
decode_disp('RRCConnectionReject-r8-IEs',Data) -> 'dec_RRCConnectionReject-r8-IEs'(Data);
decode_disp('RRCConnectionReject',Data) -> 'dec_RRCConnectionReject'(Data);
decode_disp('ReestablishmentCause',Data) -> 'dec_ReestablishmentCause'(Data);
decode_disp('ReestabUE-Identity',Data) -> 'dec_ReestabUE-Identity'(Data);
decode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentRequest',Data) -> 'dec_RRCConnectionReestablishmentRequest'(Data);
decode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentReject-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentReject',Data) -> 'dec_RRCConnectionReestablishmentReject'(Data);
decode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishmentComplete',Data) -> 'dec_RRCConnectionReestablishmentComplete'(Data);
decode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'dec_RRCConnectionReestablishment-r8-IEs'(Data);
decode_disp('RRCConnectionReestablishment',Data) -> 'dec_RRCConnectionReestablishment'(Data);
decode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Data);
decode_disp('RRCConnectionReconfigurationComplete',Data) -> 'dec_RRCConnectionReconfigurationComplete'(Data);
decode_disp('SecurityConfigHO',Data) -> 'dec_SecurityConfigHO'(Data);
decode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'dec_RRCConnectionReconfiguration-r8-IEs'(Data);
decode_disp('RRCConnectionReconfiguration',Data) -> 'dec_RRCConnectionReconfiguration'(Data);
decode_disp('IMSI-Digit',Data) -> 'dec_IMSI-Digit'(Data);
decode_disp('IMSI',Data) -> 'dec_IMSI'(Data);
decode_disp('PagingUE-Identity',Data) -> 'dec_PagingUE-Identity'(Data);
decode_disp('PagingRecord',Data) -> 'dec_PagingRecord'(Data);
decode_disp('PagingRecordList',Data) -> 'dec_PagingRecordList'(Data);
decode_disp('Paging',Data) -> 'dec_Paging'(Data);
decode_disp('SystemInfoListGERAN',Data) -> 'dec_SystemInfoListGERAN'(Data);
decode_disp('SI-OrPSI-GERAN',Data) -> 'dec_SI-OrPSI-GERAN'(Data);
decode_disp('CellChangeOrder',Data) -> 'dec_CellChangeOrder'(Data);
decode_disp('Handover',Data) -> 'dec_Handover'(Data);
decode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'dec_MobilityFromEUTRACommand-r8-IEs'(Data);
decode_disp('MobilityFromEUTRACommand',Data) -> 'dec_MobilityFromEUTRACommand'(Data);
decode_disp('MeasurementReport-r8-IEs',Data) -> 'dec_MeasurementReport-r8-IEs'(Data);
decode_disp('MeasurementReport',Data) -> 'dec_MeasurementReport'(Data);
decode_disp('MasterInformationBlock',Data) -> 'dec_MasterInformationBlock'(Data);
decode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data);
decode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'dec_HandoverFromEUTRAPreparationRequest'(Data);
decode_disp('DLInformationTransfer-r8-IEs',Data) -> 'dec_DLInformationTransfer-r8-IEs'(Data);
decode_disp('DLInformationTransfer',Data) -> 'dec_DLInformationTransfer'(Data);
decode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Data);
decode_disp('CSFBParametersResponseCDMA2000',Data) -> 'dec_CSFBParametersResponseCDMA2000'(Data);
decode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Data);
decode_disp('CSFBParametersRequestCDMA2000',Data) -> 'dec_CSFBParametersRequestCDMA2000'(Data);
decode_disp('DRB-CountInfo',Data) -> 'dec_DRB-CountInfo'(Data);
decode_disp('DRB-CountInfoList',Data) -> 'dec_DRB-CountInfoList'(Data);
decode_disp('CounterCheckResponse-r8-IEs',Data) -> 'dec_CounterCheckResponse-r8-IEs'(Data);
decode_disp('CounterCheckResponse',Data) -> 'dec_CounterCheckResponse'(Data);
decode_disp('DRB-CountMSB-Info',Data) -> 'dec_DRB-CountMSB-Info'(Data);
decode_disp('DRB-CountMSB-InfoList',Data) -> 'dec_DRB-CountMSB-InfoList'(Data);
decode_disp('CounterCheck-r8-IEs',Data) -> 'dec_CounterCheck-r8-IEs'(Data);
decode_disp('CounterCheck',Data) -> 'dec_CounterCheck'(Data);
decode_disp('UL-DCCH-MessageType',Data) -> 'dec_UL-DCCH-MessageType'(Data);
decode_disp('UL-DCCH-Message',Data) -> 'dec_UL-DCCH-Message'(Data);
decode_disp('UL-CCCH-MessageType',Data) -> 'dec_UL-CCCH-MessageType'(Data);
decode_disp('UL-CCCH-Message',Data) -> 'dec_UL-CCCH-Message'(Data);
decode_disp('DL-DCCH-MessageType',Data) -> 'dec_DL-DCCH-MessageType'(Data);
decode_disp('DL-DCCH-Message',Data) -> 'dec_DL-DCCH-Message'(Data);
decode_disp('DL-CCCH-MessageType',Data) -> 'dec_DL-CCCH-MessageType'(Data);
decode_disp('DL-CCCH-Message',Data) -> 'dec_DL-CCCH-Message'(Data);
decode_disp('PCCH-MessageType',Data) -> 'dec_PCCH-MessageType'(Data);
decode_disp('PCCH-Message',Data) -> 'dec_PCCH-Message'(Data);
decode_disp('BCCH-DL-SCH-MessageType',Data) -> 'dec_BCCH-DL-SCH-MessageType'(Data);
decode_disp('BCCH-DL-SCH-Message',Data) -> 'dec_BCCH-DL-SCH-Message'(Data);
decode_disp('BCCH-BCH-MessageType',Data) -> 'dec_BCCH-BCH-MessageType'(Data);
decode_disp('BCCH-BCH-Message',Data) -> 'dec_BCCH-BCH-Message'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_UE-TimersAndConstants'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input =:= ms100 ->
<<0:1,0:3>>;
Enc2@input =:= ms200 ->
<<0:1,1:3>>;
Enc2@input =:= ms300 ->
<<0:1,2:3>>;
Enc2@input =:= ms400 ->
<<0:1,3:3>>;
Enc2@input =:= ms600 ->
<<0:1,4:3>>;
Enc2@input =:= ms1000 ->
<<0:1,5:3>>;
Enc2@input =:= ms1500 ->
<<0:1,6:3>>;
Enc2@input =:= ms2000 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= ms100 ->
<<0:3>>;
Enc4@input =:= ms200 ->
<<1:3>>;
Enc4@input =:= ms300 ->
<<2:3>>;
Enc4@input =:= ms400 ->
<<3:3>>;
Enc4@input =:= ms600 ->
<<4:3>>;
Enc4@input =:= ms1000 ->
<<5:3>>;
Enc4@input =:= ms1500 ->
<<6:3>>;
Enc4@input =:= ms2000 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(4, Val),
if Enc6@input =:= ms0 ->
<<0:3>>;
Enc6@input =:= ms50 ->
<<1:3>>;
Enc6@input =:= ms100 ->
<<2:3>>;
Enc6@input =:= ms200 ->
<<3:3>>;
Enc6@input =:= ms500 ->
<<4:3>>;
Enc6@input =:= ms1000 ->
<<5:3>>;
Enc6@input =:= ms2000 ->
<<6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(5, Val),
if Enc8@input =:= n1 ->
<<0:3>>;
Enc8@input =:= n2 ->
<<1:3>>;
Enc8@input =:= n3 ->
<<2:3>>;
Enc8@input =:= n4 ->
<<3:3>>;
Enc8@input =:= n6 ->
<<4:3>>;
Enc8@input =:= n8 ->
<<5:3>>;
Enc8@input =:= n10 ->
<<6:3>>;
Enc8@input =:= n20 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(6, Val),
if Enc10@input =:= ms1000 ->
<<0:3>>;
Enc10@input =:= ms3000 ->
<<1:3>>;
Enc10@input =:= ms5000 ->
<<2:3>>;
Enc10@input =:= ms10000 ->
<<3:3>>;
Enc10@input =:= ms15000 ->
<<4:3>>;
Enc10@input =:= ms20000 ->
<<5:3>>;
Enc10@input =:= ms30000 ->
<<6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end|begin
Enc12@input = element(7, Val),
if Enc12@input =:= n1 ->
<<0:3>>;
Enc12@input =:= n2 ->
<<1:3>>;
Enc12@input =:= n3 ->
<<2:3>>;
Enc12@input =:= n4 ->
<<3:3>>;
Enc12@input =:= n5 ->
<<4:3>>;
Enc12@input =:= n6 ->
<<5:3>>;
Enc12@input =:= n8 ->
<<6:3>>;
Enc12@input =:= n10 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end].


'dec_UE-TimersAndConstants'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> ms100;
1 -> ms200;
2 -> ms300;
3 -> ms400;
4 -> ms600;
5 -> ms1000;
6 -> ms1500;
7 -> ms2000
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> ms100;
1 -> ms200;
2 -> ms300;
3 -> ms400;
4 -> ms600;
5 -> ms1000;
6 -> ms1500;
7 -> ms2000
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> ms0;
1 -> ms50;
2 -> ms100;
3 -> ms200;
4 -> ms500;
5 -> ms1000;
6 -> ms2000;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,[ms0,ms50,ms100,ms200,ms500,ms1000,ms2000]}}}})
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n6;
5 -> n8;
6 -> n10;
7 -> n20
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes6} = begin
<<V6@V0:3,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> ms1000;
1 -> ms3000;
2 -> ms5000;
3 -> ms10000;
4 -> ms15000;
5 -> ms20000;
6 -> ms30000;
_ -> exit({error,{asn1,{decode_enumerated,{V6@V0,[ms1000,ms3000,ms5000,ms10000,ms15000,ms20000,ms30000]}}}})
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type ENUMERATED
{Term6,Bytes7} = begin
<<V7@V0:3,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n5;
5 -> n6;
6 -> n8;
7 -> n10
end,
{V7@Int2,V7@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V8@V0,V8@Buf1} = case Bytes7 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<0:1,V8@V6:7,V8@Buf7/bitstring>> when V8@V6 =/= 0 ->
{V8@V6,V8@Buf7};
<<1:1,0:1,V8@V7:14,V8@Buf8/bitstring>> when V8@V7 =/= 0 ->
{V8@V7,V8@Buf8}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V9:V8@V0/bitstring-unit:1,V8@Buf10/bitstring>> = V8@Buf1,
{V8@V9,V8@Buf10}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'UE-TimersAndConstants',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_SupportedBandList1XRTT'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[if Comp =:= bc0 ->
<<0:1,0:5>>;
Comp =:= bc1 ->
<<0:1,1:5>>;
Comp =:= bc2 ->
<<0:1,2:5>>;
Comp =:= bc3 ->
<<0:1,3:5>>;
Comp =:= bc4 ->
<<0:1,4:5>>;
Comp =:= bc5 ->
<<0:1,5:5>>;
Comp =:= bc6 ->
<<0:1,6:5>>;
Comp =:= bc7 ->
<<0:1,7:5>>;
Comp =:= bc8 ->
<<0:1,8:5>>;
Comp =:= bc9 ->
<<0:1,9:5>>;
Comp =:= bc10 ->
<<0:1,10:5>>;
Comp =:= bc11 ->
<<0:1,11:5>>;
Comp =:= bc12 ->
<<0:1,12:5>>;
Comp =:= bc13 ->
<<0:1,13:5>>;
Comp =:= bc14 ->
<<0:1,14:5>>;
Comp =:= bc15 ->
<<0:1,15:5>>;
Comp =:= bc16 ->
<<0:1,16:5>>;
Comp =:= bc17 ->
<<0:1,17:5>>;
Comp =:= spare14 ->
<<0:1,18:5>>;
Comp =:= spare13 ->
<<0:1,19:5>>;
Comp =:= spare12 ->
<<0:1,20:5>>;
Comp =:= spare11 ->
<<0:1,21:5>>;
Comp =:= spare10 ->
<<0:1,22:5>>;
Comp =:= spare9 ->
<<0:1,23:5>>;
Comp =:= spare8 ->
<<0:1,24:5>>;
Comp =:= spare7 ->
<<0:1,25:5>>;
Comp =:= spare6 ->
<<0:1,26:5>>;
Comp =:= spare5 ->
<<0:1,27:5>>;
Comp =:= spare4 ->
<<0:1,28:5>>;
Comp =:= spare3 ->
<<0:1,29:5>>;
Comp =:= spare2 ->
<<0:1,30:5>>;
Comp =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_SupportedBandList1XRTT(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components1(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersCDMA2000-1XRTT'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_SupportedBandList1XRTT(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc4@input = element(4, Val),
if Enc2@input =:= single ->
if Enc4@input =:= single ->
<<0:1,0:1>>;
Enc4@input =:= dual ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
Enc2@input =:= dual ->
if Enc4@input =:= single ->
<<1:1,0:1>>;
Enc4@input =:= dual ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end].


'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes) ->

%% attribute number 1 with type SupportedBandList1XRTT
{Term1,Bytes1} = dec_SupportedBandList1XRTT(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> single;
1 -> dual
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> single;
1 -> dual
end,
{V2@Int2,V2@Buf1}
end,
{{'IRAT-ParametersCDMA2000-1XRTT',Term1,Term2,Term3},Bytes3}.

'enc_SupportedBandListHRPD'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[if Comp =:= bc0 ->
<<0:1,0:5>>;
Comp =:= bc1 ->
<<0:1,1:5>>;
Comp =:= bc2 ->
<<0:1,2:5>>;
Comp =:= bc3 ->
<<0:1,3:5>>;
Comp =:= bc4 ->
<<0:1,4:5>>;
Comp =:= bc5 ->
<<0:1,5:5>>;
Comp =:= bc6 ->
<<0:1,6:5>>;
Comp =:= bc7 ->
<<0:1,7:5>>;
Comp =:= bc8 ->
<<0:1,8:5>>;
Comp =:= bc9 ->
<<0:1,9:5>>;
Comp =:= bc10 ->
<<0:1,10:5>>;
Comp =:= bc11 ->
<<0:1,11:5>>;
Comp =:= bc12 ->
<<0:1,12:5>>;
Comp =:= bc13 ->
<<0:1,13:5>>;
Comp =:= bc14 ->
<<0:1,14:5>>;
Comp =:= bc15 ->
<<0:1,15:5>>;
Comp =:= bc16 ->
<<0:1,16:5>>;
Comp =:= bc17 ->
<<0:1,17:5>>;
Comp =:= spare14 ->
<<0:1,18:5>>;
Comp =:= spare13 ->
<<0:1,19:5>>;
Comp =:= spare12 ->
<<0:1,20:5>>;
Comp =:= spare11 ->
<<0:1,21:5>>;
Comp =:= spare10 ->
<<0:1,22:5>>;
Comp =:= spare9 ->
<<0:1,23:5>>;
Comp =:= spare8 ->
<<0:1,24:5>>;
Comp =:= spare7 ->
<<0:1,25:5>>;
Comp =:= spare6 ->
<<0:1,26:5>>;
Comp =:= spare5 ->
<<0:1,27:5>>;
Comp =:= spare4 ->
<<0:1,28:5>>;
Comp =:= spare3 ->
<<0:1,29:5>>;
Comp =:= spare2 ->
<<0:1,30:5>>;
Comp =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_SupportedBandListHRPD(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components2(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersCDMA2000-HRPD'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_SupportedBandListHRPD(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc4@input = element(4, Val),
if Enc2@input =:= single ->
if Enc4@input =:= single ->
<<0:1,0:1>>;
Enc4@input =:= dual ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
Enc2@input =:= dual ->
if Enc4@input =:= single ->
<<1:1,0:1>>;
Enc4@input =:= dual ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end].


'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes) ->

%% attribute number 1 with type SupportedBandListHRPD
{Term1,Bytes1} = dec_SupportedBandListHRPD(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> single;
1 -> dual
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> single;
1 -> dual
end,
{V2@Int2,V2@Buf1}
end,
{{'IRAT-ParametersCDMA2000-HRPD',Term1,Term2,Term3},Bytes3}.

'enc_SupportedBandGERAN'(Val) ->
if Val =:= gsm450 ->
<<0:1,0:4>>;
Val =:= gsm480 ->
<<0:1,1:4>>;
Val =:= gsm710 ->
<<0:1,2:4>>;
Val =:= gsm750 ->
<<0:1,3:4>>;
Val =:= gsm810 ->
<<0:1,4:4>>;
Val =:= gsm850 ->
<<0:1,5:4>>;
Val =:= gsm900P ->
<<0:1,6:4>>;
Val =:= gsm900E ->
<<0:1,7:4>>;
Val =:= gsm900R ->
<<0:1,8:4>>;
Val =:= gsm1800 ->
<<0:1,9:4>>;
Val =:= gsm1900 ->
<<0:1,10:4>>;
Val =:= spare5 ->
<<0:1,11:4>>;
Val =:= spare4 ->
<<0:1,12:4>>;
Val =:= spare3 ->
<<0:1,13:4>>;
Val =:= spare2 ->
<<0:1,14:4>>;
Val =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SupportedBandGERAN(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> gsm450;
1 -> gsm480;
2 -> gsm710;
3 -> gsm750;
4 -> gsm810;
5 -> gsm850;
6 -> gsm900P;
7 -> gsm900E;
8 -> gsm900R;
9 -> gsm1800;
10 -> gsm1900;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SupportedBandListGERAN'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 6 =:= 0 ->
[<<Enc2@len@sub:6>>|[if Comp =:= gsm450 ->
<<0:1,0:4>>;
Comp =:= gsm480 ->
<<0:1,1:4>>;
Comp =:= gsm710 ->
<<0:1,2:4>>;
Comp =:= gsm750 ->
<<0:1,3:4>>;
Comp =:= gsm810 ->
<<0:1,4:4>>;
Comp =:= gsm850 ->
<<0:1,5:4>>;
Comp =:= gsm900P ->
<<0:1,6:4>>;
Comp =:= gsm900E ->
<<0:1,7:4>>;
Comp =:= gsm900R ->
<<0:1,8:4>>;
Comp =:= gsm1800 ->
<<0:1,9:4>>;
Comp =:= gsm1900 ->
<<0:1,10:4>>;
Comp =:= spare5 ->
<<0:1,11:4>>;
Comp =:= spare4 ->
<<0:1,12:4>>;
Comp =:= spare3 ->
<<0:1,13:4>>;
Comp =:= spare2 ->
<<0:1,14:4>>;
Comp =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_SupportedBandListGERAN(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components3(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_SupportedBandListGERAN(Enc1@input)
end|begin
Enc2@input = element(3, Val),
if Enc2@input =:= false ->
<<0:1>>;
Enc2@input =:= true ->
<<1:1>>
end
end].


'dec_IRAT-ParametersGERAN'(Bytes) ->

%% attribute number 1 with type SupportedBandListGERAN
{Term1,Bytes1} = dec_SupportedBandListGERAN(Bytes),

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'IRAT-ParametersGERAN',Term1,Term2},Bytes2}.

'enc_SupportedBandUTRA-TDD768'(Val) ->
if Val =:= a ->
<<0:1,0:4>>;
Val =:= b ->
<<0:1,1:4>>;
Val =:= c ->
<<0:1,2:4>>;
Val =:= d ->
<<0:1,3:4>>;
Val =:= e ->
<<0:1,4:4>>;
Val =:= f ->
<<0:1,5:4>>;
Val =:= g ->
<<0:1,6:4>>;
Val =:= h ->
<<0:1,7:4>>;
Val =:= i ->
<<0:1,8:4>>;
Val =:= j ->
<<0:1,9:4>>;
Val =:= k ->
<<0:1,10:4>>;
Val =:= l ->
<<0:1,11:4>>;
Val =:= m ->
<<0:1,12:4>>;
Val =:= n ->
<<0:1,13:4>>;
Val =:= o ->
<<0:1,14:4>>;
Val =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SupportedBandUTRA-TDD768'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SupportedBandListUTRA-TDD768'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 6 =:= 0 ->
[<<Enc2@len@sub:6>>|[if Comp =:= a ->
<<0:1,0:4>>;
Comp =:= b ->
<<0:1,1:4>>;
Comp =:= c ->
<<0:1,2:4>>;
Comp =:= d ->
<<0:1,3:4>>;
Comp =:= e ->
<<0:1,4:4>>;
Comp =:= f ->
<<0:1,5:4>>;
Comp =:= g ->
<<0:1,6:4>>;
Comp =:= h ->
<<0:1,7:4>>;
Comp =:= i ->
<<0:1,8:4>>;
Comp =:= j ->
<<0:1,9:4>>;
Comp =:= k ->
<<0:1,10:4>>;
Comp =:= l ->
<<0:1,11:4>>;
Comp =:= m ->
<<0:1,12:4>>;
Comp =:= n ->
<<0:1,13:4>>;
Comp =:= o ->
<<0:1,14:4>>;
Comp =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_SupportedBandListUTRA-TDD768'(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components4(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersUTRA-TDD768'(Val) ->
Enc1@input = element(2, Val),
'enc_SupportedBandListUTRA-TDD768'(Enc1@input).


'dec_IRAT-ParametersUTRA-TDD768'(Bytes) ->

%% attribute number 1 with type SupportedBandListUTRA-TDD768
{Term1,Bytes1} = 'dec_SupportedBandListUTRA-TDD768'(Bytes),
{{'IRAT-ParametersUTRA-TDD768',Term1},Bytes1}.

'enc_SupportedBandUTRA-TDD384'(Val) ->
if Val =:= a ->
<<0:1,0:4>>;
Val =:= b ->
<<0:1,1:4>>;
Val =:= c ->
<<0:1,2:4>>;
Val =:= d ->
<<0:1,3:4>>;
Val =:= e ->
<<0:1,4:4>>;
Val =:= f ->
<<0:1,5:4>>;
Val =:= g ->
<<0:1,6:4>>;
Val =:= h ->
<<0:1,7:4>>;
Val =:= i ->
<<0:1,8:4>>;
Val =:= j ->
<<0:1,9:4>>;
Val =:= k ->
<<0:1,10:4>>;
Val =:= l ->
<<0:1,11:4>>;
Val =:= m ->
<<0:1,12:4>>;
Val =:= n ->
<<0:1,13:4>>;
Val =:= o ->
<<0:1,14:4>>;
Val =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SupportedBandUTRA-TDD384'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SupportedBandListUTRA-TDD384'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 6 =:= 0 ->
[<<Enc2@len@sub:6>>|[if Comp =:= a ->
<<0:1,0:4>>;
Comp =:= b ->
<<0:1,1:4>>;
Comp =:= c ->
<<0:1,2:4>>;
Comp =:= d ->
<<0:1,3:4>>;
Comp =:= e ->
<<0:1,4:4>>;
Comp =:= f ->
<<0:1,5:4>>;
Comp =:= g ->
<<0:1,6:4>>;
Comp =:= h ->
<<0:1,7:4>>;
Comp =:= i ->
<<0:1,8:4>>;
Comp =:= j ->
<<0:1,9:4>>;
Comp =:= k ->
<<0:1,10:4>>;
Comp =:= l ->
<<0:1,11:4>>;
Comp =:= m ->
<<0:1,12:4>>;
Comp =:= n ->
<<0:1,13:4>>;
Comp =:= o ->
<<0:1,14:4>>;
Comp =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_SupportedBandListUTRA-TDD384'(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components5(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersUTRA-TDD384'(Val) ->
Enc1@input = element(2, Val),
'enc_SupportedBandListUTRA-TDD384'(Enc1@input).


'dec_IRAT-ParametersUTRA-TDD384'(Bytes) ->

%% attribute number 1 with type SupportedBandListUTRA-TDD384
{Term1,Bytes1} = 'dec_SupportedBandListUTRA-TDD384'(Bytes),
{{'IRAT-ParametersUTRA-TDD384',Term1},Bytes1}.

'enc_SupportedBandUTRA-TDD128'(Val) ->
if Val =:= a ->
<<0:1,0:4>>;
Val =:= b ->
<<0:1,1:4>>;
Val =:= c ->
<<0:1,2:4>>;
Val =:= d ->
<<0:1,3:4>>;
Val =:= e ->
<<0:1,4:4>>;
Val =:= f ->
<<0:1,5:4>>;
Val =:= g ->
<<0:1,6:4>>;
Val =:= h ->
<<0:1,7:4>>;
Val =:= i ->
<<0:1,8:4>>;
Val =:= j ->
<<0:1,9:4>>;
Val =:= k ->
<<0:1,10:4>>;
Val =:= l ->
<<0:1,11:4>>;
Val =:= m ->
<<0:1,12:4>>;
Val =:= n ->
<<0:1,13:4>>;
Val =:= o ->
<<0:1,14:4>>;
Val =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SupportedBandUTRA-TDD128'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SupportedBandListUTRA-TDD128'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 6 =:= 0 ->
[<<Enc2@len@sub:6>>|[if Comp =:= a ->
<<0:1,0:4>>;
Comp =:= b ->
<<0:1,1:4>>;
Comp =:= c ->
<<0:1,2:4>>;
Comp =:= d ->
<<0:1,3:4>>;
Comp =:= e ->
<<0:1,4:4>>;
Comp =:= f ->
<<0:1,5:4>>;
Comp =:= g ->
<<0:1,6:4>>;
Comp =:= h ->
<<0:1,7:4>>;
Comp =:= i ->
<<0:1,8:4>>;
Comp =:= j ->
<<0:1,9:4>>;
Comp =:= k ->
<<0:1,10:4>>;
Comp =:= l ->
<<0:1,11:4>>;
Comp =:= m ->
<<0:1,12:4>>;
Comp =:= n ->
<<0:1,13:4>>;
Comp =:= o ->
<<0:1,14:4>>;
Comp =:= p ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_SupportedBandListUTRA-TDD128'(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components6(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersUTRA-TDD128'(Val) ->
Enc1@input = element(2, Val),
'enc_SupportedBandListUTRA-TDD128'(Enc1@input).


'dec_IRAT-ParametersUTRA-TDD128'(Bytes) ->

%% attribute number 1 with type SupportedBandListUTRA-TDD128
{Term1,Bytes1} = 'dec_SupportedBandListUTRA-TDD128'(Bytes),
{{'IRAT-ParametersUTRA-TDD128',Term1},Bytes1}.

'enc_SupportedBandUTRA-FDD'(Val) ->
if Val =:= bandI ->
<<0:1,0:4>>;
Val =:= bandII ->
<<0:1,1:4>>;
Val =:= bandIII ->
<<0:1,2:4>>;
Val =:= bandIV ->
<<0:1,3:4>>;
Val =:= bandV ->
<<0:1,4:4>>;
Val =:= bandVI ->
<<0:1,5:4>>;
Val =:= bandVII ->
<<0:1,6:4>>;
Val =:= bandVIII ->
<<0:1,7:4>>;
Val =:= bandIX ->
<<0:1,8:4>>;
Val =:= bandX ->
<<0:1,9:4>>;
Val =:= bandXI ->
<<0:1,10:4>>;
Val =:= bandXII ->
<<0:1,11:4>>;
Val =:= bandXIII ->
<<0:1,12:4>>;
Val =:= bandXIV ->
<<0:1,13:4>>;
Val =:= bandXV ->
<<0:1,14:4>>;
Val =:= bandXVI ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SupportedBandUTRA-FDD'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bandI;
1 -> bandII;
2 -> bandIII;
3 -> bandIV;
4 -> bandV;
5 -> bandVI;
6 -> bandVII;
7 -> bandVIII;
8 -> bandIX;
9 -> bandX;
10 -> bandXI;
11 -> bandXII;
12 -> bandXIII;
13 -> bandXIV;
14 -> bandXV;
15 -> bandXVI
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SupportedBandListUTRA-FDD'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 6 =:= 0 ->
[<<Enc2@len@sub:6>>|[if Comp =:= bandI ->
<<0:1,0:4>>;
Comp =:= bandII ->
<<0:1,1:4>>;
Comp =:= bandIII ->
<<0:1,2:4>>;
Comp =:= bandIV ->
<<0:1,3:4>>;
Comp =:= bandV ->
<<0:1,4:4>>;
Comp =:= bandVI ->
<<0:1,5:4>>;
Comp =:= bandVII ->
<<0:1,6:4>>;
Comp =:= bandVIII ->
<<0:1,7:4>>;
Comp =:= bandIX ->
<<0:1,8:4>>;
Comp =:= bandX ->
<<0:1,9:4>>;
Comp =:= bandXI ->
<<0:1,10:4>>;
Comp =:= bandXII ->
<<0:1,11:4>>;
Comp =:= bandXIII ->
<<0:1,12:4>>;
Comp =:= bandXIV ->
<<0:1,13:4>>;
Comp =:= bandXV ->
<<0:1,14:4>>;
Comp =:= bandXVI ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_SupportedBandListUTRA-FDD'(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components7(V1@Add2, V1@Buf1, []).

'enc_IRAT-ParametersUTRA-FDD'(Val) ->
Enc1@input = element(2, Val),
'enc_SupportedBandListUTRA-FDD'(Enc1@input).


'dec_IRAT-ParametersUTRA-FDD'(Bytes) ->

%% attribute number 1 with type SupportedBandListUTRA-FDD
{Term1,Bytes1} = 'dec_SupportedBandListUTRA-FDD'(Bytes),
{{'IRAT-ParametersUTRA-FDD',Term1},Bytes1}.

'enc_InterRAT-BandInfo'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end.


'dec_InterRAT-BandInfo'(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'InterRAT-BandInfo',Term1},Bytes1}.

'enc_InterRAT-BandList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|['enc_InterRAT-BandInfo'(Comp) || Comp <- Val]]
end.



'dec_InterRAT-BandList'(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components8(V1@Add2, V1@Buf1, []).

'enc_InterFreqBandInfo'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end.


dec_InterFreqBandInfo(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'InterFreqBandInfo',Term1},Bytes1}.

'enc_InterFreqBandList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|[enc_InterFreqBandInfo(Comp) || Comp <- Val]]
end.



dec_InterFreqBandList(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components9(V1@Add2, V1@Buf1, []).

'enc_BandInfoEUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_InterFreqBandList(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_InterRAT-BandList'(Enc3@input)
end
end].


dec_BandInfoEUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type InterFreqBandList
{Term1,Bytes2} = dec_InterFreqBandList(Bytes1),

%% attribute number 2 with type InterRAT-BandList
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_InterRAT-BandList'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'BandInfoEUTRA',Term1,Term2},Bytes3}.

'enc_BandListEUTRA'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|[enc_BandInfoEUTRA(Comp) || Comp <- Val]]
end.



dec_BandListEUTRA(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components10(V1@Add2, V1@Buf1, []).

'enc_MeasParameters'(Val) ->
Enc1@input = element(2, Val),
enc_BandListEUTRA(Enc1@input).


dec_MeasParameters(Bytes) ->

%% attribute number 1 with type BandListEUTRA
{Term1,Bytes1} = dec_BandListEUTRA(Bytes),
{{'MeasParameters',Term1},Bytes1}.

'enc_SupportedBandEUTRA'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 6 =:= 0 ->
<<Enc1@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= false ->
<<0:1>>;
Enc3@input =:= true ->
<<1:1>>
end
end].


dec_SupportedBandEUTRA(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,
{{'SupportedBandEUTRA',Term1,Term2},Bytes2}.

'enc_SupportedBandListEUTRA'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 6 =:= 0 ->
[<<Enc1@len@sub:6>>|[enc_SupportedBandEUTRA(Comp) || Comp <- Val]]
end.



dec_SupportedBandListEUTRA(Bytes) ->
%% Length with constraint {1,64}
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components11(V1@Add2, V1@Buf1, []).

'enc_RF-Parameters'(Val) ->
Enc1@input = element(2, Val),
enc_SupportedBandListEUTRA(Enc1@input).


'dec_RF-Parameters'(Bytes) ->

%% attribute number 1 with type SupportedBandListEUTRA
{Term1,Bytes1} = dec_SupportedBandListEUTRA(Bytes),
{{'RF-Parameters',Term1},Bytes1}.

'enc_PhyLayerParameters'(Val) ->
Enc1@input = element(2, Val),
Enc3@input = element(3, Val),
if Enc1@input =:= false ->
if Enc3@input =:= false ->
<<0:1,0:1>>;
Enc3@input =:= true ->
<<0:1,1:1>>
end;
Enc1@input =:= true ->
if Enc3@input =:= false ->
<<1:1,0:1>>;
Enc3@input =:= true ->
<<1:1,1:1>>
end
end.


dec_PhyLayerParameters(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,
{{'PhyLayerParameters',Term1,Term2},Bytes2}.

'enc_PDCP-Parameters'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_DEFAULT ->
<<0:1,0:1>>;
Enc1@input =:= cs16 ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
'enc_PDCP-Parameters_supportedROHC-Profiles'(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_DEFAULT ->
[];
Enc4@input =:= cs16 ->
[];
Enc4@input =:= cs2 ->
<<0:4>>;
Enc4@input =:= cs4 ->
<<1:4>>;
Enc4@input =:= cs8 ->
<<2:4>>;
Enc4@input =:= cs12 ->
<<3:4>>;
Enc4@input =:= cs24 ->
<<5:4>>;
Enc4@input =:= cs32 ->
<<6:4>>;
Enc4@input =:= cs48 ->
<<7:4>>;
Enc4@input =:= cs64 ->
<<8:4>>;
Enc4@input =:= cs128 ->
<<9:4>>;
Enc4@input =:= cs256 ->
<<10:4>>;
Enc4@input =:= cs512 ->
<<11:4>>;
Enc4@input =:= cs1024 ->
<<12:4>>;
Enc4@input =:= cs16384 ->
<<13:4>>;
Enc4@input =:= spare2 ->
<<14:4>>;
Enc4@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].
'enc_PDCP-Parameters_supportedROHC-Profiles'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc3@input = element(3, Val),
if Enc1@input =:= false ->
if Enc3@input =:= false ->
<<0:1,0:1>>;
Enc3@input =:= true ->
<<0:1,1:1>>
end;
Enc1@input =:= true ->
if Enc3@input =:= false ->
<<1:1,0:1>>;
Enc3@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(4, Val),
Enc7@input = element(5, Val),
if Enc5@input =:= false ->
if Enc7@input =:= false ->
<<0:1,0:1>>;
Enc7@input =:= true ->
<<0:1,1:1>>
end;
Enc5@input =:= true ->
if Enc7@input =:= false ->
<<1:1,0:1>>;
Enc7@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(6, Val),
Enc11@input = element(7, Val),
if Enc9@input =:= false ->
if Enc11@input =:= false ->
<<0:1,0:1>>;
Enc11@input =:= true ->
<<0:1,1:1>>
end;
Enc9@input =:= true ->
if Enc11@input =:= false ->
<<1:1,0:1>>;
Enc11@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@input = element(8, Val),
Enc15@input = element(9, Val),
if Enc13@input =:= false ->
if Enc15@input =:= false ->
<<0:1,0:1>>;
Enc15@input =:= true ->
<<0:1,1:1>>
end;
Enc13@input =:= true ->
if Enc15@input =:= false ->
<<1:1,0:1>>;
Enc15@input =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc17@input = element(10, Val),
if Enc17@input =:= false ->
<<0:1>>;
Enc17@input =:= true ->
<<1:1>>
end
end].

'dec_PDCP-Parameters_supportedROHC-Profiles'(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,
{{'PDCP-Parameters_supportedROHC-Profiles',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes9}.



'dec_PDCP-Parameters'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = 'dec_PDCP-Parameters_supportedROHC-Profiles'(Bytes2),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> cs2;
1 -> cs4;
2 -> cs8;
3 -> cs12;
4 -> cs16;
5 -> cs24;
6 -> cs32;
7 -> cs48;
8 -> cs64;
9 -> cs128;
10 -> cs256;
11 -> cs512;
12 -> cs1024;
13 -> cs16384;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{cs16,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'PDCP-Parameters',Term1,Term2},Bytes6}.

'enc_AccessStratumRelease'(Val) ->
if Val =:= rel8 ->
<<0:1,0:3>>;
Val =:= spare7 ->
<<0:1,1:3>>;
Val =:= spare6 ->
<<0:1,2:3>>;
Val =:= spare5 ->
<<0:1,3:3>>;
Val =:= spare4 ->
<<0:1,4:3>>;
Val =:= spare3 ->
<<0:1,5:3>>;
Val =:= spare2 ->
<<0:1,6:3>>;
Val =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_AccessStratumRelease(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> rel8;
1 -> spare7;
2 -> spare6;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_UE-EUTRA-Capability'(Val) ->
[begin
Enc1@input = element(8, Val),
Enc2@input = element(10, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= rel8 ->
<<0:1,0:3>>;
Enc3@input =:= spare7 ->
<<0:1,1:3>>;
Enc3@input =:= spare6 ->
<<0:1,2:3>>;
Enc3@input =:= spare5 ->
<<0:1,3:3>>;
Enc3@input =:= spare4 ->
<<0:1,4:3>>;
Enc3@input =:= spare3 ->
<<0:1,5:3>>;
Enc3@input =:= spare2 ->
<<0:1,6:3>>;
Enc3@input =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
Enc5@input@sub = Enc5@input - 1,
if 0 =< Enc5@input@sub, Enc5@input@sub < 5 ->
<<Enc5@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
'enc_PDCP-Parameters'(Enc7@input)
end,
begin
Enc8@input = element(5, Val),
enc_PhyLayerParameters(Enc8@input)
end,
begin
Enc9@input = element(6, Val),
'enc_RF-Parameters'(Enc9@input)
end,
begin
Enc10@input = element(7, Val),
enc_MeasParameters(Enc10@input)
end,
begin
Enc11@input = element(8, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@bs = to_bitstring(Enc11@input, 32),
Enc12@bits = bit_size(Enc12@bs),
if Enc12@bits =:= 32 ->
Enc12@bs
end
end
end
end,
begin
Enc14@input = element(9, Val),
'enc_UE-EUTRA-Capability_interRAT-Parameters'(Enc14@input)
end|begin
Enc15@input = element(10, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UE-EUTRA-Capability_nonCriticalExtension'(Enc15@input)
end
end].
'enc_UE-EUTRA-Capability_interRAT-Parameters'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(8, Val),
if Enc7@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc8@input = element(2, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersUTRA-FDD'(Enc8@input)
end
end,
begin
Enc10@input = element(3, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersUTRA-TDD128'(Enc10@input)
end
end,
begin
Enc12@input = element(4, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersUTRA-TDD384'(Enc12@input)
end
end,
begin
Enc14@input = element(5, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersUTRA-TDD768'(Enc14@input)
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersGERAN'(Enc16@input)
end
end,
begin
Enc18@input = element(7, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersCDMA2000-HRPD'(Enc18@input)
end
end|begin
Enc20@input = element(8, Val),
if Enc20@input =:= asn1_NOVALUE ->
[];
true ->
'enc_IRAT-ParametersCDMA2000-1XRTT'(Enc20@input)
end
end].

'dec_UE-EUTRA-Capability_interRAT-Parameters'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type IRAT-ParametersUTRA-FDD
{Term1,Bytes2} = case (Opt bsr 6) band 1 of
1 ->
'dec_IRAT-ParametersUTRA-FDD'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type IRAT-ParametersUTRA-TDD128
{Term2,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
'dec_IRAT-ParametersUTRA-TDD128'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type IRAT-ParametersUTRA-TDD384
{Term3,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
'dec_IRAT-ParametersUTRA-TDD384'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type IRAT-ParametersUTRA-TDD768
{Term4,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
'dec_IRAT-ParametersUTRA-TDD768'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type IRAT-ParametersGERAN
{Term5,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'dec_IRAT-ParametersGERAN'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 6 with type IRAT-ParametersCDMA2000-HRPD
{Term6,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 7 with type IRAT-ParametersCDMA2000-1XRTT
{Term7,Bytes8} = case Opt band 1 of
1 ->
'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,
{{'UE-EUTRA-Capability_interRAT-Parameters',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes8}.

'enc_UE-EUTRA-Capability_nonCriticalExtension'(Val) ->
[].

'dec_UE-EUTRA-Capability_nonCriticalExtension'(Bytes) ->
{{'UE-EUTRA-Capability_nonCriticalExtension'},Bytes}.



'dec_UE-EUTRA-Capability'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> rel8;
1 -> spare7;
2 -> spare6;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11}
end,
<<V2@V12:V2@V6/unit:8,V2@Buf13/bitstring>> = V2@Buf7,
{V2@V12,V2@Buf13}
end,
V2@Int14 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int14,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type PDCP-Parameters
{Term3,Bytes4} = 'dec_PDCP-Parameters'(Bytes3),

%% attribute number 4 with type PhyLayerParameters
{Term4,Bytes5} = dec_PhyLayerParameters(Bytes4),

%% attribute number 5 with type RF-Parameters
{Term5,Bytes6} = 'dec_RF-Parameters'(Bytes5),

%% attribute number 6 with type MeasParameters
{Term6,Bytes7} = dec_MeasParameters(Bytes6),

%% attribute number 7 with type BIT STRING
{Term7,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:32/binary-unit:1,V4@Buf1/bitstring>> = Bytes7,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 8 with type SEQUENCE
{Term8,Bytes9} = 'dec_UE-EUTRA-Capability_interRAT-Parameters'(Bytes8),

%% attribute number 9 with type SEQUENCE
{Term9,Bytes10} = case Opt band 1 of
1 ->
'dec_UE-EUTRA-Capability_nonCriticalExtension'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,
{{'UE-EUTRA-Capability',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes10}.

'enc_UE-CapabilityRAT-Container'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= eutra ->
<<0:1,0:3>>;
Enc1@input =:= utra ->
<<0:1,1:3>>;
Enc1@input =:= 'geran-cs' ->
<<0:1,2:3>>;
Enc1@input =:= 'geran-ps' ->
<<0:1,3:3>>;
Enc1@input =:= 'cdma2000-1XRTT' ->
<<0:1,4:3>>;
Enc1@input =:= spare3 ->
<<0:1,5:3>>;
Enc1@input =:= spare2 ->
<<0:1,6:3>>;
Enc1@input =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end].


'dec_UE-CapabilityRAT-Container'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
V2@Conv8 = binary_to_list(V2@V0),
{V2@Conv8,V2@Buf1}
end,
{{'UE-CapabilityRAT-Container',Term1,Term2},Bytes2}.

'enc_UE-CapabilityRAT-ContainerList'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 9 ->
[<<Enc1@len:4>>|['enc_UE-CapabilityRAT-Container'(Comp) || Comp <- Val]]
end.



'dec_UE-CapabilityRAT-ContainerList'(Bytes) ->
%% Length with constraint {0,8}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
dec_components12(V1@V0, V1@Buf1, []).

'enc_S-TMSI'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@bs = to_bitstring(Enc1@input, 8),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 8 ->
Enc2@bs
end
end|begin
Enc3@input = element(3, Val),
Enc4@bs = to_bitstring(Enc3@input, 32),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 32 ->
Enc4@bs
end
end].


'dec_S-TMSI'(Bytes) ->

%% attribute number 1 with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V2@V0:32/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,
{{'S-TMSI',Term1,Term2},Bytes2}.

'enc_RRC-TransactionIdentifier'(Val) ->
if Val bsr 2 =:= 0 ->
<<Val:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RRC-TransactionIdentifier'(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_RAT-Type'(Val) ->
if Val =:= eutra ->
<<0:1,0:3>>;
Val =:= utra ->
<<0:1,1:3>>;
Val =:= 'geran-cs' ->
<<0:1,2:3>>;
Val =:= 'geran-ps' ->
<<0:1,3:3>>;
Val =:= 'cdma2000-1XRTT' ->
<<0:1,4:3>>;
Val =:= spare3 ->
<<0:1,5:3>>;
Val =:= spare2 ->
<<0:1,6:3>>;
Val =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RAT-Type'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_RAND-CDMA2000'(Val) ->
Enc1@bs = to_bitstring(Val, 32),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 32 ->
Enc1@bs
end.


'dec_RAND-CDMA2000'(Bytes) ->
begin
<<V1@V0:32/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_NeighCellConfig'(Val) ->
Enc1@bs = to_bitstring(Val, 2),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 2 ->
Enc1@bs
end.


dec_NeighCellConfig(Bytes) ->
begin
<<V1@V0:2/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_MMEC'(Val) ->
Enc1@bs = to_bitstring(Val, 8),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
Enc1@bs
end.


dec_MMEC(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_FilterCoefficient'(Val) ->
if Val =:= fc0 ->
<<0:1,0:4>>;
Val =:= fc1 ->
<<0:1,1:4>>;
Val =:= fc2 ->
<<0:1,2:4>>;
Val =:= fc3 ->
<<0:1,3:4>>;
Val =:= fc4 ->
<<0:1,4:4>>;
Val =:= fc5 ->
<<0:1,5:4>>;
Val =:= fc6 ->
<<0:1,6:4>>;
Val =:= fc7 ->
<<0:1,7:4>>;
Val =:= fc8 ->
<<0:1,8:4>>;
Val =:= fc9 ->
<<0:1,9:4>>;
Val =:= fc11 ->
<<0:1,10:4>>;
Val =:= fc13 ->
<<0:1,11:4>>;
Val =:= fc15 ->
<<0:1,12:4>>;
Val =:= fc17 ->
<<0:1,13:4>>;
Val =:= fc19 ->
<<0:1,14:4>>;
Val =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_FilterCoefficient(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_DedicatedInfoNAS'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
encode_fragmented(Enc1@bin, 8)
end.


dec_DedicatedInfoNAS(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7,V1@V5:V1@V3/binary-unit:8,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<1:1,0:1,V1@V4:14,V1@V6:V1@V4/binary-unit:8,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,1:1,V1@V4:6,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7}  = decode_fragmented(V1@V4, V1@Buf5, 8),
{V1@V6,V1@Buf7}
end,
V1@Conv8 = binary_to_list(V1@V0),
{V1@Conv8,V1@Buf1}
end.

'enc_DedicatedInfoCDMA2000'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
encode_fragmented(Enc1@bin, 8)
end.


dec_DedicatedInfoCDMA2000(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7,V1@V5:V1@V3/binary-unit:8,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<1:1,0:1,V1@V4:14,V1@V6:V1@V4/binary-unit:8,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,1:1,V1@V4:6,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7}  = decode_fragmented(V1@V4, V1@Buf5, 8),
{V1@V6,V1@Buf7}
end,
V1@Conv8 = binary_to_list(V1@V0),
{V1@Conv8,V1@Buf1}
end.

'enc_C-RNTI'(Val) ->
Enc1@bs = to_bitstring(Val, 16),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_C-RNTI'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_TimeToTrigger'(Val) ->
if Val =:= ms0 ->
<<0:4>>;
Val =:= ms40 ->
<<1:4>>;
Val =:= ms64 ->
<<2:4>>;
Val =:= ms80 ->
<<3:4>>;
Val =:= ms100 ->
<<4:4>>;
Val =:= ms128 ->
<<5:4>>;
Val =:= ms160 ->
<<6:4>>;
Val =:= ms256 ->
<<7:4>>;
Val =:= ms320 ->
<<8:4>>;
Val =:= ms480 ->
<<9:4>>;
Val =:= ms512 ->
<<10:4>>;
Val =:= ms640 ->
<<11:4>>;
Val =:= ms1024 ->
<<12:4>>;
Val =:= ms1280 ->
<<13:4>>;
Val =:= ms2560 ->
<<14:4>>;
Val =:= ms5120 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TimeToTrigger(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120
end,
{V1@Int2,V1@Buf1}
end.

'enc_RSRQ-Range'(Val) ->
if 0 =< Val, Val < 35 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RSRQ-Range'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_RSRP-Range'(Val) ->
if 0 =< Val, Val < 98 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RSRP-Range'(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ReportInterval'(Val) ->
if Val =:= ms120 ->
<<0:4>>;
Val =:= ms240 ->
<<1:4>>;
Val =:= ms480 ->
<<2:4>>;
Val =:= ms640 ->
<<3:4>>;
Val =:= ms1024 ->
<<4:4>>;
Val =:= ms2048 ->
<<5:4>>;
Val =:= ms5120 ->
<<6:4>>;
Val =:= ms10240 ->
<<7:4>>;
Val =:= min1 ->
<<8:4>>;
Val =:= min6 ->
<<9:4>>;
Val =:= min12 ->
<<10:4>>;
Val =:= min30 ->
<<11:4>>;
Val =:= min60 ->
<<12:4>>;
Val =:= spare3 ->
<<13:4>>;
Val =:= spare2 ->
<<14:4>>;
Val =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReportInterval(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_ReportConfigToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_ReportConfigToAddMod_reportConfig(Enc3@input)
end].
'enc_ReportConfigToAddMod_reportConfig'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= reportConfigEUTRA ->
[<<0:1>>|enc_ReportConfigEUTRA(ChoiceVal)];
ChoiceTag =:= reportConfigInterRAT ->
[<<1:1>>|enc_ReportConfigInterRAT(ChoiceVal)]
end.

dec_ReportConfigToAddMod_reportConfig(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ReportConfigEUTRA(Bytes1)
end,
{{reportConfigEUTRA,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_ReportConfigInterRAT(Bytes1)
end,
{{reportConfigInterRAT,Val},NewBytes}
end.


dec_ReportConfigToAddMod(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_ReportConfigToAddMod_reportConfig'(Bytes1),
{{'ReportConfigToAddMod',Term1,Term2},Bytes2}.

'enc_ReportConfigToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_ReportConfigToAddMod(Comp) || Comp <- Val]]
end.



dec_ReportConfigToAddModList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components13(V1@Add2, V1@Buf1, []).

'enc_ThresholdCDMA2000'(Val) ->
if Val bsr 6 =:= 0 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ThresholdCDMA2000(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ThresholdGERAN'(Val) ->
if Val bsr 6 =:= 0 ->
<<Val:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ThresholdGERAN(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ThresholdUTRA'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'utra-RSCP' ->
begin
ChoiceVal@sub = ChoiceVal - -5,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 97 ->
<<0:1,ChoiceVal@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= 'utra-EcN0' ->
if 0 =< ChoiceVal, ChoiceVal < 50 ->
<<1:1,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_ThresholdUTRA(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -5,
{V2@Add2,V2@Buf1}
end
end,
{{'utra-RSCP',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{'utra-EcN0',Val},NewBytes}
end.
'enc_ReportConfigInterRAT'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_ReportConfigInterRAT_triggerType(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
Enc3@input@sub = Enc3@input - 1,
if Enc3@input@sub bsr 3 =:= 0 ->
<<Enc3@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input =:= ms120 ->
<<0:4>>;
Enc5@input =:= ms240 ->
<<1:4>>;
Enc5@input =:= ms480 ->
<<2:4>>;
Enc5@input =:= ms640 ->
<<3:4>>;
Enc5@input =:= ms1024 ->
<<4:4>>;
Enc5@input =:= ms2048 ->
<<5:4>>;
Enc5@input =:= ms5120 ->
<<6:4>>;
Enc5@input =:= ms10240 ->
<<7:4>>;
Enc5@input =:= min1 ->
<<8:4>>;
Enc5@input =:= min6 ->
<<9:4>>;
Enc5@input =:= min12 ->
<<10:4>>;
Enc5@input =:= min30 ->
<<11:4>>;
Enc5@input =:= min60 ->
<<12:4>>;
Enc5@input =:= spare3 ->
<<13:4>>;
Enc5@input =:= spare2 ->
<<14:4>>;
Enc5@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input =:= r1 ->
<<0:3>>;
Enc7@input =:= r2 ->
<<1:3>>;
Enc7@input =:= r4 ->
<<2:3>>;
Enc7@input =:= r8 ->
<<3:3>>;
Enc7@input =:= r16 ->
<<4:3>>;
Enc7@input =:= r32 ->
<<5:3>>;
Enc7@input =:= r64 ->
<<6:3>>;
Enc7@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].
'enc_ReportConfigInterRAT_triggerType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= event ->
[<<0:1>>|enc_ReportConfigInterRAT_triggerType_event(ChoiceVal)];
ChoiceTag =:= periodical ->
[<<1:1>>|enc_ReportConfigInterRAT_triggerType_periodical(ChoiceVal)]
end.
'enc_ReportConfigInterRAT_triggerType_event'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_ReportConfigInterRAT_triggerType_event_eventId(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
if 0 =< Enc2@input, Enc2@input < 31 ->
<<Enc2@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(4, Val),
if Enc4@input =:= ms0 ->
<<0:4>>;
Enc4@input =:= ms40 ->
<<1:4>>;
Enc4@input =:= ms64 ->
<<2:4>>;
Enc4@input =:= ms80 ->
<<3:4>>;
Enc4@input =:= ms100 ->
<<4:4>>;
Enc4@input =:= ms128 ->
<<5:4>>;
Enc4@input =:= ms160 ->
<<6:4>>;
Enc4@input =:= ms256 ->
<<7:4>>;
Enc4@input =:= ms320 ->
<<8:4>>;
Enc4@input =:= ms480 ->
<<9:4>>;
Enc4@input =:= ms512 ->
<<10:4>>;
Enc4@input =:= ms640 ->
<<11:4>>;
Enc4@input =:= ms1024 ->
<<12:4>>;
Enc4@input =:= ms1280 ->
<<13:4>>;
Enc4@input =:= ms2560 ->
<<14:4>>;
Enc4@input =:= ms5120 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].
'enc_ReportConfigInterRAT_triggerType_event_eventId'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= eventB1 ->
[<<0:1,0:1>>|enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1(ChoiceVal)];
ChoiceTag =:= eventB2 ->
[<<0:1,1:1>>|enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2(ChoiceVal)]
end.
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Val) ->
Enc1@input = element(2, Val),
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Enc1@input).
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'b1-ThresholdUTRA' ->
[<<0:2>>|enc_ThresholdUTRA(ChoiceVal)];
ChoiceTag =:= 'b1-ThresholdGERAN' ->
if ChoiceVal bsr 6 =:= 0 ->
<<1:2,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'b1-ThresholdCDMA2000' ->
if ChoiceVal bsr 6 =:= 0 ->
<<2:2,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ThresholdUTRA(Bytes1)
end,
{{'b1-ThresholdUTRA',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{'b1-ThresholdGERAN',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{'b1-ThresholdCDMA2000',Val},NewBytes}
end.

dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Bytes),
{{'ReportConfigInterRAT_triggerType_event_eventId_eventB1',Term1},Bytes1}.

'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_ThresholdEUTRA(Enc1@input)
end|begin
Enc2@input = element(3, Val),
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Enc2@input)
end].
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'b2-Threshold2UTRA' ->
[<<0:2>>|enc_ThresholdUTRA(ChoiceVal)];
ChoiceTag =:= 'b2-Threshold2GERAN' ->
if ChoiceVal bsr 6 =:= 0 ->
<<1:2,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'b2-Threshold2CDMA2000' ->
if ChoiceVal bsr 6 =:= 0 ->
<<2:2,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ThresholdUTRA(Bytes1)
end,
{{'b2-Threshold2UTRA',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{'b2-Threshold2GERAN',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{'b2-Threshold2CDMA2000',Val},NewBytes}
end.

dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2(Bytes) ->

%% attribute number 1 with type ThresholdEUTRA
{Term1,Bytes1} = dec_ThresholdEUTRA(Bytes),

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Bytes1),
{{'ReportConfigInterRAT_triggerType_event_eventId_eventB2',Term1,Term2},Bytes2}.


dec_ReportConfigInterRAT_triggerType_event_eventId(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Bytes2)
end,
{{eventB1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Bytes2)
end,
{{eventB2,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_ReportConfigInterRAT_triggerType_event(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_ReportConfigInterRAT_triggerType_event_eventId'(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120
end,
{V2@Int2,V2@Buf1}
end,
{{'ReportConfigInterRAT_triggerType_event',Term1,Term2,Term3},Bytes3}.

'enc_ReportConfigInterRAT_triggerType_periodical'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= reportStrongestCells ->
<<0:2>>;
Enc1@input =:= reportStrongestCellsForSON ->
<<1:2>>;
Enc1@input =:= reportCGI ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.

dec_ReportConfigInterRAT_triggerType_periodical(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> reportStrongestCells;
1 -> reportStrongestCellsForSON;
2 -> reportCGI;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reportStrongestCells,reportStrongestCellsForSON,reportCGI]}}}})
end,
{V1@Int2,V1@Buf1}
end,
{{'ReportConfigInterRAT_triggerType_periodical',Term1},Bytes1}.


dec_ReportConfigInterRAT_triggerType(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ReportConfigInterRAT_triggerType_event'(Bytes1)
end,
{{event,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ReportConfigInterRAT_triggerType_periodical'(Bytes1)
end,
{{periodical,Val},NewBytes}
end.


dec_ReportConfigInterRAT(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_ReportConfigInterRAT_triggerType'(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes2,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> r1;
1 -> r2;
2 -> r4;
3 -> r8;
4 -> r16;
5 -> r32;
6 -> r64;
7 -> infinity
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ReportConfigInterRAT',Term1,Term2,Term3,Term4},Bytes7}.

'enc_ReportConfigId'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReportConfigId(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_ThresholdEUTRA'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'threshold-RSRP' ->
if 0 =< ChoiceVal, ChoiceVal < 98 ->
<<0:1,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'threshold-RSRQ' ->
if 0 =< ChoiceVal, ChoiceVal < 35 ->
<<1:1,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_ThresholdEUTRA(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{'threshold-RSRP',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{'threshold-RSRQ',Val},NewBytes}
end.
'enc_ReportConfigEUTRA'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_ReportConfigEUTRA_triggerType(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
Enc5@input = element(4, Val),
if Enc3@input =:= rsrp ->
if Enc5@input =:= sameAsTriggerQuantity ->
<<0:1,0:1>>;
Enc5@input =:= both ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end;
Enc3@input =:= rsrq ->
if Enc5@input =:= sameAsTriggerQuantity ->
<<1:1,0:1>>;
Enc5@input =:= both ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc7@input = element(5, Val),
Enc7@input@sub = Enc7@input - 1,
if Enc7@input@sub bsr 3 =:= 0 ->
<<Enc7@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(6, Val),
if Enc9@input =:= ms120 ->
<<0:4>>;
Enc9@input =:= ms240 ->
<<1:4>>;
Enc9@input =:= ms480 ->
<<2:4>>;
Enc9@input =:= ms640 ->
<<3:4>>;
Enc9@input =:= ms1024 ->
<<4:4>>;
Enc9@input =:= ms2048 ->
<<5:4>>;
Enc9@input =:= ms5120 ->
<<6:4>>;
Enc9@input =:= ms10240 ->
<<7:4>>;
Enc9@input =:= min1 ->
<<8:4>>;
Enc9@input =:= min6 ->
<<9:4>>;
Enc9@input =:= min12 ->
<<10:4>>;
Enc9@input =:= min30 ->
<<11:4>>;
Enc9@input =:= min60 ->
<<12:4>>;
Enc9@input =:= spare3 ->
<<13:4>>;
Enc9@input =:= spare2 ->
<<14:4>>;
Enc9@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(7, Val),
if Enc11@input =:= r1 ->
<<0:3>>;
Enc11@input =:= r2 ->
<<1:3>>;
Enc11@input =:= r4 ->
<<2:3>>;
Enc11@input =:= r8 ->
<<3:3>>;
Enc11@input =:= r16 ->
<<4:3>>;
Enc11@input =:= r32 ->
<<5:3>>;
Enc11@input =:= r64 ->
<<6:3>>;
Enc11@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end].
'enc_ReportConfigEUTRA_triggerType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= event ->
[<<0:1>>|enc_ReportConfigEUTRA_triggerType_event(ChoiceVal)];
ChoiceTag =:= periodical ->
[<<1:1>>|enc_ReportConfigEUTRA_triggerType_periodical(ChoiceVal)]
end.
'enc_ReportConfigEUTRA_triggerType_event'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_ReportConfigEUTRA_triggerType_event_eventId(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
if 0 =< Enc2@input, Enc2@input < 31 ->
<<Enc2@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(4, Val),
if Enc4@input =:= ms0 ->
<<0:4>>;
Enc4@input =:= ms40 ->
<<1:4>>;
Enc4@input =:= ms64 ->
<<2:4>>;
Enc4@input =:= ms80 ->
<<3:4>>;
Enc4@input =:= ms100 ->
<<4:4>>;
Enc4@input =:= ms128 ->
<<5:4>>;
Enc4@input =:= ms160 ->
<<6:4>>;
Enc4@input =:= ms256 ->
<<7:4>>;
Enc4@input =:= ms320 ->
<<8:4>>;
Enc4@input =:= ms480 ->
<<9:4>>;
Enc4@input =:= ms512 ->
<<10:4>>;
Enc4@input =:= ms640 ->
<<11:4>>;
Enc4@input =:= ms1024 ->
<<12:4>>;
Enc4@input =:= ms1280 ->
<<13:4>>;
Enc4@input =:= ms2560 ->
<<14:4>>;
Enc4@input =:= ms5120 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].
'enc_ReportConfigEUTRA_triggerType_event_eventId'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= eventA1 ->
[<<0:1,0:3>>|enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1(ChoiceVal)];
ChoiceTag =:= eventA2 ->
[<<0:1,1:3>>|enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2(ChoiceVal)];
ChoiceTag =:= eventA3 ->
[<<0:1,2:3>>|enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3(ChoiceVal)];
ChoiceTag =:= eventA4 ->
[<<0:1,3:3>>|enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4(ChoiceVal)];
ChoiceTag =:= eventA5 ->
[<<0:1,4:3>>|enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5(ChoiceVal)]
end.
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Val) ->
Enc1@input = element(2, Val),
enc_ThresholdEUTRA(Enc1@input).

dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1(Bytes) ->

%% attribute number 1 with type ThresholdEUTRA
{Term1,Bytes1} = dec_ThresholdEUTRA(Bytes),
{{'ReportConfigEUTRA_triggerType_event_eventId_eventA1',Term1},Bytes1}.

'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Val) ->
Enc1@input = element(2, Val),
enc_ThresholdEUTRA(Enc1@input).

dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2(Bytes) ->

%% attribute number 1 with type ThresholdEUTRA
{Term1,Bytes1} = dec_ThresholdEUTRA(Bytes),
{{'ReportConfigEUTRA_triggerType_event_eventId_eventA2',Term1},Bytes1}.

'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - -30,
if 0 =< Enc1@input@sub, Enc1@input@sub < 61 ->
<<Enc1@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= false ->
<<0:1>>;
Enc3@input =:= true ->
<<1:1>>
end
end].

dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -30,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,
{{'ReportConfigEUTRA_triggerType_event_eventId_eventA3',Term1,Term2},Bytes2}.

'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Val) ->
Enc1@input = element(2, Val),
enc_ThresholdEUTRA(Enc1@input).

dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4(Bytes) ->

%% attribute number 1 with type ThresholdEUTRA
{Term1,Bytes1} = dec_ThresholdEUTRA(Bytes),
{{'ReportConfigEUTRA_triggerType_event_eventId_eventA4',Term1},Bytes1}.

'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_ThresholdEUTRA(Enc1@input)
end|begin
Enc2@input = element(3, Val),
enc_ThresholdEUTRA(Enc2@input)
end].

dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5(Bytes) ->

%% attribute number 1 with type ThresholdEUTRA
{Term1,Bytes1} = dec_ThresholdEUTRA(Bytes),

%% attribute number 2 with type ThresholdEUTRA
{Term2,Bytes2} = dec_ThresholdEUTRA(Bytes1),
{{'ReportConfigEUTRA_triggerType_event_eventId_eventA5',Term1,Term2},Bytes2}.


dec_ReportConfigEUTRA_triggerType_event_eventId(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Bytes2)
end,
{{eventA1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Bytes2)
end,
{{eventA2,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Bytes2)
end,
{{eventA3,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Bytes2)
end,
{{eventA4,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Bytes2)
end,
{{eventA5,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_ReportConfigEUTRA_triggerType_event(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_ReportConfigEUTRA_triggerType_event_eventId'(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> ms0;
1 -> ms40;
2 -> ms64;
3 -> ms80;
4 -> ms100;
5 -> ms128;
6 -> ms160;
7 -> ms256;
8 -> ms320;
9 -> ms480;
10 -> ms512;
11 -> ms640;
12 -> ms1024;
13 -> ms1280;
14 -> ms2560;
15 -> ms5120
end,
{V2@Int2,V2@Buf1}
end,
{{'ReportConfigEUTRA_triggerType_event',Term1,Term2,Term3},Bytes3}.

'enc_ReportConfigEUTRA_triggerType_periodical'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= reportStrongestCells ->
<<0:1>>;
Enc1@input =:= reportCGI ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.

dec_ReportConfigEUTRA_triggerType_periodical(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> reportStrongestCells;
1 -> reportCGI
end,
{V1@Int2,V1@Buf1}
end,
{{'ReportConfigEUTRA_triggerType_periodical',Term1},Bytes1}.


dec_ReportConfigEUTRA_triggerType(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_event'(Bytes1)
end,
{{event,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ReportConfigEUTRA_triggerType_periodical'(Bytes1)
end,
{{periodical,Val},NewBytes}
end.


dec_ReportConfigEUTRA(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_ReportConfigEUTRA_triggerType'(Bytes1),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> rsrp;
1 -> rsrq
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes3,
V3@Int2 = case V3@V0 of
0 -> sameAsTriggerQuantity;
1 -> both
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes6} = begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> ms120;
1 -> ms240;
2 -> ms480;
3 -> ms640;
4 -> ms1024;
5 -> ms2048;
6 -> ms5120;
7 -> ms10240;
8 -> min1;
9 -> min6;
10 -> min12;
11 -> min30;
12 -> min60;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type ENUMERATED
{Term6,Bytes7} = begin
<<V6@V0:3,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> r1;
1 -> r2;
2 -> r4;
3 -> r8;
4 -> r16;
5 -> r32;
6 -> r64;
7 -> infinity
end,
{V6@Int2,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V9:V7@V0/bitstring-unit:1,V7@Buf10/bitstring>> = V7@Buf1,
{V7@V9,V7@Buf10}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'ReportConfigEUTRA',Term1,Term2,Term3,Term4,Term5,Term6},Bytes9}.

'enc_QuantityConfigCDMA2000'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= pilotStrength ->
<<0:1>>;
Enc1@input =:= pilotPnPhaseAndPilotStrength ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.


dec_QuantityConfigCDMA2000(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> pilotStrength;
1 -> pilotPnPhaseAndPilotStrength
end,
{V1@Int2,V1@Buf1}
end,
{{'QuantityConfigCDMA2000',Term1},Bytes1}.

'enc_QuantityConfigGERAN'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(2, Val),
if Enc1@input =:= asn1_DEFAULT ->
if Enc2@input =:= rssi ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end;
Enc1@input =:= fc2 ->
if Enc2@input =:= rssi ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end;
true ->
if Enc2@input =:= rssi ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_DEFAULT ->
[];
Enc4@input =:= fc2 ->
[];
Enc4@input =:= fc0 ->
<<0:1,0:4>>;
Enc4@input =:= fc1 ->
<<0:1,1:4>>;
Enc4@input =:= fc3 ->
<<0:1,3:4>>;
Enc4@input =:= fc4 ->
<<0:1,4:4>>;
Enc4@input =:= fc5 ->
<<0:1,5:4>>;
Enc4@input =:= fc6 ->
<<0:1,6:4>>;
Enc4@input =:= fc7 ->
<<0:1,7:4>>;
Enc4@input =:= fc8 ->
<<0:1,8:4>>;
Enc4@input =:= fc9 ->
<<0:1,9:4>>;
Enc4@input =:= fc11 ->
<<0:1,10:4>>;
Enc4@input =:= fc13 ->
<<0:1,11:4>>;
Enc4@input =:= fc15 ->
<<0:1,12:4>>;
Enc4@input =:= fc17 ->
<<0:1,13:4>>;
Enc4@input =:= fc19 ->
<<0:1,14:4>>;
Enc4@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_QuantityConfigGERAN(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
ignore,
{'rssi',Bytes1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11}
end,
<<V3@V12:V3@V6/unit:8,V3@Buf13/bitstring>> = V3@Buf7,
{V3@V12,V3@Buf13}
end,
V3@Int14 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int14,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{fc2,Bytes2}
end,
{{'QuantityConfigGERAN',Term1,Term2},Bytes3}.

'enc_QuantityConfigUTRA'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(2, Val),
Enc4@input = element(3, Val),
if Enc1@input =:= asn1_DEFAULT ->
if Enc2@input =:= 'cpich-RSCP' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
Enc2@input =:= 'cpich-EcN0' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end;
Enc1@input =:= fc4 ->
if Enc2@input =:= 'cpich-RSCP' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
Enc2@input =:= 'cpich-EcN0' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end;
true ->
if Enc2@input =:= 'cpich-RSCP' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<1:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
Enc2@input =:= 'cpich-EcN0' ->
if Enc4@input =:= 'pccpch-RSCP' ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_DEFAULT ->
[];
Enc6@input =:= fc4 ->
[];
Enc6@input =:= fc0 ->
<<0:1,0:4>>;
Enc6@input =:= fc1 ->
<<0:1,1:4>>;
Enc6@input =:= fc2 ->
<<0:1,2:4>>;
Enc6@input =:= fc3 ->
<<0:1,3:4>>;
Enc6@input =:= fc5 ->
<<0:1,5:4>>;
Enc6@input =:= fc6 ->
<<0:1,6:4>>;
Enc6@input =:= fc7 ->
<<0:1,7:4>>;
Enc6@input =:= fc8 ->
<<0:1,8:4>>;
Enc6@input =:= fc9 ->
<<0:1,9:4>>;
Enc6@input =:= fc11 ->
<<0:1,10:4>>;
Enc6@input =:= fc13 ->
<<0:1,11:4>>;
Enc6@input =:= fc15 ->
<<0:1,12:4>>;
Enc6@input =:= fc17 ->
<<0:1,13:4>>;
Enc6@input =:= fc19 ->
<<0:1,14:4>>;
Enc6@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].


dec_QuantityConfigUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> 'cpich-RSCP';
1 -> 'cpich-EcN0'
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
ignore,
{'pccpch-RSCP',Bytes2}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = case Opt band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:4,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<0:1,V4@V9:7,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10};
<<1:1,0:1,V4@V10:14,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11}
end,
<<V4@V12:V4@V6/unit:8,V4@Buf13/bitstring>> = V4@Buf7,
{V4@V12,V4@Buf13}
end,
V4@Int14 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int14,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{fc4,Bytes3}
end,
{{'QuantityConfigUTRA',Term1,Term2,Term3},Bytes4}.

'enc_QuantityConfigEUTRA'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_DEFAULT ->
<<0:1>>;
Enc1@input =:= fc4 ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(3, Val),
if Enc2@input =:= asn1_DEFAULT ->
<<0:1>>;
Enc2@input =:= fc4 ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_DEFAULT ->
[];
Enc3@input =:= fc4 ->
[];
Enc3@input =:= fc0 ->
<<0:1,0:4>>;
Enc3@input =:= fc1 ->
<<0:1,1:4>>;
Enc3@input =:= fc2 ->
<<0:1,2:4>>;
Enc3@input =:= fc3 ->
<<0:1,3:4>>;
Enc3@input =:= fc5 ->
<<0:1,5:4>>;
Enc3@input =:= fc6 ->
<<0:1,6:4>>;
Enc3@input =:= fc7 ->
<<0:1,7:4>>;
Enc3@input =:= fc8 ->
<<0:1,8:4>>;
Enc3@input =:= fc9 ->
<<0:1,9:4>>;
Enc3@input =:= fc11 ->
<<0:1,10:4>>;
Enc3@input =:= fc13 ->
<<0:1,11:4>>;
Enc3@input =:= fc15 ->
<<0:1,12:4>>;
Enc3@input =:= fc17 ->
<<0:1,13:4>>;
Enc3@input =:= fc19 ->
<<0:1,14:4>>;
Enc3@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_DEFAULT ->
[];
Enc6@input =:= fc4 ->
[];
Enc6@input =:= fc0 ->
<<0:1,0:4>>;
Enc6@input =:= fc1 ->
<<0:1,1:4>>;
Enc6@input =:= fc2 ->
<<0:1,2:4>>;
Enc6@input =:= fc3 ->
<<0:1,3:4>>;
Enc6@input =:= fc5 ->
<<0:1,5:4>>;
Enc6@input =:= fc6 ->
<<0:1,6:4>>;
Enc6@input =:= fc7 ->
<<0:1,7:4>>;
Enc6@input =:= fc8 ->
<<0:1,8:4>>;
Enc6@input =:= fc9 ->
<<0:1,9:4>>;
Enc6@input =:= fc11 ->
<<0:1,10:4>>;
Enc6@input =:= fc13 ->
<<0:1,11:4>>;
Enc6@input =:= fc15 ->
<<0:1,12:4>>;
Enc6@input =:= fc17 ->
<<0:1,13:4>>;
Enc6@input =:= fc19 ->
<<0:1,14:4>>;
Enc6@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].


dec_QuantityConfigEUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:4,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11}
end,
<<V2@V12:V2@V6/unit:8,V2@Buf13/bitstring>> = V2@Buf7,
{V2@V12,V2@Buf13}
end,
V2@Int14 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int14,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end;
0 ->
{fc4,Bytes1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11}
end,
<<V3@V12:V3@V6/unit:8,V3@Buf13/bitstring>> = V3@Buf7,
{V3@V12,V3@Buf13}
end,
V3@Int14 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int14,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end;
0 ->
{fc4,Bytes2}
end,
{{'QuantityConfigEUTRA',Term1,Term2},Bytes3}.

'enc_QuantityConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_QuantityConfigEUTRA(Enc6@input)
end
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_QuantityConfigUTRA(Enc8@input)
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
enc_QuantityConfigGERAN(Enc10@input)
end
end|begin
Enc12@input = element(5, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
enc_QuantityConfigCDMA2000(Enc12@input)
end
end].


dec_QuantityConfig(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type QuantityConfigEUTRA
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
dec_QuantityConfigEUTRA(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type QuantityConfigUTRA
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_QuantityConfigUTRA(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type QuantityConfigGERAN
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_QuantityConfigGERAN(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type QuantityConfigCDMA2000
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_QuantityConfigCDMA2000(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'QuantityConfig',Term1,Term2,Term3,Term4},Bytes8}.

'enc_PLMN-IdentityList2'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 5 ->
[<<Enc1@len@sub:3>>|['enc_PLMN-Identity'(Comp) || Comp <- Val]]
end.



'dec_PLMN-IdentityList2'(Bytes) ->
%% Length with constraint {1,5}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components14(V1@Add2, V1@Buf1, []).

'enc_MeasResultCDMA2000'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input bsr 9 =:= 0 ->
<<Enc2@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellGlobalIdCDMA2000(Enc4@input)
end
end|begin
Enc6@input = element(4, Val),
enc_MeasResultCDMA2000_measResult(Enc6@input)
end].
'enc_MeasResultCDMA2000_measResult'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input bsr 15 =:= 0 ->
<<Enc3@input:15>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc6@input = element(3, Val),
if Enc6@input bsr 6 =:= 0 ->
<<Enc6@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].

dec_MeasResultCDMA2000_measResult(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:15,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MeasResultCDMA2000_measResult',Term1,Term2},Bytes6}.



dec_MeasResultCDMA2000(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type CellGlobalIdCDMA2000
{Term2,Bytes3} = case Opt band 1 of
1 ->
dec_CellGlobalIdCDMA2000(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_MeasResultCDMA2000_measResult'(Bytes3),
{{'MeasResultCDMA2000',Term1,Term2,Term3},Bytes4}.

'enc_MeasResultListCDMA2000'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_MeasResultCDMA2000(Comp) || Comp <- Val]]
end.



dec_MeasResultListCDMA2000(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components15(V1@Add2, V1@Buf1, []).

'enc_MeasResultsCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end
end|begin
Enc3@input = element(3, Val),
enc_MeasResultListCDMA2000(Enc3@input)
end].


dec_MeasResultsCDMA2000(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type MeasResultListCDMA2000
{Term2,Bytes2} = dec_MeasResultListCDMA2000(Bytes1),
{{'MeasResultsCDMA2000',Term1,Term2},Bytes2}.

'enc_MeasResultGERAN'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_CarrierFreqGERAN(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
enc_PhysCellIdGERAN(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MeasResultGERAN_cgi-Info'(Enc4@input)
end
end|begin
Enc6@input = element(5, Val),
enc_MeasResultGERAN_measResult(Enc6@input)
end].
'enc_MeasResultGERAN_cgi-Info'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_CellGlobalIdGERAN(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@bs = to_bitstring(Enc3@input, 8),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 8 ->
Enc4@bs
end
end
end
end].

'dec_MeasResultGERAN_cgi-Info'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CellGlobalIdGERAN
{Term1,Bytes2} = dec_CellGlobalIdGERAN(Bytes1),

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V2@V0:8/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'MeasResultGERAN_cgi-Info',Term1,Term2},Bytes3}.

'enc_MeasResultGERAN_measResult'(Val) ->
Enc2@input = element(2, Val),
if Enc2@input bsr 6 =:= 0 ->
<<0:1,Enc2@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end.

dec_MeasResultGERAN_measResult(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'MeasResultGERAN_measResult',Term1},Bytes4}.



dec_MeasResultGERAN(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CarrierFreqGERAN
{Term1,Bytes2} = dec_CarrierFreqGERAN(Bytes1),

%% attribute number 2 with type PhysCellIdGERAN
{Term2,Bytes3} = dec_PhysCellIdGERAN(Bytes2),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_MeasResultGERAN_cgi-Info'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = 'dec_MeasResultGERAN_measResult'(Bytes4),
{{'MeasResultGERAN',Term1,Term2,Term3,Term4},Bytes5}.

'enc_MeasResultListGERAN'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_MeasResultGERAN(Comp) || Comp <- Val]]
end.



dec_MeasResultListGERAN(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components16(V1@Add2, V1@Buf1, []).

'enc_MeasResultUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_MeasResultUTRA_physCellId(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MeasResultUTRA_cgi-Info'(Enc3@input)
end
end|begin
Enc5@input = element(4, Val),
enc_MeasResultUTRA_measResult(Enc5@input)
end].
'enc_MeasResultUTRA_physCellId'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= fdd ->
if ChoiceVal bsr 9 =:= 0 ->
<<0:1,ChoiceVal:9>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= tdd ->
if ChoiceVal bsr 7 =:= 0 ->
<<1:1,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

dec_MeasResultUTRA_physCellId(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{fdd,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{tdd,Val},NewBytes}
end.
'enc_MeasResultUTRA_cgi-Info'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@input = element(2, Val),
enc_CellGlobalIdUTRA(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@bs = to_bitstring(Enc5@input, 16),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
Enc6@bs
end
end
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc9@bs = to_bitstring(Enc8@input, 8),
Enc9@bits = bit_size(Enc9@bs),
if Enc9@bits =:= 8 ->
Enc9@bs
end
end
end
end|begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PLMN-IdentityList2'(Enc11@input)
end
end].

'dec_MeasResultUTRA_cgi-Info'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CellGlobalIdUTRA
{Term1,Bytes2} = dec_CellGlobalIdUTRA(Bytes1),

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type PLMN-IdentityList2
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_PLMN-IdentityList2'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'MeasResultUTRA_cgi-Info',Term1,Term2,Term3,Term4},Bytes5}.

'enc_MeasResultUTRA_measResult'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@input@sub = Enc4@input - -5,
if 0 =< Enc4@input@sub, Enc4@input@sub < 97 ->
<<Enc4@input@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end
end
end|begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
0 =< Enc7@input, Enc7@input < 50 ->
<<Enc7@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].

dec_MeasResultUTRA_measResult(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -5,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MeasResultUTRA_measResult',Term1,Term2},Bytes6}.



dec_MeasResultUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_MeasResultUTRA_physCellId'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_MeasResultUTRA_cgi-Info'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_MeasResultUTRA_measResult'(Bytes3),
{{'MeasResultUTRA',Term1,Term2,Term3},Bytes4}.

'enc_MeasResultListUTRA'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_MeasResultUTRA(Comp) || Comp <- Val]]
end.



dec_MeasResultListUTRA(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components17(V1@Add2, V1@Buf1, []).

'enc_MeasResultEUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if 0 =< Enc2@input, Enc2@input < 504 ->
<<Enc2@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MeasResultEUTRA_cgi-Info'(Enc4@input)
end
end|begin
Enc6@input = element(4, Val),
enc_MeasResultEUTRA_measResult(Enc6@input)
end].
'enc_MeasResultEUTRA_cgi-Info'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_CellGlobalIdEUTRA(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
Enc4@bs
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PLMN-IdentityList2'(Enc5@input)
end
end].

'dec_MeasResultEUTRA_cgi-Info'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CellGlobalIdEUTRA
{Term1,Bytes2} = dec_CellGlobalIdEUTRA(Bytes1),

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 3 with type PLMN-IdentityList2
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_PLMN-IdentityList2'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'MeasResultEUTRA_cgi-Info',Term1,Term2,Term3},Bytes4}.

'enc_MeasResultEUTRA_measResult'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
0 =< Enc4@input, Enc4@input < 98 ->
<<Enc4@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end|begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
0 =< Enc7@input, Enc7@input < 35 ->
<<Enc7@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].

dec_MeasResultEUTRA_measResult(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'MeasResultEUTRA_measResult',Term1,Term2},Bytes6}.



dec_MeasResultEUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_MeasResultEUTRA_cgi-Info'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_MeasResultEUTRA_measResult'(Bytes3),
{{'MeasResultEUTRA',Term1,Term2,Term3},Bytes4}.

'enc_MeasResultListEUTRA'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_MeasResultEUTRA(Comp) || Comp <- Val]]
end.



dec_MeasResultListEUTRA(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components18(V1@Add2, V1@Buf1, []).

'enc_MeasResults'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc3@input@sub = Enc3@input - 1,
if Enc3@input@sub bsr 5 =:= 0 ->
<<Enc3@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
enc_MeasResults_measResultServCell(Enc5@input)
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasResults_measResultNeighCells(Enc6@input)
end
end].
'enc_MeasResults_measResultServCell'(Val) ->
[begin
Enc1@input = element(2, Val),
if 0 =< Enc1@input, Enc1@input < 98 ->
<<Enc1@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 35 ->
<<Enc3@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

dec_MeasResults_measResultServCell(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'MeasResults_measResultServCell',Term1,Term2},Bytes2}.

'enc_MeasResults_measResultNeighCells'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= measResultListEUTRA ->
[<<0:1,0:2>>|enc_MeasResultListEUTRA(ChoiceVal)];
ChoiceTag =:= measResultListUTRA ->
[<<0:1,1:2>>|enc_MeasResultListUTRA(ChoiceVal)];
ChoiceTag =:= measResultListGERAN ->
[<<0:1,2:2>>|enc_MeasResultListGERAN(ChoiceVal)];
ChoiceTag =:= measResultsCDMA2000 ->
[<<0:1,3:2>>|enc_MeasResultsCDMA2000(ChoiceVal)]
end.

dec_MeasResults_measResultNeighCells(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_MeasResultListEUTRA(Bytes2)
end,
{{measResultListEUTRA,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MeasResultListUTRA(Bytes2)
end,
{{measResultListUTRA,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_MeasResultListGERAN(Bytes2)
end,
{{measResultListGERAN,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_MeasResultsCDMA2000(Bytes2)
end,
{{measResultsCDMA2000,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MeasResults(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = 'dec_MeasResults_measResultServCell'(Bytes3),

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_MeasResults_measResultNeighCells'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'MeasResults',Term1,Term2,Term3},Bytes7}.

'enc_CellsToAddModUTRA-TDD'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 7 =:= 0 ->
<<Enc3@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_CellsToAddModUTRA-TDD'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'CellsToAddModUTRA-TDD',Term1,Term2},Bytes2}.

'enc_CellsToAddModListUTRA-TDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|['enc_CellsToAddModUTRA-TDD'(Comp) || Comp <- Val]]
end.



'dec_CellsToAddModListUTRA-TDD'(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components19(V1@Add2, V1@Buf1, []).

'enc_CellsToAddModUTRA-FDD'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 9 =:= 0 ->
<<Enc3@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_CellsToAddModUTRA-FDD'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'CellsToAddModUTRA-FDD',Term1,Term2},Bytes2}.

'enc_CellsToAddModListUTRA-FDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|['enc_CellsToAddModUTRA-FDD'(Comp) || Comp <- Val]]
end.



'dec_CellsToAddModListUTRA-FDD'(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components20(V1@Add2, V1@Buf1, []).

'enc_MeasObjectUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_DEFAULT ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
Enc1@input =:= 0 ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
if Enc6@input bsr 14 =:= 0 ->
<<Enc6@input:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_DEFAULT ->
[];
Enc8@input =:= 0 ->
[];
true ->
begin
Enc8@input@sub = Enc8@input - -15,
if 0 =< Enc8@input@sub, Enc8@input@sub < 31 ->
<<Enc8@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellIndexList(Enc11@input)
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasObjectUTRA_cellsToAddModList(Enc13@input)
end
end|begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasObjectUTRA_cellForWhichToReportCGI(Enc15@input)
end
end].
'enc_MeasObjectUTRA_cellsToAddModList'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'cellsToAddModListUTRA-FDD' ->
[<<0:1>>|'enc_CellsToAddModListUTRA-FDD'(ChoiceVal)];
ChoiceTag =:= 'cellsToAddModListUTRA-TDD' ->
[<<1:1>>|'enc_CellsToAddModListUTRA-TDD'(ChoiceVal)]
end.

dec_MeasObjectUTRA_cellsToAddModList(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CellsToAddModListUTRA-FDD'(Bytes1)
end,
{{'cellsToAddModListUTRA-FDD',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CellsToAddModListUTRA-TDD'(Bytes1)
end,
{{'cellsToAddModListUTRA-TDD',Val},NewBytes}
end.
'enc_MeasObjectUTRA_cellForWhichToReportCGI'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'utra-FDD' ->
if ChoiceVal bsr 9 =:= 0 ->
<<0:1,ChoiceVal:9>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'utra-TDD' ->
if ChoiceVal bsr 7 =:= 0 ->
<<1:1,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

dec_MeasObjectUTRA_cellForWhichToReportCGI(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{'utra-FDD',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{'utra-TDD',Val},NewBytes}
end.


dec_MeasObjectUTRA(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -15,
{V4@Add2,V4@Buf1}
end;
0 ->
{0,Bytes3}
end,

%% attribute number 3 with type CellIndexList
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_CellIndexList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_MeasObjectUTRA_cellsToAddModList'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type CHOICE
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_MeasObjectUTRA_cellForWhichToReportCGI'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'MeasObjectUTRA',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_MeasObjectToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_MeasObjectToAddMod_measObject(Enc3@input)
end].
'enc_MeasObjectToAddMod_measObject'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= measObjectEUTRA ->
[<<0:1,0:2>>|enc_MeasObjectEUTRA(ChoiceVal)];
ChoiceTag =:= measObjectUTRA ->
[<<0:1,1:2>>|enc_MeasObjectUTRA(ChoiceVal)];
ChoiceTag =:= measObjectGERAN ->
[<<0:1,2:2>>|enc_MeasObjectGERAN(ChoiceVal)];
ChoiceTag =:= measObjectCDMA2000 ->
[<<0:1,3:2>>|enc_MeasObjectCDMA2000(ChoiceVal)]
end.

dec_MeasObjectToAddMod_measObject(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_MeasObjectEUTRA(Bytes2)
end,
{{measObjectEUTRA,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MeasObjectUTRA(Bytes2)
end,
{{measObjectUTRA,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_MeasObjectGERAN(Bytes2)
end,
{{measObjectGERAN,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_MeasObjectCDMA2000(Bytes2)
end,
{{measObjectCDMA2000,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_MeasObjectToAddMod(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_MeasObjectToAddMod_measObject'(Bytes1),
{{'MeasObjectToAddMod',Term1,Term2},Bytes2}.

'enc_MeasObjectToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_MeasObjectToAddMod(Comp) || Comp <- Val]]
end.



dec_MeasObjectToAddModList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components21(V1@Add2, V1@Buf1, []).

'enc_MeasObjectId'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_MeasObjectId(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_MeasObjectGERAN'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_DEFAULT ->
<<0:1,0:1>>;
Enc1@input =:= 0 ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc2@input = element(4, Val),
if Enc2@input =:= asn1_DEFAULT ->
<<0:1>>;
Enc2@input =:= <<255>> ->
<<0:1>>;
Enc2@input =:= {0,<<255>>} ->
<<0:1>>;
Enc2@input =:= [1,1,1,1,1,1,1,1] ->
<<0:1>>;
Enc2@input =:= 255 ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
enc_CarrierFreqsGERAN(Enc5@input)
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_DEFAULT ->
[];
Enc6@input =:= 0 ->
[];
true ->
begin
Enc6@input@sub = Enc6@input - -15,
if 0 =< Enc6@input@sub, Enc6@input@sub < 31 ->
<<Enc6@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_DEFAULT ->
[];
Enc9@input =:= <<255>> ->
[];
Enc9@input =:= {0,<<255>>} ->
[];
Enc9@input =:= [1,1,1,1,1,1,1,1] ->
[];
Enc9@input =:= 255 ->
[];
true ->
begin
Enc10@bs = to_bitstring(Enc9@input, 8),
Enc10@bits = bit_size(Enc10@bs),
if Enc10@bits =:= 8 ->
Enc10@bs
end
end
end
end|begin
Enc12@input = element(5, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
enc_PhysCellIdGERAN(Enc12@input)
end
end].


dec_MeasObjectGERAN(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CarrierFreqsGERAN
{Term1,Bytes3} = dec_CarrierFreqsGERAN(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes3,
V3@Add2 = V3@V0 + -15,
{V3@Add2,V3@Buf1}
end;
0 ->
{0,Bytes3}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:8/binary-unit:1,V4@Buf1/bitstring>> = Bytes4,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end;
0 ->
{{0,<<255>>},Bytes4}
end,

%% attribute number 4 with type PhysCellIdGERAN
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_PhysCellIdGERAN(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'MeasObjectGERAN',Term1,Term2,Term3,Term4},Bytes8}.

'enc_BlackCellsToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_PhysCellIdRange(Enc3@input)
end].


dec_BlackCellsToAddMod(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type PhysCellIdRange
{Term2,Bytes2} = dec_PhysCellIdRange(Bytes1),
{{'BlackCellsToAddMod',Term1,Term2},Bytes2}.

'enc_BlackCellsToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_BlackCellsToAddMod(Comp) || Comp <- Val]]
end.



dec_BlackCellsToAddModList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components22(V1@Add2, V1@Buf1, []).

'enc_CellsToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 504 ->
<<Enc3@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= 'dB-24' ->
<<0:5>>;
Enc5@input =:= 'dB-22' ->
<<1:5>>;
Enc5@input =:= 'dB-20' ->
<<2:5>>;
Enc5@input =:= 'dB-18' ->
<<3:5>>;
Enc5@input =:= 'dB-16' ->
<<4:5>>;
Enc5@input =:= 'dB-14' ->
<<5:5>>;
Enc5@input =:= 'dB-12' ->
<<6:5>>;
Enc5@input =:= 'dB-10' ->
<<7:5>>;
Enc5@input =:= 'dB-8' ->
<<8:5>>;
Enc5@input =:= 'dB-6' ->
<<9:5>>;
Enc5@input =:= 'dB-5' ->
<<10:5>>;
Enc5@input =:= 'dB-4' ->
<<11:5>>;
Enc5@input =:= 'dB-3' ->
<<12:5>>;
Enc5@input =:= 'dB-2' ->
<<13:5>>;
Enc5@input =:= 'dB-1' ->
<<14:5>>;
Enc5@input =:= dB0 ->
<<15:5>>;
Enc5@input =:= dB1 ->
<<16:5>>;
Enc5@input =:= dB2 ->
<<17:5>>;
Enc5@input =:= dB3 ->
<<18:5>>;
Enc5@input =:= dB4 ->
<<19:5>>;
Enc5@input =:= dB5 ->
<<20:5>>;
Enc5@input =:= dB6 ->
<<21:5>>;
Enc5@input =:= dB8 ->
<<22:5>>;
Enc5@input =:= dB10 ->
<<23:5>>;
Enc5@input =:= dB12 ->
<<24:5>>;
Enc5@input =:= dB14 ->
<<25:5>>;
Enc5@input =:= dB16 ->
<<26:5>>;
Enc5@input =:= dB18 ->
<<27:5>>;
Enc5@input =:= dB20 ->
<<28:5>>;
Enc5@input =:= dB22 ->
<<29:5>>;
Enc5@input =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


dec_CellsToAddMod(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V3@Int2,V3@Buf1}
end,
{{'CellsToAddMod',Term1,Term2,Term3},Bytes3}.

'enc_CellsToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_CellsToAddMod(Comp) || Comp <- Val]]
end.



dec_CellsToAddModList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components23(V1@Add2, V1@Buf1, []).

'enc_MeasObjectEUTRA'(Val) ->
[begin
Enc1@input = element(6, Val),
Enc2@input = element(7, Val),
if Enc1@input =:= asn1_DEFAULT ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
Enc1@input =:= dB0 ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(8, Val),
Enc4@input = element(9, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(10, Val),
Enc6@input = element(11, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@input = element(2, Val),
if Enc8@input bsr 16 =:= 0 ->
<<Enc8@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(3, Val),
if Enc10@input =:= mbw6 ->
<<0:3>>;
Enc10@input =:= mbw15 ->
<<1:3>>;
Enc10@input =:= mbw25 ->
<<2:3>>;
Enc10@input =:= mbw50 ->
<<3:3>>;
Enc10@input =:= mbw75 ->
<<4:3>>;
Enc10@input =:= mbw100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(4, Val),
if Enc12@input =:= false ->
<<0:1>>;
Enc12@input =:= true ->
<<1:1>>
end
end,
begin
Enc14@input = element(5, Val),
Enc15@bs = to_bitstring(Enc14@input, 2),
Enc15@bits = bit_size(Enc15@bs),
if Enc15@bits =:= 2 ->
Enc15@bs
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= asn1_DEFAULT ->
[];
Enc16@input =:= dB0 ->
[];
Enc16@input =:= 'dB-24' ->
<<0:5>>;
Enc16@input =:= 'dB-22' ->
<<1:5>>;
Enc16@input =:= 'dB-20' ->
<<2:5>>;
Enc16@input =:= 'dB-18' ->
<<3:5>>;
Enc16@input =:= 'dB-16' ->
<<4:5>>;
Enc16@input =:= 'dB-14' ->
<<5:5>>;
Enc16@input =:= 'dB-12' ->
<<6:5>>;
Enc16@input =:= 'dB-10' ->
<<7:5>>;
Enc16@input =:= 'dB-8' ->
<<8:5>>;
Enc16@input =:= 'dB-6' ->
<<9:5>>;
Enc16@input =:= 'dB-5' ->
<<10:5>>;
Enc16@input =:= 'dB-4' ->
<<11:5>>;
Enc16@input =:= 'dB-3' ->
<<12:5>>;
Enc16@input =:= 'dB-2' ->
<<13:5>>;
Enc16@input =:= 'dB-1' ->
<<14:5>>;
Enc16@input =:= dB1 ->
<<16:5>>;
Enc16@input =:= dB2 ->
<<17:5>>;
Enc16@input =:= dB3 ->
<<18:5>>;
Enc16@input =:= dB4 ->
<<19:5>>;
Enc16@input =:= dB5 ->
<<20:5>>;
Enc16@input =:= dB6 ->
<<21:5>>;
Enc16@input =:= dB8 ->
<<22:5>>;
Enc16@input =:= dB10 ->
<<23:5>>;
Enc16@input =:= dB12 ->
<<24:5>>;
Enc16@input =:= dB14 ->
<<25:5>>;
Enc16@input =:= dB16 ->
<<26:5>>;
Enc16@input =:= dB18 ->
<<27:5>>;
Enc16@input =:= dB20 ->
<<28:5>>;
Enc16@input =:= dB22 ->
<<29:5>>;
Enc16@input =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@input}}})
end
end,
begin
Enc19@input = element(7, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellIndexList(Enc19@input)
end
end,
begin
Enc21@input = element(8, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellsToAddModList(Enc21@input)
end
end,
begin
Enc23@input = element(9, Val),
if Enc23@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellIndexList(Enc23@input)
end
end,
begin
Enc25@input = element(10, Val),
if Enc25@input =:= asn1_NOVALUE ->
[];
true ->
enc_BlackCellsToAddModList(Enc25@input)
end
end|begin
Enc27@input = element(11, Val),
if Enc27@input =:= asn1_NOVALUE ->
[];
0 =< Enc27@input, Enc27@input < 504 ->
<<Enc27@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@input}}})
end
end].


dec_MeasObjectEUTRA(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,[mbw6,mbw15,mbw25,mbw50,mbw75,mbw100]}}}})
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = begin
<<V6@V0:2/binary-unit:1,V6@Buf1/bitstring>> = Bytes5,
{V6@V2,V6@Buf3}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V2,V6@Buf3}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V7@V0:5,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V7@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V7@Int2,V7@Buf1}
end;
0 ->
{dB0,Bytes6}
end,

%% attribute number 6 with type CellIndexList
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
dec_CellIndexList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type CellsToAddModList
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
dec_CellsToAddModList(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type CellIndexList
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_CellIndexList(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type BlackCellsToAddModList
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_BlackCellsToAddModList(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case Opt band 1 of
1 ->
begin
<<V8@V0:9,V8@Buf1/bitstring>> = Bytes11,
{V8@V0,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V9@V0,V9@Buf1} = case Bytes12 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V9:V9@V0/bitstring-unit:1,V9@Buf10/bitstring>> = V9@Buf1,
{V9@V9,V9@Buf10}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
{{'MeasObjectEUTRA',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_CellsToAddModCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 9 =:= 0 ->
<<Enc3@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_CellsToAddModCDMA2000(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'CellsToAddModCDMA2000',Term1,Term2},Bytes2}.

'enc_CellsToAddModListCDMA2000'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_CellsToAddModCDMA2000(Comp) || Comp <- Val]]
end.



dec_CellsToAddModListCDMA2000(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components24(V1@Add2, V1@Buf1, []).

'enc_MeasObjectCDMA2000'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_DEFAULT ->
<<0:1,0:1,0:1>>;
Enc2@input =:= 0 ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_DEFAULT ->
<<0:1,1:1,0:1>>;
Enc2@input =:= 0 ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(6, Val),
Enc4@input = element(7, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(8, Val),
Enc7@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc7@input =:= type1XRTT ->
<<0:1,0:1>>;
Enc7@input =:= typeHRPD ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end;
true ->
if Enc7@input =:= type1XRTT ->
<<1:1,0:1>>;
Enc7@input =:= typeHRPD ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end
end,
begin
Enc9@input = element(3, Val),
enc_CarrierFreqCDMA2000(Enc9@input)
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input bsr 4 =:= 0 ->
<<Enc10@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_DEFAULT ->
[];
Enc13@input =:= 0 ->
[];
true ->
begin
Enc13@input@sub = Enc13@input - -15,
if 0 =< Enc13@input@sub, Enc13@input@sub < 31 ->
<<Enc13@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellIndexList(Enc16@input)
end
end,
begin
Enc18@input = element(7, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellsToAddModListCDMA2000(Enc18@input)
end
end|begin
Enc20@input = element(8, Val),
if Enc20@input =:= asn1_NOVALUE ->
[];
Enc20@input bsr 9 =:= 0 ->
<<Enc20@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc20@input}}})
end
end].


dec_MeasObjectCDMA2000(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> type1XRTT;
1 -> typeHRPD
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type CarrierFreqCDMA2000
{Term2,Bytes4} = dec_CarrierFreqCDMA2000(Bytes3),

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes5,
V5@Add2 = V5@V0 + -15,
{V5@Add2,V5@Buf1}
end;
0 ->
{0,Bytes5}
end,

%% attribute number 5 with type CellIndexList
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
dec_CellIndexList(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type CellsToAddModListCDMA2000
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_CellsToAddModListCDMA2000(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V6@V0:9,V6@Buf1/bitstring>> = Bytes8,
{V6@V0,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V7@V0,V7@Buf1} = case Bytes9 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V9:V7@V0/bitstring-unit:1,V7@Buf10/bitstring>> = V7@Buf1,
{V7@V9,V7@Buf10}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'MeasObjectCDMA2000',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_MeasIdToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
Enc3@input@sub = Enc3@input - 1,
if Enc3@input@sub bsr 5 =:= 0 ->
<<Enc3@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc5@input@sub = Enc5@input - 1,
if Enc5@input@sub bsr 5 =:= 0 ->
<<Enc5@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


dec_MeasIdToAddMod(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,
{{'MeasIdToAddMod',Term1,Term2,Term3},Bytes3}.

'enc_MeasIdToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_MeasIdToAddMod(Comp) || Comp <- Val]]
end.



dec_MeasIdToAddModList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components25(V1@Add2, V1@Buf1, []).

'enc_MeasId'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_MeasId(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_MeasGapConfig'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|enc_MeasGapConfig_setup(ChoiceVal)]
end.
'enc_MeasGapConfig_setup'(Val) ->
Enc1@input = element(2, Val),
enc_MeasGapConfig_setup_gapOffset(Enc1@input).
'enc_MeasGapConfig_setup_gapOffset'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= gp0 ->
if 0 =< ChoiceVal, ChoiceVal < 40 ->
<<0:1,0:1,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= gp1 ->
if 0 =< ChoiceVal, ChoiceVal < 80 ->
<<0:1,1:1,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

dec_MeasGapConfig_setup_gapOffset(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{gp0,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{gp1,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

dec_MeasGapConfig_setup(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_MeasGapConfig_setup_gapOffset'(Bytes),
{{'MeasGapConfig_setup',Term1},Bytes1}.



dec_MeasGapConfig(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MeasGapConfig_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_ReportConfigToRemoveList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[begin
Comp@sub = Comp - 1,
if Comp@sub bsr 5 =:= 0 ->
<<Comp@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



dec_ReportConfigToRemoveList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components26(V1@Add2, V1@Buf1, []).

'enc_MeasObjectToRemoveList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[begin
Comp@sub = Comp - 1,
if Comp@sub bsr 5 =:= 0 ->
<<Comp@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



dec_MeasObjectToRemoveList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components27(V1@Add2, V1@Buf1, []).

'enc_MeasIdToRemoveList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[begin
Comp@sub = Comp - 1,
if Comp@sub bsr 5 =:= 0 ->
<<Comp@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



dec_MeasIdToRemoveList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components28(V1@Add2, V1@Buf1, []).

'enc_MeasConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(8, Val),
Enc8@input = element(9, Val),
if Enc7@input =:= asn1_NOVALUE ->
if Enc8@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(10, Val),
Enc10@input = element(11, Val),
if Enc9@input =:= asn1_NOVALUE ->
if Enc10@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc11@input = element(12, Val),
if Enc11@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc13@input = element(2, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasObjectToRemoveList(Enc13@input)
end
end,
begin
Enc15@input = element(3, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasObjectToAddModList(Enc15@input)
end
end,
begin
Enc17@input = element(4, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
enc_ReportConfigToRemoveList(Enc17@input)
end
end,
begin
Enc19@input = element(5, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_ReportConfigToAddModList(Enc19@input)
end
end,
begin
Enc21@input = element(6, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasIdToRemoveList(Enc21@input)
end
end,
begin
Enc23@input = element(7, Val),
if Enc23@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasIdToAddModList(Enc23@input)
end
end,
begin
Enc25@input = element(8, Val),
if Enc25@input =:= asn1_NOVALUE ->
[];
true ->
enc_QuantityConfig(Enc25@input)
end
end,
begin
Enc27@input = element(9, Val),
if Enc27@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasGapConfig(Enc27@input)
end
end,
begin
Enc29@input = element(10, Val),
if Enc29@input =:= asn1_NOVALUE ->
[];
0 =< Enc29@input, Enc29@input < 98 ->
<<Enc29@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc29@input}}})
end
end,
begin
Enc32@input = element(11, Val),
if Enc32@input =:= asn1_NOVALUE ->
[];
true ->
enc_PreRegistrationInfoHRPD(Enc32@input)
end
end|begin
Enc34@input = element(12, Val),
if Enc34@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasConfig_speedStatePars(Enc34@input)
end
end].
'enc_MeasConfig_speedStatePars'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|enc_MeasConfig_speedStatePars_setup(ChoiceVal)]
end.
'enc_MeasConfig_speedStatePars_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_MobilityStateParameters(Enc1@input)
end|begin
Enc2@input = element(3, Val),
enc_SpeedStateScaleFactors(Enc2@input)
end].

dec_MeasConfig_speedStatePars_setup(Bytes) ->

%% attribute number 1 with type MobilityStateParameters
{Term1,Bytes1} = dec_MobilityStateParameters(Bytes),

%% attribute number 2 with type SpeedStateScaleFactors
{Term2,Bytes2} = dec_SpeedStateScaleFactors(Bytes1),
{{'MeasConfig_speedStatePars_setup',Term1,Term2},Bytes2}.


dec_MeasConfig_speedStatePars(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MeasConfig_speedStatePars_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.


dec_MeasConfig(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type MeasObjectToRemoveList
{Term1,Bytes3} = case (Opt bsr 10) band 1 of
1 ->
dec_MeasObjectToRemoveList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type MeasObjectToAddModList
{Term2,Bytes4} = case (Opt bsr 9) band 1 of
1 ->
dec_MeasObjectToAddModList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ReportConfigToRemoveList
{Term3,Bytes5} = case (Opt bsr 8) band 1 of
1 ->
dec_ReportConfigToRemoveList(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ReportConfigToAddModList
{Term4,Bytes6} = case (Opt bsr 7) band 1 of
1 ->
dec_ReportConfigToAddModList(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type MeasIdToRemoveList
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
dec_MeasIdToRemoveList(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type MeasIdToAddModList
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
dec_MeasIdToAddModList(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type QuantityConfig
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
dec_QuantityConfig(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type MeasGapConfig
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
dec_MeasGapConfig(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type INTEGER
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes10,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type PreRegistrationInfoHRPD
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
dec_PreRegistrationInfoHRPD(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type CHOICE
{Term11,Bytes13} = case Opt band 1 of
1 ->
'dec_MeasConfig_speedStatePars'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% Extensions
{Extensions,Bytes14} = case Ext of
0 -> {<<>>,Bytes13};
1 ->
{V4@V0,V4@Buf1} = case Bytes13 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes15= skipextensions(Bytes14, 1, Extensions),
{{'MeasConfig',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11},Bytes15}.

'enc_Hysteresis'(Val) ->
if 0 =< Val, Val < 31 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Hysteresis(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_AllowedMeasBandwidth'(Val) ->
if Val =:= mbw6 ->
<<0:3>>;
Val =:= mbw15 ->
<<1:3>>;
Val =:= mbw25 ->
<<2:3>>;
Val =:= mbw50 ->
<<3:3>>;
Val =:= mbw75 ->
<<4:3>>;
Val =:= mbw100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_AllowedMeasBandwidth(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[mbw6,mbw15,mbw25,mbw50,mbw75,mbw100]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_T-Reselection'(Val) ->
if Val bsr 3 =:= 0 ->
<<Val:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_T-Reselection'(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TrackingAreaCode'(Val) ->
Enc1@bs = to_bitstring(Val, 16),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


dec_TrackingAreaCode(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_SystemTimeInfoCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end
end|begin
Enc3@input = element(3, Val),
'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Enc3@input)
end].
'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= synchronousSystemTime ->
begin
Enc2@bs = to_bitstring(ChoiceVal, 39),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 39 ->
[<<0:1>>|Enc2@bs]
end
end;
ChoiceTag =:= asynchronousSystemTime ->
begin
Enc4@bs = to_bitstring(ChoiceVal, 49),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 49 ->
[<<1:1>>|Enc4@bs]
end
end
end.

'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:39/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end
end,
{{synchronousSystemTime,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:49/binary-unit:1,V3@Buf1/bitstring>> = Bytes1,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end
end,
{{asynchronousSystemTime,Val},NewBytes}
end.


dec_SystemTimeInfoCDMA2000(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(Bytes1),
{{'SystemTimeInfoCDMA2000',Term1,Term2},Bytes2}.

'enc_SpeedStateScaleFactors'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= oDot25 ->
<<0:2>>;
Enc1@input =:= oDot5 ->
<<1:2>>;
Enc1@input =:= oDot75 ->
<<2:2>>;
Enc1@input =:= lDot0 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= oDot25 ->
<<0:2>>;
Enc3@input =:= oDot5 ->
<<1:2>>;
Enc3@input =:= oDot75 ->
<<2:2>>;
Enc3@input =:= lDot0 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_SpeedStateScaleFactors(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> oDot25;
1 -> oDot5;
2 -> oDot75;
3 -> lDot0
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> oDot25;
1 -> oDot5;
2 -> oDot75;
3 -> lDot0
end,
{V2@Int2,V2@Buf1}
end,
{{'SpeedStateScaleFactors',Term1,Term2},Bytes2}.

'enc_ReselectionThreshold'(Val) ->
if Val bsr 5 =:= 0 ->
<<Val:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReselectionThreshold(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_Q-OffsetRangeInterRAT'(Val) ->
Val@sub = Val - -15,
if 0 =< Val@sub, Val@sub < 31 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Q-OffsetRangeInterRAT'(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -15,
{V1@Add2,V1@Buf1}
end.

'enc_Q-OffsetRange'(Val) ->
if Val =:= 'dB-24' ->
<<0:5>>;
Val =:= 'dB-22' ->
<<1:5>>;
Val =:= 'dB-20' ->
<<2:5>>;
Val =:= 'dB-18' ->
<<3:5>>;
Val =:= 'dB-16' ->
<<4:5>>;
Val =:= 'dB-14' ->
<<5:5>>;
Val =:= 'dB-12' ->
<<6:5>>;
Val =:= 'dB-10' ->
<<7:5>>;
Val =:= 'dB-8' ->
<<8:5>>;
Val =:= 'dB-6' ->
<<9:5>>;
Val =:= 'dB-5' ->
<<10:5>>;
Val =:= 'dB-4' ->
<<11:5>>;
Val =:= 'dB-3' ->
<<12:5>>;
Val =:= 'dB-2' ->
<<13:5>>;
Val =:= 'dB-1' ->
<<14:5>>;
Val =:= dB0 ->
<<15:5>>;
Val =:= dB1 ->
<<16:5>>;
Val =:= dB2 ->
<<17:5>>;
Val =:= dB3 ->
<<18:5>>;
Val =:= dB4 ->
<<19:5>>;
Val =:= dB5 ->
<<20:5>>;
Val =:= dB6 ->
<<21:5>>;
Val =:= dB8 ->
<<22:5>>;
Val =:= dB10 ->
<<23:5>>;
Val =:= dB12 ->
<<24:5>>;
Val =:= dB14 ->
<<25:5>>;
Val =:= dB16 ->
<<26:5>>;
Val =:= dB18 ->
<<27:5>>;
Val =:= dB20 ->
<<28:5>>;
Val =:= dB22 ->
<<29:5>>;
Val =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Q-OffsetRange'(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_Q-RxLevMin'(Val) ->
Val@sub = Val - -70,
if 0 =< Val@sub, Val@sub < 49 ->
<<Val@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Q-RxLevMin'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -70,
{V1@Add2,V1@Buf1}
end.

'enc_PreRegistrationZoneIdHRPD'(Val) ->
if Val bsr 8 =:= 0 ->
[Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PreRegistrationZoneIdHRPD(Bytes) ->
begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 1 =:= 0 ->
[<<Enc2@len@sub:1>>|[if Comp bsr 8 =:= 0 ->
[Comp];
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_SecondaryPreRegistrationZoneIdListHRPD(Bytes) ->
%% Length with constraint {1,2}
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components29(V1@Add2, V1@Buf1, []).

'enc_PreRegistrationInfoHRPD'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= false ->
<<0:1>>;
Enc3@input =:= true ->
<<1:1>>
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
Enc5@input bsr 8 =:= 0 ->
Enc5@input;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_SecondaryPreRegistrationZoneIdListHRPD(Enc8@input)
end
end].


dec_PreRegistrationInfoHRPD(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SecondaryPreRegistrationZoneIdListHRPD
{Term3,Bytes4} = case Opt band 1 of
1 ->
dec_SecondaryPreRegistrationZoneIdListHRPD(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'PreRegistrationInfoHRPD',Term1,Term2,Term3},Bytes4}.

'enc_MCC-MNC-Digit'(Val) ->
if 0 =< Val, Val < 10 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_MCC-MNC-Digit'(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_MNC'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 2,
if Enc2@len@sub bsr 1 =:= 0 ->
[<<Enc2@len@sub:1>>|[if 0 =< Comp, Comp < 10 ->
<<Comp:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_MNC(Bytes) ->
%% Length with constraint {2,3}
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 2,
dec_components30(V1@Add2, V1@Buf1, []).

'enc_MCC'(Val) ->
Enc2@len = length(Val),
if Enc2@len =:= 3 ->
[if 0 =< Comp, Comp < 10 ->
<<Comp:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]
end.



dec_MCC(Bytes) ->
%% Length with constraint 3
ignore,
dec_components31(3, Bytes, []).

'enc_PLMN-Identity'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
enc_MCC(Enc2@input)
end
end|begin
Enc4@input = element(3, Val),
enc_MNC(Enc4@input)
end].


'dec_PLMN-Identity'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type MCC
{Term1,Bytes2} = case Opt band 1 of
1 ->
dec_MCC(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type MNC
{Term2,Bytes3} = dec_MNC(Bytes2),
{{'PLMN-Identity',Term1,Term2},Bytes3}.

'enc_PhysCellIdUTRA-TDD'(Val) ->
if Val bsr 7 =:= 0 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_PhysCellIdUTRA-TDD'(Bytes) ->
begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PhysCellIdUTRA-FDD'(Val) ->
if Val bsr 9 =:= 0 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_PhysCellIdUTRA-FDD'(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PhysCellIdGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@bs = to_bitstring(Enc1@input, 3),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 3 ->
Enc2@bs
end
end|begin
Enc3@input = element(3, Val),
Enc4@bs = to_bitstring(Enc3@input, 3),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 3 ->
Enc4@bs
end
end].


dec_PhysCellIdGERAN(Bytes) ->

%% attribute number 1 with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:3/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V2@V0:3/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,
{{'PhysCellIdGERAN',Term1,Term2},Bytes2}.

'enc_PhysCellIdCDMA2000'(Val) ->
if Val bsr 9 =:= 0 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PhysCellIdCDMA2000(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PhysCellIdRange'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if 0 =< Enc2@input, Enc2@input < 504 ->
<<Enc2@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
Enc4@input =:= n4 ->
<<0:4>>;
Enc4@input =:= n8 ->
<<1:4>>;
Enc4@input =:= n12 ->
<<2:4>>;
Enc4@input =:= n16 ->
<<3:4>>;
Enc4@input =:= n24 ->
<<4:4>>;
Enc4@input =:= n32 ->
<<5:4>>;
Enc4@input =:= n48 ->
<<6:4>>;
Enc4@input =:= n64 ->
<<7:4>>;
Enc4@input =:= n84 ->
<<8:4>>;
Enc4@input =:= n96 ->
<<9:4>>;
Enc4@input =:= n128 ->
<<10:4>>;
Enc4@input =:= n168 ->
<<11:4>>;
Enc4@input =:= n252 ->
<<12:4>>;
Enc4@input =:= n504 ->
<<13:4>>;
Enc4@input =:= spare2 ->
<<14:4>>;
Enc4@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_PhysCellIdRange(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n24;
5 -> n32;
6 -> n48;
7 -> n64;
8 -> n84;
9 -> n96;
10 -> n128;
11 -> n168;
12 -> n252;
13 -> n504;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'PhysCellIdRange',Term1,Term2},Bytes3}.

'enc_PhysCellId'(Val) ->
if 0 =< Val, Val < 504 ->
<<Val:9>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PhysCellId(Bytes) ->
begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_MobilityStateParameters'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= s30 ->
<<0:3>>;
Enc1@input =:= s60 ->
<<1:3>>;
Enc1@input =:= s120 ->
<<2:3>>;
Enc1@input =:= s180 ->
<<3:3>>;
Enc1@input =:= s240 ->
<<4:3>>;
Enc1@input =:= spare3 ->
<<5:3>>;
Enc1@input =:= spare2 ->
<<6:3>>;
Enc1@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= s30 ->
<<0:3>>;
Enc3@input =:= s60 ->
<<1:3>>;
Enc3@input =:= s120 ->
<<2:3>>;
Enc3@input =:= s180 ->
<<3:3>>;
Enc3@input =:= s240 ->
<<4:3>>;
Enc3@input =:= spare3 ->
<<5:3>>;
Enc3@input =:= spare2 ->
<<6:3>>;
Enc3@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
Enc5@input@sub = Enc5@input - 1,
if Enc5@input@sub bsr 4 =:= 0 ->
<<Enc5@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
Enc7@input@sub = Enc7@input - 1,
if Enc7@input@sub bsr 4 =:= 0 ->
<<Enc7@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].


dec_MobilityStateParameters(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> s30;
1 -> s60;
2 -> s120;
3 -> s180;
4 -> s240;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> s30;
1 -> s60;
2 -> s120;
3 -> s180;
4 -> s240;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:4,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,
{{'MobilityStateParameters',Term1,Term2,Term3,Term4},Bytes4}.

'enc_MobilityParametersCDMA2000'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
encode_fragmented(Enc1@bin, 8)
end.


dec_MobilityParametersCDMA2000(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7,V1@V5:V1@V3/binary-unit:8,V1@Buf6/bitstring>> ->
{V1@V5,V1@Buf6};
<<1:1,0:1,V1@V4:14,V1@V6:V1@V4/binary-unit:8,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,1:1,V1@V4:6,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7}  = decode_fragmented(V1@V4, V1@Buf5, 8),
{V1@V6,V1@Buf7}
end,
V1@Conv8 = binary_to_list(V1@V0),
{V1@Conv8,V1@Buf1}
end.

'enc_CarrierFreqEUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input bsr 16 =:= 0 ->
<<Enc2@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
Enc4@input bsr 16 =:= 0 ->
<<Enc4@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_CarrierFreqEUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CarrierFreqEUTRA',Term1,Term2},Bytes3}.

'enc_CarrierBandwidthEUTRA'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= n6 ->
<<0:4>>;
Enc2@input =:= n15 ->
<<1:4>>;
Enc2@input =:= n25 ->
<<2:4>>;
Enc2@input =:= n50 ->
<<3:4>>;
Enc2@input =:= n75 ->
<<4:4>>;
Enc2@input =:= n100 ->
<<5:4>>;
Enc2@input =:= spare10 ->
<<6:4>>;
Enc2@input =:= spare9 ->
<<7:4>>;
Enc2@input =:= spare8 ->
<<8:4>>;
Enc2@input =:= spare7 ->
<<9:4>>;
Enc2@input =:= spare6 ->
<<10:4>>;
Enc2@input =:= spare5 ->
<<11:4>>;
Enc2@input =:= spare4 ->
<<12:4>>;
Enc2@input =:= spare3 ->
<<13:4>>;
Enc2@input =:= spare2 ->
<<14:4>>;
Enc2@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
Enc4@input =:= n6 ->
<<0:4>>;
Enc4@input =:= n15 ->
<<1:4>>;
Enc4@input =:= n25 ->
<<2:4>>;
Enc4@input =:= n50 ->
<<3:4>>;
Enc4@input =:= n75 ->
<<4:4>>;
Enc4@input =:= n100 ->
<<5:4>>;
Enc4@input =:= spare10 ->
<<6:4>>;
Enc4@input =:= spare9 ->
<<7:4>>;
Enc4@input =:= spare8 ->
<<8:4>>;
Enc4@input =:= spare7 ->
<<9:4>>;
Enc4@input =:= spare6 ->
<<10:4>>;
Enc4@input =:= spare5 ->
<<11:4>>;
Enc4@input =:= spare4 ->
<<12:4>>;
Enc4@input =:= spare3 ->
<<13:4>>;
Enc4@input =:= spare2 ->
<<14:4>>;
Enc4@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_CarrierBandwidthEUTRA(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
6 -> spare10;
7 -> spare9;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
6 -> spare10;
7 -> spare9;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CarrierBandwidthEUTRA',Term1,Term2},Bytes3}.

'enc_MobilityControlInfo'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(9, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
if 0 =< Enc6@input, Enc6@input < 504 ->
<<Enc6@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_CarrierFreqEUTRA(Enc8@input)
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
enc_CarrierBandwidthEUTRA(Enc10@input)
end
end,
begin
Enc12@input = element(5, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@input@sub = Enc12@input - 1,
if Enc12@input@sub bsr 5 =:= 0 ->
<<Enc12@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end
end
end,
begin
Enc15@input = element(6, Val),
if Enc15@input =:= ms50 ->
<<0:3>>;
Enc15@input =:= ms100 ->
<<1:3>>;
Enc15@input =:= ms150 ->
<<2:3>>;
Enc15@input =:= ms200 ->
<<3:3>>;
Enc15@input =:= ms500 ->
<<4:3>>;
Enc15@input =:= ms1000 ->
<<5:3>>;
Enc15@input =:= ms2000 ->
<<6:3>>;
Enc15@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@input}}})
end
end,
begin
Enc17@input = element(7, Val),
Enc18@bs = to_bitstring(Enc17@input, 16),
Enc18@bits = bit_size(Enc18@bs),
if Enc18@bits =:= 16 ->
Enc18@bs
end
end,
begin
Enc19@input = element(8, Val),
enc_RadioResourceConfigCommon(Enc19@input)
end|begin
Enc20@input = element(9, Val),
if Enc20@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RACH-ConfigDedicated'(Enc20@input)
end
end].


dec_MobilityControlInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:9,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type CarrierFreqEUTRA
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
dec_CarrierFreqEUTRA(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CarrierBandwidthEUTRA
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_CarrierBandwidthEUTRA(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes5,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes7} = begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes6,
V5@Int2 = case V5@V0 of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms200;
4 -> ms500;
5 -> ms1000;
6 -> ms2000;
7 -> spare1
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BIT STRING
{Term6,Bytes8} = begin
<<V6@V0:16/binary-unit:1,V6@Buf1/bitstring>> = Bytes7,
{V6@V2,V6@Buf3}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V2,V6@Buf3}
end,

%% attribute number 7 with type RadioResourceConfigCommon
{Term7,Bytes9} = dec_RadioResourceConfigCommon(Bytes8),

%% attribute number 8 with type RACH-ConfigDedicated
{Term8,Bytes10} = case Opt band 1 of
1 ->
'dec_RACH-ConfigDedicated'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% Extensions
{Extensions,Bytes11} = case Ext of
0 -> {<<>>,Bytes10};
1 ->
{V7@V0,V7@Buf1} = case Bytes10 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V9:V7@V0/bitstring-unit:1,V7@Buf10/bitstring>> = V7@Buf1,
{V7@V9,V7@Buf10}
end,
Bytes12= skipextensions(Bytes11, 1, Extensions),
{{'MobilityControlInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes12}.

'enc_CellGlobalIdCDMA2000'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= cellGlobalId1XRTT ->
begin
Enc2@bs = to_bitstring(ChoiceVal, 47),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 47 ->
[<<0:1>>|Enc2@bs]
end
end;
ChoiceTag =:= cellGlobalIdHRPD ->
begin
Enc4@bs = to_bitstring(ChoiceVal, 128),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 128 ->
[<<1:1>>|Enc4@bs]
end
end
end.


dec_CellGlobalIdCDMA2000(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:47/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end
end,
{{cellGlobalId1XRTT,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:128/binary-unit:1,V3@Buf1/bitstring>> = Bytes1,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end
end,
{{cellGlobalIdHRPD,Val},NewBytes}
end.
'enc_CellGlobalIdGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PLMN-Identity'(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
Enc3@bs = to_bitstring(Enc2@input, 16),
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 16 ->
Enc3@bs
end
end|begin
Enc4@input = element(4, Val),
Enc5@bs = to_bitstring(Enc4@input, 16),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end].


dec_CellGlobalIdGERAN(Bytes) ->

%% attribute number 1 with type PLMN-Identity
{Term1,Bytes1} = 'dec_PLMN-Identity'(Bytes),

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,
{{'CellGlobalIdGERAN',Term1,Term2,Term3},Bytes3}.

'enc_CellGlobalIdUTRA'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PLMN-Identity'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc3@bs = to_bitstring(Enc2@input, 28),
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 28 ->
Enc3@bs
end
end].


dec_CellGlobalIdUTRA(Bytes) ->

%% attribute number 1 with type PLMN-Identity
{Term1,Bytes1} = 'dec_PLMN-Identity'(Bytes),

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V1@V0:28/binary-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,
{{'CellGlobalIdUTRA',Term1,Term2},Bytes2}.

'enc_CellGlobalIdEUTRA'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PLMN-Identity'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc3@bs = to_bitstring(Enc2@input, 28),
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 28 ->
Enc3@bs
end
end].


dec_CellGlobalIdEUTRA(Bytes) ->

%% attribute number 1 with type PLMN-Identity
{Term1,Bytes1} = 'dec_PLMN-Identity'(Bytes),

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V1@V0:28/binary-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,
{{'CellGlobalIdEUTRA',Term1,Term2},Bytes2}.

'enc_CSFB-RegistrationParam1XRTT'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@bs = to_bitstring(Enc1@input, 15),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 15 ->
Enc2@bs
end
end,
begin
Enc3@input = element(3, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
Enc4@bs
end
end,
begin
Enc5@input = element(4, Val),
Enc7@input = element(5, Val),
if Enc5@input =:= false ->
if Enc7@input =:= false ->
<<0:1,0:1>>;
Enc7@input =:= true ->
<<0:1,1:1>>
end;
Enc5@input =:= true ->
if Enc7@input =:= false ->
<<1:1,0:1>>;
Enc7@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(6, Val),
Enc11@input = element(7, Val),
if Enc9@input =:= false ->
if Enc11@input =:= false ->
<<0:1,0:1>>;
Enc11@input =:= true ->
<<0:1,1:1>>
end;
Enc9@input =:= true ->
if Enc11@input =:= false ->
<<1:1,0:1>>;
Enc11@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@input = element(8, Val),
Enc15@input = element(9, Val),
if Enc13@input =:= false ->
if Enc15@input =:= false ->
<<0:1,0:1>>;
Enc15@input =:= true ->
<<0:1,1:1>>
end;
Enc13@input =:= true ->
if Enc15@input =:= false ->
<<1:1,0:1>>;
Enc15@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc17@input = element(10, Val),
if Enc17@input =:= false ->
<<0:1>>;
Enc17@input =:= true ->
<<1:1>>
end
end,
begin
Enc19@input = element(11, Val),
Enc20@bs = to_bitstring(Enc19@input, 7),
Enc20@bits = bit_size(Enc20@bs),
if Enc20@bits =:= 7 ->
Enc20@bs
end
end,
begin
Enc21@input = element(12, Val),
Enc22@bs = to_bitstring(Enc21@input, 12),
Enc22@bits = bit_size(Enc22@bs),
if Enc22@bits =:= 12 ->
Enc22@bs
end
end,
begin
Enc23@input = element(13, Val),
Enc24@bs = to_bitstring(Enc23@input, 3),
Enc24@bits = bit_size(Enc24@bs),
if Enc24@bits =:= 3 ->
Enc24@bs
end
end|begin
Enc25@input = element(14, Val),
Enc26@bs = to_bitstring(Enc25@input, 3),
Enc26@bits = bit_size(Enc26@bs),
if Enc26@bits =:= 3 ->
Enc26@bs
end
end].


'dec_CSFB-RegistrationParam1XRTT'(Bytes) ->

%% attribute number 1 with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:15/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes2} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 10 with type BIT STRING
{Term10,Bytes10} = begin
<<V10@V0:7/binary-unit:1,V10@Buf1/bitstring>> = Bytes9,
{V10@V2,V10@Buf3}  = {decode_compact_bit_string(V10@V0),V10@Buf1},
{V10@V2,V10@Buf3}
end,

%% attribute number 11 with type BIT STRING
{Term11,Bytes11} = begin
<<V11@V0:12/binary-unit:1,V11@Buf1/bitstring>> = Bytes10,
{V11@V2,V11@Buf3}  = {decode_compact_bit_string(V11@V0),V11@Buf1},
{V11@V2,V11@Buf3}
end,

%% attribute number 12 with type BIT STRING
{Term12,Bytes12} = begin
<<V12@V0:3/binary-unit:1,V12@Buf1/bitstring>> = Bytes11,
{V12@V2,V12@Buf3}  = {decode_compact_bit_string(V12@V0),V12@Buf1},
{V12@V2,V12@Buf3}
end,

%% attribute number 13 with type BIT STRING
{Term13,Bytes13} = begin
<<V13@V0:3/binary-unit:1,V13@Buf1/bitstring>> = Bytes12,
{V13@V2,V13@Buf3}  = {decode_compact_bit_string(V13@V0),V13@Buf1},
{V13@V2,V13@Buf3}
end,
{{'CSFB-RegistrationParam1XRTT',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13},Bytes13}.

'enc_CellReselectionPriority'(Val) ->
if Val bsr 3 =:= 0 ->
<<Val:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CellReselectionPriority(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_CellIndex'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CellIndex(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_CellIndexList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 5 =:= 0 ->
[<<Enc2@len@sub:5>>|[begin
Comp@sub = Comp - 1,
if Comp@sub bsr 5 =:= 0 ->
<<Comp@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



dec_CellIndexList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components32(V1@Add2, V1@Buf1, []).

'enc_CellIdentity'(Val) ->
Enc1@bs = to_bitstring(Val, 28),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 28 ->
Enc1@bs
end.


dec_CellIdentity(Bytes) ->
begin
<<V1@V0:28/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_CDMA2000-Type'(Val) ->
if Val =:= type1XRTT ->
<<0:1>>;
Val =:= typeHRPD ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_CDMA2000-Type'(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> type1XRTT;
1 -> typeHRPD
end,
{V1@Int2,V1@Buf1}
end.

'enc_ExplicitListOfARFCNs'(Val) ->
Enc2@len = length(Val),
if Enc2@len < 32 ->
[<<Enc2@len:5>>|[if Comp bsr 10 =:= 0 ->
<<Comp:10>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_ExplicitListOfARFCNs(Bytes) ->
%% Length with constraint {0,31}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
dec_components33(V1@V0, V1@Buf1, []).

'enc_CarrierFreqsGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 10 =:= 0 ->
<<Enc1@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= dcs1800 ->
<<0:1>>;
Enc3@input =:= pcs1900 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
enc_CarrierFreqsGERAN_followingARFCNs(Enc5@input)
end].
'enc_CarrierFreqsGERAN_followingARFCNs'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= explicitListOfARFCNs ->
[<<0:2>>|enc_ExplicitListOfARFCNs(ChoiceVal)];
ChoiceTag =:= equallySpacedARFCNs ->
[<<1:2>>|enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs(ChoiceVal)];
ChoiceTag =:= variableBitMapOfARFCNs ->
begin
Enc4@bin = iolist_to_binary(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
Enc4@len@sub = Enc4@len - 1,
if Enc4@len@sub bsr 4 =:= 0 ->
[<<2:2,Enc4@len@sub:4>>|Enc4@bin]
end
end
end.
'enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 3 =:= 0 ->
<<Enc1@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 5 =:= 0 ->
<<Enc3@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs',Term1,Term2},Bytes2}.


dec_CarrierFreqsGERAN_followingARFCNs(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_ExplicitListOfARFCNs(Bytes1)
end,
{{explicitListOfARFCNs,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Bytes1)
end,
{{equallySpacedARFCNs,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
<<V2@V3:V2@Add2/binary-unit:8,V2@Buf4/bitstring>> = V2@Buf1,
V2@Conv5 = binary_to_list(V2@V3),
{V2@Conv5,V2@Buf4}
end
end,
{{variableBitMapOfARFCNs,Val},NewBytes}
end.


dec_CarrierFreqsGERAN(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> dcs1800;
1 -> pcs1900
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes3} = 'dec_CarrierFreqsGERAN_followingARFCNs'(Bytes2),
{{'CarrierFreqsGERAN',Term1,Term2,Term3},Bytes3}.

'enc_CarrierFreqGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 10 =:= 0 ->
<<Enc1@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= dcs1800 ->
<<0:1>>;
Enc3@input =:= pcs1900 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_CarrierFreqGERAN(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> dcs1800;
1 -> pcs1900
end,
{V2@Int2,V2@Buf1}
end,
{{'CarrierFreqGERAN',Term1,Term2},Bytes2}.

'enc_CarrierFreqCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= bc0 ->
<<0:1,0:5>>;
Enc1@input =:= bc1 ->
<<0:1,1:5>>;
Enc1@input =:= bc2 ->
<<0:1,2:5>>;
Enc1@input =:= bc3 ->
<<0:1,3:5>>;
Enc1@input =:= bc4 ->
<<0:1,4:5>>;
Enc1@input =:= bc5 ->
<<0:1,5:5>>;
Enc1@input =:= bc6 ->
<<0:1,6:5>>;
Enc1@input =:= bc7 ->
<<0:1,7:5>>;
Enc1@input =:= bc8 ->
<<0:1,8:5>>;
Enc1@input =:= bc9 ->
<<0:1,9:5>>;
Enc1@input =:= bc10 ->
<<0:1,10:5>>;
Enc1@input =:= bc11 ->
<<0:1,11:5>>;
Enc1@input =:= bc12 ->
<<0:1,12:5>>;
Enc1@input =:= bc13 ->
<<0:1,13:5>>;
Enc1@input =:= bc14 ->
<<0:1,14:5>>;
Enc1@input =:= bc15 ->
<<0:1,15:5>>;
Enc1@input =:= bc16 ->
<<0:1,16:5>>;
Enc1@input =:= bc17 ->
<<0:1,17:5>>;
Enc1@input =:= spare14 ->
<<0:1,18:5>>;
Enc1@input =:= spare13 ->
<<0:1,19:5>>;
Enc1@input =:= spare12 ->
<<0:1,20:5>>;
Enc1@input =:= spare11 ->
<<0:1,21:5>>;
Enc1@input =:= spare10 ->
<<0:1,22:5>>;
Enc1@input =:= spare9 ->
<<0:1,23:5>>;
Enc1@input =:= spare8 ->
<<0:1,24:5>>;
Enc1@input =:= spare7 ->
<<0:1,25:5>>;
Enc1@input =:= spare6 ->
<<0:1,26:5>>;
Enc1@input =:= spare5 ->
<<0:1,27:5>>;
Enc1@input =:= spare4 ->
<<0:1,28:5>>;
Enc1@input =:= spare3 ->
<<0:1,29:5>>;
Enc1@input =:= spare2 ->
<<0:1,30:5>>;
Enc1@input =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 11 =:= 0 ->
<<Enc3@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_CarrierFreqCDMA2000(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'CarrierFreqCDMA2000',Term1,Term2},Bytes2}.

'enc_BandIndicatorGERAN'(Val) ->
if Val =:= dcs1800 ->
<<0:1>>;
Val =:= pcs1900 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_BandIndicatorGERAN(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> dcs1800;
1 -> pcs1900
end,
{V1@Int2,V1@Buf1}
end.

'enc_BandclassCDMA2000'(Val) ->
if Val =:= bc0 ->
<<0:1,0:5>>;
Val =:= bc1 ->
<<0:1,1:5>>;
Val =:= bc2 ->
<<0:1,2:5>>;
Val =:= bc3 ->
<<0:1,3:5>>;
Val =:= bc4 ->
<<0:1,4:5>>;
Val =:= bc5 ->
<<0:1,5:5>>;
Val =:= bc6 ->
<<0:1,6:5>>;
Val =:= bc7 ->
<<0:1,7:5>>;
Val =:= bc8 ->
<<0:1,8:5>>;
Val =:= bc9 ->
<<0:1,9:5>>;
Val =:= bc10 ->
<<0:1,10:5>>;
Val =:= bc11 ->
<<0:1,11:5>>;
Val =:= bc12 ->
<<0:1,12:5>>;
Val =:= bc13 ->
<<0:1,13:5>>;
Val =:= bc14 ->
<<0:1,14:5>>;
Val =:= bc15 ->
<<0:1,15:5>>;
Val =:= bc16 ->
<<0:1,16:5>>;
Val =:= bc17 ->
<<0:1,17:5>>;
Val =:= spare14 ->
<<0:1,18:5>>;
Val =:= spare13 ->
<<0:1,19:5>>;
Val =:= spare12 ->
<<0:1,20:5>>;
Val =:= spare11 ->
<<0:1,21:5>>;
Val =:= spare10 ->
<<0:1,22:5>>;
Val =:= spare9 ->
<<0:1,23:5>>;
Val =:= spare8 ->
<<0:1,24:5>>;
Val =:= spare7 ->
<<0:1,25:5>>;
Val =:= spare6 ->
<<0:1,26:5>>;
Val =:= spare5 ->
<<0:1,27:5>>;
Val =:= spare4 ->
<<0:1,28:5>>;
Val =:= spare3 ->
<<0:1,29:5>>;
Val =:= spare2 ->
<<0:1,30:5>>;
Val =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_BandclassCDMA2000(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ARFCN-ValueUTRA'(Val) ->
if Val bsr 14 =:= 0 ->
<<Val:14>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ARFCN-ValueUTRA'(Bytes) ->
begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ARFCN-ValueGERAN'(Val) ->
if Val bsr 10 =:= 0 ->
<<Val:10>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ARFCN-ValueGERAN'(Bytes) ->
begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ARFCN-ValueEUTRA'(Val) ->
if Val bsr 16 =:= 0 ->
<<Val:16>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ARFCN-ValueEUTRA'(Bytes) ->
begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ARFCN-ValueCDMA2000'(Val) ->
if Val bsr 11 =:= 0 ->
<<Val:11>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ARFCN-ValueCDMA2000'(Bytes) ->
begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_AdditionalSpectrumEmission'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_AdditionalSpectrumEmission(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_ShortMAC-I'(Val) ->
Enc1@bs = to_bitstring(Val, 16),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
Enc1@bs
end.


'dec_ShortMAC-I'(Bytes) ->
begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_SecurityAlgorithmConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= eea0 ->
<<0:1,0:3>>;
Enc1@input =:= eea1 ->
<<0:1,1:3>>;
Enc1@input =:= eea2 ->
<<0:1,2:3>>;
Enc1@input =:= spare5 ->
<<0:1,3:3>>;
Enc1@input =:= spare4 ->
<<0:1,4:3>>;
Enc1@input =:= spare3 ->
<<0:1,5:3>>;
Enc1@input =:= spare2 ->
<<0:1,6:3>>;
Enc1@input =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= reserved ->
<<0:1,0:3>>;
Enc3@input =:= eia1 ->
<<0:1,1:3>>;
Enc3@input =:= eia2 ->
<<0:1,2:3>>;
Enc3@input =:= spare5 ->
<<0:1,3:3>>;
Enc3@input =:= spare4 ->
<<0:1,4:3>>;
Enc3@input =:= spare3 ->
<<0:1,5:3>>;
Enc3@input =:= spare2 ->
<<0:1,6:3>>;
Enc3@input =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_SecurityAlgorithmConfig(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> eea0;
1 -> eea1;
2 -> eea2;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> reserved;
1 -> eia1;
2 -> eia2;
3 -> spare5;
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11}
end,
<<V2@V12:V2@V6/unit:8,V2@Buf13/bitstring>> = V2@Buf7,
{V2@V12,V2@Buf13}
end,
V2@Int14 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int14,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,
{{'SecurityAlgorithmConfig',Term1,Term2},Bytes2}.

'enc_NextHopChainingCount'(Val) ->
if Val bsr 3 =:= 0 ->
<<Val:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_NextHopChainingCount(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_DeltaFList-PUCCH'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= 'deltaF-2' ->
<<0:2>>;
Enc1@input =:= deltaF0 ->
<<1:2>>;
Enc1@input =:= deltaF2 ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= deltaF1 ->
<<0:2>>;
Enc3@input =:= deltaF3 ->
<<1:2>>;
Enc3@input =:= deltaF5 ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input =:= 'deltaF-2' ->
<<0:2>>;
Enc5@input =:= deltaF0 ->
<<1:2>>;
Enc5@input =:= deltaF1 ->
<<2:2>>;
Enc5@input =:= deltaF2 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(5, Val),
if Enc7@input =:= 'deltaF-2' ->
<<0:2>>;
Enc7@input =:= deltaF0 ->
<<1:2>>;
Enc7@input =:= deltaF2 ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end|begin
Enc9@input = element(6, Val),
if Enc9@input =:= 'deltaF-2' ->
<<0:2>>;
Enc9@input =:= deltaF0 ->
<<1:2>>;
Enc9@input =:= deltaF2 ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end].


'dec_DeltaFList-PUCCH'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,['deltaF-2',deltaF0,deltaF2]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> deltaF1;
1 -> deltaF3;
2 -> deltaF5;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[deltaF1,deltaF3,deltaF5]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF1;
3 -> deltaF2
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,['deltaF-2',deltaF0,deltaF2]}}}})
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes5} = begin
<<V5@V0:2,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> 'deltaF-2';
1 -> deltaF0;
2 -> deltaF2;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,['deltaF-2',deltaF0,deltaF2]}}}})
end,
{V5@Int2,V5@Buf1}
end,
{{'DeltaFList-PUCCH',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_UplinkPowerControlDedicated'(Val) ->
[begin
Enc1@input = element(7, Val),
if Enc1@input =:= asn1_DEFAULT ->
<<0:1>>;
Enc1@input =:= fc4 ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - -8,
if Enc2@input@sub bsr 4 =:= 0 ->
<<Enc2@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
Enc6@input = element(4, Val),
if Enc4@input =:= en0 ->
if Enc6@input =:= false ->
<<0:1,0:1>>;
Enc6@input =:= true ->
<<0:1,1:1>>
end;
Enc4@input =:= en1 ->
if Enc6@input =:= false ->
<<1:1,0:1>>;
Enc6@input =:= true ->
<<1:1,1:1>>
end;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc8@input = element(5, Val),
Enc8@input@sub = Enc8@input - -8,
if Enc8@input@sub bsr 4 =:= 0 ->
<<Enc8@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(6, Val),
if Enc10@input bsr 4 =:= 0 ->
<<Enc10@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end|begin
Enc12@input = element(7, Val),
if Enc12@input =:= asn1_DEFAULT ->
[];
Enc12@input =:= fc4 ->
[];
Enc12@input =:= fc0 ->
<<0:1,0:4>>;
Enc12@input =:= fc1 ->
<<0:1,1:4>>;
Enc12@input =:= fc2 ->
<<0:1,2:4>>;
Enc12@input =:= fc3 ->
<<0:1,3:4>>;
Enc12@input =:= fc5 ->
<<0:1,5:4>>;
Enc12@input =:= fc6 ->
<<0:1,6:4>>;
Enc12@input =:= fc7 ->
<<0:1,7:4>>;
Enc12@input =:= fc8 ->
<<0:1,8:4>>;
Enc12@input =:= fc9 ->
<<0:1,9:4>>;
Enc12@input =:= fc11 ->
<<0:1,10:4>>;
Enc12@input =:= fc13 ->
<<0:1,11:4>>;
Enc12@input =:= fc15 ->
<<0:1,12:4>>;
Enc12@input =:= fc17 ->
<<0:1,13:4>>;
Enc12@input =:= fc19 ->
<<0:1,14:4>>;
Enc12@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end].


dec_UplinkPowerControlDedicated(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> en0;
1 -> en1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V5@V0:4,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -8,
{V5@Add2,V5@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:4,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 6 with type ENUMERATED
{Term6,Bytes7} = case Opt band 1 of
1 ->
begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:4,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> fc0;
1 -> fc1;
2 -> fc2;
3 -> fc3;
4 -> fc4;
5 -> fc5;
6 -> fc6;
7 -> fc7;
8 -> fc8;
9 -> fc9;
10 -> fc11;
11 -> fc13;
12 -> fc15;
13 -> fc17;
14 -> fc19;
15 -> spare1
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11}
end,
<<V7@V12:V7@V6/unit:8,V7@Buf13/bitstring>> = V7@Buf7,
{V7@V12,V7@Buf13}
end,
V7@Int14 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int14,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end;
0 ->
{fc4,Bytes6}
end,
{{'UplinkPowerControlDedicated',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.

'enc_UplinkPowerControlCommon'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - -126,
if 0 =< Enc1@input@sub, Enc1@input@sub < 151 ->
Enc1@input@sub;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= al0 ->
<<0:3>>;
Enc3@input =:= al04 ->
<<1:3>>;
Enc3@input =:= al05 ->
<<2:3>>;
Enc3@input =:= al06 ->
<<3:3>>;
Enc3@input =:= al07 ->
<<4:3>>;
Enc3@input =:= al08 ->
<<5:3>>;
Enc3@input =:= al09 ->
<<6:3>>;
Enc3@input =:= al1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
Enc5@input@sub = Enc5@input - -127,
if Enc5@input@sub bsr 5 =:= 0 ->
<<Enc5@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(5, Val),
'enc_DeltaFList-PUCCH'(Enc7@input)
end|begin
Enc8@input = element(6, Val),
Enc8@input@sub = Enc8@input - -1,
if Enc8@input@sub bsr 3 =:= 0 ->
<<Enc8@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end].


dec_UplinkPowerControlCommon(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -126,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> al0;
1 -> al04;
2 -> al05;
3 -> al06;
4 -> al07;
5 -> al08;
6 -> al09;
7 -> al1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -127,
{V3@Add2,V3@Buf1}
end,

%% attribute number 4 with type DeltaFList-PUCCH
{Term4,Bytes4} = 'dec_DeltaFList-PUCCH'(Bytes3),

%% attribute number 5 with type INTEGER
{Term5,Bytes5} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes4,
V4@Add2 = V4@V0 + -1,
{V4@Add2,V4@Buf1}
end,
{{'UplinkPowerControlCommon',Term1,Term2,Term3,Term4,Term5},Bytes5}.

'enc_TPC-Index'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= indexOfFormat3 ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 15 ->
<<0:1,ChoiceVal@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end;
ChoiceTag =:= indexOfFormat3A ->
begin
ChoiceVal@sub = ChoiceVal - 1,
if 0 =< ChoiceVal@sub, ChoiceVal@sub < 31 ->
<<1:1,ChoiceVal@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end
end.


'dec_TPC-Index'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end
end,
{{indexOfFormat3,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes1,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end
end,
{{indexOfFormat3A,Val},NewBytes}
end.
'enc_TPC-PDCCH-Config'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_TPC-PDCCH-Config_setup'(ChoiceVal)]
end.
'enc_TPC-PDCCH-Config_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@bs = to_bitstring(Enc1@input, 16),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 16 ->
Enc2@bs
end
end|begin
Enc3@input = element(3, Val),
'enc_TPC-Index'(Enc3@input)
end].

'dec_TPC-PDCCH-Config_setup'(Bytes) ->

%% attribute number 1 with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 2 with type TPC-Index
{Term2,Bytes2} = 'dec_TPC-Index'(Bytes1),
{{'TPC-PDCCH-Config_setup',Term1,Term2},Bytes2}.



'dec_TPC-PDCCH-Config'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_TPC-PDCCH-Config_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_TimeAlignmentTimer'(Val) ->
if Val =:= sf500 ->
<<0:3>>;
Val =:= sf750 ->
<<1:3>>;
Val =:= sf1280 ->
<<2:3>>;
Val =:= sf1920 ->
<<3:3>>;
Val =:= sf2560 ->
<<4:3>>;
Val =:= sf5120 ->
<<5:3>>;
Val =:= sf10240 ->
<<6:3>>;
Val =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TimeAlignmentTimer(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity
end,
{V1@Int2,V1@Buf1}
end.

'enc_TDD-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= sa0 ->
<<0:3>>;
Enc1@input =:= sa1 ->
<<1:3>>;
Enc1@input =:= sa2 ->
<<2:3>>;
Enc1@input =:= sa3 ->
<<3:3>>;
Enc1@input =:= sa4 ->
<<4:3>>;
Enc1@input =:= sa5 ->
<<5:3>>;
Enc1@input =:= sa6 ->
<<6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= ssp0 ->
<<0:4>>;
Enc3@input =:= ssp1 ->
<<1:4>>;
Enc3@input =:= ssp2 ->
<<2:4>>;
Enc3@input =:= ssp3 ->
<<3:4>>;
Enc3@input =:= ssp4 ->
<<4:4>>;
Enc3@input =:= ssp5 ->
<<5:4>>;
Enc3@input =:= ssp6 ->
<<6:4>>;
Enc3@input =:= ssp7 ->
<<7:4>>;
Enc3@input =:= ssp8 ->
<<8:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_TDD-Config'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[sa0,sa1,sa2,sa3,sa4,sa5,sa6]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[ssp0,ssp1,ssp2,ssp3,ssp4,ssp5,ssp6,ssp7,ssp8]}}}})
end,
{V2@Int2,V2@Buf1}
end,
{{'TDD-Config',Term1,Term2},Bytes2}.

'enc_N1-PUCCH-AN-PersistentList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 2 =:= 0 ->
[<<Enc2@len@sub:2>>|[if Comp bsr 11 =:= 0 ->
<<Comp:11>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_N1-PUCCH-AN-PersistentList'(Bytes) ->
%% Length with constraint {1,4}
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components34(V1@Add2, V1@Buf1, []).

'enc_SPS-ConfigUL'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_SPS-ConfigUL_setup'(ChoiceVal)]
end.
'enc_SPS-ConfigUL_setup'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= sf10 ->
<<0:4>>;
Enc4@input =:= sf20 ->
<<1:4>>;
Enc4@input =:= sf32 ->
<<2:4>>;
Enc4@input =:= sf40 ->
<<3:4>>;
Enc4@input =:= sf64 ->
<<4:4>>;
Enc4@input =:= sf80 ->
<<5:4>>;
Enc4@input =:= sf128 ->
<<6:4>>;
Enc4@input =:= sf160 ->
<<7:4>>;
Enc4@input =:= sf320 ->
<<8:4>>;
Enc4@input =:= sf640 ->
<<9:4>>;
Enc4@input =:= spare6 ->
<<10:4>>;
Enc4@input =:= spare5 ->
<<11:4>>;
Enc4@input =:= spare4 ->
<<12:4>>;
Enc4@input =:= spare3 ->
<<13:4>>;
Enc4@input =:= spare2 ->
<<14:4>>;
Enc4@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= e2 ->
<<0:2>>;
Enc6@input =:= e3 ->
<<1:2>>;
Enc6@input =:= e4 ->
<<2:2>>;
Enc6@input =:= e8 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SPS-ConfigUL_setup_p0-Persistent'(Enc8@input)
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input =:= true ->
[];
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end].
'enc_SPS-ConfigUL_setup_p0-Persistent'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - -126,
if 0 =< Enc1@input@sub, Enc1@input@sub < 151 ->
Enc1@input@sub;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
Enc3@input@sub = Enc3@input - -8,
if Enc3@input@sub bsr 4 =:= 0 ->
<<Enc3@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

'dec_SPS-ConfigUL_setup_p0-Persistent'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:8,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -126,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -8,
{V2@Add2,V2@Buf1}
end,
{{'SPS-ConfigUL_setup_p0-Persistent',Term1,Term2},Bytes2}.


'dec_SPS-ConfigUL_setup'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> sf10;
1 -> sf20;
2 -> sf32;
3 -> sf40;
4 -> sf64;
5 -> sf80;
6 -> sf128;
7 -> sf160;
8 -> sf320;
9 -> sf640;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:2,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> e2;
1 -> e3;
2 -> e4;
3 -> e8
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_SPS-ConfigUL_setup_p0-Persistent'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
ignore,
{'true',Bytes5}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V9:V6@V0/bitstring-unit:1,V6@Buf10/bitstring>> = V6@Buf1,
{V6@V9,V6@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SPS-ConfigUL_setup',Term1,Term2,Term3,Term4},Bytes8}.



'dec_SPS-ConfigUL'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SPS-ConfigUL_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_SPS-ConfigDL'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_SPS-ConfigDL_setup'(ChoiceVal)]
end.
'enc_SPS-ConfigDL_setup'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input =:= sf10 ->
<<0:1,0:4>>;
Enc2@input =:= sf20 ->
<<0:1,1:4>>;
Enc2@input =:= sf32 ->
<<0:1,2:4>>;
Enc2@input =:= sf40 ->
<<0:1,3:4>>;
Enc2@input =:= sf64 ->
<<0:1,4:4>>;
Enc2@input =:= sf80 ->
<<0:1,5:4>>;
Enc2@input =:= sf128 ->
<<0:1,6:4>>;
Enc2@input =:= sf160 ->
<<0:1,7:4>>;
Enc2@input =:= sf320 ->
<<0:1,8:4>>;
Enc2@input =:= sf640 ->
<<0:1,9:4>>;
Enc2@input =:= spare6 ->
<<0:1,10:4>>;
Enc2@input =:= spare5 ->
<<0:1,11:4>>;
Enc2@input =:= spare4 ->
<<0:1,12:4>>;
Enc2@input =:= spare3 ->
<<0:1,13:4>>;
Enc2@input =:= spare2 ->
<<0:1,14:4>>;
Enc2@input =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 3 =:= 0 ->
<<Enc4@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end|begin
Enc6@input = element(4, Val),
'enc_N1-PUCCH-AN-PersistentList'(Enc6@input)
end].

'dec_SPS-ConfigDL_setup'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> sf10;
1 -> sf20;
2 -> sf32;
3 -> sf40;
4 -> sf64;
5 -> sf80;
6 -> sf128;
7 -> sf160;
8 -> sf320;
9 -> sf640;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type N1-PUCCH-AN-PersistentList
{Term3,Bytes4} = 'dec_N1-PUCCH-AN-PersistentList'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'SPS-ConfigDL_setup',Term1,Term2,Term3},Bytes6}.



'dec_SPS-ConfigDL'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SPS-ConfigDL_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_SPS-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc5@bs = to_bitstring(Enc4@input, 16),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SPS-ConfigDL'(Enc7@input)
end
end|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SPS-ConfigUL'(Enc9@input)
end
end].


'dec_SPS-Config'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes2} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type SPS-ConfigDL
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_SPS-ConfigDL'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SPS-ConfigUL
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_SPS-ConfigUL'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'SPS-Config',Term1,Term2,Term3},Bytes4}.

'enc_SoundingRS-UL-ConfigDedicated'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_SoundingRS-UL-ConfigDedicated_setup'(ChoiceVal)]
end.
'enc_SoundingRS-UL-ConfigDedicated_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= bw0 ->
<<0:2>>;
Enc1@input =:= bw1 ->
<<1:2>>;
Enc1@input =:= bw2 ->
<<2:2>>;
Enc1@input =:= bw3 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= hbw0 ->
<<0:2>>;
Enc3@input =:= hbw1 ->
<<1:2>>;
Enc3@input =:= hbw2 ->
<<2:2>>;
Enc3@input =:= hbw3 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if 0 =< Enc5@input, Enc5@input < 24 ->
<<Enc5@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(5, Val),
if Enc7@input =:= false ->
<<0:1>>;
Enc7@input =:= true ->
<<1:1>>
end
end,
begin
Enc9@input = element(6, Val),
if Enc9@input bsr 10 =:= 0 ->
<<Enc9@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end,
begin
Enc11@input = element(7, Val),
if Enc11@input bsr 1 =:= 0 ->
<<Enc11@input:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end|begin
Enc13@input = element(8, Val),
if Enc13@input =:= cs0 ->
<<0:3>>;
Enc13@input =:= cs1 ->
<<1:3>>;
Enc13@input =:= cs2 ->
<<2:3>>;
Enc13@input =:= cs3 ->
<<3:3>>;
Enc13@input =:= cs4 ->
<<4:3>>;
Enc13@input =:= cs5 ->
<<5:3>>;
Enc13@input =:= cs6 ->
<<6:3>>;
Enc13@input =:= cs7 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end].

'dec_SoundingRS-UL-ConfigDedicated_setup'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> bw0;
1 -> bw1;
2 -> bw2;
3 -> bw3
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> hbw0;
1 -> hbw1;
2 -> hbw2;
3 -> hbw3
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes5} = begin
<<V5@V0:10,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes7} = begin
<<V7@V0:3,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> cs0;
1 -> cs1;
2 -> cs2;
3 -> cs3;
4 -> cs4;
5 -> cs5;
6 -> cs6;
7 -> cs7
end,
{V7@Int2,V7@Buf1}
end,
{{'SoundingRS-UL-ConfigDedicated_setup',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes7}.



'dec_SoundingRS-UL-ConfigDedicated'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SoundingRS-UL-ConfigDedicated_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_SoundingRS-UL-ConfigCommon'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_SoundingRS-UL-ConfigCommon_setup'(ChoiceVal)]
end.
'enc_SoundingRS-UL-ConfigCommon_setup'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= bw0 ->
<<0:3>>;
Enc2@input =:= bw1 ->
<<1:3>>;
Enc2@input =:= bw2 ->
<<2:3>>;
Enc2@input =:= bw3 ->
<<3:3>>;
Enc2@input =:= bw4 ->
<<4:3>>;
Enc2@input =:= bw5 ->
<<5:3>>;
Enc2@input =:= bw6 ->
<<6:3>>;
Enc2@input =:= bw7 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= sc0 ->
<<0:4>>;
Enc4@input =:= sc1 ->
<<1:4>>;
Enc4@input =:= sc2 ->
<<2:4>>;
Enc4@input =:= sc3 ->
<<3:4>>;
Enc4@input =:= sc4 ->
<<4:4>>;
Enc4@input =:= sc5 ->
<<5:4>>;
Enc4@input =:= sc6 ->
<<6:4>>;
Enc4@input =:= sc7 ->
<<7:4>>;
Enc4@input =:= sc8 ->
<<8:4>>;
Enc4@input =:= sc9 ->
<<9:4>>;
Enc4@input =:= sc10 ->
<<10:4>>;
Enc4@input =:= sc11 ->
<<11:4>>;
Enc4@input =:= sc12 ->
<<12:4>>;
Enc4@input =:= sc13 ->
<<13:4>>;
Enc4@input =:= sc14 ->
<<14:4>>;
Enc4@input =:= sc15 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end|begin
Enc6@input = element(4, Val),
Enc8@input = element(5, Val),
if Enc6@input =:= false ->
if Enc8@input =:= asn1_NOVALUE ->
<<0:1>>;
Enc8@input =:= true ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end;
Enc6@input =:= true ->
if Enc8@input =:= asn1_NOVALUE ->
<<1:1>>;
Enc8@input =:= true ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end
end].

'dec_SoundingRS-UL-ConfigCommon_setup'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> bw0;
1 -> bw1;
2 -> bw2;
3 -> bw3;
4 -> bw4;
5 -> bw5;
6 -> bw6;
7 -> bw7
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> sc0;
1 -> sc1;
2 -> sc2;
3 -> sc3;
4 -> sc4;
5 -> sc5;
6 -> sc6;
7 -> sc7;
8 -> sc8;
9 -> sc9;
10 -> sc10;
11 -> sc11;
12 -> sc12;
13 -> sc13;
14 -> sc14;
15 -> sc15
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
ignore,
{'true',Bytes4}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'SoundingRS-UL-ConfigCommon_setup',Term1,Term2,Term3,Term4},Bytes5}.



'dec_SoundingRS-UL-ConfigCommon'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SoundingRS-UL-ConfigCommon_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_SchedulingRequestConfig'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|enc_SchedulingRequestConfig_setup(ChoiceVal)]
end.
'enc_SchedulingRequestConfig_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 11 =:= 0 ->
<<Enc1@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 156 ->
Enc3@input;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= n4 ->
<<0:3>>;
Enc5@input =:= n8 ->
<<1:3>>;
Enc5@input =:= n16 ->
<<2:3>>;
Enc5@input =:= n32 ->
<<3:3>>;
Enc5@input =:= n64 ->
<<4:3>>;
Enc5@input =:= spare3 ->
<<5:3>>;
Enc5@input =:= spare2 ->
<<6:3>>;
Enc5@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].

dec_SchedulingRequestConfig_setup(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> n4;
1 -> n8;
2 -> n16;
3 -> n32;
4 -> n64;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V3@Int2,V3@Buf1}
end,
{{'SchedulingRequestConfig_setup',Term1,Term2,Term3},Bytes3}.



dec_SchedulingRequestConfig(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SchedulingRequestConfig_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_T-StatusProhibit'(Val) ->
if Val =:= ms0 ->
<<0:6>>;
Val =:= ms5 ->
<<1:6>>;
Val =:= ms10 ->
<<2:6>>;
Val =:= ms15 ->
<<3:6>>;
Val =:= ms20 ->
<<4:6>>;
Val =:= ms25 ->
<<5:6>>;
Val =:= ms30 ->
<<6:6>>;
Val =:= ms35 ->
<<7:6>>;
Val =:= ms40 ->
<<8:6>>;
Val =:= ms45 ->
<<9:6>>;
Val =:= ms50 ->
<<10:6>>;
Val =:= ms55 ->
<<11:6>>;
Val =:= ms60 ->
<<12:6>>;
Val =:= ms65 ->
<<13:6>>;
Val =:= ms70 ->
<<14:6>>;
Val =:= ms75 ->
<<15:6>>;
Val =:= ms80 ->
<<16:6>>;
Val =:= ms85 ->
<<17:6>>;
Val =:= ms90 ->
<<18:6>>;
Val =:= ms95 ->
<<19:6>>;
Val =:= ms100 ->
<<20:6>>;
Val =:= ms105 ->
<<21:6>>;
Val =:= ms110 ->
<<22:6>>;
Val =:= ms115 ->
<<23:6>>;
Val =:= ms120 ->
<<24:6>>;
Val =:= ms125 ->
<<25:6>>;
Val =:= ms130 ->
<<26:6>>;
Val =:= ms135 ->
<<27:6>>;
Val =:= ms140 ->
<<28:6>>;
Val =:= ms145 ->
<<29:6>>;
Val =:= ms150 ->
<<30:6>>;
Val =:= ms155 ->
<<31:6>>;
Val =:= ms160 ->
<<32:6>>;
Val =:= ms165 ->
<<33:6>>;
Val =:= ms170 ->
<<34:6>>;
Val =:= ms175 ->
<<35:6>>;
Val =:= ms180 ->
<<36:6>>;
Val =:= ms185 ->
<<37:6>>;
Val =:= ms190 ->
<<38:6>>;
Val =:= ms195 ->
<<39:6>>;
Val =:= ms200 ->
<<40:6>>;
Val =:= ms205 ->
<<41:6>>;
Val =:= ms210 ->
<<42:6>>;
Val =:= ms215 ->
<<43:6>>;
Val =:= ms220 ->
<<44:6>>;
Val =:= ms225 ->
<<45:6>>;
Val =:= ms230 ->
<<46:6>>;
Val =:= ms235 ->
<<47:6>>;
Val =:= ms240 ->
<<48:6>>;
Val =:= ms245 ->
<<49:6>>;
Val =:= ms250 ->
<<50:6>>;
Val =:= ms300 ->
<<51:6>>;
Val =:= ms350 ->
<<52:6>>;
Val =:= ms400 ->
<<53:6>>;
Val =:= ms450 ->
<<54:6>>;
Val =:= ms500 ->
<<55:6>>;
Val =:= spare8 ->
<<56:6>>;
Val =:= spare7 ->
<<57:6>>;
Val =:= spare6 ->
<<58:6>>;
Val =:= spare5 ->
<<59:6>>;
Val =:= spare4 ->
<<60:6>>;
Val =:= spare3 ->
<<61:6>>;
Val =:= spare2 ->
<<62:6>>;
Val =:= spare1 ->
<<63:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_T-StatusProhibit'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms105;
22 -> ms110;
23 -> ms115;
24 -> ms120;
25 -> ms125;
26 -> ms130;
27 -> ms135;
28 -> ms140;
29 -> ms145;
30 -> ms150;
31 -> ms155;
32 -> ms160;
33 -> ms165;
34 -> ms170;
35 -> ms175;
36 -> ms180;
37 -> ms185;
38 -> ms190;
39 -> ms195;
40 -> ms200;
41 -> ms205;
42 -> ms210;
43 -> ms215;
44 -> ms220;
45 -> ms225;
46 -> ms230;
47 -> ms235;
48 -> ms240;
49 -> ms245;
50 -> ms250;
51 -> ms300;
52 -> ms350;
53 -> ms400;
54 -> ms450;
55 -> ms500;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_T-Reordering'(Val) ->
if Val =:= ms0 ->
<<0:5>>;
Val =:= ms5 ->
<<1:5>>;
Val =:= ms10 ->
<<2:5>>;
Val =:= ms15 ->
<<3:5>>;
Val =:= ms20 ->
<<4:5>>;
Val =:= ms25 ->
<<5:5>>;
Val =:= ms30 ->
<<6:5>>;
Val =:= ms35 ->
<<7:5>>;
Val =:= ms40 ->
<<8:5>>;
Val =:= ms45 ->
<<9:5>>;
Val =:= ms50 ->
<<10:5>>;
Val =:= ms55 ->
<<11:5>>;
Val =:= ms60 ->
<<12:5>>;
Val =:= ms65 ->
<<13:5>>;
Val =:= ms70 ->
<<14:5>>;
Val =:= ms75 ->
<<15:5>>;
Val =:= ms80 ->
<<16:5>>;
Val =:= ms85 ->
<<17:5>>;
Val =:= ms90 ->
<<18:5>>;
Val =:= ms95 ->
<<19:5>>;
Val =:= ms100 ->
<<20:5>>;
Val =:= ms110 ->
<<21:5>>;
Val =:= ms120 ->
<<22:5>>;
Val =:= ms130 ->
<<23:5>>;
Val =:= ms140 ->
<<24:5>>;
Val =:= ms150 ->
<<25:5>>;
Val =:= ms160 ->
<<26:5>>;
Val =:= ms170 ->
<<27:5>>;
Val =:= ms180 ->
<<28:5>>;
Val =:= ms190 ->
<<29:5>>;
Val =:= ms200 ->
<<30:5>>;
Val =:= spare1 ->
<<31:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_T-Reordering'(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_PollByte'(Val) ->
if Val =:= kB25 ->
<<0:4>>;
Val =:= kB50 ->
<<1:4>>;
Val =:= kB75 ->
<<2:4>>;
Val =:= kB100 ->
<<3:4>>;
Val =:= kB125 ->
<<4:4>>;
Val =:= kB250 ->
<<5:4>>;
Val =:= kB375 ->
<<6:4>>;
Val =:= kB500 ->
<<7:4>>;
Val =:= kB750 ->
<<8:4>>;
Val =:= kB1000 ->
<<9:4>>;
Val =:= kB1250 ->
<<10:4>>;
Val =:= kB1500 ->
<<11:4>>;
Val =:= kB2000 ->
<<12:4>>;
Val =:= kB3000 ->
<<13:4>>;
Val =:= kBinfinity ->
<<14:4>>;
Val =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PollByte(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> kB25;
1 -> kB50;
2 -> kB75;
3 -> kB100;
4 -> kB125;
5 -> kB250;
6 -> kB375;
7 -> kB500;
8 -> kB750;
9 -> kB1000;
10 -> kB1250;
11 -> kB1500;
12 -> kB2000;
13 -> kB3000;
14 -> kBinfinity;
15 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_PollPDU'(Val) ->
if Val =:= p4 ->
<<0:3>>;
Val =:= p8 ->
<<1:3>>;
Val =:= p16 ->
<<2:3>>;
Val =:= p32 ->
<<3:3>>;
Val =:= p64 ->
<<4:3>>;
Val =:= p128 ->
<<5:3>>;
Val =:= p256 ->
<<6:3>>;
Val =:= pInfinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PollPDU(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> p4;
1 -> p8;
2 -> p16;
3 -> p32;
4 -> p64;
5 -> p128;
6 -> p256;
7 -> pInfinity
end,
{V1@Int2,V1@Buf1}
end.

'enc_T-PollRetransmit'(Val) ->
if Val =:= ms5 ->
<<0:6>>;
Val =:= ms10 ->
<<1:6>>;
Val =:= ms15 ->
<<2:6>>;
Val =:= ms20 ->
<<3:6>>;
Val =:= ms25 ->
<<4:6>>;
Val =:= ms30 ->
<<5:6>>;
Val =:= ms35 ->
<<6:6>>;
Val =:= ms40 ->
<<7:6>>;
Val =:= ms45 ->
<<8:6>>;
Val =:= ms50 ->
<<9:6>>;
Val =:= ms55 ->
<<10:6>>;
Val =:= ms60 ->
<<11:6>>;
Val =:= ms65 ->
<<12:6>>;
Val =:= ms70 ->
<<13:6>>;
Val =:= ms75 ->
<<14:6>>;
Val =:= ms80 ->
<<15:6>>;
Val =:= ms85 ->
<<16:6>>;
Val =:= ms90 ->
<<17:6>>;
Val =:= ms95 ->
<<18:6>>;
Val =:= ms100 ->
<<19:6>>;
Val =:= ms105 ->
<<20:6>>;
Val =:= ms110 ->
<<21:6>>;
Val =:= ms115 ->
<<22:6>>;
Val =:= ms120 ->
<<23:6>>;
Val =:= ms125 ->
<<24:6>>;
Val =:= ms130 ->
<<25:6>>;
Val =:= ms135 ->
<<26:6>>;
Val =:= ms140 ->
<<27:6>>;
Val =:= ms145 ->
<<28:6>>;
Val =:= ms150 ->
<<29:6>>;
Val =:= ms155 ->
<<30:6>>;
Val =:= ms160 ->
<<31:6>>;
Val =:= ms165 ->
<<32:6>>;
Val =:= ms170 ->
<<33:6>>;
Val =:= ms175 ->
<<34:6>>;
Val =:= ms180 ->
<<35:6>>;
Val =:= ms185 ->
<<36:6>>;
Val =:= ms190 ->
<<37:6>>;
Val =:= ms195 ->
<<38:6>>;
Val =:= ms200 ->
<<39:6>>;
Val =:= ms205 ->
<<40:6>>;
Val =:= ms210 ->
<<41:6>>;
Val =:= ms215 ->
<<42:6>>;
Val =:= ms220 ->
<<43:6>>;
Val =:= ms225 ->
<<44:6>>;
Val =:= ms230 ->
<<45:6>>;
Val =:= ms235 ->
<<46:6>>;
Val =:= ms240 ->
<<47:6>>;
Val =:= ms245 ->
<<48:6>>;
Val =:= ms250 ->
<<49:6>>;
Val =:= ms300 ->
<<50:6>>;
Val =:= ms350 ->
<<51:6>>;
Val =:= ms400 ->
<<52:6>>;
Val =:= ms450 ->
<<53:6>>;
Val =:= ms500 ->
<<54:6>>;
Val =:= spare9 ->
<<55:6>>;
Val =:= spare8 ->
<<56:6>>;
Val =:= spare7 ->
<<57:6>>;
Val =:= spare6 ->
<<58:6>>;
Val =:= spare5 ->
<<59:6>>;
Val =:= spare4 ->
<<60:6>>;
Val =:= spare3 ->
<<61:6>>;
Val =:= spare2 ->
<<62:6>>;
Val =:= spare1 ->
<<63:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_T-PollRetransmit'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms5;
1 -> ms10;
2 -> ms15;
3 -> ms20;
4 -> ms25;
5 -> ms30;
6 -> ms35;
7 -> ms40;
8 -> ms45;
9 -> ms50;
10 -> ms55;
11 -> ms60;
12 -> ms65;
13 -> ms70;
14 -> ms75;
15 -> ms80;
16 -> ms85;
17 -> ms90;
18 -> ms95;
19 -> ms100;
20 -> ms105;
21 -> ms110;
22 -> ms115;
23 -> ms120;
24 -> ms125;
25 -> ms130;
26 -> ms135;
27 -> ms140;
28 -> ms145;
29 -> ms150;
30 -> ms155;
31 -> ms160;
32 -> ms165;
33 -> ms170;
34 -> ms175;
35 -> ms180;
36 -> ms185;
37 -> ms190;
38 -> ms195;
39 -> ms200;
40 -> ms205;
41 -> ms210;
42 -> ms215;
43 -> ms220;
44 -> ms225;
45 -> ms230;
46 -> ms235;
47 -> ms240;
48 -> ms245;
49 -> ms250;
50 -> ms300;
51 -> ms350;
52 -> ms400;
53 -> ms450;
54 -> ms500;
55 -> spare9;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_SN-FieldLength'(Val) ->
if Val =:= size5 ->
<<0:1>>;
Val =:= size10 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SN-FieldLength'(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> size5;
1 -> size10
end,
{V1@Int2,V1@Buf1}
end.

'enc_DL-UM-RLC'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= size5 ->
<<0:1>>;
Enc1@input =:= size10 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= ms0 ->
<<0:5>>;
Enc3@input =:= ms5 ->
<<1:5>>;
Enc3@input =:= ms10 ->
<<2:5>>;
Enc3@input =:= ms15 ->
<<3:5>>;
Enc3@input =:= ms20 ->
<<4:5>>;
Enc3@input =:= ms25 ->
<<5:5>>;
Enc3@input =:= ms30 ->
<<6:5>>;
Enc3@input =:= ms35 ->
<<7:5>>;
Enc3@input =:= ms40 ->
<<8:5>>;
Enc3@input =:= ms45 ->
<<9:5>>;
Enc3@input =:= ms50 ->
<<10:5>>;
Enc3@input =:= ms55 ->
<<11:5>>;
Enc3@input =:= ms60 ->
<<12:5>>;
Enc3@input =:= ms65 ->
<<13:5>>;
Enc3@input =:= ms70 ->
<<14:5>>;
Enc3@input =:= ms75 ->
<<15:5>>;
Enc3@input =:= ms80 ->
<<16:5>>;
Enc3@input =:= ms85 ->
<<17:5>>;
Enc3@input =:= ms90 ->
<<18:5>>;
Enc3@input =:= ms95 ->
<<19:5>>;
Enc3@input =:= ms100 ->
<<20:5>>;
Enc3@input =:= ms110 ->
<<21:5>>;
Enc3@input =:= ms120 ->
<<22:5>>;
Enc3@input =:= ms130 ->
<<23:5>>;
Enc3@input =:= ms140 ->
<<24:5>>;
Enc3@input =:= ms150 ->
<<25:5>>;
Enc3@input =:= ms160 ->
<<26:5>>;
Enc3@input =:= ms170 ->
<<27:5>>;
Enc3@input =:= ms180 ->
<<28:5>>;
Enc3@input =:= ms190 ->
<<29:5>>;
Enc3@input =:= ms200 ->
<<30:5>>;
Enc3@input =:= spare1 ->
<<31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_DL-UM-RLC'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> size5;
1 -> size10
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1
end,
{V2@Int2,V2@Buf1}
end,
{{'DL-UM-RLC',Term1,Term2},Bytes2}.

'enc_UL-UM-RLC'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= size5 ->
<<0:1>>;
Enc1@input =:= size10 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.


'dec_UL-UM-RLC'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> size5;
1 -> size10
end,
{V1@Int2,V1@Buf1}
end,
{{'UL-UM-RLC',Term1},Bytes1}.

'enc_DL-AM-RLC'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= ms0 ->
<<0:5>>;
Enc1@input =:= ms5 ->
<<1:5>>;
Enc1@input =:= ms10 ->
<<2:5>>;
Enc1@input =:= ms15 ->
<<3:5>>;
Enc1@input =:= ms20 ->
<<4:5>>;
Enc1@input =:= ms25 ->
<<5:5>>;
Enc1@input =:= ms30 ->
<<6:5>>;
Enc1@input =:= ms35 ->
<<7:5>>;
Enc1@input =:= ms40 ->
<<8:5>>;
Enc1@input =:= ms45 ->
<<9:5>>;
Enc1@input =:= ms50 ->
<<10:5>>;
Enc1@input =:= ms55 ->
<<11:5>>;
Enc1@input =:= ms60 ->
<<12:5>>;
Enc1@input =:= ms65 ->
<<13:5>>;
Enc1@input =:= ms70 ->
<<14:5>>;
Enc1@input =:= ms75 ->
<<15:5>>;
Enc1@input =:= ms80 ->
<<16:5>>;
Enc1@input =:= ms85 ->
<<17:5>>;
Enc1@input =:= ms90 ->
<<18:5>>;
Enc1@input =:= ms95 ->
<<19:5>>;
Enc1@input =:= ms100 ->
<<20:5>>;
Enc1@input =:= ms110 ->
<<21:5>>;
Enc1@input =:= ms120 ->
<<22:5>>;
Enc1@input =:= ms130 ->
<<23:5>>;
Enc1@input =:= ms140 ->
<<24:5>>;
Enc1@input =:= ms150 ->
<<25:5>>;
Enc1@input =:= ms160 ->
<<26:5>>;
Enc1@input =:= ms170 ->
<<27:5>>;
Enc1@input =:= ms180 ->
<<28:5>>;
Enc1@input =:= ms190 ->
<<29:5>>;
Enc1@input =:= ms200 ->
<<30:5>>;
Enc1@input =:= spare1 ->
<<31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= ms0 ->
<<0:6>>;
Enc3@input =:= ms5 ->
<<1:6>>;
Enc3@input =:= ms10 ->
<<2:6>>;
Enc3@input =:= ms15 ->
<<3:6>>;
Enc3@input =:= ms20 ->
<<4:6>>;
Enc3@input =:= ms25 ->
<<5:6>>;
Enc3@input =:= ms30 ->
<<6:6>>;
Enc3@input =:= ms35 ->
<<7:6>>;
Enc3@input =:= ms40 ->
<<8:6>>;
Enc3@input =:= ms45 ->
<<9:6>>;
Enc3@input =:= ms50 ->
<<10:6>>;
Enc3@input =:= ms55 ->
<<11:6>>;
Enc3@input =:= ms60 ->
<<12:6>>;
Enc3@input =:= ms65 ->
<<13:6>>;
Enc3@input =:= ms70 ->
<<14:6>>;
Enc3@input =:= ms75 ->
<<15:6>>;
Enc3@input =:= ms80 ->
<<16:6>>;
Enc3@input =:= ms85 ->
<<17:6>>;
Enc3@input =:= ms90 ->
<<18:6>>;
Enc3@input =:= ms95 ->
<<19:6>>;
Enc3@input =:= ms100 ->
<<20:6>>;
Enc3@input =:= ms105 ->
<<21:6>>;
Enc3@input =:= ms110 ->
<<22:6>>;
Enc3@input =:= ms115 ->
<<23:6>>;
Enc3@input =:= ms120 ->
<<24:6>>;
Enc3@input =:= ms125 ->
<<25:6>>;
Enc3@input =:= ms130 ->
<<26:6>>;
Enc3@input =:= ms135 ->
<<27:6>>;
Enc3@input =:= ms140 ->
<<28:6>>;
Enc3@input =:= ms145 ->
<<29:6>>;
Enc3@input =:= ms150 ->
<<30:6>>;
Enc3@input =:= ms155 ->
<<31:6>>;
Enc3@input =:= ms160 ->
<<32:6>>;
Enc3@input =:= ms165 ->
<<33:6>>;
Enc3@input =:= ms170 ->
<<34:6>>;
Enc3@input =:= ms175 ->
<<35:6>>;
Enc3@input =:= ms180 ->
<<36:6>>;
Enc3@input =:= ms185 ->
<<37:6>>;
Enc3@input =:= ms190 ->
<<38:6>>;
Enc3@input =:= ms195 ->
<<39:6>>;
Enc3@input =:= ms200 ->
<<40:6>>;
Enc3@input =:= ms205 ->
<<41:6>>;
Enc3@input =:= ms210 ->
<<42:6>>;
Enc3@input =:= ms215 ->
<<43:6>>;
Enc3@input =:= ms220 ->
<<44:6>>;
Enc3@input =:= ms225 ->
<<45:6>>;
Enc3@input =:= ms230 ->
<<46:6>>;
Enc3@input =:= ms235 ->
<<47:6>>;
Enc3@input =:= ms240 ->
<<48:6>>;
Enc3@input =:= ms245 ->
<<49:6>>;
Enc3@input =:= ms250 ->
<<50:6>>;
Enc3@input =:= ms300 ->
<<51:6>>;
Enc3@input =:= ms350 ->
<<52:6>>;
Enc3@input =:= ms400 ->
<<53:6>>;
Enc3@input =:= ms450 ->
<<54:6>>;
Enc3@input =:= ms500 ->
<<55:6>>;
Enc3@input =:= spare8 ->
<<56:6>>;
Enc3@input =:= spare7 ->
<<57:6>>;
Enc3@input =:= spare6 ->
<<58:6>>;
Enc3@input =:= spare5 ->
<<59:6>>;
Enc3@input =:= spare4 ->
<<60:6>>;
Enc3@input =:= spare3 ->
<<61:6>>;
Enc3@input =:= spare2 ->
<<62:6>>;
Enc3@input =:= spare1 ->
<<63:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_DL-AM-RLC'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms110;
22 -> ms120;
23 -> ms130;
24 -> ms140;
25 -> ms150;
26 -> ms160;
27 -> ms170;
28 -> ms180;
29 -> ms190;
30 -> ms200;
31 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> ms0;
1 -> ms5;
2 -> ms10;
3 -> ms15;
4 -> ms20;
5 -> ms25;
6 -> ms30;
7 -> ms35;
8 -> ms40;
9 -> ms45;
10 -> ms50;
11 -> ms55;
12 -> ms60;
13 -> ms65;
14 -> ms70;
15 -> ms75;
16 -> ms80;
17 -> ms85;
18 -> ms90;
19 -> ms95;
20 -> ms100;
21 -> ms105;
22 -> ms110;
23 -> ms115;
24 -> ms120;
25 -> ms125;
26 -> ms130;
27 -> ms135;
28 -> ms140;
29 -> ms145;
30 -> ms150;
31 -> ms155;
32 -> ms160;
33 -> ms165;
34 -> ms170;
35 -> ms175;
36 -> ms180;
37 -> ms185;
38 -> ms190;
39 -> ms195;
40 -> ms200;
41 -> ms205;
42 -> ms210;
43 -> ms215;
44 -> ms220;
45 -> ms225;
46 -> ms230;
47 -> ms235;
48 -> ms240;
49 -> ms245;
50 -> ms250;
51 -> ms300;
52 -> ms350;
53 -> ms400;
54 -> ms450;
55 -> ms500;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1
end,
{V2@Int2,V2@Buf1}
end,
{{'DL-AM-RLC',Term1,Term2},Bytes2}.

'enc_UL-AM-RLC'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= ms5 ->
<<0:6>>;
Enc1@input =:= ms10 ->
<<1:6>>;
Enc1@input =:= ms15 ->
<<2:6>>;
Enc1@input =:= ms20 ->
<<3:6>>;
Enc1@input =:= ms25 ->
<<4:6>>;
Enc1@input =:= ms30 ->
<<5:6>>;
Enc1@input =:= ms35 ->
<<6:6>>;
Enc1@input =:= ms40 ->
<<7:6>>;
Enc1@input =:= ms45 ->
<<8:6>>;
Enc1@input =:= ms50 ->
<<9:6>>;
Enc1@input =:= ms55 ->
<<10:6>>;
Enc1@input =:= ms60 ->
<<11:6>>;
Enc1@input =:= ms65 ->
<<12:6>>;
Enc1@input =:= ms70 ->
<<13:6>>;
Enc1@input =:= ms75 ->
<<14:6>>;
Enc1@input =:= ms80 ->
<<15:6>>;
Enc1@input =:= ms85 ->
<<16:6>>;
Enc1@input =:= ms90 ->
<<17:6>>;
Enc1@input =:= ms95 ->
<<18:6>>;
Enc1@input =:= ms100 ->
<<19:6>>;
Enc1@input =:= ms105 ->
<<20:6>>;
Enc1@input =:= ms110 ->
<<21:6>>;
Enc1@input =:= ms115 ->
<<22:6>>;
Enc1@input =:= ms120 ->
<<23:6>>;
Enc1@input =:= ms125 ->
<<24:6>>;
Enc1@input =:= ms130 ->
<<25:6>>;
Enc1@input =:= ms135 ->
<<26:6>>;
Enc1@input =:= ms140 ->
<<27:6>>;
Enc1@input =:= ms145 ->
<<28:6>>;
Enc1@input =:= ms150 ->
<<29:6>>;
Enc1@input =:= ms155 ->
<<30:6>>;
Enc1@input =:= ms160 ->
<<31:6>>;
Enc1@input =:= ms165 ->
<<32:6>>;
Enc1@input =:= ms170 ->
<<33:6>>;
Enc1@input =:= ms175 ->
<<34:6>>;
Enc1@input =:= ms180 ->
<<35:6>>;
Enc1@input =:= ms185 ->
<<36:6>>;
Enc1@input =:= ms190 ->
<<37:6>>;
Enc1@input =:= ms195 ->
<<38:6>>;
Enc1@input =:= ms200 ->
<<39:6>>;
Enc1@input =:= ms205 ->
<<40:6>>;
Enc1@input =:= ms210 ->
<<41:6>>;
Enc1@input =:= ms215 ->
<<42:6>>;
Enc1@input =:= ms220 ->
<<43:6>>;
Enc1@input =:= ms225 ->
<<44:6>>;
Enc1@input =:= ms230 ->
<<45:6>>;
Enc1@input =:= ms235 ->
<<46:6>>;
Enc1@input =:= ms240 ->
<<47:6>>;
Enc1@input =:= ms245 ->
<<48:6>>;
Enc1@input =:= ms250 ->
<<49:6>>;
Enc1@input =:= ms300 ->
<<50:6>>;
Enc1@input =:= ms350 ->
<<51:6>>;
Enc1@input =:= ms400 ->
<<52:6>>;
Enc1@input =:= ms450 ->
<<53:6>>;
Enc1@input =:= ms500 ->
<<54:6>>;
Enc1@input =:= spare9 ->
<<55:6>>;
Enc1@input =:= spare8 ->
<<56:6>>;
Enc1@input =:= spare7 ->
<<57:6>>;
Enc1@input =:= spare6 ->
<<58:6>>;
Enc1@input =:= spare5 ->
<<59:6>>;
Enc1@input =:= spare4 ->
<<60:6>>;
Enc1@input =:= spare3 ->
<<61:6>>;
Enc1@input =:= spare2 ->
<<62:6>>;
Enc1@input =:= spare1 ->
<<63:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= p4 ->
<<0:3>>;
Enc3@input =:= p8 ->
<<1:3>>;
Enc3@input =:= p16 ->
<<2:3>>;
Enc3@input =:= p32 ->
<<3:3>>;
Enc3@input =:= p64 ->
<<4:3>>;
Enc3@input =:= p128 ->
<<5:3>>;
Enc3@input =:= p256 ->
<<6:3>>;
Enc3@input =:= pInfinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input =:= kB25 ->
<<0:4>>;
Enc5@input =:= kB50 ->
<<1:4>>;
Enc5@input =:= kB75 ->
<<2:4>>;
Enc5@input =:= kB100 ->
<<3:4>>;
Enc5@input =:= kB125 ->
<<4:4>>;
Enc5@input =:= kB250 ->
<<5:4>>;
Enc5@input =:= kB375 ->
<<6:4>>;
Enc5@input =:= kB500 ->
<<7:4>>;
Enc5@input =:= kB750 ->
<<8:4>>;
Enc5@input =:= kB1000 ->
<<9:4>>;
Enc5@input =:= kB1250 ->
<<10:4>>;
Enc5@input =:= kB1500 ->
<<11:4>>;
Enc5@input =:= kB2000 ->
<<12:4>>;
Enc5@input =:= kB3000 ->
<<13:4>>;
Enc5@input =:= kBinfinity ->
<<14:4>>;
Enc5@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input =:= t1 ->
<<0:3>>;
Enc7@input =:= t2 ->
<<1:3>>;
Enc7@input =:= t3 ->
<<2:3>>;
Enc7@input =:= t4 ->
<<3:3>>;
Enc7@input =:= t6 ->
<<4:3>>;
Enc7@input =:= t8 ->
<<5:3>>;
Enc7@input =:= t16 ->
<<6:3>>;
Enc7@input =:= t32 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].


'dec_UL-AM-RLC'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms5;
1 -> ms10;
2 -> ms15;
3 -> ms20;
4 -> ms25;
5 -> ms30;
6 -> ms35;
7 -> ms40;
8 -> ms45;
9 -> ms50;
10 -> ms55;
11 -> ms60;
12 -> ms65;
13 -> ms70;
14 -> ms75;
15 -> ms80;
16 -> ms85;
17 -> ms90;
18 -> ms95;
19 -> ms100;
20 -> ms105;
21 -> ms110;
22 -> ms115;
23 -> ms120;
24 -> ms125;
25 -> ms130;
26 -> ms135;
27 -> ms140;
28 -> ms145;
29 -> ms150;
30 -> ms155;
31 -> ms160;
32 -> ms165;
33 -> ms170;
34 -> ms175;
35 -> ms180;
36 -> ms185;
37 -> ms190;
38 -> ms195;
39 -> ms200;
40 -> ms205;
41 -> ms210;
42 -> ms215;
43 -> ms220;
44 -> ms225;
45 -> ms230;
46 -> ms235;
47 -> ms240;
48 -> ms245;
49 -> ms250;
50 -> ms300;
51 -> ms350;
52 -> ms400;
53 -> ms450;
54 -> ms500;
55 -> spare9;
56 -> spare8;
57 -> spare7;
58 -> spare6;
59 -> spare5;
60 -> spare4;
61 -> spare3;
62 -> spare2;
63 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> p4;
1 -> p8;
2 -> p16;
3 -> p32;
4 -> p64;
5 -> p128;
6 -> p256;
7 -> pInfinity
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> kB25;
1 -> kB50;
2 -> kB75;
3 -> kB100;
4 -> kB125;
5 -> kB250;
6 -> kB375;
7 -> kB500;
8 -> kB750;
9 -> kB1000;
10 -> kB1250;
11 -> kB1500;
12 -> kB2000;
13 -> kB3000;
14 -> kBinfinity;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> t1;
1 -> t2;
2 -> t3;
3 -> t4;
4 -> t6;
5 -> t8;
6 -> t16;
7 -> t32
end,
{V4@Int2,V4@Buf1}
end,
{{'UL-AM-RLC',Term1,Term2,Term3,Term4},Bytes4}.

'enc_RLC-Config'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= am ->
[<<0:1,0:2>>|'enc_RLC-Config_am'(ChoiceVal)];
ChoiceTag =:= 'um-Bi-Directional' ->
[<<0:1,1:2>>|'enc_RLC-Config_um-Bi-Directional'(ChoiceVal)];
ChoiceTag =:= 'um-Uni-Directional-UL' ->
[<<0:1,2:2>>|'enc_RLC-Config_um-Uni-Directional-UL'(ChoiceVal)];
ChoiceTag =:= 'um-Uni-Directional-DL' ->
[<<0:1,3:2>>|'enc_RLC-Config_um-Uni-Directional-DL'(ChoiceVal)]
end.
'enc_RLC-Config_am'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_UL-AM-RLC'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
'enc_DL-AM-RLC'(Enc2@input)
end].

'dec_RLC-Config_am'(Bytes) ->

%% attribute number 1 with type UL-AM-RLC
{Term1,Bytes1} = 'dec_UL-AM-RLC'(Bytes),

%% attribute number 2 with type DL-AM-RLC
{Term2,Bytes2} = 'dec_DL-AM-RLC'(Bytes1),
{{'RLC-Config_am',Term1,Term2},Bytes2}.

'enc_RLC-Config_um-Bi-Directional'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_UL-UM-RLC'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
'enc_DL-UM-RLC'(Enc2@input)
end].

'dec_RLC-Config_um-Bi-Directional'(Bytes) ->

%% attribute number 1 with type UL-UM-RLC
{Term1,Bytes1} = 'dec_UL-UM-RLC'(Bytes),

%% attribute number 2 with type DL-UM-RLC
{Term2,Bytes2} = 'dec_DL-UM-RLC'(Bytes1),
{{'RLC-Config_um-Bi-Directional',Term1,Term2},Bytes2}.

'enc_RLC-Config_um-Uni-Directional-UL'(Val) ->
Enc1@input = element(2, Val),
'enc_UL-UM-RLC'(Enc1@input).

'dec_RLC-Config_um-Uni-Directional-UL'(Bytes) ->

%% attribute number 1 with type UL-UM-RLC
{Term1,Bytes1} = 'dec_UL-UM-RLC'(Bytes),
{{'RLC-Config_um-Uni-Directional-UL',Term1},Bytes1}.

'enc_RLC-Config_um-Uni-Directional-DL'(Val) ->
Enc1@input = element(2, Val),
'enc_DL-UM-RLC'(Enc1@input).

'dec_RLC-Config_um-Uni-Directional-DL'(Bytes) ->

%% attribute number 1 with type DL-UM-RLC
{Term1,Bytes1} = 'dec_DL-UM-RLC'(Bytes),
{{'RLC-Config_um-Uni-Directional-DL',Term1},Bytes1}.



'dec_RLC-Config'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RLC-Config_am'(Bytes2)
end,
{{am,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RLC-Config_um-Bi-Directional'(Bytes2)
end,
{{'um-Bi-Directional',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
'dec_RLC-Config_um-Uni-Directional-UL'(Bytes2)
end,
{{'um-Uni-Directional-UL',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
'dec_RLC-Config_um-Uni-Directional-DL'(Bytes2)
end,
{{'um-Uni-Directional-DL',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_DRB-ToReleaseList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 11 ->
[<<Enc2@len@sub:4>>|[begin
Comp@sub = Comp - 1,
if Comp@sub bsr 5 =:= 0 ->
<<Comp@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end
end || Comp <- Val]]
end.



'dec_DRB-ToReleaseList'(Bytes) ->
%% Length with constraint {1,11}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components35(V1@Add2, V1@Buf1, []).

'enc_DRB-ToAddMod'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@input = element(2, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input bsr 4 =:= 0 ->
<<Enc7@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc10@input = element(3, Val),
Enc10@input@sub = Enc10@input - 1,
if Enc10@input@sub bsr 5 =:= 0 ->
<<Enc10@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(4, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PDCP-Config'(Enc12@input)
end
end,
begin
Enc14@input = element(5, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RLC-Config'(Enc14@input)
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc16@input@sub = Enc16@input - 3,
if Enc16@input@sub bsr 3 =:= 0 ->
<<Enc16@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@input}}})
end
end
end
end|begin
Enc19@input = element(7, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_LogicalChannelConfig(Enc19@input)
end
end].


'dec_DRB-ToAddMod'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,

%% attribute number 3 with type PDCP-Config
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
'dec_PDCP-Config'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type RLC-Config
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'dec_RLC-Config'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes6,
V5@Add2 = V5@V0 + 3,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type LogicalChannelConfig
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_LogicalChannelConfig(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V6@V0,V6@Buf1} = case Bytes8 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:7,V6@Buf7/bitstring>> when V6@V6 =/= 0 ->
{V6@V6,V6@Buf7};
<<1:1,0:1,V6@V7:14,V6@Buf8/bitstring>> when V6@V7 =/= 0 ->
{V6@V7,V6@Buf8}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V9:V6@V0/bitstring-unit:1,V6@Buf10/bitstring>> = V6@Buf1,
{V6@V9,V6@Buf10}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'DRB-ToAddMod',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_DRB-ToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 11 ->
[<<Enc1@len@sub:4>>|['enc_DRB-ToAddMod'(Comp) || Comp <- Val]]
end.



'dec_DRB-ToAddModList'(Bytes) ->
%% Length with constraint {1,11}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components36(V1@Add2, V1@Buf1, []).

'enc_SRB-ToAddMod'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 1 =:= 0 ->
<<Enc4@input@sub:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SRB-ToAddMod_rlc-Config'(Enc6@input)
end
end|begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SRB-ToAddMod_logicalChannelConfig'(Enc8@input)
end
end].
'enc_SRB-ToAddMod_rlc-Config'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= explicitValue ->
[<<0:1>>|'enc_RLC-Config'(ChoiceVal)];
ChoiceTag =:= defaultValue ->
<<1:1>>
end.

'dec_SRB-ToAddMod_rlc-Config'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RLC-Config'(Bytes1)
end,
{{explicitValue,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{defaultValue,Val},NewBytes}
end.
'enc_SRB-ToAddMod_logicalChannelConfig'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= explicitValue ->
[<<0:1>>|enc_LogicalChannelConfig(ChoiceVal)];
ChoiceTag =:= defaultValue ->
<<1:1>>
end.

'dec_SRB-ToAddMod_logicalChannelConfig'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_LogicalChannelConfig(Bytes1)
end,
{{explicitValue,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{defaultValue,Val},NewBytes}
end.


'dec_SRB-ToAddMod'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_SRB-ToAddMod_rlc-Config'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_SRB-ToAddMod_logicalChannelConfig'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SRB-ToAddMod',Term1,Term2,Term3},Bytes7}.

'enc_SRB-ToAddModList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 1 =:= 0 ->
[<<Enc1@len@sub:1>>|['enc_SRB-ToAddMod'(Comp) || Comp <- Val]]
end.



'dec_SRB-ToAddModList'(Bytes) ->
%% Length with constraint {1,2}
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components37(V1@Add2, V1@Buf1, []).

'enc_RadioResourceConfigDedicated'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@input = element(2, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SRB-ToAddModList'(Enc8@input)
end
end,
begin
Enc10@input = element(3, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_DRB-ToAddModList'(Enc10@input)
end
end,
begin
Enc12@input = element(4, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_DRB-ToReleaseList'(Enc12@input)
end
end,
begin
Enc14@input = element(5, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RadioResourceConfigDedicated_mac-MainConfig'(Enc14@input)
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SPS-Config'(Enc16@input)
end
end|begin
Enc18@input = element(7, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_PhysicalConfigDedicated(Enc18@input)
end
end].
'enc_RadioResourceConfigDedicated_mac-MainConfig'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= explicitValue ->
[<<0:1>>|'enc_MAC-MainConfig'(ChoiceVal)];
ChoiceTag =:= defaultValue ->
<<1:1>>
end.

'dec_RadioResourceConfigDedicated_mac-MainConfig'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MAC-MainConfig'(Bytes1)
end,
{{explicitValue,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{defaultValue,Val},NewBytes}
end.


dec_RadioResourceConfigDedicated(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SRB-ToAddModList
{Term1,Bytes3} = case (Opt bsr 5) band 1 of
1 ->
'dec_SRB-ToAddModList'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type DRB-ToAddModList
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
'dec_DRB-ToAddModList'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type DRB-ToReleaseList
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
'dec_DRB-ToReleaseList'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
'dec_RadioResourceConfigDedicated_mac-MainConfig'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SPS-Config
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
'dec_SPS-Config'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type PhysicalConfigDedicated
{Term6,Bytes8} = case Opt band 1 of
1 ->
dec_PhysicalConfigDedicated(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V3@V0,V3@Buf1} = case Bytes8 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'RadioResourceConfigDedicated',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_UL-CyclicPrefixLength'(Val) ->
if Val =:= len1 ->
<<0:1>>;
Val =:= len2 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UL-CyclicPrefixLength'(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> len1;
1 -> len2
end,
{V1@Int2,V1@Buf1}
end.

'enc_PCCH-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= rf32 ->
<<0:2>>;
Enc1@input =:= rf64 ->
<<1:2>>;
Enc1@input =:= rf128 ->
<<2:2>>;
Enc1@input =:= rf256 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= fourT ->
<<0:3>>;
Enc3@input =:= twoT ->
<<1:3>>;
Enc3@input =:= oneT ->
<<2:3>>;
Enc3@input =:= halfT ->
<<3:3>>;
Enc3@input =:= quarterT ->
<<4:3>>;
Enc3@input =:= oneEighthT ->
<<5:3>>;
Enc3@input =:= oneSixteenthT ->
<<6:3>>;
Enc3@input =:= oneThirtySecondT ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_PCCH-Config'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> rf32;
1 -> rf64;
2 -> rf128;
3 -> rf256
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> fourT;
1 -> twoT;
2 -> oneT;
3 -> halfT;
4 -> quarterT;
5 -> oneEighthT;
6 -> oneSixteenthT;
7 -> oneThirtySecondT
end,
{V2@Int2,V2@Buf1}
end,
{{'PCCH-Config',Term1,Term2},Bytes2}.

'enc_BCCH-Config'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= n2 ->
<<0:2>>;
Enc1@input =:= n4 ->
<<1:2>>;
Enc1@input =:= n8 ->
<<2:2>>;
Enc1@input =:= n16 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.


'dec_BCCH-Config'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> n2;
1 -> n4;
2 -> n8;
3 -> n16
end,
{V1@Int2,V1@Buf1}
end,
{{'BCCH-Config',Term1},Bytes1}.

'enc_RadioResourceConfigCommon'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(6, Val),
Enc4@input = element(7, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(8, Val),
Enc6@input = element(9, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(10, Val),
Enc8@input = element(11, Val),
if Enc7@input =:= asn1_NOVALUE ->
if Enc8@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(12, Val),
if Enc9@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc11@input = element(2, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RACH-ConfigCommon'(Enc11@input)
end
end,
begin
Enc13@input = element(3, Val),
'enc_PRACH-Config'(Enc13@input)
end,
begin
Enc14@input = element(4, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PDSCH-ConfigCommon'(Enc14@input)
end
end,
begin
Enc16@input = element(5, Val),
'enc_PUSCH-ConfigCommon'(Enc16@input)
end,
begin
Enc17@input = element(6, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PHICH-Config'(Enc17@input)
end
end,
begin
Enc19@input = element(7, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PUCCH-ConfigCommon'(Enc19@input)
end
end,
begin
Enc21@input = element(8, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SoundingRS-UL-ConfigCommon'(Enc21@input)
end
end,
begin
Enc23@input = element(9, Val),
if Enc23@input =:= asn1_NOVALUE ->
[];
true ->
enc_UplinkPowerControlCommon(Enc23@input)
end
end,
begin
Enc25@input = element(10, Val),
if Enc25@input =:= asn1_NOVALUE ->
[];
true ->
enc_AntennaInfoCommon(Enc25@input)
end
end,
begin
Enc27@input = element(11, Val),
if Enc27@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc27@input@sub = Enc27@input - -30,
if Enc27@input@sub bsr 6 =:= 0 ->
<<Enc27@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@input}}})
end
end
end
end,
begin
Enc30@input = element(12, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TDD-Config'(Enc30@input)
end
end|begin
Enc32@input = element(13, Val),
if Enc32@input =:= len1 ->
<<0:1>>;
Enc32@input =:= len2 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc32@input}}})
end
end].


dec_RadioResourceConfigCommon(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type RACH-ConfigCommon
{Term1,Bytes3} = case (Opt bsr 8) band 1 of
1 ->
'dec_RACH-ConfigCommon'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type PRACH-Config
{Term2,Bytes4} = 'dec_PRACH-Config'(Bytes3),

%% attribute number 3 with type PDSCH-ConfigCommon
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
'dec_PDSCH-ConfigCommon'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type PUSCH-ConfigCommon
{Term4,Bytes6} = 'dec_PUSCH-ConfigCommon'(Bytes5),

%% attribute number 5 with type PHICH-Config
{Term5,Bytes7} = case (Opt bsr 6) band 1 of
1 ->
'dec_PHICH-Config'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type PUCCH-ConfigCommon
{Term6,Bytes8} = case (Opt bsr 5) band 1 of
1 ->
'dec_PUCCH-ConfigCommon'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type SoundingRS-UL-ConfigCommon
{Term7,Bytes9} = case (Opt bsr 4) band 1 of
1 ->
'dec_SoundingRS-UL-ConfigCommon'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type UplinkPowerControlCommon
{Term8,Bytes10} = case (Opt bsr 3) band 1 of
1 ->
dec_UplinkPowerControlCommon(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type AntennaInfoCommon
{Term9,Bytes11} = case (Opt bsr 2) band 1 of
1 ->
dec_AntennaInfoCommon(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes11,
V3@Add2 = V3@V0 + -30,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type TDD-Config
{Term11,Bytes13} = case Opt band 1 of
1 ->
'dec_TDD-Config'(Bytes12);
0 ->
{asn1_NOVALUE,Bytes12}
end,

%% attribute number 12 with type ENUMERATED
{Term12,Bytes14} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes13,
V4@Int2 = case V4@V0 of
0 -> len1;
1 -> len2
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes15} = case Ext of
0 -> {<<>>,Bytes14};
1 ->
{V5@V0,V5@Buf1} = case Bytes14 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes16= skipextensions(Bytes15, 1, Extensions),
{{'RadioResourceConfigCommon',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12},Bytes16}.

'enc_RadioResourceConfigCommonSIB'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
'enc_RACH-ConfigCommon'(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
'enc_BCCH-Config'(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
'enc_PCCH-Config'(Enc4@input)
end,
begin
Enc5@input = element(5, Val),
'enc_PRACH-ConfigSIB'(Enc5@input)
end,
begin
Enc6@input = element(6, Val),
'enc_PDSCH-ConfigCommon'(Enc6@input)
end,
begin
Enc7@input = element(7, Val),
'enc_PUSCH-ConfigCommon'(Enc7@input)
end,
begin
Enc8@input = element(8, Val),
'enc_PUCCH-ConfigCommon'(Enc8@input)
end,
begin
Enc9@input = element(9, Val),
'enc_SoundingRS-UL-ConfigCommon'(Enc9@input)
end,
begin
Enc10@input = element(10, Val),
enc_UplinkPowerControlCommon(Enc10@input)
end|begin
Enc11@input = element(11, Val),
if Enc11@input =:= len1 ->
<<0:1>>;
Enc11@input =:= len2 ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end].


dec_RadioResourceConfigCommonSIB(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type RACH-ConfigCommon
{Term1,Bytes2} = 'dec_RACH-ConfigCommon'(Bytes1),

%% attribute number 2 with type BCCH-Config
{Term2,Bytes3} = 'dec_BCCH-Config'(Bytes2),

%% attribute number 3 with type PCCH-Config
{Term3,Bytes4} = 'dec_PCCH-Config'(Bytes3),

%% attribute number 4 with type PRACH-ConfigSIB
{Term4,Bytes5} = 'dec_PRACH-ConfigSIB'(Bytes4),

%% attribute number 5 with type PDSCH-ConfigCommon
{Term5,Bytes6} = 'dec_PDSCH-ConfigCommon'(Bytes5),

%% attribute number 6 with type PUSCH-ConfigCommon
{Term6,Bytes7} = 'dec_PUSCH-ConfigCommon'(Bytes6),

%% attribute number 7 with type PUCCH-ConfigCommon
{Term7,Bytes8} = 'dec_PUCCH-ConfigCommon'(Bytes7),

%% attribute number 8 with type SoundingRS-UL-ConfigCommon
{Term8,Bytes9} = 'dec_SoundingRS-UL-ConfigCommon'(Bytes8),

%% attribute number 9 with type UplinkPowerControlCommon
{Term9,Bytes10} = dec_UplinkPowerControlCommon(Bytes9),

%% attribute number 10 with type ENUMERATED
{Term10,Bytes11} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes10,
V2@Int2 = case V2@V0 of
0 -> len1;
1 -> len2
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes12} = case Ext of
0 -> {<<>>,Bytes11};
1 ->
{V3@V0,V3@Buf1} = case Bytes11 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes13= skipextensions(Bytes12, 1, Extensions),
{{'RadioResourceConfigCommonSIB',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes13}.

'enc_RACH-ConfigDedicated'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 6 =:= 0 ->
<<Enc1@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 4 =:= 0 ->
<<Enc3@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_RACH-ConfigDedicated'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'RACH-ConfigDedicated',Term1,Term2},Bytes2}.

'enc_RACH-ConfigCommon'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
'enc_RACH-ConfigCommon_preambleInfo'(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
'enc_RACH-ConfigCommon_powerRampingParameters'(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
'enc_RACH-ConfigCommon_ra-SupervisionInfo'(Enc4@input)
end|begin
Enc5@input = element(5, Val),
Enc5@input@sub = Enc5@input - 1,
if Enc5@input@sub bsr 3 =:= 0 ->
<<Enc5@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].
'enc_RACH-ConfigCommon_preambleInfo'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= n4 ->
<<0:4>>;
Enc2@input =:= n8 ->
<<1:4>>;
Enc2@input =:= n12 ->
<<2:4>>;
Enc2@input =:= n16 ->
<<3:4>>;
Enc2@input =:= n20 ->
<<4:4>>;
Enc2@input =:= n24 ->
<<5:4>>;
Enc2@input =:= n28 ->
<<6:4>>;
Enc2@input =:= n32 ->
<<7:4>>;
Enc2@input =:= n36 ->
<<8:4>>;
Enc2@input =:= n40 ->
<<9:4>>;
Enc2@input =:= n44 ->
<<10:4>>;
Enc2@input =:= n48 ->
<<11:4>>;
Enc2@input =:= n52 ->
<<12:4>>;
Enc2@input =:= n56 ->
<<13:4>>;
Enc2@input =:= n60 ->
<<14:4>>;
Enc2@input =:= n64 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Enc4@input)
end
end].
'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Val) ->
[begin
Enc2@input = element(2, Val),
if Enc2@input =:= n4 ->
<<0:1,0:4>>;
Enc2@input =:= n8 ->
<<0:1,1:4>>;
Enc2@input =:= n12 ->
<<0:1,2:4>>;
Enc2@input =:= n16 ->
<<0:1,3:4>>;
Enc2@input =:= n20 ->
<<0:1,4:4>>;
Enc2@input =:= n24 ->
<<0:1,5:4>>;
Enc2@input =:= n28 ->
<<0:1,6:4>>;
Enc2@input =:= n32 ->
<<0:1,7:4>>;
Enc2@input =:= n36 ->
<<0:1,8:4>>;
Enc2@input =:= n40 ->
<<0:1,9:4>>;
Enc2@input =:= n44 ->
<<0:1,10:4>>;
Enc2@input =:= n48 ->
<<0:1,11:4>>;
Enc2@input =:= n52 ->
<<0:1,12:4>>;
Enc2@input =:= n56 ->
<<0:1,13:4>>;
Enc2@input =:= n60 ->
<<0:1,14:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= b56 ->
<<0:2>>;
Enc4@input =:= b144 ->
<<1:2>>;
Enc4@input =:= b208 ->
<<2:2>>;
Enc4@input =:= b256 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= minusinfinity ->
<<0:3>>;
Enc6@input =:= dB0 ->
<<1:3>>;
Enc6@input =:= dB5 ->
<<2:3>>;
Enc6@input =:= dB8 ->
<<3:3>>;
Enc6@input =:= dB10 ->
<<4:3>>;
Enc6@input =:= dB12 ->
<<5:3>>;
Enc6@input =:= dB15 ->
<<6:3>>;
Enc6@input =:= dB18 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].

'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n20;
5 -> n24;
6 -> n28;
7 -> n32;
8 -> n36;
9 -> n40;
10 -> n44;
11 -> n48;
12 -> n52;
13 -> n56;
14 -> n60;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[n4,n8,n12,n16,n20,n24,n28,n32,n36,n40,n44,n48,n52,n56,n60]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> b56;
1 -> b144;
2 -> b208;
3 -> b256
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> minusinfinity;
1 -> dB0;
2 -> dB5;
3 -> dB8;
4 -> dB10;
5 -> dB12;
6 -> dB15;
7 -> dB18
end,
{V4@Int2,V4@Buf1}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:7,V5@Buf7/bitstring>> when V5@V6 =/= 0 ->
{V5@V6,V5@Buf7};
<<1:1,0:1,V5@V7:14,V5@Buf8/bitstring>> when V5@V7 =/= 0 ->
{V5@V7,V5@Buf8}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V9:V5@V0/bitstring-unit:1,V5@Buf10/bitstring>> = V5@Buf1,
{V5@V9,V5@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig',Term1,Term2,Term3},Bytes6}.


'dec_RACH-ConfigCommon_preambleInfo'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> n4;
1 -> n8;
2 -> n12;
3 -> n16;
4 -> n20;
5 -> n24;
6 -> n28;
7 -> n32;
8 -> n36;
9 -> n40;
10 -> n44;
11 -> n48;
12 -> n52;
13 -> n56;
14 -> n60;
15 -> n64
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'RACH-ConfigCommon_preambleInfo',Term1,Term2},Bytes3}.

'enc_RACH-ConfigCommon_powerRampingParameters'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= dB0 ->
<<0:2>>;
Enc1@input =:= dB2 ->
<<1:2>>;
Enc1@input =:= dB4 ->
<<2:2>>;
Enc1@input =:= dB6 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= 'dBm-120' ->
<<0:4>>;
Enc3@input =:= 'dBm-118' ->
<<1:4>>;
Enc3@input =:= 'dBm-116' ->
<<2:4>>;
Enc3@input =:= 'dBm-114' ->
<<3:4>>;
Enc3@input =:= 'dBm-112' ->
<<4:4>>;
Enc3@input =:= 'dBm-110' ->
<<5:4>>;
Enc3@input =:= 'dBm-108' ->
<<6:4>>;
Enc3@input =:= 'dBm-106' ->
<<7:4>>;
Enc3@input =:= 'dBm-104' ->
<<8:4>>;
Enc3@input =:= 'dBm-102' ->
<<9:4>>;
Enc3@input =:= 'dBm-100' ->
<<10:4>>;
Enc3@input =:= 'dBm-98' ->
<<11:4>>;
Enc3@input =:= 'dBm-96' ->
<<12:4>>;
Enc3@input =:= 'dBm-94' ->
<<13:4>>;
Enc3@input =:= 'dBm-92' ->
<<14:4>>;
Enc3@input =:= 'dBm-90' ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

'dec_RACH-ConfigCommon_powerRampingParameters'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> dB0;
1 -> dB2;
2 -> dB4;
3 -> dB6
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> 'dBm-120';
1 -> 'dBm-118';
2 -> 'dBm-116';
3 -> 'dBm-114';
4 -> 'dBm-112';
5 -> 'dBm-110';
6 -> 'dBm-108';
7 -> 'dBm-106';
8 -> 'dBm-104';
9 -> 'dBm-102';
10 -> 'dBm-100';
11 -> 'dBm-98';
12 -> 'dBm-96';
13 -> 'dBm-94';
14 -> 'dBm-92';
15 -> 'dBm-90'
end,
{V2@Int2,V2@Buf1}
end,
{{'RACH-ConfigCommon_powerRampingParameters',Term1,Term2},Bytes2}.

'enc_RACH-ConfigCommon_ra-SupervisionInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= n3 ->
<<0:4>>;
Enc1@input =:= n4 ->
<<1:4>>;
Enc1@input =:= n5 ->
<<2:4>>;
Enc1@input =:= n6 ->
<<3:4>>;
Enc1@input =:= n7 ->
<<4:4>>;
Enc1@input =:= n8 ->
<<5:4>>;
Enc1@input =:= n10 ->
<<6:4>>;
Enc1@input =:= n20 ->
<<7:4>>;
Enc1@input =:= n50 ->
<<8:4>>;
Enc1@input =:= n100 ->
<<9:4>>;
Enc1@input =:= n200 ->
<<10:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= sf2 ->
<<0:3>>;
Enc3@input =:= sf3 ->
<<1:3>>;
Enc3@input =:= sf4 ->
<<2:3>>;
Enc3@input =:= sf5 ->
<<3:3>>;
Enc3@input =:= sf6 ->
<<4:3>>;
Enc3@input =:= sf7 ->
<<5:3>>;
Enc3@input =:= sf8 ->
<<6:3>>;
Enc3@input =:= sf10 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= sf8 ->
<<0:3>>;
Enc5@input =:= sf16 ->
<<1:3>>;
Enc5@input =:= sf24 ->
<<2:3>>;
Enc5@input =:= sf32 ->
<<3:3>>;
Enc5@input =:= sf40 ->
<<4:3>>;
Enc5@input =:= sf48 ->
<<5:3>>;
Enc5@input =:= sf56 ->
<<6:3>>;
Enc5@input =:= sf64 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].

'dec_RACH-ConfigCommon_ra-SupervisionInfo'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> n3;
1 -> n4;
2 -> n5;
3 -> n6;
4 -> n7;
5 -> n8;
6 -> n10;
7 -> n20;
8 -> n50;
9 -> n100;
10 -> n200;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[n3,n4,n5,n6,n7,n8,n10,n20,n50,n100,n200]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> sf2;
1 -> sf3;
2 -> sf4;
3 -> sf5;
4 -> sf6;
5 -> sf7;
6 -> sf8;
7 -> sf10
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> sf8;
1 -> sf16;
2 -> sf24;
3 -> sf32;
4 -> sf40;
5 -> sf48;
6 -> sf56;
7 -> sf64
end,
{V3@Int2,V3@Buf1}
end,
{{'RACH-ConfigCommon_ra-SupervisionInfo',Term1,Term2,Term3},Bytes3}.



'dec_RACH-ConfigCommon'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = 'dec_RACH-ConfigCommon_preambleInfo'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_RACH-ConfigCommon_powerRampingParameters'(Bytes2),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_RACH-ConfigCommon_ra-SupervisionInfo'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes4,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'RACH-ConfigCommon',Term1,Term2,Term3,Term4},Bytes7}.

'enc_UL-ReferenceSignalsPUSCH'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end
end,
begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 30 ->
<<Enc3@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input =:= false ->
<<0:1>>;
Enc5@input =:= true ->
<<1:1>>
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input bsr 3 =:= 0 ->
<<Enc7@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].


'dec_UL-ReferenceSignalsPUSCH'(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
{{'UL-ReferenceSignalsPUSCH',Term1,Term2,Term3,Term4},Bytes4}.

'enc_PUSCH-ConfigDedicated'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 4 =:= 0 ->
<<Enc1@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 4 =:= 0 ->
<<Enc3@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input bsr 4 =:= 0 ->
<<Enc5@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


'dec_PUSCH-ConfigDedicated'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
{{'PUSCH-ConfigDedicated',Term1,Term2,Term3},Bytes3}.

'enc_PUSCH-ConfigCommon'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
'enc_UL-ReferenceSignalsPUSCH'(Enc2@input)
end].
'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 2 =:= 0 ->
<<Enc1@input@sub:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= interSubFrame ->
<<0:1>>;
Enc3@input =:= intraAndInterSubFrame ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if 0 =< Enc5@input, Enc5@input < 99 ->
<<Enc5@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input =:= false ->
<<0:1>>;
Enc7@input =:= true ->
<<1:1>>
end
end].

'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> interSubFrame;
1 -> intraAndInterSubFrame
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:7,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,
{{'PUSCH-ConfigCommon_pusch-ConfigBasic',Term1,Term2,Term3,Term4},Bytes4}.



'dec_PUSCH-ConfigCommon'(Bytes) ->

%% attribute number 1 with type SEQUENCE
{Term1,Bytes1} = 'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(Bytes),

%% attribute number 2 with type UL-ReferenceSignalsPUSCH
{Term2,Bytes2} = 'dec_UL-ReferenceSignalsPUSCH'(Bytes1),
{{'PUSCH-ConfigCommon',Term1,Term2},Bytes2}.

'enc_PUCCH-ConfigDedicated'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input =:= bundling ->
<<0:1>>;
Enc3@input =:= multiplexing ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].
'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(ChoiceVal)]
end.
'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= n2 ->
<<0:2>>;
Enc1@input =:= n4 ->
<<1:2>>;
Enc1@input =:= n6 ->
<<2:2>>;
Enc1@input =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 11 =:= 0 ->
<<Enc3@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> n2;
1 -> n4;
2 -> n6;
3 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'PUCCH-ConfigDedicated_ackNackRepetition_setup',Term1,Term2},Bytes2}.


'dec_PUCCH-ConfigDedicated_ackNackRepetition'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.


'dec_PUCCH-ConfigDedicated'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_PUCCH-ConfigDedicated_ackNackRepetition'(Bytes1),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> bundling;
1 -> multiplexing
end,
{V2@Int2,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'PUCCH-ConfigDedicated',Term1,Term2},Bytes3}.

'enc_PUCCH-ConfigCommon'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= ds1 ->
<<0:2>>;
Enc1@input =:= ds2 ->
<<1:2>>;
Enc1@input =:= ds3 ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 99 ->
<<Enc3@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input bsr 3 =:= 0 ->
<<Enc5@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input bsr 11 =:= 0 ->
<<Enc7@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].


'dec_PUCCH-ConfigCommon'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ds1;
1 -> ds2;
2 -> ds3;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[ds1,ds2,ds3]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:11,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
{{'PUCCH-ConfigCommon',Term1,Term2,Term3,Term4},Bytes4}.

'enc_PresenceAntennaPort1'(Val) ->
if Val =:= false ->
<<0:1>>;
Val =:= true ->
<<1:1>>
end.


dec_PresenceAntennaPort1(Bytes) ->
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end.

'enc_PRACH-ConfigInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 6 =:= 0 ->
<<Enc1@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= false ->
<<0:1>>;
Enc3@input =:= true ->
<<1:1>>
end
end,
begin
Enc5@input = element(4, Val),
if Enc5@input bsr 4 =:= 0 ->
<<Enc5@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if 0 =< Enc7@input, Enc7@input < 95 ->
<<Enc7@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].


'dec_PRACH-ConfigInfo'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes4} = begin
<<V4@V0:7,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
{{'PRACH-ConfigInfo',Term1,Term2,Term3,Term4},Bytes4}.

'enc_PRACH-Config'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if 0 =< Enc2@input, Enc2@input < 838 ->
<<Enc2@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PRACH-ConfigInfo'(Enc4@input)
end
end].


'dec_PRACH-Config'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type PRACH-ConfigInfo
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_PRACH-ConfigInfo'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'PRACH-Config',Term1,Term2},Bytes3}.

'enc_PRACH-ConfigSIB'(Val) ->
[begin
Enc1@input = element(2, Val),
if 0 =< Enc1@input, Enc1@input < 838 ->
<<Enc1@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
'enc_PRACH-ConfigInfo'(Enc3@input)
end].


'dec_PRACH-ConfigSIB'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:10,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type PRACH-ConfigInfo
{Term2,Bytes2} = 'dec_PRACH-ConfigInfo'(Bytes1),
{{'PRACH-ConfigSIB',Term1,Term2},Bytes2}.

'enc_P-Max'(Val) ->
Val@sub = Val - -30,
if Val@sub bsr 6 =:= 0 ->
<<Val@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_P-Max'(Bytes) ->
begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -30,
{V1@Add2,V1@Buf1}
end.

'enc_PhysicalConfigDedicated'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(8, Val),
Enc8@input = element(9, Val),
if Enc7@input =:= asn1_NOVALUE ->
if Enc8@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc8@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(10, Val),
Enc10@input = element(11, Val),
if Enc9@input =:= asn1_NOVALUE ->
if Enc10@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc10@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc12@input = element(2, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PDSCH-ConfigDedicated'(Enc12@input)
end
end,
begin
Enc14@input = element(3, Val),
if Enc14@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PUCCH-ConfigDedicated'(Enc14@input)
end
end,
begin
Enc16@input = element(4, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PUSCH-ConfigDedicated'(Enc16@input)
end
end,
begin
Enc18@input = element(5, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_UplinkPowerControlDedicated(Enc18@input)
end
end,
begin
Enc20@input = element(6, Val),
if Enc20@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TPC-PDCCH-Config'(Enc20@input)
end
end,
begin
Enc22@input = element(7, Val),
if Enc22@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TPC-PDCCH-Config'(Enc22@input)
end
end,
begin
Enc24@input = element(8, Val),
if Enc24@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CQI-ReportConfig'(Enc24@input)
end
end,
begin
Enc26@input = element(9, Val),
if Enc26@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SoundingRS-UL-ConfigDedicated'(Enc26@input)
end
end,
begin
Enc28@input = element(10, Val),
if Enc28@input =:= asn1_NOVALUE ->
[];
true ->
enc_PhysicalConfigDedicated_antennaInfo(Enc28@input)
end
end|begin
Enc30@input = element(11, Val),
if Enc30@input =:= asn1_NOVALUE ->
[];
true ->
enc_SchedulingRequestConfig(Enc30@input)
end
end].
'enc_PhysicalConfigDedicated_antennaInfo'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= explicitValue ->
[<<0:1>>|enc_AntennaInfoDedicated(ChoiceVal)];
ChoiceTag =:= defaultValue ->
<<1:1>>
end.

dec_PhysicalConfigDedicated_antennaInfo(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_AntennaInfoDedicated(Bytes1)
end,
{{explicitValue,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{defaultValue,Val},NewBytes}
end.


dec_PhysicalConfigDedicated(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:10,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type PDSCH-ConfigDedicated
{Term1,Bytes3} = case (Opt bsr 9) band 1 of
1 ->
'dec_PDSCH-ConfigDedicated'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type PUCCH-ConfigDedicated
{Term2,Bytes4} = case (Opt bsr 8) band 1 of
1 ->
'dec_PUCCH-ConfigDedicated'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type PUSCH-ConfigDedicated
{Term3,Bytes5} = case (Opt bsr 7) band 1 of
1 ->
'dec_PUSCH-ConfigDedicated'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type UplinkPowerControlDedicated
{Term4,Bytes6} = case (Opt bsr 6) band 1 of
1 ->
dec_UplinkPowerControlDedicated(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type TPC-PDCCH-Config
{Term5,Bytes7} = case (Opt bsr 5) band 1 of
1 ->
'dec_TPC-PDCCH-Config'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type TPC-PDCCH-Config
{Term6,Bytes8} = case (Opt bsr 4) band 1 of
1 ->
'dec_TPC-PDCCH-Config'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type CQI-ReportConfig
{Term7,Bytes9} = case (Opt bsr 3) band 1 of
1 ->
'dec_CQI-ReportConfig'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% attribute number 8 with type SoundingRS-UL-ConfigDedicated
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
'dec_SoundingRS-UL-ConfigDedicated'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type CHOICE
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
'dec_PhysicalConfigDedicated_antennaInfo'(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SchedulingRequestConfig
{Term10,Bytes12} = case Opt band 1 of
1 ->
dec_SchedulingRequestConfig(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V3@V0,V3@Buf1} = case Bytes12 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
{{'PhysicalConfigDedicated',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_PHICH-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= normal ->
<<0:1>>;
Enc1@input =:= extended ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= oneSixth ->
<<0:2>>;
Enc3@input =:= half ->
<<1:2>>;
Enc3@input =:= one ->
<<2:2>>;
Enc3@input =:= two ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_PHICH-Config'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> normal;
1 -> extended
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> oneSixth;
1 -> half;
2 -> one;
3 -> two
end,
{V2@Int2,V2@Buf1}
end,
{{'PHICH-Config',Term1,Term2},Bytes2}.

'enc_PDSCH-ConfigDedicated'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= 'dB-6' ->
<<0:3>>;
Enc1@input =:= 'dB-4dot77' ->
<<1:3>>;
Enc1@input =:= 'dB-3' ->
<<2:3>>;
Enc1@input =:= 'dB-1dot77' ->
<<3:3>>;
Enc1@input =:= dB0 ->
<<4:3>>;
Enc1@input =:= dB1 ->
<<5:3>>;
Enc1@input =:= dB2 ->
<<6:3>>;
Enc1@input =:= dB3 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.


'dec_PDSCH-ConfigDedicated'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'dB-6';
1 -> 'dB-4dot77';
2 -> 'dB-3';
3 -> 'dB-1dot77';
4 -> dB0;
5 -> dB1;
6 -> dB2;
7 -> dB3
end,
{V1@Int2,V1@Buf1}
end,
{{'PDSCH-ConfigDedicated',Term1},Bytes1}.

'enc_PDSCH-ConfigCommon'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - -60,
if 0 =< Enc1@input@sub, Enc1@input@sub < 111 ->
<<Enc1@input@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 2 =:= 0 ->
<<Enc3@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_PDSCH-ConfigCommon'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:7,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + -60,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'PDSCH-ConfigCommon',Term1,Term2},Bytes2}.

'enc_PDCP-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
Enc5@input =:= ms50 ->
<<0:3>>;
Enc5@input =:= ms100 ->
<<1:3>>;
Enc5@input =:= ms150 ->
<<2:3>>;
Enc5@input =:= ms300 ->
<<3:3>>;
Enc5@input =:= ms500 ->
<<4:3>>;
Enc5@input =:= ms750 ->
<<5:3>>;
Enc5@input =:= ms1500 ->
<<6:3>>;
Enc5@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PDCP-Config_rlc-AM'(Enc8@input)
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PDCP-Config_rlc-UM'(Enc10@input)
end
end|begin
Enc12@input = element(5, Val),
'enc_PDCP-Config_headerCompression'(Enc12@input)
end].
'enc_PDCP-Config_rlc-AM'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= false ->
<<0:1>>;
Enc1@input =:= true ->
<<1:1>>
end.

'dec_PDCP-Config_rlc-AM'(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,
{{'PDCP-Config_rlc-AM',Term1},Bytes1}.

'enc_PDCP-Config_rlc-UM'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= len7bits ->
<<0:1>>;
Enc1@input =:= len12bits ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.

'dec_PDCP-Config_rlc-UM'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> len7bits;
1 -> len12bits
end,
{V1@Int2,V1@Buf1}
end,
{{'PDCP-Config_rlc-UM',Term1},Bytes1}.

'enc_PDCP-Config_headerCompression'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= notUsed ->
<<0:1>>;
ChoiceTag =:= rohc ->
[<<1:1>>|'enc_PDCP-Config_headerCompression_rohc'(ChoiceVal)]
end.
'enc_PDCP-Config_headerCompression_rohc'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_DEFAULT ->
<<0:1,0:1>>;
Enc1@input =:= 15 ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_DEFAULT ->
[];
Enc3@input =:= 15 ->
[];
true ->
begin
Enc3@input@sub = Enc3@input - 1,
if 0 =< Enc3@input@sub, Enc3@input@sub < 16383 ->
<<Enc3@input@sub:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end
end
end|begin
Enc6@input = element(3, Val),
'enc_PDCP-Config_headerCompression_rohc_profiles'(Enc6@input)
end].
'enc_PDCP-Config_headerCompression_rohc_profiles'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc3@input = element(3, Val),
if Enc1@input =:= false ->
if Enc3@input =:= false ->
<<0:1,0:1>>;
Enc3@input =:= true ->
<<0:1,1:1>>
end;
Enc1@input =:= true ->
if Enc3@input =:= false ->
<<1:1,0:1>>;
Enc3@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(4, Val),
Enc7@input = element(5, Val),
if Enc5@input =:= false ->
if Enc7@input =:= false ->
<<0:1,0:1>>;
Enc7@input =:= true ->
<<0:1,1:1>>
end;
Enc5@input =:= true ->
if Enc7@input =:= false ->
<<1:1,0:1>>;
Enc7@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc9@input = element(6, Val),
Enc11@input = element(7, Val),
if Enc9@input =:= false ->
if Enc11@input =:= false ->
<<0:1,0:1>>;
Enc11@input =:= true ->
<<0:1,1:1>>
end;
Enc9@input =:= true ->
if Enc11@input =:= false ->
<<1:1,0:1>>;
Enc11@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc13@input = element(8, Val),
Enc15@input = element(9, Val),
if Enc13@input =:= false ->
if Enc15@input =:= false ->
<<0:1,0:1>>;
Enc15@input =:= true ->
<<0:1,1:1>>
end;
Enc13@input =:= true ->
if Enc15@input =:= false ->
<<1:1,0:1>>;
Enc15@input =:= true ->
<<1:1,1:1>>
end
end
end|begin
Enc17@input = element(10, Val),
if Enc17@input =:= false ->
<<0:1>>;
Enc17@input =:= true ->
<<1:1>>
end
end].

'dec_PDCP-Config_headerCompression_rohc_profiles'(Bytes) ->

%% attribute number 1 with type BOOLEAN
{Term1,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> false;
1 -> true
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type BOOLEAN
{Term3,Bytes3} = begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> false;
1 -> true
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes4} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> false;
1 -> true
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type BOOLEAN
{Term7,Bytes7} = begin
<<V7@V0:1,V7@Buf1/bitstring>> = Bytes6,
V7@Int2 = case V7@V0 of
0 -> false;
1 -> true
end,
{V7@Int2,V7@Buf1}
end,

%% attribute number 8 with type BOOLEAN
{Term8,Bytes8} = begin
<<V8@V0:1,V8@Buf1/bitstring>> = Bytes7,
V8@Int2 = case V8@V0 of
0 -> false;
1 -> true
end,
{V8@Int2,V8@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes9} = begin
<<V9@V0:1,V9@Buf1/bitstring>> = Bytes8,
V9@Int2 = case V9@V0 of
0 -> false;
1 -> true
end,
{V9@Int2,V9@Buf1}
end,
{{'PDCP-Config_headerCompression_rohc_profiles',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes9}.


'dec_PDCP-Config_headerCompression_rohc'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{15,Bytes2}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = 'dec_PDCP-Config_headerCompression_rohc_profiles'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'PDCP-Config_headerCompression_rohc',Term1,Term2},Bytes6}.


'dec_PDCP-Config_headerCompression'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{notUsed,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_PDCP-Config_headerCompression_rohc'(Bytes1)
end,
{{rohc,Val},NewBytes}
end.


'dec_PDCP-Config'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms300;
4 -> ms500;
5 -> ms750;
6 -> ms1500;
7 -> infinity
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_PDCP-Config_rlc-AM'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_PDCP-Config_rlc-UM'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes6} = 'dec_PDCP-Config_headerCompression'(Bytes5),

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'PDCP-Config',Term1,Term2,Term3,Term4},Bytes8}.

'enc_DRX-Config'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_DRX-Config_setup'(ChoiceVal)]
end.
'enc_DRX-Config_setup'(Val) ->
[begin
Enc1@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= psf1 ->
<<0:4>>;
Enc2@input =:= psf2 ->
<<1:4>>;
Enc2@input =:= psf3 ->
<<2:4>>;
Enc2@input =:= psf4 ->
<<3:4>>;
Enc2@input =:= psf5 ->
<<4:4>>;
Enc2@input =:= psf6 ->
<<5:4>>;
Enc2@input =:= psf8 ->
<<6:4>>;
Enc2@input =:= psf10 ->
<<7:4>>;
Enc2@input =:= psf20 ->
<<8:4>>;
Enc2@input =:= psf30 ->
<<9:4>>;
Enc2@input =:= psf40 ->
<<10:4>>;
Enc2@input =:= psf50 ->
<<11:4>>;
Enc2@input =:= psf60 ->
<<12:4>>;
Enc2@input =:= psf80 ->
<<13:4>>;
Enc2@input =:= psf100 ->
<<14:4>>;
Enc2@input =:= psf200 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= psf1 ->
<<0:5>>;
Enc4@input =:= psf2 ->
<<1:5>>;
Enc4@input =:= psf3 ->
<<2:5>>;
Enc4@input =:= psf4 ->
<<3:5>>;
Enc4@input =:= psf5 ->
<<4:5>>;
Enc4@input =:= psf6 ->
<<5:5>>;
Enc4@input =:= psf8 ->
<<6:5>>;
Enc4@input =:= psf10 ->
<<7:5>>;
Enc4@input =:= psf20 ->
<<8:5>>;
Enc4@input =:= psf30 ->
<<9:5>>;
Enc4@input =:= psf40 ->
<<10:5>>;
Enc4@input =:= psf50 ->
<<11:5>>;
Enc4@input =:= psf60 ->
<<12:5>>;
Enc4@input =:= psf80 ->
<<13:5>>;
Enc4@input =:= psf100 ->
<<14:5>>;
Enc4@input =:= psf200 ->
<<15:5>>;
Enc4@input =:= psf300 ->
<<16:5>>;
Enc4@input =:= psf500 ->
<<17:5>>;
Enc4@input =:= psf750 ->
<<18:5>>;
Enc4@input =:= psf1280 ->
<<19:5>>;
Enc4@input =:= psf1920 ->
<<20:5>>;
Enc4@input =:= psf2560 ->
<<21:5>>;
Enc4@input =:= spare10 ->
<<22:5>>;
Enc4@input =:= spare9 ->
<<23:5>>;
Enc4@input =:= spare8 ->
<<24:5>>;
Enc4@input =:= spare7 ->
<<25:5>>;
Enc4@input =:= spare6 ->
<<26:5>>;
Enc4@input =:= spare5 ->
<<27:5>>;
Enc4@input =:= spare4 ->
<<28:5>>;
Enc4@input =:= spare3 ->
<<29:5>>;
Enc4@input =:= spare2 ->
<<30:5>>;
Enc4@input =:= spare1 ->
<<31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(4, Val),
if Enc6@input =:= psf1 ->
<<0:3>>;
Enc6@input =:= psf2 ->
<<1:3>>;
Enc6@input =:= psf4 ->
<<2:3>>;
Enc6@input =:= psf6 ->
<<3:3>>;
Enc6@input =:= psf8 ->
<<4:3>>;
Enc6@input =:= psf16 ->
<<5:3>>;
Enc6@input =:= psf24 ->
<<6:3>>;
Enc6@input =:= psf33 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(5, Val),
'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Enc8@input)
end|begin
Enc9@input = element(6, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_DRX-Config_setup_shortDRX'(Enc9@input)
end
end].
'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sf10 ->
if 0 =< ChoiceVal, ChoiceVal < 10 ->
<<0:4,ChoiceVal:4>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf20 ->
if 0 =< ChoiceVal, ChoiceVal < 20 ->
<<1:4,ChoiceVal:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf32 ->
if ChoiceVal bsr 5 =:= 0 ->
<<2:4,ChoiceVal:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf40 ->
if 0 =< ChoiceVal, ChoiceVal < 40 ->
<<3:4,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf64 ->
if ChoiceVal bsr 6 =:= 0 ->
<<4:4,ChoiceVal:6>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf80 ->
if 0 =< ChoiceVal, ChoiceVal < 80 ->
<<5:4,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf128 ->
if ChoiceVal bsr 7 =:= 0 ->
<<6:4,ChoiceVal:7>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf160 ->
if 0 =< ChoiceVal, ChoiceVal < 160 ->
[<<7:4>>,
ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf256 ->
if ChoiceVal bsr 8 =:= 0 ->
[<<8:4>>,
ChoiceVal];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf320 ->
if 0 =< ChoiceVal, ChoiceVal < 320 ->
<<9:4,ChoiceVal:9>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf512 ->
if ChoiceVal bsr 9 =:= 0 ->
<<10:4,ChoiceVal:9>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf640 ->
if 0 =< ChoiceVal, ChoiceVal < 640 ->
<<11:4,ChoiceVal:10>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf1024 ->
if ChoiceVal bsr 10 =:= 0 ->
<<12:4,ChoiceVal:10>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf1280 ->
if 0 =< ChoiceVal, ChoiceVal < 1280 ->
<<13:4,ChoiceVal:11>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf2048 ->
if ChoiceVal bsr 11 =:= 0 ->
<<14:4,ChoiceVal:11>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= sf2560 ->
if 0 =< ChoiceVal, ChoiceVal < 2560 ->
<<15:4,ChoiceVal:12>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

'dec_DRX-Config_setup_longDRX-CycleStartOffset'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{sf10,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes1,
{V3@V0,V3@Buf1}
end
end,
{{sf20,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes1,
{V4@V0,V4@Buf1}
end
end,
{{sf32,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes1,
{V5@V0,V5@Buf1}
end
end,
{{sf40,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes1,
{V6@V0,V6@Buf1}
end
end,
{{sf64,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:7,V7@Buf1/bitstring>> = Bytes1,
{V7@V0,V7@Buf1}
end
end,
{{sf80,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:7,V8@Buf1/bitstring>> = Bytes1,
{V8@V0,V8@Buf1}
end
end,
{{sf128,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
<<V9@V0:8,V9@Buf1/bitstring>> = Bytes1,
{V9@V0,V9@Buf1}
end
end,
{{sf160,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
begin
<<V10@V0:8,V10@Buf1/bitstring>> = Bytes1,
{V10@V0,V10@Buf1}
end
end,
{{sf256,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
<<V11@V0:9,V11@Buf1/bitstring>> = Bytes1,
{V11@V0,V11@Buf1}
end
end,
{{sf320,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
<<V12@V0:9,V12@Buf1/bitstring>> = Bytes1,
{V12@V0,V12@Buf1}
end
end,
{{sf512,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
<<V13@V0:10,V13@Buf1/bitstring>> = Bytes1,
{V13@V0,V13@Buf1}
end
end,
{{sf640,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
<<V14@V0:10,V14@Buf1/bitstring>> = Bytes1,
{V14@V0,V14@Buf1}
end
end,
{{sf1024,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
<<V15@V0:11,V15@Buf1/bitstring>> = Bytes1,
{V15@V0,V15@Buf1}
end
end,
{{sf1280,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
begin
<<V16@V0:11,V16@Buf1/bitstring>> = Bytes1,
{V16@V0,V16@Buf1}
end
end,
{{sf2048,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
begin
<<V17@V0:12,V17@Buf1/bitstring>> = Bytes1,
{V17@V0,V17@Buf1}
end
end,
{{sf2560,Val},NewBytes}
end.
'enc_DRX-Config_setup_shortDRX'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= sf2 ->
<<0:4>>;
Enc1@input =:= sf5 ->
<<1:4>>;
Enc1@input =:= sf8 ->
<<2:4>>;
Enc1@input =:= sf10 ->
<<3:4>>;
Enc1@input =:= sf16 ->
<<4:4>>;
Enc1@input =:= sf20 ->
<<5:4>>;
Enc1@input =:= sf32 ->
<<6:4>>;
Enc1@input =:= sf40 ->
<<7:4>>;
Enc1@input =:= sf64 ->
<<8:4>>;
Enc1@input =:= sf80 ->
<<9:4>>;
Enc1@input =:= sf128 ->
<<10:4>>;
Enc1@input =:= sf160 ->
<<11:4>>;
Enc1@input =:= sf256 ->
<<12:4>>;
Enc1@input =:= sf320 ->
<<13:4>>;
Enc1@input =:= sf512 ->
<<14:4>>;
Enc1@input =:= sf640 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
Enc3@input@sub = Enc3@input - 1,
if Enc3@input@sub bsr 4 =:= 0 ->
<<Enc3@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

'dec_DRX-Config_setup_shortDRX'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> sf2;
1 -> sf5;
2 -> sf8;
3 -> sf10;
4 -> sf16;
5 -> sf20;
6 -> sf32;
7 -> sf40;
8 -> sf64;
9 -> sf80;
10 -> sf128;
11 -> sf160;
12 -> sf256;
13 -> sf320;
14 -> sf512;
15 -> sf640
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,
{{'DRX-Config_setup_shortDRX',Term1,Term2},Bytes2}.


'dec_DRX-Config_setup'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> psf1;
1 -> psf2;
2 -> psf3;
3 -> psf4;
4 -> psf5;
5 -> psf6;
6 -> psf8;
7 -> psf10;
8 -> psf20;
9 -> psf30;
10 -> psf40;
11 -> psf50;
12 -> psf60;
13 -> psf80;
14 -> psf100;
15 -> psf200
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> psf1;
1 -> psf2;
2 -> psf3;
3 -> psf4;
4 -> psf5;
5 -> psf6;
6 -> psf8;
7 -> psf10;
8 -> psf20;
9 -> psf30;
10 -> psf40;
11 -> psf50;
12 -> psf60;
13 -> psf80;
14 -> psf100;
15 -> psf200;
16 -> psf300;
17 -> psf500;
18 -> psf750;
19 -> psf1280;
20 -> psf1920;
21 -> psf2560;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> psf1;
1 -> psf2;
2 -> psf4;
3 -> psf6;
4 -> psf8;
5 -> psf16;
6 -> psf24;
7 -> psf33
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes5} = 'dec_DRX-Config_setup_longDRX-CycleStartOffset'(Bytes4),

%% attribute number 5 with type SEQUENCE
{Term5,Bytes6} = case Opt band 1 of
1 ->
'dec_DRX-Config_setup_shortDRX'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,
{{'DRX-Config_setup',Term1,Term2,Term3,Term4,Term5},Bytes6}.



'dec_DRX-Config'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_DRX-Config_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_MAC-MainConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MAC-MainConfig_ul-SCH-Config'(Enc5@input)
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_DRX-Config'(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= sf500 ->
<<0:3>>;
Enc9@input =:= sf750 ->
<<1:3>>;
Enc9@input =:= sf1280 ->
<<2:3>>;
Enc9@input =:= sf1920 ->
<<3:3>>;
Enc9@input =:= sf2560 ->
<<4:3>>;
Enc9@input =:= sf5120 ->
<<5:3>>;
Enc9@input =:= sf10240 ->
<<6:3>>;
Enc9@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MAC-MainConfig_phr-Config'(Enc11@input)
end
end].
'enc_MAC-MainConfig_ul-SCH-Config'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input =:= n1 ->
<<0:4>>;
Enc3@input =:= n2 ->
<<1:4>>;
Enc3@input =:= n3 ->
<<2:4>>;
Enc3@input =:= n4 ->
<<3:4>>;
Enc3@input =:= n5 ->
<<4:4>>;
Enc3@input =:= n6 ->
<<5:4>>;
Enc3@input =:= n7 ->
<<6:4>>;
Enc3@input =:= n8 ->
<<7:4>>;
Enc3@input =:= n10 ->
<<8:4>>;
Enc3@input =:= n12 ->
<<9:4>>;
Enc3@input =:= n16 ->
<<10:4>>;
Enc3@input =:= n20 ->
<<11:4>>;
Enc3@input =:= n24 ->
<<12:4>>;
Enc3@input =:= n28 ->
<<13:4>>;
Enc3@input =:= spare2 ->
<<14:4>>;
Enc3@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
Enc6@input =:= sf5 ->
<<0:4>>;
Enc6@input =:= sf10 ->
<<1:4>>;
Enc6@input =:= sf16 ->
<<2:4>>;
Enc6@input =:= sf20 ->
<<3:4>>;
Enc6@input =:= sf32 ->
<<4:4>>;
Enc6@input =:= sf40 ->
<<5:4>>;
Enc6@input =:= sf64 ->
<<6:4>>;
Enc6@input =:= sf80 ->
<<7:4>>;
Enc6@input =:= sf128 ->
<<8:4>>;
Enc6@input =:= sf160 ->
<<9:4>>;
Enc6@input =:= sf320 ->
<<10:4>>;
Enc6@input =:= sf640 ->
<<11:4>>;
Enc6@input =:= sf1280 ->
<<12:4>>;
Enc6@input =:= sf2560 ->
<<13:4>>;
Enc6@input =:= infinity ->
<<14:4>>;
Enc6@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= sf320 ->
<<0:3>>;
Enc9@input =:= sf640 ->
<<1:3>>;
Enc9@input =:= sf1280 ->
<<2:3>>;
Enc9@input =:= sf2560 ->
<<3:3>>;
Enc9@input =:= sf5120 ->
<<4:3>>;
Enc9@input =:= sf10240 ->
<<5:3>>;
Enc9@input =:= spare2 ->
<<6:3>>;
Enc9@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(5, Val),
if Enc11@input =:= false ->
<<0:1>>;
Enc11@input =:= true ->
<<1:1>>
end
end].

'dec_MAC-MainConfig_ul-SCH-Config'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> n1;
1 -> n2;
2 -> n3;
3 -> n4;
4 -> n5;
5 -> n6;
6 -> n7;
7 -> n8;
8 -> n10;
9 -> n12;
10 -> n16;
11 -> n20;
12 -> n24;
13 -> n28;
14 -> spare2;
15 -> spare1
end,
{V2@Int2,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> sf5;
1 -> sf10;
2 -> sf16;
3 -> sf20;
4 -> sf32;
5 -> sf40;
6 -> sf64;
7 -> sf80;
8 -> sf128;
9 -> sf160;
10 -> sf320;
11 -> sf640;
12 -> sf1280;
13 -> sf2560;
14 -> infinity;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> sf320;
1 -> sf640;
2 -> sf1280;
3 -> sf2560;
4 -> sf5120;
5 -> sf10240;
6 -> spare2;
7 -> spare1
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type BOOLEAN
{Term4,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,
{{'MAC-MainConfig_ul-SCH-Config',Term1,Term2,Term3,Term4},Bytes5}.

'enc_MAC-MainConfig_phr-Config'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_MAC-MainConfig_phr-Config_setup'(ChoiceVal)]
end.
'enc_MAC-MainConfig_phr-Config_setup'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= sf10 ->
<<0:3>>;
Enc1@input =:= sf20 ->
<<1:3>>;
Enc1@input =:= sf50 ->
<<2:3>>;
Enc1@input =:= sf100 ->
<<3:3>>;
Enc1@input =:= sf200 ->
<<4:3>>;
Enc1@input =:= sf500 ->
<<5:3>>;
Enc1@input =:= sf1000 ->
<<6:3>>;
Enc1@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= sf0 ->
<<0:3>>;
Enc3@input =:= sf10 ->
<<1:3>>;
Enc3@input =:= sf20 ->
<<2:3>>;
Enc3@input =:= sf50 ->
<<3:3>>;
Enc3@input =:= sf100 ->
<<4:3>>;
Enc3@input =:= sf200 ->
<<5:3>>;
Enc3@input =:= sf500 ->
<<6:3>>;
Enc3@input =:= sf1000 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= dB1 ->
<<0:2>>;
Enc5@input =:= dB3 ->
<<1:2>>;
Enc5@input =:= dB6 ->
<<2:2>>;
Enc5@input =:= infinity ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].

'dec_MAC-MainConfig_phr-Config_setup'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> sf10;
1 -> sf20;
2 -> sf50;
3 -> sf100;
4 -> sf200;
5 -> sf500;
6 -> sf1000;
7 -> infinity
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> sf0;
1 -> sf10;
2 -> sf20;
3 -> sf50;
4 -> sf100;
5 -> sf200;
6 -> sf500;
7 -> sf1000
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes3} = begin
<<V3@V0:2,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> dB1;
1 -> dB3;
2 -> dB6;
3 -> infinity
end,
{V3@Int2,V3@Buf1}
end,
{{'MAC-MainConfig_phr-Config_setup',Term1,Term2,Term3},Bytes3}.


'dec_MAC-MainConfig_phr-Config'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MAC-MainConfig_phr-Config_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.


'dec_MAC-MainConfig'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
'dec_MAC-MainConfig_ul-SCH-Config'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type DRX-Config
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_DRX-Config'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes4,
V3@Int2 = case V3@V0 of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 4 with type CHOICE
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_MAC-MainConfig_phr-Config'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'MAC-MainConfig',Term1,Term2,Term3,Term4},Bytes8}.

'enc_LogicalChannelConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_LogicalChannelConfig_ul-SpecificParameters'(Enc3@input)
end
end].
'enc_LogicalChannelConfig_ul-SpecificParameters'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1,
if Enc2@input@sub bsr 4 =:= 0 ->
<<Enc2@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= kBps0 ->
<<0:4>>;
Enc4@input =:= kBps8 ->
<<1:4>>;
Enc4@input =:= kBps16 ->
<<2:4>>;
Enc4@input =:= kBps32 ->
<<3:4>>;
Enc4@input =:= kBps64 ->
<<4:4>>;
Enc4@input =:= kBps128 ->
<<5:4>>;
Enc4@input =:= kBps256 ->
<<6:4>>;
Enc4@input =:= infinity ->
<<7:4>>;
Enc4@input =:= spare8 ->
<<8:4>>;
Enc4@input =:= spare7 ->
<<9:4>>;
Enc4@input =:= spare6 ->
<<10:4>>;
Enc4@input =:= spare5 ->
<<11:4>>;
Enc4@input =:= spare4 ->
<<12:4>>;
Enc4@input =:= spare3 ->
<<13:4>>;
Enc4@input =:= spare2 ->
<<14:4>>;
Enc4@input =:= spare1 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(4, Val),
if Enc6@input =:= ms50 ->
<<0:3>>;
Enc6@input =:= ms100 ->
<<1:3>>;
Enc6@input =:= ms150 ->
<<2:3>>;
Enc6@input =:= ms300 ->
<<3:3>>;
Enc6@input =:= ms500 ->
<<4:3>>;
Enc6@input =:= ms1000 ->
<<5:3>>;
Enc6@input =:= spare2 ->
<<6:3>>;
Enc6@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
Enc8@input bsr 2 =:= 0 ->
<<Enc8@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end].

'dec_LogicalChannelConfig_ul-SpecificParameters'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> kBps0;
1 -> kBps8;
2 -> kBps16;
3 -> kBps32;
4 -> kBps64;
5 -> kBps128;
6 -> kBps256;
7 -> infinity;
8 -> spare8;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> ms50;
1 -> ms100;
2 -> ms150;
3 -> ms300;
4 -> ms500;
5 -> ms1000;
6 -> spare2;
7 -> spare1
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:2,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'LogicalChannelConfig_ul-SpecificParameters',Term1,Term2,Term3,Term4},Bytes5}.



dec_LogicalChannelConfig(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case Opt band 1 of
1 ->
'dec_LogicalChannelConfig_ul-SpecificParameters'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'LogicalChannelConfig',Term1},Bytes5}.

'enc_DRB-Identity'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 5 =:= 0 ->
<<Val@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DRB-Identity'(Bytes) ->
begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end.

'enc_CQI-ReportPeriodic'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
[<<1:1>>|'enc_CQI-ReportPeriodic_setup'(ChoiceVal)]
end.
'enc_CQI-ReportPeriodic_setup'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if 0 =< Enc2@input, Enc2@input < 1186 ->
<<Enc2@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input bsr 10 =:= 0 ->
<<Enc4@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(4, Val),
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Enc6@input)
end,
begin
Enc7@input = element(5, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input bsr 10 =:= 0 ->
<<Enc7@input:10>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end|begin
Enc10@input = element(6, Val),
if Enc10@input =:= false ->
<<0:1>>;
Enc10@input =:= true ->
<<1:1>>
end
end].
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= widebandCQI ->
<<0:1>>;
ChoiceTag =:= subbandCQI ->
[<<1:1>>|'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(ChoiceVal)]
end.
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Val) ->
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 2 =:= 0 ->
<<Enc1@input@sub:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.

'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,
{{'CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI',Term1},Bytes1}.


'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{widebandCQI,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Bytes1)
end,
{{subbandCQI,Val},NewBytes}
end.

'dec_CQI-ReportPeriodic_setup'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:11,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:10,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Bytes3),

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V4@V0:10,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> false;
1 -> true
end,
{V5@Int2,V5@Buf1}
end,
{{'CQI-ReportPeriodic_setup',Term1,Term2,Term3,Term4,Term5},Bytes6}.



'dec_CQI-ReportPeriodic'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CQI-ReportPeriodic_setup'(Bytes1)
end,
{{setup,Val},NewBytes}
end.
'enc_CQI-ReportConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input =:= rm12 ->
<<0:3>>;
Enc3@input =:= rm20 ->
<<1:3>>;
Enc3@input =:= rm22 ->
<<2:3>>;
Enc3@input =:= rm30 ->
<<3:3>>;
Enc3@input =:= rm31 ->
<<4:3>>;
Enc3@input =:= spare3 ->
<<5:3>>;
Enc3@input =:= spare2 ->
<<6:3>>;
Enc3@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc6@input = element(3, Val),
Enc6@input@sub = Enc6@input - -1,
if Enc6@input@sub bsr 3 =:= 0 ->
<<Enc6@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end|begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CQI-ReportPeriodic'(Enc8@input)
end
end].


'dec_CQI-ReportConfig'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> rm12;
1 -> rm20;
2 -> rm22;
3 -> rm30;
4 -> rm31;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V2@Int2,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 3 with type CQI-ReportPeriodic
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_CQI-ReportPeriodic'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'CQI-ReportConfig',Term1,Term2,Term3},Bytes4}.

'enc_AntennaInfoDedicated'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= tm1 ->
<<0:3>>;
Enc2@input =:= tm2 ->
<<1:3>>;
Enc2@input =:= tm3 ->
<<2:3>>;
Enc2@input =:= tm4 ->
<<3:3>>;
Enc2@input =:= tm5 ->
<<4:3>>;
Enc2@input =:= tm6 ->
<<5:3>>;
Enc2@input =:= tm7 ->
<<6:3>>;
Enc2@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_AntennaInfoDedicated_codebookSubsetRestriction(Enc4@input)
end
end|begin
Enc6@input = element(4, Val),
'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Enc6@input)
end].
'enc_AntennaInfoDedicated_codebookSubsetRestriction'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'n2TxAntenna-tm3' ->
begin
Enc2@bs = to_bitstring(ChoiceVal, 2),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 2 ->
[<<0:3>>|Enc2@bs]
end
end;
ChoiceTag =:= 'n4TxAntenna-tm3' ->
begin
Enc4@bs = to_bitstring(ChoiceVal, 4),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 4 ->
[<<1:3>>|Enc4@bs]
end
end;
ChoiceTag =:= 'n2TxAntenna-tm4' ->
begin
Enc6@bs = to_bitstring(ChoiceVal, 6),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 6 ->
[<<2:3>>|Enc6@bs]
end
end;
ChoiceTag =:= 'n4TxAntenna-tm4' ->
begin
Enc8@bs = to_bitstring(ChoiceVal, 64),
Enc8@bits = bit_size(Enc8@bs),
if Enc8@bits =:= 64 ->
[<<3:3>>|Enc8@bs]
end
end;
ChoiceTag =:= 'n2TxAntenna-tm5' ->
begin
Enc10@bs = to_bitstring(ChoiceVal, 4),
Enc10@bits = bit_size(Enc10@bs),
if Enc10@bits =:= 4 ->
[<<4:3>>|Enc10@bs]
end
end;
ChoiceTag =:= 'n4TxAntenna-tm5' ->
begin
Enc12@bs = to_bitstring(ChoiceVal, 16),
Enc12@bits = bit_size(Enc12@bs),
if Enc12@bits =:= 16 ->
[<<5:3>>|Enc12@bs]
end
end;
ChoiceTag =:= 'n2TxAntenna-tm6' ->
begin
Enc14@bs = to_bitstring(ChoiceVal, 4),
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 4 ->
[<<6:3>>|Enc14@bs]
end
end;
ChoiceTag =:= 'n4TxAntenna-tm6' ->
begin
Enc16@bs = to_bitstring(ChoiceVal, 16),
Enc16@bits = bit_size(Enc16@bs),
if Enc16@bits =:= 16 ->
[<<7:3>>|Enc16@bs]
end
end
end.

dec_AntennaInfoDedicated_codebookSubsetRestriction(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:2/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end
end,
{{'n2TxAntenna-tm3',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:4/binary-unit:1,V3@Buf1/bitstring>> = Bytes1,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end
end,
{{'n4TxAntenna-tm3',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V4@V0:6/binary-unit:1,V4@Buf1/bitstring>> = Bytes1,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end
end,
{{'n2TxAntenna-tm4',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V5@V0:64/binary-unit:1,V5@Buf1/bitstring>> = Bytes1,
{V5@V2,V5@Buf3}  = {decode_compact_bit_string(V5@V0),V5@Buf1},
{V5@V2,V5@Buf3}
end
end,
{{'n4TxAntenna-tm4',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
<<V6@V0:4/binary-unit:1,V6@Buf1/bitstring>> = Bytes1,
{V6@V2,V6@Buf3}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V2,V6@Buf3}
end
end,
{{'n2TxAntenna-tm5',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
<<V7@V0:16/binary-unit:1,V7@Buf1/bitstring>> = Bytes1,
{V7@V2,V7@Buf3}  = {decode_compact_bit_string(V7@V0),V7@Buf1},
{V7@V2,V7@Buf3}
end
end,
{{'n4TxAntenna-tm5',Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
<<V8@V0:4/binary-unit:1,V8@Buf1/bitstring>> = Bytes1,
{V8@V2,V8@Buf3}  = {decode_compact_bit_string(V8@V0),V8@Buf1},
{V8@V2,V8@Buf3}
end
end,
{{'n2TxAntenna-tm6',Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
<<V9@V0:16/binary-unit:1,V9@Buf1/bitstring>> = Bytes1,
{V9@V2,V9@Buf3}  = {decode_compact_bit_string(V9@V0),V9@Buf1},
{V9@V2,V9@Buf3}
end
end,
{{'n4TxAntenna-tm6',Val},NewBytes}
end.
'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= release ->
<<0:1>>;
ChoiceTag =:= setup ->
if ChoiceVal =:= closedLoop ->
<<1:1,0:1>>;
ChoiceVal =:= openLoop ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.

'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{release,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:1,V3@Buf1/bitstring>> = Bytes1,
V3@Int2 = case V3@V0 of
0 -> closedLoop;
1 -> openLoop
end,
{V3@Int2,V3@Buf1}
end
end,
{{setup,Val},NewBytes}
end.


dec_AntennaInfoDedicated(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> tm1;
1 -> tm2;
2 -> tm3;
3 -> tm4;
4 -> tm5;
5 -> tm6;
6 -> tm7;
7 -> spare1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_AntennaInfoDedicated_codebookSubsetRestriction'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes4} = 'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Bytes3),
{{'AntennaInfoDedicated',Term1,Term2,Term3},Bytes4}.

'enc_AntennaInfoCommon'(Val) ->
Enc1@input = element(2, Val),
if Enc1@input =:= an1 ->
<<0:2>>;
Enc1@input =:= an2 ->
<<1:2>>;
Enc1@input =:= an4 ->
<<2:2>>;
Enc1@input =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end.


dec_AntennaInfoCommon(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> an1;
1 -> an2;
2 -> an4;
3 -> spare1
end,
{V1@Int2,V1@Buf1}
end,
{{'AntennaInfoCommon',Term1},Bytes1}.

'enc_SystemInformationBlockType11'(Val) ->
[begin
Enc1@input = element(7, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
Enc4@bs
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bs = to_bitstring(Enc5@input, 16),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
Enc6@bs
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= notLastSegment ->
<<0:1>>;
Enc7@input =:= lastSegment ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
if Enc9@input bsr 6 =:= 0 ->
<<Enc9@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end,
begin
Enc11@input = element(6, Val),
Enc12@bin = iolist_to_binary(Enc11@input),
Enc12@len = byte_size(Enc12@bin),
if Enc12@len < 128 ->
[Enc12@len|Enc12@bin];
Enc12@len < 16384 ->
[<<2:2,Enc12@len:14>>|Enc12@bin];
true ->
encode_fragmented(Enc12@bin, 8)
end
end|begin
Enc13@input = element(7, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bin = iolist_to_binary(Enc13@input),
Enc14@len = byte_size(Enc14@bin),
if Enc14@len =:= 1 ->
Enc14@bin
end
end
end
end].


dec_SystemInformationBlockType11(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:16/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> notLastSegment;
1 -> lastSegment
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type OCTET STRING
{Term5,Bytes7} = begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:7,V7@V5:V7@V3/binary-unit:8,V7@Buf6/bitstring>> ->
{V7@V5,V7@Buf6};
<<1:1,0:1,V7@V4:14,V7@V6:V7@V4/binary-unit:8,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,1:1,V7@V4:6,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7}  = decode_fragmented(V7@V4, V7@Buf5, 8),
{V7@V6,V7@Buf7}
end,
V7@Conv8 = binary_to_list(V7@V0),
{V7@Conv8,V7@Buf1}
end,

%% attribute number 6 with type OCTET STRING
{Term6,Bytes8} = case Opt band 1 of
1 ->
begin
<<V8@V0:1/binary-unit:8,V8@Buf1/bitstring>> = Bytes7,
V8@Conv2 = binary_to_list(V8@V0),
{V8@Conv2,V8@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V9:V9@V0/bitstring-unit:1,V9@Buf10/bitstring>> = V9@Buf1,
{V9@V9,V9@Buf10}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'SystemInformationBlockType11',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_SystemInformationBlockType10'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
Enc4@bs
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bs = to_bitstring(Enc5@input, 16),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
Enc6@bs
end
end,
begin
Enc7@input = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@input),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 2 ->
Enc8@bin
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@bin = iolist_to_binary(Enc9@input),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len =:= 50 ->
Enc10@bin
end
end
end
end].


dec_SystemInformationBlockType10(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:16/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V5@V0:2/binary-unit:8,V5@Buf1/bitstring>> = Bytes4,
V5@Conv2 = binary_to_list(V5@V0),
{V5@Conv2,V5@Buf1}
end,

%% attribute number 4 with type OCTET STRING
{Term4,Bytes6} = case Opt band 1 of
1 ->
begin
<<V6@V0:50/binary-unit:8,V6@Buf1/bitstring>> = Bytes5,
V6@Conv2 = binary_to_list(V6@V0),
{V6@Conv2,V6@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V9:V7@V0/bitstring-unit:1,V7@Buf10/bitstring>> = V7@Buf1,
{V7@V9,V7@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SystemInformationBlockType10',Term1,Term2,Term3,Term4},Bytes8}.

'enc_SystemInformationBlockType9'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end|begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
Enc4@len@sub = Enc4@len - 1,
if 0 =< Enc4@len@sub, Enc4@len@sub < 48 ->
[<<Enc4@len@sub:6>>|Enc4@bin]
end
end
end
end].


dec_SystemInformationBlockType9(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
<<V3@V3:V3@Add2/binary-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
V3@Conv5 = binary_to_list(V3@V3),
{V3@Conv5,V3@Buf4}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'SystemInformationBlockType9',Term1},Bytes5}.

'enc_BandClassInfoCDMA2000'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= bc0 ->
<<0:1,0:5>>;
Enc3@input =:= bc1 ->
<<0:1,1:5>>;
Enc3@input =:= bc2 ->
<<0:1,2:5>>;
Enc3@input =:= bc3 ->
<<0:1,3:5>>;
Enc3@input =:= bc4 ->
<<0:1,4:5>>;
Enc3@input =:= bc5 ->
<<0:1,5:5>>;
Enc3@input =:= bc6 ->
<<0:1,6:5>>;
Enc3@input =:= bc7 ->
<<0:1,7:5>>;
Enc3@input =:= bc8 ->
<<0:1,8:5>>;
Enc3@input =:= bc9 ->
<<0:1,9:5>>;
Enc3@input =:= bc10 ->
<<0:1,10:5>>;
Enc3@input =:= bc11 ->
<<0:1,11:5>>;
Enc3@input =:= bc12 ->
<<0:1,12:5>>;
Enc3@input =:= bc13 ->
<<0:1,13:5>>;
Enc3@input =:= bc14 ->
<<0:1,14:5>>;
Enc3@input =:= bc15 ->
<<0:1,15:5>>;
Enc3@input =:= bc16 ->
<<0:1,16:5>>;
Enc3@input =:= bc17 ->
<<0:1,17:5>>;
Enc3@input =:= spare14 ->
<<0:1,18:5>>;
Enc3@input =:= spare13 ->
<<0:1,19:5>>;
Enc3@input =:= spare12 ->
<<0:1,20:5>>;
Enc3@input =:= spare11 ->
<<0:1,21:5>>;
Enc3@input =:= spare10 ->
<<0:1,22:5>>;
Enc3@input =:= spare9 ->
<<0:1,23:5>>;
Enc3@input =:= spare8 ->
<<0:1,24:5>>;
Enc3@input =:= spare7 ->
<<0:1,25:5>>;
Enc3@input =:= spare6 ->
<<0:1,26:5>>;
Enc3@input =:= spare5 ->
<<0:1,27:5>>;
Enc3@input =:= spare4 ->
<<0:1,28:5>>;
Enc3@input =:= spare3 ->
<<0:1,29:5>>;
Enc3@input =:= spare2 ->
<<0:1,30:5>>;
Enc3@input =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
Enc5@input bsr 3 =:= 0 ->
<<Enc5@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input bsr 6 =:= 0 ->
<<Enc8@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input bsr 6 =:= 0 ->
<<Enc10@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end].


dec_BandClassInfoCDMA2000(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:5,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<0:1,V3@V9:7,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10};
<<1:1,0:1,V3@V10:14,V3@Buf11/bitstring>> when V3@V10 =/= 0 ->
{V3@V10,V3@Buf11}
end,
<<V3@V12:V3@V6/unit:8,V3@Buf13/bitstring>> = V3@Buf7,
{V3@V12,V3@Buf13}
end,
V3@Int14 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int14,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:6,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:7,V7@Buf7/bitstring>> when V7@V6 =/= 0 ->
{V7@V6,V7@Buf7};
<<1:1,0:1,V7@V7:14,V7@Buf8/bitstring>> when V7@V7 =/= 0 ->
{V7@V7,V7@Buf8}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V9:V7@V0/bitstring-unit:1,V7@Buf10/bitstring>> = V7@Buf1,
{V7@V9,V7@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'BandClassInfoCDMA2000',Term1,Term2,Term3,Term4},Bytes8}.

'enc_BandClassListCDMA2000'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_BandClassInfoCDMA2000(Comp) || Comp <- Val]]
end.



dec_BandClassListCDMA2000(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components38(V1@Add2, V1@Buf1, []).

'enc_PhysCellIdListCDMA2000'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 4 =:= 0 ->
[<<Enc2@len@sub:4>>|[if Comp bsr 9 =:= 0 ->
<<Comp:9>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_PhysCellIdListCDMA2000(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components39(V1@Add2, V1@Buf1, []).

'enc_NeighCellsPerBandclassCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 11 =:= 0 ->
<<Enc1@input:11>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_PhysCellIdListCDMA2000(Enc3@input)
end].


dec_NeighCellsPerBandclassCDMA2000(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:11,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type PhysCellIdListCDMA2000
{Term2,Bytes2} = dec_PhysCellIdListCDMA2000(Bytes1),
{{'NeighCellsPerBandclassCDMA2000',Term1,Term2},Bytes2}.

'enc_NeighCellsPerBandclassListCDMA2000'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_NeighCellsPerBandclassCDMA2000(Comp) || Comp <- Val]]
end.



dec_NeighCellsPerBandclassListCDMA2000(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components40(V1@Add2, V1@Buf1, []).

'enc_NeighCellCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= bc0 ->
<<0:1,0:5>>;
Enc1@input =:= bc1 ->
<<0:1,1:5>>;
Enc1@input =:= bc2 ->
<<0:1,2:5>>;
Enc1@input =:= bc3 ->
<<0:1,3:5>>;
Enc1@input =:= bc4 ->
<<0:1,4:5>>;
Enc1@input =:= bc5 ->
<<0:1,5:5>>;
Enc1@input =:= bc6 ->
<<0:1,6:5>>;
Enc1@input =:= bc7 ->
<<0:1,7:5>>;
Enc1@input =:= bc8 ->
<<0:1,8:5>>;
Enc1@input =:= bc9 ->
<<0:1,9:5>>;
Enc1@input =:= bc10 ->
<<0:1,10:5>>;
Enc1@input =:= bc11 ->
<<0:1,11:5>>;
Enc1@input =:= bc12 ->
<<0:1,12:5>>;
Enc1@input =:= bc13 ->
<<0:1,13:5>>;
Enc1@input =:= bc14 ->
<<0:1,14:5>>;
Enc1@input =:= bc15 ->
<<0:1,15:5>>;
Enc1@input =:= bc16 ->
<<0:1,16:5>>;
Enc1@input =:= bc17 ->
<<0:1,17:5>>;
Enc1@input =:= spare14 ->
<<0:1,18:5>>;
Enc1@input =:= spare13 ->
<<0:1,19:5>>;
Enc1@input =:= spare12 ->
<<0:1,20:5>>;
Enc1@input =:= spare11 ->
<<0:1,21:5>>;
Enc1@input =:= spare10 ->
<<0:1,22:5>>;
Enc1@input =:= spare9 ->
<<0:1,23:5>>;
Enc1@input =:= spare8 ->
<<0:1,24:5>>;
Enc1@input =:= spare7 ->
<<0:1,25:5>>;
Enc1@input =:= spare6 ->
<<0:1,26:5>>;
Enc1@input =:= spare5 ->
<<0:1,27:5>>;
Enc1@input =:= spare4 ->
<<0:1,28:5>>;
Enc1@input =:= spare3 ->
<<0:1,29:5>>;
Enc1@input =:= spare2 ->
<<0:1,30:5>>;
Enc1@input =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_NeighCellsPerBandclassListCDMA2000(Enc3@input)
end].


dec_NeighCellCDMA2000(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type NeighCellsPerBandclassListCDMA2000
{Term2,Bytes2} = dec_NeighCellsPerBandclassListCDMA2000(Bytes1),
{{'NeighCellCDMA2000',Term1,Term2},Bytes2}.

'enc_NeighCellListCDMA2000'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_NeighCellCDMA2000(Comp) || Comp <- Val]]
end.



dec_NeighCellListCDMA2000(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components41(V1@Add2, V1@Buf1, []).

'enc_CellReselectionParametersCDMA2000'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_BandClassListCDMA2000(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
enc_NeighCellListCDMA2000(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
if Enc4@input bsr 3 =:= 0 ->
<<Enc4@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end|begin
Enc6@input = element(5, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedStateScaleFactors(Enc6@input)
end
end].


dec_CellReselectionParametersCDMA2000(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BandClassListCDMA2000
{Term1,Bytes2} = dec_BandClassListCDMA2000(Bytes1),

%% attribute number 2 with type NeighCellListCDMA2000
{Term2,Bytes3} = dec_NeighCellListCDMA2000(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes3,
{V2@V0,V2@Buf1}
end,

%% attribute number 4 with type SpeedStateScaleFactors
{Term4,Bytes5} = case Opt band 1 of
1 ->
dec_SpeedStateScaleFactors(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'CellReselectionParametersCDMA2000',Term1,Term2,Term3,Term4},Bytes5}.

'enc_SystemInformationBlockType8'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_SystemTimeInfoCDMA2000(Enc6@input)
end
end,
begin
Enc8@input = element(3, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
Enc8@input bsr 4 =:= 0 ->
<<Enc8@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_SystemInformationBlockType8_parametersHRPD(Enc11@input)
end
end|begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_SystemInformationBlockType8_parameters1XRTT(Enc13@input)
end
end].
'enc_SystemInformationBlockType8_parametersHRPD'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_PreRegistrationInfoHRPD(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellReselectionParametersCDMA2000(Enc3@input)
end
end].

dec_SystemInformationBlockType8_parametersHRPD(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PreRegistrationInfoHRPD
{Term1,Bytes2} = dec_PreRegistrationInfoHRPD(Bytes1),

%% attribute number 2 with type CellReselectionParametersCDMA2000
{Term2,Bytes3} = case Opt band 1 of
1 ->
dec_CellReselectionParametersCDMA2000(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SystemInformationBlockType8_parametersHRPD',Term1,Term2},Bytes3}.

'enc_SystemInformationBlockType8_parameters1XRTT'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CSFB-RegistrationParam1XRTT'(Enc4@input)
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = to_bitstring(Enc6@input, 42),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 42 ->
Enc7@bs
end
end
end
end|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_CellReselectionParametersCDMA2000(Enc9@input)
end
end].

dec_SystemInformationBlockType8_parameters1XRTT(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CSFB-RegistrationParam1XRTT
{Term1,Bytes2} = case (Opt bsr 2) band 1 of
1 ->
'dec_CSFB-RegistrationParam1XRTT'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:42/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type CellReselectionParametersCDMA2000
{Term3,Bytes4} = case Opt band 1 of
1 ->
dec_CellReselectionParametersCDMA2000(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'SystemInformationBlockType8_parameters1XRTT',Term1,Term2,Term3},Bytes4}.



dec_SystemInformationBlockType8(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SystemTimeInfoCDMA2000
{Term1,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
dec_SystemTimeInfoCDMA2000(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:4,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_SystemInformationBlockType8_parametersHRPD'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_SystemInformationBlockType8_parameters1XRTT'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SystemInformationBlockType8',Term1,Term2,Term3,Term4},Bytes8}.

'enc_CarrierFreqsInfoGERAN'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_CarrierFreqsGERAN(Enc2@input)
end|begin
Enc3@input = element(3, Val),
enc_CarrierFreqsInfoGERAN_commonInfo(Enc3@input)
end].
'enc_CarrierFreqsInfoGERAN_commonInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc6@input = element(3, Val),
Enc7@bs = to_bitstring(Enc6@input, 8),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 8 ->
Enc7@bs
end
end,
begin
Enc8@input = element(4, Val),
if 0 =< Enc8@input, Enc8@input < 46 ->
<<Enc8@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
0 =< Enc10@input, Enc10@input < 40 ->
<<Enc10@input:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc13@input = element(6, Val),
if Enc13@input bsr 5 =:= 0 ->
<<Enc13@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end|begin
Enc15@input = element(7, Val),
if Enc15@input bsr 5 =:= 0 ->
<<Enc15@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@input}}})
end
end].

dec_CarrierFreqsInfoGERAN_commonInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = begin
<<V3@V0:8/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = case Opt band 1 of
1 ->
begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes6} = begin
<<V6@V0:5,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes7} = begin
<<V7@V0:5,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end,
{{'CarrierFreqsInfoGERAN_commonInfo',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.



dec_CarrierFreqsInfoGERAN(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CarrierFreqsGERAN
{Term1,Bytes2} = dec_CarrierFreqsGERAN(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_CarrierFreqsInfoGERAN_commonInfo'(Bytes2),

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V2@V0,V2@Buf1} = case Bytes3 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V9:V2@V0/bitstring-unit:1,V2@Buf10/bitstring>> = V2@Buf1,
{V2@V9,V2@Buf10}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'CarrierFreqsInfoGERAN',Term1,Term2},Bytes5}.

'enc_CarrierFreqsInfoListGERAN'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_CarrierFreqsInfoGERAN(Comp) || Comp <- Val]]
end.



dec_CarrierFreqsInfoListGERAN(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components42(V1@Add2, V1@Buf1, []).

'enc_SystemInformationBlockType7'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input bsr 3 =:= 0 ->
<<Enc4@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedStateScaleFactors(Enc6@input)
end
end|begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_CarrierFreqsInfoListGERAN(Enc8@input)
end
end].


dec_SystemInformationBlockType7(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SpeedStateScaleFactors
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_SpeedStateScaleFactors(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type CarrierFreqsInfoListGERAN
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_CarrierFreqsInfoListGERAN(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SystemInformationBlockType7',Term1,Term2,Term3},Bytes7}.

'enc_CarrierFreqUTRA-TDD'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 14 =:= 0 ->
<<Enc3@input:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
Enc5@input bsr 3 =:= 0 ->
<<Enc5@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input bsr 5 =:= 0 ->
<<Enc8@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(5, Val),
if Enc10@input bsr 5 =:= 0 ->
<<Enc10@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(6, Val),
Enc12@input@sub = Enc12@input - -60,
if 0 =< Enc12@input@sub, Enc12@input@sub < 48 ->
<<Enc12@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end|begin
Enc14@input = element(7, Val),
Enc14@input@sub = Enc14@input - -50,
if 0 =< Enc14@input@sub, Enc14@input@sub < 84 ->
<<Enc14@input@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc14@input}}})
end
end].


'dec_CarrierFreqUTRA-TDD'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:5,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = begin
<<V7@V0:6,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + -60,
{V7@Add2,V7@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V8@V0:7,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + -50,
{V8@Add2,V8@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V9@V0,V9@Buf1} = case Bytes8 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<0:1,V9@V6:7,V9@Buf7/bitstring>> when V9@V6 =/= 0 ->
{V9@V6,V9@Buf7};
<<1:1,0:1,V9@V7:14,V9@Buf8/bitstring>> when V9@V7 =/= 0 ->
{V9@V7,V9@Buf8}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V9:V9@V0/bitstring-unit:1,V9@Buf10/bitstring>> = V9@Buf1,
{V9@V9,V9@Buf10}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'CarrierFreqUTRA-TDD',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_CarrierFreqListUTRA-TDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_CarrierFreqUTRA-TDD'(Comp) || Comp <- Val]]
end.



'dec_CarrierFreqListUTRA-TDD'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components43(V1@Add2, V1@Buf1, []).

'enc_CarrierFreqUTRA-FDD'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 14 =:= 0 ->
<<Enc3@input:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
Enc5@input bsr 3 =:= 0 ->
<<Enc5@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input bsr 5 =:= 0 ->
<<Enc8@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(5, Val),
if Enc10@input bsr 5 =:= 0 ->
<<Enc10@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(6, Val),
Enc12@input@sub = Enc12@input - -60,
if 0 =< Enc12@input@sub, Enc12@input@sub < 48 ->
<<Enc12@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end,
begin
Enc14@input = element(7, Val),
Enc14@input@sub = Enc14@input - -50,
if 0 =< Enc14@input@sub, Enc14@input@sub < 84 ->
<<Enc14@input@sub:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc14@input}}})
end
end|begin
Enc16@input = element(8, Val),
Enc16@input@sub = Enc16@input - -24,
if 0 =< Enc16@input@sub, Enc16@input@sub < 25 ->
<<Enc16@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@input}}})
end
end].


'dec_CarrierFreqUTRA-FDD'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = case Opt band 1 of
1 ->
begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:5,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = begin
<<V7@V0:6,V7@Buf1/bitstring>> = Bytes6,
V7@Add2 = V7@V0 + -60,
{V7@Add2,V7@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V8@V0:7,V8@Buf1/bitstring>> = Bytes7,
V8@Add2 = V8@V0 + -50,
{V8@Add2,V8@Buf1}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = begin
<<V9@V0:5,V9@Buf1/bitstring>> = Bytes8,
V9@Add2 = V9@V0 + -24,
{V9@Add2,V9@Buf1}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V10@V0,V10@Buf1} = case Bytes9 of
<<0:1,V10@V3:6,V10@Buf4/bitstring>> ->
V10@Add5 = V10@V3 + 1,
{V10@Add5,V10@Buf4};
<<1:1,V10@Buf2/bitstring>> ->
{V10@V3,V10@Buf4} = case V10@Buf2 of
<<0:1,V10@V6:7,V10@Buf7/bitstring>> when V10@V6 =/= 0 ->
{V10@V6,V10@Buf7};
<<1:1,0:1,V10@V7:14,V10@Buf8/bitstring>> when V10@V7 =/= 0 ->
{V10@V7,V10@Buf8}
end,
{V10@V3,V10@Buf4}
end,
<<V10@V9:V10@V0/bitstring-unit:1,V10@Buf10/bitstring>> = V10@Buf1,
{V10@V9,V10@Buf10}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'CarrierFreqUTRA-FDD',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_CarrierFreqListUTRA-FDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_CarrierFreqUTRA-FDD'(Comp) || Comp <- Val]]
end.



'dec_CarrierFreqListUTRA-FDD'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components44(V1@Add2, V1@Buf1, []).

'enc_SystemInformationBlockType6'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CarrierFreqListUTRA-FDD'(Enc5@input)
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CarrierFreqListUTRA-TDD'(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input bsr 3 =:= 0 ->
<<Enc9@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedStateScaleFactors(Enc11@input)
end
end].


dec_SystemInformationBlockType6(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type CarrierFreqListUTRA-FDD
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
'dec_CarrierFreqListUTRA-FDD'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type CarrierFreqListUTRA-TDD
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_CarrierFreqListUTRA-TDD'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type SpeedStateScaleFactors
{Term4,Bytes6} = case Opt band 1 of
1 ->
dec_SpeedStateScaleFactors(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SystemInformationBlockType6',Term1,Term2,Term3,Term4},Bytes8}.

'enc_InterFreqBlackCellList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_PhysCellIdRange(Comp) || Comp <- Val]]
end.



dec_InterFreqBlackCellList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components45(V1@Add2, V1@Buf1, []).

'enc_InterFreqNeighCellInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
if 0 =< Enc1@input, Enc1@input < 504 ->
<<Enc1@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= 'dB-24' ->
<<0:5>>;
Enc3@input =:= 'dB-22' ->
<<1:5>>;
Enc3@input =:= 'dB-20' ->
<<2:5>>;
Enc3@input =:= 'dB-18' ->
<<3:5>>;
Enc3@input =:= 'dB-16' ->
<<4:5>>;
Enc3@input =:= 'dB-14' ->
<<5:5>>;
Enc3@input =:= 'dB-12' ->
<<6:5>>;
Enc3@input =:= 'dB-10' ->
<<7:5>>;
Enc3@input =:= 'dB-8' ->
<<8:5>>;
Enc3@input =:= 'dB-6' ->
<<9:5>>;
Enc3@input =:= 'dB-5' ->
<<10:5>>;
Enc3@input =:= 'dB-4' ->
<<11:5>>;
Enc3@input =:= 'dB-3' ->
<<12:5>>;
Enc3@input =:= 'dB-2' ->
<<13:5>>;
Enc3@input =:= 'dB-1' ->
<<14:5>>;
Enc3@input =:= dB0 ->
<<15:5>>;
Enc3@input =:= dB1 ->
<<16:5>>;
Enc3@input =:= dB2 ->
<<17:5>>;
Enc3@input =:= dB3 ->
<<18:5>>;
Enc3@input =:= dB4 ->
<<19:5>>;
Enc3@input =:= dB5 ->
<<20:5>>;
Enc3@input =:= dB6 ->
<<21:5>>;
Enc3@input =:= dB8 ->
<<22:5>>;
Enc3@input =:= dB10 ->
<<23:5>>;
Enc3@input =:= dB12 ->
<<24:5>>;
Enc3@input =:= dB14 ->
<<25:5>>;
Enc3@input =:= dB16 ->
<<26:5>>;
Enc3@input =:= dB18 ->
<<27:5>>;
Enc3@input =:= dB20 ->
<<28:5>>;
Enc3@input =:= dB22 ->
<<29:5>>;
Enc3@input =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_InterFreqNeighCellInfo(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:9,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V2@Int2,V2@Buf1}
end,
{{'InterFreqNeighCellInfo',Term1,Term2},Bytes2}.

'enc_InterFreqNeighCellList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_InterFreqNeighCellInfo(Comp) || Comp <- Val]]
end.



dec_InterFreqNeighCellList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components46(V1@Add2, V1@Buf1, []).

'enc_InterFreqCarrierFreqInfo'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(11, Val),
Enc4@input = element(13, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_DEFAULT ->
<<0:1,0:1>>;
Enc4@input =:= dB0 ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_DEFAULT ->
<<1:1,0:1>>;
Enc4@input =:= dB0 ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(14, Val),
Enc6@input = element(15, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc8@input = element(2, Val),
if Enc8@input bsr 16 =:= 0 ->
<<Enc8@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc8@input}}})
end
end,
begin
Enc10@input = element(3, Val),
Enc10@input@sub = Enc10@input - -70,
if 0 =< Enc10@input@sub, Enc10@input@sub < 49 ->
<<Enc10@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc12@input = element(4, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc12@input@sub = Enc12@input - -30,
if Enc12@input@sub bsr 6 =:= 0 ->
<<Enc12@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc12@input}}})
end
end
end
end,
begin
Enc15@input = element(5, Val),
if Enc15@input bsr 3 =:= 0 ->
<<Enc15@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@input}}})
end
end,
begin
Enc17@input = element(6, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedStateScaleFactors(Enc17@input)
end
end,
begin
Enc19@input = element(7, Val),
if Enc19@input bsr 5 =:= 0 ->
<<Enc19@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc19@input}}})
end
end,
begin
Enc21@input = element(8, Val),
if Enc21@input bsr 5 =:= 0 ->
<<Enc21@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc21@input}}})
end
end,
begin
Enc23@input = element(9, Val),
if Enc23@input =:= mbw6 ->
<<0:3>>;
Enc23@input =:= mbw15 ->
<<1:3>>;
Enc23@input =:= mbw25 ->
<<2:3>>;
Enc23@input =:= mbw50 ->
<<3:3>>;
Enc23@input =:= mbw75 ->
<<4:3>>;
Enc23@input =:= mbw100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc23@input}}})
end
end,
begin
Enc25@input = element(10, Val),
if Enc25@input =:= false ->
<<0:1>>;
Enc25@input =:= true ->
<<1:1>>
end
end,
begin
Enc27@input = element(11, Val),
if Enc27@input =:= asn1_NOVALUE ->
[];
Enc27@input bsr 3 =:= 0 ->
<<Enc27@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc27@input}}})
end
end,
begin
Enc30@input = element(12, Val),
Enc31@bs = to_bitstring(Enc30@input, 2),
Enc31@bits = bit_size(Enc31@bs),
if Enc31@bits =:= 2 ->
Enc31@bs
end
end,
begin
Enc32@input = element(13, Val),
if Enc32@input =:= asn1_DEFAULT ->
[];
Enc32@input =:= dB0 ->
[];
Enc32@input =:= 'dB-24' ->
<<0:5>>;
Enc32@input =:= 'dB-22' ->
<<1:5>>;
Enc32@input =:= 'dB-20' ->
<<2:5>>;
Enc32@input =:= 'dB-18' ->
<<3:5>>;
Enc32@input =:= 'dB-16' ->
<<4:5>>;
Enc32@input =:= 'dB-14' ->
<<5:5>>;
Enc32@input =:= 'dB-12' ->
<<6:5>>;
Enc32@input =:= 'dB-10' ->
<<7:5>>;
Enc32@input =:= 'dB-8' ->
<<8:5>>;
Enc32@input =:= 'dB-6' ->
<<9:5>>;
Enc32@input =:= 'dB-5' ->
<<10:5>>;
Enc32@input =:= 'dB-4' ->
<<11:5>>;
Enc32@input =:= 'dB-3' ->
<<12:5>>;
Enc32@input =:= 'dB-2' ->
<<13:5>>;
Enc32@input =:= 'dB-1' ->
<<14:5>>;
Enc32@input =:= dB1 ->
<<16:5>>;
Enc32@input =:= dB2 ->
<<17:5>>;
Enc32@input =:= dB3 ->
<<18:5>>;
Enc32@input =:= dB4 ->
<<19:5>>;
Enc32@input =:= dB5 ->
<<20:5>>;
Enc32@input =:= dB6 ->
<<21:5>>;
Enc32@input =:= dB8 ->
<<22:5>>;
Enc32@input =:= dB10 ->
<<23:5>>;
Enc32@input =:= dB12 ->
<<24:5>>;
Enc32@input =:= dB14 ->
<<25:5>>;
Enc32@input =:= dB16 ->
<<26:5>>;
Enc32@input =:= dB18 ->
<<27:5>>;
Enc32@input =:= dB20 ->
<<28:5>>;
Enc32@input =:= dB22 ->
<<29:5>>;
Enc32@input =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc32@input}}})
end
end,
begin
Enc35@input = element(14, Val),
if Enc35@input =:= asn1_NOVALUE ->
[];
true ->
enc_InterFreqNeighCellList(Enc35@input)
end
end|begin
Enc37@input = element(15, Val),
if Enc37@input =:= asn1_NOVALUE ->
[];
true ->
enc_InterFreqBlackCellList(Enc37@input)
end
end].


dec_InterFreqCarrierFreqInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:16,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:6,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + -70,
{V4@Add2,V4@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = case (Opt bsr 5) band 1 of
1 ->
begin
<<V5@V0:6,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + -30,
{V5@Add2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:3,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type SpeedStateScaleFactors
{Term5,Bytes7} = case (Opt bsr 4) band 1 of
1 ->
dec_SpeedStateScaleFactors(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V7@V0:5,V7@Buf1/bitstring>> = Bytes7,
{V7@V0,V7@Buf1}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes9} = begin
<<V8@V0:5,V8@Buf1/bitstring>> = Bytes8,
{V8@V0,V8@Buf1}
end,

%% attribute number 8 with type ENUMERATED
{Term8,Bytes10} = begin
<<V9@V0:3,V9@Buf1/bitstring>> = Bytes9,
V9@Int2 = case V9@V0 of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
_ -> exit({error,{asn1,{decode_enumerated,{V9@V0,[mbw6,mbw15,mbw25,mbw50,mbw75,mbw100]}}}})
end,
{V9@Int2,V9@Buf1}
end,

%% attribute number 9 with type BOOLEAN
{Term9,Bytes11} = begin
<<V10@V0:1,V10@Buf1/bitstring>> = Bytes10,
V10@Int2 = case V10@V0 of
0 -> false;
1 -> true
end,
{V10@Int2,V10@Buf1}
end,

%% attribute number 10 with type INTEGER
{Term10,Bytes12} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V11@V0:3,V11@Buf1/bitstring>> = Bytes11,
{V11@V0,V11@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% attribute number 11 with type BIT STRING
{Term11,Bytes13} = begin
<<V12@V0:2/binary-unit:1,V12@Buf1/bitstring>> = Bytes12,
{V12@V2,V12@Buf3}  = {decode_compact_bit_string(V12@V0),V12@Buf1},
{V12@V2,V12@Buf3}
end,

%% attribute number 12 with type ENUMERATED
{Term12,Bytes14} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V13@V0:5,V13@Buf1/bitstring>> = Bytes13,
V13@Int2 = case V13@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V13@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V13@Int2,V13@Buf1}
end;
0 ->
{dB0,Bytes13}
end,

%% attribute number 13 with type InterFreqNeighCellList
{Term13,Bytes15} = case (Opt bsr 1) band 1 of
1 ->
dec_InterFreqNeighCellList(Bytes14);
0 ->
{asn1_NOVALUE,Bytes14}
end,

%% attribute number 14 with type InterFreqBlackCellList
{Term14,Bytes16} = case Opt band 1 of
1 ->
dec_InterFreqBlackCellList(Bytes15);
0 ->
{asn1_NOVALUE,Bytes15}
end,

%% Extensions
{Extensions,Bytes17} = case Ext of
0 -> {<<>>,Bytes16};
1 ->
{V14@V0,V14@Buf1} = case Bytes16 of
<<0:1,V14@V3:6,V14@Buf4/bitstring>> ->
V14@Add5 = V14@V3 + 1,
{V14@Add5,V14@Buf4};
<<1:1,V14@Buf2/bitstring>> ->
{V14@V3,V14@Buf4} = case V14@Buf2 of
<<0:1,V14@V6:7,V14@Buf7/bitstring>> when V14@V6 =/= 0 ->
{V14@V6,V14@Buf7};
<<1:1,0:1,V14@V7:14,V14@Buf8/bitstring>> when V14@V7 =/= 0 ->
{V14@V7,V14@Buf8}
end,
{V14@V3,V14@Buf4}
end,
<<V14@V9:V14@V0/bitstring-unit:1,V14@Buf10/bitstring>> = V14@Buf1,
{V14@V9,V14@Buf10}
end,
Bytes18= skipextensions(Bytes17, 1, Extensions),
{{'InterFreqCarrierFreqInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10,Term11,Term12,Term13,Term14},Bytes18}.

'enc_InterFreqCarrierFreqList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_InterFreqCarrierFreqInfo(Comp) || Comp <- Val]]
end.



dec_InterFreqCarrierFreqList(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components47(V1@Add2, V1@Buf1, []).

'enc_SystemInformationBlockType5'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_InterFreqCarrierFreqList(Enc2@input)
end].


dec_SystemInformationBlockType5(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type InterFreqCarrierFreqList
{Term1,Bytes2} = dec_InterFreqCarrierFreqList(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V9:V2@V0/bitstring-unit:1,V2@Buf10/bitstring>> = V2@Buf1,
{V2@V9,V2@Buf10}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'SystemInformationBlockType5',Term1},Bytes4}.

'enc_IntraFreqBlackCellList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_PhysCellIdRange(Comp) || Comp <- Val]]
end.



dec_IntraFreqBlackCellList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components48(V1@Add2, V1@Buf1, []).

'enc_IntraFreqNeighCellInfo'(Val) ->
[begin
Enc2@input = element(2, Val),
if 0 =< Enc2@input, Enc2@input < 504 ->
<<0:1,Enc2@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= 'dB-24' ->
<<0:5>>;
Enc4@input =:= 'dB-22' ->
<<1:5>>;
Enc4@input =:= 'dB-20' ->
<<2:5>>;
Enc4@input =:= 'dB-18' ->
<<3:5>>;
Enc4@input =:= 'dB-16' ->
<<4:5>>;
Enc4@input =:= 'dB-14' ->
<<5:5>>;
Enc4@input =:= 'dB-12' ->
<<6:5>>;
Enc4@input =:= 'dB-10' ->
<<7:5>>;
Enc4@input =:= 'dB-8' ->
<<8:5>>;
Enc4@input =:= 'dB-6' ->
<<9:5>>;
Enc4@input =:= 'dB-5' ->
<<10:5>>;
Enc4@input =:= 'dB-4' ->
<<11:5>>;
Enc4@input =:= 'dB-3' ->
<<12:5>>;
Enc4@input =:= 'dB-2' ->
<<13:5>>;
Enc4@input =:= 'dB-1' ->
<<14:5>>;
Enc4@input =:= dB0 ->
<<15:5>>;
Enc4@input =:= dB1 ->
<<16:5>>;
Enc4@input =:= dB2 ->
<<17:5>>;
Enc4@input =:= dB3 ->
<<18:5>>;
Enc4@input =:= dB4 ->
<<19:5>>;
Enc4@input =:= dB5 ->
<<20:5>>;
Enc4@input =:= dB6 ->
<<21:5>>;
Enc4@input =:= dB8 ->
<<22:5>>;
Enc4@input =:= dB10 ->
<<23:5>>;
Enc4@input =:= dB12 ->
<<24:5>>;
Enc4@input =:= dB14 ->
<<25:5>>;
Enc4@input =:= dB16 ->
<<26:5>>;
Enc4@input =:= dB18 ->
<<27:5>>;
Enc4@input =:= dB20 ->
<<28:5>>;
Enc4@input =:= dB22 ->
<<29:5>>;
Enc4@input =:= dB24 ->
<<30:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end].


dec_IntraFreqNeighCellInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> 'dB-24';
1 -> 'dB-22';
2 -> 'dB-20';
3 -> 'dB-18';
4 -> 'dB-16';
5 -> 'dB-14';
6 -> 'dB-12';
7 -> 'dB-10';
8 -> 'dB-8';
9 -> 'dB-6';
10 -> 'dB-5';
11 -> 'dB-4';
12 -> 'dB-3';
13 -> 'dB-2';
14 -> 'dB-1';
15 -> dB0;
16 -> dB1;
17 -> dB2;
18 -> dB3;
19 -> dB4;
20 -> dB5;
21 -> dB6;
22 -> dB8;
23 -> dB10;
24 -> dB12;
25 -> dB14;
26 -> dB16;
27 -> dB18;
28 -> dB20;
29 -> dB22;
30 -> dB24;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,['dB-24','dB-22','dB-20','dB-18','dB-16','dB-14','dB-12','dB-10','dB-8','dB-6','dB-5','dB-4','dB-3','dB-2','dB-1',dB0,dB1,dB2,dB3,dB4,dB5,dB6,dB8,dB10,dB12,dB14,dB16,dB18,dB20,dB22,dB24]}}}})
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'IntraFreqNeighCellInfo',Term1,Term2},Bytes5}.

'enc_IntraFreqNeighCellList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_IntraFreqNeighCellInfo(Comp) || Comp <- Val]]
end.



dec_IntraFreqNeighCellList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components49(V1@Add2, V1@Buf1, []).

'enc_SystemInformationBlockType4'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_IntraFreqNeighCellList(Enc5@input)
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_IntraFreqBlackCellList(Enc7@input)
end
end|begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_PhysCellIdRange(Enc9@input)
end
end].


dec_SystemInformationBlockType4(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type IntraFreqNeighCellList
{Term1,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_IntraFreqNeighCellList(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type IntraFreqBlackCellList
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_IntraFreqBlackCellList(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type PhysCellIdRange
{Term3,Bytes5} = case Opt band 1 of
1 ->
dec_PhysCellIdRange(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'SystemInformationBlockType4',Term1,Term2,Term3},Bytes7}.

'enc_SystemInformationBlockType3'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
enc_SystemInformationBlockType3_cellReselectionInfoCommon(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
enc_SystemInformationBlockType3_cellReselectionServingFreqInfo(Enc3@input)
end|begin
Enc4@input = element(4, Val),
enc_SystemInformationBlockType3_intraFreqCellReselectionInfo(Enc4@input)
end].
'enc_SystemInformationBlockType3_cellReselectionInfoCommon'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= dB0 ->
<<0:4>>;
Enc2@input =:= dB1 ->
<<1:4>>;
Enc2@input =:= dB2 ->
<<2:4>>;
Enc2@input =:= dB3 ->
<<3:4>>;
Enc2@input =:= dB4 ->
<<4:4>>;
Enc2@input =:= dB5 ->
<<5:4>>;
Enc2@input =:= dB6 ->
<<6:4>>;
Enc2@input =:= dB8 ->
<<7:4>>;
Enc2@input =:= dB10 ->
<<8:4>>;
Enc2@input =:= dB12 ->
<<9:4>>;
Enc2@input =:= dB14 ->
<<10:4>>;
Enc2@input =:= dB16 ->
<<11:4>>;
Enc2@input =:= dB18 ->
<<12:4>>;
Enc2@input =:= dB20 ->
<<13:4>>;
Enc2@input =:= dB22 ->
<<14:4>>;
Enc2@input =:= dB24 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars(Enc4@input)
end
end].
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_MobilityStateParameters(Enc1@input)
end|begin
Enc2@input = element(3, Val),
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Enc2@input)
end].
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= 'dB-6' ->
<<0:2>>;
Enc1@input =:= 'dB-4' ->
<<1:2>>;
Enc1@input =:= 'dB-2' ->
<<2:2>>;
Enc1@input =:= dB0 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= 'dB-6' ->
<<0:2>>;
Enc3@input =:= 'dB-4' ->
<<1:2>>;
Enc3@input =:= 'dB-2' ->
<<2:2>>;
Enc3@input =:= dB0 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].

'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'dB-6';
1 -> 'dB-4';
2 -> 'dB-2';
3 -> dB0
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> 'dB-6';
1 -> 'dB-4';
2 -> 'dB-2';
3 -> dB0
end,
{V2@Int2,V2@Buf1}
end,
{{'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF',Term1,Term2},Bytes2}.


dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars(Bytes) ->

%% attribute number 1 with type MobilityStateParameters
{Term1,Bytes1} = dec_MobilityStateParameters(Bytes),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes2} = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Bytes1),
{{'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars',Term1,Term2},Bytes2}.


dec_SystemInformationBlockType3_cellReselectionInfoCommon(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> dB0;
1 -> dB1;
2 -> dB2;
3 -> dB3;
4 -> dB4;
5 -> dB5;
6 -> dB6;
7 -> dB8;
8 -> dB10;
9 -> dB12;
10 -> dB14;
11 -> dB16;
12 -> dB18;
13 -> dB20;
14 -> dB22;
15 -> dB24
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SystemInformationBlockType3_cellReselectionInfoCommon',Term1,Term2},Bytes3}.

'enc_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
Enc2@input bsr 5 =:= 0 ->
<<Enc2@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input bsr 5 =:= 0 ->
<<Enc5@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input bsr 3 =:= 0 ->
<<Enc7@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end].

dec_SystemInformationBlockType3_cellReselectionServingFreqInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = case Opt band 1 of
1 ->
begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,
{{'SystemInformationBlockType3_cellReselectionServingFreqInfo',Term1,Term2,Term3},Bytes4}.

'enc_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(9, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(2, Val),
Enc5@input@sub = Enc5@input - -70,
if 0 =< Enc5@input@sub, Enc5@input@sub < 49 ->
<<Enc5@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@input@sub = Enc7@input - -30,
if Enc7@input@sub bsr 6 =:= 0 ->
<<Enc7@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input bsr 5 =:= 0 ->
<<Enc10@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
Enc13@input =:= mbw6 ->
<<0:3>>;
Enc13@input =:= mbw15 ->
<<1:3>>;
Enc13@input =:= mbw25 ->
<<2:3>>;
Enc13@input =:= mbw50 ->
<<3:3>>;
Enc13@input =:= mbw75 ->
<<4:3>>;
Enc13@input =:= mbw100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end,
begin
Enc16@input = element(6, Val),
if Enc16@input =:= false ->
<<0:1>>;
Enc16@input =:= true ->
<<1:1>>
end
end,
begin
Enc18@input = element(7, Val),
Enc19@bs = to_bitstring(Enc18@input, 2),
Enc19@bits = bit_size(Enc19@bs),
if Enc19@bits =:= 2 ->
Enc19@bs
end
end,
begin
Enc20@input = element(8, Val),
if Enc20@input bsr 3 =:= 0 ->
<<Enc20@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc20@input}}})
end
end|begin
Enc22@input = element(9, Val),
if Enc22@input =:= asn1_NOVALUE ->
[];
true ->
enc_SpeedStateScaleFactors(Enc22@input)
end
end].

dec_SystemInformationBlockType3_intraFreqCellReselectionInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -70,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + -30,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V5@V0:3,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> mbw6;
1 -> mbw15;
2 -> mbw25;
3 -> mbw50;
4 -> mbw75;
5 -> mbw100;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,[mbw6,mbw15,mbw25,mbw50,mbw75,mbw100]}}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type BOOLEAN
{Term5,Bytes6} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes5,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 6 with type BIT STRING
{Term6,Bytes7} = begin
<<V7@V0:2/binary-unit:1,V7@Buf1/bitstring>> = Bytes6,
{V7@V2,V7@Buf3}  = {decode_compact_bit_string(V7@V0),V7@Buf1},
{V7@V2,V7@Buf3}
end,

%% attribute number 7 with type INTEGER
{Term7,Bytes8} = begin
<<V8@V0:3,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end,

%% attribute number 8 with type SpeedStateScaleFactors
{Term8,Bytes9} = case Opt band 1 of
1 ->
dec_SpeedStateScaleFactors(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,
{{'SystemInformationBlockType3_intraFreqCellReselectionInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8},Bytes9}.



dec_SystemInformationBlockType3(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Bytes2),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = 'dec_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Bytes3),

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V2@V0,V2@Buf1} = case Bytes4 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V9:V2@V0/bitstring-unit:1,V2@Buf10/bitstring>> = V2@Buf1,
{V2@V9,V2@Buf10}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'SystemInformationBlockType3',Term1,Term2,Term3},Bytes6}.

'enc_MBSFN-SubframeConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= n1 ->
<<0:3>>;
Enc1@input =:= n2 ->
<<1:3>>;
Enc1@input =:= n4 ->
<<2:3>>;
Enc1@input =:= n8 ->
<<3:3>>;
Enc1@input =:= n16 ->
<<4:3>>;
Enc1@input =:= n32 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
'enc_MBSFN-SubframeConfig_subframeAllocation'(Enc5@input)
end].
'enc_MBSFN-SubframeConfig_subframeAllocation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= oneFrame ->
begin
Enc2@bs = to_bitstring(ChoiceVal, 6),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 6 ->
[<<0:1>>|Enc2@bs]
end
end;
ChoiceTag =:= fourFrames ->
begin
Enc4@bs = to_bitstring(ChoiceVal, 24),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 24 ->
[<<1:1>>|Enc4@bs]
end
end
end.

'dec_MBSFN-SubframeConfig_subframeAllocation'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:6/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end
end,
{{oneFrame,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V3@V0:24/binary-unit:1,V3@Buf1/bitstring>> = Bytes1,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end
end,
{{fourFrames,Val},NewBytes}
end.


'dec_MBSFN-SubframeConfig'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> n1;
1 -> n2;
2 -> n4;
3 -> n8;
4 -> n16;
5 -> n32;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[n1,n2,n4,n8,n16,n32]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type CHOICE
{Term3,Bytes3} = 'dec_MBSFN-SubframeConfig_subframeAllocation'(Bytes2),
{{'MBSFN-SubframeConfig',Term1,Term2,Term3},Bytes3}.

'enc_MBSFN-SubframeConfigList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|['enc_MBSFN-SubframeConfig'(Comp) || Comp <- Val]]
end.



'dec_MBSFN-SubframeConfigList'(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components50(V1@Add2, V1@Buf1, []).

'enc_AC-BarringConfig'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= p00 ->
<<0:4>>;
Enc1@input =:= p05 ->
<<1:4>>;
Enc1@input =:= p10 ->
<<2:4>>;
Enc1@input =:= p15 ->
<<3:4>>;
Enc1@input =:= p20 ->
<<4:4>>;
Enc1@input =:= p25 ->
<<5:4>>;
Enc1@input =:= p30 ->
<<6:4>>;
Enc1@input =:= p40 ->
<<7:4>>;
Enc1@input =:= p50 ->
<<8:4>>;
Enc1@input =:= p60 ->
<<9:4>>;
Enc1@input =:= p70 ->
<<10:4>>;
Enc1@input =:= p75 ->
<<11:4>>;
Enc1@input =:= p80 ->
<<12:4>>;
Enc1@input =:= p85 ->
<<13:4>>;
Enc1@input =:= p90 ->
<<14:4>>;
Enc1@input =:= p95 ->
<<15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= s4 ->
<<0:3>>;
Enc3@input =:= s8 ->
<<1:3>>;
Enc3@input =:= s16 ->
<<2:3>>;
Enc3@input =:= s32 ->
<<3:3>>;
Enc3@input =:= s64 ->
<<4:3>>;
Enc3@input =:= s128 ->
<<5:3>>;
Enc3@input =:= s256 ->
<<6:3>>;
Enc3@input =:= s512 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@bs = to_bitstring(Enc5@input, 5),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 5 ->
Enc6@bs
end
end].


'dec_AC-BarringConfig'(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> p00;
1 -> p05;
2 -> p10;
3 -> p15;
4 -> p20;
5 -> p25;
6 -> p30;
7 -> p40;
8 -> p50;
9 -> p60;
10 -> p70;
11 -> p75;
12 -> p80;
13 -> p85;
14 -> p90;
15 -> p95
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> s4;
1 -> s8;
2 -> s16;
3 -> s32;
4 -> s64;
5 -> s128;
6 -> s256;
7 -> s512
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V3@V0:5/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,
{{'AC-BarringConfig',Term1,Term2,Term3},Bytes3}.

'enc_SystemInformationBlockType2'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SystemInformationBlockType2_ac-BarringInfo'(Enc4@input)
end
end,
begin
Enc6@input = element(3, Val),
enc_RadioResourceConfigCommonSIB(Enc6@input)
end,
begin
Enc7@input = element(4, Val),
'enc_UE-TimersAndConstants'(Enc7@input)
end,
begin
Enc8@input = element(5, Val),
enc_SystemInformationBlockType2_freqInfo(Enc8@input)
end,
begin
Enc9@input = element(6, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MBSFN-SubframeConfigList'(Enc9@input)
end
end|begin
Enc11@input = element(7, Val),
if Enc11@input =:= sf500 ->
<<0:3>>;
Enc11@input =:= sf750 ->
<<1:3>>;
Enc11@input =:= sf1280 ->
<<2:3>>;
Enc11@input =:= sf1920 ->
<<3:3>>;
Enc11@input =:= sf2560 ->
<<4:3>>;
Enc11@input =:= sf5120 ->
<<5:3>>;
Enc11@input =:= sf10240 ->
<<6:3>>;
Enc11@input =:= infinity ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end].
'enc_SystemInformationBlockType2_ac-BarringInfo'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= false ->
<<0:1>>;
Enc3@input =:= true ->
<<1:1>>
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_AC-BarringConfig'(Enc5@input)
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_AC-BarringConfig'(Enc7@input)
end
end].

'dec_SystemInformationBlockType2_ac-BarringInfo'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type AC-BarringConfig
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_AC-BarringConfig'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type AC-BarringConfig
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_AC-BarringConfig'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'SystemInformationBlockType2_ac-BarringInfo',Term1,Term2,Term3},Bytes4}.

'enc_SystemInformationBlockType2_freqInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
Enc6@input =:= n6 ->
<<0:3>>;
Enc6@input =:= n15 ->
<<1:3>>;
Enc6@input =:= n25 ->
<<2:3>>;
Enc6@input =:= n50 ->
<<3:3>>;
Enc6@input =:= n75 ->
<<4:3>>;
Enc6@input =:= n100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end|begin
Enc9@input = element(4, Val),
Enc9@input@sub = Enc9@input - 1,
if Enc9@input@sub bsr 5 =:= 0 ->
<<Enc9@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end].

dec_SystemInformationBlockType2_freqInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,[n6,n15,n25,n50,n75,n100]}}}})
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,
{{'SystemInformationBlockType2_freqInfo',Term1,Term2,Term3},Bytes4}.



dec_SystemInformationBlockType2(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
'dec_SystemInformationBlockType2_ac-BarringInfo'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type RadioResourceConfigCommonSIB
{Term2,Bytes4} = dec_RadioResourceConfigCommonSIB(Bytes3),

%% attribute number 3 with type UE-TimersAndConstants
{Term3,Bytes5} = 'dec_UE-TimersAndConstants'(Bytes4),

%% attribute number 4 with type SEQUENCE
{Term4,Bytes6} = 'dec_SystemInformationBlockType2_freqInfo'(Bytes5),

%% attribute number 5 with type MBSFN-SubframeConfigList
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_MBSFN-SubframeConfigList'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type ENUMERATED
{Term6,Bytes8} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes7,
V3@Int2 = case V3@V0 of
0 -> sf500;
1 -> sf750;
2 -> sf1280;
3 -> sf1920;
4 -> sf2560;
5 -> sf5120;
6 -> sf10240;
7 -> infinity
end,
{V3@Int2,V3@Buf1}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V4@V0,V4@Buf1} = case Bytes8 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'SystemInformationBlockType2',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ULInformationTransfer-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= dedicatedInfoNAS ->
[<<0:2>>|begin
Enc2@bin = iolist_to_binary(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end];
ChoiceTag =:= 'dedicatedInfoCDMA2000-1XRTT' ->
[<<1:2>>|begin
Enc4@bin = iolist_to_binary(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end];
ChoiceTag =:= 'dedicatedInfoCDMA2000-HRPD' ->
[<<2:2>>|begin
Enc6@bin = iolist_to_binary(ChoiceVal),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
encode_fragmented(Enc6@bin, 8)
end
end]
end.

'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
V2@Conv8 = binary_to_list(V2@V0),
{V2@Conv8,V2@Buf1}
end
end,
{{dedicatedInfoNAS,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes1 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary_to_list(V3@V0),
{V3@Conv8,V3@Buf1}
end
end,
{{'dedicatedInfoCDMA2000-1XRTT',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes1 of
<<0:1,V4@V3:7,V4@V5:V4@V3/binary-unit:8,V4@Buf6/bitstring>> ->
{V4@V5,V4@Buf6};
<<1:1,0:1,V4@V4:14,V4@V6:V4@V4/binary-unit:8,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,1:1,V4@V4:6,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7}  = decode_fragmented(V4@V4, V4@Buf5, 8),
{V4@V6,V4@Buf7}
end,
V4@Conv8 = binary_to_list(V4@V0),
{V4@Conv8,V4@Buf1}
end
end,
{{'dedicatedInfoCDMA2000-HRPD',Val},NewBytes}
end.
'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'ULInformationTransfer-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_ULInformationTransfer-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'ULInformationTransfer-r8-IEs',Term1,Term2},Bytes3}.

'enc_ULInformationTransfer'(Val) ->
Enc1@input = element(2, Val),
enc_ULInformationTransfer_criticalExtensions(Enc1@input).
'enc_ULInformationTransfer_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_ULInformationTransfer_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_ULInformationTransfer_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ulInformationTransfer-r8' ->
[<<0:2>>|'enc_ULInformationTransfer-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_ULInformationTransfer_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ULInformationTransfer-r8-IEs'(Bytes1)
end,
{{'ulInformationTransfer-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_ULInformationTransfer_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ULInformationTransfer_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_ULInformationTransfer(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_ULInformationTransfer_criticalExtensions'(Bytes),
{{'ULInformationTransfer',Term1},Bytes1}.

'enc_ULHandoverPreparationTransfer-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= type1XRTT ->
<<0:1>>;
Enc3@input =:= typeHRPD ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@bs = to_bitstring(Enc5@input, 56),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 56 ->
Enc6@bs
end
end
end
end,
begin
Enc8@input = element(4, Val),
Enc9@bin = iolist_to_binary(Enc8@input),
Enc9@len = byte_size(Enc9@bin),
if Enc9@len < 128 ->
[Enc9@len|Enc9@bin];
Enc9@len < 16384 ->
[<<2:2,Enc9@len:14>>|Enc9@bin];
true ->
encode_fragmented(Enc9@bin, 8)
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Enc10@input)
end
end].
'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> type1XRTT;
1 -> typeHRPD
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V3@V0:56/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@V5:V4@V3/binary-unit:8,V4@Buf6/bitstring>> ->
{V4@V5,V4@Buf6};
<<1:1,0:1,V4@V4:14,V4@V6:V4@V4/binary-unit:8,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,1:1,V4@V4:6,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7}  = decode_fragmented(V4@V4, V4@Buf5, 8),
{V4@V6,V4@Buf7}
end,
V4@Conv8 = binary_to_list(V4@V0),
{V4@Conv8,V4@Buf1}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'ULHandoverPreparationTransfer-r8-IEs',Term1,Term2,Term3,Term4},Bytes5}.

'enc_ULHandoverPreparationTransfer'(Val) ->
Enc1@input = element(2, Val),
enc_ULHandoverPreparationTransfer_criticalExtensions(Enc1@input).
'enc_ULHandoverPreparationTransfer_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_ULHandoverPreparationTransfer_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ulHandoverPreparationTransfer-r8' ->
[<<0:2>>|'enc_ULHandoverPreparationTransfer-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_ULHandoverPreparationTransfer_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes1)
end,
{{'ulHandoverPreparationTransfer-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_ULHandoverPreparationTransfer_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_ULHandoverPreparationTransfer_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_ULHandoverPreparationTransfer(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_ULHandoverPreparationTransfer_criticalExtensions'(Bytes),
{{'ULHandoverPreparationTransfer',Term1},Bytes1}.

'enc_UECapabilityInformation-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_UE-CapabilityRAT-ContainerList'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'UECapabilityInformation-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_UECapabilityInformation-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type UE-CapabilityRAT-ContainerList
{Term1,Bytes2} = 'dec_UE-CapabilityRAT-ContainerList'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'UECapabilityInformation-r8-IEs',Term1,Term2},Bytes3}.

'enc_UECapabilityInformation'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_UECapabilityInformation_criticalExtensions(Enc3@input)
end].
'enc_UECapabilityInformation_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_UECapabilityInformation_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_UECapabilityInformation_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ueCapabilityInformation-r8' ->
[<<0:3>>|'enc_UECapabilityInformation-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<1:3>>;
ChoiceTag =:= spare6 ->
<<2:3>>;
ChoiceTag =:= spare5 ->
<<3:3>>;
ChoiceTag =:= spare4 ->
<<4:3>>;
ChoiceTag =:= spare3 ->
<<5:3>>;
ChoiceTag =:= spare2 ->
<<6:3>>;
ChoiceTag =:= spare1 ->
<<7:3>>
end.

dec_UECapabilityInformation_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UECapabilityInformation-r8-IEs'(Bytes1)
end,
{{'ueCapabilityInformation-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_UECapabilityInformation_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UECapabilityInformation_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_UECapabilityInformation(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_UECapabilityInformation_criticalExtensions'(Bytes1),
{{'UECapabilityInformation',Term1,Term2},Bytes2}.

'enc_UE-CapabilityRequest'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 3 =:= 0 ->
[<<Enc2@len@sub:3>>|[if Comp =:= eutra ->
<<0:1,0:3>>;
Comp =:= utra ->
<<0:1,1:3>>;
Comp =:= 'geran-cs' ->
<<0:1,2:3>>;
Comp =:= 'geran-ps' ->
<<0:1,3:3>>;
Comp =:= 'cdma2000-1XRTT' ->
<<0:1,4:3>>;
Comp =:= spare3 ->
<<0:1,5:3>>;
Comp =:= spare2 ->
<<0:1,6:3>>;
Comp =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_UE-CapabilityRequest'(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components51(V1@Add2, V1@Buf1, []).

'enc_UECapabilityEnquiry-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_UE-CapabilityRequest'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'UECapabilityEnquiry-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_UECapabilityEnquiry-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type UE-CapabilityRequest
{Term1,Bytes2} = 'dec_UE-CapabilityRequest'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'UECapabilityEnquiry-r8-IEs',Term1,Term2},Bytes3}.

'enc_UECapabilityEnquiry'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_UECapabilityEnquiry_criticalExtensions(Enc3@input)
end].
'enc_UECapabilityEnquiry_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_UECapabilityEnquiry_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_UECapabilityEnquiry_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'ueCapabilityEnquiry-r8' ->
[<<0:2>>|'enc_UECapabilityEnquiry-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_UECapabilityEnquiry_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UECapabilityEnquiry-r8-IEs'(Bytes1)
end,
{{'ueCapabilityEnquiry-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_UECapabilityEnquiry_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UECapabilityEnquiry_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_UECapabilityEnquiry(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_UECapabilityEnquiry_criticalExtensions'(Bytes1),
{{'UECapabilityEnquiry',Term1,Term2},Bytes2}.

'enc_SIB-Type'(Val) ->
if Val =:= sibType3 ->
<<0:1,0:4>>;
Val =:= sibType4 ->
<<0:1,1:4>>;
Val =:= sibType5 ->
<<0:1,2:4>>;
Val =:= sibType6 ->
<<0:1,3:4>>;
Val =:= sibType7 ->
<<0:1,4:4>>;
Val =:= sibType8 ->
<<0:1,5:4>>;
Val =:= sibType9 ->
<<0:1,6:4>>;
Val =:= sibType10 ->
<<0:1,7:4>>;
Val =:= sibType11 ->
<<0:1,8:4>>;
Val =:= spare7 ->
<<0:1,9:4>>;
Val =:= spare6 ->
<<0:1,10:4>>;
Val =:= spare5 ->
<<0:1,11:4>>;
Val =:= spare4 ->
<<0:1,12:4>>;
Val =:= spare3 ->
<<0:1,13:4>>;
Val =:= spare2 ->
<<0:1,14:4>>;
Val =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_SIB-Type'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> sibType3;
1 -> sibType4;
2 -> sibType5;
3 -> sibType6;
4 -> sibType7;
5 -> sibType8;
6 -> sibType9;
7 -> sibType10;
8 -> sibType11;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SIB-MappingInfo'(Val) ->
Enc2@len = length(Val),
if Enc2@len < 32 ->
[<<Enc2@len:5>>|[if Comp =:= sibType3 ->
<<0:1,0:4>>;
Comp =:= sibType4 ->
<<0:1,1:4>>;
Comp =:= sibType5 ->
<<0:1,2:4>>;
Comp =:= sibType6 ->
<<0:1,3:4>>;
Comp =:= sibType7 ->
<<0:1,4:4>>;
Comp =:= sibType8 ->
<<0:1,5:4>>;
Comp =:= sibType9 ->
<<0:1,6:4>>;
Comp =:= sibType10 ->
<<0:1,7:4>>;
Comp =:= sibType11 ->
<<0:1,8:4>>;
Comp =:= spare7 ->
<<0:1,9:4>>;
Comp =:= spare6 ->
<<0:1,10:4>>;
Comp =:= spare5 ->
<<0:1,11:4>>;
Comp =:= spare4 ->
<<0:1,12:4>>;
Comp =:= spare3 ->
<<0:1,13:4>>;
Comp =:= spare2 ->
<<0:1,14:4>>;
Comp =:= spare1 ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_SIB-MappingInfo'(Bytes) ->
%% Length with constraint {0,31}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
dec_components52(V1@V0, V1@Buf1, []).

'enc_SchedulingInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= rf8 ->
<<0:3>>;
Enc1@input =:= rf16 ->
<<1:3>>;
Enc1@input =:= rf32 ->
<<2:3>>;
Enc1@input =:= rf64 ->
<<3:3>>;
Enc1@input =:= rf128 ->
<<4:3>>;
Enc1@input =:= rf256 ->
<<5:3>>;
Enc1@input =:= rf512 ->
<<6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
'enc_SIB-MappingInfo'(Enc3@input)
end].


dec_SchedulingInfo(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> rf8;
1 -> rf16;
2 -> rf32;
3 -> rf64;
4 -> rf128;
5 -> rf256;
6 -> rf512;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[rf8,rf16,rf32,rf64,rf128,rf256,rf512]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type SIB-MappingInfo
{Term2,Bytes2} = 'dec_SIB-MappingInfo'(Bytes1),
{{'SchedulingInfo',Term1,Term2},Bytes2}.

'enc_SchedulingInfoList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_SchedulingInfo(Comp) || Comp <- Val]]
end.



dec_SchedulingInfoList(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components53(V1@Add2, V1@Buf1, []).

'enc_PLMN-IdentityInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PLMN-Identity'(Enc1@input)
end|begin
Enc2@input = element(3, Val),
if Enc2@input =:= reserved ->
<<0:1>>;
Enc2@input =:= notReserved ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end].


'dec_PLMN-IdentityInfo'(Bytes) ->

%% attribute number 1 with type PLMN-Identity
{Term1,Bytes1} = 'dec_PLMN-Identity'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> reserved;
1 -> notReserved
end,
{V1@Int2,V1@Buf1}
end,
{{'PLMN-IdentityInfo',Term1,Term2},Bytes2}.

'enc_PLMN-IdentityList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 6 ->
[<<Enc1@len@sub:3>>|['enc_PLMN-IdentityInfo'(Comp) || Comp <- Val]]
end.



'dec_PLMN-IdentityList'(Bytes) ->
%% Length with constraint {1,6}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components54(V1@Add2, V1@Buf1, []).

'enc_SystemInformationBlockType1'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(7, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(10, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@input = element(2, Val),
enc_SystemInformationBlockType1_cellAccessRelatedInfo(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
enc_SystemInformationBlockType1_cellSelectionInfo(Enc5@input)
end,
begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@input@sub = Enc6@input - -30,
if Enc6@input@sub bsr 6 =:= 0 ->
<<Enc6@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end
end
end,
begin
Enc9@input = element(5, Val),
Enc9@input@sub = Enc9@input - 1,
if Enc9@input@sub bsr 6 =:= 0 ->
<<Enc9@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end,
begin
Enc11@input = element(6, Val),
enc_SchedulingInfoList(Enc11@input)
end,
begin
Enc12@input = element(7, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TDD-Config'(Enc12@input)
end
end,
begin
Enc14@input = element(8, Val),
if Enc14@input =:= ms1 ->
<<0:3>>;
Enc14@input =:= ms2 ->
<<1:3>>;
Enc14@input =:= ms5 ->
<<2:3>>;
Enc14@input =:= ms10 ->
<<3:3>>;
Enc14@input =:= ms15 ->
<<4:3>>;
Enc14@input =:= ms20 ->
<<5:3>>;
Enc14@input =:= ms40 ->
<<6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc14@input}}})
end
end,
begin
Enc16@input = element(9, Val),
if Enc16@input bsr 5 =:= 0 ->
<<Enc16@input:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc16@input}}})
end
end|begin
Enc18@input = element(10, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
enc_SystemInformationBlockType1_nonCriticalExtension(Enc18@input)
end
end].
'enc_SystemInformationBlockType1_cellAccessRelatedInfo'(Val) ->
[begin
Enc1@input = element(8, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_PLMN-IdentityList'(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
Enc4@bs
end
end,
begin
Enc5@input = element(4, Val),
Enc6@bs = to_bitstring(Enc5@input, 28),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 28 ->
Enc6@bs
end
end,
begin
Enc7@input = element(5, Val),
Enc9@input = element(6, Val),
if Enc7@input =:= barred ->
if Enc9@input =:= allowed ->
<<0:1,0:1>>;
Enc9@input =:= notAllowed ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end;
Enc7@input =:= notBarred ->
if Enc9@input =:= allowed ->
<<1:1,0:1>>;
Enc9@input =:= notAllowed ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc11@input = element(7, Val),
if Enc11@input =:= false ->
<<0:1>>;
Enc11@input =:= true ->
<<1:1>>
end
end|begin
Enc13@input = element(8, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc14@bs = to_bitstring(Enc13@input, 27),
Enc14@bits = bit_size(Enc14@bs),
if Enc14@bits =:= 27 ->
Enc14@bs
end
end
end
end].

dec_SystemInformationBlockType1_cellAccessRelatedInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PLMN-IdentityList
{Term1,Bytes2} = 'dec_PLMN-IdentityList'(Bytes1),

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes4} = begin
<<V3@V0:28/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes5} = begin
<<V4@V0:1,V4@Buf1/bitstring>> = Bytes4,
V4@Int2 = case V4@V0 of
0 -> barred;
1 -> notBarred
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes6} = begin
<<V5@V0:1,V5@Buf1/bitstring>> = Bytes5,
V5@Int2 = case V5@V0 of
0 -> allowed;
1 -> notAllowed
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 6 with type BOOLEAN
{Term6,Bytes7} = begin
<<V6@V0:1,V6@Buf1/bitstring>> = Bytes6,
V6@Int2 = case V6@V0 of
0 -> false;
1 -> true
end,
{V6@Int2,V6@Buf1}
end,

%% attribute number 7 with type BIT STRING
{Term7,Bytes8} = case Opt band 1 of
1 ->
begin
<<V7@V0:27/binary-unit:1,V7@Buf1/bitstring>> = Bytes7,
{V7@V2,V7@Buf3}  = {decode_compact_bit_string(V7@V0),V7@Buf1},
{V7@V2,V7@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes7}
end,
{{'SystemInformationBlockType1_cellAccessRelatedInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes8}.

'enc_SystemInformationBlockType1_cellSelectionInfo'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - -70,
if 0 =< Enc2@input@sub, Enc2@input@sub < 49 ->
<<Enc2@input@sub:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc4@input@sub = Enc4@input - 1,
if Enc4@input@sub bsr 3 =:= 0 ->
<<Enc4@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end
end
end].

dec_SystemInformationBlockType1_cellSelectionInfo(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + -70,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = case Opt band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SystemInformationBlockType1_cellSelectionInfo',Term1,Term2},Bytes3}.

'enc_SystemInformationBlockType1_nonCriticalExtension'(Val) ->
[].

dec_SystemInformationBlockType1_nonCriticalExtension(Bytes) ->
{{'SystemInformationBlockType1_nonCriticalExtension'},Bytes}.



dec_SystemInformationBlockType1(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = 'dec_SystemInformationBlockType1_cellAccessRelatedInfo'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = 'dec_SystemInformationBlockType1_cellSelectionInfo'(Bytes2),

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V2@V0:6,V2@Buf1/bitstring>> = Bytes3,
V2@Add2 = V2@V0 + -30,
{V2@Add2,V2@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes5} = begin
<<V3@V0:6,V3@Buf1/bitstring>> = Bytes4,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,

%% attribute number 5 with type SchedulingInfoList
{Term5,Bytes6} = dec_SchedulingInfoList(Bytes5),

%% attribute number 6 with type TDD-Config
{Term6,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
'dec_TDD-Config'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes8} = begin
<<V4@V0:3,V4@Buf1/bitstring>> = Bytes7,
V4@Int2 = case V4@V0 of
0 -> ms1;
1 -> ms2;
2 -> ms5;
3 -> ms10;
4 -> ms15;
5 -> ms20;
6 -> ms40;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,[ms1,ms2,ms5,ms10,ms15,ms20,ms40]}}}})
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 8 with type INTEGER
{Term8,Bytes9} = begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes8,
{V5@V0,V5@Buf1}
end,

%% attribute number 9 with type SEQUENCE
{Term9,Bytes10} = case Opt band 1 of
1 ->
'dec_SystemInformationBlockType1_nonCriticalExtension'(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,
{{'SystemInformationBlockType1',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9},Bytes10}.

'enc_SystemInformation-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SystemInformation-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|['enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Comp) || Comp <- Val]]
end.

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= sib2 ->
[<<0:1,0:4>>|enc_SystemInformationBlockType2(ChoiceVal)];
ChoiceTag =:= sib3 ->
[<<0:1,1:4>>|enc_SystemInformationBlockType3(ChoiceVal)];
ChoiceTag =:= sib4 ->
[<<0:1,2:4>>|enc_SystemInformationBlockType4(ChoiceVal)];
ChoiceTag =:= sib5 ->
[<<0:1,3:4>>|enc_SystemInformationBlockType5(ChoiceVal)];
ChoiceTag =:= sib6 ->
[<<0:1,4:4>>|enc_SystemInformationBlockType6(ChoiceVal)];
ChoiceTag =:= sib7 ->
[<<0:1,5:4>>|enc_SystemInformationBlockType7(ChoiceVal)];
ChoiceTag =:= sib8 ->
[<<0:1,6:4>>|enc_SystemInformationBlockType8(ChoiceVal)];
ChoiceTag =:= sib9 ->
[<<0:1,7:4>>|enc_SystemInformationBlockType9(ChoiceVal)];
ChoiceTag =:= sib10 ->
[<<0:1,8:4>>|enc_SystemInformationBlockType10(ChoiceVal)];
ChoiceTag =:= sib11 ->
[<<0:1,9:4>>|enc_SystemInformationBlockType11(ChoiceVal)]
end.

'dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType2(Bytes2)
end,
{{sib2,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType3(Bytes2)
end,
{{sib3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType4(Bytes2)
end,
{{sib4,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType5(Bytes2)
end,
{{sib5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType6(Bytes2)
end,
{{sib6,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType7(Bytes2)
end,
{{sib7,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType8(Bytes2)
end,
{{sib8,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType9(Bytes2)
end,
{{sib9,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType10(Bytes2)
end,
{{sib10,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType11(Bytes2)
end,
{{sib11,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.

'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components55(V1@Add2, V1@Buf1, []).

'enc_SystemInformation-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_SystemInformation-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'SystemInformation-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_SystemInformation-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_SystemInformation-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SystemInformation-r8-IEs',Term1,Term2},Bytes3}.

'enc_SystemInformation'(Val) ->
Enc1@input = element(2, Val),
enc_SystemInformation_criticalExtensions(Enc1@input).
'enc_SystemInformation_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'systemInformation-r8' ->
[<<0:1>>|'enc_SystemInformation-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_SystemInformation_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_SystemInformation_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'SystemInformation_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_SystemInformation_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SystemInformation-r8-IEs'(Bytes1)
end,
{{'systemInformation-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_SystemInformation(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_SystemInformation_criticalExtensions'(Bytes),
{{'SystemInformation',Term1},Bytes1}.

'enc_SecurityModeFailure-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'SecurityModeFailure-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_SecurityModeFailure-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'SecurityModeFailure-r8-IEs',Term1},Bytes2}.

'enc_SecurityModeFailure'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_SecurityModeFailure_criticalExtensions(Enc3@input)
end].
'enc_SecurityModeFailure_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'securityModeFailure-r8' ->
[<<0:1>>|'enc_SecurityModeFailure-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_SecurityModeFailure_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SecurityModeFailure-r8-IEs'(Bytes1)
end,
{{'securityModeFailure-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_SecurityModeFailure(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_SecurityModeFailure_criticalExtensions'(Bytes1),
{{'SecurityModeFailure',Term1,Term2},Bytes2}.

'enc_SecurityModeComplete-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'SecurityModeComplete-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_SecurityModeComplete-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'SecurityModeComplete-r8-IEs',Term1},Bytes2}.

'enc_SecurityModeComplete'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_SecurityModeComplete_criticalExtensions(Enc3@input)
end].
'enc_SecurityModeComplete_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'securityModeComplete-r8' ->
[<<0:1>>|'enc_SecurityModeComplete-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_SecurityModeComplete_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SecurityModeComplete-r8-IEs'(Bytes1)
end,
{{'securityModeComplete-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_SecurityModeComplete(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_SecurityModeComplete_criticalExtensions'(Bytes1),
{{'SecurityModeComplete',Term1,Term2},Bytes2}.

'enc_SecurityConfigSMC'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_SecurityAlgorithmConfig(Enc2@input)
end].


dec_SecurityConfigSMC(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SecurityAlgorithmConfig
{Term1,Bytes2} = dec_SecurityAlgorithmConfig(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V9:V2@V0/bitstring-unit:1,V2@Buf10/bitstring>> = V2@Buf1,
{V2@V9,V2@Buf10}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'SecurityConfigSMC',Term1},Bytes4}.

'enc_SecurityModeCommand-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_SecurityConfigSMC(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'SecurityModeCommand-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_SecurityModeCommand-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SecurityConfigSMC
{Term1,Bytes2} = dec_SecurityConfigSMC(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'SecurityModeCommand-r8-IEs',Term1,Term2},Bytes3}.

'enc_SecurityModeCommand'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_SecurityModeCommand_criticalExtensions(Enc3@input)
end].
'enc_SecurityModeCommand_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_SecurityModeCommand_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_SecurityModeCommand_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'securityModeCommand-r8' ->
[<<0:2>>|'enc_SecurityModeCommand-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_SecurityModeCommand_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SecurityModeCommand-r8-IEs'(Bytes1)
end,
{{'securityModeCommand-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_SecurityModeCommand_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SecurityModeCommand_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_SecurityModeCommand(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_SecurityModeCommand_criticalExtensions'(Bytes1),
{{'SecurityModeCommand',Term1,Term2},Bytes2}.

'enc_RegisteredMME'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_PLMN-Identity'(Enc2@input)
end
end,
begin
Enc4@input = element(3, Val),
Enc5@bs = to_bitstring(Enc4@input, 16),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 16 ->
Enc5@bs
end
end|begin
Enc6@input = element(4, Val),
Enc7@bs = to_bitstring(Enc6@input, 8),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 8 ->
Enc7@bs
end
end].


dec_RegisteredMME(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PLMN-Identity
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_PLMN-Identity'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = begin
<<V2@V0:16/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes4} = begin
<<V3@V0:8/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,
{{'RegisteredMME',Term1,Term2,Term3},Bytes4}.

'enc_RRCConnectionSetupComplete-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
Enc3@input@sub = Enc3@input - 1,
if 0 =< Enc3@input@sub, Enc3@input@sub < 6 ->
<<Enc3@input@sub:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_RegisteredMME(Enc5@input)
end
end,
begin
Enc7@input = element(4, Val),
Enc8@bin = iolist_to_binary(Enc7@input),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len < 128 ->
[Enc8@len|Enc8@bin];
Enc8@len < 16384 ->
[<<2:2,Enc8@len:14>>|Enc8@bin];
true ->
encode_fragmented(Enc8@bin, 8)
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Enc9@input)
end
end].
'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type RegisteredMME
{Term2,Bytes3} = case (Opt bsr 1) band 1 of
1 ->
dec_RegisteredMME(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary_to_list(V3@V0),
{V3@Conv8,V3@Buf1}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'RRCConnectionSetupComplete-r8-IEs',Term1,Term2,Term3,Term4},Bytes5}.

'enc_RRCConnectionSetupComplete'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionSetupComplete_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionSetupComplete_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionSetupComplete_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionSetupComplete-r8' ->
[<<0:2>>|'enc_RRCConnectionSetupComplete-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_RRCConnectionSetupComplete_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes1)
end,
{{'rrcConnectionSetupComplete-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionSetupComplete_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetupComplete_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionSetupComplete(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionSetupComplete_criticalExtensions'(Bytes1),
{{'RRCConnectionSetupComplete',Term1,Term2},Bytes2}.

'enc_RRCConnectionSetup-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_RadioResourceConfigDedicated(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionSetup-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionSetup-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type RadioResourceConfigDedicated
{Term1,Bytes2} = dec_RadioResourceConfigDedicated(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'RRCConnectionSetup-r8-IEs',Term1,Term2},Bytes3}.

'enc_RRCConnectionSetup'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionSetup_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionSetup_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionSetup_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionSetup_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionSetup-r8' ->
[<<0:3>>|'enc_RRCConnectionSetup-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<1:3>>;
ChoiceTag =:= spare6 ->
<<2:3>>;
ChoiceTag =:= spare5 ->
<<3:3>>;
ChoiceTag =:= spare4 ->
<<4:3>>;
ChoiceTag =:= spare3 ->
<<5:3>>;
ChoiceTag =:= spare2 ->
<<6:3>>;
ChoiceTag =:= spare1 ->
<<7:3>>
end.

dec_RRCConnectionSetup_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetup-r8-IEs'(Bytes1)
end,
{{'rrcConnectionSetup-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionSetup_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetup_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionSetup(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionSetup_criticalExtensions'(Bytes1),
{{'RRCConnectionSetup',Term1,Term2},Bytes2}.

'enc_EstablishmentCause'(Val) ->
if Val =:= emergency ->
<<0:3>>;
Val =:= highPriorityAccess ->
<<1:3>>;
Val =:= 'mt-Access' ->
<<2:3>>;
Val =:= 'mo-Signalling' ->
<<3:3>>;
Val =:= 'mo-Data' ->
<<4:3>>;
Val =:= spare3 ->
<<5:3>>;
Val =:= spare2 ->
<<6:3>>;
Val =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_EstablishmentCause(Bytes) ->
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_InitialUE-Identity'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 's-TMSI' ->
[<<0:1>>|'enc_S-TMSI'(ChoiceVal)];
ChoiceTag =:= randomValue ->
begin
Enc3@bs = to_bitstring(ChoiceVal, 40),
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 40 ->
[<<1:1>>|Enc3@bs]
end
end
end.


'dec_InitialUE-Identity'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_S-TMSI'(Bytes1)
end,
{{'s-TMSI',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
<<V2@V0:40/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end
end,
{{randomValue,Val},NewBytes}
end.
'enc_RRCConnectionRequest-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_InitialUE-Identity'(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
if Enc2@input =:= emergency ->
<<0:3>>;
Enc2@input =:= highPriorityAccess ->
<<1:3>>;
Enc2@input =:= 'mt-Access' ->
<<2:3>>;
Enc2@input =:= 'mo-Signalling' ->
<<3:3>>;
Enc2@input =:= 'mo-Data' ->
<<4:3>>;
Enc2@input =:= spare3 ->
<<5:3>>;
Enc2@input =:= spare2 ->
<<6:3>>;
Enc2@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(4, Val),
Enc5@bs = to_bitstring(Enc4@input, 1),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 1 ->
Enc5@bs
end
end].


'dec_RRCConnectionRequest-r8-IEs'(Bytes) ->

%% attribute number 1 with type InitialUE-Identity
{Term1,Bytes1} = 'dec_InitialUE-Identity'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> emergency;
1 -> highPriorityAccess;
2 -> 'mt-Access';
3 -> 'mo-Signalling';
4 -> 'mo-Data';
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V2@V0:1/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,
{{'RRCConnectionRequest-r8-IEs',Term1,Term2,Term3},Bytes3}.

'enc_RRCConnectionRequest'(Val) ->
Enc1@input = element(2, Val),
enc_RRCConnectionRequest_criticalExtensions(Enc1@input).
'enc_RRCConnectionRequest_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionRequest-r8' ->
[<<0:1>>|'enc_RRCConnectionRequest-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionRequest_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionRequest-r8-IEs'(Bytes1)
end,
{{'rrcConnectionRequest-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionRequest(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_RRCConnectionRequest_criticalExtensions'(Bytes),
{{'RRCConnectionRequest',Term1},Bytes1}.

'enc_BandClassPriority1XRTT'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= bc0 ->
<<0:1,0:5>>;
Enc1@input =:= bc1 ->
<<0:1,1:5>>;
Enc1@input =:= bc2 ->
<<0:1,2:5>>;
Enc1@input =:= bc3 ->
<<0:1,3:5>>;
Enc1@input =:= bc4 ->
<<0:1,4:5>>;
Enc1@input =:= bc5 ->
<<0:1,5:5>>;
Enc1@input =:= bc6 ->
<<0:1,6:5>>;
Enc1@input =:= bc7 ->
<<0:1,7:5>>;
Enc1@input =:= bc8 ->
<<0:1,8:5>>;
Enc1@input =:= bc9 ->
<<0:1,9:5>>;
Enc1@input =:= bc10 ->
<<0:1,10:5>>;
Enc1@input =:= bc11 ->
<<0:1,11:5>>;
Enc1@input =:= bc12 ->
<<0:1,12:5>>;
Enc1@input =:= bc13 ->
<<0:1,13:5>>;
Enc1@input =:= bc14 ->
<<0:1,14:5>>;
Enc1@input =:= bc15 ->
<<0:1,15:5>>;
Enc1@input =:= bc16 ->
<<0:1,16:5>>;
Enc1@input =:= bc17 ->
<<0:1,17:5>>;
Enc1@input =:= spare14 ->
<<0:1,18:5>>;
Enc1@input =:= spare13 ->
<<0:1,19:5>>;
Enc1@input =:= spare12 ->
<<0:1,20:5>>;
Enc1@input =:= spare11 ->
<<0:1,21:5>>;
Enc1@input =:= spare10 ->
<<0:1,22:5>>;
Enc1@input =:= spare9 ->
<<0:1,23:5>>;
Enc1@input =:= spare8 ->
<<0:1,24:5>>;
Enc1@input =:= spare7 ->
<<0:1,25:5>>;
Enc1@input =:= spare6 ->
<<0:1,26:5>>;
Enc1@input =:= spare5 ->
<<0:1,27:5>>;
Enc1@input =:= spare4 ->
<<0:1,28:5>>;
Enc1@input =:= spare3 ->
<<0:1,29:5>>;
Enc1@input =:= spare2 ->
<<0:1,30:5>>;
Enc1@input =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_BandClassPriority1XRTT(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'BandClassPriority1XRTT',Term1,Term2},Bytes2}.

'enc_BandClassPriorityList1XRTT'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_BandClassPriority1XRTT(Comp) || Comp <- Val]]
end.



dec_BandClassPriorityList1XRTT(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components56(V1@Add2, V1@Buf1, []).

'enc_BandClassPriorityHRPD'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= bc0 ->
<<0:1,0:5>>;
Enc1@input =:= bc1 ->
<<0:1,1:5>>;
Enc1@input =:= bc2 ->
<<0:1,2:5>>;
Enc1@input =:= bc3 ->
<<0:1,3:5>>;
Enc1@input =:= bc4 ->
<<0:1,4:5>>;
Enc1@input =:= bc5 ->
<<0:1,5:5>>;
Enc1@input =:= bc6 ->
<<0:1,6:5>>;
Enc1@input =:= bc7 ->
<<0:1,7:5>>;
Enc1@input =:= bc8 ->
<<0:1,8:5>>;
Enc1@input =:= bc9 ->
<<0:1,9:5>>;
Enc1@input =:= bc10 ->
<<0:1,10:5>>;
Enc1@input =:= bc11 ->
<<0:1,11:5>>;
Enc1@input =:= bc12 ->
<<0:1,12:5>>;
Enc1@input =:= bc13 ->
<<0:1,13:5>>;
Enc1@input =:= bc14 ->
<<0:1,14:5>>;
Enc1@input =:= bc15 ->
<<0:1,15:5>>;
Enc1@input =:= bc16 ->
<<0:1,16:5>>;
Enc1@input =:= bc17 ->
<<0:1,17:5>>;
Enc1@input =:= spare14 ->
<<0:1,18:5>>;
Enc1@input =:= spare13 ->
<<0:1,19:5>>;
Enc1@input =:= spare12 ->
<<0:1,20:5>>;
Enc1@input =:= spare11 ->
<<0:1,21:5>>;
Enc1@input =:= spare10 ->
<<0:1,22:5>>;
Enc1@input =:= spare9 ->
<<0:1,23:5>>;
Enc1@input =:= spare8 ->
<<0:1,24:5>>;
Enc1@input =:= spare7 ->
<<0:1,25:5>>;
Enc1@input =:= spare6 ->
<<0:1,26:5>>;
Enc1@input =:= spare5 ->
<<0:1,27:5>>;
Enc1@input =:= spare4 ->
<<0:1,28:5>>;
Enc1@input =:= spare3 ->
<<0:1,29:5>>;
Enc1@input =:= spare2 ->
<<0:1,30:5>>;
Enc1@input =:= spare1 ->
<<0:1,31:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_BandClassPriorityHRPD(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'BandClassPriorityHRPD',Term1,Term2},Bytes2}.

'enc_BandClassPriorityListHRPD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 5 =:= 0 ->
[<<Enc1@len@sub:5>>|[enc_BandClassPriorityHRPD(Comp) || Comp <- Val]]
end.



dec_BandClassPriorityListHRPD(Bytes) ->
%% Length with constraint {1,32}
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components57(V1@Add2, V1@Buf1, []).

'enc_FreqPriorityUTRA-TDD'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 14 =:= 0 ->
<<Enc1@input:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_FreqPriorityUTRA-TDD'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'FreqPriorityUTRA-TDD',Term1,Term2},Bytes2}.

'enc_FreqPriorityListUTRA-TDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_FreqPriorityUTRA-TDD'(Comp) || Comp <- Val]]
end.



'dec_FreqPriorityListUTRA-TDD'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components58(V1@Add2, V1@Buf1, []).

'enc_FreqPriorityUTRA-FDD'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 14 =:= 0 ->
<<Enc1@input:14>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


'dec_FreqPriorityUTRA-FDD'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:14,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'FreqPriorityUTRA-FDD',Term1,Term2},Bytes2}.

'enc_FreqPriorityListUTRA-FDD'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_FreqPriorityUTRA-FDD'(Comp) || Comp <- Val]]
end.



'dec_FreqPriorityListUTRA-FDD'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components59(V1@Add2, V1@Buf1, []).

'enc_FreqsPriorityGERAN'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_CarrierFreqsGERAN(Enc1@input)
end|begin
Enc2@input = element(3, Val),
if Enc2@input bsr 3 =:= 0 ->
<<Enc2@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end].


dec_FreqsPriorityGERAN(Bytes) ->

%% attribute number 1 with type CarrierFreqsGERAN
{Term1,Bytes1} = dec_CarrierFreqsGERAN(Bytes),

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
{{'FreqsPriorityGERAN',Term1,Term2},Bytes2}.

'enc_FreqsPriorityListGERAN'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_FreqsPriorityGERAN(Comp) || Comp <- Val]]
end.



dec_FreqsPriorityListGERAN(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components60(V1@Add2, V1@Buf1, []).

'enc_FreqPriorityEUTRA'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_FreqPriorityEUTRA(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:16,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,
{{'FreqPriorityEUTRA',Term1,Term2},Bytes2}.

'enc_FreqPriorityListEUTRA'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 3 =:= 0 ->
[<<Enc1@len@sub:3>>|[enc_FreqPriorityEUTRA(Comp) || Comp <- Val]]
end.



dec_FreqPriorityListEUTRA(Bytes) ->
%% Length with constraint {1,8}
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components61(V1@Add2, V1@Buf1, []).

'enc_IdleModeMobilityControlInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(8, Val),
if Enc7@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc9@input = element(2, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_FreqPriorityListEUTRA(Enc9@input)
end
end,
begin
Enc11@input = element(3, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_FreqsPriorityListGERAN(Enc11@input)
end
end,
begin
Enc13@input = element(4, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
'enc_FreqPriorityListUTRA-FDD'(Enc13@input)
end
end,
begin
Enc15@input = element(5, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
'enc_FreqPriorityListUTRA-TDD'(Enc15@input)
end
end,
begin
Enc17@input = element(6, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
enc_BandClassPriorityListHRPD(Enc17@input)
end
end,
begin
Enc19@input = element(7, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_BandClassPriorityList1XRTT(Enc19@input)
end
end|begin
Enc21@input = element(8, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
Enc21@input =:= min5 ->
<<0:3>>;
Enc21@input =:= min10 ->
<<1:3>>;
Enc21@input =:= min20 ->
<<2:3>>;
Enc21@input =:= min30 ->
<<3:3>>;
Enc21@input =:= min60 ->
<<4:3>>;
Enc21@input =:= min120 ->
<<5:3>>;
Enc21@input =:= min180 ->
<<6:3>>;
Enc21@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc21@input}}})
end
end].


dec_IdleModeMobilityControlInfo(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:7,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type FreqPriorityListEUTRA
{Term1,Bytes3} = case (Opt bsr 6) band 1 of
1 ->
dec_FreqPriorityListEUTRA(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type FreqsPriorityListGERAN
{Term2,Bytes4} = case (Opt bsr 5) band 1 of
1 ->
dec_FreqsPriorityListGERAN(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type FreqPriorityListUTRA-FDD
{Term3,Bytes5} = case (Opt bsr 4) band 1 of
1 ->
'dec_FreqPriorityListUTRA-FDD'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type FreqPriorityListUTRA-TDD
{Term4,Bytes6} = case (Opt bsr 3) band 1 of
1 ->
'dec_FreqPriorityListUTRA-TDD'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type BandClassPriorityListHRPD
{Term5,Bytes7} = case (Opt bsr 2) band 1 of
1 ->
dec_BandClassPriorityListHRPD(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type BandClassPriorityList1XRTT
{Term6,Bytes8} = case (Opt bsr 1) band 1 of
1 ->
dec_BandClassPriorityList1XRTT(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% attribute number 7 with type ENUMERATED
{Term7,Bytes9} = case Opt band 1 of
1 ->
begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes8,
V3@Int2 = case V3@V0 of
0 -> min5;
1 -> min10;
2 -> min20;
3 -> min30;
4 -> min60;
5 -> min120;
6 -> min180;
7 -> spare1
end,
{V3@Int2,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V4@V0,V4@Buf1} = case Bytes9 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:7,V4@Buf7/bitstring>> when V4@V6 =/= 0 ->
{V4@V6,V4@Buf7};
<<1:1,0:1,V4@V7:14,V4@Buf8/bitstring>> when V4@V7 =/= 0 ->
{V4@V7,V4@Buf8}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V9:V4@V0/bitstring-unit:1,V4@Buf10/bitstring>> = V4@Buf1,
{V4@V9,V4@Buf10}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'IdleModeMobilityControlInfo',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_RedirectedCarrierInfo'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= eutra ->
if ChoiceVal bsr 16 =:= 0 ->
<<0:1,0:3,ChoiceVal:16>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= geran ->
[<<0:1,1:3>>|enc_CarrierFreqsGERAN(ChoiceVal)];
ChoiceTag =:= 'utra-FDD' ->
if ChoiceVal bsr 14 =:= 0 ->
<<0:1,2:3,ChoiceVal:14>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'utra-TDD' ->
if ChoiceVal bsr 14 =:= 0 ->
<<0:1,3:3,ChoiceVal:14>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= 'cdma2000-HRPD' ->
[<<0:1,4:3>>|enc_CarrierFreqCDMA2000(ChoiceVal)];
ChoiceTag =:= 'cdma2000-1xRTT' ->
[<<0:1,5:3>>|enc_CarrierFreqCDMA2000(ChoiceVal)]
end.


dec_RedirectedCarrierInfo(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
<<V2@V0:16,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end
end,
{{eutra,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_CarrierFreqsGERAN(Bytes2)
end,
{{geran,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
<<V3@V0:14,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end
end,
{{'utra-FDD',Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
<<V4@V0:14,V4@Buf1/bitstring>> = Bytes2,
{V4@V0,V4@Buf1}
end
end,
{{'utra-TDD',Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_CarrierFreqCDMA2000(Bytes2)
end,
{{'cdma2000-HRPD',Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_CarrierFreqCDMA2000(Bytes2)
end,
{{'cdma2000-1xRTT',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ReleaseCause'(Val) ->
if Val =:= loadBalancingTAUrequired ->
<<0:2>>;
Val =:= other ->
<<1:2>>;
Val =:= spare2 ->
<<2:2>>;
Val =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReleaseCause(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> loadBalancingTAUrequired;
1 -> other;
2 -> spare2;
3 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_RRCConnectionRelease-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input =:= loadBalancingTAUrequired ->
<<0:2>>;
Enc4@input =:= other ->
<<1:2>>;
Enc4@input =:= spare2 ->
<<2:2>>;
Enc4@input =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
enc_RedirectedCarrierInfo(Enc6@input)
end
end,
begin
Enc8@input = element(4, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
enc_IdleModeMobilityControlInfo(Enc8@input)
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Enc10@input)
end
end].
'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionRelease-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionRelease-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> loadBalancingTAUrequired;
1 -> other;
2 -> spare2;
3 -> spare1
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type RedirectedCarrierInfo
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
dec_RedirectedCarrierInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type IdleModeMobilityControlInfo
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
dec_IdleModeMobilityControlInfo(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'RRCConnectionRelease-r8-IEs',Term1,Term2,Term3,Term4},Bytes5}.

'enc_RRCConnectionRelease'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionRelease_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionRelease_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionRelease_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionRelease_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionRelease-r8' ->
[<<0:2>>|'enc_RRCConnectionRelease-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_RRCConnectionRelease_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionRelease-r8-IEs'(Bytes1)
end,
{{'rrcConnectionRelease-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionRelease_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionRelease_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionRelease(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionRelease_criticalExtensions'(Bytes1),
{{'RRCConnectionRelease',Term1,Term2},Bytes2}.

'enc_RRCConnectionReject-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc2@input@sub = Enc2@input - 1,
if Enc2@input@sub bsr 4 =:= 0 ->
<<Enc2@input@sub:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Enc4@input)
end
end].
'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReject-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReject-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
V2@Add2 = V2@V0 + 1,
{V2@Add2,V2@Buf1}
end,

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'RRCConnectionReject-r8-IEs',Term1,Term2},Bytes3}.

'enc_RRCConnectionReject'(Val) ->
Enc1@input = element(2, Val),
enc_RRCConnectionReject_criticalExtensions(Enc1@input).
'enc_RRCConnectionReject_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionReject_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReject_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReject-r8' ->
[<<0:2>>|'enc_RRCConnectionReject-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_RRCConnectionReject_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReject-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReject-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReject_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReject_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReject(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_RRCConnectionReject_criticalExtensions'(Bytes),
{{'RRCConnectionReject',Term1},Bytes1}.

'enc_ReestablishmentCause'(Val) ->
if Val =:= reconfigurationFailure ->
<<0:2>>;
Val =:= handoverFailure ->
<<1:2>>;
Val =:= otherFailure ->
<<2:2>>;
Val =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReestablishmentCause(Bytes) ->
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> reconfigurationFailure;
1 -> handoverFailure;
2 -> otherFailure;
3 -> spare1
end,
{V1@Int2,V1@Buf1}
end.

'enc_ReestabUE-Identity'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@bs = to_bitstring(Enc1@input, 16),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 16 ->
Enc2@bs
end
end,
begin
Enc3@input = element(3, Val),
if 0 =< Enc3@input, Enc3@input < 504 ->
<<Enc3@input:9>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@bs = to_bitstring(Enc5@input, 16),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
Enc6@bs
end
end].


'dec_ReestabUE-Identity'(Bytes) ->

%% attribute number 1 with type BIT STRING
{Term1,Bytes1} = begin
<<V1@V0:16/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:9,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V3@V0:16/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,
{{'ReestabUE-Identity',Term1,Term2,Term3},Bytes3}.

'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_ReestabUE-Identity'(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
if Enc2@input =:= reconfigurationFailure ->
<<0:2>>;
Enc2@input =:= handoverFailure ->
<<1:2>>;
Enc2@input =:= otherFailure ->
<<2:2>>;
Enc2@input =:= spare1 ->
<<3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end|begin
Enc4@input = element(4, Val),
Enc5@bs = to_bitstring(Enc4@input, 2),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 2 ->
Enc5@bs
end
end].


'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes) ->

%% attribute number 1 with type ReestabUE-Identity
{Term1,Bytes1} = 'dec_ReestabUE-Identity'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> reconfigurationFailure;
1 -> handoverFailure;
2 -> otherFailure;
3 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V2@V0:2/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,
{{'RRCConnectionReestablishmentRequest-r8-IEs',Term1,Term2,Term3},Bytes3}.

'enc_RRCConnectionReestablishmentRequest'(Val) ->
Enc1@input = element(2, Val),
enc_RRCConnectionReestablishmentRequest_criticalExtensions(Enc1@input).
'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReestablishmentRequest-r8' ->
[<<0:1>>|'enc_RRCConnectionReestablishmentRequest-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReestablishmentRequest_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReestablishmentRequest-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReestablishmentRequest(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_RRCConnectionReestablishmentRequest_criticalExtensions'(Bytes),
{{'RRCConnectionReestablishmentRequest',Term1},Bytes1}.

'enc_RRCConnectionReestablishmentReject-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'RRCConnectionReestablishmentReject-r8-IEs',Term1},Bytes2}.

'enc_RRCConnectionReestablishmentReject'(Val) ->
Enc1@input = element(2, Val),
enc_RRCConnectionReestablishmentReject_criticalExtensions(Enc1@input).
'enc_RRCConnectionReestablishmentReject_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReestablishmentReject-r8' ->
[<<0:1>>|'enc_RRCConnectionReestablishmentReject-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReestablishmentReject_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReestablishmentReject-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReestablishmentReject(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_RRCConnectionReestablishmentReject_criticalExtensions'(Bytes),
{{'RRCConnectionReestablishmentReject',Term1},Bytes1}.

'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'RRCConnectionReestablishmentComplete-r8-IEs',Term1},Bytes2}.

'enc_RRCConnectionReestablishmentComplete'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionReestablishmentComplete_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReestablishmentComplete-r8' ->
[<<0:1>>|'enc_RRCConnectionReestablishmentComplete-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReestablishmentComplete_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReestablishmentComplete-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReestablishmentComplete(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionReestablishmentComplete_criticalExtensions'(Bytes1),
{{'RRCConnectionReestablishmentComplete',Term1,Term2},Bytes2}.

'enc_RRCConnectionReestablishment-r8-IEs'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_RadioResourceConfigDedicated(Enc2@input)
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 3 =:= 0 ->
<<Enc3@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Enc5@input)
end
end].
'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReestablishment-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type RadioResourceConfigDedicated
{Term1,Bytes2} = dec_RadioResourceConfigDedicated(Bytes1),

%% attribute number 2 with type INTEGER
{Term2,Bytes3} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes2,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'RRCConnectionReestablishment-r8-IEs',Term1,Term2,Term3},Bytes4}.

'enc_RRCConnectionReestablishment'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionReestablishment_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionReestablishment_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionReestablishment_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReestablishment_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReestablishment-r8' ->
[<<0:3>>|'enc_RRCConnectionReestablishment-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<1:3>>;
ChoiceTag =:= spare6 ->
<<2:3>>;
ChoiceTag =:= spare5 ->
<<3:3>>;
ChoiceTag =:= spare4 ->
<<4:3>>;
ChoiceTag =:= spare3 ->
<<5:3>>;
ChoiceTag =:= spare2 ->
<<6:3>>;
ChoiceTag =:= spare1 ->
<<7:3>>
end.

dec_RRCConnectionReestablishment_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishment-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReestablishment-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReestablishment_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishment_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReestablishment(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionReestablishment_criticalExtensions'(Bytes1),
{{'RRCConnectionReestablishment',Term1,Term2},Bytes2}.

'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'RRCConnectionReconfigurationComplete-r8-IEs',Term1},Bytes2}.

'enc_RRCConnectionReconfigurationComplete'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionReconfigurationComplete_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReconfigurationComplete-r8' ->
[<<0:1>>|'enc_RRCConnectionReconfigurationComplete-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReconfigurationComplete_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReconfigurationComplete-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReconfigurationComplete(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionReconfigurationComplete_criticalExtensions'(Bytes1),
{{'RRCConnectionReconfigurationComplete',Term1,Term2},Bytes2}.

'enc_SecurityConfigHO'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_SecurityConfigHO_handoverType(Enc2@input)
end].
'enc_SecurityConfigHO_handoverType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= intraLTE ->
[<<0:1>>|enc_SecurityConfigHO_handoverType_intraLTE(ChoiceVal)];
ChoiceTag =:= interRAT ->
[<<1:1>>|enc_SecurityConfigHO_handoverType_interRAT(ChoiceVal)]
end.
'enc_SecurityConfigHO_handoverType_intraLTE'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
enc_SecurityAlgorithmConfig(Enc2@input)
end
end,
begin
Enc4@input = element(3, Val),
if Enc4@input =:= false ->
<<0:1>>;
Enc4@input =:= true ->
<<1:1>>
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input bsr 3 =:= 0 ->
<<Enc6@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end].

dec_SecurityConfigHO_handoverType_intraLTE(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SecurityAlgorithmConfig
{Term1,Bytes2} = case Opt band 1 of
1 ->
dec_SecurityAlgorithmConfig(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type BOOLEAN
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes4} = begin
<<V3@V0:3,V3@Buf1/bitstring>> = Bytes3,
{V3@V0,V3@Buf1}
end,
{{'SecurityConfigHO_handoverType_intraLTE',Term1,Term2,Term3},Bytes4}.

'enc_SecurityConfigHO_handoverType_interRAT'(Val) ->
[begin
Enc1@input = element(2, Val),
enc_SecurityAlgorithmConfig(Enc1@input)
end|begin
Enc2@input = element(3, Val),
Enc3@bin = iolist_to_binary(Enc2@input),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len =:= 6 ->
Enc3@bin
end
end].

dec_SecurityConfigHO_handoverType_interRAT(Bytes) ->

%% attribute number 1 with type SecurityAlgorithmConfig
{Term1,Bytes1} = dec_SecurityAlgorithmConfig(Bytes),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes2} = begin
<<V1@V0:6/binary-unit:8,V1@Buf1/bitstring>> = Bytes1,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end,
{{'SecurityConfigHO_handoverType_interRAT',Term1,Term2},Bytes2}.


dec_SecurityConfigHO_handoverType(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_SecurityConfigHO_handoverType_intraLTE'(Bytes1)
end,
{{intraLTE,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_SecurityConfigHO_handoverType_interRAT'(Bytes1)
end,
{{interRAT,Val},NewBytes}
end.


dec_SecurityConfigHO(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_SecurityConfigHO_handoverType'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:7,V2@Buf7/bitstring>> when V2@V6 =/= 0 ->
{V2@V6,V2@Buf7};
<<1:1,0:1,V2@V7:14,V2@Buf8/bitstring>> when V2@V7 =/= 0 ->
{V2@V7,V2@Buf8}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V9:V2@V0/bitstring-unit:1,V2@Buf10/bitstring>> = V2@Buf1,
{V2@V9,V2@Buf10}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'SecurityConfigHO',Term1},Bytes4}.

'enc_RRCConnectionReconfiguration-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
Enc6@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
if Enc6@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc6@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc7@input = element(2, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_MeasConfig(Enc7@input)
end
end,
begin
Enc9@input = element(3, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_MobilityControlInfo(Enc9@input)
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Enc11@input)
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_RadioResourceConfigDedicated(Enc13@input)
end
end,
begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
enc_SecurityConfigHO(Enc15@input)
end
end|begin
Enc17@input = element(7, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Enc17@input)
end
end].
'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 11 ->
[<<Enc2@len@sub:4>>|[begin
Enc1@bin = iolist_to_binary(Comp),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
encode_fragmented(Enc1@bin, 8)
end
end || Comp <- Val]]
end.


'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Bytes) ->
%% Length with constraint {1,11}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components62(V1@Add2, V1@Buf1, []).

'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:6,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type MeasConfig
{Term1,Bytes2} = case (Opt bsr 5) band 1 of
1 ->
dec_MeasConfig(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type MobilityControlInfo
{Term2,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
dec_MobilityControlInfo(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type RadioResourceConfigDedicated
{Term4,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_RadioResourceConfigDedicated(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 5 with type SecurityConfigHO
{Term5,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_SecurityConfigHO(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 6 with type SEQUENCE
{Term6,Bytes7} = case Opt band 1 of
1 ->
'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,
{{'RRCConnectionReconfiguration-r8-IEs',Term1,Term2,Term3,Term4,Term5,Term6},Bytes7}.

'enc_RRCConnectionReconfiguration'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_RRCConnectionReconfiguration_criticalExtensions(Enc3@input)
end].
'enc_RRCConnectionReconfiguration_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_RRCConnectionReconfiguration_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'rrcConnectionReconfiguration-r8' ->
[<<0:3>>|'enc_RRCConnectionReconfiguration-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<1:3>>;
ChoiceTag =:= spare6 ->
<<2:3>>;
ChoiceTag =:= spare5 ->
<<3:3>>;
ChoiceTag =:= spare4 ->
<<4:3>>;
ChoiceTag =:= spare3 ->
<<5:3>>;
ChoiceTag =:= spare2 ->
<<6:3>>;
ChoiceTag =:= spare1 ->
<<7:3>>
end.

dec_RRCConnectionReconfiguration_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes1)
end,
{{'rrcConnectionReconfiguration-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_RRCConnectionReconfiguration_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReconfiguration_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_RRCConnectionReconfiguration(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_RRCConnectionReconfiguration_criticalExtensions'(Bytes1),
{{'RRCConnectionReconfiguration',Term1,Term2},Bytes2}.

'enc_IMSI-Digit'(Val) ->
if 0 =< Val, Val < 10 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_IMSI-Digit'(Bytes) ->
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_IMSI'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 6,
if Enc2@len@sub bsr 4 =:= 0 ->
[<<Enc2@len@sub:4>>|[if 0 =< Comp, Comp < 10 ->
<<Comp:4>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



dec_IMSI(Bytes) ->
%% Length with constraint {6,21}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 6,
dec_components63(V1@Add2, V1@Buf1, []).

'enc_PagingUE-Identity'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 's-TMSI' ->
[<<0:1,0:1>>|'enc_S-TMSI'(ChoiceVal)];
ChoiceTag =:= imsi ->
[<<0:1,1:1>>|enc_IMSI(ChoiceVal)]
end.


'dec_PagingUE-Identity'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_S-TMSI'(Bytes2)
end,
{{'s-TMSI',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_IMSI(Bytes2)
end,
{{imsi,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_PagingRecord'(Val) ->
[<<0:1>>,
begin
Enc2@input = element(2, Val),
'enc_PagingUE-Identity'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= ps ->
<<0:1>>;
Enc3@input =:= cs ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end].


dec_PagingRecord(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PagingUE-Identity
{Term1,Bytes2} = 'dec_PagingUE-Identity'(Bytes1),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes2,
V2@Int2 = case V2@V0 of
0 -> ps;
1 -> cs
end,
{V2@Int2,V2@Buf1}
end,

%% Extensions
{Extensions,Bytes4} = case Ext of
0 -> {<<>>,Bytes3};
1 ->
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:7,V3@Buf7/bitstring>> when V3@V6 =/= 0 ->
{V3@V6,V3@Buf7};
<<1:1,0:1,V3@V7:14,V3@Buf8/bitstring>> when V3@V7 =/= 0 ->
{V3@V7,V3@Buf8}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V9:V3@V0/bitstring-unit:1,V3@Buf10/bitstring>> = V3@Buf1,
{V3@V9,V3@Buf10}
end,
Bytes5= skipextensions(Bytes4, 1, Extensions),
{{'PagingRecord',Term1,Term2},Bytes5}.

'enc_PagingRecordList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|[enc_PagingRecord(Comp) || Comp <- Val]]
end.



dec_PagingRecordList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components64(V1@Add2, V1@Buf1, []).

'enc_Paging'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
enc_PagingRecordList(Enc5@input)
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input =:= true ->
[];
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc10@input = element(4, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input =:= true ->
[];
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end|begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_Paging_nonCriticalExtension(Enc13@input)
end
end].
'enc_Paging_nonCriticalExtension'(Val) ->
[].

dec_Paging_nonCriticalExtension(Bytes) ->
{{'Paging_nonCriticalExtension'},Bytes}.



dec_Paging(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PagingRecordList
{Term1,Bytes2} = case (Opt bsr 3) band 1 of
1 ->
dec_PagingRecordList(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
ignore,
{'true',Bytes2}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
ignore,
{'true',Bytes3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_Paging_nonCriticalExtension'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'Paging',Term1,Term2,Term3,Term4},Bytes5}.

'enc_SystemInfoListGERAN'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 10 ->
[<<Enc2@len@sub:4>>|[begin
Enc1@bin = iolist_to_binary(Comp),
Enc1@len = byte_size(Enc1@bin),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 23 ->
[<<Enc1@len@sub:5>>|Enc1@bin]
end
end || Comp <- Val]]
end.



dec_SystemInfoListGERAN(Bytes) ->
%% Length with constraint {1,10}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components65(V1@Add2, V1@Buf1, []).

'enc_SI-OrPSI-GERAN'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= si ->
[<<0:1>>|enc_SystemInfoListGERAN(ChoiceVal)];
ChoiceTag =:= psi ->
[<<1:1>>|enc_SystemInfoListGERAN(ChoiceVal)]
end.


'dec_SI-OrPSI-GERAN'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_SystemInfoListGERAN(Bytes1)
end,
{{si,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SystemInfoListGERAN(Bytes1)
end,
{{psi,Val},NewBytes}
end.
'enc_CellChangeOrder'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= ms100 ->
<<0:3>>;
Enc1@input =:= ms200 ->
<<1:3>>;
Enc1@input =:= ms500 ->
<<2:3>>;
Enc1@input =:= ms1000 ->
<<3:3>>;
Enc1@input =:= ms2000 ->
<<4:3>>;
Enc1@input =:= ms4000 ->
<<5:3>>;
Enc1@input =:= ms8000 ->
<<6:3>>;
Enc1@input =:= spare1 ->
<<7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
'enc_CellChangeOrder_targetRAT-Type'(Enc3@input)
end].
'enc_CellChangeOrder_targetRAT-Type'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= geran ->
[<<0:1>>|'enc_CellChangeOrder_targetRAT-Type_geran'(ChoiceVal)]
end.
'enc_CellChangeOrder_targetRAT-Type_geran'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
enc_PhysCellIdGERAN(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
enc_CarrierFreqGERAN(Enc4@input)
end,
begin
Enc5@input = element(4, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc6@bs = to_bitstring(Enc5@input, 2),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 2 ->
Enc6@bs
end
end
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SI-OrPSI-GERAN'(Enc8@input)
end
end].

'dec_CellChangeOrder_targetRAT-Type_geran'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type PhysCellIdGERAN
{Term1,Bytes2} = dec_PhysCellIdGERAN(Bytes1),

%% attribute number 2 with type CarrierFreqGERAN
{Term2,Bytes3} = dec_CarrierFreqGERAN(Bytes2),

%% attribute number 3 with type BIT STRING
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V2@V0:2/binary-unit:1,V2@Buf1/bitstring>> = Bytes3,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SI-OrPSI-GERAN
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_SI-OrPSI-GERAN'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'CellChangeOrder_targetRAT-Type_geran',Term1,Term2,Term3,Term4},Bytes5}.


'dec_CellChangeOrder_targetRAT-Type'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CellChangeOrder_targetRAT-Type_geran'(Bytes2)
end,
{{geran,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:7,V1@Buf7/bitstring>> when V1@V6 =/= 0 ->
{V1@V6,V1@Buf7};
<<1:1,0:1,V1@V7:14,V1@Buf8/bitstring>> when V1@V7 =/= 0 ->
{V1@V7,V1@Buf8}
end,
<<V1@V9:V1@V3/unit:8,V1@Buf10/bitstring>> = V1@Buf4,
{V1@V9,V1@Buf10}
end,
{V1@V0,V1@Buf1}
end,
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.


dec_CellChangeOrder(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> ms100;
1 -> ms200;
2 -> ms500;
3 -> ms1000;
4 -> ms2000;
5 -> ms4000;
6 -> ms8000;
7 -> spare1
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_CellChangeOrder_targetRAT-Type'(Bytes1),
{{'CellChangeOrder',Term1,Term2},Bytes2}.

'enc_Handover'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= utra ->
<<0:1,0:3>>;
Enc3@input =:= geran ->
<<0:1,1:3>>;
Enc3@input =:= 'cdma2000-1XRTT' ->
<<0:1,2:3>>;
Enc3@input =:= 'cdma2000-HRPD' ->
<<0:1,3:3>>;
Enc3@input =:= spare4 ->
<<0:1,4:3>>;
Enc3@input =:= spare3 ->
<<0:1,5:3>>;
Enc3@input =:= spare2 ->
<<0:1,6:3>>;
Enc3@input =:= spare1 ->
<<0:1,7:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bin = iolist_to_binary(Enc5@input),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
encode_fragmented(Enc6@bin, 8)
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc8@bin = iolist_to_binary(Enc7@input),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 1 ->
Enc8@bin
end
end
end
end|begin
Enc10@input = element(5, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SI-OrPSI-GERAN'(Enc10@input)
end
end].


dec_Handover(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:3,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> utra;
1 -> geran;
2 -> 'cdma2000-1XRTT';
3 -> 'cdma2000-HRPD';
4 -> spare4;
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11}
end,
<<V2@V12:V2@V6/unit:8,V2@Buf13/bitstring>> = V2@Buf7,
{V2@V12,V2@Buf13}
end,
V2@Int14 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int14,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary_to_list(V3@V0),
{V3@Conv8,V3@Buf1}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
<<V4@V0:1/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary_to_list(V4@V0),
{V4@Conv2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SI-OrPSI-GERAN
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_SI-OrPSI-GERAN'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'Handover',Term1,Term2,Term3,Term4},Bytes5}.

'enc_MobilityFromEUTRACommand-r8-IEs'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= false ->
<<0:1,0:1>>;
Enc2@input =:= true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= false ->
<<1:1,0:1>>;
Enc2@input =:= true ->
<<1:1,1:1>>
end
end
end,
begin
Enc4@input = element(3, Val),
'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Enc4@input)
end|begin
Enc5@input = element(4, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Enc5@input)
end
end].
'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= handover ->
[<<0:1>>|enc_Handover(ChoiceVal)];
ChoiceTag =:= cellChangeOrder ->
[<<1:1>>|enc_CellChangeOrder(ChoiceVal)]
end.

'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_Handover(Bytes1)
end,
{{handover,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_CellChangeOrder(Bytes1)
end,
{{cellChangeOrder,Val},NewBytes}
end.
'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BOOLEAN
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> false;
1 -> true
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes3} = 'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(Bytes2),

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'MobilityFromEUTRACommand-r8-IEs',Term1,Term2,Term3},Bytes4}.

'enc_MobilityFromEUTRACommand'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_MobilityFromEUTRACommand_criticalExtensions(Enc3@input)
end].
'enc_MobilityFromEUTRACommand_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_MobilityFromEUTRACommand_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'mobilityFromEUTRACommand-r8' ->
[<<0:2>>|'enc_MobilityFromEUTRACommand-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_MobilityFromEUTRACommand_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes1)
end,
{{'mobilityFromEUTRACommand-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_MobilityFromEUTRACommand_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MobilityFromEUTRACommand_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_MobilityFromEUTRACommand(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_MobilityFromEUTRACommand_criticalExtensions'(Bytes1),
{{'MobilityFromEUTRACommand',Term1,Term2},Bytes2}.

'enc_MeasurementReport-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
enc_MeasResults(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'MeasurementReport-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_MeasurementReport-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type MeasResults
{Term1,Bytes2} = dec_MeasResults(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'MeasurementReport-r8-IEs',Term1,Term2},Bytes3}.

'enc_MeasurementReport'(Val) ->
Enc1@input = element(2, Val),
enc_MeasurementReport_criticalExtensions(Enc1@input).
'enc_MeasurementReport_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_MeasurementReport_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_MeasurementReport_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'measurementReport-r8' ->
[<<0:3>>|'enc_MeasurementReport-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<1:3>>;
ChoiceTag =:= spare6 ->
<<2:3>>;
ChoiceTag =:= spare5 ->
<<3:3>>;
ChoiceTag =:= spare4 ->
<<4:3>>;
ChoiceTag =:= spare3 ->
<<5:3>>;
ChoiceTag =:= spare2 ->
<<6:3>>;
ChoiceTag =:= spare1 ->
<<7:3>>
end.

dec_MeasurementReport_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MeasurementReport-r8-IEs'(Bytes1)
end,
{{'measurementReport-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'MeasurementReport_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_MeasurementReport_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_MeasurementReport_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_MeasurementReport(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_MeasurementReport_criticalExtensions'(Bytes),
{{'MeasurementReport',Term1},Bytes1}.

'enc_MasterInformationBlock'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= n6 ->
<<0:3>>;
Enc1@input =:= n15 ->
<<1:3>>;
Enc1@input =:= n25 ->
<<2:3>>;
Enc1@input =:= n50 ->
<<3:3>>;
Enc1@input =:= n75 ->
<<4:3>>;
Enc1@input =:= n100 ->
<<5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
'enc_PHICH-Config'(Enc3@input)
end,
begin
Enc4@input = element(4, Val),
Enc5@bs = to_bitstring(Enc4@input, 8),
Enc5@bits = bit_size(Enc5@bs),
if Enc5@bits =:= 8 ->
Enc5@bs
end
end|begin
Enc6@input = element(5, Val),
Enc7@bs = to_bitstring(Enc6@input, 10),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 10 ->
Enc7@bs
end
end].


dec_MasterInformationBlock(Bytes) ->

%% attribute number 1 with type ENUMERATED
{Term1,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> n6;
1 -> n15;
2 -> n25;
3 -> n50;
4 -> n75;
5 -> n100;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[n6,n15,n25,n50,n75,n100]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 2 with type PHICH-Config
{Term2,Bytes2} = 'dec_PHICH-Config'(Bytes1),

%% attribute number 3 with type BIT STRING
{Term3,Bytes3} = begin
<<V2@V0:8/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes4} = begin
<<V3@V0:10/binary-unit:1,V3@Buf1/bitstring>> = Bytes3,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end,
{{'MasterInformationBlock',Term1,Term2,Term3,Term4},Bytes4}.

'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(2, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= type1XRTT ->
<<0:1,0:1>>;
Enc4@input =:= typeHRPD ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end;
true ->
if Enc4@input =:= type1XRTT ->
<<1:1,0:1>>;
Enc4@input =:= typeHRPD ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = to_bitstring(Enc6@input, 32),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 32 ->
Enc7@bs
end
end
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc10@bin = iolist_to_binary(Enc9@input),
Enc10@len = byte_size(Enc10@bin),
if Enc10@len < 128 ->
[Enc10@len|Enc10@bin];
Enc10@len < 16384 ->
[<<2:2,Enc10@len:14>>|Enc10@bin];
true ->
encode_fragmented(Enc10@bin, 8)
end
end
end
end|begin
Enc12@input = element(5, Val),
if Enc12@input =:= asn1_NOVALUE ->
[];
true ->
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Enc12@input)
end
end].
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:3,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> type1XRTT;
1 -> typeHRPD
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes3} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V3@V0:32/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V2,V3@Buf3}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V2,V3@Buf3}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 3 with type OCTET STRING
{Term3,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:7,V4@V5:V4@V3/binary-unit:8,V4@Buf6/bitstring>> ->
{V4@V5,V4@Buf6};
<<1:1,0:1,V4@V4:14,V4@V6:V4@V4/binary-unit:8,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,1:1,V4@V4:6,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7}  = decode_fragmented(V4@V4, V4@Buf5, 8),
{V4@V6,V4@Buf7}
end,
V4@Conv8 = binary_to_list(V4@V0),
{V4@Conv8,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 4 with type SEQUENCE
{Term4,Bytes5} = case Opt band 1 of
1 ->
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,
{{'HandoverFromEUTRAPreparationRequest-r8-IEs',Term1,Term2,Term3,Term4},Bytes5}.

'enc_HandoverFromEUTRAPreparationRequest'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_HandoverFromEUTRAPreparationRequest_criticalExtensions(Enc3@input)
end].
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'handoverFromEUTRAPreparationRequest-r8' ->
[<<0:2>>|'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes1)
end,
{{'handoverFromEUTRAPreparationRequest-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_HandoverFromEUTRAPreparationRequest_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_HandoverFromEUTRAPreparationRequest(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Bytes1),
{{'HandoverFromEUTRAPreparationRequest',Term1,Term2},Bytes2}.

'enc_DLInformationTransfer-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= dedicatedInfoNAS ->
[<<0:2>>|begin
Enc2@bin = iolist_to_binary(ChoiceVal),
Enc2@len = byte_size(Enc2@bin),
if Enc2@len < 128 ->
[Enc2@len|Enc2@bin];
Enc2@len < 16384 ->
[<<2:2,Enc2@len:14>>|Enc2@bin];
true ->
encode_fragmented(Enc2@bin, 8)
end
end];
ChoiceTag =:= 'dedicatedInfoCDMA2000-1XRTT' ->
[<<1:2>>|begin
Enc4@bin = iolist_to_binary(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
encode_fragmented(Enc4@bin, 8)
end
end];
ChoiceTag =:= 'dedicatedInfoCDMA2000-HRPD' ->
[<<2:2>>|begin
Enc6@bin = iolist_to_binary(ChoiceVal),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len < 128 ->
[Enc6@len|Enc6@bin];
Enc6@len < 16384 ->
[<<2:2,Enc6@len:14>>|Enc6@bin];
true ->
encode_fragmented(Enc6@bin, 8)
end
end]
end.

'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes1 of
<<0:1,V2@V3:7,V2@V5:V2@V3/binary-unit:8,V2@Buf6/bitstring>> ->
{V2@V5,V2@Buf6};
<<1:1,0:1,V2@V4:14,V2@V6:V2@V4/binary-unit:8,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,1:1,V2@V4:6,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7}  = decode_fragmented(V2@V4, V2@Buf5, 8),
{V2@V6,V2@Buf7}
end,
V2@Conv8 = binary_to_list(V2@V0),
{V2@Conv8,V2@Buf1}
end
end,
{{dedicatedInfoNAS,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes1 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary_to_list(V3@V0),
{V3@Conv8,V3@Buf1}
end
end,
{{'dedicatedInfoCDMA2000-1XRTT',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes1 of
<<0:1,V4@V3:7,V4@V5:V4@V3/binary-unit:8,V4@Buf6/bitstring>> ->
{V4@V5,V4@Buf6};
<<1:1,0:1,V4@V4:14,V4@V6:V4@V4/binary-unit:8,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,1:1,V4@V4:6,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7}  = decode_fragmented(V4@V4, V4@Buf5, 8),
{V4@V6,V4@Buf7}
end,
V4@Conv8 = binary_to_list(V4@V0),
{V4@Conv8,V4@Buf1}
end
end,
{{'dedicatedInfoCDMA2000-HRPD',Val},NewBytes}
end.
'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'DLInformationTransfer-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_DLInformationTransfer-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type CHOICE
{Term1,Bytes2} = 'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'DLInformationTransfer-r8-IEs',Term1,Term2},Bytes3}.

'enc_DLInformationTransfer'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_DLInformationTransfer_criticalExtensions(Enc3@input)
end].
'enc_DLInformationTransfer_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_DLInformationTransfer_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_DLInformationTransfer_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'dlInformationTransfer-r8' ->
[<<0:2>>|'enc_DLInformationTransfer-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_DLInformationTransfer_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_DLInformationTransfer-r8-IEs'(Bytes1)
end,
{{'dlInformationTransfer-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_DLInformationTransfer_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_DLInformationTransfer_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_DLInformationTransfer(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_DLInformationTransfer_criticalExtensions'(Bytes1),
{{'DLInformationTransfer',Term1,Term2},Bytes2}.

'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
Enc3@bs = to_bitstring(Enc2@input, 32),
Enc3@bits = bit_size(Enc3@bs),
if Enc3@bits =:= 32 ->
Enc3@bs
end
end,
begin
Enc4@input = element(3, Val),
Enc5@bin = iolist_to_binary(Enc4@input),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Enc6@input)
end
end].
'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes2} = begin
<<V2@V0:32/binary-unit:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V2,V2@Buf3}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V2,V2@Buf3}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:7,V3@V5:V3@V3/binary-unit:8,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<1:1,0:1,V3@V4:14,V3@V6:V3@V4/binary-unit:8,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,1:1,V3@V4:6,V3@Buf5/bitstring>> ->
{V3@V6,V3@Buf7}  = decode_fragmented(V3@V4, V3@Buf5, 8),
{V3@V6,V3@Buf7}
end,
V3@Conv8 = binary_to_list(V3@V0),
{V3@Conv8,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE
{Term3,Bytes4} = case Opt band 1 of
1 ->
'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,
{{'CSFBParametersResponseCDMA2000-r8-IEs',Term1,Term2,Term3},Bytes4}.

'enc_CSFBParametersResponseCDMA2000'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_CSFBParametersResponseCDMA2000_criticalExtensions(Enc3@input)
end].
'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'csfbParametersResponseCDMA2000-r8' ->
[<<0:1>>|'enc_CSFBParametersResponseCDMA2000-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_CSFBParametersResponseCDMA2000_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes1)
end,
{{'csfbParametersResponseCDMA2000-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_CSFBParametersResponseCDMA2000(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_CSFBParametersResponseCDMA2000_criticalExtensions'(Bytes1),
{{'CSFBParametersResponseCDMA2000',Term1,Term2},Bytes2}.

'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end|begin
Enc2@input = element(2, Val),
if Enc2@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Enc2@input)
end
end].
'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE
{Term1,Bytes2} = case Opt band 1 of
1 ->
'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Bytes1);
0 ->
{asn1_NOVALUE,Bytes1}
end,
{{'CSFBParametersRequestCDMA2000-r8-IEs',Term1},Bytes2}.

'enc_CSFBParametersRequestCDMA2000'(Val) ->
Enc1@input = element(2, Val),
enc_CSFBParametersRequestCDMA2000_criticalExtensions(Enc1@input).
'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'csfbParametersRequestCDMA2000-r8' ->
[<<0:1>>|'enc_CSFBParametersRequestCDMA2000-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_CSFBParametersRequestCDMA2000_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes1)
end,
{{'csfbParametersRequestCDMA2000-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_CSFBParametersRequestCDMA2000(Bytes) ->

%% attribute number 1 with type CHOICE
{Term1,Bytes1} = 'dec_CSFBParametersRequestCDMA2000_criticalExtensions'(Bytes),
{{'CSFBParametersRequestCDMA2000',Term1},Bytes1}.

'enc_DRB-CountInfo'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 32 =:= 0 ->
<<Enc3@input:32>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input bsr 32 =:= 0 ->
<<Enc5@input:32>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


'dec_DRB-CountInfo'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:32,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:32,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
{{'DRB-CountInfo',Term1,Term2,Term3},Bytes3}.

'enc_DRB-CountInfoList'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 12 ->
[<<Enc1@len:4>>|['enc_DRB-CountInfo'(Comp) || Comp <- Val]]
end.



'dec_DRB-CountInfoList'(Bytes) ->
%% Length with constraint {0,11}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
dec_components66(V1@V0, V1@Buf1, []).

'enc_CounterCheckResponse-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_DRB-CountInfoList'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'CounterCheckResponse-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_CounterCheckResponse-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type DRB-CountInfoList
{Term1,Bytes2} = 'dec_DRB-CountInfoList'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CounterCheckResponse-r8-IEs',Term1,Term2},Bytes3}.

'enc_CounterCheckResponse'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_CounterCheckResponse_criticalExtensions(Enc3@input)
end].
'enc_CounterCheckResponse_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'counterCheckResponse-r8' ->
[<<0:1>>|'enc_CounterCheckResponse-r8-IEs'(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_CounterCheckResponse_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CounterCheckResponse-r8-IEs'(Bytes1)
end,
{{'counterCheckResponse-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_CounterCheckResponse(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_CounterCheckResponse_criticalExtensions'(Bytes1),
{{'CounterCheckResponse',Term1,Term2},Bytes2}.

'enc_DRB-CountMSB-Info'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc1@input@sub = Enc1@input - 1,
if Enc1@input@sub bsr 5 =:= 0 ->
<<Enc1@input@sub:5>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input bsr 25 =:= 0 ->
<<Enc3@input:25>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
if Enc5@input bsr 25 =:= 0 ->
<<Enc5@input:25>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end].


'dec_DRB-CountMSB-Info'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:5,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
{V1@Add2,V1@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes2} = begin
<<V2@V0:25,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes3} = begin
<<V3@V0:25,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,
{{'DRB-CountMSB-Info',Term1,Term2,Term3},Bytes3}.

'enc_DRB-CountMSB-InfoList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 11 ->
[<<Enc1@len@sub:4>>|['enc_DRB-CountMSB-Info'(Comp) || Comp <- Val]]
end.



'dec_DRB-CountMSB-InfoList'(Bytes) ->
%% Length with constraint {1,11}
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components67(V1@Add2, V1@Buf1, []).

'enc_CounterCheck-r8-IEs'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc2@input = element(2, Val),
'enc_DRB-CountMSB-InfoList'(Enc2@input)
end|begin
Enc3@input = element(3, Val),
if Enc3@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CounterCheck-r8-IEs_nonCriticalExtension'(Enc3@input)
end
end].
'enc_CounterCheck-r8-IEs_nonCriticalExtension'(Val) ->
[].

'dec_CounterCheck-r8-IEs_nonCriticalExtension'(Bytes) ->
{{'CounterCheck-r8-IEs_nonCriticalExtension'},Bytes}.



'dec_CounterCheck-r8-IEs'(Bytes) ->
{Opt,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type DRB-CountMSB-InfoList
{Term1,Bytes2} = 'dec_DRB-CountMSB-InfoList'(Bytes1),

%% attribute number 2 with type SEQUENCE
{Term2,Bytes3} = case Opt band 1 of
1 ->
'dec_CounterCheck-r8-IEs_nonCriticalExtension'(Bytes2);
0 ->
{asn1_NOVALUE,Bytes2}
end,
{{'CounterCheck-r8-IEs',Term1,Term2},Bytes3}.

'enc_CounterCheck'(Val) ->
[begin
Enc1@input = element(2, Val),
if Enc1@input bsr 2 =:= 0 ->
<<Enc1@input:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end|begin
Enc3@input = element(3, Val),
enc_CounterCheck_criticalExtensions(Enc3@input)
end].
'enc_CounterCheck_criticalExtensions'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|enc_CounterCheck_criticalExtensions_c1(ChoiceVal)];
ChoiceTag =:= criticalExtensionsFuture ->
[<<1:1>>|enc_CounterCheck_criticalExtensions_criticalExtensionsFuture(ChoiceVal)]
end.
'enc_CounterCheck_criticalExtensions_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'counterCheck-r8' ->
[<<0:2>>|'enc_CounterCheck-r8-IEs'(ChoiceVal)];
ChoiceTag =:= spare3 ->
<<1:2>>;
ChoiceTag =:= spare2 ->
<<2:2>>;
ChoiceTag =:= spare1 ->
<<3:2>>
end.

dec_CounterCheck_criticalExtensions_c1(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CounterCheck-r8-IEs'(Bytes1)
end,
{{'counterCheck-r8',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Val) ->
[].

dec_CounterCheck_criticalExtensions_criticalExtensionsFuture(Bytes) ->
{{'CounterCheck_criticalExtensions_criticalExtensionsFuture'},Bytes}.


dec_CounterCheck_criticalExtensions(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_CounterCheck_criticalExtensions_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Bytes1)
end,
{{criticalExtensionsFuture,Val},NewBytes}
end.


dec_CounterCheck(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type CHOICE
{Term2,Bytes2} = 'dec_CounterCheck_criticalExtensions'(Bytes1),
{{'CounterCheck',Term1,Term2},Bytes2}.

'enc_UL-DCCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_UL-DCCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_UL-DCCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_UL-DCCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= csfbParametersRequestCDMA2000 ->
[<<0:4>>|enc_CSFBParametersRequestCDMA2000(ChoiceVal)];
ChoiceTag =:= measurementReport ->
[<<1:4>>|enc_MeasurementReport(ChoiceVal)];
ChoiceTag =:= rrcConnectionReconfigurationComplete ->
[<<2:4>>|enc_RRCConnectionReconfigurationComplete(ChoiceVal)];
ChoiceTag =:= rrcConnectionReestablishmentComplete ->
[<<3:4>>|enc_RRCConnectionReestablishmentComplete(ChoiceVal)];
ChoiceTag =:= rrcConnectionSetupComplete ->
[<<4:4>>|enc_RRCConnectionSetupComplete(ChoiceVal)];
ChoiceTag =:= securityModeComplete ->
[<<5:4>>|enc_SecurityModeComplete(ChoiceVal)];
ChoiceTag =:= securityModeFailure ->
[<<6:4>>|enc_SecurityModeFailure(ChoiceVal)];
ChoiceTag =:= ueCapabilityInformation ->
[<<7:4>>|enc_UECapabilityInformation(ChoiceVal)];
ChoiceTag =:= ulHandoverPreparationTransfer ->
[<<8:4>>|enc_ULHandoverPreparationTransfer(ChoiceVal)];
ChoiceTag =:= ulInformationTransfer ->
[<<9:4>>|enc_ULInformationTransfer(ChoiceVal)];
ChoiceTag =:= counterCheckResponse ->
[<<10:4>>|enc_CounterCheckResponse(ChoiceVal)];
ChoiceTag =:= spare5 ->
<<11:4>>;
ChoiceTag =:= spare4 ->
<<12:4>>;
ChoiceTag =:= spare3 ->
<<13:4>>;
ChoiceTag =:= spare2 ->
<<14:4>>;
ChoiceTag =:= spare1 ->
<<15:4>>
end.

'dec_UL-DCCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_CSFBParametersRequestCDMA2000(Bytes1)
end,
{{csfbParametersRequestCDMA2000,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_MeasurementReport(Bytes1)
end,
{{measurementReport,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_RRCConnectionReconfigurationComplete(Bytes1)
end,
{{rrcConnectionReconfigurationComplete,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_RRCConnectionReestablishmentComplete(Bytes1)
end,
{{rrcConnectionReestablishmentComplete,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_RRCConnectionSetupComplete(Bytes1)
end,
{{rrcConnectionSetupComplete,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_SecurityModeComplete(Bytes1)
end,
{{securityModeComplete,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_SecurityModeFailure(Bytes1)
end,
{{securityModeFailure,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_UECapabilityInformation(Bytes1)
end,
{{ueCapabilityInformation,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_ULHandoverPreparationTransfer(Bytes1)
end,
{{ulHandoverPreparationTransfer,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
dec_ULInformationTransfer(Bytes1)
end,
{{ulInformationTransfer,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
dec_CounterCheckResponse(Bytes1)
end,
{{counterCheckResponse,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_UL-DCCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_UL-DCCH-MessageType_messageClassExtension'(Bytes) ->
{{'UL-DCCH-MessageType_messageClassExtension'},Bytes}.



'dec_UL-DCCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UL-DCCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UL-DCCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_UL-DCCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_UL-DCCH-MessageType'(Enc1@input).


'dec_UL-DCCH-Message'(Bytes) ->

%% attribute number 1 with type UL-DCCH-MessageType
{Term1,Bytes1} = 'dec_UL-DCCH-MessageType'(Bytes),
{{'UL-DCCH-Message',Term1},Bytes1}.

'enc_UL-CCCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_UL-CCCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_UL-CCCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_UL-CCCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rrcConnectionReestablishmentRequest ->
[<<0:1>>|enc_RRCConnectionReestablishmentRequest(ChoiceVal)];
ChoiceTag =:= rrcConnectionRequest ->
[<<1:1>>|enc_RRCConnectionRequest(ChoiceVal)]
end.

'dec_UL-CCCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RRCConnectionReestablishmentRequest(Bytes1)
end,
{{rrcConnectionReestablishmentRequest,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RRCConnectionRequest(Bytes1)
end,
{{rrcConnectionRequest,Val},NewBytes}
end.
'enc_UL-CCCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_UL-CCCH-MessageType_messageClassExtension'(Bytes) ->
{{'UL-CCCH-MessageType_messageClassExtension'},Bytes}.



'dec_UL-CCCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_UL-CCCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_UL-CCCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_UL-CCCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_UL-CCCH-MessageType'(Enc1@input).


'dec_UL-CCCH-Message'(Bytes) ->

%% attribute number 1 with type UL-CCCH-MessageType
{Term1,Bytes1} = 'dec_UL-CCCH-MessageType'(Bytes),
{{'UL-CCCH-Message',Term1},Bytes1}.

'enc_DL-DCCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_DL-DCCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_DL-DCCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_DL-DCCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= csfbParametersResponseCDMA2000 ->
[<<0:4>>|enc_CSFBParametersResponseCDMA2000(ChoiceVal)];
ChoiceTag =:= dlInformationTransfer ->
[<<1:4>>|enc_DLInformationTransfer(ChoiceVal)];
ChoiceTag =:= handoverFromEUTRAPreparationRequest ->
[<<2:4>>|enc_HandoverFromEUTRAPreparationRequest(ChoiceVal)];
ChoiceTag =:= mobilityFromEUTRACommand ->
[<<3:4>>|enc_MobilityFromEUTRACommand(ChoiceVal)];
ChoiceTag =:= rrcConnectionReconfiguration ->
[<<4:4>>|enc_RRCConnectionReconfiguration(ChoiceVal)];
ChoiceTag =:= rrcConnectionRelease ->
[<<5:4>>|enc_RRCConnectionRelease(ChoiceVal)];
ChoiceTag =:= securityModeCommand ->
[<<6:4>>|enc_SecurityModeCommand(ChoiceVal)];
ChoiceTag =:= ueCapabilityEnquiry ->
[<<7:4>>|enc_UECapabilityEnquiry(ChoiceVal)];
ChoiceTag =:= counterCheck ->
[<<8:4>>|enc_CounterCheck(ChoiceVal)];
ChoiceTag =:= spare7 ->
<<9:4>>;
ChoiceTag =:= spare6 ->
<<10:4>>;
ChoiceTag =:= spare5 ->
<<11:4>>;
ChoiceTag =:= spare4 ->
<<12:4>>;
ChoiceTag =:= spare3 ->
<<13:4>>;
ChoiceTag =:= spare2 ->
<<14:4>>;
ChoiceTag =:= spare1 ->
<<15:4>>
end.

'dec_DL-DCCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:4,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_CSFBParametersResponseCDMA2000(Bytes1)
end,
{{csfbParametersResponseCDMA2000,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_DLInformationTransfer(Bytes1)
end,
{{dlInformationTransfer,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_HandoverFromEUTRAPreparationRequest(Bytes1)
end,
{{handoverFromEUTRAPreparationRequest,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_MobilityFromEUTRACommand(Bytes1)
end,
{{mobilityFromEUTRACommand,Val},NewBytes};
4 ->
{Val,NewBytes} = begin
dec_RRCConnectionReconfiguration(Bytes1)
end,
{{rrcConnectionReconfiguration,Val},NewBytes};
5 ->
{Val,NewBytes} = begin
dec_RRCConnectionRelease(Bytes1)
end,
{{rrcConnectionRelease,Val},NewBytes};
6 ->
{Val,NewBytes} = begin
dec_SecurityModeCommand(Bytes1)
end,
{{securityModeCommand,Val},NewBytes};
7 ->
{Val,NewBytes} = begin
dec_UECapabilityEnquiry(Bytes1)
end,
{{ueCapabilityEnquiry,Val},NewBytes};
8 ->
{Val,NewBytes} = begin
dec_CounterCheck(Bytes1)
end,
{{counterCheck,Val},NewBytes};
9 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare7,Val},NewBytes};
10 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare6,Val},NewBytes};
11 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare5,Val},NewBytes};
12 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare4,Val},NewBytes};
13 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare3,Val},NewBytes};
14 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare2,Val},NewBytes};
15 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes1}
end
end,
{{spare1,Val},NewBytes}
end.
'enc_DL-DCCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_DL-DCCH-MessageType_messageClassExtension'(Bytes) ->
{{'DL-DCCH-MessageType_messageClassExtension'},Bytes}.



'dec_DL-DCCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_DL-DCCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_DL-DCCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_DL-DCCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_DL-DCCH-MessageType'(Enc1@input).


'dec_DL-DCCH-Message'(Bytes) ->

%% attribute number 1 with type DL-DCCH-MessageType
{Term1,Bytes1} = 'dec_DL-DCCH-MessageType'(Bytes),
{{'DL-DCCH-Message',Term1},Bytes1}.

'enc_DL-CCCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_DL-CCCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_DL-CCCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_DL-CCCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= rrcConnectionReestablishment ->
[<<0:2>>|enc_RRCConnectionReestablishment(ChoiceVal)];
ChoiceTag =:= rrcConnectionReestablishmentReject ->
[<<1:2>>|enc_RRCConnectionReestablishmentReject(ChoiceVal)];
ChoiceTag =:= rrcConnectionReject ->
[<<2:2>>|enc_RRCConnectionReject(ChoiceVal)];
ChoiceTag =:= rrcConnectionSetup ->
[<<3:2>>|enc_RRCConnectionSetup(ChoiceVal)]
end.

'dec_DL-CCCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:2,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_RRCConnectionReestablishment(Bytes1)
end,
{{rrcConnectionReestablishment,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_RRCConnectionReestablishmentReject(Bytes1)
end,
{{rrcConnectionReestablishmentReject,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_RRCConnectionReject(Bytes1)
end,
{{rrcConnectionReject,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
dec_RRCConnectionSetup(Bytes1)
end,
{{rrcConnectionSetup,Val},NewBytes}
end.
'enc_DL-CCCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_DL-CCCH-MessageType_messageClassExtension'(Bytes) ->
{{'DL-CCCH-MessageType_messageClassExtension'},Bytes}.



'dec_DL-CCCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_DL-CCCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_DL-CCCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_DL-CCCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_DL-CCCH-MessageType'(Enc1@input).


'dec_DL-CCCH-Message'(Bytes) ->

%% attribute number 1 with type DL-CCCH-MessageType
{Term1,Bytes1} = 'dec_DL-CCCH-MessageType'(Bytes),
{{'DL-CCCH-Message',Term1},Bytes1}.

'enc_PCCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_PCCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_PCCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_PCCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= paging ->
enc_Paging(ChoiceVal)
end.

'dec_PCCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
ignore,
{0,Bytes}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_Paging(Bytes1)
end,
{{paging,Val},NewBytes}
end.
'enc_PCCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_PCCH-MessageType_messageClassExtension'(Bytes) ->
{{'PCCH-MessageType_messageClassExtension'},Bytes}.



'dec_PCCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_PCCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_PCCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_PCCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_PCCH-MessageType'(Enc1@input).


'dec_PCCH-Message'(Bytes) ->

%% attribute number 1 with type PCCH-MessageType
{Term1,Bytes1} = 'dec_PCCH-MessageType'(Bytes),
{{'PCCH-Message',Term1},Bytes1}.

'enc_BCCH-DL-SCH-MessageType'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= c1 ->
[<<0:1>>|'enc_BCCH-DL-SCH-MessageType_c1'(ChoiceVal)];
ChoiceTag =:= messageClassExtension ->
[<<1:1>>|'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(ChoiceVal)]
end.
'enc_BCCH-DL-SCH-MessageType_c1'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= systemInformation ->
[<<0:1>>|enc_SystemInformation(ChoiceVal)];
ChoiceTag =:= systemInformationBlockType1 ->
[<<1:1>>|enc_SystemInformationBlockType1(ChoiceVal)]
end.

'dec_BCCH-DL-SCH-MessageType_c1'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_SystemInformation(Bytes1)
end,
{{systemInformation,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SystemInformationBlockType1(Bytes1)
end,
{{systemInformationBlockType1,Val},NewBytes}
end.
'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(Val) ->
[].

'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(Bytes) ->
{{'BCCH-DL-SCH-MessageType_messageClassExtension'},Bytes}.



'dec_BCCH-DL-SCH-MessageType'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_BCCH-DL-SCH-MessageType_c1'(Bytes1)
end,
{{c1,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(Bytes1)
end,
{{messageClassExtension,Val},NewBytes}
end.
'enc_BCCH-DL-SCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_BCCH-DL-SCH-MessageType'(Enc1@input).


'dec_BCCH-DL-SCH-Message'(Bytes) ->

%% attribute number 1 with type BCCH-DL-SCH-MessageType
{Term1,Bytes1} = 'dec_BCCH-DL-SCH-MessageType'(Bytes),
{{'BCCH-DL-SCH-Message',Term1},Bytes1}.

'enc_BCCH-BCH-MessageType'(Val) ->
'enc_MasterInformationBlock'(Val).



'dec_BCCH-BCH-MessageType'(Bytes) ->
dec_MasterInformationBlock(Bytes).

'enc_BCCH-BCH-Message'(Val) ->
Enc1@input = element(2, Val),
'enc_BCCH-BCH-MessageType'(Enc1@input).


'dec_BCCH-BCH-Message'(Bytes) ->

%% attribute number 1 with type BCCH-BCH-MessageType
{Term1,Bytes1} = 'dec_BCCH-BCH-MessageType'(Bytes),
{{'BCCH-BCH-Message',Term1},Bytes1}.

'maxUTRA-TDD-Carrier'() ->
16.

'maxUTRA-FDD-Carrier'() ->
16.

'maxSI-Message'() ->
32.

'maxSIB-1'() ->
31.

'maxSIB'() ->
32.

'maxReportConfigId'() ->
32.

'maxRAT-Capabilities'() ->
8.

'maxPNOffset'() ->
511.

'maxPageRec'() ->
16.

'maxObjectId'() ->
32.

'maxMeasId'() ->
32.

'maxMCS-1'() ->
16.

'maxMBSFN-Allocations'() ->
8.

'maxGNFG'() ->
16.

'maxGERAN-SI'() ->
10.

'maxFreq'() ->
8.

'maxEARFCN'() ->
65535.

'maxDRB'() ->
11.

'maxCellReport'() ->
8.

'maxCellMeas'() ->
32.

'maxCellIntra'() ->
16.

'maxCellInter'() ->
16.

'maxCellBlack'() ->
16.

'maxCDMA-BandClass'() ->
32.

'maxBands'() ->
64.


%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<0:1,V1@V9:7,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10};
<<1:1,0:1,V1@V10:14,V1@Buf11/bitstring>> when V1@V10 =/= 0 ->
{V1@V10,V1@Buf11}
end,
<<V1@V12:V1@V6/unit:8,V1@Buf13/bitstring>> = V1@Buf7,
{V1@V12,V1@Buf13}
end,
V1@Int14 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int14,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end,
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = dec_BandInfoEUTRA(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components11(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components11(Num, Bytes, Acc) ->
{Term,Remain} = dec_SupportedBandEUTRA(Bytes),
dec_components11(Num-1, Remain, [Term|Acc]).

dec_components12(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components12(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-CapabilityRAT-Container'(Bytes),
dec_components12(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = dec_ReportConfigToAddMod(Bytes),
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components14(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components14(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PLMN-Identity'(Bytes),
dec_components14(Num-1, Remain, [Term|Acc]).

dec_components15(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components15(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasResultCDMA2000(Bytes),
dec_components15(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasResultGERAN(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasResultUTRA(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components18(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components18(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasResultEUTRA(Bytes),
dec_components18(Num-1, Remain, [Term|Acc]).

dec_components19(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components19(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellsToAddModUTRA-TDD'(Bytes),
dec_components19(Num-1, Remain, [Term|Acc]).

dec_components2(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components2(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V2@V0,V2@Buf1} = case Bytes of
<<0:1,V2@V3:5,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> bc0;
1 -> bc1;
2 -> bc2;
3 -> bc3;
4 -> bc4;
5 -> bc5;
6 -> bc6;
7 -> bc7;
8 -> bc8;
9 -> bc9;
10 -> bc10;
11 -> bc11;
12 -> bc12;
13 -> bc13;
14 -> bc14;
15 -> bc15;
16 -> bc16;
17 -> bc17;
18 -> spare14;
19 -> spare13;
20 -> spare12;
21 -> spare11;
22 -> spare10;
23 -> spare9;
24 -> spare8;
25 -> spare7;
26 -> spare6;
27 -> spare5;
28 -> spare4;
29 -> spare3;
30 -> spare2;
31 -> spare1
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<0:1,V2@V9:7,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10};
<<1:1,0:1,V2@V10:14,V2@Buf11/bitstring>> when V2@V10 =/= 0 ->
{V2@V10,V2@Buf11}
end,
<<V2@V12:V2@V6/unit:8,V2@Buf13/bitstring>> = V2@Buf7,
{V2@V12,V2@Buf13}
end,
V2@Int14 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int14,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end,
dec_components2(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellsToAddModUTRA-FDD'(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components21(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components21(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasObjectToAddMod(Bytes),
dec_components21(Num-1, Remain, [Term|Acc]).

dec_components22(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components22(Num, Bytes, Acc) ->
{Term,Remain} = dec_BlackCellsToAddMod(Bytes),
dec_components22(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = dec_CellsToAddMod(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components24(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components24(Num, Bytes, Acc) ->
{Term,Remain} = dec_CellsToAddModCDMA2000(Bytes),
dec_components24(Num-1, Remain, [Term|Acc]).

dec_components25(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components25(Num, Bytes, Acc) ->
{Term,Remain} = dec_MeasIdToAddMod(Bytes),
dec_components25(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V3@V0:5,V3@Buf1/bitstring>> = Bytes,
V3@Add2 = V3@V0 + 1,
{V3@Add2,V3@Buf1}
end,
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components27(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components27(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V4@V0:5,V4@Buf1/bitstring>> = Bytes,
V4@Add2 = V4@V0 + 1,
{V4@Add2,V4@Buf1}
end,
dec_components27(Num-1, Remain, [Term|Acc]).

dec_components28(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components28(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V5@V0:5,V5@Buf1/bitstring>> = Bytes,
V5@Add2 = V5@V0 + 1,
{V5@Add2,V5@Buf1}
end,
dec_components28(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V6@V0:8,V6@Buf1/bitstring>> = Bytes,
{V6@V0,V6@Buf1}
end,
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components3(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components3(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V7@V0,V7@Buf1} = case Bytes of
<<0:1,V7@V3:4,V7@Buf4/bitstring>> ->
V7@Int5 = case V7@V3 of
0 -> gsm450;
1 -> gsm480;
2 -> gsm710;
3 -> gsm750;
4 -> gsm810;
5 -> gsm850;
6 -> gsm900P;
7 -> gsm900E;
8 -> gsm900R;
9 -> gsm1800;
10 -> gsm1900;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V7@Int5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<0:1,V7@V6:6,V7@Buf7/bitstring>> ->
{V7@V6,V7@Buf7};
<<1:1,V7@Buf5/bitstring>> ->
{V7@V6,V7@Buf7} = case V7@Buf5 of
<<0:1,V7@V9:7,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10};
<<1:1,0:1,V7@V10:14,V7@Buf11/bitstring>> when V7@V10 =/= 0 ->
{V7@V10,V7@Buf11}
end,
<<V7@V12:V7@V6/unit:8,V7@Buf13/bitstring>> = V7@Buf7,
{V7@V12,V7@Buf13}
end,
V7@Int14 = case V7@V3 of
_ -> {asn1_enum,V7@V3}
end,
{V7@Int14,V7@Buf4}
end,
{V7@V0,V7@Buf1}
end,
dec_components3(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V8@V0:4,V8@Buf1/bitstring>> = Bytes,
{V8@V0,V8@Buf1}
end,
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V9@V0:4,V9@Buf1/bitstring>> = Bytes,
{V9@V0,V9@Buf1}
end,
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V10@V0:5,V10@Buf1/bitstring>> = Bytes,
V10@Add2 = V10@V0 + 1,
{V10@Add2,V10@Buf1}
end,
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components33(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components33(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V11@V0:10,V11@Buf1/bitstring>> = Bytes,
{V11@V0,V11@Buf1}
end,
dec_components33(Num-1, Remain, [Term|Acc]).

dec_components34(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components34(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V12@V0:11,V12@Buf1/bitstring>> = Bytes,
{V12@V0,V12@Buf1}
end,
dec_components34(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V13@V0:5,V13@Buf1/bitstring>> = Bytes,
V13@Add2 = V13@V0 + 1,
{V13@Add2,V13@Buf1}
end,
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DRB-ToAddMod'(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components37(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components37(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SRB-ToAddMod'(Bytes),
dec_components37(Num-1, Remain, [Term|Acc]).

dec_components38(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components38(Num, Bytes, Acc) ->
{Term,Remain} = dec_BandClassInfoCDMA2000(Bytes),
dec_components38(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V14@V0:9,V14@Buf1/bitstring>> = Bytes,
{V14@V0,V14@Buf1}
end,
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V15@V0,V15@Buf1} = case Bytes of
<<0:1,V15@V3:4,V15@Buf4/bitstring>> ->
V15@Int5 = case V15@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V15@Int5,V15@Buf4};
<<1:1,V15@Buf2/bitstring>> ->
{V15@V3,V15@Buf4} = case V15@Buf2 of
<<0:1,V15@V6:6,V15@Buf7/bitstring>> ->
{V15@V6,V15@Buf7};
<<1:1,V15@Buf5/bitstring>> ->
{V15@V6,V15@Buf7} = case V15@Buf5 of
<<0:1,V15@V9:7,V15@Buf10/bitstring>> when V15@V9 =/= 0 ->
{V15@V9,V15@Buf10};
<<1:1,0:1,V15@V10:14,V15@Buf11/bitstring>> when V15@V10 =/= 0 ->
{V15@V10,V15@Buf11}
end,
<<V15@V12:V15@V6/unit:8,V15@Buf13/bitstring>> = V15@Buf7,
{V15@V12,V15@Buf13}
end,
V15@Int14 = case V15@V3 of
_ -> {asn1_enum,V15@V3}
end,
{V15@Int14,V15@Buf4}
end,
{V15@V0,V15@Buf1}
end,
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components40(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components40(Num, Bytes, Acc) ->
{Term,Remain} = dec_NeighCellsPerBandclassCDMA2000(Bytes),
dec_components40(Num-1, Remain, [Term|Acc]).

dec_components41(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components41(Num, Bytes, Acc) ->
{Term,Remain} = dec_NeighCellCDMA2000(Bytes),
dec_components41(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = dec_CarrierFreqsInfoGERAN(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components43(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components43(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CarrierFreqUTRA-TDD'(Bytes),
dec_components43(Num-1, Remain, [Term|Acc]).

dec_components44(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components44(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CarrierFreqUTRA-FDD'(Bytes),
dec_components44(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = dec_PhysCellIdRange(Bytes),
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components46(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components46(Num, Bytes, Acc) ->
{Term,Remain} = dec_InterFreqNeighCellInfo(Bytes),
dec_components46(Num-1, Remain, [Term|Acc]).

dec_components47(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components47(Num, Bytes, Acc) ->
{Term,Remain} = dec_InterFreqCarrierFreqInfo(Bytes),
dec_components47(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = dec_PhysCellIdRange(Bytes),
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components49(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components49(Num, Bytes, Acc) ->
{Term,Remain} = dec_IntraFreqNeighCellInfo(Bytes),
dec_components49(Num-1, Remain, [Term|Acc]).

dec_components5(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components5(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V16@V0,V16@Buf1} = case Bytes of
<<0:1,V16@V3:4,V16@Buf4/bitstring>> ->
V16@Int5 = case V16@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V16@Int5,V16@Buf4};
<<1:1,V16@Buf2/bitstring>> ->
{V16@V3,V16@Buf4} = case V16@Buf2 of
<<0:1,V16@V6:6,V16@Buf7/bitstring>> ->
{V16@V6,V16@Buf7};
<<1:1,V16@Buf5/bitstring>> ->
{V16@V6,V16@Buf7} = case V16@Buf5 of
<<0:1,V16@V9:7,V16@Buf10/bitstring>> when V16@V9 =/= 0 ->
{V16@V9,V16@Buf10};
<<1:1,0:1,V16@V10:14,V16@Buf11/bitstring>> when V16@V10 =/= 0 ->
{V16@V10,V16@Buf11}
end,
<<V16@V12:V16@V6/unit:8,V16@Buf13/bitstring>> = V16@Buf7,
{V16@V12,V16@Buf13}
end,
V16@Int14 = case V16@V3 of
_ -> {asn1_enum,V16@V3}
end,
{V16@Int14,V16@Buf4}
end,
{V16@V0,V16@Buf1}
end,
dec_components5(Num-1, Remain, [Term|Acc]).

dec_components50(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components50(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_MBSFN-SubframeConfig'(Bytes),
dec_components50(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V17@V0,V17@Buf1} = case Bytes of
<<0:1,V17@V3:3,V17@Buf4/bitstring>> ->
V17@Int5 = case V17@V3 of
0 -> eutra;
1 -> utra;
2 -> 'geran-cs';
3 -> 'geran-ps';
4 -> 'cdma2000-1XRTT';
5 -> spare3;
6 -> spare2;
7 -> spare1
end,
{V17@Int5,V17@Buf4};
<<1:1,V17@Buf2/bitstring>> ->
{V17@V3,V17@Buf4} = case V17@Buf2 of
<<0:1,V17@V6:6,V17@Buf7/bitstring>> ->
{V17@V6,V17@Buf7};
<<1:1,V17@Buf5/bitstring>> ->
{V17@V6,V17@Buf7} = case V17@Buf5 of
<<0:1,V17@V9:7,V17@Buf10/bitstring>> when V17@V9 =/= 0 ->
{V17@V9,V17@Buf10};
<<1:1,0:1,V17@V10:14,V17@Buf11/bitstring>> when V17@V10 =/= 0 ->
{V17@V10,V17@Buf11}
end,
<<V17@V12:V17@V6/unit:8,V17@Buf13/bitstring>> = V17@Buf7,
{V17@V12,V17@Buf13}
end,
V17@Int14 = case V17@V3 of
_ -> {asn1_enum,V17@V3}
end,
{V17@Int14,V17@Buf4}
end,
{V17@V0,V17@Buf1}
end,
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components52(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components52(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V18@V0,V18@Buf1} = case Bytes of
<<0:1,V18@V3:4,V18@Buf4/bitstring>> ->
V18@Int5 = case V18@V3 of
0 -> sibType3;
1 -> sibType4;
2 -> sibType5;
3 -> sibType6;
4 -> sibType7;
5 -> sibType8;
6 -> sibType9;
7 -> sibType10;
8 -> sibType11;
9 -> spare7;
10 -> spare6;
11 -> spare5;
12 -> spare4;
13 -> spare3;
14 -> spare2;
15 -> spare1
end,
{V18@Int5,V18@Buf4};
<<1:1,V18@Buf2/bitstring>> ->
{V18@V3,V18@Buf4} = case V18@Buf2 of
<<0:1,V18@V6:6,V18@Buf7/bitstring>> ->
{V18@V6,V18@Buf7};
<<1:1,V18@Buf5/bitstring>> ->
{V18@V6,V18@Buf7} = case V18@Buf5 of
<<0:1,V18@V9:7,V18@Buf10/bitstring>> when V18@V9 =/= 0 ->
{V18@V9,V18@Buf10};
<<1:1,0:1,V18@V10:14,V18@Buf11/bitstring>> when V18@V10 =/= 0 ->
{V18@V10,V18@Buf11}
end,
<<V18@V12:V18@V6/unit:8,V18@Buf13/bitstring>> = V18@Buf7,
{V18@V12,V18@Buf13}
end,
V18@Int14 = case V18@V3 of
_ -> {asn1_enum,V18@V3}
end,
{V18@Int14,V18@Buf4}
end,
{V18@V0,V18@Buf1}
end,
dec_components52(Num-1, Remain, [Term|Acc]).

dec_components53(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components53(Num, Bytes, Acc) ->
{Term,Remain} = dec_SchedulingInfo(Bytes),
dec_components53(Num-1, Remain, [Term|Acc]).

dec_components54(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components54(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PLMN-IdentityInfo'(Bytes),
dec_components54(Num-1, Remain, [Term|Acc]).

dec_components55(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components55(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Bytes),
dec_components55(Num-1, Remain, [Term|Acc]).

dec_components56(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components56(Num, Bytes, Acc) ->
{Term,Remain} = dec_BandClassPriority1XRTT(Bytes),
dec_components56(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = dec_BandClassPriorityHRPD(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components58(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components58(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_FreqPriorityUTRA-TDD'(Bytes),
dec_components58(Num-1, Remain, [Term|Acc]).

dec_components59(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components59(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_FreqPriorityUTRA-FDD'(Bytes),
dec_components59(Num-1, Remain, [Term|Acc]).

dec_components6(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components6(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V19@V0,V19@Buf1} = case Bytes of
<<0:1,V19@V3:4,V19@Buf4/bitstring>> ->
V19@Int5 = case V19@V3 of
0 -> a;
1 -> b;
2 -> c;
3 -> d;
4 -> e;
5 -> f;
6 -> g;
7 -> h;
8 -> i;
9 -> j;
10 -> k;
11 -> l;
12 -> m;
13 -> n;
14 -> o;
15 -> p
end,
{V19@Int5,V19@Buf4};
<<1:1,V19@Buf2/bitstring>> ->
{V19@V3,V19@Buf4} = case V19@Buf2 of
<<0:1,V19@V6:6,V19@Buf7/bitstring>> ->
{V19@V6,V19@Buf7};
<<1:1,V19@Buf5/bitstring>> ->
{V19@V6,V19@Buf7} = case V19@Buf5 of
<<0:1,V19@V9:7,V19@Buf10/bitstring>> when V19@V9 =/= 0 ->
{V19@V9,V19@Buf10};
<<1:1,0:1,V19@V10:14,V19@Buf11/bitstring>> when V19@V10 =/= 0 ->
{V19@V10,V19@Buf11}
end,
<<V19@V12:V19@V6/unit:8,V19@Buf13/bitstring>> = V19@Buf7,
{V19@V12,V19@Buf13}
end,
V19@Int14 = case V19@V3 of
_ -> {asn1_enum,V19@V3}
end,
{V19@Int14,V19@Buf4}
end,
{V19@V0,V19@Buf1}
end,
dec_components6(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = dec_FreqsPriorityGERAN(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components61(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components61(Num, Bytes, Acc) ->
{Term,Remain} = dec_FreqPriorityEUTRA(Bytes),
dec_components61(Num-1, Remain, [Term|Acc]).

dec_components62(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components62(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V20@V0,V20@Buf1} = case Bytes of
<<0:1,V20@V3:7,V20@V5:V20@V3/binary-unit:8,V20@Buf6/bitstring>> ->
{V20@V5,V20@Buf6};
<<1:1,0:1,V20@V4:14,V20@V6:V20@V4/binary-unit:8,V20@Buf7/bitstring>> ->
{V20@V6,V20@Buf7};
<<1:1,1:1,V20@V4:6,V20@Buf5/bitstring>> ->
{V20@V6,V20@Buf7}  = decode_fragmented(V20@V4, V20@Buf5, 8),
{V20@V6,V20@Buf7}
end,
V20@Conv8 = binary_to_list(V20@V0),
{V20@Conv8,V20@Buf1}
end,
dec_components62(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V21@V0:4,V21@Buf1/bitstring>> = Bytes,
{V21@V0,V21@Buf1}
end,
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components64(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components64(Num, Bytes, Acc) ->
{Term,Remain} = dec_PagingRecord(Bytes),
dec_components64(Num-1, Remain, [Term|Acc]).

dec_components65(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components65(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V22@V0:5,V22@Buf1/bitstring>> = Bytes,
V22@Add2 = V22@V0 + 1,
<<V22@V3:V22@Add2/binary-unit:8,V22@Buf4/bitstring>> = V22@Buf1,
V22@Conv5 = binary_to_list(V22@V3),
{V22@Conv5,V22@Buf4}
end,
dec_components65(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DRB-CountInfo'(Bytes),
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components67(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components67(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_DRB-CountMSB-Info'(Bytes),
dec_components67(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V23@V0,V23@Buf1} = case Bytes of
<<0:1,V23@V3:4,V23@Buf4/bitstring>> ->
V23@Int5 = case V23@V3 of
0 -> bandI;
1 -> bandII;
2 -> bandIII;
3 -> bandIV;
4 -> bandV;
5 -> bandVI;
6 -> bandVII;
7 -> bandVIII;
8 -> bandIX;
9 -> bandX;
10 -> bandXI;
11 -> bandXII;
12 -> bandXIII;
13 -> bandXIV;
14 -> bandXV;
15 -> bandXVI
end,
{V23@Int5,V23@Buf4};
<<1:1,V23@Buf2/bitstring>> ->
{V23@V3,V23@Buf4} = case V23@Buf2 of
<<0:1,V23@V6:6,V23@Buf7/bitstring>> ->
{V23@V6,V23@Buf7};
<<1:1,V23@Buf5/bitstring>> ->
{V23@V6,V23@Buf7} = case V23@Buf5 of
<<0:1,V23@V9:7,V23@Buf10/bitstring>> when V23@V9 =/= 0 ->
{V23@V9,V23@Buf10};
<<1:1,0:1,V23@V10:14,V23@Buf11/bitstring>> when V23@V10 =/= 0 ->
{V23@V10,V23@Buf11}
end,
<<V23@V12:V23@V6/unit:8,V23@Buf13/bitstring>> = V23@Buf7,
{V23@V12,V23@Buf13}
end,
V23@Int14 = case V23@V3 of
_ -> {asn1_enum,V23@V3}
end,
{V23@Int14,V23@Buf4}
end,
{V23@V0,V23@Buf1}
end,
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components8(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components8(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_InterRAT-BandInfo'(Bytes),
dec_components8(Num-1, Remain, [Term|Acc]).

dec_components9(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components9(Num, Bytes, Acc) ->
{Term,Remain} = dec_InterFreqBandInfo(Bytes),
dec_components9(Num-1, Remain, [Term|Acc]).

adjust_size(Bs, Lb) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs:Sz/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end.

complete(InList) when is_list(InList) ->
    case list_to_bitstring(InList) of
        <<>> ->
            <<0>>;
        Res ->
            Sz = bit_size(Res),
            case Sz band 7 of
                0 ->
                    Res;
                Bits ->
                    <<Res:Sz/bitstring,0:(8 - Bits)>>
            end
    end;
complete(Bin) when is_binary(Bin) ->
    case Bin of
        <<>> ->
            <<0>>;
        _ ->
            Bin
    end;
complete(InList) when is_bitstring(InList) ->
    Sz = bit_size(InList),
    PadLen = 8 - Sz band 7,
    <<InList:Sz/bitstring,0:PadLen>>.

decode_compact_bit_string(Val) ->
    PadLen = (8 - bit_size(Val) band 7) band 7,
    {PadLen,<<Val/bitstring,0:PadLen>>}.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(<<0:1,Oct:7,Rest/bitstring>>) ->
    {Oct,Rest};
decode_length(<<2:2,Val:14,Rest/bitstring>>) ->
    {Val,Rest};
decode_length(<<3:2,_:14,_Rest/bitstring>>) ->
    exit({error,{asn1,{decode_length,{nyi,above_16k}}}}).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

int_to_bitlist(0) ->
    [];
int_to_bitlist(Int) ->
    [Int band 1|int_to_bitlist(Int bsr 1)].

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.

to_bitstring({0,Bs}, Lb) when is_binary(Bs) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end;
to_bitstring({Unused,Bs0}, Lb) when is_binary(Bs0) ->
    Sz = bit_size(Bs0) - Unused,
    if
        Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        true ->
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end;
to_bitstring(Bs, Lb) when is_bitstring(Bs) ->
    adjust_size(Bs, Lb);
to_bitstring(Int, Lb) when is_integer(Int), Int >= 0 ->
    L = int_to_bitlist(Int),
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb);
to_bitstring(L, Lb) when is_list(L) ->
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb).
