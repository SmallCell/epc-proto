%% Generated by the Erlang ASN.1 BER-compiler version:1.7
%% Purpose: encoder and decoder to the types in mod EUTRA-RRC

-module('EUTRA-RRC').
-include("EUTRA-RRC.hrl").
-define('RT_BER',asn1rt_ber_bin).
-asn1_info([{vsn,'1.7'},
            {module,'EUTRA-RRC'},
            {options,[{i,[47,108,111,99,97,108,47,118,108,97,100,47,114,101,112,111,115,47,109,109,101,115,105,109,47,101,112,99,95,112,114,111,116,111,47,115,114,99]},warnings,ber,errors,{cwd,[47,108,111,99,97,108,47,118,108,97,100,47,114,101,112,111,115,47,109,109,101,115,105,109,47,101,112,99,95,112,114,111,116,111]},{outdir,[47,108,111,99,97,108,47,118,108,97,100,47,114,101,112,111,115,47,109,109,101,115,105,109,47,101,112,99,95,112,114,111,116,111,47,115,114,99]},uper,verbose,asn1config,{i,[46]},{i,[47,108,111,99,97,108,47,118,108,97,100,47,114,101,112,111,115,47,109,109,101,115,105,109,47,101,112,99,95,112,114,111,116,111,47,112,114,111,116,111,99,111,108,115]}]}]).

-export([encoding_rule/0]).
-export([
'enc_UE-TimersAndConstants'/2,
'enc_SupportedBandList1XRTT'/2,
'enc_IRAT-ParametersCDMA2000-1XRTT'/2,
'enc_SupportedBandListHRPD'/2,
'enc_IRAT-ParametersCDMA2000-HRPD'/2,
'enc_SupportedBandGERAN'/2,
'enc_SupportedBandListGERAN'/2,
'enc_IRAT-ParametersGERAN'/2,
'enc_SupportedBandUTRA-TDD768'/2,
'enc_SupportedBandListUTRA-TDD768'/2,
'enc_IRAT-ParametersUTRA-TDD768'/2,
'enc_SupportedBandUTRA-TDD384'/2,
'enc_SupportedBandListUTRA-TDD384'/2,
'enc_IRAT-ParametersUTRA-TDD384'/2,
'enc_SupportedBandUTRA-TDD128'/2,
'enc_SupportedBandListUTRA-TDD128'/2,
'enc_IRAT-ParametersUTRA-TDD128'/2,
'enc_SupportedBandUTRA-FDD'/2,
'enc_SupportedBandListUTRA-FDD'/2,
'enc_IRAT-ParametersUTRA-FDD'/2,
'enc_InterRAT-BandInfo'/2,
'enc_InterRAT-BandList'/2,
'enc_InterFreqBandInfo'/2,
'enc_InterFreqBandList'/2,
'enc_BandInfoEUTRA'/2,
'enc_BandListEUTRA'/2,
'enc_MeasParameters'/2,
'enc_SupportedBandEUTRA'/2,
'enc_SupportedBandListEUTRA'/2,
'enc_RF-Parameters'/2,
'enc_PhyLayerParameters'/2,
'enc_PDCP-Parameters'/2,
'enc_AccessStratumRelease'/2,
'enc_UE-EUTRA-Capability'/2,
'enc_UE-CapabilityRAT-Container'/2,
'enc_UE-CapabilityRAT-ContainerList'/2,
'enc_S-TMSI'/2,
'enc_RRC-TransactionIdentifier'/2,
'enc_RAT-Type'/2,
'enc_RAND-CDMA2000'/2,
'enc_NeighCellConfig'/2,
'enc_MMEC'/2,
'enc_FilterCoefficient'/2,
'enc_DedicatedInfoNAS'/2,
'enc_DedicatedInfoCDMA2000'/2,
'enc_C-RNTI'/2,
'enc_TimeToTrigger'/2,
'enc_RSRQ-Range'/2,
'enc_RSRP-Range'/2,
'enc_ReportInterval'/2,
'enc_ReportConfigToAddMod'/2,
'enc_ReportConfigToAddModList'/2,
'enc_ThresholdCDMA2000'/2,
'enc_ThresholdGERAN'/2,
'enc_ThresholdUTRA'/2,
'enc_ReportConfigInterRAT'/2,
'enc_ReportConfigId'/2,
'enc_ThresholdEUTRA'/2,
'enc_ReportConfigEUTRA'/2,
'enc_QuantityConfigCDMA2000'/2,
'enc_QuantityConfigGERAN'/2,
'enc_QuantityConfigUTRA'/2,
'enc_QuantityConfigEUTRA'/2,
'enc_QuantityConfig'/2,
'enc_PLMN-IdentityList2'/2,
'enc_MeasResultCDMA2000'/2,
'enc_MeasResultListCDMA2000'/2,
'enc_MeasResultsCDMA2000'/2,
'enc_MeasResultGERAN'/2,
'enc_MeasResultListGERAN'/2,
'enc_MeasResultUTRA'/2,
'enc_MeasResultListUTRA'/2,
'enc_MeasResultEUTRA'/2,
'enc_MeasResultListEUTRA'/2,
'enc_MeasResults'/2,
'enc_CellsToAddModUTRA-TDD'/2,
'enc_CellsToAddModListUTRA-TDD'/2,
'enc_CellsToAddModUTRA-FDD'/2,
'enc_CellsToAddModListUTRA-FDD'/2,
'enc_MeasObjectUTRA'/2,
'enc_MeasObjectToAddMod'/2,
'enc_MeasObjectToAddModList'/2,
'enc_MeasObjectId'/2,
'enc_MeasObjectGERAN'/2,
'enc_BlackCellsToAddMod'/2,
'enc_BlackCellsToAddModList'/2,
'enc_CellsToAddMod'/2,
'enc_CellsToAddModList'/2,
'enc_MeasObjectEUTRA'/2,
'enc_CellsToAddModCDMA2000'/2,
'enc_CellsToAddModListCDMA2000'/2,
'enc_MeasObjectCDMA2000'/2,
'enc_MeasIdToAddMod'/2,
'enc_MeasIdToAddModList'/2,
'enc_MeasId'/2,
'enc_MeasGapConfig'/2,
'enc_ReportConfigToRemoveList'/2,
'enc_MeasObjectToRemoveList'/2,
'enc_MeasIdToRemoveList'/2,
'enc_MeasConfig'/2,
'enc_Hysteresis'/2,
'enc_AllowedMeasBandwidth'/2,
'enc_T-Reselection'/2,
'enc_TrackingAreaCode'/2,
'enc_SystemTimeInfoCDMA2000'/2,
'enc_SpeedStateScaleFactors'/2,
'enc_ReselectionThreshold'/2,
'enc_Q-OffsetRangeInterRAT'/2,
'enc_Q-OffsetRange'/2,
'enc_Q-RxLevMin'/2,
'enc_PreRegistrationZoneIdHRPD'/2,
'enc_SecondaryPreRegistrationZoneIdListHRPD'/2,
'enc_PreRegistrationInfoHRPD'/2,
'enc_MCC-MNC-Digit'/2,
'enc_MNC'/2,
'enc_MCC'/2,
'enc_PLMN-Identity'/2,
'enc_PhysCellIdUTRA-TDD'/2,
'enc_PhysCellIdUTRA-FDD'/2,
'enc_PhysCellIdGERAN'/2,
'enc_PhysCellIdCDMA2000'/2,
'enc_PhysCellIdRange'/2,
'enc_PhysCellId'/2,
'enc_MobilityStateParameters'/2,
'enc_MobilityParametersCDMA2000'/2,
'enc_CarrierFreqEUTRA'/2,
'enc_CarrierBandwidthEUTRA'/2,
'enc_MobilityControlInfo'/2,
'enc_CellGlobalIdCDMA2000'/2,
'enc_CellGlobalIdGERAN'/2,
'enc_CellGlobalIdUTRA'/2,
'enc_CellGlobalIdEUTRA'/2,
'enc_CSFB-RegistrationParam1XRTT'/2,
'enc_CellReselectionPriority'/2,
'enc_CellIndex'/2,
'enc_CellIndexList'/2,
'enc_CellIdentity'/2,
'enc_CDMA2000-Type'/2,
'enc_ExplicitListOfARFCNs'/2,
'enc_CarrierFreqsGERAN'/2,
'enc_CarrierFreqGERAN'/2,
'enc_CarrierFreqCDMA2000'/2,
'enc_BandIndicatorGERAN'/2,
'enc_BandclassCDMA2000'/2,
'enc_ARFCN-ValueUTRA'/2,
'enc_ARFCN-ValueGERAN'/2,
'enc_ARFCN-ValueEUTRA'/2,
'enc_ARFCN-ValueCDMA2000'/2,
'enc_AdditionalSpectrumEmission'/2,
'enc_ShortMAC-I'/2,
'enc_SecurityAlgorithmConfig'/2,
'enc_NextHopChainingCount'/2,
'enc_DeltaFList-PUCCH'/2,
'enc_UplinkPowerControlDedicated'/2,
'enc_UplinkPowerControlCommon'/2,
'enc_TPC-Index'/2,
'enc_TPC-PDCCH-Config'/2,
'enc_TimeAlignmentTimer'/2,
'enc_TDD-Config'/2,
'enc_N1-PUCCH-AN-PersistentList'/2,
'enc_SPS-ConfigUL'/2,
'enc_SPS-ConfigDL'/2,
'enc_SPS-Config'/2,
'enc_SoundingRS-UL-ConfigDedicated'/2,
'enc_SoundingRS-UL-ConfigCommon'/2,
'enc_SchedulingRequestConfig'/2,
'enc_T-StatusProhibit'/2,
'enc_T-Reordering'/2,
'enc_PollByte'/2,
'enc_PollPDU'/2,
'enc_T-PollRetransmit'/2,
'enc_SN-FieldLength'/2,
'enc_DL-UM-RLC'/2,
'enc_UL-UM-RLC'/2,
'enc_DL-AM-RLC'/2,
'enc_UL-AM-RLC'/2,
'enc_RLC-Config'/2,
'enc_DRB-ToReleaseList'/2,
'enc_DRB-ToAddMod'/2,
'enc_DRB-ToAddModList'/2,
'enc_SRB-ToAddMod'/2,
'enc_SRB-ToAddModList'/2,
'enc_RadioResourceConfigDedicated'/2,
'enc_UL-CyclicPrefixLength'/2,
'enc_PCCH-Config'/2,
'enc_BCCH-Config'/2,
'enc_RadioResourceConfigCommon'/2,
'enc_RadioResourceConfigCommonSIB'/2,
'enc_RACH-ConfigDedicated'/2,
'enc_RACH-ConfigCommon'/2,
'enc_UL-ReferenceSignalsPUSCH'/2,
'enc_PUSCH-ConfigDedicated'/2,
'enc_PUSCH-ConfigCommon'/2,
'enc_PUCCH-ConfigDedicated'/2,
'enc_PUCCH-ConfigCommon'/2,
'enc_PresenceAntennaPort1'/2,
'enc_PRACH-ConfigInfo'/2,
'enc_PRACH-Config'/2,
'enc_PRACH-ConfigSIB'/2,
'enc_P-Max'/2,
'enc_PhysicalConfigDedicated'/2,
'enc_PHICH-Config'/2,
'enc_PDSCH-ConfigDedicated'/2,
'enc_PDSCH-ConfigCommon'/2,
'enc_PDCP-Config'/2,
'enc_DRX-Config'/2,
'enc_MAC-MainConfig'/2,
'enc_LogicalChannelConfig'/2,
'enc_DRB-Identity'/2,
'enc_CQI-ReportPeriodic'/2,
'enc_CQI-ReportConfig'/2,
'enc_AntennaInfoDedicated'/2,
'enc_AntennaInfoCommon'/2,
'enc_SystemInformationBlockType11'/2,
'enc_SystemInformationBlockType10'/2,
'enc_SystemInformationBlockType9'/2,
'enc_BandClassInfoCDMA2000'/2,
'enc_BandClassListCDMA2000'/2,
'enc_PhysCellIdListCDMA2000'/2,
'enc_NeighCellsPerBandclassCDMA2000'/2,
'enc_NeighCellsPerBandclassListCDMA2000'/2,
'enc_NeighCellCDMA2000'/2,
'enc_NeighCellListCDMA2000'/2,
'enc_CellReselectionParametersCDMA2000'/2,
'enc_SystemInformationBlockType8'/2,
'enc_CarrierFreqsInfoGERAN'/2,
'enc_CarrierFreqsInfoListGERAN'/2,
'enc_SystemInformationBlockType7'/2,
'enc_CarrierFreqUTRA-TDD'/2,
'enc_CarrierFreqListUTRA-TDD'/2,
'enc_CarrierFreqUTRA-FDD'/2,
'enc_CarrierFreqListUTRA-FDD'/2,
'enc_SystemInformationBlockType6'/2,
'enc_InterFreqBlackCellList'/2,
'enc_InterFreqNeighCellInfo'/2,
'enc_InterFreqNeighCellList'/2,
'enc_InterFreqCarrierFreqInfo'/2,
'enc_InterFreqCarrierFreqList'/2,
'enc_SystemInformationBlockType5'/2,
'enc_IntraFreqBlackCellList'/2,
'enc_IntraFreqNeighCellInfo'/2,
'enc_IntraFreqNeighCellList'/2,
'enc_SystemInformationBlockType4'/2,
'enc_SystemInformationBlockType3'/2,
'enc_MBSFN-SubframeConfig'/2,
'enc_MBSFN-SubframeConfigList'/2,
'enc_AC-BarringConfig'/2,
'enc_SystemInformationBlockType2'/2,
'enc_ULInformationTransfer-r8-IEs'/2,
'enc_ULInformationTransfer'/2,
'enc_ULHandoverPreparationTransfer-r8-IEs'/2,
'enc_ULHandoverPreparationTransfer'/2,
'enc_UECapabilityInformation-r8-IEs'/2,
'enc_UECapabilityInformation'/2,
'enc_UE-CapabilityRequest'/2,
'enc_UECapabilityEnquiry-r8-IEs'/2,
'enc_UECapabilityEnquiry'/2,
'enc_SIB-Type'/2,
'enc_SIB-MappingInfo'/2,
'enc_SchedulingInfo'/2,
'enc_SchedulingInfoList'/2,
'enc_PLMN-IdentityInfo'/2,
'enc_PLMN-IdentityList'/2,
'enc_SystemInformationBlockType1'/2,
'enc_SystemInformation-r8-IEs'/2,
'enc_SystemInformation'/2,
'enc_SecurityModeFailure-r8-IEs'/2,
'enc_SecurityModeFailure'/2,
'enc_SecurityModeComplete-r8-IEs'/2,
'enc_SecurityModeComplete'/2,
'enc_SecurityConfigSMC'/2,
'enc_SecurityModeCommand-r8-IEs'/2,
'enc_SecurityModeCommand'/2,
'enc_RegisteredMME'/2,
'enc_RRCConnectionSetupComplete-r8-IEs'/2,
'enc_RRCConnectionSetupComplete'/2,
'enc_RRCConnectionSetup-r8-IEs'/2,
'enc_RRCConnectionSetup'/2,
'enc_EstablishmentCause'/2,
'enc_InitialUE-Identity'/2,
'enc_RRCConnectionRequest-r8-IEs'/2,
'enc_RRCConnectionRequest'/2,
'enc_BandClassPriority1XRTT'/2,
'enc_BandClassPriorityList1XRTT'/2,
'enc_BandClassPriorityHRPD'/2,
'enc_BandClassPriorityListHRPD'/2,
'enc_FreqPriorityUTRA-TDD'/2,
'enc_FreqPriorityListUTRA-TDD'/2,
'enc_FreqPriorityUTRA-FDD'/2,
'enc_FreqPriorityListUTRA-FDD'/2,
'enc_FreqsPriorityGERAN'/2,
'enc_FreqsPriorityListGERAN'/2,
'enc_FreqPriorityEUTRA'/2,
'enc_FreqPriorityListEUTRA'/2,
'enc_IdleModeMobilityControlInfo'/2,
'enc_RedirectedCarrierInfo'/2,
'enc_ReleaseCause'/2,
'enc_RRCConnectionRelease-r8-IEs'/2,
'enc_RRCConnectionRelease'/2,
'enc_RRCConnectionReject-r8-IEs'/2,
'enc_RRCConnectionReject'/2,
'enc_ReestablishmentCause'/2,
'enc_ReestabUE-Identity'/2,
'enc_RRCConnectionReestablishmentRequest-r8-IEs'/2,
'enc_RRCConnectionReestablishmentRequest'/2,
'enc_RRCConnectionReestablishmentReject-r8-IEs'/2,
'enc_RRCConnectionReestablishmentReject'/2,
'enc_RRCConnectionReestablishmentComplete-r8-IEs'/2,
'enc_RRCConnectionReestablishmentComplete'/2,
'enc_RRCConnectionReestablishment-r8-IEs'/2,
'enc_RRCConnectionReestablishment'/2,
'enc_RRCConnectionReconfigurationComplete-r8-IEs'/2,
'enc_RRCConnectionReconfigurationComplete'/2,
'enc_SecurityConfigHO'/2,
'enc_RRCConnectionReconfiguration-r8-IEs'/2,
'enc_RRCConnectionReconfiguration'/2,
'enc_IMSI-Digit'/2,
'enc_IMSI'/2,
'enc_PagingUE-Identity'/2,
'enc_PagingRecord'/2,
'enc_PagingRecordList'/2,
'enc_Paging'/2,
'enc_SystemInfoListGERAN'/2,
'enc_SI-OrPSI-GERAN'/2,
'enc_CellChangeOrder'/2,
'enc_Handover'/2,
'enc_MobilityFromEUTRACommand-r8-IEs'/2,
'enc_MobilityFromEUTRACommand'/2,
'enc_MeasurementReport-r8-IEs'/2,
'enc_MeasurementReport'/2,
'enc_MasterInformationBlock'/2,
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'/2,
'enc_HandoverFromEUTRAPreparationRequest'/2,
'enc_DLInformationTransfer-r8-IEs'/2,
'enc_DLInformationTransfer'/2,
'enc_CSFBParametersResponseCDMA2000-r8-IEs'/2,
'enc_CSFBParametersResponseCDMA2000'/2,
'enc_CSFBParametersRequestCDMA2000-r8-IEs'/2,
'enc_CSFBParametersRequestCDMA2000'/2,
'enc_DRB-CountInfo'/2,
'enc_DRB-CountInfoList'/2,
'enc_CounterCheckResponse-r8-IEs'/2,
'enc_CounterCheckResponse'/2,
'enc_DRB-CountMSB-Info'/2,
'enc_DRB-CountMSB-InfoList'/2,
'enc_CounterCheck-r8-IEs'/2,
'enc_CounterCheck'/2,
'enc_UL-DCCH-MessageType'/2,
'enc_UL-DCCH-Message'/2,
'enc_UL-CCCH-MessageType'/2,
'enc_UL-CCCH-Message'/2,
'enc_DL-DCCH-MessageType'/2,
'enc_DL-DCCH-Message'/2,
'enc_DL-CCCH-MessageType'/2,
'enc_DL-CCCH-Message'/2,
'enc_PCCH-MessageType'/2,
'enc_PCCH-Message'/2,
'enc_BCCH-DL-SCH-MessageType'/2,
'enc_BCCH-DL-SCH-Message'/2,
'enc_BCCH-BCH-MessageType'/2,
'enc_BCCH-BCH-Message'/2
]).

-export([
'dec_UE-TimersAndConstants'/2,
'dec_SupportedBandList1XRTT'/2,
'dec_IRAT-ParametersCDMA2000-1XRTT'/2,
'dec_SupportedBandListHRPD'/2,
'dec_IRAT-ParametersCDMA2000-HRPD'/2,
'dec_SupportedBandGERAN'/2,
'dec_SupportedBandListGERAN'/2,
'dec_IRAT-ParametersGERAN'/2,
'dec_SupportedBandUTRA-TDD768'/2,
'dec_SupportedBandListUTRA-TDD768'/2,
'dec_IRAT-ParametersUTRA-TDD768'/2,
'dec_SupportedBandUTRA-TDD384'/2,
'dec_SupportedBandListUTRA-TDD384'/2,
'dec_IRAT-ParametersUTRA-TDD384'/2,
'dec_SupportedBandUTRA-TDD128'/2,
'dec_SupportedBandListUTRA-TDD128'/2,
'dec_IRAT-ParametersUTRA-TDD128'/2,
'dec_SupportedBandUTRA-FDD'/2,
'dec_SupportedBandListUTRA-FDD'/2,
'dec_IRAT-ParametersUTRA-FDD'/2,
'dec_InterRAT-BandInfo'/2,
'dec_InterRAT-BandList'/2,
'dec_InterFreqBandInfo'/2,
'dec_InterFreqBandList'/2,
'dec_BandInfoEUTRA'/2,
'dec_BandListEUTRA'/2,
'dec_MeasParameters'/2,
'dec_SupportedBandEUTRA'/2,
'dec_SupportedBandListEUTRA'/2,
'dec_RF-Parameters'/2,
'dec_PhyLayerParameters'/2,
'dec_PDCP-Parameters'/2,
'dec_AccessStratumRelease'/2,
'dec_UE-EUTRA-Capability'/2,
'dec_UE-CapabilityRAT-Container'/2,
'dec_UE-CapabilityRAT-ContainerList'/2,
'dec_S-TMSI'/2,
'dec_RRC-TransactionIdentifier'/2,
'dec_RAT-Type'/2,
'dec_RAND-CDMA2000'/2,
'dec_NeighCellConfig'/2,
'dec_MMEC'/2,
'dec_FilterCoefficient'/2,
'dec_DedicatedInfoNAS'/2,
'dec_DedicatedInfoCDMA2000'/2,
'dec_C-RNTI'/2,
'dec_TimeToTrigger'/2,
'dec_RSRQ-Range'/2,
'dec_RSRP-Range'/2,
'dec_ReportInterval'/2,
'dec_ReportConfigToAddMod'/2,
'dec_ReportConfigToAddModList'/2,
'dec_ThresholdCDMA2000'/2,
'dec_ThresholdGERAN'/2,
'dec_ThresholdUTRA'/2,
'dec_ReportConfigInterRAT'/2,
'dec_ReportConfigId'/2,
'dec_ThresholdEUTRA'/2,
'dec_ReportConfigEUTRA'/2,
'dec_QuantityConfigCDMA2000'/2,
'dec_QuantityConfigGERAN'/2,
'dec_QuantityConfigUTRA'/2,
'dec_QuantityConfigEUTRA'/2,
'dec_QuantityConfig'/2,
'dec_PLMN-IdentityList2'/2,
'dec_MeasResultCDMA2000'/2,
'dec_MeasResultListCDMA2000'/2,
'dec_MeasResultsCDMA2000'/2,
'dec_MeasResultGERAN'/2,
'dec_MeasResultListGERAN'/2,
'dec_MeasResultUTRA'/2,
'dec_MeasResultListUTRA'/2,
'dec_MeasResultEUTRA'/2,
'dec_MeasResultListEUTRA'/2,
'dec_MeasResults'/2,
'dec_CellsToAddModUTRA-TDD'/2,
'dec_CellsToAddModListUTRA-TDD'/2,
'dec_CellsToAddModUTRA-FDD'/2,
'dec_CellsToAddModListUTRA-FDD'/2,
'dec_MeasObjectUTRA'/2,
'dec_MeasObjectToAddMod'/2,
'dec_MeasObjectToAddModList'/2,
'dec_MeasObjectId'/2,
'dec_MeasObjectGERAN'/2,
'dec_BlackCellsToAddMod'/2,
'dec_BlackCellsToAddModList'/2,
'dec_CellsToAddMod'/2,
'dec_CellsToAddModList'/2,
'dec_MeasObjectEUTRA'/2,
'dec_CellsToAddModCDMA2000'/2,
'dec_CellsToAddModListCDMA2000'/2,
'dec_MeasObjectCDMA2000'/2,
'dec_MeasIdToAddMod'/2,
'dec_MeasIdToAddModList'/2,
'dec_MeasId'/2,
'dec_MeasGapConfig'/2,
'dec_ReportConfigToRemoveList'/2,
'dec_MeasObjectToRemoveList'/2,
'dec_MeasIdToRemoveList'/2,
'dec_MeasConfig'/2,
'dec_Hysteresis'/2,
'dec_AllowedMeasBandwidth'/2,
'dec_T-Reselection'/2,
'dec_TrackingAreaCode'/2,
'dec_SystemTimeInfoCDMA2000'/2,
'dec_SpeedStateScaleFactors'/2,
'dec_ReselectionThreshold'/2,
'dec_Q-OffsetRangeInterRAT'/2,
'dec_Q-OffsetRange'/2,
'dec_Q-RxLevMin'/2,
'dec_PreRegistrationZoneIdHRPD'/2,
'dec_SecondaryPreRegistrationZoneIdListHRPD'/2,
'dec_PreRegistrationInfoHRPD'/2,
'dec_MCC-MNC-Digit'/2,
'dec_MNC'/2,
'dec_MCC'/2,
'dec_PLMN-Identity'/2,
'dec_PhysCellIdUTRA-TDD'/2,
'dec_PhysCellIdUTRA-FDD'/2,
'dec_PhysCellIdGERAN'/2,
'dec_PhysCellIdCDMA2000'/2,
'dec_PhysCellIdRange'/2,
'dec_PhysCellId'/2,
'dec_MobilityStateParameters'/2,
'dec_MobilityParametersCDMA2000'/2,
'dec_CarrierFreqEUTRA'/2,
'dec_CarrierBandwidthEUTRA'/2,
'dec_MobilityControlInfo'/2,
'dec_CellGlobalIdCDMA2000'/2,
'dec_CellGlobalIdGERAN'/2,
'dec_CellGlobalIdUTRA'/2,
'dec_CellGlobalIdEUTRA'/2,
'dec_CSFB-RegistrationParam1XRTT'/2,
'dec_CellReselectionPriority'/2,
'dec_CellIndex'/2,
'dec_CellIndexList'/2,
'dec_CellIdentity'/2,
'dec_CDMA2000-Type'/2,
'dec_ExplicitListOfARFCNs'/2,
'dec_CarrierFreqsGERAN'/2,
'dec_CarrierFreqGERAN'/2,
'dec_CarrierFreqCDMA2000'/2,
'dec_BandIndicatorGERAN'/2,
'dec_BandclassCDMA2000'/2,
'dec_ARFCN-ValueUTRA'/2,
'dec_ARFCN-ValueGERAN'/2,
'dec_ARFCN-ValueEUTRA'/2,
'dec_ARFCN-ValueCDMA2000'/2,
'dec_AdditionalSpectrumEmission'/2,
'dec_ShortMAC-I'/2,
'dec_SecurityAlgorithmConfig'/2,
'dec_NextHopChainingCount'/2,
'dec_DeltaFList-PUCCH'/2,
'dec_UplinkPowerControlDedicated'/2,
'dec_UplinkPowerControlCommon'/2,
'dec_TPC-Index'/2,
'dec_TPC-PDCCH-Config'/2,
'dec_TimeAlignmentTimer'/2,
'dec_TDD-Config'/2,
'dec_N1-PUCCH-AN-PersistentList'/2,
'dec_SPS-ConfigUL'/2,
'dec_SPS-ConfigDL'/2,
'dec_SPS-Config'/2,
'dec_SoundingRS-UL-ConfigDedicated'/2,
'dec_SoundingRS-UL-ConfigCommon'/2,
'dec_SchedulingRequestConfig'/2,
'dec_T-StatusProhibit'/2,
'dec_T-Reordering'/2,
'dec_PollByte'/2,
'dec_PollPDU'/2,
'dec_T-PollRetransmit'/2,
'dec_SN-FieldLength'/2,
'dec_DL-UM-RLC'/2,
'dec_UL-UM-RLC'/2,
'dec_DL-AM-RLC'/2,
'dec_UL-AM-RLC'/2,
'dec_RLC-Config'/2,
'dec_DRB-ToReleaseList'/2,
'dec_DRB-ToAddMod'/2,
'dec_DRB-ToAddModList'/2,
'dec_SRB-ToAddMod'/2,
'dec_SRB-ToAddModList'/2,
'dec_RadioResourceConfigDedicated'/2,
'dec_UL-CyclicPrefixLength'/2,
'dec_PCCH-Config'/2,
'dec_BCCH-Config'/2,
'dec_RadioResourceConfigCommon'/2,
'dec_RadioResourceConfigCommonSIB'/2,
'dec_RACH-ConfigDedicated'/2,
'dec_RACH-ConfigCommon'/2,
'dec_UL-ReferenceSignalsPUSCH'/2,
'dec_PUSCH-ConfigDedicated'/2,
'dec_PUSCH-ConfigCommon'/2,
'dec_PUCCH-ConfigDedicated'/2,
'dec_PUCCH-ConfigCommon'/2,
'dec_PresenceAntennaPort1'/2,
'dec_PRACH-ConfigInfo'/2,
'dec_PRACH-Config'/2,
'dec_PRACH-ConfigSIB'/2,
'dec_P-Max'/2,
'dec_PhysicalConfigDedicated'/2,
'dec_PHICH-Config'/2,
'dec_PDSCH-ConfigDedicated'/2,
'dec_PDSCH-ConfigCommon'/2,
'dec_PDCP-Config'/2,
'dec_DRX-Config'/2,
'dec_MAC-MainConfig'/2,
'dec_LogicalChannelConfig'/2,
'dec_DRB-Identity'/2,
'dec_CQI-ReportPeriodic'/2,
'dec_CQI-ReportConfig'/2,
'dec_AntennaInfoDedicated'/2,
'dec_AntennaInfoCommon'/2,
'dec_SystemInformationBlockType11'/2,
'dec_SystemInformationBlockType10'/2,
'dec_SystemInformationBlockType9'/2,
'dec_BandClassInfoCDMA2000'/2,
'dec_BandClassListCDMA2000'/2,
'dec_PhysCellIdListCDMA2000'/2,
'dec_NeighCellsPerBandclassCDMA2000'/2,
'dec_NeighCellsPerBandclassListCDMA2000'/2,
'dec_NeighCellCDMA2000'/2,
'dec_NeighCellListCDMA2000'/2,
'dec_CellReselectionParametersCDMA2000'/2,
'dec_SystemInformationBlockType8'/2,
'dec_CarrierFreqsInfoGERAN'/2,
'dec_CarrierFreqsInfoListGERAN'/2,
'dec_SystemInformationBlockType7'/2,
'dec_CarrierFreqUTRA-TDD'/2,
'dec_CarrierFreqListUTRA-TDD'/2,
'dec_CarrierFreqUTRA-FDD'/2,
'dec_CarrierFreqListUTRA-FDD'/2,
'dec_SystemInformationBlockType6'/2,
'dec_InterFreqBlackCellList'/2,
'dec_InterFreqNeighCellInfo'/2,
'dec_InterFreqNeighCellList'/2,
'dec_InterFreqCarrierFreqInfo'/2,
'dec_InterFreqCarrierFreqList'/2,
'dec_SystemInformationBlockType5'/2,
'dec_IntraFreqBlackCellList'/2,
'dec_IntraFreqNeighCellInfo'/2,
'dec_IntraFreqNeighCellList'/2,
'dec_SystemInformationBlockType4'/2,
'dec_SystemInformationBlockType3'/2,
'dec_MBSFN-SubframeConfig'/2,
'dec_MBSFN-SubframeConfigList'/2,
'dec_AC-BarringConfig'/2,
'dec_SystemInformationBlockType2'/2,
'dec_ULInformationTransfer-r8-IEs'/2,
'dec_ULInformationTransfer'/2,
'dec_ULHandoverPreparationTransfer-r8-IEs'/2,
'dec_ULHandoverPreparationTransfer'/2,
'dec_UECapabilityInformation-r8-IEs'/2,
'dec_UECapabilityInformation'/2,
'dec_UE-CapabilityRequest'/2,
'dec_UECapabilityEnquiry-r8-IEs'/2,
'dec_UECapabilityEnquiry'/2,
'dec_SIB-Type'/2,
'dec_SIB-MappingInfo'/2,
'dec_SchedulingInfo'/2,
'dec_SchedulingInfoList'/2,
'dec_PLMN-IdentityInfo'/2,
'dec_PLMN-IdentityList'/2,
'dec_SystemInformationBlockType1'/2,
'dec_SystemInformation-r8-IEs'/2,
'dec_SystemInformation'/2,
'dec_SecurityModeFailure-r8-IEs'/2,
'dec_SecurityModeFailure'/2,
'dec_SecurityModeComplete-r8-IEs'/2,
'dec_SecurityModeComplete'/2,
'dec_SecurityConfigSMC'/2,
'dec_SecurityModeCommand-r8-IEs'/2,
'dec_SecurityModeCommand'/2,
'dec_RegisteredMME'/2,
'dec_RRCConnectionSetupComplete-r8-IEs'/2,
'dec_RRCConnectionSetupComplete'/2,
'dec_RRCConnectionSetup-r8-IEs'/2,
'dec_RRCConnectionSetup'/2,
'dec_EstablishmentCause'/2,
'dec_InitialUE-Identity'/2,
'dec_RRCConnectionRequest-r8-IEs'/2,
'dec_RRCConnectionRequest'/2,
'dec_BandClassPriority1XRTT'/2,
'dec_BandClassPriorityList1XRTT'/2,
'dec_BandClassPriorityHRPD'/2,
'dec_BandClassPriorityListHRPD'/2,
'dec_FreqPriorityUTRA-TDD'/2,
'dec_FreqPriorityListUTRA-TDD'/2,
'dec_FreqPriorityUTRA-FDD'/2,
'dec_FreqPriorityListUTRA-FDD'/2,
'dec_FreqsPriorityGERAN'/2,
'dec_FreqsPriorityListGERAN'/2,
'dec_FreqPriorityEUTRA'/2,
'dec_FreqPriorityListEUTRA'/2,
'dec_IdleModeMobilityControlInfo'/2,
'dec_RedirectedCarrierInfo'/2,
'dec_ReleaseCause'/2,
'dec_RRCConnectionRelease-r8-IEs'/2,
'dec_RRCConnectionRelease'/2,
'dec_RRCConnectionReject-r8-IEs'/2,
'dec_RRCConnectionReject'/2,
'dec_ReestablishmentCause'/2,
'dec_ReestabUE-Identity'/2,
'dec_RRCConnectionReestablishmentRequest-r8-IEs'/2,
'dec_RRCConnectionReestablishmentRequest'/2,
'dec_RRCConnectionReestablishmentReject-r8-IEs'/2,
'dec_RRCConnectionReestablishmentReject'/2,
'dec_RRCConnectionReestablishmentComplete-r8-IEs'/2,
'dec_RRCConnectionReestablishmentComplete'/2,
'dec_RRCConnectionReestablishment-r8-IEs'/2,
'dec_RRCConnectionReestablishment'/2,
'dec_RRCConnectionReconfigurationComplete-r8-IEs'/2,
'dec_RRCConnectionReconfigurationComplete'/2,
'dec_SecurityConfigHO'/2,
'dec_RRCConnectionReconfiguration-r8-IEs'/2,
'dec_RRCConnectionReconfiguration'/2,
'dec_IMSI-Digit'/2,
'dec_IMSI'/2,
'dec_PagingUE-Identity'/2,
'dec_PagingRecord'/2,
'dec_PagingRecordList'/2,
'dec_Paging'/2,
'dec_SystemInfoListGERAN'/2,
'dec_SI-OrPSI-GERAN'/2,
'dec_CellChangeOrder'/2,
'dec_Handover'/2,
'dec_MobilityFromEUTRACommand-r8-IEs'/2,
'dec_MobilityFromEUTRACommand'/2,
'dec_MeasurementReport-r8-IEs'/2,
'dec_MeasurementReport'/2,
'dec_MasterInformationBlock'/2,
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'/2,
'dec_HandoverFromEUTRAPreparationRequest'/2,
'dec_DLInformationTransfer-r8-IEs'/2,
'dec_DLInformationTransfer'/2,
'dec_CSFBParametersResponseCDMA2000-r8-IEs'/2,
'dec_CSFBParametersResponseCDMA2000'/2,
'dec_CSFBParametersRequestCDMA2000-r8-IEs'/2,
'dec_CSFBParametersRequestCDMA2000'/2,
'dec_DRB-CountInfo'/2,
'dec_DRB-CountInfoList'/2,
'dec_CounterCheckResponse-r8-IEs'/2,
'dec_CounterCheckResponse'/2,
'dec_DRB-CountMSB-Info'/2,
'dec_DRB-CountMSB-InfoList'/2,
'dec_CounterCheck-r8-IEs'/2,
'dec_CounterCheck'/2,
'dec_UL-DCCH-MessageType'/2,
'dec_UL-DCCH-Message'/2,
'dec_UL-CCCH-MessageType'/2,
'dec_UL-CCCH-Message'/2,
'dec_DL-DCCH-MessageType'/2,
'dec_DL-DCCH-Message'/2,
'dec_DL-CCCH-MessageType'/2,
'dec_DL-CCCH-Message'/2,
'dec_PCCH-MessageType'/2,
'dec_PCCH-Message'/2,
'dec_BCCH-DL-SCH-MessageType'/2,
'dec_BCCH-DL-SCH-Message'/2,
'dec_BCCH-BCH-MessageType'/2,
'dec_BCCH-BCH-Message'/2
]).

-export([
'dec_UE-TimersAndConstants'/3,
'dec_SupportedBandList1XRTT'/3,
'dec_IRAT-ParametersCDMA2000-1XRTT'/3,
'dec_SupportedBandListHRPD'/3,
'dec_IRAT-ParametersCDMA2000-HRPD'/3,
'dec_SupportedBandGERAN'/3,
'dec_SupportedBandListGERAN'/3,
'dec_IRAT-ParametersGERAN'/3,
'dec_SupportedBandUTRA-TDD768'/3,
'dec_SupportedBandListUTRA-TDD768'/3,
'dec_IRAT-ParametersUTRA-TDD768'/3,
'dec_SupportedBandUTRA-TDD384'/3,
'dec_SupportedBandListUTRA-TDD384'/3,
'dec_IRAT-ParametersUTRA-TDD384'/3,
'dec_SupportedBandUTRA-TDD128'/3,
'dec_SupportedBandListUTRA-TDD128'/3,
'dec_IRAT-ParametersUTRA-TDD128'/3,
'dec_SupportedBandUTRA-FDD'/3,
'dec_SupportedBandListUTRA-FDD'/3,
'dec_IRAT-ParametersUTRA-FDD'/3,
'dec_InterRAT-BandInfo'/3,
'dec_InterRAT-BandList'/3,
'dec_InterFreqBandInfo'/3,
'dec_InterFreqBandList'/3,
'dec_BandInfoEUTRA'/3,
'dec_BandListEUTRA'/3,
'dec_MeasParameters'/3,
'dec_SupportedBandEUTRA'/3,
'dec_SupportedBandListEUTRA'/3,
'dec_RF-Parameters'/3,
'dec_PhyLayerParameters'/3,
'dec_PDCP-Parameters'/3,
'dec_AccessStratumRelease'/3,
'dec_UE-EUTRA-Capability'/3,
'dec_UE-CapabilityRAT-Container'/3,
'dec_UE-CapabilityRAT-ContainerList'/3,
'dec_S-TMSI'/3,
'dec_RRC-TransactionIdentifier'/3,
'dec_RAT-Type'/3,
'dec_RAND-CDMA2000'/3,
'dec_NeighCellConfig'/3,
'dec_MMEC'/3,
'dec_FilterCoefficient'/3,
'dec_DedicatedInfoNAS'/3,
'dec_DedicatedInfoCDMA2000'/3,
'dec_C-RNTI'/3,
'dec_TimeToTrigger'/3,
'dec_RSRQ-Range'/3,
'dec_RSRP-Range'/3,
'dec_ReportInterval'/3,
'dec_ReportConfigToAddMod'/3,
'dec_ReportConfigToAddModList'/3,
'dec_ThresholdCDMA2000'/3,
'dec_ThresholdGERAN'/3,
'dec_ThresholdUTRA'/3,
'dec_ReportConfigInterRAT'/3,
'dec_ReportConfigId'/3,
'dec_ThresholdEUTRA'/3,
'dec_ReportConfigEUTRA'/3,
'dec_QuantityConfigCDMA2000'/3,
'dec_QuantityConfigGERAN'/3,
'dec_QuantityConfigUTRA'/3,
'dec_QuantityConfigEUTRA'/3,
'dec_QuantityConfig'/3,
'dec_PLMN-IdentityList2'/3,
'dec_MeasResultCDMA2000'/3,
'dec_MeasResultListCDMA2000'/3,
'dec_MeasResultsCDMA2000'/3,
'dec_MeasResultGERAN'/3,
'dec_MeasResultListGERAN'/3,
'dec_MeasResultUTRA'/3,
'dec_MeasResultListUTRA'/3,
'dec_MeasResultEUTRA'/3,
'dec_MeasResultListEUTRA'/3,
'dec_MeasResults'/3,
'dec_CellsToAddModUTRA-TDD'/3,
'dec_CellsToAddModListUTRA-TDD'/3,
'dec_CellsToAddModUTRA-FDD'/3,
'dec_CellsToAddModListUTRA-FDD'/3,
'dec_MeasObjectUTRA'/3,
'dec_MeasObjectToAddMod'/3,
'dec_MeasObjectToAddModList'/3,
'dec_MeasObjectId'/3,
'dec_MeasObjectGERAN'/3,
'dec_BlackCellsToAddMod'/3,
'dec_BlackCellsToAddModList'/3,
'dec_CellsToAddMod'/3,
'dec_CellsToAddModList'/3,
'dec_MeasObjectEUTRA'/3,
'dec_CellsToAddModCDMA2000'/3,
'dec_CellsToAddModListCDMA2000'/3,
'dec_MeasObjectCDMA2000'/3,
'dec_MeasIdToAddMod'/3,
'dec_MeasIdToAddModList'/3,
'dec_MeasId'/3,
'dec_MeasGapConfig'/3,
'dec_ReportConfigToRemoveList'/3,
'dec_MeasObjectToRemoveList'/3,
'dec_MeasIdToRemoveList'/3,
'dec_MeasConfig'/3,
'dec_Hysteresis'/3,
'dec_AllowedMeasBandwidth'/3,
'dec_T-Reselection'/3,
'dec_TrackingAreaCode'/3,
'dec_SystemTimeInfoCDMA2000'/3,
'dec_SpeedStateScaleFactors'/3,
'dec_ReselectionThreshold'/3,
'dec_Q-OffsetRangeInterRAT'/3,
'dec_Q-OffsetRange'/3,
'dec_Q-RxLevMin'/3,
'dec_PreRegistrationZoneIdHRPD'/3,
'dec_SecondaryPreRegistrationZoneIdListHRPD'/3,
'dec_PreRegistrationInfoHRPD'/3,
'dec_MCC-MNC-Digit'/3,
'dec_MNC'/3,
'dec_MCC'/3,
'dec_PLMN-Identity'/3,
'dec_PhysCellIdUTRA-TDD'/3,
'dec_PhysCellIdUTRA-FDD'/3,
'dec_PhysCellIdGERAN'/3,
'dec_PhysCellIdCDMA2000'/3,
'dec_PhysCellIdRange'/3,
'dec_PhysCellId'/3,
'dec_MobilityStateParameters'/3,
'dec_MobilityParametersCDMA2000'/3,
'dec_CarrierFreqEUTRA'/3,
'dec_CarrierBandwidthEUTRA'/3,
'dec_MobilityControlInfo'/3,
'dec_CellGlobalIdCDMA2000'/3,
'dec_CellGlobalIdGERAN'/3,
'dec_CellGlobalIdUTRA'/3,
'dec_CellGlobalIdEUTRA'/3,
'dec_CSFB-RegistrationParam1XRTT'/3,
'dec_CellReselectionPriority'/3,
'dec_CellIndex'/3,
'dec_CellIndexList'/3,
'dec_CellIdentity'/3,
'dec_CDMA2000-Type'/3,
'dec_ExplicitListOfARFCNs'/3,
'dec_CarrierFreqsGERAN'/3,
'dec_CarrierFreqGERAN'/3,
'dec_CarrierFreqCDMA2000'/3,
'dec_BandIndicatorGERAN'/3,
'dec_BandclassCDMA2000'/3,
'dec_ARFCN-ValueUTRA'/3,
'dec_ARFCN-ValueGERAN'/3,
'dec_ARFCN-ValueEUTRA'/3,
'dec_ARFCN-ValueCDMA2000'/3,
'dec_AdditionalSpectrumEmission'/3,
'dec_ShortMAC-I'/3,
'dec_SecurityAlgorithmConfig'/3,
'dec_NextHopChainingCount'/3,
'dec_DeltaFList-PUCCH'/3,
'dec_UplinkPowerControlDedicated'/3,
'dec_UplinkPowerControlCommon'/3,
'dec_TPC-Index'/3,
'dec_TPC-PDCCH-Config'/3,
'dec_TimeAlignmentTimer'/3,
'dec_TDD-Config'/3,
'dec_N1-PUCCH-AN-PersistentList'/3,
'dec_SPS-ConfigUL'/3,
'dec_SPS-ConfigDL'/3,
'dec_SPS-Config'/3,
'dec_SoundingRS-UL-ConfigDedicated'/3,
'dec_SoundingRS-UL-ConfigCommon'/3,
'dec_SchedulingRequestConfig'/3,
'dec_T-StatusProhibit'/3,
'dec_T-Reordering'/3,
'dec_PollByte'/3,
'dec_PollPDU'/3,
'dec_T-PollRetransmit'/3,
'dec_SN-FieldLength'/3,
'dec_DL-UM-RLC'/3,
'dec_UL-UM-RLC'/3,
'dec_DL-AM-RLC'/3,
'dec_UL-AM-RLC'/3,
'dec_RLC-Config'/3,
'dec_DRB-ToReleaseList'/3,
'dec_DRB-ToAddMod'/3,
'dec_DRB-ToAddModList'/3,
'dec_SRB-ToAddMod'/3,
'dec_SRB-ToAddModList'/3,
'dec_RadioResourceConfigDedicated'/3,
'dec_UL-CyclicPrefixLength'/3,
'dec_PCCH-Config'/3,
'dec_BCCH-Config'/3,
'dec_RadioResourceConfigCommon'/3,
'dec_RadioResourceConfigCommonSIB'/3,
'dec_RACH-ConfigDedicated'/3,
'dec_RACH-ConfigCommon'/3,
'dec_UL-ReferenceSignalsPUSCH'/3,
'dec_PUSCH-ConfigDedicated'/3,
'dec_PUSCH-ConfigCommon'/3,
'dec_PUCCH-ConfigDedicated'/3,
'dec_PUCCH-ConfigCommon'/3,
'dec_PresenceAntennaPort1'/3,
'dec_PRACH-ConfigInfo'/3,
'dec_PRACH-Config'/3,
'dec_PRACH-ConfigSIB'/3,
'dec_P-Max'/3,
'dec_PhysicalConfigDedicated'/3,
'dec_PHICH-Config'/3,
'dec_PDSCH-ConfigDedicated'/3,
'dec_PDSCH-ConfigCommon'/3,
'dec_PDCP-Config'/3,
'dec_DRX-Config'/3,
'dec_MAC-MainConfig'/3,
'dec_LogicalChannelConfig'/3,
'dec_DRB-Identity'/3,
'dec_CQI-ReportPeriodic'/3,
'dec_CQI-ReportConfig'/3,
'dec_AntennaInfoDedicated'/3,
'dec_AntennaInfoCommon'/3,
'dec_SystemInformationBlockType11'/3,
'dec_SystemInformationBlockType10'/3,
'dec_SystemInformationBlockType9'/3,
'dec_BandClassInfoCDMA2000'/3,
'dec_BandClassListCDMA2000'/3,
'dec_PhysCellIdListCDMA2000'/3,
'dec_NeighCellsPerBandclassCDMA2000'/3,
'dec_NeighCellsPerBandclassListCDMA2000'/3,
'dec_NeighCellCDMA2000'/3,
'dec_NeighCellListCDMA2000'/3,
'dec_CellReselectionParametersCDMA2000'/3,
'dec_SystemInformationBlockType8'/3,
'dec_CarrierFreqsInfoGERAN'/3,
'dec_CarrierFreqsInfoListGERAN'/3,
'dec_SystemInformationBlockType7'/3,
'dec_CarrierFreqUTRA-TDD'/3,
'dec_CarrierFreqListUTRA-TDD'/3,
'dec_CarrierFreqUTRA-FDD'/3,
'dec_CarrierFreqListUTRA-FDD'/3,
'dec_SystemInformationBlockType6'/3,
'dec_InterFreqBlackCellList'/3,
'dec_InterFreqNeighCellInfo'/3,
'dec_InterFreqNeighCellList'/3,
'dec_InterFreqCarrierFreqInfo'/3,
'dec_InterFreqCarrierFreqList'/3,
'dec_SystemInformationBlockType5'/3,
'dec_IntraFreqBlackCellList'/3,
'dec_IntraFreqNeighCellInfo'/3,
'dec_IntraFreqNeighCellList'/3,
'dec_SystemInformationBlockType4'/3,
'dec_SystemInformationBlockType3'/3,
'dec_MBSFN-SubframeConfig'/3,
'dec_MBSFN-SubframeConfigList'/3,
'dec_AC-BarringConfig'/3,
'dec_SystemInformationBlockType2'/3,
'dec_ULInformationTransfer-r8-IEs'/3,
'dec_ULInformationTransfer'/3,
'dec_ULHandoverPreparationTransfer-r8-IEs'/3,
'dec_ULHandoverPreparationTransfer'/3,
'dec_UECapabilityInformation-r8-IEs'/3,
'dec_UECapabilityInformation'/3,
'dec_UE-CapabilityRequest'/3,
'dec_UECapabilityEnquiry-r8-IEs'/3,
'dec_UECapabilityEnquiry'/3,
'dec_SIB-Type'/3,
'dec_SIB-MappingInfo'/3,
'dec_SchedulingInfo'/3,
'dec_SchedulingInfoList'/3,
'dec_PLMN-IdentityInfo'/3,
'dec_PLMN-IdentityList'/3,
'dec_SystemInformationBlockType1'/3,
'dec_SystemInformation-r8-IEs'/3,
'dec_SystemInformation'/3,
'dec_SecurityModeFailure-r8-IEs'/3,
'dec_SecurityModeFailure'/3,
'dec_SecurityModeComplete-r8-IEs'/3,
'dec_SecurityModeComplete'/3,
'dec_SecurityConfigSMC'/3,
'dec_SecurityModeCommand-r8-IEs'/3,
'dec_SecurityModeCommand'/3,
'dec_RegisteredMME'/3,
'dec_RRCConnectionSetupComplete-r8-IEs'/3,
'dec_RRCConnectionSetupComplete'/3,
'dec_RRCConnectionSetup-r8-IEs'/3,
'dec_RRCConnectionSetup'/3,
'dec_EstablishmentCause'/3,
'dec_InitialUE-Identity'/3,
'dec_RRCConnectionRequest-r8-IEs'/3,
'dec_RRCConnectionRequest'/3,
'dec_BandClassPriority1XRTT'/3,
'dec_BandClassPriorityList1XRTT'/3,
'dec_BandClassPriorityHRPD'/3,
'dec_BandClassPriorityListHRPD'/3,
'dec_FreqPriorityUTRA-TDD'/3,
'dec_FreqPriorityListUTRA-TDD'/3,
'dec_FreqPriorityUTRA-FDD'/3,
'dec_FreqPriorityListUTRA-FDD'/3,
'dec_FreqsPriorityGERAN'/3,
'dec_FreqsPriorityListGERAN'/3,
'dec_FreqPriorityEUTRA'/3,
'dec_FreqPriorityListEUTRA'/3,
'dec_IdleModeMobilityControlInfo'/3,
'dec_RedirectedCarrierInfo'/3,
'dec_ReleaseCause'/3,
'dec_RRCConnectionRelease-r8-IEs'/3,
'dec_RRCConnectionRelease'/3,
'dec_RRCConnectionReject-r8-IEs'/3,
'dec_RRCConnectionReject'/3,
'dec_ReestablishmentCause'/3,
'dec_ReestabUE-Identity'/3,
'dec_RRCConnectionReestablishmentRequest-r8-IEs'/3,
'dec_RRCConnectionReestablishmentRequest'/3,
'dec_RRCConnectionReestablishmentReject-r8-IEs'/3,
'dec_RRCConnectionReestablishmentReject'/3,
'dec_RRCConnectionReestablishmentComplete-r8-IEs'/3,
'dec_RRCConnectionReestablishmentComplete'/3,
'dec_RRCConnectionReestablishment-r8-IEs'/3,
'dec_RRCConnectionReestablishment'/3,
'dec_RRCConnectionReconfigurationComplete-r8-IEs'/3,
'dec_RRCConnectionReconfigurationComplete'/3,
'dec_SecurityConfigHO'/3,
'dec_RRCConnectionReconfiguration-r8-IEs'/3,
'dec_RRCConnectionReconfiguration'/3,
'dec_IMSI-Digit'/3,
'dec_IMSI'/3,
'dec_PagingUE-Identity'/3,
'dec_PagingRecord'/3,
'dec_PagingRecordList'/3,
'dec_Paging'/3,
'dec_SystemInfoListGERAN'/3,
'dec_SI-OrPSI-GERAN'/3,
'dec_CellChangeOrder'/3,
'dec_Handover'/3,
'dec_MobilityFromEUTRACommand-r8-IEs'/3,
'dec_MobilityFromEUTRACommand'/3,
'dec_MeasurementReport-r8-IEs'/3,
'dec_MeasurementReport'/3,
'dec_MasterInformationBlock'/3,
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'/3,
'dec_HandoverFromEUTRAPreparationRequest'/3,
'dec_DLInformationTransfer-r8-IEs'/3,
'dec_DLInformationTransfer'/3,
'dec_CSFBParametersResponseCDMA2000-r8-IEs'/3,
'dec_CSFBParametersResponseCDMA2000'/3,
'dec_CSFBParametersRequestCDMA2000-r8-IEs'/3,
'dec_CSFBParametersRequestCDMA2000'/3,
'dec_DRB-CountInfo'/3,
'dec_DRB-CountInfoList'/3,
'dec_CounterCheckResponse-r8-IEs'/3,
'dec_CounterCheckResponse'/3,
'dec_DRB-CountMSB-Info'/3,
'dec_DRB-CountMSB-InfoList'/3,
'dec_CounterCheck-r8-IEs'/3,
'dec_CounterCheck'/3,
'dec_UL-DCCH-MessageType'/3,
'dec_UL-DCCH-Message'/3,
'dec_UL-CCCH-MessageType'/3,
'dec_UL-CCCH-Message'/3,
'dec_DL-DCCH-MessageType'/3,
'dec_DL-DCCH-Message'/3,
'dec_DL-CCCH-MessageType'/3,
'dec_DL-CCCH-Message'/3,
'dec_PCCH-MessageType'/3,
'dec_PCCH-Message'/3,
'dec_BCCH-DL-SCH-MessageType'/3,
'dec_BCCH-DL-SCH-Message'/3,
'dec_BCCH-BCH-MessageType'/3,
'dec_BCCH-BCH-Message'/3
]).

-export([
'maxUTRA-TDD-Carrier'/0,
'maxUTRA-FDD-Carrier'/0,
'maxSI-Message'/0,
'maxSIB-1'/0,
'maxSIB'/0,
'maxReportConfigId'/0,
'maxRAT-Capabilities'/0,
'maxPNOffset'/0,
'maxPageRec'/0,
'maxObjectId'/0,
'maxMeasId'/0,
'maxMCS-1'/0,
'maxMBSFN-Allocations'/0,
'maxGNFG'/0,
'maxGERAN-SI'/0,
'maxFreq'/0,
'maxEARFCN'/0,
'maxDRB'/0,
'maxCellReport'/0,
'maxCellMeas'/0,
'maxCellIntra'/0,
'maxCellInter'/0,
'maxCellBlack'/0,
'maxCDMA-BandClass'/0,
'maxBands'/0
]).

-export([info/0]).


-export([encode/2,decode/2,encode_disp/2,decode_disp/2]).

encoding_rule() ->
   ber.

encode(Type,Data) ->
case catch encode_disp(Type,Data) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {Bytes,_Len} ->
    {ok,wrap_encode(Bytes)};
  Bytes ->
    {ok,wrap_encode(Bytes)}
end.

decode(Type,Data) ->
case catch decode_disp(Type,wrap_decode(Data)) of
  {'EXIT',{error,Reason}} ->
    {error,Reason};
  {'EXIT',Reason} ->
    {error,{asn1,Reason}};
  {X,_Rest} ->
    {ok,X};
  {X,_Rest,_Len} ->
    {ok,X}
end.

encode_disp('UE-TimersAndConstants',Data) -> 'enc_UE-TimersAndConstants'(Data,[]);
encode_disp('SupportedBandList1XRTT',Data) -> 'enc_SupportedBandList1XRTT'(Data,[]);
encode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'enc_IRAT-ParametersCDMA2000-1XRTT'(Data,[]);
encode_disp('SupportedBandListHRPD',Data) -> 'enc_SupportedBandListHRPD'(Data,[]);
encode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'enc_IRAT-ParametersCDMA2000-HRPD'(Data,[]);
encode_disp('SupportedBandGERAN',Data) -> 'enc_SupportedBandGERAN'(Data,[]);
encode_disp('SupportedBandListGERAN',Data) -> 'enc_SupportedBandListGERAN'(Data,[]);
encode_disp('IRAT-ParametersGERAN',Data) -> 'enc_IRAT-ParametersGERAN'(Data,[]);
encode_disp('SupportedBandUTRA-TDD768',Data) -> 'enc_SupportedBandUTRA-TDD768'(Data,[]);
encode_disp('SupportedBandListUTRA-TDD768',Data) -> 'enc_SupportedBandListUTRA-TDD768'(Data,[]);
encode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'enc_IRAT-ParametersUTRA-TDD768'(Data,[]);
encode_disp('SupportedBandUTRA-TDD384',Data) -> 'enc_SupportedBandUTRA-TDD384'(Data,[]);
encode_disp('SupportedBandListUTRA-TDD384',Data) -> 'enc_SupportedBandListUTRA-TDD384'(Data,[]);
encode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'enc_IRAT-ParametersUTRA-TDD384'(Data,[]);
encode_disp('SupportedBandUTRA-TDD128',Data) -> 'enc_SupportedBandUTRA-TDD128'(Data,[]);
encode_disp('SupportedBandListUTRA-TDD128',Data) -> 'enc_SupportedBandListUTRA-TDD128'(Data,[]);
encode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'enc_IRAT-ParametersUTRA-TDD128'(Data,[]);
encode_disp('SupportedBandUTRA-FDD',Data) -> 'enc_SupportedBandUTRA-FDD'(Data,[]);
encode_disp('SupportedBandListUTRA-FDD',Data) -> 'enc_SupportedBandListUTRA-FDD'(Data,[]);
encode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'enc_IRAT-ParametersUTRA-FDD'(Data,[]);
encode_disp('InterRAT-BandInfo',Data) -> 'enc_InterRAT-BandInfo'(Data,[]);
encode_disp('InterRAT-BandList',Data) -> 'enc_InterRAT-BandList'(Data,[]);
encode_disp('InterFreqBandInfo',Data) -> 'enc_InterFreqBandInfo'(Data,[]);
encode_disp('InterFreqBandList',Data) -> 'enc_InterFreqBandList'(Data,[]);
encode_disp('BandInfoEUTRA',Data) -> 'enc_BandInfoEUTRA'(Data,[]);
encode_disp('BandListEUTRA',Data) -> 'enc_BandListEUTRA'(Data,[]);
encode_disp('MeasParameters',Data) -> 'enc_MeasParameters'(Data,[]);
encode_disp('SupportedBandEUTRA',Data) -> 'enc_SupportedBandEUTRA'(Data,[]);
encode_disp('SupportedBandListEUTRA',Data) -> 'enc_SupportedBandListEUTRA'(Data,[]);
encode_disp('RF-Parameters',Data) -> 'enc_RF-Parameters'(Data,[]);
encode_disp('PhyLayerParameters',Data) -> 'enc_PhyLayerParameters'(Data,[]);
encode_disp('PDCP-Parameters',Data) -> 'enc_PDCP-Parameters'(Data,[]);
encode_disp('AccessStratumRelease',Data) -> 'enc_AccessStratumRelease'(Data,[]);
encode_disp('UE-EUTRA-Capability',Data) -> 'enc_UE-EUTRA-Capability'(Data,[]);
encode_disp('UE-CapabilityRAT-Container',Data) -> 'enc_UE-CapabilityRAT-Container'(Data,[]);
encode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'enc_UE-CapabilityRAT-ContainerList'(Data,[]);
encode_disp('S-TMSI',Data) -> 'enc_S-TMSI'(Data,[]);
encode_disp('RRC-TransactionIdentifier',Data) -> 'enc_RRC-TransactionIdentifier'(Data,[]);
encode_disp('RAT-Type',Data) -> 'enc_RAT-Type'(Data,[]);
encode_disp('RAND-CDMA2000',Data) -> 'enc_RAND-CDMA2000'(Data,[]);
encode_disp('NeighCellConfig',Data) -> 'enc_NeighCellConfig'(Data,[]);
encode_disp('MMEC',Data) -> 'enc_MMEC'(Data,[]);
encode_disp('FilterCoefficient',Data) -> 'enc_FilterCoefficient'(Data,[]);
encode_disp('DedicatedInfoNAS',Data) -> 'enc_DedicatedInfoNAS'(Data,[]);
encode_disp('DedicatedInfoCDMA2000',Data) -> 'enc_DedicatedInfoCDMA2000'(Data,[]);
encode_disp('C-RNTI',Data) -> 'enc_C-RNTI'(Data,[]);
encode_disp('TimeToTrigger',Data) -> 'enc_TimeToTrigger'(Data,[]);
encode_disp('RSRQ-Range',Data) -> 'enc_RSRQ-Range'(Data,[]);
encode_disp('RSRP-Range',Data) -> 'enc_RSRP-Range'(Data,[]);
encode_disp('ReportInterval',Data) -> 'enc_ReportInterval'(Data,[]);
encode_disp('ReportConfigToAddMod',Data) -> 'enc_ReportConfigToAddMod'(Data,[]);
encode_disp('ReportConfigToAddModList',Data) -> 'enc_ReportConfigToAddModList'(Data,[]);
encode_disp('ThresholdCDMA2000',Data) -> 'enc_ThresholdCDMA2000'(Data,[]);
encode_disp('ThresholdGERAN',Data) -> 'enc_ThresholdGERAN'(Data,[]);
encode_disp('ThresholdUTRA',Data) -> 'enc_ThresholdUTRA'(Data,[]);
encode_disp('ReportConfigInterRAT',Data) -> 'enc_ReportConfigInterRAT'(Data,[]);
encode_disp('ReportConfigId',Data) -> 'enc_ReportConfigId'(Data,[]);
encode_disp('ThresholdEUTRA',Data) -> 'enc_ThresholdEUTRA'(Data,[]);
encode_disp('ReportConfigEUTRA',Data) -> 'enc_ReportConfigEUTRA'(Data,[]);
encode_disp('QuantityConfigCDMA2000',Data) -> 'enc_QuantityConfigCDMA2000'(Data,[]);
encode_disp('QuantityConfigGERAN',Data) -> 'enc_QuantityConfigGERAN'(Data,[]);
encode_disp('QuantityConfigUTRA',Data) -> 'enc_QuantityConfigUTRA'(Data,[]);
encode_disp('QuantityConfigEUTRA',Data) -> 'enc_QuantityConfigEUTRA'(Data,[]);
encode_disp('QuantityConfig',Data) -> 'enc_QuantityConfig'(Data,[]);
encode_disp('PLMN-IdentityList2',Data) -> 'enc_PLMN-IdentityList2'(Data,[]);
encode_disp('MeasResultCDMA2000',Data) -> 'enc_MeasResultCDMA2000'(Data,[]);
encode_disp('MeasResultListCDMA2000',Data) -> 'enc_MeasResultListCDMA2000'(Data,[]);
encode_disp('MeasResultsCDMA2000',Data) -> 'enc_MeasResultsCDMA2000'(Data,[]);
encode_disp('MeasResultGERAN',Data) -> 'enc_MeasResultGERAN'(Data,[]);
encode_disp('MeasResultListGERAN',Data) -> 'enc_MeasResultListGERAN'(Data,[]);
encode_disp('MeasResultUTRA',Data) -> 'enc_MeasResultUTRA'(Data,[]);
encode_disp('MeasResultListUTRA',Data) -> 'enc_MeasResultListUTRA'(Data,[]);
encode_disp('MeasResultEUTRA',Data) -> 'enc_MeasResultEUTRA'(Data,[]);
encode_disp('MeasResultListEUTRA',Data) -> 'enc_MeasResultListEUTRA'(Data,[]);
encode_disp('MeasResults',Data) -> 'enc_MeasResults'(Data,[]);
encode_disp('CellsToAddModUTRA-TDD',Data) -> 'enc_CellsToAddModUTRA-TDD'(Data,[]);
encode_disp('CellsToAddModListUTRA-TDD',Data) -> 'enc_CellsToAddModListUTRA-TDD'(Data,[]);
encode_disp('CellsToAddModUTRA-FDD',Data) -> 'enc_CellsToAddModUTRA-FDD'(Data,[]);
encode_disp('CellsToAddModListUTRA-FDD',Data) -> 'enc_CellsToAddModListUTRA-FDD'(Data,[]);
encode_disp('MeasObjectUTRA',Data) -> 'enc_MeasObjectUTRA'(Data,[]);
encode_disp('MeasObjectToAddMod',Data) -> 'enc_MeasObjectToAddMod'(Data,[]);
encode_disp('MeasObjectToAddModList',Data) -> 'enc_MeasObjectToAddModList'(Data,[]);
encode_disp('MeasObjectId',Data) -> 'enc_MeasObjectId'(Data,[]);
encode_disp('MeasObjectGERAN',Data) -> 'enc_MeasObjectGERAN'(Data,[]);
encode_disp('BlackCellsToAddMod',Data) -> 'enc_BlackCellsToAddMod'(Data,[]);
encode_disp('BlackCellsToAddModList',Data) -> 'enc_BlackCellsToAddModList'(Data,[]);
encode_disp('CellsToAddMod',Data) -> 'enc_CellsToAddMod'(Data,[]);
encode_disp('CellsToAddModList',Data) -> 'enc_CellsToAddModList'(Data,[]);
encode_disp('MeasObjectEUTRA',Data) -> 'enc_MeasObjectEUTRA'(Data,[]);
encode_disp('CellsToAddModCDMA2000',Data) -> 'enc_CellsToAddModCDMA2000'(Data,[]);
encode_disp('CellsToAddModListCDMA2000',Data) -> 'enc_CellsToAddModListCDMA2000'(Data,[]);
encode_disp('MeasObjectCDMA2000',Data) -> 'enc_MeasObjectCDMA2000'(Data,[]);
encode_disp('MeasIdToAddMod',Data) -> 'enc_MeasIdToAddMod'(Data,[]);
encode_disp('MeasIdToAddModList',Data) -> 'enc_MeasIdToAddModList'(Data,[]);
encode_disp('MeasId',Data) -> 'enc_MeasId'(Data,[]);
encode_disp('MeasGapConfig',Data) -> 'enc_MeasGapConfig'(Data,[]);
encode_disp('ReportConfigToRemoveList',Data) -> 'enc_ReportConfigToRemoveList'(Data,[]);
encode_disp('MeasObjectToRemoveList',Data) -> 'enc_MeasObjectToRemoveList'(Data,[]);
encode_disp('MeasIdToRemoveList',Data) -> 'enc_MeasIdToRemoveList'(Data,[]);
encode_disp('MeasConfig',Data) -> 'enc_MeasConfig'(Data,[]);
encode_disp('Hysteresis',Data) -> 'enc_Hysteresis'(Data,[]);
encode_disp('AllowedMeasBandwidth',Data) -> 'enc_AllowedMeasBandwidth'(Data,[]);
encode_disp('T-Reselection',Data) -> 'enc_T-Reselection'(Data,[]);
encode_disp('TrackingAreaCode',Data) -> 'enc_TrackingAreaCode'(Data,[]);
encode_disp('SystemTimeInfoCDMA2000',Data) -> 'enc_SystemTimeInfoCDMA2000'(Data,[]);
encode_disp('SpeedStateScaleFactors',Data) -> 'enc_SpeedStateScaleFactors'(Data,[]);
encode_disp('ReselectionThreshold',Data) -> 'enc_ReselectionThreshold'(Data,[]);
encode_disp('Q-OffsetRangeInterRAT',Data) -> 'enc_Q-OffsetRangeInterRAT'(Data,[]);
encode_disp('Q-OffsetRange',Data) -> 'enc_Q-OffsetRange'(Data,[]);
encode_disp('Q-RxLevMin',Data) -> 'enc_Q-RxLevMin'(Data,[]);
encode_disp('PreRegistrationZoneIdHRPD',Data) -> 'enc_PreRegistrationZoneIdHRPD'(Data,[]);
encode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'enc_SecondaryPreRegistrationZoneIdListHRPD'(Data,[]);
encode_disp('PreRegistrationInfoHRPD',Data) -> 'enc_PreRegistrationInfoHRPD'(Data,[]);
encode_disp('MCC-MNC-Digit',Data) -> 'enc_MCC-MNC-Digit'(Data,[]);
encode_disp('MNC',Data) -> 'enc_MNC'(Data,[]);
encode_disp('MCC',Data) -> 'enc_MCC'(Data,[]);
encode_disp('PLMN-Identity',Data) -> 'enc_PLMN-Identity'(Data,[]);
encode_disp('PhysCellIdUTRA-TDD',Data) -> 'enc_PhysCellIdUTRA-TDD'(Data,[]);
encode_disp('PhysCellIdUTRA-FDD',Data) -> 'enc_PhysCellIdUTRA-FDD'(Data,[]);
encode_disp('PhysCellIdGERAN',Data) -> 'enc_PhysCellIdGERAN'(Data,[]);
encode_disp('PhysCellIdCDMA2000',Data) -> 'enc_PhysCellIdCDMA2000'(Data,[]);
encode_disp('PhysCellIdRange',Data) -> 'enc_PhysCellIdRange'(Data,[]);
encode_disp('PhysCellId',Data) -> 'enc_PhysCellId'(Data,[]);
encode_disp('MobilityStateParameters',Data) -> 'enc_MobilityStateParameters'(Data,[]);
encode_disp('MobilityParametersCDMA2000',Data) -> 'enc_MobilityParametersCDMA2000'(Data,[]);
encode_disp('CarrierFreqEUTRA',Data) -> 'enc_CarrierFreqEUTRA'(Data,[]);
encode_disp('CarrierBandwidthEUTRA',Data) -> 'enc_CarrierBandwidthEUTRA'(Data,[]);
encode_disp('MobilityControlInfo',Data) -> 'enc_MobilityControlInfo'(Data,[]);
encode_disp('CellGlobalIdCDMA2000',Data) -> 'enc_CellGlobalIdCDMA2000'(Data,[]);
encode_disp('CellGlobalIdGERAN',Data) -> 'enc_CellGlobalIdGERAN'(Data,[]);
encode_disp('CellGlobalIdUTRA',Data) -> 'enc_CellGlobalIdUTRA'(Data,[]);
encode_disp('CellGlobalIdEUTRA',Data) -> 'enc_CellGlobalIdEUTRA'(Data,[]);
encode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'enc_CSFB-RegistrationParam1XRTT'(Data,[]);
encode_disp('CellReselectionPriority',Data) -> 'enc_CellReselectionPriority'(Data,[]);
encode_disp('CellIndex',Data) -> 'enc_CellIndex'(Data,[]);
encode_disp('CellIndexList',Data) -> 'enc_CellIndexList'(Data,[]);
encode_disp('CellIdentity',Data) -> 'enc_CellIdentity'(Data,[]);
encode_disp('CDMA2000-Type',Data) -> 'enc_CDMA2000-Type'(Data,[]);
encode_disp('ExplicitListOfARFCNs',Data) -> 'enc_ExplicitListOfARFCNs'(Data,[]);
encode_disp('CarrierFreqsGERAN',Data) -> 'enc_CarrierFreqsGERAN'(Data,[]);
encode_disp('CarrierFreqGERAN',Data) -> 'enc_CarrierFreqGERAN'(Data,[]);
encode_disp('CarrierFreqCDMA2000',Data) -> 'enc_CarrierFreqCDMA2000'(Data,[]);
encode_disp('BandIndicatorGERAN',Data) -> 'enc_BandIndicatorGERAN'(Data,[]);
encode_disp('BandclassCDMA2000',Data) -> 'enc_BandclassCDMA2000'(Data,[]);
encode_disp('ARFCN-ValueUTRA',Data) -> 'enc_ARFCN-ValueUTRA'(Data,[]);
encode_disp('ARFCN-ValueGERAN',Data) -> 'enc_ARFCN-ValueGERAN'(Data,[]);
encode_disp('ARFCN-ValueEUTRA',Data) -> 'enc_ARFCN-ValueEUTRA'(Data,[]);
encode_disp('ARFCN-ValueCDMA2000',Data) -> 'enc_ARFCN-ValueCDMA2000'(Data,[]);
encode_disp('AdditionalSpectrumEmission',Data) -> 'enc_AdditionalSpectrumEmission'(Data,[]);
encode_disp('ShortMAC-I',Data) -> 'enc_ShortMAC-I'(Data,[]);
encode_disp('SecurityAlgorithmConfig',Data) -> 'enc_SecurityAlgorithmConfig'(Data,[]);
encode_disp('NextHopChainingCount',Data) -> 'enc_NextHopChainingCount'(Data,[]);
encode_disp('DeltaFList-PUCCH',Data) -> 'enc_DeltaFList-PUCCH'(Data,[]);
encode_disp('UplinkPowerControlDedicated',Data) -> 'enc_UplinkPowerControlDedicated'(Data,[]);
encode_disp('UplinkPowerControlCommon',Data) -> 'enc_UplinkPowerControlCommon'(Data,[]);
encode_disp('TPC-Index',Data) -> 'enc_TPC-Index'(Data,[]);
encode_disp('TPC-PDCCH-Config',Data) -> 'enc_TPC-PDCCH-Config'(Data,[]);
encode_disp('TimeAlignmentTimer',Data) -> 'enc_TimeAlignmentTimer'(Data,[]);
encode_disp('TDD-Config',Data) -> 'enc_TDD-Config'(Data,[]);
encode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'enc_N1-PUCCH-AN-PersistentList'(Data,[]);
encode_disp('SPS-ConfigUL',Data) -> 'enc_SPS-ConfigUL'(Data,[]);
encode_disp('SPS-ConfigDL',Data) -> 'enc_SPS-ConfigDL'(Data,[]);
encode_disp('SPS-Config',Data) -> 'enc_SPS-Config'(Data,[]);
encode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'enc_SoundingRS-UL-ConfigDedicated'(Data,[]);
encode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'enc_SoundingRS-UL-ConfigCommon'(Data,[]);
encode_disp('SchedulingRequestConfig',Data) -> 'enc_SchedulingRequestConfig'(Data,[]);
encode_disp('T-StatusProhibit',Data) -> 'enc_T-StatusProhibit'(Data,[]);
encode_disp('T-Reordering',Data) -> 'enc_T-Reordering'(Data,[]);
encode_disp('PollByte',Data) -> 'enc_PollByte'(Data,[]);
encode_disp('PollPDU',Data) -> 'enc_PollPDU'(Data,[]);
encode_disp('T-PollRetransmit',Data) -> 'enc_T-PollRetransmit'(Data,[]);
encode_disp('SN-FieldLength',Data) -> 'enc_SN-FieldLength'(Data,[]);
encode_disp('DL-UM-RLC',Data) -> 'enc_DL-UM-RLC'(Data,[]);
encode_disp('UL-UM-RLC',Data) -> 'enc_UL-UM-RLC'(Data,[]);
encode_disp('DL-AM-RLC',Data) -> 'enc_DL-AM-RLC'(Data,[]);
encode_disp('UL-AM-RLC',Data) -> 'enc_UL-AM-RLC'(Data,[]);
encode_disp('RLC-Config',Data) -> 'enc_RLC-Config'(Data,[]);
encode_disp('DRB-ToReleaseList',Data) -> 'enc_DRB-ToReleaseList'(Data,[]);
encode_disp('DRB-ToAddMod',Data) -> 'enc_DRB-ToAddMod'(Data,[]);
encode_disp('DRB-ToAddModList',Data) -> 'enc_DRB-ToAddModList'(Data,[]);
encode_disp('SRB-ToAddMod',Data) -> 'enc_SRB-ToAddMod'(Data,[]);
encode_disp('SRB-ToAddModList',Data) -> 'enc_SRB-ToAddModList'(Data,[]);
encode_disp('RadioResourceConfigDedicated',Data) -> 'enc_RadioResourceConfigDedicated'(Data,[]);
encode_disp('UL-CyclicPrefixLength',Data) -> 'enc_UL-CyclicPrefixLength'(Data,[]);
encode_disp('PCCH-Config',Data) -> 'enc_PCCH-Config'(Data,[]);
encode_disp('BCCH-Config',Data) -> 'enc_BCCH-Config'(Data,[]);
encode_disp('RadioResourceConfigCommon',Data) -> 'enc_RadioResourceConfigCommon'(Data,[]);
encode_disp('RadioResourceConfigCommonSIB',Data) -> 'enc_RadioResourceConfigCommonSIB'(Data,[]);
encode_disp('RACH-ConfigDedicated',Data) -> 'enc_RACH-ConfigDedicated'(Data,[]);
encode_disp('RACH-ConfigCommon',Data) -> 'enc_RACH-ConfigCommon'(Data,[]);
encode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'enc_UL-ReferenceSignalsPUSCH'(Data,[]);
encode_disp('PUSCH-ConfigDedicated',Data) -> 'enc_PUSCH-ConfigDedicated'(Data,[]);
encode_disp('PUSCH-ConfigCommon',Data) -> 'enc_PUSCH-ConfigCommon'(Data,[]);
encode_disp('PUCCH-ConfigDedicated',Data) -> 'enc_PUCCH-ConfigDedicated'(Data,[]);
encode_disp('PUCCH-ConfigCommon',Data) -> 'enc_PUCCH-ConfigCommon'(Data,[]);
encode_disp('PresenceAntennaPort1',Data) -> 'enc_PresenceAntennaPort1'(Data,[]);
encode_disp('PRACH-ConfigInfo',Data) -> 'enc_PRACH-ConfigInfo'(Data,[]);
encode_disp('PRACH-Config',Data) -> 'enc_PRACH-Config'(Data,[]);
encode_disp('PRACH-ConfigSIB',Data) -> 'enc_PRACH-ConfigSIB'(Data,[]);
encode_disp('P-Max',Data) -> 'enc_P-Max'(Data,[]);
encode_disp('PhysicalConfigDedicated',Data) -> 'enc_PhysicalConfigDedicated'(Data,[]);
encode_disp('PHICH-Config',Data) -> 'enc_PHICH-Config'(Data,[]);
encode_disp('PDSCH-ConfigDedicated',Data) -> 'enc_PDSCH-ConfigDedicated'(Data,[]);
encode_disp('PDSCH-ConfigCommon',Data) -> 'enc_PDSCH-ConfigCommon'(Data,[]);
encode_disp('PDCP-Config',Data) -> 'enc_PDCP-Config'(Data,[]);
encode_disp('DRX-Config',Data) -> 'enc_DRX-Config'(Data,[]);
encode_disp('MAC-MainConfig',Data) -> 'enc_MAC-MainConfig'(Data,[]);
encode_disp('LogicalChannelConfig',Data) -> 'enc_LogicalChannelConfig'(Data,[]);
encode_disp('DRB-Identity',Data) -> 'enc_DRB-Identity'(Data,[]);
encode_disp('CQI-ReportPeriodic',Data) -> 'enc_CQI-ReportPeriodic'(Data,[]);
encode_disp('CQI-ReportConfig',Data) -> 'enc_CQI-ReportConfig'(Data,[]);
encode_disp('AntennaInfoDedicated',Data) -> 'enc_AntennaInfoDedicated'(Data,[]);
encode_disp('AntennaInfoCommon',Data) -> 'enc_AntennaInfoCommon'(Data,[]);
encode_disp('SystemInformationBlockType11',Data) -> 'enc_SystemInformationBlockType11'(Data,[]);
encode_disp('SystemInformationBlockType10',Data) -> 'enc_SystemInformationBlockType10'(Data,[]);
encode_disp('SystemInformationBlockType9',Data) -> 'enc_SystemInformationBlockType9'(Data,[]);
encode_disp('BandClassInfoCDMA2000',Data) -> 'enc_BandClassInfoCDMA2000'(Data,[]);
encode_disp('BandClassListCDMA2000',Data) -> 'enc_BandClassListCDMA2000'(Data,[]);
encode_disp('PhysCellIdListCDMA2000',Data) -> 'enc_PhysCellIdListCDMA2000'(Data,[]);
encode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'enc_NeighCellsPerBandclassCDMA2000'(Data,[]);
encode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'enc_NeighCellsPerBandclassListCDMA2000'(Data,[]);
encode_disp('NeighCellCDMA2000',Data) -> 'enc_NeighCellCDMA2000'(Data,[]);
encode_disp('NeighCellListCDMA2000',Data) -> 'enc_NeighCellListCDMA2000'(Data,[]);
encode_disp('CellReselectionParametersCDMA2000',Data) -> 'enc_CellReselectionParametersCDMA2000'(Data,[]);
encode_disp('SystemInformationBlockType8',Data) -> 'enc_SystemInformationBlockType8'(Data,[]);
encode_disp('CarrierFreqsInfoGERAN',Data) -> 'enc_CarrierFreqsInfoGERAN'(Data,[]);
encode_disp('CarrierFreqsInfoListGERAN',Data) -> 'enc_CarrierFreqsInfoListGERAN'(Data,[]);
encode_disp('SystemInformationBlockType7',Data) -> 'enc_SystemInformationBlockType7'(Data,[]);
encode_disp('CarrierFreqUTRA-TDD',Data) -> 'enc_CarrierFreqUTRA-TDD'(Data,[]);
encode_disp('CarrierFreqListUTRA-TDD',Data) -> 'enc_CarrierFreqListUTRA-TDD'(Data,[]);
encode_disp('CarrierFreqUTRA-FDD',Data) -> 'enc_CarrierFreqUTRA-FDD'(Data,[]);
encode_disp('CarrierFreqListUTRA-FDD',Data) -> 'enc_CarrierFreqListUTRA-FDD'(Data,[]);
encode_disp('SystemInformationBlockType6',Data) -> 'enc_SystemInformationBlockType6'(Data,[]);
encode_disp('InterFreqBlackCellList',Data) -> 'enc_InterFreqBlackCellList'(Data,[]);
encode_disp('InterFreqNeighCellInfo',Data) -> 'enc_InterFreqNeighCellInfo'(Data,[]);
encode_disp('InterFreqNeighCellList',Data) -> 'enc_InterFreqNeighCellList'(Data,[]);
encode_disp('InterFreqCarrierFreqInfo',Data) -> 'enc_InterFreqCarrierFreqInfo'(Data,[]);
encode_disp('InterFreqCarrierFreqList',Data) -> 'enc_InterFreqCarrierFreqList'(Data,[]);
encode_disp('SystemInformationBlockType5',Data) -> 'enc_SystemInformationBlockType5'(Data,[]);
encode_disp('IntraFreqBlackCellList',Data) -> 'enc_IntraFreqBlackCellList'(Data,[]);
encode_disp('IntraFreqNeighCellInfo',Data) -> 'enc_IntraFreqNeighCellInfo'(Data,[]);
encode_disp('IntraFreqNeighCellList',Data) -> 'enc_IntraFreqNeighCellList'(Data,[]);
encode_disp('SystemInformationBlockType4',Data) -> 'enc_SystemInformationBlockType4'(Data,[]);
encode_disp('SystemInformationBlockType3',Data) -> 'enc_SystemInformationBlockType3'(Data,[]);
encode_disp('MBSFN-SubframeConfig',Data) -> 'enc_MBSFN-SubframeConfig'(Data,[]);
encode_disp('MBSFN-SubframeConfigList',Data) -> 'enc_MBSFN-SubframeConfigList'(Data,[]);
encode_disp('AC-BarringConfig',Data) -> 'enc_AC-BarringConfig'(Data,[]);
encode_disp('SystemInformationBlockType2',Data) -> 'enc_SystemInformationBlockType2'(Data,[]);
encode_disp('ULInformationTransfer-r8-IEs',Data) -> 'enc_ULInformationTransfer-r8-IEs'(Data,[]);
encode_disp('ULInformationTransfer',Data) -> 'enc_ULInformationTransfer'(Data,[]);
encode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'enc_ULHandoverPreparationTransfer-r8-IEs'(Data,[]);
encode_disp('ULHandoverPreparationTransfer',Data) -> 'enc_ULHandoverPreparationTransfer'(Data,[]);
encode_disp('UECapabilityInformation-r8-IEs',Data) -> 'enc_UECapabilityInformation-r8-IEs'(Data,[]);
encode_disp('UECapabilityInformation',Data) -> 'enc_UECapabilityInformation'(Data,[]);
encode_disp('UE-CapabilityRequest',Data) -> 'enc_UE-CapabilityRequest'(Data,[]);
encode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'enc_UECapabilityEnquiry-r8-IEs'(Data,[]);
encode_disp('UECapabilityEnquiry',Data) -> 'enc_UECapabilityEnquiry'(Data,[]);
encode_disp('SIB-Type',Data) -> 'enc_SIB-Type'(Data,[]);
encode_disp('SIB-MappingInfo',Data) -> 'enc_SIB-MappingInfo'(Data,[]);
encode_disp('SchedulingInfo',Data) -> 'enc_SchedulingInfo'(Data,[]);
encode_disp('SchedulingInfoList',Data) -> 'enc_SchedulingInfoList'(Data,[]);
encode_disp('PLMN-IdentityInfo',Data) -> 'enc_PLMN-IdentityInfo'(Data,[]);
encode_disp('PLMN-IdentityList',Data) -> 'enc_PLMN-IdentityList'(Data,[]);
encode_disp('SystemInformationBlockType1',Data) -> 'enc_SystemInformationBlockType1'(Data,[]);
encode_disp('SystemInformation-r8-IEs',Data) -> 'enc_SystemInformation-r8-IEs'(Data,[]);
encode_disp('SystemInformation',Data) -> 'enc_SystemInformation'(Data,[]);
encode_disp('SecurityModeFailure-r8-IEs',Data) -> 'enc_SecurityModeFailure-r8-IEs'(Data,[]);
encode_disp('SecurityModeFailure',Data) -> 'enc_SecurityModeFailure'(Data,[]);
encode_disp('SecurityModeComplete-r8-IEs',Data) -> 'enc_SecurityModeComplete-r8-IEs'(Data,[]);
encode_disp('SecurityModeComplete',Data) -> 'enc_SecurityModeComplete'(Data,[]);
encode_disp('SecurityConfigSMC',Data) -> 'enc_SecurityConfigSMC'(Data,[]);
encode_disp('SecurityModeCommand-r8-IEs',Data) -> 'enc_SecurityModeCommand-r8-IEs'(Data,[]);
encode_disp('SecurityModeCommand',Data) -> 'enc_SecurityModeCommand'(Data,[]);
encode_disp('RegisteredMME',Data) -> 'enc_RegisteredMME'(Data,[]);
encode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'enc_RRCConnectionSetupComplete-r8-IEs'(Data,[]);
encode_disp('RRCConnectionSetupComplete',Data) -> 'enc_RRCConnectionSetupComplete'(Data,[]);
encode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'enc_RRCConnectionSetup-r8-IEs'(Data,[]);
encode_disp('RRCConnectionSetup',Data) -> 'enc_RRCConnectionSetup'(Data,[]);
encode_disp('EstablishmentCause',Data) -> 'enc_EstablishmentCause'(Data,[]);
encode_disp('InitialUE-Identity',Data) -> 'enc_InitialUE-Identity'(Data,[]);
encode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'enc_RRCConnectionRequest-r8-IEs'(Data,[]);
encode_disp('RRCConnectionRequest',Data) -> 'enc_RRCConnectionRequest'(Data,[]);
encode_disp('BandClassPriority1XRTT',Data) -> 'enc_BandClassPriority1XRTT'(Data,[]);
encode_disp('BandClassPriorityList1XRTT',Data) -> 'enc_BandClassPriorityList1XRTT'(Data,[]);
encode_disp('BandClassPriorityHRPD',Data) -> 'enc_BandClassPriorityHRPD'(Data,[]);
encode_disp('BandClassPriorityListHRPD',Data) -> 'enc_BandClassPriorityListHRPD'(Data,[]);
encode_disp('FreqPriorityUTRA-TDD',Data) -> 'enc_FreqPriorityUTRA-TDD'(Data,[]);
encode_disp('FreqPriorityListUTRA-TDD',Data) -> 'enc_FreqPriorityListUTRA-TDD'(Data,[]);
encode_disp('FreqPriorityUTRA-FDD',Data) -> 'enc_FreqPriorityUTRA-FDD'(Data,[]);
encode_disp('FreqPriorityListUTRA-FDD',Data) -> 'enc_FreqPriorityListUTRA-FDD'(Data,[]);
encode_disp('FreqsPriorityGERAN',Data) -> 'enc_FreqsPriorityGERAN'(Data,[]);
encode_disp('FreqsPriorityListGERAN',Data) -> 'enc_FreqsPriorityListGERAN'(Data,[]);
encode_disp('FreqPriorityEUTRA',Data) -> 'enc_FreqPriorityEUTRA'(Data,[]);
encode_disp('FreqPriorityListEUTRA',Data) -> 'enc_FreqPriorityListEUTRA'(Data,[]);
encode_disp('IdleModeMobilityControlInfo',Data) -> 'enc_IdleModeMobilityControlInfo'(Data,[]);
encode_disp('RedirectedCarrierInfo',Data) -> 'enc_RedirectedCarrierInfo'(Data,[]);
encode_disp('ReleaseCause',Data) -> 'enc_ReleaseCause'(Data,[]);
encode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'enc_RRCConnectionRelease-r8-IEs'(Data,[]);
encode_disp('RRCConnectionRelease',Data) -> 'enc_RRCConnectionRelease'(Data,[]);
encode_disp('RRCConnectionReject-r8-IEs',Data) -> 'enc_RRCConnectionReject-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReject',Data) -> 'enc_RRCConnectionReject'(Data,[]);
encode_disp('ReestablishmentCause',Data) -> 'enc_ReestablishmentCause'(Data,[]);
encode_disp('ReestabUE-Identity',Data) -> 'enc_ReestabUE-Identity'(Data,[]);
encode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReestablishmentRequest',Data) -> 'enc_RRCConnectionReestablishmentRequest'(Data,[]);
encode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentReject-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReestablishmentReject',Data) -> 'enc_RRCConnectionReestablishmentReject'(Data,[]);
encode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReestablishmentComplete',Data) -> 'enc_RRCConnectionReestablishmentComplete'(Data,[]);
encode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'enc_RRCConnectionReestablishment-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReestablishment',Data) -> 'enc_RRCConnectionReestablishment'(Data,[]);
encode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReconfigurationComplete',Data) -> 'enc_RRCConnectionReconfigurationComplete'(Data,[]);
encode_disp('SecurityConfigHO',Data) -> 'enc_SecurityConfigHO'(Data,[]);
encode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'enc_RRCConnectionReconfiguration-r8-IEs'(Data,[]);
encode_disp('RRCConnectionReconfiguration',Data) -> 'enc_RRCConnectionReconfiguration'(Data,[]);
encode_disp('IMSI-Digit',Data) -> 'enc_IMSI-Digit'(Data,[]);
encode_disp('IMSI',Data) -> 'enc_IMSI'(Data,[]);
encode_disp('PagingUE-Identity',Data) -> 'enc_PagingUE-Identity'(Data,[]);
encode_disp('PagingRecord',Data) -> 'enc_PagingRecord'(Data,[]);
encode_disp('PagingRecordList',Data) -> 'enc_PagingRecordList'(Data,[]);
encode_disp('Paging',Data) -> 'enc_Paging'(Data,[]);
encode_disp('SystemInfoListGERAN',Data) -> 'enc_SystemInfoListGERAN'(Data,[]);
encode_disp('SI-OrPSI-GERAN',Data) -> 'enc_SI-OrPSI-GERAN'(Data,[]);
encode_disp('CellChangeOrder',Data) -> 'enc_CellChangeOrder'(Data,[]);
encode_disp('Handover',Data) -> 'enc_Handover'(Data,[]);
encode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'enc_MobilityFromEUTRACommand-r8-IEs'(Data,[]);
encode_disp('MobilityFromEUTRACommand',Data) -> 'enc_MobilityFromEUTRACommand'(Data,[]);
encode_disp('MeasurementReport-r8-IEs',Data) -> 'enc_MeasurementReport-r8-IEs'(Data,[]);
encode_disp('MeasurementReport',Data) -> 'enc_MeasurementReport'(Data,[]);
encode_disp('MasterInformationBlock',Data) -> 'enc_MasterInformationBlock'(Data,[]);
encode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data,[]);
encode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'enc_HandoverFromEUTRAPreparationRequest'(Data,[]);
encode_disp('DLInformationTransfer-r8-IEs',Data) -> 'enc_DLInformationTransfer-r8-IEs'(Data,[]);
encode_disp('DLInformationTransfer',Data) -> 'enc_DLInformationTransfer'(Data,[]);
encode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Data,[]);
encode_disp('CSFBParametersResponseCDMA2000',Data) -> 'enc_CSFBParametersResponseCDMA2000'(Data,[]);
encode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Data,[]);
encode_disp('CSFBParametersRequestCDMA2000',Data) -> 'enc_CSFBParametersRequestCDMA2000'(Data,[]);
encode_disp('DRB-CountInfo',Data) -> 'enc_DRB-CountInfo'(Data,[]);
encode_disp('DRB-CountInfoList',Data) -> 'enc_DRB-CountInfoList'(Data,[]);
encode_disp('CounterCheckResponse-r8-IEs',Data) -> 'enc_CounterCheckResponse-r8-IEs'(Data,[]);
encode_disp('CounterCheckResponse',Data) -> 'enc_CounterCheckResponse'(Data,[]);
encode_disp('DRB-CountMSB-Info',Data) -> 'enc_DRB-CountMSB-Info'(Data,[]);
encode_disp('DRB-CountMSB-InfoList',Data) -> 'enc_DRB-CountMSB-InfoList'(Data,[]);
encode_disp('CounterCheck-r8-IEs',Data) -> 'enc_CounterCheck-r8-IEs'(Data,[]);
encode_disp('CounterCheck',Data) -> 'enc_CounterCheck'(Data,[]);
encode_disp('UL-DCCH-MessageType',Data) -> 'enc_UL-DCCH-MessageType'(Data,[]);
encode_disp('UL-DCCH-Message',Data) -> 'enc_UL-DCCH-Message'(Data,[]);
encode_disp('UL-CCCH-MessageType',Data) -> 'enc_UL-CCCH-MessageType'(Data,[]);
encode_disp('UL-CCCH-Message',Data) -> 'enc_UL-CCCH-Message'(Data,[]);
encode_disp('DL-DCCH-MessageType',Data) -> 'enc_DL-DCCH-MessageType'(Data,[]);
encode_disp('DL-DCCH-Message',Data) -> 'enc_DL-DCCH-Message'(Data,[]);
encode_disp('DL-CCCH-MessageType',Data) -> 'enc_DL-CCCH-MessageType'(Data,[]);
encode_disp('DL-CCCH-Message',Data) -> 'enc_DL-CCCH-Message'(Data,[]);
encode_disp('PCCH-MessageType',Data) -> 'enc_PCCH-MessageType'(Data,[]);
encode_disp('PCCH-Message',Data) -> 'enc_PCCH-Message'(Data,[]);
encode_disp('BCCH-DL-SCH-MessageType',Data) -> 'enc_BCCH-DL-SCH-MessageType'(Data,[]);
encode_disp('BCCH-DL-SCH-Message',Data) -> 'enc_BCCH-DL-SCH-Message'(Data,[]);
encode_disp('BCCH-BCH-MessageType',Data) -> 'enc_BCCH-BCH-MessageType'(Data,[]);
encode_disp('BCCH-BCH-Message',Data) -> 'enc_BCCH-BCH-Message'(Data,[]);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('UE-TimersAndConstants',Data) -> 'dec_UE-TimersAndConstants'(Data,mandatory);
decode_disp('SupportedBandList1XRTT',Data) -> 'dec_SupportedBandList1XRTT'(Data,mandatory);
decode_disp('IRAT-ParametersCDMA2000-1XRTT',Data) -> 'dec_IRAT-ParametersCDMA2000-1XRTT'(Data,mandatory);
decode_disp('SupportedBandListHRPD',Data) -> 'dec_SupportedBandListHRPD'(Data,mandatory);
decode_disp('IRAT-ParametersCDMA2000-HRPD',Data) -> 'dec_IRAT-ParametersCDMA2000-HRPD'(Data,mandatory);
decode_disp('SupportedBandGERAN',Data) -> 'dec_SupportedBandGERAN'(Data,mandatory);
decode_disp('SupportedBandListGERAN',Data) -> 'dec_SupportedBandListGERAN'(Data,mandatory);
decode_disp('IRAT-ParametersGERAN',Data) -> 'dec_IRAT-ParametersGERAN'(Data,mandatory);
decode_disp('SupportedBandUTRA-TDD768',Data) -> 'dec_SupportedBandUTRA-TDD768'(Data,mandatory);
decode_disp('SupportedBandListUTRA-TDD768',Data) -> 'dec_SupportedBandListUTRA-TDD768'(Data,mandatory);
decode_disp('IRAT-ParametersUTRA-TDD768',Data) -> 'dec_IRAT-ParametersUTRA-TDD768'(Data,mandatory);
decode_disp('SupportedBandUTRA-TDD384',Data) -> 'dec_SupportedBandUTRA-TDD384'(Data,mandatory);
decode_disp('SupportedBandListUTRA-TDD384',Data) -> 'dec_SupportedBandListUTRA-TDD384'(Data,mandatory);
decode_disp('IRAT-ParametersUTRA-TDD384',Data) -> 'dec_IRAT-ParametersUTRA-TDD384'(Data,mandatory);
decode_disp('SupportedBandUTRA-TDD128',Data) -> 'dec_SupportedBandUTRA-TDD128'(Data,mandatory);
decode_disp('SupportedBandListUTRA-TDD128',Data) -> 'dec_SupportedBandListUTRA-TDD128'(Data,mandatory);
decode_disp('IRAT-ParametersUTRA-TDD128',Data) -> 'dec_IRAT-ParametersUTRA-TDD128'(Data,mandatory);
decode_disp('SupportedBandUTRA-FDD',Data) -> 'dec_SupportedBandUTRA-FDD'(Data,mandatory);
decode_disp('SupportedBandListUTRA-FDD',Data) -> 'dec_SupportedBandListUTRA-FDD'(Data,mandatory);
decode_disp('IRAT-ParametersUTRA-FDD',Data) -> 'dec_IRAT-ParametersUTRA-FDD'(Data,mandatory);
decode_disp('InterRAT-BandInfo',Data) -> 'dec_InterRAT-BandInfo'(Data,mandatory);
decode_disp('InterRAT-BandList',Data) -> 'dec_InterRAT-BandList'(Data,mandatory);
decode_disp('InterFreqBandInfo',Data) -> 'dec_InterFreqBandInfo'(Data,mandatory);
decode_disp('InterFreqBandList',Data) -> 'dec_InterFreqBandList'(Data,mandatory);
decode_disp('BandInfoEUTRA',Data) -> 'dec_BandInfoEUTRA'(Data,mandatory);
decode_disp('BandListEUTRA',Data) -> 'dec_BandListEUTRA'(Data,mandatory);
decode_disp('MeasParameters',Data) -> 'dec_MeasParameters'(Data,mandatory);
decode_disp('SupportedBandEUTRA',Data) -> 'dec_SupportedBandEUTRA'(Data,mandatory);
decode_disp('SupportedBandListEUTRA',Data) -> 'dec_SupportedBandListEUTRA'(Data,mandatory);
decode_disp('RF-Parameters',Data) -> 'dec_RF-Parameters'(Data,mandatory);
decode_disp('PhyLayerParameters',Data) -> 'dec_PhyLayerParameters'(Data,mandatory);
decode_disp('PDCP-Parameters',Data) -> 'dec_PDCP-Parameters'(Data,mandatory);
decode_disp('AccessStratumRelease',Data) -> 'dec_AccessStratumRelease'(Data,mandatory);
decode_disp('UE-EUTRA-Capability',Data) -> 'dec_UE-EUTRA-Capability'(Data,mandatory);
decode_disp('UE-CapabilityRAT-Container',Data) -> 'dec_UE-CapabilityRAT-Container'(Data,mandatory);
decode_disp('UE-CapabilityRAT-ContainerList',Data) -> 'dec_UE-CapabilityRAT-ContainerList'(Data,mandatory);
decode_disp('S-TMSI',Data) -> 'dec_S-TMSI'(Data,mandatory);
decode_disp('RRC-TransactionIdentifier',Data) -> 'dec_RRC-TransactionIdentifier'(Data,mandatory);
decode_disp('RAT-Type',Data) -> 'dec_RAT-Type'(Data,mandatory);
decode_disp('RAND-CDMA2000',Data) -> 'dec_RAND-CDMA2000'(Data,mandatory);
decode_disp('NeighCellConfig',Data) -> 'dec_NeighCellConfig'(Data,mandatory);
decode_disp('MMEC',Data) -> 'dec_MMEC'(Data,mandatory);
decode_disp('FilterCoefficient',Data) -> 'dec_FilterCoefficient'(Data,mandatory);
decode_disp('DedicatedInfoNAS',Data) -> 'dec_DedicatedInfoNAS'(Data,mandatory);
decode_disp('DedicatedInfoCDMA2000',Data) -> 'dec_DedicatedInfoCDMA2000'(Data,mandatory);
decode_disp('C-RNTI',Data) -> 'dec_C-RNTI'(Data,mandatory);
decode_disp('TimeToTrigger',Data) -> 'dec_TimeToTrigger'(Data,mandatory);
decode_disp('RSRQ-Range',Data) -> 'dec_RSRQ-Range'(Data,mandatory);
decode_disp('RSRP-Range',Data) -> 'dec_RSRP-Range'(Data,mandatory);
decode_disp('ReportInterval',Data) -> 'dec_ReportInterval'(Data,mandatory);
decode_disp('ReportConfigToAddMod',Data) -> 'dec_ReportConfigToAddMod'(Data,mandatory);
decode_disp('ReportConfigToAddModList',Data) -> 'dec_ReportConfigToAddModList'(Data,mandatory);
decode_disp('ThresholdCDMA2000',Data) -> 'dec_ThresholdCDMA2000'(Data,mandatory);
decode_disp('ThresholdGERAN',Data) -> 'dec_ThresholdGERAN'(Data,mandatory);
decode_disp('ThresholdUTRA',Data) -> 'dec_ThresholdUTRA'(Data,mandatory);
decode_disp('ReportConfigInterRAT',Data) -> 'dec_ReportConfigInterRAT'(Data,mandatory);
decode_disp('ReportConfigId',Data) -> 'dec_ReportConfigId'(Data,mandatory);
decode_disp('ThresholdEUTRA',Data) -> 'dec_ThresholdEUTRA'(Data,mandatory);
decode_disp('ReportConfigEUTRA',Data) -> 'dec_ReportConfigEUTRA'(Data,mandatory);
decode_disp('QuantityConfigCDMA2000',Data) -> 'dec_QuantityConfigCDMA2000'(Data,mandatory);
decode_disp('QuantityConfigGERAN',Data) -> 'dec_QuantityConfigGERAN'(Data,mandatory);
decode_disp('QuantityConfigUTRA',Data) -> 'dec_QuantityConfigUTRA'(Data,mandatory);
decode_disp('QuantityConfigEUTRA',Data) -> 'dec_QuantityConfigEUTRA'(Data,mandatory);
decode_disp('QuantityConfig',Data) -> 'dec_QuantityConfig'(Data,mandatory);
decode_disp('PLMN-IdentityList2',Data) -> 'dec_PLMN-IdentityList2'(Data,mandatory);
decode_disp('MeasResultCDMA2000',Data) -> 'dec_MeasResultCDMA2000'(Data,mandatory);
decode_disp('MeasResultListCDMA2000',Data) -> 'dec_MeasResultListCDMA2000'(Data,mandatory);
decode_disp('MeasResultsCDMA2000',Data) -> 'dec_MeasResultsCDMA2000'(Data,mandatory);
decode_disp('MeasResultGERAN',Data) -> 'dec_MeasResultGERAN'(Data,mandatory);
decode_disp('MeasResultListGERAN',Data) -> 'dec_MeasResultListGERAN'(Data,mandatory);
decode_disp('MeasResultUTRA',Data) -> 'dec_MeasResultUTRA'(Data,mandatory);
decode_disp('MeasResultListUTRA',Data) -> 'dec_MeasResultListUTRA'(Data,mandatory);
decode_disp('MeasResultEUTRA',Data) -> 'dec_MeasResultEUTRA'(Data,mandatory);
decode_disp('MeasResultListEUTRA',Data) -> 'dec_MeasResultListEUTRA'(Data,mandatory);
decode_disp('MeasResults',Data) -> 'dec_MeasResults'(Data,mandatory);
decode_disp('CellsToAddModUTRA-TDD',Data) -> 'dec_CellsToAddModUTRA-TDD'(Data,mandatory);
decode_disp('CellsToAddModListUTRA-TDD',Data) -> 'dec_CellsToAddModListUTRA-TDD'(Data,mandatory);
decode_disp('CellsToAddModUTRA-FDD',Data) -> 'dec_CellsToAddModUTRA-FDD'(Data,mandatory);
decode_disp('CellsToAddModListUTRA-FDD',Data) -> 'dec_CellsToAddModListUTRA-FDD'(Data,mandatory);
decode_disp('MeasObjectUTRA',Data) -> 'dec_MeasObjectUTRA'(Data,mandatory);
decode_disp('MeasObjectToAddMod',Data) -> 'dec_MeasObjectToAddMod'(Data,mandatory);
decode_disp('MeasObjectToAddModList',Data) -> 'dec_MeasObjectToAddModList'(Data,mandatory);
decode_disp('MeasObjectId',Data) -> 'dec_MeasObjectId'(Data,mandatory);
decode_disp('MeasObjectGERAN',Data) -> 'dec_MeasObjectGERAN'(Data,mandatory);
decode_disp('BlackCellsToAddMod',Data) -> 'dec_BlackCellsToAddMod'(Data,mandatory);
decode_disp('BlackCellsToAddModList',Data) -> 'dec_BlackCellsToAddModList'(Data,mandatory);
decode_disp('CellsToAddMod',Data) -> 'dec_CellsToAddMod'(Data,mandatory);
decode_disp('CellsToAddModList',Data) -> 'dec_CellsToAddModList'(Data,mandatory);
decode_disp('MeasObjectEUTRA',Data) -> 'dec_MeasObjectEUTRA'(Data,mandatory);
decode_disp('CellsToAddModCDMA2000',Data) -> 'dec_CellsToAddModCDMA2000'(Data,mandatory);
decode_disp('CellsToAddModListCDMA2000',Data) -> 'dec_CellsToAddModListCDMA2000'(Data,mandatory);
decode_disp('MeasObjectCDMA2000',Data) -> 'dec_MeasObjectCDMA2000'(Data,mandatory);
decode_disp('MeasIdToAddMod',Data) -> 'dec_MeasIdToAddMod'(Data,mandatory);
decode_disp('MeasIdToAddModList',Data) -> 'dec_MeasIdToAddModList'(Data,mandatory);
decode_disp('MeasId',Data) -> 'dec_MeasId'(Data,mandatory);
decode_disp('MeasGapConfig',Data) -> 'dec_MeasGapConfig'(Data,mandatory);
decode_disp('ReportConfigToRemoveList',Data) -> 'dec_ReportConfigToRemoveList'(Data,mandatory);
decode_disp('MeasObjectToRemoveList',Data) -> 'dec_MeasObjectToRemoveList'(Data,mandatory);
decode_disp('MeasIdToRemoveList',Data) -> 'dec_MeasIdToRemoveList'(Data,mandatory);
decode_disp('MeasConfig',Data) -> 'dec_MeasConfig'(Data,mandatory);
decode_disp('Hysteresis',Data) -> 'dec_Hysteresis'(Data,mandatory);
decode_disp('AllowedMeasBandwidth',Data) -> 'dec_AllowedMeasBandwidth'(Data,mandatory);
decode_disp('T-Reselection',Data) -> 'dec_T-Reselection'(Data,mandatory);
decode_disp('TrackingAreaCode',Data) -> 'dec_TrackingAreaCode'(Data,mandatory);
decode_disp('SystemTimeInfoCDMA2000',Data) -> 'dec_SystemTimeInfoCDMA2000'(Data,mandatory);
decode_disp('SpeedStateScaleFactors',Data) -> 'dec_SpeedStateScaleFactors'(Data,mandatory);
decode_disp('ReselectionThreshold',Data) -> 'dec_ReselectionThreshold'(Data,mandatory);
decode_disp('Q-OffsetRangeInterRAT',Data) -> 'dec_Q-OffsetRangeInterRAT'(Data,mandatory);
decode_disp('Q-OffsetRange',Data) -> 'dec_Q-OffsetRange'(Data,mandatory);
decode_disp('Q-RxLevMin',Data) -> 'dec_Q-RxLevMin'(Data,mandatory);
decode_disp('PreRegistrationZoneIdHRPD',Data) -> 'dec_PreRegistrationZoneIdHRPD'(Data,mandatory);
decode_disp('SecondaryPreRegistrationZoneIdListHRPD',Data) -> 'dec_SecondaryPreRegistrationZoneIdListHRPD'(Data,mandatory);
decode_disp('PreRegistrationInfoHRPD',Data) -> 'dec_PreRegistrationInfoHRPD'(Data,mandatory);
decode_disp('MCC-MNC-Digit',Data) -> 'dec_MCC-MNC-Digit'(Data,mandatory);
decode_disp('MNC',Data) -> 'dec_MNC'(Data,mandatory);
decode_disp('MCC',Data) -> 'dec_MCC'(Data,mandatory);
decode_disp('PLMN-Identity',Data) -> 'dec_PLMN-Identity'(Data,mandatory);
decode_disp('PhysCellIdUTRA-TDD',Data) -> 'dec_PhysCellIdUTRA-TDD'(Data,mandatory);
decode_disp('PhysCellIdUTRA-FDD',Data) -> 'dec_PhysCellIdUTRA-FDD'(Data,mandatory);
decode_disp('PhysCellIdGERAN',Data) -> 'dec_PhysCellIdGERAN'(Data,mandatory);
decode_disp('PhysCellIdCDMA2000',Data) -> 'dec_PhysCellIdCDMA2000'(Data,mandatory);
decode_disp('PhysCellIdRange',Data) -> 'dec_PhysCellIdRange'(Data,mandatory);
decode_disp('PhysCellId',Data) -> 'dec_PhysCellId'(Data,mandatory);
decode_disp('MobilityStateParameters',Data) -> 'dec_MobilityStateParameters'(Data,mandatory);
decode_disp('MobilityParametersCDMA2000',Data) -> 'dec_MobilityParametersCDMA2000'(Data,mandatory);
decode_disp('CarrierFreqEUTRA',Data) -> 'dec_CarrierFreqEUTRA'(Data,mandatory);
decode_disp('CarrierBandwidthEUTRA',Data) -> 'dec_CarrierBandwidthEUTRA'(Data,mandatory);
decode_disp('MobilityControlInfo',Data) -> 'dec_MobilityControlInfo'(Data,mandatory);
decode_disp('CellGlobalIdCDMA2000',Data) -> 'dec_CellGlobalIdCDMA2000'(Data,mandatory);
decode_disp('CellGlobalIdGERAN',Data) -> 'dec_CellGlobalIdGERAN'(Data,mandatory);
decode_disp('CellGlobalIdUTRA',Data) -> 'dec_CellGlobalIdUTRA'(Data,mandatory);
decode_disp('CellGlobalIdEUTRA',Data) -> 'dec_CellGlobalIdEUTRA'(Data,mandatory);
decode_disp('CSFB-RegistrationParam1XRTT',Data) -> 'dec_CSFB-RegistrationParam1XRTT'(Data,mandatory);
decode_disp('CellReselectionPriority',Data) -> 'dec_CellReselectionPriority'(Data,mandatory);
decode_disp('CellIndex',Data) -> 'dec_CellIndex'(Data,mandatory);
decode_disp('CellIndexList',Data) -> 'dec_CellIndexList'(Data,mandatory);
decode_disp('CellIdentity',Data) -> 'dec_CellIdentity'(Data,mandatory);
decode_disp('CDMA2000-Type',Data) -> 'dec_CDMA2000-Type'(Data,mandatory);
decode_disp('ExplicitListOfARFCNs',Data) -> 'dec_ExplicitListOfARFCNs'(Data,mandatory);
decode_disp('CarrierFreqsGERAN',Data) -> 'dec_CarrierFreqsGERAN'(Data,mandatory);
decode_disp('CarrierFreqGERAN',Data) -> 'dec_CarrierFreqGERAN'(Data,mandatory);
decode_disp('CarrierFreqCDMA2000',Data) -> 'dec_CarrierFreqCDMA2000'(Data,mandatory);
decode_disp('BandIndicatorGERAN',Data) -> 'dec_BandIndicatorGERAN'(Data,mandatory);
decode_disp('BandclassCDMA2000',Data) -> 'dec_BandclassCDMA2000'(Data,mandatory);
decode_disp('ARFCN-ValueUTRA',Data) -> 'dec_ARFCN-ValueUTRA'(Data,mandatory);
decode_disp('ARFCN-ValueGERAN',Data) -> 'dec_ARFCN-ValueGERAN'(Data,mandatory);
decode_disp('ARFCN-ValueEUTRA',Data) -> 'dec_ARFCN-ValueEUTRA'(Data,mandatory);
decode_disp('ARFCN-ValueCDMA2000',Data) -> 'dec_ARFCN-ValueCDMA2000'(Data,mandatory);
decode_disp('AdditionalSpectrumEmission',Data) -> 'dec_AdditionalSpectrumEmission'(Data,mandatory);
decode_disp('ShortMAC-I',Data) -> 'dec_ShortMAC-I'(Data,mandatory);
decode_disp('SecurityAlgorithmConfig',Data) -> 'dec_SecurityAlgorithmConfig'(Data,mandatory);
decode_disp('NextHopChainingCount',Data) -> 'dec_NextHopChainingCount'(Data,mandatory);
decode_disp('DeltaFList-PUCCH',Data) -> 'dec_DeltaFList-PUCCH'(Data,mandatory);
decode_disp('UplinkPowerControlDedicated',Data) -> 'dec_UplinkPowerControlDedicated'(Data,mandatory);
decode_disp('UplinkPowerControlCommon',Data) -> 'dec_UplinkPowerControlCommon'(Data,mandatory);
decode_disp('TPC-Index',Data) -> 'dec_TPC-Index'(Data,mandatory);
decode_disp('TPC-PDCCH-Config',Data) -> 'dec_TPC-PDCCH-Config'(Data,mandatory);
decode_disp('TimeAlignmentTimer',Data) -> 'dec_TimeAlignmentTimer'(Data,mandatory);
decode_disp('TDD-Config',Data) -> 'dec_TDD-Config'(Data,mandatory);
decode_disp('N1-PUCCH-AN-PersistentList',Data) -> 'dec_N1-PUCCH-AN-PersistentList'(Data,mandatory);
decode_disp('SPS-ConfigUL',Data) -> 'dec_SPS-ConfigUL'(Data,mandatory);
decode_disp('SPS-ConfigDL',Data) -> 'dec_SPS-ConfigDL'(Data,mandatory);
decode_disp('SPS-Config',Data) -> 'dec_SPS-Config'(Data,mandatory);
decode_disp('SoundingRS-UL-ConfigDedicated',Data) -> 'dec_SoundingRS-UL-ConfigDedicated'(Data,mandatory);
decode_disp('SoundingRS-UL-ConfigCommon',Data) -> 'dec_SoundingRS-UL-ConfigCommon'(Data,mandatory);
decode_disp('SchedulingRequestConfig',Data) -> 'dec_SchedulingRequestConfig'(Data,mandatory);
decode_disp('T-StatusProhibit',Data) -> 'dec_T-StatusProhibit'(Data,mandatory);
decode_disp('T-Reordering',Data) -> 'dec_T-Reordering'(Data,mandatory);
decode_disp('PollByte',Data) -> 'dec_PollByte'(Data,mandatory);
decode_disp('PollPDU',Data) -> 'dec_PollPDU'(Data,mandatory);
decode_disp('T-PollRetransmit',Data) -> 'dec_T-PollRetransmit'(Data,mandatory);
decode_disp('SN-FieldLength',Data) -> 'dec_SN-FieldLength'(Data,mandatory);
decode_disp('DL-UM-RLC',Data) -> 'dec_DL-UM-RLC'(Data,mandatory);
decode_disp('UL-UM-RLC',Data) -> 'dec_UL-UM-RLC'(Data,mandatory);
decode_disp('DL-AM-RLC',Data) -> 'dec_DL-AM-RLC'(Data,mandatory);
decode_disp('UL-AM-RLC',Data) -> 'dec_UL-AM-RLC'(Data,mandatory);
decode_disp('RLC-Config',Data) -> 'dec_RLC-Config'(Data,mandatory);
decode_disp('DRB-ToReleaseList',Data) -> 'dec_DRB-ToReleaseList'(Data,mandatory);
decode_disp('DRB-ToAddMod',Data) -> 'dec_DRB-ToAddMod'(Data,mandatory);
decode_disp('DRB-ToAddModList',Data) -> 'dec_DRB-ToAddModList'(Data,mandatory);
decode_disp('SRB-ToAddMod',Data) -> 'dec_SRB-ToAddMod'(Data,mandatory);
decode_disp('SRB-ToAddModList',Data) -> 'dec_SRB-ToAddModList'(Data,mandatory);
decode_disp('RadioResourceConfigDedicated',Data) -> 'dec_RadioResourceConfigDedicated'(Data,mandatory);
decode_disp('UL-CyclicPrefixLength',Data) -> 'dec_UL-CyclicPrefixLength'(Data,mandatory);
decode_disp('PCCH-Config',Data) -> 'dec_PCCH-Config'(Data,mandatory);
decode_disp('BCCH-Config',Data) -> 'dec_BCCH-Config'(Data,mandatory);
decode_disp('RadioResourceConfigCommon',Data) -> 'dec_RadioResourceConfigCommon'(Data,mandatory);
decode_disp('RadioResourceConfigCommonSIB',Data) -> 'dec_RadioResourceConfigCommonSIB'(Data,mandatory);
decode_disp('RACH-ConfigDedicated',Data) -> 'dec_RACH-ConfigDedicated'(Data,mandatory);
decode_disp('RACH-ConfigCommon',Data) -> 'dec_RACH-ConfigCommon'(Data,mandatory);
decode_disp('UL-ReferenceSignalsPUSCH',Data) -> 'dec_UL-ReferenceSignalsPUSCH'(Data,mandatory);
decode_disp('PUSCH-ConfigDedicated',Data) -> 'dec_PUSCH-ConfigDedicated'(Data,mandatory);
decode_disp('PUSCH-ConfigCommon',Data) -> 'dec_PUSCH-ConfigCommon'(Data,mandatory);
decode_disp('PUCCH-ConfigDedicated',Data) -> 'dec_PUCCH-ConfigDedicated'(Data,mandatory);
decode_disp('PUCCH-ConfigCommon',Data) -> 'dec_PUCCH-ConfigCommon'(Data,mandatory);
decode_disp('PresenceAntennaPort1',Data) -> 'dec_PresenceAntennaPort1'(Data,mandatory);
decode_disp('PRACH-ConfigInfo',Data) -> 'dec_PRACH-ConfigInfo'(Data,mandatory);
decode_disp('PRACH-Config',Data) -> 'dec_PRACH-Config'(Data,mandatory);
decode_disp('PRACH-ConfigSIB',Data) -> 'dec_PRACH-ConfigSIB'(Data,mandatory);
decode_disp('P-Max',Data) -> 'dec_P-Max'(Data,mandatory);
decode_disp('PhysicalConfigDedicated',Data) -> 'dec_PhysicalConfigDedicated'(Data,mandatory);
decode_disp('PHICH-Config',Data) -> 'dec_PHICH-Config'(Data,mandatory);
decode_disp('PDSCH-ConfigDedicated',Data) -> 'dec_PDSCH-ConfigDedicated'(Data,mandatory);
decode_disp('PDSCH-ConfigCommon',Data) -> 'dec_PDSCH-ConfigCommon'(Data,mandatory);
decode_disp('PDCP-Config',Data) -> 'dec_PDCP-Config'(Data,mandatory);
decode_disp('DRX-Config',Data) -> 'dec_DRX-Config'(Data,mandatory);
decode_disp('MAC-MainConfig',Data) -> 'dec_MAC-MainConfig'(Data,mandatory);
decode_disp('LogicalChannelConfig',Data) -> 'dec_LogicalChannelConfig'(Data,mandatory);
decode_disp('DRB-Identity',Data) -> 'dec_DRB-Identity'(Data,mandatory);
decode_disp('CQI-ReportPeriodic',Data) -> 'dec_CQI-ReportPeriodic'(Data,mandatory);
decode_disp('CQI-ReportConfig',Data) -> 'dec_CQI-ReportConfig'(Data,mandatory);
decode_disp('AntennaInfoDedicated',Data) -> 'dec_AntennaInfoDedicated'(Data,mandatory);
decode_disp('AntennaInfoCommon',Data) -> 'dec_AntennaInfoCommon'(Data,mandatory);
decode_disp('SystemInformationBlockType11',Data) -> 'dec_SystemInformationBlockType11'(Data,mandatory);
decode_disp('SystemInformationBlockType10',Data) -> 'dec_SystemInformationBlockType10'(Data,mandatory);
decode_disp('SystemInformationBlockType9',Data) -> 'dec_SystemInformationBlockType9'(Data,mandatory);
decode_disp('BandClassInfoCDMA2000',Data) -> 'dec_BandClassInfoCDMA2000'(Data,mandatory);
decode_disp('BandClassListCDMA2000',Data) -> 'dec_BandClassListCDMA2000'(Data,mandatory);
decode_disp('PhysCellIdListCDMA2000',Data) -> 'dec_PhysCellIdListCDMA2000'(Data,mandatory);
decode_disp('NeighCellsPerBandclassCDMA2000',Data) -> 'dec_NeighCellsPerBandclassCDMA2000'(Data,mandatory);
decode_disp('NeighCellsPerBandclassListCDMA2000',Data) -> 'dec_NeighCellsPerBandclassListCDMA2000'(Data,mandatory);
decode_disp('NeighCellCDMA2000',Data) -> 'dec_NeighCellCDMA2000'(Data,mandatory);
decode_disp('NeighCellListCDMA2000',Data) -> 'dec_NeighCellListCDMA2000'(Data,mandatory);
decode_disp('CellReselectionParametersCDMA2000',Data) -> 'dec_CellReselectionParametersCDMA2000'(Data,mandatory);
decode_disp('SystemInformationBlockType8',Data) -> 'dec_SystemInformationBlockType8'(Data,mandatory);
decode_disp('CarrierFreqsInfoGERAN',Data) -> 'dec_CarrierFreqsInfoGERAN'(Data,mandatory);
decode_disp('CarrierFreqsInfoListGERAN',Data) -> 'dec_CarrierFreqsInfoListGERAN'(Data,mandatory);
decode_disp('SystemInformationBlockType7',Data) -> 'dec_SystemInformationBlockType7'(Data,mandatory);
decode_disp('CarrierFreqUTRA-TDD',Data) -> 'dec_CarrierFreqUTRA-TDD'(Data,mandatory);
decode_disp('CarrierFreqListUTRA-TDD',Data) -> 'dec_CarrierFreqListUTRA-TDD'(Data,mandatory);
decode_disp('CarrierFreqUTRA-FDD',Data) -> 'dec_CarrierFreqUTRA-FDD'(Data,mandatory);
decode_disp('CarrierFreqListUTRA-FDD',Data) -> 'dec_CarrierFreqListUTRA-FDD'(Data,mandatory);
decode_disp('SystemInformationBlockType6',Data) -> 'dec_SystemInformationBlockType6'(Data,mandatory);
decode_disp('InterFreqBlackCellList',Data) -> 'dec_InterFreqBlackCellList'(Data,mandatory);
decode_disp('InterFreqNeighCellInfo',Data) -> 'dec_InterFreqNeighCellInfo'(Data,mandatory);
decode_disp('InterFreqNeighCellList',Data) -> 'dec_InterFreqNeighCellList'(Data,mandatory);
decode_disp('InterFreqCarrierFreqInfo',Data) -> 'dec_InterFreqCarrierFreqInfo'(Data,mandatory);
decode_disp('InterFreqCarrierFreqList',Data) -> 'dec_InterFreqCarrierFreqList'(Data,mandatory);
decode_disp('SystemInformationBlockType5',Data) -> 'dec_SystemInformationBlockType5'(Data,mandatory);
decode_disp('IntraFreqBlackCellList',Data) -> 'dec_IntraFreqBlackCellList'(Data,mandatory);
decode_disp('IntraFreqNeighCellInfo',Data) -> 'dec_IntraFreqNeighCellInfo'(Data,mandatory);
decode_disp('IntraFreqNeighCellList',Data) -> 'dec_IntraFreqNeighCellList'(Data,mandatory);
decode_disp('SystemInformationBlockType4',Data) -> 'dec_SystemInformationBlockType4'(Data,mandatory);
decode_disp('SystemInformationBlockType3',Data) -> 'dec_SystemInformationBlockType3'(Data,mandatory);
decode_disp('MBSFN-SubframeConfig',Data) -> 'dec_MBSFN-SubframeConfig'(Data,mandatory);
decode_disp('MBSFN-SubframeConfigList',Data) -> 'dec_MBSFN-SubframeConfigList'(Data,mandatory);
decode_disp('AC-BarringConfig',Data) -> 'dec_AC-BarringConfig'(Data,mandatory);
decode_disp('SystemInformationBlockType2',Data) -> 'dec_SystemInformationBlockType2'(Data,mandatory);
decode_disp('ULInformationTransfer-r8-IEs',Data) -> 'dec_ULInformationTransfer-r8-IEs'(Data,mandatory);
decode_disp('ULInformationTransfer',Data) -> 'dec_ULInformationTransfer'(Data,mandatory);
decode_disp('ULHandoverPreparationTransfer-r8-IEs',Data) -> 'dec_ULHandoverPreparationTransfer-r8-IEs'(Data,mandatory);
decode_disp('ULHandoverPreparationTransfer',Data) -> 'dec_ULHandoverPreparationTransfer'(Data,mandatory);
decode_disp('UECapabilityInformation-r8-IEs',Data) -> 'dec_UECapabilityInformation-r8-IEs'(Data,mandatory);
decode_disp('UECapabilityInformation',Data) -> 'dec_UECapabilityInformation'(Data,mandatory);
decode_disp('UE-CapabilityRequest',Data) -> 'dec_UE-CapabilityRequest'(Data,mandatory);
decode_disp('UECapabilityEnquiry-r8-IEs',Data) -> 'dec_UECapabilityEnquiry-r8-IEs'(Data,mandatory);
decode_disp('UECapabilityEnquiry',Data) -> 'dec_UECapabilityEnquiry'(Data,mandatory);
decode_disp('SIB-Type',Data) -> 'dec_SIB-Type'(Data,mandatory);
decode_disp('SIB-MappingInfo',Data) -> 'dec_SIB-MappingInfo'(Data,mandatory);
decode_disp('SchedulingInfo',Data) -> 'dec_SchedulingInfo'(Data,mandatory);
decode_disp('SchedulingInfoList',Data) -> 'dec_SchedulingInfoList'(Data,mandatory);
decode_disp('PLMN-IdentityInfo',Data) -> 'dec_PLMN-IdentityInfo'(Data,mandatory);
decode_disp('PLMN-IdentityList',Data) -> 'dec_PLMN-IdentityList'(Data,mandatory);
decode_disp('SystemInformationBlockType1',Data) -> 'dec_SystemInformationBlockType1'(Data,mandatory);
decode_disp('SystemInformation-r8-IEs',Data) -> 'dec_SystemInformation-r8-IEs'(Data,mandatory);
decode_disp('SystemInformation',Data) -> 'dec_SystemInformation'(Data,mandatory);
decode_disp('SecurityModeFailure-r8-IEs',Data) -> 'dec_SecurityModeFailure-r8-IEs'(Data,mandatory);
decode_disp('SecurityModeFailure',Data) -> 'dec_SecurityModeFailure'(Data,mandatory);
decode_disp('SecurityModeComplete-r8-IEs',Data) -> 'dec_SecurityModeComplete-r8-IEs'(Data,mandatory);
decode_disp('SecurityModeComplete',Data) -> 'dec_SecurityModeComplete'(Data,mandatory);
decode_disp('SecurityConfigSMC',Data) -> 'dec_SecurityConfigSMC'(Data,mandatory);
decode_disp('SecurityModeCommand-r8-IEs',Data) -> 'dec_SecurityModeCommand-r8-IEs'(Data,mandatory);
decode_disp('SecurityModeCommand',Data) -> 'dec_SecurityModeCommand'(Data,mandatory);
decode_disp('RegisteredMME',Data) -> 'dec_RegisteredMME'(Data,mandatory);
decode_disp('RRCConnectionSetupComplete-r8-IEs',Data) -> 'dec_RRCConnectionSetupComplete-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionSetupComplete',Data) -> 'dec_RRCConnectionSetupComplete'(Data,mandatory);
decode_disp('RRCConnectionSetup-r8-IEs',Data) -> 'dec_RRCConnectionSetup-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionSetup',Data) -> 'dec_RRCConnectionSetup'(Data,mandatory);
decode_disp('EstablishmentCause',Data) -> 'dec_EstablishmentCause'(Data,mandatory);
decode_disp('InitialUE-Identity',Data) -> 'dec_InitialUE-Identity'(Data,mandatory);
decode_disp('RRCConnectionRequest-r8-IEs',Data) -> 'dec_RRCConnectionRequest-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionRequest',Data) -> 'dec_RRCConnectionRequest'(Data,mandatory);
decode_disp('BandClassPriority1XRTT',Data) -> 'dec_BandClassPriority1XRTT'(Data,mandatory);
decode_disp('BandClassPriorityList1XRTT',Data) -> 'dec_BandClassPriorityList1XRTT'(Data,mandatory);
decode_disp('BandClassPriorityHRPD',Data) -> 'dec_BandClassPriorityHRPD'(Data,mandatory);
decode_disp('BandClassPriorityListHRPD',Data) -> 'dec_BandClassPriorityListHRPD'(Data,mandatory);
decode_disp('FreqPriorityUTRA-TDD',Data) -> 'dec_FreqPriorityUTRA-TDD'(Data,mandatory);
decode_disp('FreqPriorityListUTRA-TDD',Data) -> 'dec_FreqPriorityListUTRA-TDD'(Data,mandatory);
decode_disp('FreqPriorityUTRA-FDD',Data) -> 'dec_FreqPriorityUTRA-FDD'(Data,mandatory);
decode_disp('FreqPriorityListUTRA-FDD',Data) -> 'dec_FreqPriorityListUTRA-FDD'(Data,mandatory);
decode_disp('FreqsPriorityGERAN',Data) -> 'dec_FreqsPriorityGERAN'(Data,mandatory);
decode_disp('FreqsPriorityListGERAN',Data) -> 'dec_FreqsPriorityListGERAN'(Data,mandatory);
decode_disp('FreqPriorityEUTRA',Data) -> 'dec_FreqPriorityEUTRA'(Data,mandatory);
decode_disp('FreqPriorityListEUTRA',Data) -> 'dec_FreqPriorityListEUTRA'(Data,mandatory);
decode_disp('IdleModeMobilityControlInfo',Data) -> 'dec_IdleModeMobilityControlInfo'(Data,mandatory);
decode_disp('RedirectedCarrierInfo',Data) -> 'dec_RedirectedCarrierInfo'(Data,mandatory);
decode_disp('ReleaseCause',Data) -> 'dec_ReleaseCause'(Data,mandatory);
decode_disp('RRCConnectionRelease-r8-IEs',Data) -> 'dec_RRCConnectionRelease-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionRelease',Data) -> 'dec_RRCConnectionRelease'(Data,mandatory);
decode_disp('RRCConnectionReject-r8-IEs',Data) -> 'dec_RRCConnectionReject-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReject',Data) -> 'dec_RRCConnectionReject'(Data,mandatory);
decode_disp('ReestablishmentCause',Data) -> 'dec_ReestablishmentCause'(Data,mandatory);
decode_disp('ReestabUE-Identity',Data) -> 'dec_ReestabUE-Identity'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentRequest-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentRequest',Data) -> 'dec_RRCConnectionReestablishmentRequest'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentReject-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentReject-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentReject',Data) -> 'dec_RRCConnectionReestablishmentReject'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentComplete-r8-IEs',Data) -> 'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReestablishmentComplete',Data) -> 'dec_RRCConnectionReestablishmentComplete'(Data,mandatory);
decode_disp('RRCConnectionReestablishment-r8-IEs',Data) -> 'dec_RRCConnectionReestablishment-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReestablishment',Data) -> 'dec_RRCConnectionReestablishment'(Data,mandatory);
decode_disp('RRCConnectionReconfigurationComplete-r8-IEs',Data) -> 'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReconfigurationComplete',Data) -> 'dec_RRCConnectionReconfigurationComplete'(Data,mandatory);
decode_disp('SecurityConfigHO',Data) -> 'dec_SecurityConfigHO'(Data,mandatory);
decode_disp('RRCConnectionReconfiguration-r8-IEs',Data) -> 'dec_RRCConnectionReconfiguration-r8-IEs'(Data,mandatory);
decode_disp('RRCConnectionReconfiguration',Data) -> 'dec_RRCConnectionReconfiguration'(Data,mandatory);
decode_disp('IMSI-Digit',Data) -> 'dec_IMSI-Digit'(Data,mandatory);
decode_disp('IMSI',Data) -> 'dec_IMSI'(Data,mandatory);
decode_disp('PagingUE-Identity',Data) -> 'dec_PagingUE-Identity'(Data,mandatory);
decode_disp('PagingRecord',Data) -> 'dec_PagingRecord'(Data,mandatory);
decode_disp('PagingRecordList',Data) -> 'dec_PagingRecordList'(Data,mandatory);
decode_disp('Paging',Data) -> 'dec_Paging'(Data,mandatory);
decode_disp('SystemInfoListGERAN',Data) -> 'dec_SystemInfoListGERAN'(Data,mandatory);
decode_disp('SI-OrPSI-GERAN',Data) -> 'dec_SI-OrPSI-GERAN'(Data,mandatory);
decode_disp('CellChangeOrder',Data) -> 'dec_CellChangeOrder'(Data,mandatory);
decode_disp('Handover',Data) -> 'dec_Handover'(Data,mandatory);
decode_disp('MobilityFromEUTRACommand-r8-IEs',Data) -> 'dec_MobilityFromEUTRACommand-r8-IEs'(Data,mandatory);
decode_disp('MobilityFromEUTRACommand',Data) -> 'dec_MobilityFromEUTRACommand'(Data,mandatory);
decode_disp('MeasurementReport-r8-IEs',Data) -> 'dec_MeasurementReport-r8-IEs'(Data,mandatory);
decode_disp('MeasurementReport',Data) -> 'dec_MeasurementReport'(Data,mandatory);
decode_disp('MasterInformationBlock',Data) -> 'dec_MasterInformationBlock'(Data,mandatory);
decode_disp('HandoverFromEUTRAPreparationRequest-r8-IEs',Data) -> 'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Data,mandatory);
decode_disp('HandoverFromEUTRAPreparationRequest',Data) -> 'dec_HandoverFromEUTRAPreparationRequest'(Data,mandatory);
decode_disp('DLInformationTransfer-r8-IEs',Data) -> 'dec_DLInformationTransfer-r8-IEs'(Data,mandatory);
decode_disp('DLInformationTransfer',Data) -> 'dec_DLInformationTransfer'(Data,mandatory);
decode_disp('CSFBParametersResponseCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Data,mandatory);
decode_disp('CSFBParametersResponseCDMA2000',Data) -> 'dec_CSFBParametersResponseCDMA2000'(Data,mandatory);
decode_disp('CSFBParametersRequestCDMA2000-r8-IEs',Data) -> 'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Data,mandatory);
decode_disp('CSFBParametersRequestCDMA2000',Data) -> 'dec_CSFBParametersRequestCDMA2000'(Data,mandatory);
decode_disp('DRB-CountInfo',Data) -> 'dec_DRB-CountInfo'(Data,mandatory);
decode_disp('DRB-CountInfoList',Data) -> 'dec_DRB-CountInfoList'(Data,mandatory);
decode_disp('CounterCheckResponse-r8-IEs',Data) -> 'dec_CounterCheckResponse-r8-IEs'(Data,mandatory);
decode_disp('CounterCheckResponse',Data) -> 'dec_CounterCheckResponse'(Data,mandatory);
decode_disp('DRB-CountMSB-Info',Data) -> 'dec_DRB-CountMSB-Info'(Data,mandatory);
decode_disp('DRB-CountMSB-InfoList',Data) -> 'dec_DRB-CountMSB-InfoList'(Data,mandatory);
decode_disp('CounterCheck-r8-IEs',Data) -> 'dec_CounterCheck-r8-IEs'(Data,mandatory);
decode_disp('CounterCheck',Data) -> 'dec_CounterCheck'(Data,mandatory);
decode_disp('UL-DCCH-MessageType',Data) -> 'dec_UL-DCCH-MessageType'(Data,mandatory);
decode_disp('UL-DCCH-Message',Data) -> 'dec_UL-DCCH-Message'(Data,mandatory);
decode_disp('UL-CCCH-MessageType',Data) -> 'dec_UL-CCCH-MessageType'(Data,mandatory);
decode_disp('UL-CCCH-Message',Data) -> 'dec_UL-CCCH-Message'(Data,mandatory);
decode_disp('DL-DCCH-MessageType',Data) -> 'dec_DL-DCCH-MessageType'(Data,mandatory);
decode_disp('DL-DCCH-Message',Data) -> 'dec_DL-DCCH-Message'(Data,mandatory);
decode_disp('DL-CCCH-MessageType',Data) -> 'dec_DL-CCCH-MessageType'(Data,mandatory);
decode_disp('DL-CCCH-Message',Data) -> 'dec_DL-CCCH-Message'(Data,mandatory);
decode_disp('PCCH-MessageType',Data) -> 'dec_PCCH-MessageType'(Data,mandatory);
decode_disp('PCCH-Message',Data) -> 'dec_PCCH-Message'(Data,mandatory);
decode_disp('BCCH-DL-SCH-MessageType',Data) -> 'dec_BCCH-DL-SCH-MessageType'(Data,mandatory);
decode_disp('BCCH-DL-SCH-Message',Data) -> 'dec_BCCH-DL-SCH-Message'(Data,mandatory);
decode_disp('BCCH-BCH-MessageType',Data) -> 'dec_BCCH-BCH-MessageType'(Data,mandatory);
decode_disp('BCCH-BCH-Message',Data) -> 'dec_BCCH-BCH-Message'(Data,mandatory);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).



wrap_encode(Bytes) when is_list(Bytes) ->
   binary_to_list(list_to_binary(Bytes));
wrap_encode(Bytes) when is_binary(Bytes) ->
   binary_to_list(Bytes);
wrap_encode(Bytes) -> Bytes.

wrap_decode(Bytes) when is_list(Bytes) ->
   list_to_binary(Bytes);
wrap_decode(Bytes) -> Bytes.


info() ->
   case ?MODULE:module_info() of
      MI when is_list(MI) ->
         case lists:keysearch(attributes,1,MI) of
            {value,{_,Attributes}} when is_list(Attributes) ->
               case lists:keysearch(asn1_info,1,Attributes) of
                  {value,{_,Info}} when is_list(Info) ->
                     Info;
                  _ ->
                     []
               end;
            _ ->
               []
         end
   end.


%%================================
%%  UE-TimersAndConstants
%%================================
'enc_UE-TimersAndConstants'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,t300) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,t300) end) of
ms100 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
ms400 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
ms600 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
ms1500 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
ms2000 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,t301) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,t301) end) of
ms100 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
ms400 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
ms600 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
ms1500 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
ms2000 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,t310) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,t310) end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
ms50 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
ms2000 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,n310) of {_,Enumval7}->Enumval7;_->?RT_BER:cindex(5,Val,n310) end) of
n1 -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
n2 -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
n3 -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(3,[{tag,128,3,'IMPLICIT',0}]);
n6 -> ?RT_BER:encode_enumerated(4,[{tag,128,3,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(5,[{tag,128,3,'IMPLICIT',0}]);
n10 -> ?RT_BER:encode_enumerated(6,[{tag,128,3,'IMPLICIT',0}]);
n20 -> ?RT_BER:encode_enumerated(7,[{tag,128,3,'IMPLICIT',0}]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case (case ?RT_BER:cindex(6,Val,t311) of {_,Enumval9}->Enumval9;_->?RT_BER:cindex(6,Val,t311) end) of
ms1000 -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
ms3000 -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
ms5000 -> ?RT_BER:encode_enumerated(2,[{tag,128,4,'IMPLICIT',0}]);
ms10000 -> ?RT_BER:encode_enumerated(3,[{tag,128,4,'IMPLICIT',0}]);
ms15000 -> ?RT_BER:encode_enumerated(4,[{tag,128,4,'IMPLICIT',0}]);
ms20000 -> ?RT_BER:encode_enumerated(5,[{tag,128,4,'IMPLICIT',0}]);
ms30000 -> ?RT_BER:encode_enumerated(6,[{tag,128,4,'IMPLICIT',0}]);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case (case ?RT_BER:cindex(7,Val,n311) of {_,Enumval11}->Enumval11;_->?RT_BER:cindex(7,Val,n311) end) of
n1 -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',0}]);
n2 -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',0}]);
n3 -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(3,[{tag,128,5,'IMPLICIT',0}]);
n5 -> ?RT_BER:encode_enumerated(4,[{tag,128,5,'IMPLICIT',0}]);
n6 -> ?RT_BER:encode_enumerated(5,[{tag,128,5,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(6,[{tag,128,5,'IMPLICIT',0}]);
n10 -> ?RT_BER:encode_enumerated(7,[{tag,128,5,'IMPLICIT',0}]);
Enumval12 -> exit({error,{asn1, {enumerated_not_in_range,Enumval12}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UE-TimersAndConstants'(Bytes, OptOrMand) ->
   'dec_UE-TimersAndConstants'(Bytes, OptOrMand, []).

'dec_UE-TimersAndConstants'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{ms100,0},{ms200,1},{ms300,2},{ms400,3},{ms600,4},{ms1000,5},{ms1500,6},{ms2000,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{ms100,0},{ms200,1},{ms300,2},{ms400,3},{ms600,4},{ms1000,5},{ms1500,6},{ms2000,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{ms0,0},{ms50,1},{ms100,2},{ms200,3},{ms500,4},{ms1000,5},{ms2000,6}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{n1,0},{n2,1},{n3,2},{n4,3},{n6,4},{n8,5},{n10,6},{n20,7}],[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_enumerated(Bytes6,[],[{ms1000,0},{ms3000,1},{ms5000,2},{ms10000,3},{ms15000,4},{ms20000,5},{ms30000,6}],[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_enumerated(Bytes7,[],[{n1,0},{n2,1},{n3,2},{n4,3},{n5,4},{n6,5},{n8,6},{n10,7}],[{tag,128,5,'IMPLICIT',0}], mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'UE-TimersAndConstants', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  SupportedBandList1XRTT
%%================================

'enc_SupportedBandList1XRTT'({'SupportedBandList1XRTT',Val}, TagIn) ->
   'enc_SupportedBandList1XRTT'(Val, TagIn);

'enc_SupportedBandList1XRTT'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandList1XRTT_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandList1XRTT_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandList1XRTT_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
bc0 -> ?RT_BER:encode_enumerated(0,[]);
bc1 -> ?RT_BER:encode_enumerated(1,[]);
bc2 -> ?RT_BER:encode_enumerated(2,[]);
bc3 -> ?RT_BER:encode_enumerated(3,[]);
bc4 -> ?RT_BER:encode_enumerated(4,[]);
bc5 -> ?RT_BER:encode_enumerated(5,[]);
bc6 -> ?RT_BER:encode_enumerated(6,[]);
bc7 -> ?RT_BER:encode_enumerated(7,[]);
bc8 -> ?RT_BER:encode_enumerated(8,[]);
bc9 -> ?RT_BER:encode_enumerated(9,[]);
bc10 -> ?RT_BER:encode_enumerated(10,[]);
bc11 -> ?RT_BER:encode_enumerated(11,[]);
bc12 -> ?RT_BER:encode_enumerated(12,[]);
bc13 -> ?RT_BER:encode_enumerated(13,[]);
bc14 -> ?RT_BER:encode_enumerated(14,[]);
bc15 -> ?RT_BER:encode_enumerated(15,[]);
bc16 -> ?RT_BER:encode_enumerated(16,[]);
bc17 -> ?RT_BER:encode_enumerated(17,[]);
spare14 -> ?RT_BER:encode_enumerated(18,[]);
spare13 -> ?RT_BER:encode_enumerated(19,[]);
spare12 -> ?RT_BER:encode_enumerated(20,[]);
spare11 -> ?RT_BER:encode_enumerated(21,[]);
spare10 -> ?RT_BER:encode_enumerated(22,[]);
spare9 -> ?RT_BER:encode_enumerated(23,[]);
spare8 -> ?RT_BER:encode_enumerated(24,[]);
spare7 -> ?RT_BER:encode_enumerated(25,[]);
spare6 -> ?RT_BER:encode_enumerated(26,[]);
spare5 -> ?RT_BER:encode_enumerated(27,[]);
spare4 -> ?RT_BER:encode_enumerated(28,[]);
spare3 -> ?RT_BER:encode_enumerated(29,[]);
spare2 -> ?RT_BER:encode_enumerated(30,[]);
spare1 -> ?RT_BER:encode_enumerated(31,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandList1XRTT_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandList1XRTT'(Bytes, OptOrMand) ->
   'dec_SupportedBandList1XRTT'(Bytes, OptOrMand, []).

'dec_SupportedBandList1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersCDMA2000-1XRTT
%%================================
'enc_IRAT-ParametersCDMA2000-1XRTT'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandList1XRTT
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandList1XRTT'(?RT_BER:cindex(2,Val,supportedBandList1XRTT), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'tx-Config1XRTT') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,'tx-Config1XRTT') end) of
single -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
dual -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'rx-Config1XRTT') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,'rx-Config1XRTT') end) of
single -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
dual -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandList1XRTT
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandList1XRTT'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{single,0},{dual,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{single,0},{dual,1}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'IRAT-ParametersCDMA2000-1XRTT', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SupportedBandListHRPD
%%================================

'enc_SupportedBandListHRPD'({'SupportedBandListHRPD',Val}, TagIn) ->
   'enc_SupportedBandListHRPD'(Val, TagIn);

'enc_SupportedBandListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListHRPD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
bc0 -> ?RT_BER:encode_enumerated(0,[]);
bc1 -> ?RT_BER:encode_enumerated(1,[]);
bc2 -> ?RT_BER:encode_enumerated(2,[]);
bc3 -> ?RT_BER:encode_enumerated(3,[]);
bc4 -> ?RT_BER:encode_enumerated(4,[]);
bc5 -> ?RT_BER:encode_enumerated(5,[]);
bc6 -> ?RT_BER:encode_enumerated(6,[]);
bc7 -> ?RT_BER:encode_enumerated(7,[]);
bc8 -> ?RT_BER:encode_enumerated(8,[]);
bc9 -> ?RT_BER:encode_enumerated(9,[]);
bc10 -> ?RT_BER:encode_enumerated(10,[]);
bc11 -> ?RT_BER:encode_enumerated(11,[]);
bc12 -> ?RT_BER:encode_enumerated(12,[]);
bc13 -> ?RT_BER:encode_enumerated(13,[]);
bc14 -> ?RT_BER:encode_enumerated(14,[]);
bc15 -> ?RT_BER:encode_enumerated(15,[]);
bc16 -> ?RT_BER:encode_enumerated(16,[]);
bc17 -> ?RT_BER:encode_enumerated(17,[]);
spare14 -> ?RT_BER:encode_enumerated(18,[]);
spare13 -> ?RT_BER:encode_enumerated(19,[]);
spare12 -> ?RT_BER:encode_enumerated(20,[]);
spare11 -> ?RT_BER:encode_enumerated(21,[]);
spare10 -> ?RT_BER:encode_enumerated(22,[]);
spare9 -> ?RT_BER:encode_enumerated(23,[]);
spare8 -> ?RT_BER:encode_enumerated(24,[]);
spare7 -> ?RT_BER:encode_enumerated(25,[]);
spare6 -> ?RT_BER:encode_enumerated(26,[]);
spare5 -> ?RT_BER:encode_enumerated(27,[]);
spare4 -> ?RT_BER:encode_enumerated(28,[]);
spare3 -> ?RT_BER:encode_enumerated(29,[]);
spare2 -> ?RT_BER:encode_enumerated(30,[]);
spare1 -> ?RT_BER:encode_enumerated(31,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListHRPD'(Bytes, OptOrMand) ->
   'dec_SupportedBandListHRPD'(Bytes, OptOrMand, []).

'dec_SupportedBandListHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersCDMA2000-HRPD
%%================================
'enc_IRAT-ParametersCDMA2000-HRPD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListHRPD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListHRPD'(?RT_BER:cindex(2,Val,supportedBandListHRPD), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'tx-ConfigHRPD') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,'tx-ConfigHRPD') end) of
single -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
dual -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'rx-ConfigHRPD') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,'rx-ConfigHRPD') end) of
single -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
dual -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListHRPD
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListHRPD'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{single,0},{dual,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{single,0},{dual,1}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'IRAT-ParametersCDMA2000-HRPD', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SupportedBandGERAN
%%================================

'enc_SupportedBandGERAN'({'SupportedBandGERAN',Val}, TagIn) ->
   'enc_SupportedBandGERAN'(Val, TagIn);

'enc_SupportedBandGERAN'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
gsm450 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
gsm480 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
gsm710 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
gsm750 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
gsm810 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
gsm850 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
gsm900P -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
gsm900E -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
gsm900R -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
gsm1800 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
gsm1900 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SupportedBandGERAN'(Bytes, OptOrMand) ->
   'dec_SupportedBandGERAN'(Bytes, OptOrMand, []).

'dec_SupportedBandGERAN'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{gsm450,0},{gsm480,1},{gsm710,2},{gsm750,3},{gsm810,4},{gsm850,5},{gsm900P,6},{gsm900E,7},{gsm900R,8},{gsm1800,9},{gsm1900,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SupportedBandListGERAN
%%================================

'enc_SupportedBandListGERAN'({'SupportedBandListGERAN',Val}, TagIn) ->
   'enc_SupportedBandListGERAN'(Val, TagIn);

'enc_SupportedBandListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListGERAN_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
gsm450 -> ?RT_BER:encode_enumerated(0,[]);
gsm480 -> ?RT_BER:encode_enumerated(1,[]);
gsm710 -> ?RT_BER:encode_enumerated(2,[]);
gsm750 -> ?RT_BER:encode_enumerated(3,[]);
gsm810 -> ?RT_BER:encode_enumerated(4,[]);
gsm850 -> ?RT_BER:encode_enumerated(5,[]);
gsm900P -> ?RT_BER:encode_enumerated(6,[]);
gsm900E -> ?RT_BER:encode_enumerated(7,[]);
gsm900R -> ?RT_BER:encode_enumerated(8,[]);
gsm1800 -> ?RT_BER:encode_enumerated(9,[]);
gsm1900 -> ?RT_BER:encode_enumerated(10,[]);
spare5 -> ?RT_BER:encode_enumerated(11,[]);
spare4 -> ?RT_BER:encode_enumerated(12,[]);
spare3 -> ?RT_BER:encode_enumerated(13,[]);
spare2 -> ?RT_BER:encode_enumerated(14,[]);
spare1 -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListGERAN'(Bytes, OptOrMand) ->
   'dec_SupportedBandListGERAN'(Bytes, OptOrMand, []).

'dec_SupportedBandListGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{gsm450,0},{gsm480,1},{gsm710,2},{gsm750,3},{gsm810,4},{gsm850,5},{gsm900P,6},{gsm900E,7},{gsm900R,8},{gsm1800,9},{gsm1900,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersGERAN
%%================================
'enc_IRAT-ParametersGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListGERAN'(?RT_BER:cindex(2,Val,supportedBandListGERAN), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,'interRAT-PS-HO-ToGERAN'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersGERAN'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersGERAN'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'IRAT-ParametersGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SupportedBandUTRA-TDD768
%%================================

'enc_SupportedBandUTRA-TDD768'({'SupportedBandUTRA-TDD768',Val}, TagIn) ->
   'enc_SupportedBandUTRA-TDD768'(Val, TagIn);

'enc_SupportedBandUTRA-TDD768'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
a -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
b -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
c -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
d -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
e -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
f -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
g -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
h -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
i -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
j -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
k -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
l -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
m -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
n -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
o -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
p -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SupportedBandUTRA-TDD768'(Bytes, OptOrMand) ->
   'dec_SupportedBandUTRA-TDD768'(Bytes, OptOrMand, []).

'dec_SupportedBandUTRA-TDD768'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SupportedBandListUTRA-TDD768
%%================================

'enc_SupportedBandListUTRA-TDD768'({'SupportedBandListUTRA-TDD768',Val}, TagIn) ->
   'enc_SupportedBandListUTRA-TDD768'(Val, TagIn);

'enc_SupportedBandListUTRA-TDD768'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD768_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD768_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD768_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
a -> ?RT_BER:encode_enumerated(0,[]);
b -> ?RT_BER:encode_enumerated(1,[]);
c -> ?RT_BER:encode_enumerated(2,[]);
d -> ?RT_BER:encode_enumerated(3,[]);
e -> ?RT_BER:encode_enumerated(4,[]);
f -> ?RT_BER:encode_enumerated(5,[]);
g -> ?RT_BER:encode_enumerated(6,[]);
h -> ?RT_BER:encode_enumerated(7,[]);
i -> ?RT_BER:encode_enumerated(8,[]);
j -> ?RT_BER:encode_enumerated(9,[]);
k -> ?RT_BER:encode_enumerated(10,[]);
l -> ?RT_BER:encode_enumerated(11,[]);
m -> ?RT_BER:encode_enumerated(12,[]);
n -> ?RT_BER:encode_enumerated(13,[]);
o -> ?RT_BER:encode_enumerated(14,[]);
p -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListUTRA-TDD768_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD768'(Bytes, OptOrMand) ->
   'dec_SupportedBandListUTRA-TDD768'(Bytes, OptOrMand, []).

'dec_SupportedBandListUTRA-TDD768'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersUTRA-TDD768
%%================================
'enc_IRAT-ParametersUTRA-TDD768'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD768
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD768'(?RT_BER:cindex(2,Val,'supportedBandListUTRA-TDD768'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD768'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersUTRA-TDD768'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersUTRA-TDD768'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD768
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListUTRA-TDD768'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'IRAT-ParametersUTRA-TDD768', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SupportedBandUTRA-TDD384
%%================================

'enc_SupportedBandUTRA-TDD384'({'SupportedBandUTRA-TDD384',Val}, TagIn) ->
   'enc_SupportedBandUTRA-TDD384'(Val, TagIn);

'enc_SupportedBandUTRA-TDD384'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
a -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
b -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
c -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
d -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
e -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
f -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
g -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
h -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
i -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
j -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
k -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
l -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
m -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
n -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
o -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
p -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SupportedBandUTRA-TDD384'(Bytes, OptOrMand) ->
   'dec_SupportedBandUTRA-TDD384'(Bytes, OptOrMand, []).

'dec_SupportedBandUTRA-TDD384'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SupportedBandListUTRA-TDD384
%%================================

'enc_SupportedBandListUTRA-TDD384'({'SupportedBandListUTRA-TDD384',Val}, TagIn) ->
   'enc_SupportedBandListUTRA-TDD384'(Val, TagIn);

'enc_SupportedBandListUTRA-TDD384'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD384_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD384_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD384_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
a -> ?RT_BER:encode_enumerated(0,[]);
b -> ?RT_BER:encode_enumerated(1,[]);
c -> ?RT_BER:encode_enumerated(2,[]);
d -> ?RT_BER:encode_enumerated(3,[]);
e -> ?RT_BER:encode_enumerated(4,[]);
f -> ?RT_BER:encode_enumerated(5,[]);
g -> ?RT_BER:encode_enumerated(6,[]);
h -> ?RT_BER:encode_enumerated(7,[]);
i -> ?RT_BER:encode_enumerated(8,[]);
j -> ?RT_BER:encode_enumerated(9,[]);
k -> ?RT_BER:encode_enumerated(10,[]);
l -> ?RT_BER:encode_enumerated(11,[]);
m -> ?RT_BER:encode_enumerated(12,[]);
n -> ?RT_BER:encode_enumerated(13,[]);
o -> ?RT_BER:encode_enumerated(14,[]);
p -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListUTRA-TDD384_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD384'(Bytes, OptOrMand) ->
   'dec_SupportedBandListUTRA-TDD384'(Bytes, OptOrMand, []).

'dec_SupportedBandListUTRA-TDD384'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersUTRA-TDD384
%%================================
'enc_IRAT-ParametersUTRA-TDD384'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD384
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD384'(?RT_BER:cindex(2,Val,'supportedBandListUTRA-TDD384'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD384'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersUTRA-TDD384'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersUTRA-TDD384'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD384
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListUTRA-TDD384'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'IRAT-ParametersUTRA-TDD384', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SupportedBandUTRA-TDD128
%%================================

'enc_SupportedBandUTRA-TDD128'({'SupportedBandUTRA-TDD128',Val}, TagIn) ->
   'enc_SupportedBandUTRA-TDD128'(Val, TagIn);

'enc_SupportedBandUTRA-TDD128'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
a -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
b -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
c -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
d -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
e -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
f -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
g -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
h -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
i -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
j -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
k -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
l -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
m -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
n -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
o -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
p -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SupportedBandUTRA-TDD128'(Bytes, OptOrMand) ->
   'dec_SupportedBandUTRA-TDD128'(Bytes, OptOrMand, []).

'dec_SupportedBandUTRA-TDD128'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SupportedBandListUTRA-TDD128
%%================================

'enc_SupportedBandListUTRA-TDD128'({'SupportedBandListUTRA-TDD128',Val}, TagIn) ->
   'enc_SupportedBandListUTRA-TDD128'(Val, TagIn);

'enc_SupportedBandListUTRA-TDD128'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-TDD128_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListUTRA-TDD128_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-TDD128_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
a -> ?RT_BER:encode_enumerated(0,[]);
b -> ?RT_BER:encode_enumerated(1,[]);
c -> ?RT_BER:encode_enumerated(2,[]);
d -> ?RT_BER:encode_enumerated(3,[]);
e -> ?RT_BER:encode_enumerated(4,[]);
f -> ?RT_BER:encode_enumerated(5,[]);
g -> ?RT_BER:encode_enumerated(6,[]);
h -> ?RT_BER:encode_enumerated(7,[]);
i -> ?RT_BER:encode_enumerated(8,[]);
j -> ?RT_BER:encode_enumerated(9,[]);
k -> ?RT_BER:encode_enumerated(10,[]);
l -> ?RT_BER:encode_enumerated(11,[]);
m -> ?RT_BER:encode_enumerated(12,[]);
n -> ?RT_BER:encode_enumerated(13,[]);
o -> ?RT_BER:encode_enumerated(14,[]);
p -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListUTRA-TDD128_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-TDD128'(Bytes, OptOrMand) ->
   'dec_SupportedBandListUTRA-TDD128'(Bytes, OptOrMand, []).

'dec_SupportedBandListUTRA-TDD128'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{a,0},{b,1},{c,2},{d,3},{e,4},{f,5},{g,6},{h,7},{i,8},{j,9},{k,10},{l,11},{m,12},{n,13},{o,14},{p,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersUTRA-TDD128
%%================================
'enc_IRAT-ParametersUTRA-TDD128'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD128
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-TDD128'(?RT_BER:cindex(2,Val,'supportedBandListUTRA-TDD128'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-TDD128'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersUTRA-TDD128'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersUTRA-TDD128'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-TDD128
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListUTRA-TDD128'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'IRAT-ParametersUTRA-TDD128', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SupportedBandUTRA-FDD
%%================================

'enc_SupportedBandUTRA-FDD'({'SupportedBandUTRA-FDD',Val}, TagIn) ->
   'enc_SupportedBandUTRA-FDD'(Val, TagIn);

'enc_SupportedBandUTRA-FDD'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
bandI -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
bandII -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
bandIII -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
bandIV -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
bandV -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
bandVI -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
bandVII -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
bandVIII -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
bandIX -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
bandX -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
bandXI -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
bandXII -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
bandXIII -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
bandXIV -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
bandXV -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
bandXVI -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SupportedBandUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_SupportedBandUTRA-FDD'(Bytes, OptOrMand, []).

'dec_SupportedBandUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{bandI,0},{bandII,1},{bandIII,2},{bandIV,3},{bandV,4},{bandVI,5},{bandVII,6},{bandVIII,7},{bandIX,8},{bandX,9},{bandXI,10},{bandXII,11},{bandXIII,12},{bandXIV,13},{bandXV,14},{bandXVI,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SupportedBandListUTRA-FDD
%%================================

'enc_SupportedBandListUTRA-FDD'({'SupportedBandListUTRA-FDD',Val}, TagIn) ->
   'enc_SupportedBandListUTRA-FDD'(Val, TagIn);

'enc_SupportedBandListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListUTRA-FDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
bandI -> ?RT_BER:encode_enumerated(0,[]);
bandII -> ?RT_BER:encode_enumerated(1,[]);
bandIII -> ?RT_BER:encode_enumerated(2,[]);
bandIV -> ?RT_BER:encode_enumerated(3,[]);
bandV -> ?RT_BER:encode_enumerated(4,[]);
bandVI -> ?RT_BER:encode_enumerated(5,[]);
bandVII -> ?RT_BER:encode_enumerated(6,[]);
bandVIII -> ?RT_BER:encode_enumerated(7,[]);
bandIX -> ?RT_BER:encode_enumerated(8,[]);
bandX -> ?RT_BER:encode_enumerated(9,[]);
bandXI -> ?RT_BER:encode_enumerated(10,[]);
bandXII -> ?RT_BER:encode_enumerated(11,[]);
bandXIII -> ?RT_BER:encode_enumerated(12,[]);
bandXIV -> ?RT_BER:encode_enumerated(13,[]);
bandXV -> ?RT_BER:encode_enumerated(14,[]);
bandXVI -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SupportedBandListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_SupportedBandListUTRA-FDD'(Bytes, OptOrMand, []).

'dec_SupportedBandListUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{bandI,0},{bandII,1},{bandIII,2},{bandIV,3},{bandV,4},{bandVI,5},{bandVII,6},{bandVIII,7},{bandIX,8},{bandX,9},{bandXI,10},{bandXII,11},{bandXIII,12},{bandXIV,13},{bandXV,14},{bandXVI,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  IRAT-ParametersUTRA-FDD
%%================================
'enc_IRAT-ParametersUTRA-FDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-FDD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListUTRA-FDD'(?RT_BER:cindex(2,Val,'supportedBandListUTRA-FDD'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IRAT-ParametersUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_IRAT-ParametersUTRA-FDD'(Bytes, OptOrMand, []).

'dec_IRAT-ParametersUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListUTRA-FDD
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListUTRA-FDD'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'IRAT-ParametersUTRA-FDD', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  InterRAT-BandInfo
%%================================
'enc_InterRAT-BandInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,'interRAT-NeedForGaps'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_InterRAT-BandInfo'(Bytes, OptOrMand) ->
   'dec_InterRAT-BandInfo'(Bytes, OptOrMand, []).

'dec_InterRAT-BandInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'InterRAT-BandInfo', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  InterRAT-BandList
%%================================

'enc_InterRAT-BandList'({'InterRAT-BandList',Val}, TagIn) ->
   'enc_InterRAT-BandList'(Val, TagIn);

'enc_InterRAT-BandList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterRAT-BandList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_InterRAT-BandList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterRAT-BandList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterRAT-BandInfo'(H, []),
   'enc_InterRAT-BandList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterRAT-BandList'(Bytes, OptOrMand) ->
   'dec_InterRAT-BandList'(Bytes, OptOrMand, []).

'dec_InterRAT-BandList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_InterRAT-BandInfo'/3, [], []).




%%================================
%%  InterFreqBandInfo
%%================================
'enc_InterFreqBandInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,interFreqNeedForGaps), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_InterFreqBandInfo'(Bytes, OptOrMand) ->
   'dec_InterFreqBandInfo'(Bytes, OptOrMand, []).

'dec_InterFreqBandInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'InterFreqBandInfo', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  InterFreqBandList
%%================================

'enc_InterFreqBandList'({'InterFreqBandList',Val}, TagIn) ->
   'enc_InterFreqBandList'(Val, TagIn);

'enc_InterFreqBandList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqBandList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_InterFreqBandList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqBandList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqBandInfo'(H, []),
   'enc_InterFreqBandList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqBandList'(Bytes, OptOrMand) ->
   'dec_InterFreqBandList'(Bytes, OptOrMand, []).

'dec_InterFreqBandList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_InterFreqBandInfo'/3, [], []).




%%================================
%%  BandInfoEUTRA
%%================================
'enc_BandInfoEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InterFreqBandList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InterFreqBandList'(?RT_BER:cindex(2,Val,interFreqBandList), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:InterRAT-BandList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'interRAT-BandList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterRAT-BandList'(?RT_BER:cindex(3,Val,'interRAT-BandList'), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BandInfoEUTRA'(Bytes, OptOrMand) ->
   'dec_BandInfoEUTRA'(Bytes, OptOrMand, []).

'dec_BandInfoEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InterFreqBandList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_InterFreqBandList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:InterRAT-BandList OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_InterRAT-BandList'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BandInfoEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BandListEUTRA
%%================================

'enc_BandListEUTRA'({'BandListEUTRA',Val}, TagIn) ->
   'enc_BandListEUTRA'(Val, TagIn);

'enc_BandListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandListEUTRA_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BandListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandInfoEUTRA'(H, []),
   'enc_BandListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandListEUTRA'(Bytes, OptOrMand) ->
   'dec_BandListEUTRA'(Bytes, OptOrMand, []).

'dec_BandListEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BandInfoEUTRA'/3, [], []).




%%================================
%%  MeasParameters
%%================================
'enc_MeasParameters'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BandListEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BandListEUTRA'(?RT_BER:cindex(2,Val,bandListEUTRA), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasParameters'(Bytes, OptOrMand) ->
   'dec_MeasParameters'(Bytes, OptOrMand, []).

'dec_MeasParameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BandListEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_BandListEUTRA'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'MeasParameters', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SupportedBandEUTRA
%%================================
'enc_SupportedBandEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,bandEUTRA), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,halfDuplex), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SupportedBandEUTRA'(Bytes, OptOrMand) ->
   'dec_SupportedBandEUTRA'(Bytes, OptOrMand, []).

'dec_SupportedBandEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,64},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SupportedBandEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SupportedBandListEUTRA
%%================================

'enc_SupportedBandListEUTRA'({'SupportedBandListEUTRA',Val}, TagIn) ->
   'enc_SupportedBandListEUTRA'(Val, TagIn);

'enc_SupportedBandListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SupportedBandListEUTRA_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SupportedBandListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SupportedBandListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SupportedBandEUTRA'(H, []),
   'enc_SupportedBandListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SupportedBandListEUTRA'(Bytes, OptOrMand) ->
   'dec_SupportedBandListEUTRA'(Bytes, OptOrMand, []).

'dec_SupportedBandListEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SupportedBandEUTRA'/3, [], []).




%%================================
%%  RF-Parameters
%%================================
'enc_RF-Parameters'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SupportedBandListEUTRA'(?RT_BER:cindex(2,Val,supportedBandListEUTRA), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RF-Parameters'(Bytes, OptOrMand) ->
   'dec_RF-Parameters'(Bytes, OptOrMand, []).

'dec_RF-Parameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SupportedBandListEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SupportedBandListEUTRA'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RF-Parameters', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  PhyLayerParameters
%%================================
'enc_PhyLayerParameters'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,'ue-TxAntennaSelectionSupported'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,'ue-SpecificRefSigsSupported'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PhyLayerParameters'(Bytes, OptOrMand) ->
   'dec_PhyLayerParameters'(Bytes, OptOrMand, []).

'dec_PhyLayerParameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PhyLayerParameters', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PDCP-Parameters
%%================================
'enc_PDCP-Parameters'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PDCP-Parameters_supportedROHC-Profiles'(?RT_BER:cindex(2,Val,'supportedROHC-Profiles'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = cs16
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'maxNumberROHC-ContextSessions') of
         asn1_DEFAULT -> {<<>>,0};
         cs16 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,'maxNumberROHC-ContextSessions') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,'maxNumberROHC-ContextSessions') end) of
cs2 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
cs4 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
cs8 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
cs12 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
cs16 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
cs24 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
cs32 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
cs48 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
cs64 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
cs128 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
cs256 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
cs512 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
cs1024 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
cs16384 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Parameters_supportedROHC-Profiles
%%================================
'enc_PDCP-Parameters_supportedROHC-Profiles'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,profile0x0001), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,profile0x0002), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,profile0x0003), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,profile0x0004), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,profile0x0006), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_boolean(?RT_BER:cindex(7,Val,profile0x0101), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_boolean(?RT_BER:cindex(8,Val,profile0x0102), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_boolean(?RT_BER:cindex(9,Val,profile0x0103), [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_boolean(?RT_BER:cindex(10,Val,profile0x0104), [{tag,128,8,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PDCP-Parameters_supportedROHC-Profiles'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_boolean(Bytes7,[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_boolean(Bytes8,[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_boolean(Bytes9,[{tag,128,7,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_boolean(Bytes10,[{tag,128,8,'IMPLICIT',0}], mandatory),

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'PDCP-Parameters_supportedROHC-Profiles', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


'dec_PDCP-Parameters'(Bytes, OptOrMand) ->
   'dec_PDCP-Parameters'(Bytes, OptOrMand, []).

'dec_PDCP-Parameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PDCP-Parameters_supportedROHC-Profiles'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = cs16
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{cs2,0},{cs4,1},{cs8,2},{cs12,3},{cs16,4},{cs24,5},{cs32,6},{cs48,7},{cs64,8},{cs128,9},{cs256,10},{cs512,11},{cs1024,12},{cs16384,13},{spare2,14},{spare1,15}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{cs16,Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'PDCP-Parameters', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  AccessStratumRelease
%%================================

'enc_AccessStratumRelease'({'AccessStratumRelease',Val}, TagIn) ->
   'enc_AccessStratumRelease'(Val, TagIn);

'enc_AccessStratumRelease'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
rel8 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
spare7 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
spare6 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_AccessStratumRelease'(Bytes, OptOrMand) ->
   'dec_AccessStratumRelease'(Bytes, OptOrMand, []).

'dec_AccessStratumRelease'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{rel8,0},{spare7,1},{spare6,2},{spare5,3},{spare4,4},{spare3,5},{spare2,6},{spare1,7}],[]},TagIn++[], OptOrMand).



%%================================
%%  UE-EUTRA-Capability
%%================================
'enc_UE-EUTRA-Capability'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,accessStratumRelease) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,accessStratumRelease) end) of
rel8 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'ue-Category'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDCP-Parameters
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PDCP-Parameters'(?RT_BER:cindex(4,Val,'pdcp-Parameters'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PhyLayerParameters
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PhyLayerParameters'(?RT_BER:cindex(5,Val,phyLayerParameters), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:RF-Parameters
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_RF-Parameters'(?RT_BER:cindex(6,Val,'rf-Parameters'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:MeasParameters
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_MeasParameters'(?RT_BER:cindex(7,Val,measParameters), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,featureGroupIndicators) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',32}], ?RT_BER:cindex(8,Val,featureGroupIndicators), [], [{tag,128,6,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_UE-EUTRA-Capability_interRAT-Parameters'(?RT_BER:cindex(9,Val,'interRAT-Parameters'), [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UE-EUTRA-Capability_nonCriticalExtension'(?RT_BER:cindex(10,Val,nonCriticalExtension), [{tag,128,8,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UE-EUTRA-Capability_interRAT-Parameters
%%================================
'enc_UE-EUTRA-Capability_interRAT-Parameters'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:IRAT-ParametersUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,utraFDD) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-FDD'(?RT_BER:cindex(2,Val,utraFDD), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:IRAT-ParametersUTRA-TDD128 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,utraTDD128) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD128'(?RT_BER:cindex(3,Val,utraTDD128), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:IRAT-ParametersUTRA-TDD384 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,utraTDD384) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD384'(?RT_BER:cindex(4,Val,utraTDD384), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:IRAT-ParametersUTRA-TDD768 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,utraTDD768) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersUTRA-TDD768'(?RT_BER:cindex(5,Val,utraTDD768), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:IRAT-ParametersGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,geran) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersGERAN'(?RT_BER:cindex(6,Val,geran), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:IRAT-ParametersCDMA2000-HRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,'cdma2000-HRPD') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersCDMA2000-HRPD'(?RT_BER:cindex(7,Val,'cdma2000-HRPD'), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:IRAT-ParametersCDMA2000-1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,'cdma2000-1xRTT') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IRAT-ParametersCDMA2000-1XRTT'(?RT_BER:cindex(8,Val,'cdma2000-1xRTT'), [{tag,128,6,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UE-EUTRA-Capability_interRAT-Parameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:IRAT-ParametersUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_IRAT-ParametersUTRA-FDD'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:IRAT-ParametersUTRA-TDD128 OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_IRAT-ParametersUTRA-TDD128'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:IRAT-ParametersUTRA-TDD384 OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_IRAT-ParametersUTRA-TDD384'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:IRAT-ParametersUTRA-TDD768 OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_IRAT-ParametersUTRA-TDD768'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:IRAT-ParametersGERAN OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_IRAT-ParametersGERAN'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:IRAT-ParametersCDMA2000-HRPD OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_IRAT-ParametersCDMA2000-HRPD'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:IRAT-ParametersCDMA2000-1XRTT OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_IRAT-ParametersCDMA2000-1XRTT'(Bytes8, opt_or_default, [{tag,128,6,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,noext),
   {{'UE-EUTRA-Capability_interRAT-Parameters', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.



%%================================
%%  UE-EUTRA-Capability_nonCriticalExtension
%%================================
'enc_UE-EUTRA-Capability_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UE-EUTRA-Capability_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UE-EUTRA-Capability_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_UE-EUTRA-Capability'(Bytes, OptOrMand) ->
   'dec_UE-EUTRA-Capability'(Bytes, OptOrMand, []).

'dec_UE-EUTRA-Capability'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{rel8,0},{spare7,1},{spare6,2},{spare5,3},{spare4,4},{spare3,5},{spare2,6},{spare1,7}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,5},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDCP-Parameters
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_PDCP-Parameters'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PhyLayerParameters
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_PhyLayerParameters'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:RF-Parameters
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_RF-Parameters'(Bytes6, mandatory, [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:MeasParameters
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = 'dec_MeasParameters'(Bytes7, mandatory, [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes8,32,[],[{tag,128,6,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8 with type SEQUENCE
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_UE-EUTRA-Capability_interRAT-Parameters'(Bytes9, mandatory, [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
'dec_UE-EUTRA-Capability_nonCriticalExtension'(Bytes10, opt_or_default, [{tag,128,8,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'UE-EUTRA-Capability', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  UE-CapabilityRAT-Container
%%================================
'enc_UE-CapabilityRAT-Container'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'rat-Type') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'rat-Type') end) of
eutra -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
utra -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
'geran-cs' -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
'geran-ps' -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
'cdma2000-1XRTT' -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,'ueCapabilityRAT-Container'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UE-CapabilityRAT-Container'(Bytes, OptOrMand) ->
   'dec_UE-CapabilityRAT-Container'(Bytes, OptOrMand, []).

'dec_UE-CapabilityRAT-Container'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{eutra,0},{utra,1},{'geran-cs',2},{'geran-ps',3},{'cdma2000-1XRTT',4},{spare3,5},{spare2,6},{spare1,7}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UE-CapabilityRAT-Container', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UE-CapabilityRAT-ContainerList
%%================================

'enc_UE-CapabilityRAT-ContainerList'({'UE-CapabilityRAT-ContainerList',Val}, TagIn) ->
   'enc_UE-CapabilityRAT-ContainerList'(Val, TagIn);

'enc_UE-CapabilityRAT-ContainerList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRAT-ContainerList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_UE-CapabilityRAT-ContainerList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-CapabilityRAT-ContainerList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRAT-Container'(H, []),
   'enc_UE-CapabilityRAT-ContainerList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-CapabilityRAT-ContainerList'(Bytes, OptOrMand) ->
   'dec_UE-CapabilityRAT-ContainerList'(Bytes, OptOrMand, []).

'dec_UE-CapabilityRAT-ContainerList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_UE-CapabilityRAT-Container'/3, [], []).




%%================================
%%  S-TMSI
%%================================
'enc_S-TMSI'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(2,Val,mmec), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',32}], ?RT_BER:cindex(3,Val,'m-TMSI'), [], [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_S-TMSI'(Bytes, OptOrMand) ->
   'dec_S-TMSI'(Bytes, OptOrMand, []).

'dec_S-TMSI'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,8,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,32,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'S-TMSI', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRC-TransactionIdentifier
%%================================

'enc_RRC-TransactionIdentifier'({'RRC-TransactionIdentifier',Val}, TagIn) ->
   'enc_RRC-TransactionIdentifier'(Val, TagIn);

'enc_RRC-TransactionIdentifier'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_RRC-TransactionIdentifier'(Bytes, OptOrMand) ->
   'dec_RRC-TransactionIdentifier'(Bytes, OptOrMand, []).

'dec_RRC-TransactionIdentifier'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,3},TagIn++[], OptOrMand).



%%================================
%%  RAT-Type
%%================================

'enc_RAT-Type'({'RAT-Type',Val}, TagIn) ->
   'enc_RAT-Type'(Val, TagIn);

'enc_RAT-Type'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
eutra -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
utra -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
'geran-cs' -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
'geran-ps' -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
'cdma2000-1XRTT' -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_RAT-Type'(Bytes, OptOrMand) ->
   'dec_RAT-Type'(Bytes, OptOrMand, []).

'dec_RAT-Type'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{eutra,0},{utra,1},{'geran-cs',2},{'geran-ps',3},{'cdma2000-1XRTT',4},{spare3,5},{spare2,6},{spare1,7}],[]},TagIn++[], OptOrMand).



%%================================
%%  RAND-CDMA2000
%%================================

'enc_RAND-CDMA2000'({'RAND-CDMA2000',Val}, TagIn) ->
   'enc_RAND-CDMA2000'(Val, TagIn);

'enc_RAND-CDMA2000'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',32}], Val, [], TagIn ++ []).


'dec_RAND-CDMA2000'(Bytes, OptOrMand) ->
   'dec_RAND-CDMA2000'(Bytes, OptOrMand, []).

'dec_RAND-CDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,32,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  NeighCellConfig
%%================================

'enc_NeighCellConfig'({'NeighCellConfig',Val}, TagIn) ->
   'enc_NeighCellConfig'(Val, TagIn);

'enc_NeighCellConfig'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',2}], Val, [], TagIn ++ []).


'dec_NeighCellConfig'(Bytes, OptOrMand) ->
   'dec_NeighCellConfig'(Bytes, OptOrMand, []).

'dec_NeighCellConfig'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,2,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  MMEC
%%================================

'enc_MMEC'({'MMEC',Val}, TagIn) ->
   'enc_MMEC'(Val, TagIn);

'enc_MMEC'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',8}], Val, [], TagIn ++ []).


'dec_MMEC'(Bytes, OptOrMand) ->
   'dec_MMEC'(Bytes, OptOrMand, []).

'dec_MMEC'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,8,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  FilterCoefficient
%%================================

'enc_FilterCoefficient'({'FilterCoefficient',Val}, TagIn) ->
   'enc_FilterCoefficient'(Val, TagIn);

'enc_FilterCoefficient'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
fc0 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
fc1 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
fc2 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
fc3 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
fc4 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
fc5 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
fc6 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
fc7 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
fc8 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
fc9 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
fc11 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
fc13 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
fc15 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
fc17 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
fc19 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_FilterCoefficient'(Bytes, OptOrMand) ->
   'dec_FilterCoefficient'(Bytes, OptOrMand, []).

'dec_FilterCoefficient'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  DedicatedInfoNAS
%%================================

'enc_DedicatedInfoNAS'({'DedicatedInfoNAS',Val}, TagIn) ->
   'enc_DedicatedInfoNAS'(Val, TagIn);

'enc_DedicatedInfoNAS'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_DedicatedInfoNAS'(Bytes, OptOrMand) ->
   'dec_DedicatedInfoNAS'(Bytes, OptOrMand, []).

'dec_DedicatedInfoNAS'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  DedicatedInfoCDMA2000
%%================================

'enc_DedicatedInfoCDMA2000'({'DedicatedInfoCDMA2000',Val}, TagIn) ->
   'enc_DedicatedInfoCDMA2000'(Val, TagIn);

'enc_DedicatedInfoCDMA2000'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_DedicatedInfoCDMA2000'(Bytes, OptOrMand) ->
   'dec_DedicatedInfoCDMA2000'(Bytes, OptOrMand, []).

'dec_DedicatedInfoCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  C-RNTI
%%================================

'enc_C-RNTI'({'C-RNTI',Val}, TagIn) ->
   'enc_C-RNTI'(Val, TagIn);

'enc_C-RNTI'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',16}], Val, [], TagIn ++ []).


'dec_C-RNTI'(Bytes, OptOrMand) ->
   'dec_C-RNTI'(Bytes, OptOrMand, []).

'dec_C-RNTI'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,16,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  TimeToTrigger
%%================================

'enc_TimeToTrigger'({'TimeToTrigger',Val}, TagIn) ->
   'enc_TimeToTrigger'(Val, TagIn);

'enc_TimeToTrigger'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
ms0 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
ms40 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
ms64 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
ms80 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
ms100 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
ms128 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
ms160 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
ms256 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
ms320 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
ms480 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
ms512 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
ms640 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
ms1024 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
ms1280 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
ms2560 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
ms5120 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_TimeToTrigger'(Bytes, OptOrMand) ->
   'dec_TimeToTrigger'(Bytes, OptOrMand, []).

'dec_TimeToTrigger'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{ms0,0},{ms40,1},{ms64,2},{ms80,3},{ms100,4},{ms128,5},{ms160,6},{ms256,7},{ms320,8},{ms480,9},{ms512,10},{ms640,11},{ms1024,12},{ms1280,13},{ms2560,14},{ms5120,15}],TagIn++[], OptOrMand).



%%================================
%%  RSRQ-Range
%%================================

'enc_RSRQ-Range'({'RSRQ-Range',Val}, TagIn) ->
   'enc_RSRQ-Range'(Val, TagIn);

'enc_RSRQ-Range'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_RSRQ-Range'(Bytes, OptOrMand) ->
   'dec_RSRQ-Range'(Bytes, OptOrMand, []).

'dec_RSRQ-Range'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,34},TagIn++[], OptOrMand).



%%================================
%%  RSRP-Range
%%================================

'enc_RSRP-Range'({'RSRP-Range',Val}, TagIn) ->
   'enc_RSRP-Range'(Val, TagIn);

'enc_RSRP-Range'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_RSRP-Range'(Bytes, OptOrMand) ->
   'dec_RSRP-Range'(Bytes, OptOrMand, []).

'dec_RSRP-Range'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,97},TagIn++[], OptOrMand).



%%================================
%%  ReportInterval
%%================================

'enc_ReportInterval'({'ReportInterval',Val}, TagIn) ->
   'enc_ReportInterval'(Val, TagIn);

'enc_ReportInterval'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
ms120 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
ms240 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
ms480 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
ms640 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
ms1024 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
ms2048 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
ms5120 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
ms10240 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
min1 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
min6 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
min12 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
min30 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
min60 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_ReportInterval'(Bytes, OptOrMand) ->
   'dec_ReportInterval'(Bytes, OptOrMand, []).

'dec_ReportInterval'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{ms120,0},{ms240,1},{ms480,2},{ms640,3},{ms1024,4},{ms2048,5},{ms5120,6},{ms10240,7},{min1,8},{min6,9},{min12,10},{min30,11},{min60,12},{spare3,13},{spare2,14},{spare1,15}],TagIn++[], OptOrMand).



%%================================
%%  ReportConfigToAddMod
%%================================
'enc_ReportConfigToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,reportConfigId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReportConfigToAddMod_reportConfig'(?RT_BER:cindex(3,Val,reportConfig), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigToAddMod_reportConfig
%%================================

'enc_ReportConfigToAddMod_reportConfig'({'ReportConfigToAddMod_reportConfig',Val}, TagIn) ->
   'enc_ReportConfigToAddMod_reportConfig'(Val, TagIn);

'enc_ReportConfigToAddMod_reportConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      reportConfigEUTRA ->
         'enc_ReportConfigEUTRA'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      reportConfigInterRAT ->
         'enc_ReportConfigInterRAT'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ReportConfigToAddMod_reportConfig'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'reportConfigEUTRA'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{reportConfigEUTRA, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'reportConfigInterRAT'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigInterRAT'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{reportConfigInterRAT, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_ReportConfigToAddMod'(Bytes, OptOrMand) ->
   'dec_ReportConfigToAddMod'(Bytes, OptOrMand, []).

'dec_ReportConfigToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ReportConfigToAddMod_reportConfig'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ReportConfigToAddMod', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  ReportConfigToAddModList
%%================================

'enc_ReportConfigToAddModList'({'ReportConfigToAddModList',Val}, TagIn) ->
   'enc_ReportConfigToAddModList'(Val, TagIn);

'enc_ReportConfigToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ReportConfigToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReportConfigToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToAddMod'(H, []),
   'enc_ReportConfigToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ReportConfigToAddModList'(Bytes, OptOrMand) ->
   'dec_ReportConfigToAddModList'(Bytes, OptOrMand, []).

'dec_ReportConfigToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_ReportConfigToAddMod'/3, [], []).




%%================================
%%  ThresholdCDMA2000
%%================================

'enc_ThresholdCDMA2000'({'ThresholdCDMA2000',Val}, TagIn) ->
   'enc_ThresholdCDMA2000'(Val, TagIn);

'enc_ThresholdCDMA2000'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ThresholdCDMA2000'(Bytes, OptOrMand) ->
   'dec_ThresholdCDMA2000'(Bytes, OptOrMand, []).

'dec_ThresholdCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,63},TagIn++[], OptOrMand).



%%================================
%%  ThresholdGERAN
%%================================

'enc_ThresholdGERAN'({'ThresholdGERAN',Val}, TagIn) ->
   'enc_ThresholdGERAN'(Val, TagIn);

'enc_ThresholdGERAN'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ThresholdGERAN'(Bytes, OptOrMand) ->
   'dec_ThresholdGERAN'(Bytes, OptOrMand, []).

'dec_ThresholdGERAN'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,63},TagIn++[], OptOrMand).



%%================================
%%  ThresholdUTRA
%%================================

'enc_ThresholdUTRA'({'ThresholdUTRA',Val}, TagIn) ->
   'enc_ThresholdUTRA'(Val, TagIn);

'enc_ThresholdUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'utra-RSCP' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'utra-EcN0' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_ThresholdUTRA'(Bytes, OptOrMand) ->
   'dec_ThresholdUTRA'(Bytes, OptOrMand, []).

'dec_ThresholdUTRA'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'utra-RSCP'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{-5,91},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{'utra-RSCP', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utra-EcN0'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,49},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{'utra-EcN0', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  ReportConfigInterRAT
%%================================
'enc_ReportConfigInterRAT'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType'(?RT_BER:cindex(2,Val,triggerType), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,maxReportCells), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,reportInterval) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(4,Val,reportInterval) end) of
ms120 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
ms240 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
ms480 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
ms640 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
ms1024 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
ms2048 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
ms5120 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
ms10240 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
min1 -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
min6 -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
min12 -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
min30 -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
min60 -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,reportAmount) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,reportAmount) end) of
r1 -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
r2 -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
r4 -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',0}]);
r8 -> ?RT_BER:encode_enumerated(3,[{tag,128,3,'IMPLICIT',0}]);
r16 -> ?RT_BER:encode_enumerated(4,[{tag,128,3,'IMPLICIT',0}]);
r32 -> ?RT_BER:encode_enumerated(5,[{tag,128,3,'IMPLICIT',0}]);
r64 -> ?RT_BER:encode_enumerated(6,[{tag,128,3,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,3,'IMPLICIT',0}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType
%%================================

'enc_ReportConfigInterRAT_triggerType'({'ReportConfigInterRAT_triggerType',Val}, TagIn) ->
   'enc_ReportConfigInterRAT_triggerType'(Val, TagIn);

'enc_ReportConfigInterRAT_triggerType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      event ->
         'enc_ReportConfigInterRAT_triggerType_event'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      periodical ->
         'enc_ReportConfigInterRAT_triggerType_periodical'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ReportConfigInterRAT_triggerType_event
%%================================
'enc_ReportConfigInterRAT_triggerType_event'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType_event_eventId'(?RT_BER:cindex(2,Val,eventId), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,hysteresis), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,timeToTrigger) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(4,Val,timeToTrigger) end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
ms64 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
ms128 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
ms256 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
ms320 -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
ms480 -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
ms512 -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
ms640 -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
ms1024 -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
ms1280 -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
ms2560 -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
ms5120 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId
%%================================

'enc_ReportConfigInterRAT_triggerType_event_eventId'({'ReportConfigInterRAT_triggerType_event_eventId',Val}, TagIn) ->
   'enc_ReportConfigInterRAT_triggerType_event_eventId'(Val, TagIn);

'enc_ReportConfigInterRAT_triggerType_event_eventId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      eventB1 ->
         'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      eventB2 ->
         'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB1
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(?RT_BER:cindex(2,Val,'b1-Threshold'), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold
%%================================

'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'({'ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold',Val}, TagIn) ->
   'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Val, TagIn);

'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'b1-ThresholdUTRA' ->
         'enc_ThresholdUTRA'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      'b1-ThresholdGERAN' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'b1-ThresholdCDMA2000' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'b1-ThresholdUTRA'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ThresholdUTRA'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{'b1-ThresholdUTRA', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'b1-ThresholdGERAN'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,63},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{'b1-ThresholdGERAN', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'b1-ThresholdCDMA2000'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,63},[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{'b1-ThresholdCDMA2000', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1_b1-Threshold'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigInterRAT_triggerType_event_eventId_eventB1', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB2
%%================================
'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(2,Val,'b2-Threshold1'), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(?RT_BER:cindex(3,Val,'b2-Threshold2'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2
%%================================

'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'({'ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2',Val}, TagIn) ->
   'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Val, TagIn);

'enc_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'b2-Threshold2UTRA' ->
         'enc_ThresholdUTRA'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      'b2-Threshold2GERAN' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'b2-Threshold2CDMA2000' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'b2-Threshold2UTRA'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ThresholdUTRA'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{'b2-Threshold2UTRA', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'b2-Threshold2GERAN'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,63},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{'b2-Threshold2GERAN', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'b2-Threshold2CDMA2000'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,63},[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{'b2-Threshold2CDMA2000', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.
'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThresholdEUTRA'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2_b2-Threshold2'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ReportConfigInterRAT_triggerType_event_eventId_eventB2', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_ReportConfigInterRAT_triggerType_event_eventId'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'eventB1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB1'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{eventB1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'eventB2'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigInterRAT_triggerType_event_eventId_eventB2'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{eventB2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.
'dec_ReportConfigInterRAT_triggerType_event'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReportConfigInterRAT_triggerType_event_eventId'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,30},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{ms0,0},{ms40,1},{ms64,2},{ms80,3},{ms100,4},{ms128,5},{ms160,6},{ms256,7},{ms320,8},{ms480,9},{ms512,10},{ms640,11},{ms1024,12},{ms1280,13},{ms2560,14},{ms5120,15}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'ReportConfigInterRAT_triggerType_event', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  ReportConfigInterRAT_triggerType_periodical
%%================================
'enc_ReportConfigInterRAT_triggerType_periodical'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,purpose) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,purpose) end) of
reportStrongestCells -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
reportStrongestCellsForSON -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
reportCGI -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigInterRAT_triggerType_periodical'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{reportStrongestCells,0},{reportStrongestCellsForSON,1},{reportCGI,2}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigInterRAT_triggerType_periodical', Term1}, Bytes4, Rb1+Rb2+Rb3}.
'dec_ReportConfigInterRAT_triggerType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'event'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigInterRAT_triggerType_event'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{event, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'periodical'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigInterRAT_triggerType_periodical'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{periodical, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_ReportConfigInterRAT'(Bytes, OptOrMand) ->
   'dec_ReportConfigInterRAT'(Bytes, OptOrMand, []).

'dec_ReportConfigInterRAT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReportConfigInterRAT_triggerType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,8},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{ms120,0},{ms240,1},{ms480,2},{ms640,3},{ms1024,4},{ms2048,5},{ms5120,6},{ms10240,7},{min1,8},{min6,9},{min12,10},{min30,11},{min60,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{r1,0},{r2,1},{r4,2},{r8,3},{r16,4},{r32,5},{r64,6},{infinity,7}],[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'ReportConfigInterRAT', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  ReportConfigId
%%================================

'enc_ReportConfigId'({'ReportConfigId',Val}, TagIn) ->
   'enc_ReportConfigId'(Val, TagIn);

'enc_ReportConfigId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ReportConfigId'(Bytes, OptOrMand) ->
   'dec_ReportConfigId'(Bytes, OptOrMand, []).

'dec_ReportConfigId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  ThresholdEUTRA
%%================================

'enc_ThresholdEUTRA'({'ThresholdEUTRA',Val}, TagIn) ->
   'enc_ThresholdEUTRA'(Val, TagIn);

'enc_ThresholdEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'threshold-RSRP' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'threshold-RSRQ' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_ThresholdEUTRA'(Bytes, OptOrMand) ->
   'dec_ThresholdEUTRA'(Bytes, OptOrMand, []).

'dec_ThresholdEUTRA'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'threshold-RSRP'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,97},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{'threshold-RSRP', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'threshold-RSRQ'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,34},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{'threshold-RSRQ', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  ReportConfigEUTRA
%%================================
'enc_ReportConfigEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigEUTRA_triggerType'(?RT_BER:cindex(2,Val,triggerType), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,triggerQuantity) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,triggerQuantity) end) of
rsrp -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
rsrq -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,reportQuantity) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,reportQuantity) end) of
sameAsTriggerQuantity -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
both -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,maxReportCells), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case (case ?RT_BER:cindex(6,Val,reportInterval) of {_,Enumval6}->Enumval6;_->?RT_BER:cindex(6,Val,reportInterval) end) of
ms120 -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
ms240 -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
ms480 -> ?RT_BER:encode_enumerated(2,[{tag,128,4,'IMPLICIT',0}]);
ms640 -> ?RT_BER:encode_enumerated(3,[{tag,128,4,'IMPLICIT',0}]);
ms1024 -> ?RT_BER:encode_enumerated(4,[{tag,128,4,'IMPLICIT',0}]);
ms2048 -> ?RT_BER:encode_enumerated(5,[{tag,128,4,'IMPLICIT',0}]);
ms5120 -> ?RT_BER:encode_enumerated(6,[{tag,128,4,'IMPLICIT',0}]);
ms10240 -> ?RT_BER:encode_enumerated(7,[{tag,128,4,'IMPLICIT',0}]);
min1 -> ?RT_BER:encode_enumerated(8,[{tag,128,4,'IMPLICIT',0}]);
min6 -> ?RT_BER:encode_enumerated(9,[{tag,128,4,'IMPLICIT',0}]);
min12 -> ?RT_BER:encode_enumerated(10,[{tag,128,4,'IMPLICIT',0}]);
min30 -> ?RT_BER:encode_enumerated(11,[{tag,128,4,'IMPLICIT',0}]);
min60 -> ?RT_BER:encode_enumerated(12,[{tag,128,4,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,4,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,4,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,4,'IMPLICIT',0}]);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end,

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case (case ?RT_BER:cindex(7,Val,reportAmount) of {_,Enumval8}->Enumval8;_->?RT_BER:cindex(7,Val,reportAmount) end) of
r1 -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',0}]);
r2 -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',0}]);
r4 -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',0}]);
r8 -> ?RT_BER:encode_enumerated(3,[{tag,128,5,'IMPLICIT',0}]);
r16 -> ?RT_BER:encode_enumerated(4,[{tag,128,5,'IMPLICIT',0}]);
r32 -> ?RT_BER:encode_enumerated(5,[{tag,128,5,'IMPLICIT',0}]);
r64 -> ?RT_BER:encode_enumerated(6,[{tag,128,5,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,5,'IMPLICIT',0}]);
Enumval9 -> exit({error,{asn1, {enumerated_not_in_range,Enumval9}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigEUTRA_triggerType
%%================================

'enc_ReportConfigEUTRA_triggerType'({'ReportConfigEUTRA_triggerType',Val}, TagIn) ->
   'enc_ReportConfigEUTRA_triggerType'(Val, TagIn);

'enc_ReportConfigEUTRA_triggerType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      event ->
         'enc_ReportConfigEUTRA_triggerType_event'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      periodical ->
         'enc_ReportConfigEUTRA_triggerType_periodical'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ReportConfigEUTRA_triggerType_event
%%================================
'enc_ReportConfigEUTRA_triggerType_event'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReportConfigEUTRA_triggerType_event_eventId'(?RT_BER:cindex(2,Val,eventId), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,hysteresis), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,timeToTrigger) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(4,Val,timeToTrigger) end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
ms64 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
ms128 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
ms256 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
ms320 -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
ms480 -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
ms512 -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
ms640 -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
ms1024 -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
ms1280 -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
ms2560 -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
ms5120 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId
%%================================

'enc_ReportConfigEUTRA_triggerType_event_eventId'({'ReportConfigEUTRA_triggerType_event_eventId',Val}, TagIn) ->
   'enc_ReportConfigEUTRA_triggerType_event_eventId'(Val, TagIn);

'enc_ReportConfigEUTRA_triggerType_event_eventId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      eventA1 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      eventA2 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      eventA3 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      eventA4 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      eventA5 ->
         'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA1
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(2,Val,'a1-Threshold'), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThresholdEUTRA'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigEUTRA_triggerType_event_eventId_eventA1', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA2
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(2,Val,'a2-Threshold'), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThresholdEUTRA'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigEUTRA_triggerType_event_eventId_eventA2', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA3
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'a3-Offset'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,reportOnLeave), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-30,30},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ReportConfigEUTRA_triggerType_event_eventId_eventA3', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA4
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(2,Val,'a4-Threshold'), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThresholdEUTRA'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigEUTRA_triggerType_event_eventId_eventA4', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  ReportConfigEUTRA_triggerType_event_eventId_eventA5
%%================================
'enc_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(2,Val,'a5-Threshold1'), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ThresholdEUTRA'(?RT_BER:cindex(3,Val,'a5-Threshold2'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ThresholdEUTRA'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:ThresholdEUTRA
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_ThresholdEUTRA'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ReportConfigEUTRA_triggerType_event_eventId_eventA5', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_ReportConfigEUTRA_triggerType_event_eventId'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'eventA1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA1'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{eventA1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'eventA2'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA2'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{eventA2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'eventA3'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA3'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{eventA3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'eventA4'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA4'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{eventA4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'eventA5'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event_eventId_eventA5'(Bytes1, mandatory, [{tag,128,4,'IMPLICIT',0}]),
         {{eventA5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.
'dec_ReportConfigEUTRA_triggerType_event'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReportConfigEUTRA_triggerType_event_eventId'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,30},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{ms0,0},{ms40,1},{ms64,2},{ms80,3},{ms100,4},{ms128,5},{ms160,6},{ms256,7},{ms320,8},{ms480,9},{ms512,10},{ms640,11},{ms1024,12},{ms1280,13},{ms2560,14},{ms5120,15}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'ReportConfigEUTRA_triggerType_event', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  ReportConfigEUTRA_triggerType_periodical
%%================================
'enc_ReportConfigEUTRA_triggerType_periodical'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,purpose) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,purpose) end) of
reportStrongestCells -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
reportCGI -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ReportConfigEUTRA_triggerType_periodical'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{reportStrongestCells,0},{reportCGI,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ReportConfigEUTRA_triggerType_periodical', Term1}, Bytes4, Rb1+Rb2+Rb3}.
'dec_ReportConfigEUTRA_triggerType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'event'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_event'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{event, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'periodical'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ReportConfigEUTRA_triggerType_periodical'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{periodical, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_ReportConfigEUTRA'(Bytes, OptOrMand) ->
   'dec_ReportConfigEUTRA'(Bytes, OptOrMand, []).

'dec_ReportConfigEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReportConfigEUTRA_triggerType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{rsrp,0},{rsrq,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{sameAsTriggerQuantity,0},{both,1}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{1,8},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_enumerated(Bytes6,[],[{ms120,0},{ms240,1},{ms480,2},{ms640,3},{ms1024,4},{ms2048,5},{ms5120,6},{ms10240,7},{min1,8},{min6,9},{min12,10},{min30,11},{min60,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_enumerated(Bytes7,[],[{r1,0},{r2,1},{r4,2},{r8,3},{r16,4},{r32,5},{r64,6},{infinity,7}],[{tag,128,5,'IMPLICIT',0}], mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'ReportConfigEUTRA', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  QuantityConfigCDMA2000
%%================================
'enc_QuantityConfigCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,measQuantityCDMA2000) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,measQuantityCDMA2000) end) of
pilotStrength -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
pilotPnPhaseAndPilotStrength -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_QuantityConfigCDMA2000'(Bytes, OptOrMand) ->
   'dec_QuantityConfigCDMA2000'(Bytes, OptOrMand, []).

'dec_QuantityConfigCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{pilotStrength,0},{pilotPnPhaseAndPilotStrength,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'QuantityConfigCDMA2000', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  QuantityConfigGERAN
%%================================
'enc_QuantityConfigGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,measQuantityGERAN) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,measQuantityGERAN) end) of
rssi -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = fc2
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,filterCoefficient) of
         asn1_DEFAULT -> {<<>>,0};
         fc2 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,filterCoefficient) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,filterCoefficient) end) of
fc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
fc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
fc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
fc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
fc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
fc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
fc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
fc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
fc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
fc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
fc11 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
fc13 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
fc15 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
fc17 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
fc19 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_QuantityConfigGERAN'(Bytes, OptOrMand) ->
   'dec_QuantityConfigGERAN'(Bytes, OptOrMand, []).

'dec_QuantityConfigGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{rssi,0}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = fc2
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{fc2,Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'QuantityConfigGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  QuantityConfigUTRA
%%================================
'enc_QuantityConfigUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'measQuantityUTRA-FDD') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'measQuantityUTRA-FDD') end) of
'cpich-RSCP' -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
'cpich-EcN0' -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'measQuantityUTRA-TDD') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'measQuantityUTRA-TDD') end) of
'pccpch-RSCP' -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,filterCoefficient) of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(4,Val,filterCoefficient) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,filterCoefficient) end) of
fc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
fc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
fc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
fc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
fc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
fc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
fc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
fc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
fc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
fc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
fc11 -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
fc13 -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
fc15 -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
fc17 -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
fc19 -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_QuantityConfigUTRA'(Bytes, OptOrMand) ->
   'dec_QuantityConfigUTRA'(Bytes, OptOrMand, []).

'dec_QuantityConfigUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{'cpich-RSCP',0},{'cpich-EcN0',1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{'pccpch-RSCP',0}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes4,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{fc4,Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'QuantityConfigUTRA', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  QuantityConfigEUTRA
%%================================
'enc_QuantityConfigEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,filterCoefficientRSRP) of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(2,Val,filterCoefficientRSRP) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,filterCoefficientRSRP) end) of
fc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
fc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
fc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
fc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
fc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
fc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
fc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
fc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
fc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
fc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
fc11 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
fc13 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
fc15 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
fc17 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
fc19 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,filterCoefficientRSRQ) of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,filterCoefficientRSRQ) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,filterCoefficientRSRQ) end) of
fc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
fc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
fc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
fc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
fc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
fc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
fc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
fc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
fc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
fc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
fc11 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
fc13 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
fc15 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
fc17 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
fc19 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_QuantityConfigEUTRA'(Bytes, OptOrMand) ->
   'dec_QuantityConfigEUTRA'(Bytes, OptOrMand, []).

'dec_QuantityConfigEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes2,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{fc4,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{fc4,Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'QuantityConfigEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  QuantityConfig
%%================================
'enc_QuantityConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:QuantityConfigEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,quantityConfigEUTRA) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigEUTRA'(?RT_BER:cindex(2,Val,quantityConfigEUTRA), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:QuantityConfigUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,quantityConfigUTRA) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigUTRA'(?RT_BER:cindex(3,Val,quantityConfigUTRA), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:QuantityConfigGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,quantityConfigGERAN) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigGERAN'(?RT_BER:cindex(4,Val,quantityConfigGERAN), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:QuantityConfigCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,quantityConfigCDMA2000) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfigCDMA2000'(?RT_BER:cindex(5,Val,quantityConfigCDMA2000), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_QuantityConfig'(Bytes, OptOrMand) ->
   'dec_QuantityConfig'(Bytes, OptOrMand, []).

'dec_QuantityConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:QuantityConfigEUTRA OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_QuantityConfigEUTRA'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:QuantityConfigUTRA OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_QuantityConfigUTRA'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:QuantityConfigGERAN OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_QuantityConfigGERAN'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:QuantityConfigCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_QuantityConfigCDMA2000'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'QuantityConfig', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  PLMN-IdentityList2
%%================================

'enc_PLMN-IdentityList2'({'PLMN-IdentityList2',Val}, TagIn) ->
   'enc_PLMN-IdentityList2'(Val, TagIn);

'enc_PLMN-IdentityList2'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityList2_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PLMN-IdentityList2_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PLMN-IdentityList2_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PLMN-Identity'(H, []),
   'enc_PLMN-IdentityList2_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PLMN-IdentityList2'(Bytes, OptOrMand) ->
   'dec_PLMN-IdentityList2'(Bytes, OptOrMand, []).

'dec_PLMN-IdentityList2'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PLMN-Identity'/3, [], []).




%%================================
%%  MeasResultCDMA2000
%%================================
'enc_MeasResultCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CellGlobalIdCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'cgi-Info') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellGlobalIdCDMA2000'(?RT_BER:cindex(3,Val,'cgi-Info'), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultCDMA2000_measResult'(?RT_BER:cindex(4,Val,measResult), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasResultCDMA2000_measResult
%%================================
'enc_MeasResultCDMA2000_measResult'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,pilotPnPhase) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,pilotPnPhase), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,pilotStrength), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultCDMA2000_measResult'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,32767},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,63},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'MeasResultCDMA2000_measResult', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_MeasResultCDMA2000'(Bytes, OptOrMand) ->
   'dec_MeasResultCDMA2000'(Bytes, OptOrMand, []).

'dec_MeasResultCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,511},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CellGlobalIdCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CellGlobalIdCDMA2000'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_MeasResultCDMA2000_measResult'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MeasResultCDMA2000', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MeasResultListCDMA2000
%%================================

'enc_MeasResultListCDMA2000'({'MeasResultListCDMA2000',Val}, TagIn) ->
   'enc_MeasResultListCDMA2000'(Val, TagIn);

'enc_MeasResultListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasResultListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultCDMA2000'(H, []),
   'enc_MeasResultListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListCDMA2000'(Bytes, OptOrMand) ->
   'dec_MeasResultListCDMA2000'(Bytes, OptOrMand, []).

'dec_MeasResultListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasResultCDMA2000'/3, [], []).




%%================================
%%  MeasResultsCDMA2000
%%================================
'enc_MeasResultsCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,preRegistrationStatusHRPD), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MeasResultListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasResultListCDMA2000'(?RT_BER:cindex(3,Val,measResultListCDMA2000), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasResultsCDMA2000'(Bytes, OptOrMand) ->
   'dec_MeasResultsCDMA2000'(Bytes, OptOrMand, []).

'dec_MeasResultsCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MeasResultListCDMA2000
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MeasResultListCDMA2000'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasResultsCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  MeasResultGERAN
%%================================
'enc_MeasResultGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqGERAN'(?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdGERAN'(?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'cgi-Info') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultGERAN_cgi-Info'(?RT_BER:cindex(4,Val,'cgi-Info'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_MeasResultGERAN_measResult'(?RT_BER:cindex(5,Val,measResult), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasResultGERAN_cgi-Info
%%================================
'enc_MeasResultGERAN_cgi-Info'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdGERAN'(?RT_BER:cindex(2,Val,cellGlobalId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,routingAreaCode) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(3,Val,routingAreaCode), [], [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultGERAN_cgi-Info'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CellGlobalIdGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,8,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasResultGERAN_cgi-Info', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  MeasResultGERAN_measResult
%%================================
'enc_MeasResultGERAN_measResult'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,rssi), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultGERAN_measResult'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,63},[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'MeasResultGERAN_measResult', Term1}, Bytes4, Rb1+Rb2+Rb3}.


'dec_MeasResultGERAN'(Bytes, OptOrMand) ->
   'dec_MeasResultGERAN'(Bytes, OptOrMand, []).

'dec_MeasResultGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CarrierFreqGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PhysCellIdGERAN'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_MeasResultGERAN_cgi-Info'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_MeasResultGERAN_measResult'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'MeasResultGERAN', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  MeasResultListGERAN
%%================================

'enc_MeasResultListGERAN'({'MeasResultListGERAN',Val}, TagIn) ->
   'enc_MeasResultListGERAN'(Val, TagIn);

'enc_MeasResultListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListGERAN_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasResultListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultGERAN'(H, []),
   'enc_MeasResultListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListGERAN'(Bytes, OptOrMand) ->
   'dec_MeasResultListGERAN'(Bytes, OptOrMand, []).

'dec_MeasResultListGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasResultGERAN'/3, [], []).




%%================================
%%  MeasResultUTRA
%%================================
'enc_MeasResultUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasResultUTRA_physCellId'(?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'cgi-Info') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultUTRA_cgi-Info'(?RT_BER:cindex(3,Val,'cgi-Info'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultUTRA_measResult'(?RT_BER:cindex(4,Val,measResult), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasResultUTRA_physCellId
%%================================

'enc_MeasResultUTRA_physCellId'({'MeasResultUTRA_physCellId',Val}, TagIn) ->
   'enc_MeasResultUTRA_physCellId'(Val, TagIn);

'enc_MeasResultUTRA_physCellId'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      fdd ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      tdd ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasResultUTRA_physCellId'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'fdd'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,511},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{fdd, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'tdd'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,127},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{tdd, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  MeasResultUTRA_cgi-Info
%%================================
'enc_MeasResultUTRA_cgi-Info'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdUTRA'(?RT_BER:cindex(2,Val,cellGlobalId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,locationAreaCode) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,locationAreaCode), [], [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,routingAreaCode) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(4,Val,routingAreaCode), [], [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'plmn-IdentityList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-IdentityList2'(?RT_BER:cindex(5,Val,'plmn-IdentityList'), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultUTRA_cgi-Info'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CellGlobalIdUTRA'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes4,8,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_PLMN-IdentityList2'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'MeasResultUTRA_cgi-Info', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.



%%================================
%%  MeasResultUTRA_measResult
%%================================
'enc_MeasResultUTRA_measResult'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'utra-RSCP') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'utra-RSCP'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'utra-EcN0') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'utra-EcN0'), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultUTRA_measResult'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{-5,91},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,49},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'MeasResultUTRA_measResult', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_MeasResultUTRA'(Bytes, OptOrMand) ->
   'dec_MeasResultUTRA'(Bytes, OptOrMand, []).

'dec_MeasResultUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MeasResultUTRA_physCellId'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_MeasResultUTRA_cgi-Info'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_MeasResultUTRA_measResult'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MeasResultUTRA', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MeasResultListUTRA
%%================================

'enc_MeasResultListUTRA'({'MeasResultListUTRA',Val}, TagIn) ->
   'enc_MeasResultListUTRA'(Val, TagIn);

'enc_MeasResultListUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListUTRA_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasResultListUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultUTRA'(H, []),
   'enc_MeasResultListUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListUTRA'(Bytes, OptOrMand) ->
   'dec_MeasResultListUTRA'(Bytes, OptOrMand, []).

'dec_MeasResultListUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasResultUTRA'/3, [], []).




%%================================
%%  MeasResultEUTRA
%%================================
'enc_MeasResultEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'cgi-Info') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResultEUTRA_cgi-Info'(?RT_BER:cindex(3,Val,'cgi-Info'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MeasResultEUTRA_measResult'(?RT_BER:cindex(4,Val,measResult), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasResultEUTRA_cgi-Info
%%================================
'enc_MeasResultEUTRA_cgi-Info'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdEUTRA
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CellGlobalIdEUTRA'(?RT_BER:cindex(2,Val,cellGlobalId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,trackingAreaCode), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'plmn-IdentityList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-IdentityList2'(?RT_BER:cindex(4,Val,'plmn-IdentityList'), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultEUTRA_cgi-Info'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CellGlobalIdEUTRA
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CellGlobalIdEUTRA'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PLMN-IdentityList2 OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PLMN-IdentityList2'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MeasResultEUTRA_cgi-Info', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  MeasResultEUTRA_measResult
%%================================
'enc_MeasResultEUTRA_measResult'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,rsrpResult) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,rsrpResult), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,rsrqResult) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,rsrqResult), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResultEUTRA_measResult'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,97},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,34},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'MeasResultEUTRA_measResult', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_MeasResultEUTRA'(Bytes, OptOrMand) ->
   'dec_MeasResultEUTRA'(Bytes, OptOrMand, []).

'dec_MeasResultEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,503},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_MeasResultEUTRA_cgi-Info'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_MeasResultEUTRA_measResult'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MeasResultEUTRA', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MeasResultListEUTRA
%%================================

'enc_MeasResultListEUTRA'({'MeasResultListEUTRA',Val}, TagIn) ->
   'enc_MeasResultListEUTRA'(Val, TagIn);

'enc_MeasResultListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasResultListEUTRA_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasResultListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasResultListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasResultEUTRA'(H, []),
   'enc_MeasResultListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasResultListEUTRA'(Bytes, OptOrMand) ->
   'dec_MeasResultListEUTRA'(Bytes, OptOrMand, []).

'dec_MeasResultListEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasResultEUTRA'/3, [], []).




%%================================
%%  MeasResults
%%================================
'enc_MeasResults'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,measId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasResults_measResultServCell'(?RT_BER:cindex(3,Val,measResultServCell), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,measResultNeighCells) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasResults_measResultNeighCells'(?RT_BER:cindex(4,Val,measResultNeighCells), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasResults_measResultServCell
%%================================
'enc_MeasResults_measResultServCell'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,rsrpResult), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,rsrqResult), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasResults_measResultServCell'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,97},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,34},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasResults_measResultServCell', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  MeasResults_measResultNeighCells
%%================================

'enc_MeasResults_measResultNeighCells'({'MeasResults_measResultNeighCells',Val}, TagIn) ->
   'enc_MeasResults_measResultNeighCells'(Val, TagIn);

'enc_MeasResults_measResultNeighCells'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      measResultListEUTRA ->
         'enc_MeasResultListEUTRA'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      measResultListUTRA ->
         'enc_MeasResultListUTRA'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      measResultListGERAN ->
         'enc_MeasResultListGERAN'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      measResultsCDMA2000 ->
         'enc_MeasResultsCDMA2000'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasResults_measResultNeighCells'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'measResultListEUTRA'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasResultListEUTRA'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{measResultListEUTRA, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measResultListUTRA'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasResultListUTRA'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{measResultListUTRA, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measResultListGERAN'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasResultListGERAN'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{measResultListGERAN, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measResultsCDMA2000'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasResultsCDMA2000'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{measResultsCDMA2000, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


'dec_MeasResults'(Bytes, OptOrMand) ->
   'dec_MeasResults'(Bytes, OptOrMand, []).

'dec_MeasResults'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MeasResults_measResultServCell'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_MeasResults_measResultNeighCells'(Bytes4, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'MeasResults', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CellsToAddModUTRA-TDD
%%================================
'enc_CellsToAddModUTRA-TDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellsToAddModUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_CellsToAddModUTRA-TDD'(Bytes, OptOrMand, []).

'dec_CellsToAddModUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,127},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellsToAddModUTRA-TDD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CellsToAddModListUTRA-TDD
%%================================

'enc_CellsToAddModListUTRA-TDD'({'CellsToAddModListUTRA-TDD',Val}, TagIn) ->
   'enc_CellsToAddModListUTRA-TDD'(Val, TagIn);

'enc_CellsToAddModListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListUTRA-TDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CellsToAddModListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModUTRA-TDD'(H, []),
   'enc_CellsToAddModListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_CellsToAddModListUTRA-TDD'(Bytes, OptOrMand, []).

'dec_CellsToAddModListUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CellsToAddModUTRA-TDD'/3, [], []).




%%================================
%%  CellsToAddModUTRA-FDD
%%================================
'enc_CellsToAddModUTRA-FDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellsToAddModUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_CellsToAddModUTRA-FDD'(Bytes, OptOrMand, []).

'dec_CellsToAddModUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,511},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellsToAddModUTRA-FDD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CellsToAddModListUTRA-FDD
%%================================

'enc_CellsToAddModListUTRA-FDD'({'CellsToAddModListUTRA-FDD',Val}, TagIn) ->
   'enc_CellsToAddModListUTRA-FDD'(Val, TagIn);

'enc_CellsToAddModListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListUTRA-FDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CellsToAddModListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModUTRA-FDD'(H, []),
   'enc_CellsToAddModListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_CellsToAddModListUTRA-FDD'(Bytes, OptOrMand, []).

'dec_CellsToAddModListUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CellsToAddModUTRA-FDD'/3, [], []).




%%================================
%%  MeasObjectUTRA
%%================================
'enc_MeasObjectUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,offsetFreq) of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,offsetFreq), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,cellsToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(?RT_BER:cindex(4,Val,cellsToRemoveList), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,cellsToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectUTRA_cellsToAddModList'(?RT_BER:cindex(5,Val,cellsToAddModList), [{tag,128,3,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,cellForWhichToReportCGI) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectUTRA_cellForWhichToReportCGI'(?RT_BER:cindex(6,Val,cellForWhichToReportCGI), [{tag,128,4,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasObjectUTRA_cellsToAddModList
%%================================

'enc_MeasObjectUTRA_cellsToAddModList'({'MeasObjectUTRA_cellsToAddModList',Val}, TagIn) ->
   'enc_MeasObjectUTRA_cellsToAddModList'(Val, TagIn);

'enc_MeasObjectUTRA_cellsToAddModList'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'cellsToAddModListUTRA-FDD' ->
         'enc_CellsToAddModListUTRA-FDD'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'cellsToAddModListUTRA-TDD' ->
         'enc_CellsToAddModListUTRA-TDD'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasObjectUTRA_cellsToAddModList'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'cellsToAddModListUTRA-FDD'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CellsToAddModListUTRA-FDD'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'cellsToAddModListUTRA-FDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'cellsToAddModListUTRA-TDD'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CellsToAddModListUTRA-TDD'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{'cellsToAddModListUTRA-TDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  MeasObjectUTRA_cellForWhichToReportCGI
%%================================

'enc_MeasObjectUTRA_cellForWhichToReportCGI'({'MeasObjectUTRA_cellForWhichToReportCGI',Val}, TagIn) ->
   'enc_MeasObjectUTRA_cellForWhichToReportCGI'(Val, TagIn);

'enc_MeasObjectUTRA_cellForWhichToReportCGI'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'utra-FDD' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'utra-TDD' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasObjectUTRA_cellForWhichToReportCGI'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'utra-FDD'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,511},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{'utra-FDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utra-TDD'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,127},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{'utra-TDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MeasObjectUTRA'(Bytes, OptOrMand) ->
   'dec_MeasObjectUTRA'(Bytes, OptOrMand, []).

'dec_MeasObjectUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,16383},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{-15,15},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{0,Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CellIndexList'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_MeasObjectUTRA_cellsToAddModList'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_MeasObjectUTRA_cellForWhichToReportCGI'(Bytes6, opt_or_default, [{tag,128,4,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,ext),
   {{'MeasObjectUTRA', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  MeasObjectToAddMod
%%================================
'enc_MeasObjectToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,measObjectId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MeasObjectToAddMod_measObject'(?RT_BER:cindex(3,Val,measObject), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasObjectToAddMod_measObject
%%================================

'enc_MeasObjectToAddMod_measObject'({'MeasObjectToAddMod_measObject',Val}, TagIn) ->
   'enc_MeasObjectToAddMod_measObject'(Val, TagIn);

'enc_MeasObjectToAddMod_measObject'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      measObjectEUTRA ->
         'enc_MeasObjectEUTRA'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      measObjectUTRA ->
         'enc_MeasObjectUTRA'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      measObjectGERAN ->
         'enc_MeasObjectGERAN'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      measObjectCDMA2000 ->
         'enc_MeasObjectCDMA2000'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasObjectToAddMod_measObject'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'measObjectEUTRA'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasObjectEUTRA'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{measObjectEUTRA, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measObjectUTRA'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasObjectUTRA'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{measObjectUTRA, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measObjectGERAN'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasObjectGERAN'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{measObjectGERAN, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measObjectCDMA2000'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasObjectCDMA2000'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{measObjectCDMA2000, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


'dec_MeasObjectToAddMod'(Bytes, OptOrMand) ->
   'dec_MeasObjectToAddMod'(Bytes, OptOrMand, []).

'dec_MeasObjectToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MeasObjectToAddMod_measObject'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasObjectToAddMod', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  MeasObjectToAddModList
%%================================

'enc_MeasObjectToAddModList'({'MeasObjectToAddModList',Val}, TagIn) ->
   'enc_MeasObjectToAddModList'(Val, TagIn);

'enc_MeasObjectToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasObjectToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasObjectToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToAddMod'(H, []),
   'enc_MeasObjectToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasObjectToAddModList'(Bytes, OptOrMand) ->
   'dec_MeasObjectToAddModList'(Bytes, OptOrMand, []).

'dec_MeasObjectToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasObjectToAddMod'/3, [], []).




%%================================
%%  MeasObjectId
%%================================

'enc_MeasObjectId'({'MeasObjectId',Val}, TagIn) ->
   'enc_MeasObjectId'(Val, TagIn);

'enc_MeasObjectId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_MeasObjectId'(Bytes, OptOrMand) ->
   'dec_MeasObjectId'(Bytes, OptOrMand, []).

'dec_MeasObjectId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  MeasObjectGERAN
%%================================
'enc_MeasObjectGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(?RT_BER:cindex(2,Val,carrierFreqs), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,offsetFreq) of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,offsetFreq), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING DEFAULT = [1,1,1,1,1,1,1,1]
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'ncc-Permitted') of
         asn1_DEFAULT -> {<<>>,0};
         [1,1,1,1,1,1,1,1] -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(4,Val,'ncc-Permitted'), [], [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PhysCellIdGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,cellForWhichToReportCGI) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysCellIdGERAN'(?RT_BER:cindex(5,Val,cellForWhichToReportCGI), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasObjectGERAN'(Bytes, OptOrMand) ->
   'dec_MeasObjectGERAN'(Bytes, OptOrMand, []).

'dec_MeasObjectGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CarrierFreqsGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{-15,15},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{0,Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING DEFAULT = [1,1,1,1,1,1,1,1]
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes4,8,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory);
_ ->
{[1,1,1,1,1,1,1,1],Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PhysCellIdGERAN OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_PhysCellIdGERAN'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'MeasObjectGERAN', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  BlackCellsToAddMod
%%================================
'enc_BlackCellsToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdRange
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdRange'(?RT_BER:cindex(3,Val,physCellIdRange), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BlackCellsToAddMod'(Bytes, OptOrMand) ->
   'dec_BlackCellsToAddMod'(Bytes, OptOrMand, []).

'dec_BlackCellsToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdRange
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PhysCellIdRange'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BlackCellsToAddMod', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BlackCellsToAddModList
%%================================

'enc_BlackCellsToAddModList'({'BlackCellsToAddModList',Val}, TagIn) ->
   'enc_BlackCellsToAddModList'(Val, TagIn);

'enc_BlackCellsToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BlackCellsToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BlackCellsToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BlackCellsToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BlackCellsToAddMod'(H, []),
   'enc_BlackCellsToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BlackCellsToAddModList'(Bytes, OptOrMand) ->
   'dec_BlackCellsToAddModList'(Bytes, OptOrMand, []).

'dec_BlackCellsToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BlackCellsToAddMod'/3, [], []).




%%================================
%%  CellsToAddMod
%%================================
'enc_CellsToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,cellIndividualOffset) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,cellIndividualOffset) end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
'dB-22' -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
'dB-20' -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
'dB-18' -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
'dB-16' -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
'dB-14' -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
'dB-12' -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
'dB-10' -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
'dB-8' -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
'dB-6' -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
'dB-5' -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
'dB-1' -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(16,[{tag,128,2,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(17,[{tag,128,2,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(18,[{tag,128,2,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(19,[{tag,128,2,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(20,[{tag,128,2,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(21,[{tag,128,2,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(22,[{tag,128,2,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(23,[{tag,128,2,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(24,[{tag,128,2,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(25,[{tag,128,2,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(26,[{tag,128,2,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(27,[{tag,128,2,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(28,[{tag,128,2,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(29,[{tag,128,2,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(30,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellsToAddMod'(Bytes, OptOrMand) ->
   'dec_CellsToAddMod'(Bytes, OptOrMand, []).

'dec_CellsToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,503},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CellsToAddMod', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CellsToAddModList
%%================================

'enc_CellsToAddModList'({'CellsToAddModList',Val}, TagIn) ->
   'enc_CellsToAddModList'(Val, TagIn);

'enc_CellsToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CellsToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddMod'(H, []),
   'enc_CellsToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModList'(Bytes, OptOrMand) ->
   'dec_CellsToAddModList'(Bytes, OptOrMand, []).

'dec_CellsToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CellsToAddMod'/3, [], []).




%%================================
%%  MeasObjectEUTRA
%%================================
'enc_MeasObjectEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,allowedMeasBandwidth) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,allowedMeasBandwidth) end) of
mbw6 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
mbw15 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
mbw25 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
mbw50 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
mbw75 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
mbw100 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,presenceAntennaPort1), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], ?RT_BER:cindex(5,Val,neighCellConfig), [], [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,offsetFreq) of
         asn1_DEFAULT -> {<<>>,0};
         dB0 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(6,Val,offsetFreq) of {_,Enumval6}->Enumval6;_->?RT_BER:cindex(6,Val,offsetFreq) end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
'dB-22' -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
'dB-20' -> ?RT_BER:encode_enumerated(2,[{tag,128,4,'IMPLICIT',0}]);
'dB-18' -> ?RT_BER:encode_enumerated(3,[{tag,128,4,'IMPLICIT',0}]);
'dB-16' -> ?RT_BER:encode_enumerated(4,[{tag,128,4,'IMPLICIT',0}]);
'dB-14' -> ?RT_BER:encode_enumerated(5,[{tag,128,4,'IMPLICIT',0}]);
'dB-12' -> ?RT_BER:encode_enumerated(6,[{tag,128,4,'IMPLICIT',0}]);
'dB-10' -> ?RT_BER:encode_enumerated(7,[{tag,128,4,'IMPLICIT',0}]);
'dB-8' -> ?RT_BER:encode_enumerated(8,[{tag,128,4,'IMPLICIT',0}]);
'dB-6' -> ?RT_BER:encode_enumerated(9,[{tag,128,4,'IMPLICIT',0}]);
'dB-5' -> ?RT_BER:encode_enumerated(10,[{tag,128,4,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(11,[{tag,128,4,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(12,[{tag,128,4,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(13,[{tag,128,4,'IMPLICIT',0}]);
'dB-1' -> ?RT_BER:encode_enumerated(14,[{tag,128,4,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(15,[{tag,128,4,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(16,[{tag,128,4,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(17,[{tag,128,4,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(18,[{tag,128,4,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(19,[{tag,128,4,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(20,[{tag,128,4,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(21,[{tag,128,4,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(22,[{tag,128,4,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(23,[{tag,128,4,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(24,[{tag,128,4,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(25,[{tag,128,4,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(26,[{tag,128,4,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(27,[{tag,128,4,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(28,[{tag,128,4,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(29,[{tag,128,4,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(30,[{tag,128,4,'IMPLICIT',0}]);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,cellsToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(?RT_BER:cindex(7,Val,cellsToRemoveList), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:CellsToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,cellsToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellsToAddModList'(?RT_BER:cindex(8,Val,cellsToAddModList), [{tag,128,6,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,blackCellsToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(?RT_BER:cindex(9,Val,blackCellsToRemoveList), [{tag,128,7,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:BlackCellsToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,blackCellsToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BlackCellsToAddModList'(?RT_BER:cindex(10,Val,blackCellsToAddModList), [{tag,128,8,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,cellForWhichToReportCGI) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(11,Val,cellForWhichToReportCGI), [{tag,128,9,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasObjectEUTRA'(Bytes, OptOrMand) ->
   'dec_MeasObjectEUTRA'(Bytes, OptOrMand, []).

'dec_MeasObjectEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{mbw6,0},{mbw15,1},{mbw25,2},{mbw50,3},{mbw75,4},{mbw100,5}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_bit_string(Bytes5,2,[],[{tag,128,3,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes6,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],[{tag,128,4,'IMPLICIT',0}], mandatory);
_ ->
{dB0,Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_CellIndexList'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:CellsToAddModList OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_CellsToAddModList'(Bytes8, opt_or_default, [{tag,128,6,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_CellIndexList'(Bytes9, opt_or_default, [{tag,128,7,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:BlackCellsToAddModList OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
'dec_BlackCellsToAddModList'(Bytes10, opt_or_default, [{tag,128,8,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,9:5,_/binary>> ->
?RT_BER:decode_integer(Bytes11,{0,503},[{tag,128,9,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,ext),
   {{'MeasObjectEUTRA', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  CellsToAddModCDMA2000
%%================================
'enc_CellsToAddModCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellsToAddModCDMA2000'(Bytes, OptOrMand) ->
   'dec_CellsToAddModCDMA2000'(Bytes, OptOrMand, []).

'dec_CellsToAddModCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,511},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellsToAddModCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CellsToAddModListCDMA2000
%%================================

'enc_CellsToAddModListCDMA2000'({'CellsToAddModListCDMA2000',Val}, TagIn) ->
   'enc_CellsToAddModListCDMA2000'(Val, TagIn);

'enc_CellsToAddModListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CellsToAddModListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellsToAddModListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellsToAddModCDMA2000'(H, []),
   'enc_CellsToAddModListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellsToAddModListCDMA2000'(Bytes, OptOrMand) ->
   'dec_CellsToAddModListCDMA2000'(Bytes, OptOrMand, []).

'dec_CellsToAddModListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CellsToAddModCDMA2000'/3, [], []).




%%================================
%%  MeasObjectCDMA2000
%%================================
'enc_MeasObjectCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'cdma2000-Type') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'cdma2000-Type') end) of
type1XRTT -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
typeHRPD -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqCDMA2000'(?RT_BER:cindex(3,Val,carrierFreq), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,searchWindowSize) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,searchWindowSize), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,offsetFreq) of
         asn1_DEFAULT -> {<<>>,0};
         0 -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,offsetFreq), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,cellsToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellIndexList'(?RT_BER:cindex(6,Val,cellsToRemoveList), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:CellsToAddModListCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,cellsToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellsToAddModListCDMA2000'(?RT_BER:cindex(7,Val,cellsToAddModList), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,cellForWhichToReportCGI) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,cellForWhichToReportCGI), [{tag,128,6,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasObjectCDMA2000'(Bytes, OptOrMand) ->
   'dec_MeasObjectCDMA2000'(Bytes, OptOrMand, []).

'dec_MeasObjectCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{type1XRTT,0},{typeHRPD,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqCDMA2000
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CarrierFreqCDMA2000'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,{0,15},[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER DEFAULT = 0
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,{-15,15},[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{0,Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:CellIndexList OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_CellIndexList'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:CellsToAddModListCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_CellsToAddModListCDMA2000'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_integer(Bytes8,{0,511},[{tag,128,6,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,ext),
   {{'MeasObjectCDMA2000', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


%%================================
%%  MeasIdToAddMod
%%================================
'enc_MeasIdToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,measId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,measObjectId), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,reportConfigId), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MeasIdToAddMod'(Bytes, OptOrMand) ->
   'dec_MeasIdToAddMod'(Bytes, OptOrMand, []).

'dec_MeasIdToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,32},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{1,32},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MeasIdToAddMod', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MeasIdToAddModList
%%================================

'enc_MeasIdToAddModList'({'MeasIdToAddModList',Val}, TagIn) ->
   'enc_MeasIdToAddModList'(Val, TagIn);

'enc_MeasIdToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasIdToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasIdToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasIdToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MeasIdToAddMod'(H, []),
   'enc_MeasIdToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasIdToAddModList'(Bytes, OptOrMand) ->
   'dec_MeasIdToAddModList'(Bytes, OptOrMand, []).

'dec_MeasIdToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MeasIdToAddMod'/3, [], []).




%%================================
%%  MeasId
%%================================

'enc_MeasId'({'MeasId',Val}, TagIn) ->
   'enc_MeasId'(Val, TagIn);

'enc_MeasId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_MeasId'(Bytes, OptOrMand) ->
   'dec_MeasId'(Bytes, OptOrMand, []).

'dec_MeasId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  MeasGapConfig
%%================================

'enc_MeasGapConfig'({'MeasGapConfig',Val}, TagIn) ->
   'enc_MeasGapConfig'(Val, TagIn);

'enc_MeasGapConfig'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_MeasGapConfig_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  MeasGapConfig_setup
%%================================
'enc_MeasGapConfig_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasGapConfig_setup_gapOffset'(?RT_BER:cindex(2,Val,gapOffset), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasGapConfig_setup_gapOffset
%%================================

'enc_MeasGapConfig_setup_gapOffset'({'MeasGapConfig_setup_gapOffset',Val}, TagIn) ->
   'enc_MeasGapConfig_setup_gapOffset'(Val, TagIn);

'enc_MeasGapConfig_setup_gapOffset'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      gp0 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      gp1 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasGapConfig_setup_gapOffset'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'gp0'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,39},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{gp0, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'gp1'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,79},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{gp1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.
'dec_MeasGapConfig_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MeasGapConfig_setup_gapOffset'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'MeasGapConfig_setup', Term1}, Bytes4, Rb1+Rb2+Rb3}.


'dec_MeasGapConfig'(Bytes, OptOrMand) ->
   'dec_MeasGapConfig'(Bytes, OptOrMand, []).

'dec_MeasGapConfig'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasGapConfig_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  ReportConfigToRemoveList
%%================================

'enc_ReportConfigToRemoveList'({'ReportConfigToRemoveList',Val}, TagIn) ->
   'enc_ReportConfigToRemoveList'(Val, TagIn);

'enc_ReportConfigToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ReportConfigToRemoveList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ReportConfigToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ReportConfigToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_ReportConfigToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ReportConfigToRemoveList'(Bytes, OptOrMand) ->
   'dec_ReportConfigToRemoveList'(Bytes, OptOrMand, []).

'dec_ReportConfigToRemoveList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{1,32},[], mandatory)
end, [], []).




%%================================
%%  MeasObjectToRemoveList
%%================================

'enc_MeasObjectToRemoveList'({'MeasObjectToRemoveList',Val}, TagIn) ->
   'enc_MeasObjectToRemoveList'(Val, TagIn);

'enc_MeasObjectToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasObjectToRemoveList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasObjectToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasObjectToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_MeasObjectToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasObjectToRemoveList'(Bytes, OptOrMand) ->
   'dec_MeasObjectToRemoveList'(Bytes, OptOrMand, []).

'dec_MeasObjectToRemoveList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{1,32},[], mandatory)
end, [], []).




%%================================
%%  MeasIdToRemoveList
%%================================

'enc_MeasIdToRemoveList'({'MeasIdToRemoveList',Val}, TagIn) ->
   'enc_MeasIdToRemoveList'(Val, TagIn);

'enc_MeasIdToRemoveList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MeasIdToRemoveList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MeasIdToRemoveList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MeasIdToRemoveList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_MeasIdToRemoveList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MeasIdToRemoveList'(Bytes, OptOrMand) ->
   'dec_MeasIdToRemoveList'(Bytes, OptOrMand, []).

'dec_MeasIdToRemoveList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{1,32},[], mandatory)
end, [], []).




%%================================
%%  MeasConfig
%%================================
'enc_MeasConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasObjectToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,measObjectToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectToRemoveList'(?RT_BER:cindex(2,Val,measObjectToRemoveList), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MeasObjectToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,measObjectToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasObjectToAddModList'(?RT_BER:cindex(3,Val,measObjectToAddModList), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:ReportConfigToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,reportConfigToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReportConfigToRemoveList'(?RT_BER:cindex(4,Val,reportConfigToRemoveList), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:ReportConfigToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,reportConfigToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ReportConfigToAddModList'(?RT_BER:cindex(5,Val,reportConfigToAddModList), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:MeasIdToRemoveList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,measIdToRemoveList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasIdToRemoveList'(?RT_BER:cindex(6,Val,measIdToRemoveList), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:MeasIdToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,measIdToAddModList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasIdToAddModList'(?RT_BER:cindex(7,Val,measIdToAddModList), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:QuantityConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,quantityConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_QuantityConfig'(?RT_BER:cindex(8,Val,quantityConfig), [{tag,128,6,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:MeasGapConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,measGapConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasGapConfig'(?RT_BER:cindex(9,Val,measGapConfig), [{tag,128,7,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 9 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,'s-Measure') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(10,Val,'s-Measure'), [{tag,128,8,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 10   External EUTRA-RRC:PreRegistrationInfoHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,preRegistrationInfoHRPD) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PreRegistrationInfoHRPD'(?RT_BER:cindex(11,Val,preRegistrationInfoHRPD), [{tag,128,9,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 11 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case ?RT_BER:cindex(12,Val,speedStatePars) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasConfig_speedStatePars'(?RT_BER:cindex(12,Val,speedStatePars), [{tag,128,10,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasConfig_speedStatePars
%%================================

'enc_MeasConfig_speedStatePars'({'MeasConfig_speedStatePars',Val}, TagIn) ->
   'enc_MeasConfig_speedStatePars'(Val, TagIn);

'enc_MeasConfig_speedStatePars'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_MeasConfig_speedStatePars_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  MeasConfig_speedStatePars_setup
%%================================
'enc_MeasConfig_speedStatePars_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MobilityStateParameters'(?RT_BER:cindex(2,Val,mobilityStateParameters), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SpeedStateScaleFactors
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SpeedStateScaleFactors'(?RT_BER:cindex(3,Val,'timeToTrigger-SF'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasConfig_speedStatePars_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MobilityStateParameters'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SpeedStateScaleFactors
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SpeedStateScaleFactors'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasConfig_speedStatePars_setup', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_MeasConfig_speedStatePars'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasConfig_speedStatePars_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MeasConfig'(Bytes, OptOrMand) ->
   'dec_MeasConfig'(Bytes, OptOrMand, []).

'dec_MeasConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasObjectToRemoveList OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_MeasObjectToRemoveList'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MeasObjectToAddModList OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_MeasObjectToAddModList'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:ReportConfigToRemoveList OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_ReportConfigToRemoveList'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:ReportConfigToAddModList OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_ReportConfigToAddModList'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:MeasIdToRemoveList OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_MeasIdToRemoveList'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:MeasIdToAddModList OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_MeasIdToAddModList'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:QuantityConfig OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_QuantityConfig'(Bytes8, opt_or_default, [{tag,128,6,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:MeasGapConfig OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_MeasGapConfig'(Bytes9, opt_or_default, [{tag,128,7,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
?RT_BER:decode_integer(Bytes10,{0,97},[{tag,128,8,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10   External EUTRA-RRC:PreRegistrationInfoHRPD OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,9:5,_/binary>> ->
'dec_PreRegistrationInfoHRPD'(Bytes11, opt_or_default, [{tag,128,9,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

%%-------------------------------------------------
%% attribute number 11 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term11,Bytes13,Rb12} = case Bytes12 of
<<2:2,_:1,10:5,_/binary>> ->
'dec_MeasConfig_speedStatePars'(Bytes12, opt_or_default, [{tag,128,10,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes12, 0 }
end,

   {Bytes14,Rb13} = ?RT_BER:restbytes2(RemBytes, Bytes13,ext),
   {{'MeasConfig', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11}, Bytes14, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12+Rb13}.


%%================================
%%  Hysteresis
%%================================

'enc_Hysteresis'({'Hysteresis',Val}, TagIn) ->
   'enc_Hysteresis'(Val, TagIn);

'enc_Hysteresis'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_Hysteresis'(Bytes, OptOrMand) ->
   'dec_Hysteresis'(Bytes, OptOrMand, []).

'dec_Hysteresis'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,30},TagIn++[], OptOrMand).



%%================================
%%  AllowedMeasBandwidth
%%================================

'enc_AllowedMeasBandwidth'({'AllowedMeasBandwidth',Val}, TagIn) ->
   'enc_AllowedMeasBandwidth'(Val, TagIn);

'enc_AllowedMeasBandwidth'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
mbw6 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
mbw15 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
mbw25 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
mbw50 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
mbw75 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
mbw100 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_AllowedMeasBandwidth'(Bytes, OptOrMand) ->
   'dec_AllowedMeasBandwidth'(Bytes, OptOrMand, []).

'dec_AllowedMeasBandwidth'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{mbw6,0},{mbw15,1},{mbw25,2},{mbw50,3},{mbw75,4},{mbw100,5}],TagIn++[], OptOrMand).



%%================================
%%  T-Reselection
%%================================

'enc_T-Reselection'({'T-Reselection',Val}, TagIn) ->
   'enc_T-Reselection'(Val, TagIn);

'enc_T-Reselection'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_T-Reselection'(Bytes, OptOrMand) ->
   'dec_T-Reselection'(Bytes, OptOrMand, []).

'dec_T-Reselection'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,7},TagIn++[], OptOrMand).



%%================================
%%  TrackingAreaCode
%%================================

'enc_TrackingAreaCode'({'TrackingAreaCode',Val}, TagIn) ->
   'enc_TrackingAreaCode'(Val, TagIn);

'enc_TrackingAreaCode'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',16}], Val, [], TagIn ++ []).


'dec_TrackingAreaCode'(Bytes, OptOrMand) ->
   'dec_TrackingAreaCode'(Bytes, OptOrMand, []).

'dec_TrackingAreaCode'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,16,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  SystemTimeInfoCDMA2000
%%================================
'enc_SystemTimeInfoCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,'cdma-EUTRA-Synchronisation'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(?RT_BER:cindex(3,Val,'cdma-SystemTime'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemTimeInfoCDMA2000_cdma-SystemTime
%%================================

'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'({'SystemTimeInfoCDMA2000_cdma-SystemTime',Val}, TagIn) ->
   'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Val, TagIn);

'enc_SystemTimeInfoCDMA2000_cdma-SystemTime'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      synchronousSystemTime ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',39}], element(2,Val), [], [{tag,128,0,'IMPLICIT',0}]);
      asynchronousSystemTime ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',49}], element(2,Val), [], [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'synchronousSystemTime'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,39,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{synchronousSystemTime, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'asynchronousSystemTime'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,49,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{asynchronousSystemTime, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SystemTimeInfoCDMA2000'(Bytes, OptOrMand) ->
   'dec_SystemTimeInfoCDMA2000'(Bytes, OptOrMand, []).

'dec_SystemTimeInfoCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SystemTimeInfoCDMA2000_cdma-SystemTime'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemTimeInfoCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SpeedStateScaleFactors
%%================================
'enc_SpeedStateScaleFactors'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'sf-Medium') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'sf-Medium') end) of
oDot25 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
oDot5 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
oDot75 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
lDot0 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'sf-High') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'sf-High') end) of
oDot25 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
oDot5 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
oDot75 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
lDot0 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SpeedStateScaleFactors'(Bytes, OptOrMand) ->
   'dec_SpeedStateScaleFactors'(Bytes, OptOrMand, []).

'dec_SpeedStateScaleFactors'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{oDot25,0},{oDot5,1},{oDot75,2},{lDot0,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{oDot25,0},{oDot5,1},{oDot75,2},{lDot0,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SpeedStateScaleFactors', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  ReselectionThreshold
%%================================

'enc_ReselectionThreshold'({'ReselectionThreshold',Val}, TagIn) ->
   'enc_ReselectionThreshold'(Val, TagIn);

'enc_ReselectionThreshold'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ReselectionThreshold'(Bytes, OptOrMand) ->
   'dec_ReselectionThreshold'(Bytes, OptOrMand, []).

'dec_ReselectionThreshold'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,31},TagIn++[], OptOrMand).



%%================================
%%  Q-OffsetRangeInterRAT
%%================================

'enc_Q-OffsetRangeInterRAT'({'Q-OffsetRangeInterRAT',Val}, TagIn) ->
   'enc_Q-OffsetRangeInterRAT'(Val, TagIn);

'enc_Q-OffsetRangeInterRAT'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_Q-OffsetRangeInterRAT'(Bytes, OptOrMand) ->
   'dec_Q-OffsetRangeInterRAT'(Bytes, OptOrMand, []).

'dec_Q-OffsetRangeInterRAT'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{-15,15},TagIn++[], OptOrMand).



%%================================
%%  Q-OffsetRange
%%================================

'enc_Q-OffsetRange'({'Q-OffsetRange',Val}, TagIn) ->
   'enc_Q-OffsetRange'(Val, TagIn);

'enc_Q-OffsetRange'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
'dB-22' -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
'dB-20' -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
'dB-18' -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
'dB-16' -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
'dB-14' -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
'dB-12' -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
'dB-10' -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
'dB-8' -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
'dB-6' -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
'dB-5' -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
'dB-4' -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
'dB-3' -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
'dB-2' -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
'dB-1' -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
dB0 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
dB1 -> ?RT_BER:encode_enumerated(16,TagIn ++ []);
dB2 -> ?RT_BER:encode_enumerated(17,TagIn ++ []);
dB3 -> ?RT_BER:encode_enumerated(18,TagIn ++ []);
dB4 -> ?RT_BER:encode_enumerated(19,TagIn ++ []);
dB5 -> ?RT_BER:encode_enumerated(20,TagIn ++ []);
dB6 -> ?RT_BER:encode_enumerated(21,TagIn ++ []);
dB8 -> ?RT_BER:encode_enumerated(22,TagIn ++ []);
dB10 -> ?RT_BER:encode_enumerated(23,TagIn ++ []);
dB12 -> ?RT_BER:encode_enumerated(24,TagIn ++ []);
dB14 -> ?RT_BER:encode_enumerated(25,TagIn ++ []);
dB16 -> ?RT_BER:encode_enumerated(26,TagIn ++ []);
dB18 -> ?RT_BER:encode_enumerated(27,TagIn ++ []);
dB20 -> ?RT_BER:encode_enumerated(28,TagIn ++ []);
dB22 -> ?RT_BER:encode_enumerated(29,TagIn ++ []);
dB24 -> ?RT_BER:encode_enumerated(30,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_Q-OffsetRange'(Bytes, OptOrMand) ->
   'dec_Q-OffsetRange'(Bytes, OptOrMand, []).

'dec_Q-OffsetRange'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],TagIn++[], OptOrMand).



%%================================
%%  Q-RxLevMin
%%================================

'enc_Q-RxLevMin'({'Q-RxLevMin',Val}, TagIn) ->
   'enc_Q-RxLevMin'(Val, TagIn);

'enc_Q-RxLevMin'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_Q-RxLevMin'(Bytes, OptOrMand) ->
   'dec_Q-RxLevMin'(Bytes, OptOrMand, []).

'dec_Q-RxLevMin'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{-70,-22},TagIn++[], OptOrMand).



%%================================
%%  PreRegistrationZoneIdHRPD
%%================================

'enc_PreRegistrationZoneIdHRPD'({'PreRegistrationZoneIdHRPD',Val}, TagIn) ->
   'enc_PreRegistrationZoneIdHRPD'(Val, TagIn);

'enc_PreRegistrationZoneIdHRPD'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_PreRegistrationZoneIdHRPD'(Bytes, OptOrMand) ->
   'dec_PreRegistrationZoneIdHRPD'(Bytes, OptOrMand, []).

'dec_PreRegistrationZoneIdHRPD'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,255},TagIn++[], OptOrMand).



%%================================
%%  SecondaryPreRegistrationZoneIdListHRPD
%%================================

'enc_SecondaryPreRegistrationZoneIdListHRPD'({'SecondaryPreRegistrationZoneIdListHRPD',Val}, TagIn) ->
   'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val, TagIn);

'enc_SecondaryPreRegistrationZoneIdListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SecondaryPreRegistrationZoneIdListHRPD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SecondaryPreRegistrationZoneIdListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SecondaryPreRegistrationZoneIdListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_SecondaryPreRegistrationZoneIdListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SecondaryPreRegistrationZoneIdListHRPD'(Bytes, OptOrMand) ->
   'dec_SecondaryPreRegistrationZoneIdListHRPD'(Bytes, OptOrMand, []).

'dec_SecondaryPreRegistrationZoneIdListHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,255},[], mandatory)
end, [], []).




%%================================
%%  PreRegistrationInfoHRPD
%%================================
'enc_PreRegistrationInfoHRPD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,preRegistrationAllowed), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,preRegistrationZoneId) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,preRegistrationZoneId), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:SecondaryPreRegistrationZoneIdListHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,secondaryPreRegistrationZoneIdList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecondaryPreRegistrationZoneIdListHRPD'(?RT_BER:cindex(4,Val,secondaryPreRegistrationZoneIdList), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PreRegistrationInfoHRPD'(Bytes, OptOrMand) ->
   'dec_PreRegistrationInfoHRPD'(Bytes, OptOrMand, []).

'dec_PreRegistrationInfoHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,255},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:SecondaryPreRegistrationZoneIdListHRPD OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_SecondaryPreRegistrationZoneIdListHRPD'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'PreRegistrationInfoHRPD', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MCC-MNC-Digit
%%================================

'enc_MCC-MNC-Digit'({'MCC-MNC-Digit',Val}, TagIn) ->
   'enc_MCC-MNC-Digit'(Val, TagIn);

'enc_MCC-MNC-Digit'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_MCC-MNC-Digit'(Bytes, OptOrMand) ->
   'dec_MCC-MNC-Digit'(Bytes, OptOrMand, []).

'dec_MCC-MNC-Digit'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,9},TagIn++[], OptOrMand).



%%================================
%%  MNC
%%================================

'enc_MNC'({'MNC',Val}, TagIn) ->
   'enc_MNC'(Val, TagIn);

'enc_MNC'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MNC_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MNC_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MNC_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_MNC_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MNC'(Bytes, OptOrMand) ->
   'dec_MNC'(Bytes, OptOrMand, []).

'dec_MNC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,9},[], mandatory)
end, [], []).




%%================================
%%  MCC
%%================================

'enc_MCC'({'MCC',Val}, TagIn) ->
   'enc_MCC'(Val, TagIn);

'enc_MCC'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MCC_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MCC_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MCC_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_MCC_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MCC'(Bytes, OptOrMand) ->
   'dec_MCC'(Bytes, OptOrMand, []).

'dec_MCC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,9},[], mandatory)
end, [], []).




%%================================
%%  PLMN-Identity
%%================================
'enc_PLMN-Identity'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MCC OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,mcc) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MCC'(?RT_BER:cindex(2,Val,mcc), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MNC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MNC'(?RT_BER:cindex(3,Val,mnc), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PLMN-Identity'(Bytes, OptOrMand) ->
   'dec_PLMN-Identity'(Bytes, OptOrMand, []).

'dec_PLMN-Identity'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MCC OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_MCC'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MNC
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MNC'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PLMN-Identity', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PhysCellIdUTRA-TDD
%%================================

'enc_PhysCellIdUTRA-TDD'({'PhysCellIdUTRA-TDD',Val}, TagIn) ->
   'enc_PhysCellIdUTRA-TDD'(Val, TagIn);

'enc_PhysCellIdUTRA-TDD'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_PhysCellIdUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_PhysCellIdUTRA-TDD'(Bytes, OptOrMand, []).

'dec_PhysCellIdUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,127},TagIn++[], OptOrMand).



%%================================
%%  PhysCellIdUTRA-FDD
%%================================

'enc_PhysCellIdUTRA-FDD'({'PhysCellIdUTRA-FDD',Val}, TagIn) ->
   'enc_PhysCellIdUTRA-FDD'(Val, TagIn);

'enc_PhysCellIdUTRA-FDD'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_PhysCellIdUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_PhysCellIdUTRA-FDD'(Bytes, OptOrMand, []).

'dec_PhysCellIdUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,511},TagIn++[], OptOrMand).



%%================================
%%  PhysCellIdGERAN
%%================================
'enc_PhysCellIdGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',3}], ?RT_BER:cindex(2,Val,networkColourCode), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',3}], ?RT_BER:cindex(3,Val,baseStationColourCode), [], [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PhysCellIdGERAN'(Bytes, OptOrMand) ->
   'dec_PhysCellIdGERAN'(Bytes, OptOrMand, []).

'dec_PhysCellIdGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,3,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,3,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PhysCellIdGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PhysCellIdCDMA2000
%%================================

'enc_PhysCellIdCDMA2000'({'PhysCellIdCDMA2000',Val}, TagIn) ->
   'enc_PhysCellIdCDMA2000'(Val, TagIn);

'enc_PhysCellIdCDMA2000'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_PhysCellIdCDMA2000'(Bytes, OptOrMand) ->
   'dec_PhysCellIdCDMA2000'(Bytes, OptOrMand, []).

'dec_PhysCellIdCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,511},TagIn++[], OptOrMand).



%%================================
%%  PhysCellIdRange
%%================================
'enc_PhysCellIdRange'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,start), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,range) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,range) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,range) end) of
n4 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
n12 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
n24 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
n32 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
n48 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
n64 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
n84 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
n96 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
n128 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
n168 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
n252 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
n504 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PhysCellIdRange'(Bytes, OptOrMand) ->
   'dec_PhysCellIdRange'(Bytes, OptOrMand, []).

'dec_PhysCellIdRange'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,503},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{n4,0},{n8,1},{n12,2},{n16,3},{n24,4},{n32,5},{n48,6},{n64,7},{n84,8},{n96,9},{n128,10},{n168,11},{n252,12},{n504,13},{spare2,14},{spare1,15}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PhysCellIdRange', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PhysCellId
%%================================

'enc_PhysCellId'({'PhysCellId',Val}, TagIn) ->
   'enc_PhysCellId'(Val, TagIn);

'enc_PhysCellId'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_PhysCellId'(Bytes, OptOrMand) ->
   'dec_PhysCellId'(Bytes, OptOrMand, []).

'dec_PhysCellId'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,503},TagIn++[], OptOrMand).



%%================================
%%  MobilityStateParameters
%%================================
'enc_MobilityStateParameters'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'t-Evaluation') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'t-Evaluation') end) of
s30 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
s60 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
s120 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
s180 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
s240 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'t-HystNormal') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'t-HystNormal') end) of
s30 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
s60 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
s120 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
s180 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
s240 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'n-CellChangeMedium'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'n-CellChangeHigh'), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MobilityStateParameters'(Bytes, OptOrMand) ->
   'dec_MobilityStateParameters'(Bytes, OptOrMand, []).

'dec_MobilityStateParameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{s30,0},{s60,1},{s120,2},{s180,3},{s240,4},{spare3,5},{spare2,6},{spare1,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{s30,0},{s60,1},{s120,2},{s180,3},{s240,4},{spare3,5},{spare2,6},{spare1,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{1,16},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{1,16},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'MobilityStateParameters', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  MobilityParametersCDMA2000
%%================================

'enc_MobilityParametersCDMA2000'({'MobilityParametersCDMA2000',Val}, TagIn) ->
   'enc_MobilityParametersCDMA2000'(Val, TagIn);

'enc_MobilityParametersCDMA2000'(Val, TagIn) ->
?RT_BER:encode_octet_string([], Val, TagIn ++ []).


'dec_MobilityParametersCDMA2000'(Bytes, OptOrMand) ->
   'dec_MobilityParametersCDMA2000'(Bytes, OptOrMand, []).

'dec_MobilityParametersCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_octet_string(Bytes,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  CarrierFreqEUTRA
%%================================
'enc_CarrierFreqEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'dl-CarrierFreq'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'ul-CarrierFreq') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'ul-CarrierFreq'), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierFreqEUTRA'(Bytes, OptOrMand) ->
   'dec_CarrierFreqEUTRA'(Bytes, OptOrMand, []).

'dec_CarrierFreqEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,65535},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CarrierFreqEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CarrierBandwidthEUTRA
%%================================
'enc_CarrierBandwidthEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'dl-Bandwidth') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'dl-Bandwidth') end) of
n6 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n15 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n25 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n50 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n75 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n100 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'ul-Bandwidth') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,'ul-Bandwidth') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'ul-Bandwidth') end) of
n6 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
n15 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
n25 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
n50 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
n75 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
n100 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierBandwidthEUTRA'(Bytes, OptOrMand) ->
   'dec_CarrierBandwidthEUTRA'(Bytes, OptOrMand, []).

'dec_CarrierBandwidthEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n6,0},{n15,1},{n25,2},{n50,3},{n75,4},{n100,5},{spare10,6},{spare9,7},{spare8,8},{spare7,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{n6,0},{n15,1},{n25,2},{n50,3},{n75,4},{n100,5},{spare10,6},{spare9,7},{spare8,8},{spare7,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CarrierBandwidthEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  MobilityControlInfo
%%================================
'enc_MobilityControlInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,targetPhysCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,carrierFreq) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqEUTRA'(?RT_BER:cindex(3,Val,carrierFreq), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CarrierBandwidthEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,carrierBandwidth) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierBandwidthEUTRA'(?RT_BER:cindex(4,Val,carrierBandwidth), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,additionalSpectrumEmission) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,additionalSpectrumEmission), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case (case ?RT_BER:cindex(6,Val,t304) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(6,Val,t304) end) of
ms50 -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(2,[{tag,128,4,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(3,[{tag,128,4,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(4,[{tag,128,4,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(5,[{tag,128,4,'IMPLICIT',0}]);
ms2000 -> ?RT_BER:encode_enumerated(6,[{tag,128,4,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,4,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 6 with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(7,Val,'newUE-Identity'), [], [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:RadioResourceConfigCommon
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_RadioResourceConfigCommon'(?RT_BER:cindex(8,Val,radioResourceConfigCommon), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:RACH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,'rach-ConfigDedicated') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigDedicated'(?RT_BER:cindex(9,Val,'rach-ConfigDedicated'), [{tag,128,7,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MobilityControlInfo'(Bytes, OptOrMand) ->
   'dec_MobilityControlInfo'(Bytes, OptOrMand, []).

'dec_MobilityControlInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,503},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqEUTRA OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CarrierFreqEUTRA'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CarrierBandwidthEUTRA OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CarrierBandwidthEUTRA'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,{1,32},[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_enumerated(Bytes6,[],[{ms50,0},{ms100,1},{ms150,2},{ms200,3},{ms500,4},{ms1000,5},{ms2000,6},{spare1,7}],[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BIT STRING
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_bit_string(Bytes7,16,[],[{tag,128,5,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:RadioResourceConfigCommon
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = 'dec_RadioResourceConfigCommon'(Bytes8, mandatory, [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:RACH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_RACH-ConfigDedicated'(Bytes9, opt_or_default, [{tag,128,7,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

   {Bytes11,Rb10} = ?RT_BER:restbytes2(RemBytes, Bytes10,ext),
   {{'MobilityControlInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}, Bytes11, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10}.


%%================================
%%  CellGlobalIdCDMA2000
%%================================

'enc_CellGlobalIdCDMA2000'({'CellGlobalIdCDMA2000',Val}, TagIn) ->
   'enc_CellGlobalIdCDMA2000'(Val, TagIn);

'enc_CellGlobalIdCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      cellGlobalId1XRTT ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',47}], element(2,Val), [], [{tag,128,0,'IMPLICIT',0}]);
      cellGlobalIdHRPD ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',128}], element(2,Val), [], [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_CellGlobalIdCDMA2000'(Bytes, OptOrMand) ->
   'dec_CellGlobalIdCDMA2000'(Bytes, OptOrMand, []).

'dec_CellGlobalIdCDMA2000'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'cellGlobalId1XRTT'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,47,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{cellGlobalId1XRTT, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'cellGlobalIdHRPD'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,128,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{cellGlobalIdHRPD, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  CellGlobalIdGERAN
%%================================
'enc_CellGlobalIdGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(?RT_BER:cindex(2,Val,'plmn-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,locationAreaCode), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(4,Val,cellIdentity), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellGlobalIdGERAN'(Bytes, OptOrMand) ->
   'dec_CellGlobalIdGERAN'(Bytes, OptOrMand, []).

'dec_CellGlobalIdGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PLMN-Identity'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,16,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CellGlobalIdGERAN', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CellGlobalIdUTRA
%%================================
'enc_CellGlobalIdUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(?RT_BER:cindex(2,Val,'plmn-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',28}], ?RT_BER:cindex(3,Val,cellIdentity), [], [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellGlobalIdUTRA'(Bytes, OptOrMand) ->
   'dec_CellGlobalIdUTRA'(Bytes, OptOrMand, []).

'dec_CellGlobalIdUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PLMN-Identity'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,28,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellGlobalIdUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CellGlobalIdEUTRA
%%================================
'enc_CellGlobalIdEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(?RT_BER:cindex(2,Val,'plmn-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',28}], ?RT_BER:cindex(3,Val,cellIdentity), [], [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellGlobalIdEUTRA'(Bytes, OptOrMand) ->
   'dec_CellGlobalIdEUTRA'(Bytes, OptOrMand, []).

'dec_CellGlobalIdEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PLMN-Identity'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,28,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellGlobalIdEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CSFB-RegistrationParam1XRTT
%%================================
'enc_CSFB-RegistrationParam1XRTT'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',15}], ?RT_BER:cindex(2,Val,sid), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,nid), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,multipleSID), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,multipleNID), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,homeReg), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_boolean(?RT_BER:cindex(7,Val,foreignSIDReg), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_boolean(?RT_BER:cindex(8,Val,foreignNIDReg), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_boolean(?RT_BER:cindex(9,Val,parameterReg), [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_boolean(?RT_BER:cindex(10,Val,powerUpReg), [{tag,128,8,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 10 with type BIT STRING
%%-------------------------------------------------
   {EncBytes10,EncLen10} = ?RT_BER:encode_bit_string([{'SizeConstraint',7}], ?RT_BER:cindex(11,Val,registrationPeriod), [], [{tag,128,9,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 11 with type BIT STRING
%%-------------------------------------------------
   {EncBytes11,EncLen11} = ?RT_BER:encode_bit_string([{'SizeConstraint',12}], ?RT_BER:cindex(12,Val,registrationZone), [], [{tag,128,10,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 12 with type BIT STRING
%%-------------------------------------------------
   {EncBytes12,EncLen12} = ?RT_BER:encode_bit_string([{'SizeConstraint',3}], ?RT_BER:cindex(13,Val,totalZone), [], [{tag,128,11,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 13 with type BIT STRING
%%-------------------------------------------------
   {EncBytes13,EncLen13} = ?RT_BER:encode_bit_string([{'SizeConstraint',3}], ?RT_BER:cindex(14,Val,zoneTimer), [], [{tag,128,12,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CSFB-RegistrationParam1XRTT'(Bytes, OptOrMand) ->
   'dec_CSFB-RegistrationParam1XRTT'(Bytes, OptOrMand, []).

'dec_CSFB-RegistrationParam1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,15,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_boolean(Bytes7,[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_boolean(Bytes8,[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_boolean(Bytes9,[{tag,128,7,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_boolean(Bytes10,[{tag,128,8,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 10 with type BIT STRING
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = ?RT_BER:decode_bit_string(Bytes11,7,[],[{tag,128,9,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 11 with type BIT STRING
%%-------------------------------------------------
   {Term11,Bytes13,Rb12} = ?RT_BER:decode_bit_string(Bytes12,12,[],[{tag,128,10,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 12 with type BIT STRING
%%-------------------------------------------------
   {Term12,Bytes14,Rb13} = ?RT_BER:decode_bit_string(Bytes13,3,[],[{tag,128,11,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 13 with type BIT STRING
%%-------------------------------------------------
   {Term13,Bytes15,Rb14} = ?RT_BER:decode_bit_string(Bytes14,3,[],[{tag,128,12,'IMPLICIT',0}], no_length, mandatory),

   {Bytes16,Rb15} = ?RT_BER:restbytes2(RemBytes, Bytes15,noext),
   {{'CSFB-RegistrationParam1XRTT', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13}, Bytes16, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12+Rb13+Rb14+Rb15}.


%%================================
%%  CellReselectionPriority
%%================================

'enc_CellReselectionPriority'({'CellReselectionPriority',Val}, TagIn) ->
   'enc_CellReselectionPriority'(Val, TagIn);

'enc_CellReselectionPriority'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_CellReselectionPriority'(Bytes, OptOrMand) ->
   'dec_CellReselectionPriority'(Bytes, OptOrMand, []).

'dec_CellReselectionPriority'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,7},TagIn++[], OptOrMand).



%%================================
%%  CellIndex
%%================================

'enc_CellIndex'({'CellIndex',Val}, TagIn) ->
   'enc_CellIndex'(Val, TagIn);

'enc_CellIndex'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_CellIndex'(Bytes, OptOrMand) ->
   'dec_CellIndex'(Bytes, OptOrMand, []).

'dec_CellIndex'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  CellIndexList
%%================================

'enc_CellIndexList'({'CellIndexList',Val}, TagIn) ->
   'enc_CellIndexList'(Val, TagIn);

'enc_CellIndexList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellIndexList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CellIndexList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellIndexList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_CellIndexList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CellIndexList'(Bytes, OptOrMand) ->
   'dec_CellIndexList'(Bytes, OptOrMand, []).

'dec_CellIndexList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{1,32},[], mandatory)
end, [], []).




%%================================
%%  CellIdentity
%%================================

'enc_CellIdentity'({'CellIdentity',Val}, TagIn) ->
   'enc_CellIdentity'(Val, TagIn);

'enc_CellIdentity'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',28}], Val, [], TagIn ++ []).


'dec_CellIdentity'(Bytes, OptOrMand) ->
   'dec_CellIdentity'(Bytes, OptOrMand, []).

'dec_CellIdentity'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,28,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  CDMA2000-Type
%%================================

'enc_CDMA2000-Type'({'CDMA2000-Type',Val}, TagIn) ->
   'enc_CDMA2000-Type'(Val, TagIn);

'enc_CDMA2000-Type'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
type1XRTT -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
typeHRPD -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_CDMA2000-Type'(Bytes, OptOrMand) ->
   'dec_CDMA2000-Type'(Bytes, OptOrMand, []).

'dec_CDMA2000-Type'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{type1XRTT,0},{typeHRPD,1}],TagIn++[], OptOrMand).



%%================================
%%  ExplicitListOfARFCNs
%%================================

'enc_ExplicitListOfARFCNs'({'ExplicitListOfARFCNs',Val}, TagIn) ->
   'enc_ExplicitListOfARFCNs'(Val, TagIn);

'enc_ExplicitListOfARFCNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ExplicitListOfARFCNs_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_ExplicitListOfARFCNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ExplicitListOfARFCNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_ExplicitListOfARFCNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ExplicitListOfARFCNs'(Bytes, OptOrMand) ->
   'dec_ExplicitListOfARFCNs'(Bytes, OptOrMand, []).

'dec_ExplicitListOfARFCNs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,1023},[], mandatory)
end, [], []).




%%================================
%%  CarrierFreqsGERAN
%%================================
'enc_CarrierFreqsGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,startingARFCN), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,bandIndicator) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,bandIndicator) end) of
dcs1800 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
pcs1900 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_CarrierFreqsGERAN_followingARFCNs'(?RT_BER:cindex(4,Val,followingARFCNs), [{tag,128,2,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CarrierFreqsGERAN_followingARFCNs
%%================================

'enc_CarrierFreqsGERAN_followingARFCNs'({'CarrierFreqsGERAN_followingARFCNs',Val}, TagIn) ->
   'enc_CarrierFreqsGERAN_followingARFCNs'(Val, TagIn);

'enc_CarrierFreqsGERAN_followingARFCNs'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitListOfARFCNs ->
         'enc_ExplicitListOfARFCNs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      equallySpacedARFCNs ->
         'enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      variableBitMapOfARFCNs ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs
%%================================
'enc_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'arfcn-Spacing'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,numberOfFollowingARFCNs), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,8},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,31},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_CarrierFreqsGERAN_followingARFCNs'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'explicitListOfARFCNs'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ExplicitListOfARFCNs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{explicitListOfARFCNs, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'equallySpacedARFCNs'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CarrierFreqsGERAN_followingARFCNs_equallySpacedARFCNs'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{equallySpacedARFCNs, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'variableBitMapOfARFCNs'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,{1,16},[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),
         {{variableBitMapOfARFCNs, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_CarrierFreqsGERAN'(Bytes, OptOrMand) ->
   'dec_CarrierFreqsGERAN'(Bytes, OptOrMand, []).

'dec_CarrierFreqsGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,1023},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{dcs1800,0},{pcs1900,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_CarrierFreqsGERAN_followingARFCNs'(Bytes4, mandatory, [{tag,128,2,'EXPLICIT',32}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CarrierFreqsGERAN', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CarrierFreqGERAN
%%================================
'enc_CarrierFreqGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,arfcn), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,bandIndicator) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,bandIndicator) end) of
dcs1800 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
pcs1900 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierFreqGERAN'(Bytes, OptOrMand) ->
   'dec_CarrierFreqGERAN'(Bytes, OptOrMand, []).

'dec_CarrierFreqGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,1023},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{dcs1800,0},{pcs1900,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CarrierFreqGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CarrierFreqCDMA2000
%%================================
'enc_CarrierFreqCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,bandClass) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,bandClass) end) of
bc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
bc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
bc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
bc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
bc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
bc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
bc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
bc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
bc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
bc16 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
bc17 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
spare14 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
spare13 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
spare12 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
spare11 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,arfcn), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierFreqCDMA2000'(Bytes, OptOrMand) ->
   'dec_CarrierFreqCDMA2000'(Bytes, OptOrMand, []).

'dec_CarrierFreqCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,2047},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CarrierFreqCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BandIndicatorGERAN
%%================================

'enc_BandIndicatorGERAN'({'BandIndicatorGERAN',Val}, TagIn) ->
   'enc_BandIndicatorGERAN'(Val, TagIn);

'enc_BandIndicatorGERAN'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
dcs1800 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
pcs1900 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_BandIndicatorGERAN'(Bytes, OptOrMand) ->
   'dec_BandIndicatorGERAN'(Bytes, OptOrMand, []).

'dec_BandIndicatorGERAN'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{dcs1800,0},{pcs1900,1}],TagIn++[], OptOrMand).



%%================================
%%  BandclassCDMA2000
%%================================

'enc_BandclassCDMA2000'({'BandclassCDMA2000',Val}, TagIn) ->
   'enc_BandclassCDMA2000'(Val, TagIn);

'enc_BandclassCDMA2000'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
bc0 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
bc1 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
bc2 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
bc3 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
bc4 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
bc5 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
bc6 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
bc7 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
bc8 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
bc9 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
bc10 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
bc11 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
bc12 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
bc13 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
bc14 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
bc15 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
bc16 -> ?RT_BER:encode_enumerated(16,TagIn ++ []);
bc17 -> ?RT_BER:encode_enumerated(17,TagIn ++ []);
spare14 -> ?RT_BER:encode_enumerated(18,TagIn ++ []);
spare13 -> ?RT_BER:encode_enumerated(19,TagIn ++ []);
spare12 -> ?RT_BER:encode_enumerated(20,TagIn ++ []);
spare11 -> ?RT_BER:encode_enumerated(21,TagIn ++ []);
spare10 -> ?RT_BER:encode_enumerated(22,TagIn ++ []);
spare9 -> ?RT_BER:encode_enumerated(23,TagIn ++ []);
spare8 -> ?RT_BER:encode_enumerated(24,TagIn ++ []);
spare7 -> ?RT_BER:encode_enumerated(25,TagIn ++ []);
spare6 -> ?RT_BER:encode_enumerated(26,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(27,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(28,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(29,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(30,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(31,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_BandclassCDMA2000'(Bytes, OptOrMand) ->
   'dec_BandclassCDMA2000'(Bytes, OptOrMand, []).

'dec_BandclassCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},TagIn++[], OptOrMand).



%%================================
%%  ARFCN-ValueUTRA
%%================================

'enc_ARFCN-ValueUTRA'({'ARFCN-ValueUTRA',Val}, TagIn) ->
   'enc_ARFCN-ValueUTRA'(Val, TagIn);

'enc_ARFCN-ValueUTRA'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ARFCN-ValueUTRA'(Bytes, OptOrMand) ->
   'dec_ARFCN-ValueUTRA'(Bytes, OptOrMand, []).

'dec_ARFCN-ValueUTRA'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,16383},TagIn++[], OptOrMand).



%%================================
%%  ARFCN-ValueGERAN
%%================================

'enc_ARFCN-ValueGERAN'({'ARFCN-ValueGERAN',Val}, TagIn) ->
   'enc_ARFCN-ValueGERAN'(Val, TagIn);

'enc_ARFCN-ValueGERAN'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ARFCN-ValueGERAN'(Bytes, OptOrMand) ->
   'dec_ARFCN-ValueGERAN'(Bytes, OptOrMand, []).

'dec_ARFCN-ValueGERAN'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,1023},TagIn++[], OptOrMand).



%%================================
%%  ARFCN-ValueEUTRA
%%================================

'enc_ARFCN-ValueEUTRA'({'ARFCN-ValueEUTRA',Val}, TagIn) ->
   'enc_ARFCN-ValueEUTRA'(Val, TagIn);

'enc_ARFCN-ValueEUTRA'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ARFCN-ValueEUTRA'(Bytes, OptOrMand) ->
   'dec_ARFCN-ValueEUTRA'(Bytes, OptOrMand, []).

'dec_ARFCN-ValueEUTRA'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,65535},TagIn++[], OptOrMand).



%%================================
%%  ARFCN-ValueCDMA2000
%%================================

'enc_ARFCN-ValueCDMA2000'({'ARFCN-ValueCDMA2000',Val}, TagIn) ->
   'enc_ARFCN-ValueCDMA2000'(Val, TagIn);

'enc_ARFCN-ValueCDMA2000'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_ARFCN-ValueCDMA2000'(Bytes, OptOrMand) ->
   'dec_ARFCN-ValueCDMA2000'(Bytes, OptOrMand, []).

'dec_ARFCN-ValueCDMA2000'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,2047},TagIn++[], OptOrMand).



%%================================
%%  AdditionalSpectrumEmission
%%================================

'enc_AdditionalSpectrumEmission'({'AdditionalSpectrumEmission',Val}, TagIn) ->
   'enc_AdditionalSpectrumEmission'(Val, TagIn);

'enc_AdditionalSpectrumEmission'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_AdditionalSpectrumEmission'(Bytes, OptOrMand) ->
   'dec_AdditionalSpectrumEmission'(Bytes, OptOrMand, []).

'dec_AdditionalSpectrumEmission'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  ShortMAC-I
%%================================

'enc_ShortMAC-I'({'ShortMAC-I',Val}, TagIn) ->
   'enc_ShortMAC-I'(Val, TagIn);

'enc_ShortMAC-I'(Val, TagIn) ->
?RT_BER:encode_bit_string([{'SizeConstraint',16}], Val, [], TagIn ++ []).


'dec_ShortMAC-I'(Bytes, OptOrMand) ->
   'dec_ShortMAC-I'(Bytes, OptOrMand, []).

'dec_ShortMAC-I'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_bit_string(Bytes,16,[],TagIn++[], no_length, OptOrMand).



%%================================
%%  SecurityAlgorithmConfig
%%================================
'enc_SecurityAlgorithmConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,cipheringAlgorithm) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,cipheringAlgorithm) end) of
eea0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
eea1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
eea2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,integrityProtAlgorithm) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,integrityProtAlgorithm) end) of
reserved -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
eia1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
eia2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SecurityAlgorithmConfig'(Bytes, OptOrMand) ->
   'dec_SecurityAlgorithmConfig'(Bytes, OptOrMand, []).

'dec_SecurityAlgorithmConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{eea0,0},{eea1,1},{eea2,2},{spare5,3},{spare4,4},{spare3,5},{spare2,6},{spare1,7}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],{[{reserved,0},{eia1,1},{eia2,2},{spare5,3},{spare4,4},{spare3,5},{spare2,6},{spare1,7}],[]},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityAlgorithmConfig', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  NextHopChainingCount
%%================================

'enc_NextHopChainingCount'({'NextHopChainingCount',Val}, TagIn) ->
   'enc_NextHopChainingCount'(Val, TagIn);

'enc_NextHopChainingCount'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_NextHopChainingCount'(Bytes, OptOrMand) ->
   'dec_NextHopChainingCount'(Bytes, OptOrMand, []).

'dec_NextHopChainingCount'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,7},TagIn++[], OptOrMand).



%%================================
%%  DeltaFList-PUCCH
%%================================
'enc_DeltaFList-PUCCH'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'deltaF-PUCCH-Format1') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'deltaF-PUCCH-Format1') end) of
'deltaF-2' -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
deltaF0 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
deltaF2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'deltaF-PUCCH-Format1b') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'deltaF-PUCCH-Format1b') end) of
deltaF1 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
deltaF3 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
deltaF5 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'deltaF-PUCCH-Format2') of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,'deltaF-PUCCH-Format2') end) of
'deltaF-2' -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
deltaF0 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
deltaF1 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
deltaF2 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,'deltaF-PUCCH-Format2a') of {_,Enumval7}->Enumval7;_->?RT_BER:cindex(5,Val,'deltaF-PUCCH-Format2a') end) of
'deltaF-2' -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
deltaF0 -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
deltaF2 -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',0}]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case (case ?RT_BER:cindex(6,Val,'deltaF-PUCCH-Format2b') of {_,Enumval9}->Enumval9;_->?RT_BER:cindex(6,Val,'deltaF-PUCCH-Format2b') end) of
'deltaF-2' -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
deltaF0 -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
deltaF2 -> ?RT_BER:encode_enumerated(2,[{tag,128,4,'IMPLICIT',0}]);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DeltaFList-PUCCH'(Bytes, OptOrMand) ->
   'dec_DeltaFList-PUCCH'(Bytes, OptOrMand, []).

'dec_DeltaFList-PUCCH'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{'deltaF-2',0},{deltaF0,1},{deltaF2,2}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{deltaF1,0},{deltaF3,1},{deltaF5,2}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{'deltaF-2',0},{deltaF0,1},{deltaF1,2},{deltaF2,3}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{'deltaF-2',0},{deltaF0,1},{deltaF2,2}],[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_enumerated(Bytes6,[],[{'deltaF-2',0},{deltaF0,1},{deltaF2,2}],[{tag,128,4,'IMPLICIT',0}], mandatory),

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'DeltaFList-PUCCH', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  UplinkPowerControlDedicated
%%================================
'enc_UplinkPowerControlDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'p0-UE-PUSCH'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'deltaMCS-Enabled') of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,'deltaMCS-Enabled') end) of
en0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
en1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,accumulationEnabled), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'p0-UE-PUCCH'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,'pSRS-Offset'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,filterCoefficient) of
         asn1_DEFAULT -> {<<>>,0};
         fc4 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(7,Val,filterCoefficient) of {_,Enumval7}->Enumval7;_->?RT_BER:cindex(7,Val,filterCoefficient) end) of
fc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',0}]);
fc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',0}]);
fc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',0}]);
fc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,5,'IMPLICIT',0}]);
fc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,5,'IMPLICIT',0}]);
fc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,5,'IMPLICIT',0}]);
fc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,5,'IMPLICIT',0}]);
fc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,5,'IMPLICIT',0}]);
fc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,5,'IMPLICIT',0}]);
fc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,5,'IMPLICIT',0}]);
fc11 -> ?RT_BER:encode_enumerated(10,[{tag,128,5,'IMPLICIT',0}]);
fc13 -> ?RT_BER:encode_enumerated(11,[{tag,128,5,'IMPLICIT',0}]);
fc15 -> ?RT_BER:encode_enumerated(12,[{tag,128,5,'IMPLICIT',0}]);
fc17 -> ?RT_BER:encode_enumerated(13,[{tag,128,5,'IMPLICIT',0}]);
fc19 -> ?RT_BER:encode_enumerated(14,[{tag,128,5,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,5,'IMPLICIT',0}]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UplinkPowerControlDedicated'(Bytes, OptOrMand) ->
   'dec_UplinkPowerControlDedicated'(Bytes, OptOrMand, []).

'dec_UplinkPowerControlDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-8,7},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{en0,0},{en1,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{-8,7},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{0,15},[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED DEFAULT = fc4
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes7,[],{[{fc0,0},{fc1,1},{fc2,2},{fc3,3},{fc4,4},{fc5,5},{fc6,6},{fc7,7},{fc8,8},{fc9,9},{fc11,10},{fc13,11},{fc15,12},{fc17,13},{fc19,14},{spare1,15}],[]},[{tag,128,5,'IMPLICIT',0}], mandatory);
_ ->
{fc4,Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'UplinkPowerControlDedicated', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  UplinkPowerControlCommon
%%================================
'enc_UplinkPowerControlCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'p0-NominalPUSCH'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,alpha) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,alpha) end) of
al0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
al04 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
al05 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
al06 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
al07 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
al08 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
al09 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
al1 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'p0-NominalPUCCH'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:DeltaFList-PUCCH
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DeltaFList-PUCCH'(?RT_BER:cindex(5,Val,'deltaFList-PUCCH'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,deltaPreambleMsg3), [{tag,128,4,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UplinkPowerControlCommon'(Bytes, OptOrMand) ->
   'dec_UplinkPowerControlCommon'(Bytes, OptOrMand, []).

'dec_UplinkPowerControlCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-126,24},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{al0,0},{al04,1},{al05,2},{al06,3},{al07,4},{al08,5},{al09,6},{al1,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{-127,-96},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:DeltaFList-PUCCH
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_DeltaFList-PUCCH'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{-1,6},[{tag,128,4,'IMPLICIT',0}], mandatory),

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'UplinkPowerControlCommon', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


%%================================
%%  TPC-Index
%%================================

'enc_TPC-Index'({'TPC-Index',Val}, TagIn) ->
   'enc_TPC-Index'(Val, TagIn);

'enc_TPC-Index'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      indexOfFormat3 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      indexOfFormat3A ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_TPC-Index'(Bytes, OptOrMand) ->
   'dec_TPC-Index'(Bytes, OptOrMand, []).

'dec_TPC-Index'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'indexOfFormat3'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{1,15},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{indexOfFormat3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'indexOfFormat3A'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{1,31},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{indexOfFormat3A, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  TPC-PDCCH-Config
%%================================

'enc_TPC-PDCCH-Config'({'TPC-PDCCH-Config',Val}, TagIn) ->
   'enc_TPC-PDCCH-Config'(Val, TagIn);

'enc_TPC-PDCCH-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_TPC-PDCCH-Config_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  TPC-PDCCH-Config_setup
%%================================
'enc_TPC-PDCCH-Config_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(2,Val,'tpc-RNTI'), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:TPC-Index
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_TPC-Index'(?RT_BER:cindex(3,Val,'tpc-Index'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_TPC-PDCCH-Config_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,16,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:TPC-Index
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_TPC-Index'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'TPC-PDCCH-Config_setup', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


'dec_TPC-PDCCH-Config'(Bytes, OptOrMand) ->
   'dec_TPC-PDCCH-Config'(Bytes, OptOrMand, []).

'dec_TPC-PDCCH-Config'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_TPC-PDCCH-Config_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  TimeAlignmentTimer
%%================================

'enc_TimeAlignmentTimer'({'TimeAlignmentTimer',Val}, TagIn) ->
   'enc_TimeAlignmentTimer'(Val, TagIn);

'enc_TimeAlignmentTimer'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
sf500 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
sf750 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
sf1280 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
sf1920 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
sf2560 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
sf5120 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
sf10240 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
infinity -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_TimeAlignmentTimer'(Bytes, OptOrMand) ->
   'dec_TimeAlignmentTimer'(Bytes, OptOrMand, []).

'dec_TimeAlignmentTimer'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{sf500,0},{sf750,1},{sf1280,2},{sf1920,3},{sf2560,4},{sf5120,5},{sf10240,6},{infinity,7}],TagIn++[], OptOrMand).



%%================================
%%  TDD-Config
%%================================
'enc_TDD-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,subframeAssignment) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,subframeAssignment) end) of
sa0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
sa1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
sa2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
sa3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
sa4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
sa5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
sa6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,specialSubframePatterns) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,specialSubframePatterns) end) of
ssp0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
ssp1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
ssp2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
ssp3 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
ssp4 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
ssp5 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
ssp6 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
ssp7 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
ssp8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_TDD-Config'(Bytes, OptOrMand) ->
   'dec_TDD-Config'(Bytes, OptOrMand, []).

'dec_TDD-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{sa0,0},{sa1,1},{sa2,2},{sa3,3},{sa4,4},{sa5,5},{sa6,6}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{ssp0,0},{ssp1,1},{ssp2,2},{ssp3,3},{ssp4,4},{ssp5,5},{ssp6,6},{ssp7,7},{ssp8,8}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'TDD-Config', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  N1-PUCCH-AN-PersistentList
%%================================

'enc_N1-PUCCH-AN-PersistentList'({'N1-PUCCH-AN-PersistentList',Val}, TagIn) ->
   'enc_N1-PUCCH-AN-PersistentList'(Val, TagIn);

'enc_N1-PUCCH-AN-PersistentList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_N1-PUCCH-AN-PersistentList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_N1-PUCCH-AN-PersistentList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_N1-PUCCH-AN-PersistentList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_N1-PUCCH-AN-PersistentList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_N1-PUCCH-AN-PersistentList'(Bytes, OptOrMand) ->
   'dec_N1-PUCCH-AN-PersistentList'(Bytes, OptOrMand, []).

'dec_N1-PUCCH-AN-PersistentList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,2047},[], mandatory)
end, [], []).




%%================================
%%  SPS-ConfigUL
%%================================

'enc_SPS-ConfigUL'({'SPS-ConfigUL',Val}, TagIn) ->
   'enc_SPS-ConfigUL'(Val, TagIn);

'enc_SPS-ConfigUL'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_SPS-ConfigUL_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SPS-ConfigUL_setup
%%================================
'enc_SPS-ConfigUL_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,semiPersistSchedIntervalUL) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,semiPersistSchedIntervalUL) end) of
sf10 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
sf32 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
sf40 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
sf64 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
sf80 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
sf128 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
sf160 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
sf320 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
sf640 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,implicitReleaseAfter) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,implicitReleaseAfter) end) of
e2 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
e3 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
e4 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
e8 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'p0-Persistent') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigUL_setup_p0-Persistent'(?RT_BER:cindex(4,Val,'p0-Persistent'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,twoIntervalsConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(5,Val,twoIntervalsConfig) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(5,Val,twoIntervalsConfig) end) of
true -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SPS-ConfigUL_setup_p0-Persistent
%%================================
'enc_SPS-ConfigUL_setup_p0-Persistent'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'p0-NominalPUSCH-Persistent'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'p0-UE-PUSCH-Persistent'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SPS-ConfigUL_setup_p0-Persistent'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-126,24},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{-8,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SPS-ConfigUL_setup_p0-Persistent', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_SPS-ConfigUL_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{sf10,0},{sf20,1},{sf32,2},{sf40,3},{sf64,4},{sf80,5},{sf128,6},{sf160,7},{sf320,8},{sf640,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{e2,0},{e3,1},{e4,2},{e8,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_SPS-ConfigUL_setup_p0-Persistent'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes5,[],[{true,0}],[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'SPS-ConfigUL_setup', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


'dec_SPS-ConfigUL'(Bytes, OptOrMand) ->
   'dec_SPS-ConfigUL'(Bytes, OptOrMand, []).

'dec_SPS-ConfigUL'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SPS-ConfigUL_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  SPS-ConfigDL
%%================================

'enc_SPS-ConfigDL'({'SPS-ConfigDL',Val}, TagIn) ->
   'enc_SPS-ConfigDL'(Val, TagIn);

'enc_SPS-ConfigDL'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_SPS-ConfigDL_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SPS-ConfigDL_setup
%%================================
'enc_SPS-ConfigDL_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,semiPersistSchedIntervalDL) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,semiPersistSchedIntervalDL) end) of
sf10 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
sf32 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
sf40 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
sf64 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
sf80 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
sf128 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
sf160 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
sf320 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
sf640 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'numberOfConfSPS-Processes'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:N1-PUCCH-AN-PersistentList
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_N1-PUCCH-AN-PersistentList'(?RT_BER:cindex(4,Val,'n1-PUCCH-AN-PersistentList'), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SPS-ConfigDL_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{sf10,0},{sf20,1},{sf32,2},{sf40,3},{sf64,4},{sf80,5},{sf128,6},{sf160,7},{sf320,8},{sf640,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,8},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:N1-PUCCH-AN-PersistentList
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_N1-PUCCH-AN-PersistentList'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'SPS-ConfigDL_setup', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


'dec_SPS-ConfigDL'(Bytes, OptOrMand) ->
   'dec_SPS-ConfigDL'(Bytes, OptOrMand, []).

'dec_SPS-ConfigDL'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SPS-ConfigDL_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  SPS-Config
%%================================
'enc_SPS-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'semiPersistSchedC-RNTI') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(2,Val,'semiPersistSchedC-RNTI'), [], [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SPS-ConfigDL OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'sps-ConfigDL') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigDL'(?RT_BER:cindex(3,Val,'sps-ConfigDL'), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:SPS-ConfigUL OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'sps-ConfigUL') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-ConfigUL'(?RT_BER:cindex(4,Val,'sps-ConfigUL'), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SPS-Config'(Bytes, OptOrMand) ->
   'dec_SPS-Config'(Bytes, OptOrMand, []).

'dec_SPS-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes2,16,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SPS-ConfigDL OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SPS-ConfigDL'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:SPS-ConfigUL OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_SPS-ConfigUL'(Bytes4, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SPS-Config', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SoundingRS-UL-ConfigDedicated
%%================================

'enc_SoundingRS-UL-ConfigDedicated'({'SoundingRS-UL-ConfigDedicated',Val}, TagIn) ->
   'enc_SoundingRS-UL-ConfigDedicated'(Val, TagIn);

'enc_SoundingRS-UL-ConfigDedicated'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_SoundingRS-UL-ConfigDedicated_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SoundingRS-UL-ConfigDedicated_setup
%%================================
'enc_SoundingRS-UL-ConfigDedicated_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'srs-Bandwidth') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'srs-Bandwidth') end) of
bw0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bw1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bw2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bw3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'srs-HoppingBandwidth') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'srs-HoppingBandwidth') end) of
hbw0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
hbw1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
hbw2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
hbw3 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,freqDomainPosition), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,duration), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,'srs-ConfigIndex'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,transmissionComb), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case (case ?RT_BER:cindex(8,Val,cyclicShift) of {_,Enumval9}->Enumval9;_->?RT_BER:cindex(8,Val,cyclicShift) end) of
cs0 -> ?RT_BER:encode_enumerated(0,[{tag,128,6,'IMPLICIT',0}]);
cs1 -> ?RT_BER:encode_enumerated(1,[{tag,128,6,'IMPLICIT',0}]);
cs2 -> ?RT_BER:encode_enumerated(2,[{tag,128,6,'IMPLICIT',0}]);
cs3 -> ?RT_BER:encode_enumerated(3,[{tag,128,6,'IMPLICIT',0}]);
cs4 -> ?RT_BER:encode_enumerated(4,[{tag,128,6,'IMPLICIT',0}]);
cs5 -> ?RT_BER:encode_enumerated(5,[{tag,128,6,'IMPLICIT',0}]);
cs6 -> ?RT_BER:encode_enumerated(6,[{tag,128,6,'IMPLICIT',0}]);
cs7 -> ?RT_BER:encode_enumerated(7,[{tag,128,6,'IMPLICIT',0}]);
Enumval10 -> exit({error,{asn1, {enumerated_not_in_range,Enumval10}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SoundingRS-UL-ConfigDedicated_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{bw0,0},{bw1,1},{bw2,2},{bw3,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{hbw0,0},{hbw1,1},{hbw2,2},{hbw3,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,23},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{0,1023},[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,{0,1},[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_enumerated(Bytes8,[],[{cs0,0},{cs1,1},{cs2,2},{cs3,3},{cs4,4},{cs5,5},{cs6,6},{cs7,7}],[{tag,128,6,'IMPLICIT',0}], mandatory),

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,noext),
   {{'SoundingRS-UL-ConfigDedicated_setup', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


'dec_SoundingRS-UL-ConfigDedicated'(Bytes, OptOrMand) ->
   'dec_SoundingRS-UL-ConfigDedicated'(Bytes, OptOrMand, []).

'dec_SoundingRS-UL-ConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SoundingRS-UL-ConfigDedicated_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  SoundingRS-UL-ConfigCommon
%%================================

'enc_SoundingRS-UL-ConfigCommon'({'SoundingRS-UL-ConfigCommon',Val}, TagIn) ->
   'enc_SoundingRS-UL-ConfigCommon'(Val, TagIn);

'enc_SoundingRS-UL-ConfigCommon'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_SoundingRS-UL-ConfigCommon_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SoundingRS-UL-ConfigCommon_setup
%%================================
'enc_SoundingRS-UL-ConfigCommon_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'srs-BandwidthConfig') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'srs-BandwidthConfig') end) of
bw0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bw1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bw2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bw3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bw4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bw5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bw6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bw7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'srs-SubframeConfig') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'srs-SubframeConfig') end) of
sc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
sc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
sc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
sc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
sc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
sc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
sc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
sc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
sc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
sc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
sc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
sc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
sc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
sc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
sc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
sc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,'ackNackSRS-SimultaneousTransmission'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'srs-MaxUpPts') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(5,Val,'srs-MaxUpPts') of {_,Enumval6}->Enumval6;_->?RT_BER:cindex(5,Val,'srs-MaxUpPts') end) of
true -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
Enumval7 -> exit({error,{asn1, {enumerated_not_in_range,Enumval7}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SoundingRS-UL-ConfigCommon_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{bw0,0},{bw1,1},{bw2,2},{bw3,3},{bw4,4},{bw5,5},{bw6,6},{bw7,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{sc0,0},{sc1,1},{sc2,2},{sc3,3},{sc4,4},{sc5,5},{sc6,6},{sc7,7},{sc8,8},{sc9,9},{sc10,10},{sc11,11},{sc12,12},{sc13,13},{sc14,14},{sc15,15}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes5,[],[{true,0}],[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'SoundingRS-UL-ConfigCommon_setup', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


'dec_SoundingRS-UL-ConfigCommon'(Bytes, OptOrMand) ->
   'dec_SoundingRS-UL-ConfigCommon'(Bytes, OptOrMand, []).

'dec_SoundingRS-UL-ConfigCommon'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SoundingRS-UL-ConfigCommon_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  SchedulingRequestConfig
%%================================

'enc_SchedulingRequestConfig'({'SchedulingRequestConfig',Val}, TagIn) ->
   'enc_SchedulingRequestConfig'(Val, TagIn);

'enc_SchedulingRequestConfig'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_SchedulingRequestConfig_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SchedulingRequestConfig_setup
%%================================
'enc_SchedulingRequestConfig_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'sr-PUCCH-ResourceIndex'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'sr-ConfigIndex'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'dsr-TransMax') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,'dsr-TransMax') end) of
n4 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
n32 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
n64 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SchedulingRequestConfig_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,2047},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,155},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{n4,0},{n8,1},{n16,2},{n32,3},{n64,4},{spare3,5},{spare2,6},{spare1,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SchedulingRequestConfig_setup', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


'dec_SchedulingRequestConfig'(Bytes, OptOrMand) ->
   'dec_SchedulingRequestConfig'(Bytes, OptOrMand, []).

'dec_SchedulingRequestConfig'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SchedulingRequestConfig_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  T-StatusProhibit
%%================================

'enc_T-StatusProhibit'({'T-StatusProhibit',Val}, TagIn) ->
   'enc_T-StatusProhibit'(Val, TagIn);

'enc_T-StatusProhibit'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
ms0 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
ms5 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
ms10 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
ms15 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
ms20 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
ms25 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
ms30 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
ms35 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
ms40 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
ms45 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
ms50 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
ms55 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
ms60 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
ms65 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
ms70 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
ms75 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
ms80 -> ?RT_BER:encode_enumerated(16,TagIn ++ []);
ms85 -> ?RT_BER:encode_enumerated(17,TagIn ++ []);
ms90 -> ?RT_BER:encode_enumerated(18,TagIn ++ []);
ms95 -> ?RT_BER:encode_enumerated(19,TagIn ++ []);
ms100 -> ?RT_BER:encode_enumerated(20,TagIn ++ []);
ms105 -> ?RT_BER:encode_enumerated(21,TagIn ++ []);
ms110 -> ?RT_BER:encode_enumerated(22,TagIn ++ []);
ms115 -> ?RT_BER:encode_enumerated(23,TagIn ++ []);
ms120 -> ?RT_BER:encode_enumerated(24,TagIn ++ []);
ms125 -> ?RT_BER:encode_enumerated(25,TagIn ++ []);
ms130 -> ?RT_BER:encode_enumerated(26,TagIn ++ []);
ms135 -> ?RT_BER:encode_enumerated(27,TagIn ++ []);
ms140 -> ?RT_BER:encode_enumerated(28,TagIn ++ []);
ms145 -> ?RT_BER:encode_enumerated(29,TagIn ++ []);
ms150 -> ?RT_BER:encode_enumerated(30,TagIn ++ []);
ms155 -> ?RT_BER:encode_enumerated(31,TagIn ++ []);
ms160 -> ?RT_BER:encode_enumerated(32,TagIn ++ []);
ms165 -> ?RT_BER:encode_enumerated(33,TagIn ++ []);
ms170 -> ?RT_BER:encode_enumerated(34,TagIn ++ []);
ms175 -> ?RT_BER:encode_enumerated(35,TagIn ++ []);
ms180 -> ?RT_BER:encode_enumerated(36,TagIn ++ []);
ms185 -> ?RT_BER:encode_enumerated(37,TagIn ++ []);
ms190 -> ?RT_BER:encode_enumerated(38,TagIn ++ []);
ms195 -> ?RT_BER:encode_enumerated(39,TagIn ++ []);
ms200 -> ?RT_BER:encode_enumerated(40,TagIn ++ []);
ms205 -> ?RT_BER:encode_enumerated(41,TagIn ++ []);
ms210 -> ?RT_BER:encode_enumerated(42,TagIn ++ []);
ms215 -> ?RT_BER:encode_enumerated(43,TagIn ++ []);
ms220 -> ?RT_BER:encode_enumerated(44,TagIn ++ []);
ms225 -> ?RT_BER:encode_enumerated(45,TagIn ++ []);
ms230 -> ?RT_BER:encode_enumerated(46,TagIn ++ []);
ms235 -> ?RT_BER:encode_enumerated(47,TagIn ++ []);
ms240 -> ?RT_BER:encode_enumerated(48,TagIn ++ []);
ms245 -> ?RT_BER:encode_enumerated(49,TagIn ++ []);
ms250 -> ?RT_BER:encode_enumerated(50,TagIn ++ []);
ms300 -> ?RT_BER:encode_enumerated(51,TagIn ++ []);
ms350 -> ?RT_BER:encode_enumerated(52,TagIn ++ []);
ms400 -> ?RT_BER:encode_enumerated(53,TagIn ++ []);
ms450 -> ?RT_BER:encode_enumerated(54,TagIn ++ []);
ms500 -> ?RT_BER:encode_enumerated(55,TagIn ++ []);
spare8 -> ?RT_BER:encode_enumerated(56,TagIn ++ []);
spare7 -> ?RT_BER:encode_enumerated(57,TagIn ++ []);
spare6 -> ?RT_BER:encode_enumerated(58,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(59,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(60,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(61,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(62,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(63,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_T-StatusProhibit'(Bytes, OptOrMand) ->
   'dec_T-StatusProhibit'(Bytes, OptOrMand, []).

'dec_T-StatusProhibit'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{ms0,0},{ms5,1},{ms10,2},{ms15,3},{ms20,4},{ms25,5},{ms30,6},{ms35,7},{ms40,8},{ms45,9},{ms50,10},{ms55,11},{ms60,12},{ms65,13},{ms70,14},{ms75,15},{ms80,16},{ms85,17},{ms90,18},{ms95,19},{ms100,20},{ms105,21},{ms110,22},{ms115,23},{ms120,24},{ms125,25},{ms130,26},{ms135,27},{ms140,28},{ms145,29},{ms150,30},{ms155,31},{ms160,32},{ms165,33},{ms170,34},{ms175,35},{ms180,36},{ms185,37},{ms190,38},{ms195,39},{ms200,40},{ms205,41},{ms210,42},{ms215,43},{ms220,44},{ms225,45},{ms230,46},{ms235,47},{ms240,48},{ms245,49},{ms250,50},{ms300,51},{ms350,52},{ms400,53},{ms450,54},{ms500,55},{spare8,56},{spare7,57},{spare6,58},{spare5,59},{spare4,60},{spare3,61},{spare2,62},{spare1,63}],TagIn++[], OptOrMand).



%%================================
%%  T-Reordering
%%================================

'enc_T-Reordering'({'T-Reordering',Val}, TagIn) ->
   'enc_T-Reordering'(Val, TagIn);

'enc_T-Reordering'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
ms0 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
ms5 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
ms10 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
ms15 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
ms20 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
ms25 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
ms30 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
ms35 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
ms40 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
ms45 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
ms50 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
ms55 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
ms60 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
ms65 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
ms70 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
ms75 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
ms80 -> ?RT_BER:encode_enumerated(16,TagIn ++ []);
ms85 -> ?RT_BER:encode_enumerated(17,TagIn ++ []);
ms90 -> ?RT_BER:encode_enumerated(18,TagIn ++ []);
ms95 -> ?RT_BER:encode_enumerated(19,TagIn ++ []);
ms100 -> ?RT_BER:encode_enumerated(20,TagIn ++ []);
ms110 -> ?RT_BER:encode_enumerated(21,TagIn ++ []);
ms120 -> ?RT_BER:encode_enumerated(22,TagIn ++ []);
ms130 -> ?RT_BER:encode_enumerated(23,TagIn ++ []);
ms140 -> ?RT_BER:encode_enumerated(24,TagIn ++ []);
ms150 -> ?RT_BER:encode_enumerated(25,TagIn ++ []);
ms160 -> ?RT_BER:encode_enumerated(26,TagIn ++ []);
ms170 -> ?RT_BER:encode_enumerated(27,TagIn ++ []);
ms180 -> ?RT_BER:encode_enumerated(28,TagIn ++ []);
ms190 -> ?RT_BER:encode_enumerated(29,TagIn ++ []);
ms200 -> ?RT_BER:encode_enumerated(30,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(31,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_T-Reordering'(Bytes, OptOrMand) ->
   'dec_T-Reordering'(Bytes, OptOrMand, []).

'dec_T-Reordering'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{ms0,0},{ms5,1},{ms10,2},{ms15,3},{ms20,4},{ms25,5},{ms30,6},{ms35,7},{ms40,8},{ms45,9},{ms50,10},{ms55,11},{ms60,12},{ms65,13},{ms70,14},{ms75,15},{ms80,16},{ms85,17},{ms90,18},{ms95,19},{ms100,20},{ms110,21},{ms120,22},{ms130,23},{ms140,24},{ms150,25},{ms160,26},{ms170,27},{ms180,28},{ms190,29},{ms200,30},{spare1,31}],TagIn++[], OptOrMand).



%%================================
%%  PollByte
%%================================

'enc_PollByte'({'PollByte',Val}, TagIn) ->
   'enc_PollByte'(Val, TagIn);

'enc_PollByte'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
kB25 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
kB50 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
kB75 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
kB100 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
kB125 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
kB250 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
kB375 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
kB500 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
kB750 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
kB1000 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
kB1250 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
kB1500 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
kB2000 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
kB3000 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
kBinfinity -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_PollByte'(Bytes, OptOrMand) ->
   'dec_PollByte'(Bytes, OptOrMand, []).

'dec_PollByte'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{kB25,0},{kB50,1},{kB75,2},{kB100,3},{kB125,4},{kB250,5},{kB375,6},{kB500,7},{kB750,8},{kB1000,9},{kB1250,10},{kB1500,11},{kB2000,12},{kB3000,13},{kBinfinity,14},{spare1,15}],TagIn++[], OptOrMand).



%%================================
%%  PollPDU
%%================================

'enc_PollPDU'({'PollPDU',Val}, TagIn) ->
   'enc_PollPDU'(Val, TagIn);

'enc_PollPDU'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
p4 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
p8 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
p16 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
p32 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
p64 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
p128 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
p256 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
pInfinity -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_PollPDU'(Bytes, OptOrMand) ->
   'dec_PollPDU'(Bytes, OptOrMand, []).

'dec_PollPDU'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{p4,0},{p8,1},{p16,2},{p32,3},{p64,4},{p128,5},{p256,6},{pInfinity,7}],TagIn++[], OptOrMand).



%%================================
%%  T-PollRetransmit
%%================================

'enc_T-PollRetransmit'({'T-PollRetransmit',Val}, TagIn) ->
   'enc_T-PollRetransmit'(Val, TagIn);

'enc_T-PollRetransmit'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
ms5 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
ms10 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
ms15 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
ms20 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
ms25 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
ms30 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
ms35 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
ms40 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
ms45 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
ms50 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
ms55 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
ms60 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
ms65 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
ms70 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
ms75 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
ms80 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
ms85 -> ?RT_BER:encode_enumerated(16,TagIn ++ []);
ms90 -> ?RT_BER:encode_enumerated(17,TagIn ++ []);
ms95 -> ?RT_BER:encode_enumerated(18,TagIn ++ []);
ms100 -> ?RT_BER:encode_enumerated(19,TagIn ++ []);
ms105 -> ?RT_BER:encode_enumerated(20,TagIn ++ []);
ms110 -> ?RT_BER:encode_enumerated(21,TagIn ++ []);
ms115 -> ?RT_BER:encode_enumerated(22,TagIn ++ []);
ms120 -> ?RT_BER:encode_enumerated(23,TagIn ++ []);
ms125 -> ?RT_BER:encode_enumerated(24,TagIn ++ []);
ms130 -> ?RT_BER:encode_enumerated(25,TagIn ++ []);
ms135 -> ?RT_BER:encode_enumerated(26,TagIn ++ []);
ms140 -> ?RT_BER:encode_enumerated(27,TagIn ++ []);
ms145 -> ?RT_BER:encode_enumerated(28,TagIn ++ []);
ms150 -> ?RT_BER:encode_enumerated(29,TagIn ++ []);
ms155 -> ?RT_BER:encode_enumerated(30,TagIn ++ []);
ms160 -> ?RT_BER:encode_enumerated(31,TagIn ++ []);
ms165 -> ?RT_BER:encode_enumerated(32,TagIn ++ []);
ms170 -> ?RT_BER:encode_enumerated(33,TagIn ++ []);
ms175 -> ?RT_BER:encode_enumerated(34,TagIn ++ []);
ms180 -> ?RT_BER:encode_enumerated(35,TagIn ++ []);
ms185 -> ?RT_BER:encode_enumerated(36,TagIn ++ []);
ms190 -> ?RT_BER:encode_enumerated(37,TagIn ++ []);
ms195 -> ?RT_BER:encode_enumerated(38,TagIn ++ []);
ms200 -> ?RT_BER:encode_enumerated(39,TagIn ++ []);
ms205 -> ?RT_BER:encode_enumerated(40,TagIn ++ []);
ms210 -> ?RT_BER:encode_enumerated(41,TagIn ++ []);
ms215 -> ?RT_BER:encode_enumerated(42,TagIn ++ []);
ms220 -> ?RT_BER:encode_enumerated(43,TagIn ++ []);
ms225 -> ?RT_BER:encode_enumerated(44,TagIn ++ []);
ms230 -> ?RT_BER:encode_enumerated(45,TagIn ++ []);
ms235 -> ?RT_BER:encode_enumerated(46,TagIn ++ []);
ms240 -> ?RT_BER:encode_enumerated(47,TagIn ++ []);
ms245 -> ?RT_BER:encode_enumerated(48,TagIn ++ []);
ms250 -> ?RT_BER:encode_enumerated(49,TagIn ++ []);
ms300 -> ?RT_BER:encode_enumerated(50,TagIn ++ []);
ms350 -> ?RT_BER:encode_enumerated(51,TagIn ++ []);
ms400 -> ?RT_BER:encode_enumerated(52,TagIn ++ []);
ms450 -> ?RT_BER:encode_enumerated(53,TagIn ++ []);
ms500 -> ?RT_BER:encode_enumerated(54,TagIn ++ []);
spare9 -> ?RT_BER:encode_enumerated(55,TagIn ++ []);
spare8 -> ?RT_BER:encode_enumerated(56,TagIn ++ []);
spare7 -> ?RT_BER:encode_enumerated(57,TagIn ++ []);
spare6 -> ?RT_BER:encode_enumerated(58,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(59,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(60,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(61,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(62,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(63,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_T-PollRetransmit'(Bytes, OptOrMand) ->
   'dec_T-PollRetransmit'(Bytes, OptOrMand, []).

'dec_T-PollRetransmit'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{ms5,0},{ms10,1},{ms15,2},{ms20,3},{ms25,4},{ms30,5},{ms35,6},{ms40,7},{ms45,8},{ms50,9},{ms55,10},{ms60,11},{ms65,12},{ms70,13},{ms75,14},{ms80,15},{ms85,16},{ms90,17},{ms95,18},{ms100,19},{ms105,20},{ms110,21},{ms115,22},{ms120,23},{ms125,24},{ms130,25},{ms135,26},{ms140,27},{ms145,28},{ms150,29},{ms155,30},{ms160,31},{ms165,32},{ms170,33},{ms175,34},{ms180,35},{ms185,36},{ms190,37},{ms195,38},{ms200,39},{ms205,40},{ms210,41},{ms215,42},{ms220,43},{ms225,44},{ms230,45},{ms235,46},{ms240,47},{ms245,48},{ms250,49},{ms300,50},{ms350,51},{ms400,52},{ms450,53},{ms500,54},{spare9,55},{spare8,56},{spare7,57},{spare6,58},{spare5,59},{spare4,60},{spare3,61},{spare2,62},{spare1,63}],TagIn++[], OptOrMand).



%%================================
%%  SN-FieldLength
%%================================

'enc_SN-FieldLength'({'SN-FieldLength',Val}, TagIn) ->
   'enc_SN-FieldLength'(Val, TagIn);

'enc_SN-FieldLength'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
size5 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
size10 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SN-FieldLength'(Bytes, OptOrMand) ->
   'dec_SN-FieldLength'(Bytes, OptOrMand, []).

'dec_SN-FieldLength'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{size5,0},{size10,1}],TagIn++[], OptOrMand).



%%================================
%%  DL-UM-RLC
%%================================
'enc_DL-UM-RLC'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'sn-FieldLength') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'sn-FieldLength') end) of
size5 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
size10 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'t-Reordering') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'t-Reordering') end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
ms5 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
ms10 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
ms15 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
ms20 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
ms25 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
ms30 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
ms35 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
ms45 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
ms50 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
ms55 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
ms60 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
ms65 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
ms70 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
ms75 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(16,[{tag,128,1,'IMPLICIT',0}]);
ms85 -> ?RT_BER:encode_enumerated(17,[{tag,128,1,'IMPLICIT',0}]);
ms90 -> ?RT_BER:encode_enumerated(18,[{tag,128,1,'IMPLICIT',0}]);
ms95 -> ?RT_BER:encode_enumerated(19,[{tag,128,1,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(20,[{tag,128,1,'IMPLICIT',0}]);
ms110 -> ?RT_BER:encode_enumerated(21,[{tag,128,1,'IMPLICIT',0}]);
ms120 -> ?RT_BER:encode_enumerated(22,[{tag,128,1,'IMPLICIT',0}]);
ms130 -> ?RT_BER:encode_enumerated(23,[{tag,128,1,'IMPLICIT',0}]);
ms140 -> ?RT_BER:encode_enumerated(24,[{tag,128,1,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(25,[{tag,128,1,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(26,[{tag,128,1,'IMPLICIT',0}]);
ms170 -> ?RT_BER:encode_enumerated(27,[{tag,128,1,'IMPLICIT',0}]);
ms180 -> ?RT_BER:encode_enumerated(28,[{tag,128,1,'IMPLICIT',0}]);
ms190 -> ?RT_BER:encode_enumerated(29,[{tag,128,1,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(30,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DL-UM-RLC'(Bytes, OptOrMand) ->
   'dec_DL-UM-RLC'(Bytes, OptOrMand, []).

'dec_DL-UM-RLC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{size5,0},{size10,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{ms0,0},{ms5,1},{ms10,2},{ms15,3},{ms20,4},{ms25,5},{ms30,6},{ms35,7},{ms40,8},{ms45,9},{ms50,10},{ms55,11},{ms60,12},{ms65,13},{ms70,14},{ms75,15},{ms80,16},{ms85,17},{ms90,18},{ms95,19},{ms100,20},{ms110,21},{ms120,22},{ms130,23},{ms140,24},{ms150,25},{ms160,26},{ms170,27},{ms180,28},{ms190,29},{ms200,30},{spare1,31}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'DL-UM-RLC', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UL-UM-RLC
%%================================
'enc_UL-UM-RLC'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'sn-FieldLength') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'sn-FieldLength') end) of
size5 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
size10 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UL-UM-RLC'(Bytes, OptOrMand) ->
   'dec_UL-UM-RLC'(Bytes, OptOrMand, []).

'dec_UL-UM-RLC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{size5,0},{size10,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'UL-UM-RLC', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  DL-AM-RLC
%%================================
'enc_DL-AM-RLC'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'t-Reordering') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'t-Reordering') end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ms5 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ms10 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
ms15 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
ms20 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
ms25 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
ms30 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
ms35 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
ms45 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
ms50 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
ms55 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
ms60 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
ms65 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
ms70 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
ms75 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
ms85 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
ms90 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
ms95 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
ms110 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
ms120 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
ms130 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
ms140 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
ms170 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
ms180 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
ms190 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'t-StatusProhibit') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'t-StatusProhibit') end) of
ms0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
ms5 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
ms10 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
ms15 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
ms20 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
ms25 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
ms30 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
ms35 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
ms45 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
ms50 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
ms55 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
ms60 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
ms65 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
ms70 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
ms75 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(16,[{tag,128,1,'IMPLICIT',0}]);
ms85 -> ?RT_BER:encode_enumerated(17,[{tag,128,1,'IMPLICIT',0}]);
ms90 -> ?RT_BER:encode_enumerated(18,[{tag,128,1,'IMPLICIT',0}]);
ms95 -> ?RT_BER:encode_enumerated(19,[{tag,128,1,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(20,[{tag,128,1,'IMPLICIT',0}]);
ms105 -> ?RT_BER:encode_enumerated(21,[{tag,128,1,'IMPLICIT',0}]);
ms110 -> ?RT_BER:encode_enumerated(22,[{tag,128,1,'IMPLICIT',0}]);
ms115 -> ?RT_BER:encode_enumerated(23,[{tag,128,1,'IMPLICIT',0}]);
ms120 -> ?RT_BER:encode_enumerated(24,[{tag,128,1,'IMPLICIT',0}]);
ms125 -> ?RT_BER:encode_enumerated(25,[{tag,128,1,'IMPLICIT',0}]);
ms130 -> ?RT_BER:encode_enumerated(26,[{tag,128,1,'IMPLICIT',0}]);
ms135 -> ?RT_BER:encode_enumerated(27,[{tag,128,1,'IMPLICIT',0}]);
ms140 -> ?RT_BER:encode_enumerated(28,[{tag,128,1,'IMPLICIT',0}]);
ms145 -> ?RT_BER:encode_enumerated(29,[{tag,128,1,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(30,[{tag,128,1,'IMPLICIT',0}]);
ms155 -> ?RT_BER:encode_enumerated(31,[{tag,128,1,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(32,[{tag,128,1,'IMPLICIT',0}]);
ms165 -> ?RT_BER:encode_enumerated(33,[{tag,128,1,'IMPLICIT',0}]);
ms170 -> ?RT_BER:encode_enumerated(34,[{tag,128,1,'IMPLICIT',0}]);
ms175 -> ?RT_BER:encode_enumerated(35,[{tag,128,1,'IMPLICIT',0}]);
ms180 -> ?RT_BER:encode_enumerated(36,[{tag,128,1,'IMPLICIT',0}]);
ms185 -> ?RT_BER:encode_enumerated(37,[{tag,128,1,'IMPLICIT',0}]);
ms190 -> ?RT_BER:encode_enumerated(38,[{tag,128,1,'IMPLICIT',0}]);
ms195 -> ?RT_BER:encode_enumerated(39,[{tag,128,1,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(40,[{tag,128,1,'IMPLICIT',0}]);
ms205 -> ?RT_BER:encode_enumerated(41,[{tag,128,1,'IMPLICIT',0}]);
ms210 -> ?RT_BER:encode_enumerated(42,[{tag,128,1,'IMPLICIT',0}]);
ms215 -> ?RT_BER:encode_enumerated(43,[{tag,128,1,'IMPLICIT',0}]);
ms220 -> ?RT_BER:encode_enumerated(44,[{tag,128,1,'IMPLICIT',0}]);
ms225 -> ?RT_BER:encode_enumerated(45,[{tag,128,1,'IMPLICIT',0}]);
ms230 -> ?RT_BER:encode_enumerated(46,[{tag,128,1,'IMPLICIT',0}]);
ms235 -> ?RT_BER:encode_enumerated(47,[{tag,128,1,'IMPLICIT',0}]);
ms240 -> ?RT_BER:encode_enumerated(48,[{tag,128,1,'IMPLICIT',0}]);
ms245 -> ?RT_BER:encode_enumerated(49,[{tag,128,1,'IMPLICIT',0}]);
ms250 -> ?RT_BER:encode_enumerated(50,[{tag,128,1,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(51,[{tag,128,1,'IMPLICIT',0}]);
ms350 -> ?RT_BER:encode_enumerated(52,[{tag,128,1,'IMPLICIT',0}]);
ms400 -> ?RT_BER:encode_enumerated(53,[{tag,128,1,'IMPLICIT',0}]);
ms450 -> ?RT_BER:encode_enumerated(54,[{tag,128,1,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(55,[{tag,128,1,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(56,[{tag,128,1,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(57,[{tag,128,1,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(58,[{tag,128,1,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(59,[{tag,128,1,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(60,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(61,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(62,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(63,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DL-AM-RLC'(Bytes, OptOrMand) ->
   'dec_DL-AM-RLC'(Bytes, OptOrMand, []).

'dec_DL-AM-RLC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{ms0,0},{ms5,1},{ms10,2},{ms15,3},{ms20,4},{ms25,5},{ms30,6},{ms35,7},{ms40,8},{ms45,9},{ms50,10},{ms55,11},{ms60,12},{ms65,13},{ms70,14},{ms75,15},{ms80,16},{ms85,17},{ms90,18},{ms95,19},{ms100,20},{ms110,21},{ms120,22},{ms130,23},{ms140,24},{ms150,25},{ms160,26},{ms170,27},{ms180,28},{ms190,29},{ms200,30},{spare1,31}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{ms0,0},{ms5,1},{ms10,2},{ms15,3},{ms20,4},{ms25,5},{ms30,6},{ms35,7},{ms40,8},{ms45,9},{ms50,10},{ms55,11},{ms60,12},{ms65,13},{ms70,14},{ms75,15},{ms80,16},{ms85,17},{ms90,18},{ms95,19},{ms100,20},{ms105,21},{ms110,22},{ms115,23},{ms120,24},{ms125,25},{ms130,26},{ms135,27},{ms140,28},{ms145,29},{ms150,30},{ms155,31},{ms160,32},{ms165,33},{ms170,34},{ms175,35},{ms180,36},{ms185,37},{ms190,38},{ms195,39},{ms200,40},{ms205,41},{ms210,42},{ms215,43},{ms220,44},{ms225,45},{ms230,46},{ms235,47},{ms240,48},{ms245,49},{ms250,50},{ms300,51},{ms350,52},{ms400,53},{ms450,54},{ms500,55},{spare8,56},{spare7,57},{spare6,58},{spare5,59},{spare4,60},{spare3,61},{spare2,62},{spare1,63}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'DL-AM-RLC', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UL-AM-RLC
%%================================
'enc_UL-AM-RLC'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'t-PollRetransmit') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'t-PollRetransmit') end) of
ms5 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ms10 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ms15 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
ms20 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
ms25 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
ms30 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
ms35 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
ms45 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
ms50 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
ms55 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
ms60 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
ms65 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
ms70 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
ms75 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
ms80 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
ms85 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
ms90 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
ms95 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
ms105 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
ms110 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
ms115 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
ms120 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
ms125 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
ms130 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
ms135 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
ms140 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
ms145 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
ms155 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
ms160 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
ms165 -> ?RT_BER:encode_enumerated(32,[{tag,128,0,'IMPLICIT',0}]);
ms170 -> ?RT_BER:encode_enumerated(33,[{tag,128,0,'IMPLICIT',0}]);
ms175 -> ?RT_BER:encode_enumerated(34,[{tag,128,0,'IMPLICIT',0}]);
ms180 -> ?RT_BER:encode_enumerated(35,[{tag,128,0,'IMPLICIT',0}]);
ms185 -> ?RT_BER:encode_enumerated(36,[{tag,128,0,'IMPLICIT',0}]);
ms190 -> ?RT_BER:encode_enumerated(37,[{tag,128,0,'IMPLICIT',0}]);
ms195 -> ?RT_BER:encode_enumerated(38,[{tag,128,0,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(39,[{tag,128,0,'IMPLICIT',0}]);
ms205 -> ?RT_BER:encode_enumerated(40,[{tag,128,0,'IMPLICIT',0}]);
ms210 -> ?RT_BER:encode_enumerated(41,[{tag,128,0,'IMPLICIT',0}]);
ms215 -> ?RT_BER:encode_enumerated(42,[{tag,128,0,'IMPLICIT',0}]);
ms220 -> ?RT_BER:encode_enumerated(43,[{tag,128,0,'IMPLICIT',0}]);
ms225 -> ?RT_BER:encode_enumerated(44,[{tag,128,0,'IMPLICIT',0}]);
ms230 -> ?RT_BER:encode_enumerated(45,[{tag,128,0,'IMPLICIT',0}]);
ms235 -> ?RT_BER:encode_enumerated(46,[{tag,128,0,'IMPLICIT',0}]);
ms240 -> ?RT_BER:encode_enumerated(47,[{tag,128,0,'IMPLICIT',0}]);
ms245 -> ?RT_BER:encode_enumerated(48,[{tag,128,0,'IMPLICIT',0}]);
ms250 -> ?RT_BER:encode_enumerated(49,[{tag,128,0,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(50,[{tag,128,0,'IMPLICIT',0}]);
ms350 -> ?RT_BER:encode_enumerated(51,[{tag,128,0,'IMPLICIT',0}]);
ms400 -> ?RT_BER:encode_enumerated(52,[{tag,128,0,'IMPLICIT',0}]);
ms450 -> ?RT_BER:encode_enumerated(53,[{tag,128,0,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(54,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(55,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(56,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(57,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(58,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(59,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(60,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(61,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(62,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(63,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,pollPDU) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,pollPDU) end) of
p4 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
p8 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
p16 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
p32 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
p64 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
p128 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
p256 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
pInfinity -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,pollByte) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,pollByte) end) of
kB25 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
kB50 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
kB75 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
kB100 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
kB125 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
kB250 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
kB375 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
kB500 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
kB750 -> ?RT_BER:encode_enumerated(8,[{tag,128,2,'IMPLICIT',0}]);
kB1000 -> ?RT_BER:encode_enumerated(9,[{tag,128,2,'IMPLICIT',0}]);
kB1250 -> ?RT_BER:encode_enumerated(10,[{tag,128,2,'IMPLICIT',0}]);
kB1500 -> ?RT_BER:encode_enumerated(11,[{tag,128,2,'IMPLICIT',0}]);
kB2000 -> ?RT_BER:encode_enumerated(12,[{tag,128,2,'IMPLICIT',0}]);
kB3000 -> ?RT_BER:encode_enumerated(13,[{tag,128,2,'IMPLICIT',0}]);
kBinfinity -> ?RT_BER:encode_enumerated(14,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,maxRetxThreshold) of {_,Enumval7}->Enumval7;_->?RT_BER:cindex(5,Val,maxRetxThreshold) end) of
t1 -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
t2 -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
t3 -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',0}]);
t4 -> ?RT_BER:encode_enumerated(3,[{tag,128,3,'IMPLICIT',0}]);
t6 -> ?RT_BER:encode_enumerated(4,[{tag,128,3,'IMPLICIT',0}]);
t8 -> ?RT_BER:encode_enumerated(5,[{tag,128,3,'IMPLICIT',0}]);
t16 -> ?RT_BER:encode_enumerated(6,[{tag,128,3,'IMPLICIT',0}]);
t32 -> ?RT_BER:encode_enumerated(7,[{tag,128,3,'IMPLICIT',0}]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UL-AM-RLC'(Bytes, OptOrMand) ->
   'dec_UL-AM-RLC'(Bytes, OptOrMand, []).

'dec_UL-AM-RLC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{ms5,0},{ms10,1},{ms15,2},{ms20,3},{ms25,4},{ms30,5},{ms35,6},{ms40,7},{ms45,8},{ms50,9},{ms55,10},{ms60,11},{ms65,12},{ms70,13},{ms75,14},{ms80,15},{ms85,16},{ms90,17},{ms95,18},{ms100,19},{ms105,20},{ms110,21},{ms115,22},{ms120,23},{ms125,24},{ms130,25},{ms135,26},{ms140,27},{ms145,28},{ms150,29},{ms155,30},{ms160,31},{ms165,32},{ms170,33},{ms175,34},{ms180,35},{ms185,36},{ms190,37},{ms195,38},{ms200,39},{ms205,40},{ms210,41},{ms215,42},{ms220,43},{ms225,44},{ms230,45},{ms235,46},{ms240,47},{ms245,48},{ms250,49},{ms300,50},{ms350,51},{ms400,52},{ms450,53},{ms500,54},{spare9,55},{spare8,56},{spare7,57},{spare6,58},{spare5,59},{spare4,60},{spare3,61},{spare2,62},{spare1,63}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{p4,0},{p8,1},{p16,2},{p32,3},{p64,4},{p128,5},{p256,6},{pInfinity,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{kB25,0},{kB50,1},{kB75,2},{kB100,3},{kB125,4},{kB250,5},{kB375,6},{kB500,7},{kB750,8},{kB1000,9},{kB1250,10},{kB1500,11},{kB2000,12},{kB3000,13},{kBinfinity,14},{spare1,15}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{t1,0},{t2,1},{t3,2},{t4,3},{t6,4},{t8,5},{t16,6},{t32,7}],[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'UL-AM-RLC', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  RLC-Config
%%================================

'enc_RLC-Config'({'RLC-Config',Val}, TagIn) ->
   'enc_RLC-Config'(Val, TagIn);

'enc_RLC-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      am ->
         'enc_RLC-Config_am'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'um-Bi-Directional' ->
         'enc_RLC-Config_um-Bi-Directional'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'um-Uni-Directional-UL' ->
         'enc_RLC-Config_um-Uni-Directional-UL'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      'um-Uni-Directional-DL' ->
         'enc_RLC-Config_um-Uni-Directional-DL'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RLC-Config_am
%%================================
'enc_RLC-Config_am'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-AM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-AM-RLC'(?RT_BER:cindex(2,Val,'ul-AM-RLC'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DL-AM-RLC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DL-AM-RLC'(?RT_BER:cindex(3,Val,'dl-AM-RLC'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RLC-Config_am'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-AM-RLC
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UL-AM-RLC'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DL-AM-RLC
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_DL-AM-RLC'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RLC-Config_am', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  RLC-Config_um-Bi-Directional
%%================================
'enc_RLC-Config_um-Bi-Directional'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-UM-RLC'(?RT_BER:cindex(2,Val,'ul-UM-RLC'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DL-UM-RLC'(?RT_BER:cindex(3,Val,'dl-UM-RLC'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Bi-Directional'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UL-UM-RLC'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_DL-UM-RLC'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RLC-Config_um-Bi-Directional', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  RLC-Config_um-Uni-Directional-UL
%%================================
'enc_RLC-Config_um-Uni-Directional-UL'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-UM-RLC'(?RT_BER:cindex(2,Val,'ul-UM-RLC'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Uni-Directional-UL'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-UM-RLC
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UL-UM-RLC'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RLC-Config_um-Uni-Directional-UL', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  RLC-Config_um-Uni-Directional-DL
%%================================
'enc_RLC-Config_um-Uni-Directional-DL'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-UM-RLC'(?RT_BER:cindex(2,Val,'dl-UM-RLC'), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RLC-Config_um-Uni-Directional-DL'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-UM-RLC
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DL-UM-RLC'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RLC-Config_um-Uni-Directional-DL', Term1}, Bytes4, Rb1+Rb2+Rb3}.


'dec_RLC-Config'(Bytes, OptOrMand) ->
   'dec_RLC-Config'(Bytes, OptOrMand, []).

'dec_RLC-Config'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'am'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RLC-Config_am'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{am, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'um-Bi-Directional'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RLC-Config_um-Bi-Directional'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{'um-Bi-Directional', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'um-Uni-Directional-UL'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RLC-Config_um-Uni-Directional-UL'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{'um-Uni-Directional-UL', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'um-Uni-Directional-DL'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RLC-Config_um-Uni-Directional-DL'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{'um-Uni-Directional-DL', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


%%================================
%%  DRB-ToReleaseList
%%================================

'enc_DRB-ToReleaseList'({'DRB-ToReleaseList',Val}, TagIn) ->
   'enc_DRB-ToReleaseList'(Val, TagIn);

'enc_DRB-ToReleaseList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-ToReleaseList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_DRB-ToReleaseList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-ToReleaseList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_DRB-ToReleaseList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-ToReleaseList'(Bytes, OptOrMand) ->
   'dec_DRB-ToReleaseList'(Bytes, OptOrMand, []).

'dec_DRB-ToReleaseList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{1,32},[], mandatory)
end, [], []).




%%================================
%%  DRB-ToAddMod
%%================================
'enc_DRB-ToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'eps-BearerIdentity') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'eps-BearerIdentity'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'drb-Identity'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDCP-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'pdcp-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config'(?RT_BER:cindex(4,Val,'pdcp-Config'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:RLC-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'rlc-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RLC-Config'(?RT_BER:cindex(5,Val,'rlc-Config'), [{tag,128,3,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,logicalChannelIdentity) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,logicalChannelIdentity), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:LogicalChannelConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,logicalChannelConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LogicalChannelConfig'(?RT_BER:cindex(7,Val,logicalChannelConfig), [{tag,128,5,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DRB-ToAddMod'(Bytes, OptOrMand) ->
   'dec_DRB-ToAddMod'(Bytes, OptOrMand, []).

'dec_DRB-ToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,15},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,32},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDCP-Config OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PDCP-Config'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:RLC-Config OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_RLC-Config'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
?RT_BER:decode_integer(Bytes6,{3,10},[{tag,128,4,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:LogicalChannelConfig OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_LogicalChannelConfig'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'DRB-ToAddMod', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  DRB-ToAddModList
%%================================

'enc_DRB-ToAddModList'({'DRB-ToAddModList',Val}, TagIn) ->
   'enc_DRB-ToAddModList'(Val, TagIn);

'enc_DRB-ToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-ToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_DRB-ToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-ToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-ToAddMod'(H, []),
   'enc_DRB-ToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-ToAddModList'(Bytes, OptOrMand) ->
   'dec_DRB-ToAddModList'(Bytes, OptOrMand, []).

'dec_DRB-ToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DRB-ToAddMod'/3, [], []).




%%================================
%%  SRB-ToAddMod
%%================================
'enc_SRB-ToAddMod'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'srb-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'rlc-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddMod_rlc-Config'(?RT_BER:cindex(3,Val,'rlc-Config'), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,logicalChannelConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddMod_logicalChannelConfig'(?RT_BER:cindex(4,Val,logicalChannelConfig), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SRB-ToAddMod_rlc-Config
%%================================

'enc_SRB-ToAddMod_rlc-Config'({'SRB-ToAddMod_rlc-Config',Val}, TagIn) ->
   'enc_SRB-ToAddMod_rlc-Config'(Val, TagIn);

'enc_SRB-ToAddMod_rlc-Config'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_RLC-Config'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      defaultValue ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SRB-ToAddMod_rlc-Config'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'explicitValue'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RLC-Config'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{explicitValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'defaultValue'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{defaultValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  SRB-ToAddMod_logicalChannelConfig
%%================================

'enc_SRB-ToAddMod_logicalChannelConfig'({'SRB-ToAddMod_logicalChannelConfig',Val}, TagIn) ->
   'enc_SRB-ToAddMod_logicalChannelConfig'(Val, TagIn);

'enc_SRB-ToAddMod_logicalChannelConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_LogicalChannelConfig'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      defaultValue ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SRB-ToAddMod_logicalChannelConfig'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'explicitValue'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_LogicalChannelConfig'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{explicitValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'defaultValue'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{defaultValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SRB-ToAddMod'(Bytes, OptOrMand) ->
   'dec_SRB-ToAddMod'(Bytes, OptOrMand, []).

'dec_SRB-ToAddMod'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,2},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SRB-ToAddMod_rlc-Config'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_SRB-ToAddMod_logicalChannelConfig'(Bytes4, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'SRB-ToAddMod', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SRB-ToAddModList
%%================================

'enc_SRB-ToAddModList'({'SRB-ToAddModList',Val}, TagIn) ->
   'enc_SRB-ToAddModList'(Val, TagIn);

'enc_SRB-ToAddModList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SRB-ToAddModList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SRB-ToAddModList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SRB-ToAddModList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SRB-ToAddMod'(H, []),
   'enc_SRB-ToAddModList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SRB-ToAddModList'(Bytes, OptOrMand) ->
   'dec_SRB-ToAddModList'(Bytes, OptOrMand, []).

'dec_SRB-ToAddModList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SRB-ToAddMod'/3, [], []).




%%================================
%%  RadioResourceConfigDedicated
%%================================
'enc_RadioResourceConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'srb-ToAddModList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SRB-ToAddModList'(?RT_BER:cindex(2,Val,'srb-ToAddModList'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'drb-ToAddModList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRB-ToAddModList'(?RT_BER:cindex(3,Val,'drb-ToAddModList'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:DRB-ToReleaseList OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'drb-ToReleaseList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRB-ToReleaseList'(?RT_BER:cindex(4,Val,'drb-ToReleaseList'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'mac-MainConfig') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceConfigDedicated_mac-MainConfig'(?RT_BER:cindex(5,Val,'mac-MainConfig'), [{tag,128,3,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SPS-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'sps-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SPS-Config'(?RT_BER:cindex(6,Val,'sps-Config'), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PhysicalConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,physicalConfigDedicated) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysicalConfigDedicated'(?RT_BER:cindex(7,Val,physicalConfigDedicated), [{tag,128,5,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RadioResourceConfigDedicated_mac-MainConfig
%%================================

'enc_RadioResourceConfigDedicated_mac-MainConfig'({'RadioResourceConfigDedicated_mac-MainConfig',Val}, TagIn) ->
   'enc_RadioResourceConfigDedicated_mac-MainConfig'(Val, TagIn);

'enc_RadioResourceConfigDedicated_mac-MainConfig'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_MAC-MainConfig'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      defaultValue ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RadioResourceConfigDedicated_mac-MainConfig'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'explicitValue'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MAC-MainConfig'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{explicitValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'defaultValue'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{defaultValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RadioResourceConfigDedicated'(Bytes, OptOrMand) ->
   'dec_RadioResourceConfigDedicated'(Bytes, OptOrMand, []).

'dec_RadioResourceConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SRB-ToAddModList'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DRB-ToAddModList OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_DRB-ToAddModList'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:DRB-ToReleaseList OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_DRB-ToReleaseList'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_RadioResourceConfigDedicated_mac-MainConfig'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SPS-Config OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_SPS-Config'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PhysicalConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_PhysicalConfigDedicated'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'RadioResourceConfigDedicated', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  UL-CyclicPrefixLength
%%================================

'enc_UL-CyclicPrefixLength'({'UL-CyclicPrefixLength',Val}, TagIn) ->
   'enc_UL-CyclicPrefixLength'(Val, TagIn);

'enc_UL-CyclicPrefixLength'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
len1 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
len2 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_UL-CyclicPrefixLength'(Bytes, OptOrMand) ->
   'dec_UL-CyclicPrefixLength'(Bytes, OptOrMand, []).

'dec_UL-CyclicPrefixLength'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{len1,0},{len2,1}],TagIn++[], OptOrMand).



%%================================
%%  PCCH-Config
%%================================
'enc_PCCH-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,defaultPagingCycle) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,defaultPagingCycle) end) of
rf32 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
rf64 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
rf128 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
rf256 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,nB) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,nB) end) of
fourT -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
twoT -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
oneT -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
halfT -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
quarterT -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
oneEighthT -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
oneSixteenthT -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
oneThirtySecondT -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PCCH-Config'(Bytes, OptOrMand) ->
   'dec_PCCH-Config'(Bytes, OptOrMand, []).

'dec_PCCH-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{rf32,0},{rf64,1},{rf128,2},{rf256,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{fourT,0},{twoT,1},{oneT,2},{halfT,3},{quarterT,4},{oneEighthT,5},{oneSixteenthT,6},{oneThirtySecondT,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PCCH-Config', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BCCH-Config
%%================================
'enc_BCCH-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,modificationPeriodCoeff) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,modificationPeriodCoeff) end) of
n2 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BCCH-Config'(Bytes, OptOrMand) ->
   'dec_BCCH-Config'(Bytes, OptOrMand, []).

'dec_BCCH-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n2,0},{n4,1},{n8,2},{n16,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'BCCH-Config', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RadioResourceConfigCommon
%%================================
'enc_RadioResourceConfigCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RACH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'rach-ConfigCommon') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigCommon'(?RT_BER:cindex(2,Val,'rach-ConfigCommon'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PRACH-Config'(?RT_BER:cindex(3,Val,'prach-Config'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDSCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'pdsch-ConfigCommon') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDSCH-ConfigCommon'(?RT_BER:cindex(4,Val,'pdsch-ConfigCommon'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PUSCH-ConfigCommon'(?RT_BER:cindex(5,Val,'pusch-ConfigCommon'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:PHICH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'phich-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PHICH-Config'(?RT_BER:cindex(6,Val,'phich-Config'), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PUCCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,'pucch-ConfigCommon') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUCCH-ConfigCommon'(?RT_BER:cindex(7,Val,'pucch-ConfigCommon'), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:SoundingRS-UL-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,'soundingRS-UL-ConfigCommon') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SoundingRS-UL-ConfigCommon'(?RT_BER:cindex(8,Val,'soundingRS-UL-ConfigCommon'), [{tag,128,6,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:UplinkPowerControlCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,uplinkPowerControlCommon) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UplinkPowerControlCommon'(?RT_BER:cindex(9,Val,uplinkPowerControlCommon), [{tag,128,7,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:AntennaInfoCommon OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,antennaInfoCommon) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AntennaInfoCommon'(?RT_BER:cindex(10,Val,antennaInfoCommon), [{tag,128,8,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,'p-Max') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(11,Val,'p-Max'), [{tag,128,9,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 11   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes11,EncLen11} =  case ?RT_BER:cindex(12,Val,'tdd-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TDD-Config'(?RT_BER:cindex(12,Val,'tdd-Config'), [{tag,128,10,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 12 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes12,EncLen12} = case (case ?RT_BER:cindex(13,Val,'ul-CyclicPrefixLength') of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(13,Val,'ul-CyclicPrefixLength') end) of
len1 -> ?RT_BER:encode_enumerated(0,[{tag,128,11,'IMPLICIT',0}]);
len2 -> ?RT_BER:encode_enumerated(1,[{tag,128,11,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RadioResourceConfigCommon'(Bytes, OptOrMand) ->
   'dec_RadioResourceConfigCommon'(Bytes, OptOrMand, []).

'dec_RadioResourceConfigCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RACH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_RACH-ConfigCommon'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-Config
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PRACH-Config'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PDSCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PDSCH-ConfigCommon'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_PUSCH-ConfigCommon'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:PHICH-Config OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_PHICH-Config'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PUCCH-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_PUCCH-ConfigCommon'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:SoundingRS-UL-ConfigCommon OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_SoundingRS-UL-ConfigCommon'(Bytes8, opt_or_default, [{tag,128,6,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:UplinkPowerControlCommon OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_UplinkPowerControlCommon'(Bytes9, opt_or_default, [{tag,128,7,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:AntennaInfoCommon OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
'dec_AntennaInfoCommon'(Bytes10, opt_or_default, [{tag,128,8,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,9:5,_/binary>> ->
?RT_BER:decode_integer(Bytes11,{-30,33},[{tag,128,9,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

%%-------------------------------------------------
%% attribute number 11   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {Term11,Bytes13,Rb12} = case Bytes12 of
<<2:2,_:1,10:5,_/binary>> ->
'dec_TDD-Config'(Bytes12, opt_or_default, [{tag,128,10,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes12, 0 }
end,

%%-------------------------------------------------
%% attribute number 12 with type ENUMERATED
%%-------------------------------------------------
   {Term12,Bytes14,Rb13} = ?RT_BER:decode_enumerated(Bytes13,[],[{len1,0},{len2,1}],[{tag,128,11,'IMPLICIT',0}], mandatory),

   {Bytes15,Rb14} = ?RT_BER:restbytes2(RemBytes, Bytes14,ext),
   {{'RadioResourceConfigCommon', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12}, Bytes15, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12+Rb13+Rb14}.


%%================================
%%  RadioResourceConfigCommonSIB
%%================================
'enc_RadioResourceConfigCommonSIB'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RACH-ConfigCommon
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RACH-ConfigCommon'(?RT_BER:cindex(2,Val,'rach-ConfigCommon'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:BCCH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_BCCH-Config'(?RT_BER:cindex(3,Val,'bcch-Config'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PCCH-Config
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_PCCH-Config'(?RT_BER:cindex(4,Val,'pcch-Config'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PRACH-ConfigSIB
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PRACH-ConfigSIB'(?RT_BER:cindex(5,Val,'prach-Config'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:PDSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_PDSCH-ConfigCommon'(?RT_BER:cindex(6,Val,'pdsch-ConfigCommon'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_PUSCH-ConfigCommon'(?RT_BER:cindex(7,Val,'pusch-ConfigCommon'), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:PUCCH-ConfigCommon
%%-------------------------------------------------
   {EncBytes7,EncLen7} = 'enc_PUCCH-ConfigCommon'(?RT_BER:cindex(8,Val,'pucch-ConfigCommon'), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SoundingRS-UL-ConfigCommon
%%-------------------------------------------------
   {EncBytes8,EncLen8} = 'enc_SoundingRS-UL-ConfigCommon'(?RT_BER:cindex(9,Val,'soundingRS-UL-ConfigCommon'), [{tag,128,7,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:UplinkPowerControlCommon
%%-------------------------------------------------
   {EncBytes9,EncLen9} = 'enc_UplinkPowerControlCommon'(?RT_BER:cindex(10,Val,uplinkPowerControlCommon), [{tag,128,8,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 10 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes10,EncLen10} = case (case ?RT_BER:cindex(11,Val,'ul-CyclicPrefixLength') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(11,Val,'ul-CyclicPrefixLength') end) of
len1 -> ?RT_BER:encode_enumerated(0,[{tag,128,9,'IMPLICIT',0}]);
len2 -> ?RT_BER:encode_enumerated(1,[{tag,128,9,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RadioResourceConfigCommonSIB'(Bytes, OptOrMand) ->
   'dec_RadioResourceConfigCommonSIB'(Bytes, OptOrMand, []).

'dec_RadioResourceConfigCommonSIB'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RACH-ConfigCommon
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RACH-ConfigCommon'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:BCCH-Config
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_BCCH-Config'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PCCH-Config
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_PCCH-Config'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:PRACH-ConfigSIB
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_PRACH-ConfigSIB'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:PDSCH-ConfigCommon
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_PDSCH-ConfigCommon'(Bytes6, mandatory, [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:PUSCH-ConfigCommon
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = 'dec_PUSCH-ConfigCommon'(Bytes7, mandatory, [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:PUCCH-ConfigCommon
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = 'dec_PUCCH-ConfigCommon'(Bytes8, mandatory, [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SoundingRS-UL-ConfigCommon
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = 'dec_SoundingRS-UL-ConfigCommon'(Bytes9, mandatory, [{tag,128,7,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 9   External EUTRA-RRC:UplinkPowerControlCommon
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = 'dec_UplinkPowerControlCommon'(Bytes10, mandatory, [{tag,128,8,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 10 with type ENUMERATED
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = ?RT_BER:decode_enumerated(Bytes11,[],[{len1,0},{len2,1}],[{tag,128,9,'IMPLICIT',0}], mandatory),

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,ext),
   {{'RadioResourceConfigCommonSIB', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  RACH-ConfigDedicated
%%================================
'enc_RACH-ConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'ra-PreambleIndex'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'ra-PRACH-MaskIndex'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RACH-ConfigDedicated'(Bytes, OptOrMand) ->
   'dec_RACH-ConfigDedicated'(Bytes, OptOrMand, []).

'dec_RACH-ConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,63},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,15},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RACH-ConfigDedicated', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RACH-ConfigCommon
%%================================
'enc_RACH-ConfigCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RACH-ConfigCommon_preambleInfo'(?RT_BER:cindex(2,Val,preambleInfo), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RACH-ConfigCommon_powerRampingParameters'(?RT_BER:cindex(3,Val,powerRampingParameters), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_RACH-ConfigCommon_ra-SupervisionInfo'(?RT_BER:cindex(4,Val,'ra-SupervisionInfo'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'maxHARQ-Msg3Tx'), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RACH-ConfigCommon_preambleInfo
%%================================
'enc_RACH-ConfigCommon_preambleInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'numberOfRA-Preambles') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'numberOfRA-Preambles') end) of
n4 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n12 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n20 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n24 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
n28 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
n32 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
n36 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
n40 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
n44 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
n48 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
n52 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
n56 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
n60 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
n64 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,preamblesGroupAConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(?RT_BER:cindex(3,Val,preamblesGroupAConfig), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig
%%================================
'enc_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'sizeOfRA-PreamblesGroupA') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'sizeOfRA-PreamblesGroupA') end) of
n4 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n12 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n20 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n24 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
n28 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
n32 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
n36 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
n40 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
n44 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
n48 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
n52 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
n56 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
n60 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,messageSizeGroupA) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,messageSizeGroupA) end) of
b56 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
b144 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
b208 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
b256 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,messagePowerOffsetGroupB) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,messagePowerOffsetGroupB) end) of
minusinfinity -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
dB15 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n4,0},{n8,1},{n12,2},{n16,3},{n20,4},{n24,5},{n28,6},{n32,7},{n36,8},{n40,9},{n44,10},{n48,11},{n52,12},{n56,13},{n60,14}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{b56,0},{b144,1},{b208,2},{b256,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{minusinfinity,0},{dB0,1},{dB5,2},{dB8,3},{dB10,4},{dB12,5},{dB15,6},{dB18,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.
'dec_RACH-ConfigCommon_preambleInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n4,0},{n8,1},{n12,2},{n16,3},{n20,4},{n24,5},{n28,6},{n32,7},{n36,8},{n40,9},{n44,10},{n48,11},{n52,12},{n56,13},{n60,14},{n64,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_RACH-ConfigCommon_preambleInfo_preamblesGroupAConfig'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RACH-ConfigCommon_preambleInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  RACH-ConfigCommon_powerRampingParameters
%%================================
'enc_RACH-ConfigCommon_powerRampingParameters'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,powerRampingStep) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,powerRampingStep) end) of
dB0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,preambleInitialReceivedTargetPower) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,preambleInitialReceivedTargetPower) end) of
'dBm-120' -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
'dBm-118' -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
'dBm-116' -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
'dBm-114' -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
'dBm-112' -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
'dBm-110' -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
'dBm-108' -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
'dBm-106' -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
'dBm-104' -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
'dBm-102' -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
'dBm-100' -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
'dBm-98' -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
'dBm-96' -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
'dBm-94' -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
'dBm-92' -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
'dBm-90' -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_powerRampingParameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{dB0,0},{dB2,1},{dB4,2},{dB6,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{'dBm-120',0},{'dBm-118',1},{'dBm-116',2},{'dBm-114',3},{'dBm-112',4},{'dBm-110',5},{'dBm-108',6},{'dBm-106',7},{'dBm-104',8},{'dBm-102',9},{'dBm-100',10},{'dBm-98',11},{'dBm-96',12},{'dBm-94',13},{'dBm-92',14},{'dBm-90',15}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RACH-ConfigCommon_powerRampingParameters', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  RACH-ConfigCommon_ra-SupervisionInfo
%%================================
'enc_RACH-ConfigCommon_ra-SupervisionInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,preambleTransMax) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,preambleTransMax) end) of
n3 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n5 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n6 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n7 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
n10 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
n20 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
n50 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
n100 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
n200 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'ra-ResponseWindowSize') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'ra-ResponseWindowSize') end) of
sf2 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
sf3 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
sf4 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
sf5 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
sf6 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
sf7 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
sf8 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
sf10 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'mac-ContentionResolutionTimer') of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,'mac-ContentionResolutionTimer') end) of
sf8 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
sf16 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
sf24 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
sf32 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
sf40 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
sf48 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
sf56 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
sf64 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RACH-ConfigCommon_ra-SupervisionInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n3,0},{n4,1},{n5,2},{n6,3},{n7,4},{n8,5},{n10,6},{n20,7},{n50,8},{n100,9},{n200,10}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{sf2,0},{sf3,1},{sf4,2},{sf5,3},{sf6,4},{sf7,5},{sf8,6},{sf10,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{sf8,0},{sf16,1},{sf24,2},{sf32,3},{sf40,4},{sf48,5},{sf56,6},{sf64,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'RACH-ConfigCommon_ra-SupervisionInfo', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


'dec_RACH-ConfigCommon'(Bytes, OptOrMand) ->
   'dec_RACH-ConfigCommon'(Bytes, OptOrMand, []).

'dec_RACH-ConfigCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RACH-ConfigCommon_preambleInfo'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RACH-ConfigCommon_powerRampingParameters'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_RACH-ConfigCommon_ra-SupervisionInfo'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{1,8},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'RACH-ConfigCommon', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  UL-ReferenceSignalsPUSCH
%%================================
'enc_UL-ReferenceSignalsPUSCH'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,groupHoppingEnabled), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,groupAssignmentPUSCH), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,sequenceHoppingEnabled), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,cyclicShift), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UL-ReferenceSignalsPUSCH'(Bytes, OptOrMand) ->
   'dec_UL-ReferenceSignalsPUSCH'(Bytes, OptOrMand, []).

'dec_UL-ReferenceSignalsPUSCH'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,29},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,7},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'UL-ReferenceSignalsPUSCH', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  PUSCH-ConfigDedicated
%%================================
'enc_PUSCH-ConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'betaOffset-ACK-Index'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'betaOffset-RI-Index'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'betaOffset-CQI-Index'), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PUSCH-ConfigDedicated'(Bytes, OptOrMand) ->
   'dec_PUSCH-ConfigDedicated'(Bytes, OptOrMand, []).

'dec_PUSCH-ConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,15},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,15},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,15},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'PUSCH-ConfigDedicated', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  PUSCH-ConfigCommon
%%================================
'enc_PUSCH-ConfigCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(?RT_BER:cindex(2,Val,'pusch-ConfigBasic'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:UL-ReferenceSignalsPUSCH
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UL-ReferenceSignalsPUSCH'(?RT_BER:cindex(3,Val,'ul-ReferenceSignalsPUSCH'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PUSCH-ConfigCommon_pusch-ConfigBasic
%%================================
'enc_PUSCH-ConfigCommon_pusch-ConfigBasic'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'n-SB'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,hoppingMode) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,hoppingMode) end) of
interSubFrame -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
intraAndInterSubFrame -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'pusch-HoppingOffset'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,enable64QAM), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,4},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{interSubFrame,0},{intraAndInterSubFrame,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,98},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'PUSCH-ConfigCommon_pusch-ConfigBasic', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


'dec_PUSCH-ConfigCommon'(Bytes, OptOrMand) ->
   'dec_PUSCH-ConfigCommon'(Bytes, OptOrMand, []).

'dec_PUSCH-ConfigCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PUSCH-ConfigCommon_pusch-ConfigBasic'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:UL-ReferenceSignalsPUSCH
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_UL-ReferenceSignalsPUSCH'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PUSCH-ConfigCommon', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PUCCH-ConfigDedicated
%%================================
'enc_PUCCH-ConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PUCCH-ConfigDedicated_ackNackRepetition'(?RT_BER:cindex(2,Val,ackNackRepetition), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'tdd-AckNackFeedbackMode') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,'tdd-AckNackFeedbackMode') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,'tdd-AckNackFeedbackMode') end) of
bundling -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
multiplexing -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PUCCH-ConfigDedicated_ackNackRepetition
%%================================

'enc_PUCCH-ConfigDedicated_ackNackRepetition'({'PUCCH-ConfigDedicated_ackNackRepetition',Val}, TagIn) ->
   'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Val, TagIn);

'enc_PUCCH-ConfigDedicated_ackNackRepetition'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  PUCCH-ConfigDedicated_ackNackRepetition_setup
%%================================
'enc_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,repetitionFactor) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,repetitionFactor) end) of
n2 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n6 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'n1PUCCH-AN-Rep'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n2,0},{n4,1},{n6,2},{spare1,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,2047},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PUCCH-ConfigDedicated_ackNackRepetition_setup', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_PUCCH-ConfigDedicated_ackNackRepetition'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_PUCCH-ConfigDedicated_ackNackRepetition_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_PUCCH-ConfigDedicated'(Bytes, OptOrMand) ->
   'dec_PUCCH-ConfigDedicated'(Bytes, OptOrMand, []).

'dec_PUCCH-ConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PUCCH-ConfigDedicated_ackNackRepetition'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{bundling,0},{multiplexing,1}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PUCCH-ConfigDedicated', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PUCCH-ConfigCommon
%%================================
'enc_PUCCH-ConfigCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'deltaPUCCH-Shift') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'deltaPUCCH-Shift') end) of
ds1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ds2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ds3 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'nRB-CQI'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'nCS-AN'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'n1PUCCH-AN'), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PUCCH-ConfigCommon'(Bytes, OptOrMand) ->
   'dec_PUCCH-ConfigCommon'(Bytes, OptOrMand, []).

'dec_PUCCH-ConfigCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{ds1,0},{ds2,1},{ds3,2}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,98},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,7},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,2047},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'PUCCH-ConfigCommon', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  PresenceAntennaPort1
%%================================

'enc_PresenceAntennaPort1'({'PresenceAntennaPort1',Val}, TagIn) ->
   'enc_PresenceAntennaPort1'(Val, TagIn);

'enc_PresenceAntennaPort1'(Val, TagIn) ->
?RT_BER:encode_boolean(Val, TagIn ++ []).


'dec_PresenceAntennaPort1'(Bytes, OptOrMand) ->
   'dec_PresenceAntennaPort1'(Bytes, OptOrMand, []).

'dec_PresenceAntennaPort1'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_boolean(Bytes,TagIn++[], OptOrMand).



%%================================
%%  PRACH-ConfigInfo
%%================================
'enc_PRACH-ConfigInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'prach-ConfigIndex'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,highSpeedFlag), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,zeroCorrelationZoneConfig), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'prach-FreqOffset'), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PRACH-ConfigInfo'(Bytes, OptOrMand) ->
   'dec_PRACH-ConfigInfo'(Bytes, OptOrMand, []).

'dec_PRACH-ConfigInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,63},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,15},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,94},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'PRACH-ConfigInfo', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  PRACH-Config
%%================================
'enc_PRACH-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,rootSequenceIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-ConfigInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'prach-ConfigInfo') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PRACH-ConfigInfo'(?RT_BER:cindex(3,Val,'prach-ConfigInfo'), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PRACH-Config'(Bytes, OptOrMand) ->
   'dec_PRACH-Config'(Bytes, OptOrMand, []).

'dec_PRACH-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,837},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-ConfigInfo OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_PRACH-ConfigInfo'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PRACH-Config', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PRACH-ConfigSIB
%%================================
'enc_PRACH-ConfigSIB'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,rootSequenceIndex), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-ConfigInfo
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PRACH-ConfigInfo'(?RT_BER:cindex(3,Val,'prach-ConfigInfo'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PRACH-ConfigSIB'(Bytes, OptOrMand) ->
   'dec_PRACH-ConfigSIB'(Bytes, OptOrMand, []).

'dec_PRACH-ConfigSIB'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,837},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PRACH-ConfigInfo
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PRACH-ConfigInfo'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PRACH-ConfigSIB', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  P-Max
%%================================

'enc_P-Max'({'P-Max',Val}, TagIn) ->
   'enc_P-Max'(Val, TagIn);

'enc_P-Max'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_P-Max'(Bytes, OptOrMand) ->
   'dec_P-Max'(Bytes, OptOrMand, []).

'dec_P-Max'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{-30,33},TagIn++[], OptOrMand).



%%================================
%%  PhysicalConfigDedicated
%%================================
'enc_PhysicalConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PDSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'pdsch-ConfigDedicated') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDSCH-ConfigDedicated'(?RT_BER:cindex(2,Val,'pdsch-ConfigDedicated'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PUCCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'pucch-ConfigDedicated') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUCCH-ConfigDedicated'(?RT_BER:cindex(3,Val,'pucch-ConfigDedicated'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PUSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'pusch-ConfigDedicated') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PUSCH-ConfigDedicated'(?RT_BER:cindex(4,Val,'pusch-ConfigDedicated'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:UplinkPowerControlDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,uplinkPowerControlDedicated) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UplinkPowerControlDedicated'(?RT_BER:cindex(5,Val,uplinkPowerControlDedicated), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'tpc-PDCCH-ConfigPUCCH') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TPC-PDCCH-Config'(?RT_BER:cindex(6,Val,'tpc-PDCCH-ConfigPUCCH'), [{tag,128,4,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,'tpc-PDCCH-ConfigPUSCH') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TPC-PDCCH-Config'(?RT_BER:cindex(7,Val,'tpc-PDCCH-ConfigPUSCH'), [{tag,128,5,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:CQI-ReportConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,'cqi-ReportConfig') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CQI-ReportConfig'(?RT_BER:cindex(8,Val,'cqi-ReportConfig'), [{tag,128,6,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SoundingRS-UL-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,'soundingRS-UL-ConfigDedicated') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SoundingRS-UL-ConfigDedicated'(?RT_BER:cindex(9,Val,'soundingRS-UL-ConfigDedicated'), [{tag,128,7,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 9 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,antennaInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysicalConfigDedicated_antennaInfo'(?RT_BER:cindex(10,Val,antennaInfo), [{tag,128,8,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 10   External EUTRA-RRC:SchedulingRequestConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,schedulingRequestConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SchedulingRequestConfig'(?RT_BER:cindex(11,Val,schedulingRequestConfig), [{tag,128,9,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PhysicalConfigDedicated_antennaInfo
%%================================

'enc_PhysicalConfigDedicated_antennaInfo'({'PhysicalConfigDedicated_antennaInfo',Val}, TagIn) ->
   'enc_PhysicalConfigDedicated_antennaInfo'(Val, TagIn);

'enc_PhysicalConfigDedicated_antennaInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      explicitValue ->
         'enc_AntennaInfoDedicated'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      defaultValue ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_PhysicalConfigDedicated_antennaInfo'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'explicitValue'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_AntennaInfoDedicated'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{explicitValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'defaultValue'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{defaultValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_PhysicalConfigDedicated'(Bytes, OptOrMand) ->
   'dec_PhysicalConfigDedicated'(Bytes, OptOrMand, []).

'dec_PhysicalConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PDSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_PDSCH-ConfigDedicated'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PUCCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_PUCCH-ConfigDedicated'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PUSCH-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PUSCH-ConfigDedicated'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:UplinkPowerControlDedicated OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_UplinkPowerControlDedicated'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_TPC-PDCCH-Config'(Bytes6, opt_or_default, [{tag,128,4,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:TPC-PDCCH-Config OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_TPC-PDCCH-Config'(Bytes7, opt_or_default, [{tag,128,5,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7   External EUTRA-RRC:CQI-ReportConfig OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
'dec_CQI-ReportConfig'(Bytes8, opt_or_default, [{tag,128,6,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SoundingRS-UL-ConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_SoundingRS-UL-ConfigDedicated'(Bytes9, opt_or_default, [{tag,128,7,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

%%-------------------------------------------------
%% attribute number 9 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
'dec_PhysicalConfigDedicated_antennaInfo'(Bytes10, opt_or_default, [{tag,128,8,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

%%-------------------------------------------------
%% attribute number 10   External EUTRA-RRC:SchedulingRequestConfig OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,9:5,_/binary>> ->
'dec_SchedulingRequestConfig'(Bytes11, opt_or_default, [{tag,128,9,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

   {Bytes13,Rb12} = ?RT_BER:restbytes2(RemBytes, Bytes12,ext),
   {{'PhysicalConfigDedicated', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}, Bytes13, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12}.


%%================================
%%  PHICH-Config
%%================================
'enc_PHICH-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'phich-Duration') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'phich-Duration') end) of
normal -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
extended -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'phich-Resource') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'phich-Resource') end) of
oneSixth -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
half -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
one -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
two -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PHICH-Config'(Bytes, OptOrMand) ->
   'dec_PHICH-Config'(Bytes, OptOrMand, []).

'dec_PHICH-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{normal,0},{extended,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{oneSixth,0},{half,1},{one,2},{two,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PHICH-Config', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PDSCH-ConfigDedicated
%%================================
'enc_PDSCH-ConfigDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'p-a') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'p-a') end) of
'dB-6' -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
'dB-4dot77' -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
'dB-1dot77' -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PDSCH-ConfigDedicated'(Bytes, OptOrMand) ->
   'dec_PDSCH-ConfigDedicated'(Bytes, OptOrMand, []).

'dec_PDSCH-ConfigDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{'dB-6',0},{'dB-4dot77',1},{'dB-3',2},{'dB-1dot77',3},{dB0,4},{dB1,5},{dB2,6},{dB3,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'PDSCH-ConfigDedicated', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  PDSCH-ConfigCommon
%%================================
'enc_PDSCH-ConfigCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,referenceSignalPower), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'p-b'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PDSCH-ConfigCommon'(Bytes, OptOrMand) ->
   'dec_PDSCH-ConfigCommon'(Bytes, OptOrMand, []).

'dec_PDSCH-ConfigCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-60,50},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,3},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PDSCH-ConfigCommon', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PDCP-Config
%%================================
'enc_PDCP-Config'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,discardTimer) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(2,Val,discardTimer) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,discardTimer) end) of
ms50 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
ms750 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
ms1500 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'rlc-AM') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config_rlc-AM'(?RT_BER:cindex(3,Val,'rlc-AM'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'rlc-UM') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PDCP-Config_rlc-UM'(?RT_BER:cindex(4,Val,'rlc-UM'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_PDCP-Config_headerCompression'(?RT_BER:cindex(5,Val,headerCompression), [{tag,128,3,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Config_rlc-AM
%%================================
'enc_PDCP-Config_rlc-AM'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,statusReportRequired), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PDCP-Config_rlc-AM'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'PDCP-Config_rlc-AM', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  PDCP-Config_rlc-UM
%%================================
'enc_PDCP-Config_rlc-UM'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'pdcp-SN-Size') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'pdcp-SN-Size') end) of
len7bits -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
len12bits -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PDCP-Config_rlc-UM'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{len7bits,0},{len12bits,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'PDCP-Config_rlc-UM', Term1}, Bytes4, Rb1+Rb2+Rb3}.



%%================================
%%  PDCP-Config_headerCompression
%%================================

'enc_PDCP-Config_headerCompression'({'PDCP-Config_headerCompression',Val}, TagIn) ->
   'enc_PDCP-Config_headerCompression'(Val, TagIn);

'enc_PDCP-Config_headerCompression'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      notUsed ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      rohc ->
         'enc_PDCP-Config_headerCompression_rohc'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  PDCP-Config_headerCompression_rohc
%%================================
'enc_PDCP-Config_headerCompression_rohc'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 15
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,maxCID) of
         asn1_DEFAULT -> {<<>>,0};
         15 -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,maxCID), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PDCP-Config_headerCompression_rohc_profiles'(?RT_BER:cindex(3,Val,profiles), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  PDCP-Config_headerCompression_rohc_profiles
%%================================
'enc_PDCP-Config_headerCompression_rohc_profiles'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,profile0x0001), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,profile0x0002), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_boolean(?RT_BER:cindex(4,Val,profile0x0003), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,profile0x0004), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,profile0x0006), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_boolean(?RT_BER:cindex(7,Val,profile0x0101), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_boolean(?RT_BER:cindex(8,Val,profile0x0102), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_boolean(?RT_BER:cindex(9,Val,profile0x0103), [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_boolean(?RT_BER:cindex(10,Val,profile0x0104), [{tag,128,8,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PDCP-Config_headerCompression_rohc_profiles'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BOOLEAN
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_boolean(Bytes4,[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_boolean(Bytes7,[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type BOOLEAN
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_boolean(Bytes8,[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type BOOLEAN
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_boolean(Bytes9,[{tag,128,7,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_boolean(Bytes10,[{tag,128,8,'IMPLICIT',0}], mandatory),

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'PDCP-Config_headerCompression_rohc_profiles', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.
'dec_PDCP-Config_headerCompression_rohc'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER DEFAULT = 15
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{1,16383},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{15,Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PDCP-Config_headerCompression_rohc_profiles'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'PDCP-Config_headerCompression_rohc', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_PDCP-Config_headerCompression'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'notUsed'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{notUsed, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rohc'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_PDCP-Config_headerCompression_rohc'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{rohc, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_PDCP-Config'(Bytes, OptOrMand) ->
   'dec_PDCP-Config'(Bytes, OptOrMand, []).

'dec_PDCP-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes2,[],[{ms50,0},{ms100,1},{ms150,2},{ms300,3},{ms500,4},{ms750,5},{ms1500,6},{infinity,7}],[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_PDCP-Config_rlc-AM'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PDCP-Config_rlc-UM'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_PDCP-Config_headerCompression'(Bytes5, mandatory, [{tag,128,3,'EXPLICIT',32}]),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'PDCP-Config', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  DRX-Config
%%================================

'enc_DRX-Config'({'DRX-Config',Val}, TagIn) ->
   'enc_DRX-Config'(Val, TagIn);

'enc_DRX-Config'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_DRX-Config_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  DRX-Config_setup
%%================================
'enc_DRX-Config_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,onDurationTimer) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,onDurationTimer) end) of
psf1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
psf2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
psf3 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
psf4 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
psf5 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
psf6 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
psf8 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
psf10 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
psf20 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
psf30 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
psf40 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
psf50 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
psf60 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
psf80 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
psf100 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
psf200 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'drx-InactivityTimer') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'drx-InactivityTimer') end) of
psf1 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
psf2 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
psf3 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
psf4 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
psf5 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
psf6 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
psf8 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
psf10 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
psf20 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
psf30 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
psf40 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
psf50 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
psf60 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
psf80 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
psf100 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
psf200 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
psf300 -> ?RT_BER:encode_enumerated(16,[{tag,128,1,'IMPLICIT',0}]);
psf500 -> ?RT_BER:encode_enumerated(17,[{tag,128,1,'IMPLICIT',0}]);
psf750 -> ?RT_BER:encode_enumerated(18,[{tag,128,1,'IMPLICIT',0}]);
psf1280 -> ?RT_BER:encode_enumerated(19,[{tag,128,1,'IMPLICIT',0}]);
psf1920 -> ?RT_BER:encode_enumerated(20,[{tag,128,1,'IMPLICIT',0}]);
psf2560 -> ?RT_BER:encode_enumerated(21,[{tag,128,1,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,1,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,1,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,1,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,1,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,1,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,1,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'drx-RetransmissionTimer') of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,'drx-RetransmissionTimer') end) of
psf1 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
psf2 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
psf4 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
psf6 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
psf8 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
psf16 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
psf24 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
psf33 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_DRX-Config_setup_longDRX-CycleStartOffset'(?RT_BER:cindex(5,Val,'longDRX-CycleStartOffset'), [{tag,128,3,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,shortDRX) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRX-Config_setup_shortDRX'(?RT_BER:cindex(6,Val,shortDRX), [{tag,128,4,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  DRX-Config_setup_longDRX-CycleStartOffset
%%================================

'enc_DRX-Config_setup_longDRX-CycleStartOffset'({'DRX-Config_setup_longDRX-CycleStartOffset',Val}, TagIn) ->
   'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Val, TagIn);

'enc_DRX-Config_setup_longDRX-CycleStartOffset'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      sf10 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      sf20 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      sf32 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      sf40 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      sf64 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      sf80 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      sf128 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      sf160 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      sf256 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,8,'IMPLICIT',0}]);
      sf320 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,9,'IMPLICIT',0}]);
      sf512 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,10,'IMPLICIT',0}]);
      sf640 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,11,'IMPLICIT',0}]);
      sf1024 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,12,'IMPLICIT',0}]);
      sf1280 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,13,'IMPLICIT',0}]);
      sf2048 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,14,'IMPLICIT',0}]);
      sf2560 ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,15,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_DRX-Config_setup_longDRX-CycleStartOffset'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'sf10'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,9},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{sf10, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf20'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,19},[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{sf20, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf32'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,31},[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{sf32, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf40'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,39},[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{sf40, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf64'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,63},[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{sf64, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf80'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,79},[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{sf80, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf128'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,127},[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{sf128, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf160'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,159},[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{sf160, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf256'
      <<2:2,_:1,8:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,255},[{tag,128,8,'IMPLICIT',0}], mandatory),
         {{sf256, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf320'
      <<2:2,_:1,9:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,319},[{tag,128,9,'IMPLICIT',0}], mandatory),
         {{sf320, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf512'
      <<2:2,_:1,10:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,511},[{tag,128,10,'IMPLICIT',0}], mandatory),
         {{sf512, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf640'
      <<2:2,_:1,11:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,639},[{tag,128,11,'IMPLICIT',0}], mandatory),
         {{sf640, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf1024'
      <<2:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,1023},[{tag,128,12,'IMPLICIT',0}], mandatory),
         {{sf1024, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf1280'
      <<2:2,_:1,13:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,1279},[{tag,128,13,'IMPLICIT',0}], mandatory),
         {{sf1280, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf2048'
      <<2:2,_:1,14:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,2047},[{tag,128,14,'IMPLICIT',0}], mandatory),
         {{sf2048, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sf2560'
      <<2:2,_:1,15:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,2559},[{tag,128,15,'IMPLICIT',0}], mandatory),
         {{sf2560, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  DRX-Config_setup_shortDRX
%%================================
'enc_DRX-Config_setup_shortDRX'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'shortDRX-Cycle') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'shortDRX-Cycle') end) of
sf2 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
sf5 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
sf8 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
sf10 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
sf16 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
sf32 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
sf40 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
sf64 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
sf80 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
sf128 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
sf160 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
sf256 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
sf320 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
sf512 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
sf640 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,drxShortCycleTimer), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_DRX-Config_setup_shortDRX'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{sf2,0},{sf5,1},{sf8,2},{sf10,3},{sf16,4},{sf20,5},{sf32,6},{sf40,7},{sf64,8},{sf80,9},{sf128,10},{sf160,11},{sf256,12},{sf320,13},{sf512,14},{sf640,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{1,16},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'DRX-Config_setup_shortDRX', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_DRX-Config_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{psf1,0},{psf2,1},{psf3,2},{psf4,3},{psf5,4},{psf6,5},{psf8,6},{psf10,7},{psf20,8},{psf30,9},{psf40,10},{psf50,11},{psf60,12},{psf80,13},{psf100,14},{psf200,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{psf1,0},{psf2,1},{psf3,2},{psf4,3},{psf5,4},{psf6,5},{psf8,6},{psf10,7},{psf20,8},{psf30,9},{psf40,10},{psf50,11},{psf60,12},{psf80,13},{psf100,14},{psf200,15},{psf300,16},{psf500,17},{psf750,18},{psf1280,19},{psf1920,20},{psf2560,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{psf1,0},{psf2,1},{psf4,2},{psf6,3},{psf8,4},{psf16,5},{psf24,6},{psf33,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type CHOICE
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_DRX-Config_setup_longDRX-CycleStartOffset'(Bytes5, mandatory, [{tag,128,3,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 5 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_DRX-Config_setup_shortDRX'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'DRX-Config_setup', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


'dec_DRX-Config'(Bytes, OptOrMand) ->
   'dec_DRX-Config'(Bytes, OptOrMand, []).

'dec_DRX-Config'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DRX-Config_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  MAC-MainConfig
%%================================
'enc_MAC-MainConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'ul-SCH-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MAC-MainConfig_ul-SCH-Config'(?RT_BER:cindex(2,Val,'ul-SCH-Config'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DRX-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'drx-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DRX-Config'(?RT_BER:cindex(3,Val,'drx-Config'), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,timeAlignmentTimerDedicated) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(4,Val,timeAlignmentTimerDedicated) end) of
sf500 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
sf750 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
sf1280 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
sf1920 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
sf2560 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
sf5120 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
sf10240 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'phr-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MAC-MainConfig_phr-Config'(?RT_BER:cindex(5,Val,'phr-Config'), [{tag,128,3,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MAC-MainConfig_ul-SCH-Config
%%================================
'enc_MAC-MainConfig_ul-SCH-Config'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'maxHARQ-Tx') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(2,Val,'maxHARQ-Tx') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'maxHARQ-Tx') end) of
n1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n3 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n5 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n6 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
n7 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
n10 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
n12 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
n20 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
n24 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
n28 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'periodicBSR-Timer') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,'periodicBSR-Timer') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'periodicBSR-Timer') end) of
sf5 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
sf10 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
sf16 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
sf32 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
sf40 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
sf64 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
sf80 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
sf128 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
sf160 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
sf320 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
sf640 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
sf1280 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
sf2560 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'retxBSR-Timer') of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,'retxBSR-Timer') end) of
sf320 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
sf640 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
sf1280 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
sf2560 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
sf5120 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
sf10240 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_boolean(?RT_BER:cindex(5,Val,ttiBundling), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MAC-MainConfig_ul-SCH-Config'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes2,[],[{n1,0},{n2,1},{n3,2},{n4,3},{n5,4},{n6,5},{n7,6},{n8,7},{n10,8},{n12,9},{n16,10},{n20,11},{n24,12},{n28,13},{spare2,14},{spare1,15}],[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{sf5,0},{sf10,1},{sf16,2},{sf20,3},{sf32,4},{sf40,5},{sf64,6},{sf80,7},{sf128,8},{sf160,9},{sf320,10},{sf640,11},{sf1280,12},{sf2560,13},{infinity,14},{spare1,15}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{sf320,0},{sf640,1},{sf1280,2},{sf2560,3},{sf5120,4},{sf10240,5},{spare2,6},{spare1,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BOOLEAN
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_boolean(Bytes5,[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'MAC-MainConfig_ul-SCH-Config', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.



%%================================
%%  MAC-MainConfig_phr-Config
%%================================

'enc_MAC-MainConfig_phr-Config'({'MAC-MainConfig_phr-Config',Val}, TagIn) ->
   'enc_MAC-MainConfig_phr-Config'(Val, TagIn);

'enc_MAC-MainConfig_phr-Config'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_MAC-MainConfig_phr-Config_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  MAC-MainConfig_phr-Config_setup
%%================================
'enc_MAC-MainConfig_phr-Config_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'periodicPHR-Timer') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'periodicPHR-Timer') end) of
sf10 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
sf50 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
sf100 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
sf200 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
sf500 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
sf1000 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'prohibitPHR-Timer') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'prohibitPHR-Timer') end) of
sf0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
sf10 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
sf20 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
sf50 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
sf100 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
sf200 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
sf500 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
sf1000 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,'dl-PathlossChange') of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(4,Val,'dl-PathlossChange') end) of
dB1 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MAC-MainConfig_phr-Config_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{sf10,0},{sf20,1},{sf50,2},{sf100,3},{sf200,4},{sf500,5},{sf1000,6},{infinity,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{sf0,0},{sf10,1},{sf20,2},{sf50,3},{sf100,4},{sf200,5},{sf500,6},{sf1000,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{dB1,0},{dB3,1},{dB6,2},{infinity,3}],[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MAC-MainConfig_phr-Config_setup', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.
'dec_MAC-MainConfig_phr-Config'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MAC-MainConfig_phr-Config_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MAC-MainConfig'(Bytes, OptOrMand) ->
   'dec_MAC-MainConfig'(Bytes, OptOrMand, []).

'dec_MAC-MainConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_MAC-MainConfig_ul-SCH-Config'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:DRX-Config OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_DRX-Config'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{sf500,0},{sf750,1},{sf1280,2},{sf1920,3},{sf2560,4},{sf5120,5},{sf10240,6},{infinity,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_MAC-MainConfig_phr-Config'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'MAC-MainConfig', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  LogicalChannelConfig
%%================================
'enc_LogicalChannelConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'ul-SpecificParameters') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LogicalChannelConfig_ul-SpecificParameters'(?RT_BER:cindex(2,Val,'ul-SpecificParameters'), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  LogicalChannelConfig_ul-SpecificParameters
%%================================
'enc_LogicalChannelConfig_ul-SpecificParameters'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,priority), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,prioritisedBitRate) of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,prioritisedBitRate) end) of
kBps0 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
kBps8 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
kBps16 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
kBps32 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
kBps64 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
kBps128 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
kBps256 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,bucketSizeDuration) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(4,Val,bucketSizeDuration) end) of
ms50 -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
ms100 -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
ms150 -> ?RT_BER:encode_enumerated(2,[{tag,128,2,'IMPLICIT',0}]);
ms300 -> ?RT_BER:encode_enumerated(3,[{tag,128,2,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(4,[{tag,128,2,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(5,[{tag,128,2,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,2,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,2,'IMPLICIT',0}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,logicalChannelGroup) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,logicalChannelGroup), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_LogicalChannelConfig_ul-SpecificParameters'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,16},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{kBps0,0},{kBps8,1},{kBps16,2},{kBps32,3},{kBps64,4},{kBps128,5},{kBps256,6},{infinity,7},{spare8,8},{spare7,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{ms50,0},{ms100,1},{ms150,2},{ms300,3},{ms500,4},{ms1000,5},{spare2,6},{spare1,7}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,{0,3},[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'LogicalChannelConfig_ul-SpecificParameters', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


'dec_LogicalChannelConfig'(Bytes, OptOrMand) ->
   'dec_LogicalChannelConfig'(Bytes, OptOrMand, []).

'dec_LogicalChannelConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_LogicalChannelConfig_ul-SpecificParameters'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'LogicalChannelConfig', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  DRB-Identity
%%================================

'enc_DRB-Identity'({'DRB-Identity',Val}, TagIn) ->
   'enc_DRB-Identity'(Val, TagIn);

'enc_DRB-Identity'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_DRB-Identity'(Bytes, OptOrMand) ->
   'dec_DRB-Identity'(Bytes, OptOrMand, []).

'dec_DRB-Identity'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{1,32},TagIn++[], OptOrMand).



%%================================
%%  CQI-ReportPeriodic
%%================================

'enc_CQI-ReportPeriodic'({'CQI-ReportPeriodic',Val}, TagIn) ->
   'enc_CQI-ReportPeriodic'(Val, TagIn);

'enc_CQI-ReportPeriodic'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         'enc_CQI-ReportPeriodic_setup'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CQI-ReportPeriodic_setup
%%================================
'enc_CQI-ReportPeriodic_setup'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'cqi-PUCCH-ResourceIndex'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'cqi-pmi-ConfigIndex'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(?RT_BER:cindex(4,Val,'cqi-FormatIndicatorPeriodic'), [{tag,128,2,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'ri-ConfigIndex') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'ri-ConfigIndex'), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,simultaneousAckNackAndCQI), [{tag,128,4,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic
%%================================

'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'({'CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic',Val}, TagIn) ->
   'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Val, TagIn);

'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      widebandCQI ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      subbandCQI ->
         'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI
%%================================
'enc_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,k), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,4},[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI', Term1}, Bytes4, Rb1+Rb2+Rb3}.
'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'widebandCQI'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{widebandCQI, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'subbandCQI'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic_subbandCQI'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{subbandCQI, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.
'dec_CQI-ReportPeriodic_setup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,1185},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,1023},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_CQI-ReportPeriodic_setup_cqi-FormatIndicatorPeriodic'(Bytes4, mandatory, [{tag,128,2,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,{0,1023},[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'IMPLICIT',0}], mandatory),

   {Bytes8,Rb7} = ?RT_BER:restbytes2(RemBytes, Bytes7,noext),
   {{'CQI-ReportPeriodic_setup', Term1, Term2, Term3, Term4, Term5}, Bytes8, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7}.


'dec_CQI-ReportPeriodic'(Bytes, OptOrMand) ->
   'dec_CQI-ReportPeriodic'(Bytes, OptOrMand, []).

'dec_CQI-ReportPeriodic'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CQI-ReportPeriodic_setup'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  CQI-ReportConfig
%%================================
'enc_CQI-ReportConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'cqi-ReportModeAperiodic') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(2,Val,'cqi-ReportModeAperiodic') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'cqi-ReportModeAperiodic') end) of
rm12 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
rm20 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
rm22 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
rm30 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
rm31 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'nomPDSCH-RS-EPRE-Offset'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CQI-ReportPeriodic OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'cqi-ReportPeriodic') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CQI-ReportPeriodic'(?RT_BER:cindex(4,Val,'cqi-ReportPeriodic'), [{tag,128,2,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CQI-ReportConfig'(Bytes, OptOrMand) ->
   'dec_CQI-ReportConfig'(Bytes, OptOrMand, []).

'dec_CQI-ReportConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes2,[],[{rm12,0},{rm20,1},{rm22,2},{rm30,3},{rm31,4},{spare3,5},{spare2,6},{spare1,7}],[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{-1,6},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CQI-ReportPeriodic OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CQI-ReportPeriodic'(Bytes4, opt_or_default, [{tag,128,2,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CQI-ReportConfig', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  AntennaInfoDedicated
%%================================
'enc_AntennaInfoDedicated'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,transmissionMode) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,transmissionMode) end) of
tm1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
tm2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
tm3 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
tm4 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
tm5 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
tm6 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
tm7 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,codebookSubsetRestriction) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AntennaInfoDedicated_codebookSubsetRestriction'(?RT_BER:cindex(3,Val,codebookSubsetRestriction), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(?RT_BER:cindex(4,Val,'ue-TransmitAntennaSelection'), [{tag,128,2,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  AntennaInfoDedicated_codebookSubsetRestriction
%%================================

'enc_AntennaInfoDedicated_codebookSubsetRestriction'({'AntennaInfoDedicated_codebookSubsetRestriction',Val}, TagIn) ->
   'enc_AntennaInfoDedicated_codebookSubsetRestriction'(Val, TagIn);

'enc_AntennaInfoDedicated_codebookSubsetRestriction'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'n2TxAntenna-tm3' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',2}], element(2,Val), [], [{tag,128,0,'IMPLICIT',0}]);
      'n4TxAntenna-tm3' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',4}], element(2,Val), [], [{tag,128,1,'IMPLICIT',0}]);
      'n2TxAntenna-tm4' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',6}], element(2,Val), [], [{tag,128,2,'IMPLICIT',0}]);
      'n4TxAntenna-tm4' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',64}], element(2,Val), [], [{tag,128,3,'IMPLICIT',0}]);
      'n2TxAntenna-tm5' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',4}], element(2,Val), [], [{tag,128,4,'IMPLICIT',0}]);
      'n4TxAntenna-tm5' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',16}], element(2,Val), [], [{tag,128,5,'IMPLICIT',0}]);
      'n2TxAntenna-tm6' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',4}], element(2,Val), [], [{tag,128,6,'IMPLICIT',0}]);
      'n4TxAntenna-tm6' ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',16}], element(2,Val), [], [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_AntennaInfoDedicated_codebookSubsetRestriction'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'n2TxAntenna-tm3'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,2,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{'n2TxAntenna-tm3', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n4TxAntenna-tm3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,4,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{'n4TxAntenna-tm3', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n2TxAntenna-tm4'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,6,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),
         {{'n2TxAntenna-tm4', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n4TxAntenna-tm4'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,64,[],[{tag,128,3,'IMPLICIT',0}], no_length, mandatory),
         {{'n4TxAntenna-tm4', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n2TxAntenna-tm5'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,4,[],[{tag,128,4,'IMPLICIT',0}], no_length, mandatory),
         {{'n2TxAntenna-tm5', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n4TxAntenna-tm5'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,16,[],[{tag,128,5,'IMPLICIT',0}], no_length, mandatory),
         {{'n4TxAntenna-tm5', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n2TxAntenna-tm6'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,4,[],[{tag,128,6,'IMPLICIT',0}], no_length, mandatory),
         {{'n2TxAntenna-tm6', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'n4TxAntenna-tm6'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,16,[],[{tag,128,7,'IMPLICIT',0}], no_length, mandatory),
         {{'n4TxAntenna-tm6', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  AntennaInfoDedicated_ue-TransmitAntennaSelection
%%================================

'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'({'AntennaInfoDedicated_ue-TransmitAntennaSelection',Val}, TagIn) ->
   'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Val, TagIn);

'enc_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      release ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      setup ->
         case (case element(2,Val) of {_,Enumval2}->Enumval2;_->element(2,Val) end) of
closedLoop -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
openLoop -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'release'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{release, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'setup'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_enumerated(Bytes1,[],[{closedLoop,0},{openLoop,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{setup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_AntennaInfoDedicated'(Bytes, OptOrMand) ->
   'dec_AntennaInfoDedicated'(Bytes, OptOrMand, []).

'dec_AntennaInfoDedicated'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{tm1,0},{tm2,1},{tm3,2},{tm4,3},{tm5,4},{tm6,5},{tm7,6},{spare1,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_AntennaInfoDedicated_codebookSubsetRestriction'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_AntennaInfoDedicated_ue-TransmitAntennaSelection'(Bytes4, mandatory, [{tag,128,2,'EXPLICIT',32}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'AntennaInfoDedicated', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  AntennaInfoCommon
%%================================
'enc_AntennaInfoCommon'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,antennaPortsCount) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,antennaPortsCount) end) of
an1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
an2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
an4 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AntennaInfoCommon'(Bytes, OptOrMand) ->
   'dec_AntennaInfoCommon'(Bytes, OptOrMand, []).

'dec_AntennaInfoCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{an1,0},{an2,1},{an4,2},{spare1,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'AntennaInfoCommon', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SystemInformationBlockType11
%%================================
'enc_SystemInformationBlockType11'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(2,Val,messageIdentifier), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,serialNumber), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case (case ?RT_BER:cindex(4,Val,warningMessageSegmentType) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,warningMessageSegmentType) end) of
notLastSegment -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
lastSegment -> ?RT_BER:encode_enumerated(1,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,warningMessageSegmentNumber), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(6,Val,warningMessageSegment), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,dataCodingScheme) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(7,Val,dataCodingScheme), [{tag,128,5,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType11'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType11'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType11'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,16,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_enumerated(Bytes4,[],[{notLastSegment,0},{lastSegment,1}],[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,63},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type OCTET STRING
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_octet_string(Bytes6,[],[{tag,128,4,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 6 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes7,1,[{tag,128,5,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'SystemInformationBlockType11', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  SystemInformationBlockType10
%%================================
'enc_SystemInformationBlockType10'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(2,Val,messageIdentifier), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,serialNumber), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,warningType), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,warningSecurityInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(5,Val,warningSecurityInfo), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType10'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType10'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType10'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,16,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,2,[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes5,50,[{tag,128,3,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'SystemInformationBlockType10', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  SystemInformationBlockType9
%%================================
'enc_SystemInformationBlockType9'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'hnb-Name') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(2,Val,'hnb-Name'), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType9'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType9'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType9'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes2,{1,48},[{tag,128,0,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'SystemInformationBlockType9', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  BandClassInfoCDMA2000
%%================================
'enc_BandClassInfoCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,bandClass) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,bandClass) end) of
bc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
bc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
bc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
bc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
bc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
bc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
bc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
bc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
bc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
bc16 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
bc17 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
spare14 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
spare13 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
spare12 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
spare11 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,cellReselectionPriority) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'threshX-High'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'threshX-Low'), [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BandClassInfoCDMA2000'(Bytes, OptOrMand) ->
   'dec_BandClassInfoCDMA2000'(Bytes, OptOrMand, []).

'dec_BandClassInfoCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,63},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,63},[{tag,128,3,'IMPLICIT',0}], mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'BandClassInfoCDMA2000', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  BandClassListCDMA2000
%%================================

'enc_BandClassListCDMA2000'({'BandClassListCDMA2000',Val}, TagIn) ->
   'enc_BandClassListCDMA2000'(Val, TagIn);

'enc_BandClassListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BandClassListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassInfoCDMA2000'(H, []),
   'enc_BandClassListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassListCDMA2000'(Bytes, OptOrMand) ->
   'dec_BandClassListCDMA2000'(Bytes, OptOrMand, []).

'dec_BandClassListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BandClassInfoCDMA2000'/3, [], []).




%%================================
%%  PhysCellIdListCDMA2000
%%================================

'enc_PhysCellIdListCDMA2000'({'PhysCellIdListCDMA2000',Val}, TagIn) ->
   'enc_PhysCellIdListCDMA2000'(Val, TagIn);

'enc_PhysCellIdListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PhysCellIdListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PhysCellIdListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_PhysCellIdListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PhysCellIdListCDMA2000'(Bytes, OptOrMand) ->
   'dec_PhysCellIdListCDMA2000'(Bytes, OptOrMand, []).

'dec_PhysCellIdListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,511},[], mandatory)
end, [], []).




%%================================
%%  NeighCellsPerBandclassCDMA2000
%%================================
'enc_NeighCellsPerBandclassCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,arfcn), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PhysCellIdListCDMA2000'(?RT_BER:cindex(3,Val,physCellIdList), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_NeighCellsPerBandclassCDMA2000'(Bytes, OptOrMand) ->
   'dec_NeighCellsPerBandclassCDMA2000'(Bytes, OptOrMand, []).

'dec_NeighCellsPerBandclassCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,2047},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PhysCellIdListCDMA2000
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PhysCellIdListCDMA2000'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'NeighCellsPerBandclassCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  NeighCellsPerBandclassListCDMA2000
%%================================

'enc_NeighCellsPerBandclassListCDMA2000'({'NeighCellsPerBandclassListCDMA2000',Val}, TagIn) ->
   'enc_NeighCellsPerBandclassListCDMA2000'(Val, TagIn);

'enc_NeighCellsPerBandclassListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NeighCellsPerBandclassListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_NeighCellsPerBandclassListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NeighCellsPerBandclassListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NeighCellsPerBandclassCDMA2000'(H, []),
   'enc_NeighCellsPerBandclassListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_NeighCellsPerBandclassListCDMA2000'(Bytes, OptOrMand) ->
   'dec_NeighCellsPerBandclassListCDMA2000'(Bytes, OptOrMand, []).

'dec_NeighCellsPerBandclassListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_NeighCellsPerBandclassCDMA2000'/3, [], []).




%%================================
%%  NeighCellCDMA2000
%%================================
'enc_NeighCellCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,bandClass) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,bandClass) end) of
bc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
bc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
bc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
bc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
bc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
bc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
bc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
bc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
bc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
bc16 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
bc17 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
spare14 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
spare13 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
spare12 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
spare11 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:NeighCellsPerBandclassListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NeighCellsPerBandclassListCDMA2000'(?RT_BER:cindex(3,Val,neighCellsPerFreqList), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_NeighCellCDMA2000'(Bytes, OptOrMand) ->
   'dec_NeighCellCDMA2000'(Bytes, OptOrMand, []).

'dec_NeighCellCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:NeighCellsPerBandclassListCDMA2000
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_NeighCellsPerBandclassListCDMA2000'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'NeighCellCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  NeighCellListCDMA2000
%%================================

'enc_NeighCellListCDMA2000'({'NeighCellListCDMA2000',Val}, TagIn) ->
   'enc_NeighCellListCDMA2000'(Val, TagIn);

'enc_NeighCellListCDMA2000'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_NeighCellListCDMA2000_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_NeighCellListCDMA2000_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_NeighCellListCDMA2000_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_NeighCellCDMA2000'(H, []),
   'enc_NeighCellListCDMA2000_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_NeighCellListCDMA2000'(Bytes, OptOrMand) ->
   'dec_NeighCellListCDMA2000'(Bytes, OptOrMand, []).

'dec_NeighCellListCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_NeighCellCDMA2000'/3, [], []).




%%================================
%%  CellReselectionParametersCDMA2000
%%================================
'enc_CellReselectionParametersCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BandClassListCDMA2000
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BandClassListCDMA2000'(?RT_BER:cindex(2,Val,bandClassList), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:NeighCellListCDMA2000
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_NeighCellListCDMA2000'(?RT_BER:cindex(3,Val,neighCellList), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'t-ReselectionCDMA2000'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'t-ReselectionCDMA2000-SF') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(?RT_BER:cindex(5,Val,'t-ReselectionCDMA2000-SF'), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CellReselectionParametersCDMA2000'(Bytes, OptOrMand) ->
   'dec_CellReselectionParametersCDMA2000'(Bytes, OptOrMand, []).

'dec_CellReselectionParametersCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BandClassListCDMA2000
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_BandClassListCDMA2000'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:NeighCellListCDMA2000
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_NeighCellListCDMA2000'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,7},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_SpeedStateScaleFactors'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'CellReselectionParametersCDMA2000', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  SystemInformationBlockType8
%%================================
'enc_SystemInformationBlockType8'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SystemTimeInfoCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,systemTimeInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemTimeInfoCDMA2000'(?RT_BER:cindex(2,Val,systemTimeInfo), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,searchWindowSize) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,searchWindowSize), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,parametersHRPD) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType8_parametersHRPD'(?RT_BER:cindex(4,Val,parametersHRPD), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,parameters1XRTT) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType8_parameters1XRTT'(?RT_BER:cindex(5,Val,parameters1XRTT), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType8_parametersHRPD
%%================================
'enc_SystemInformationBlockType8_parametersHRPD'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PreRegistrationInfoHRPD
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PreRegistrationInfoHRPD'(?RT_BER:cindex(2,Val,preRegistrationInfoHRPD), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,cellReselectionParametersHRPD) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellReselectionParametersCDMA2000'(?RT_BER:cindex(3,Val,cellReselectionParametersHRPD), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType8_parametersHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PreRegistrationInfoHRPD
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PreRegistrationInfoHRPD'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CellReselectionParametersCDMA2000'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformationBlockType8_parametersHRPD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  SystemInformationBlockType8_parameters1XRTT
%%================================
'enc_SystemInformationBlockType8_parameters1XRTT'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CSFB-RegistrationParam1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'csfb-RegistrationParam1XRTT') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFB-RegistrationParam1XRTT'(?RT_BER:cindex(2,Val,'csfb-RegistrationParam1XRTT'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,longCodeState1XRTT) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',42}], ?RT_BER:cindex(3,Val,longCodeState1XRTT), [], [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,cellReselectionParameters1XRTT) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellReselectionParametersCDMA2000'(?RT_BER:cindex(4,Val,cellReselectionParameters1XRTT), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType8_parameters1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CSFB-RegistrationParam1XRTT OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_CSFB-RegistrationParam1XRTT'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,42,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CellReselectionParametersCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CellReselectionParametersCDMA2000'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SystemInformationBlockType8_parameters1XRTT', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


'dec_SystemInformationBlockType8'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType8'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType8'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SystemTimeInfoCDMA2000 OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SystemTimeInfoCDMA2000'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,15},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_SystemInformationBlockType8_parametersHRPD'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_SystemInformationBlockType8_parameters1XRTT'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'SystemInformationBlockType8', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  CarrierFreqsInfoGERAN
%%================================
'enc_CarrierFreqsInfoGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(?RT_BER:cindex(2,Val,carrierFreqs), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqsInfoGERAN_commonInfo'(?RT_BER:cindex(3,Val,commonInfo), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CarrierFreqsInfoGERAN_commonInfo
%%================================
'enc_CarrierFreqsInfoGERAN_commonInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,cellReselectionPriority) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,cellReselectionPriority), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(3,Val,'ncc-Permitted'), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'q-RxLevMin'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'p-MaxGERAN') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'p-MaxGERAN'), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,'threshX-High'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,'threshX-Low'), [{tag,128,5,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CarrierFreqsInfoGERAN_commonInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,7},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,8,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,45},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_integer(Bytes5,{0,39},[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{0,31},[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,{0,31},[{tag,128,5,'IMPLICIT',0}], mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'CarrierFreqsInfoGERAN_commonInfo', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


'dec_CarrierFreqsInfoGERAN'(Bytes, OptOrMand) ->
   'dec_CarrierFreqsInfoGERAN'(Bytes, OptOrMand, []).

'dec_CarrierFreqsInfoGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CarrierFreqsGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CarrierFreqsInfoGERAN_commonInfo'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'CarrierFreqsInfoGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CarrierFreqsInfoListGERAN
%%================================

'enc_CarrierFreqsInfoListGERAN'({'CarrierFreqsInfoListGERAN',Val}, TagIn) ->
   'enc_CarrierFreqsInfoListGERAN'(Val, TagIn);

'enc_CarrierFreqsInfoListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqsInfoListGERAN_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CarrierFreqsInfoListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqsInfoListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqsInfoGERAN'(H, []),
   'enc_CarrierFreqsInfoListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqsInfoListGERAN'(Bytes, OptOrMand) ->
   'dec_CarrierFreqsInfoListGERAN'(Bytes, OptOrMand, []).

'dec_CarrierFreqsInfoListGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CarrierFreqsInfoGERAN'/3, [], []).




%%================================
%%  SystemInformationBlockType7
%%================================
'enc_SystemInformationBlockType7'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'t-ReselectionGERAN'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'t-ReselectionGERAN-SF') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(?RT_BER:cindex(3,Val,'t-ReselectionGERAN-SF'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CarrierFreqsInfoListGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,carrierFreqsInfoList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqsInfoListGERAN'(?RT_BER:cindex(4,Val,carrierFreqsInfoList), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType7'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType7'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType7'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,7},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SpeedStateScaleFactors'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:CarrierFreqsInfoListGERAN OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CarrierFreqsInfoListGERAN'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'SystemInformationBlockType7', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CarrierFreqUTRA-TDD
%%================================
'enc_CarrierFreqUTRA-TDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,cellReselectionPriority) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'threshX-High'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'threshX-Low'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,'q-RxLevMin'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,'p-MaxUTRA'), [{tag,128,5,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierFreqUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_CarrierFreqUTRA-TDD'(Bytes, OptOrMand, []).

'dec_CarrierFreqUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,16383},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,31},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,31},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{-60,-13},[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,{-50,33},[{tag,128,5,'IMPLICIT',0}], mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'CarrierFreqUTRA-TDD', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  CarrierFreqListUTRA-TDD
%%================================

'enc_CarrierFreqListUTRA-TDD'({'CarrierFreqListUTRA-TDD',Val}, TagIn) ->
   'enc_CarrierFreqListUTRA-TDD'(Val, TagIn);

'enc_CarrierFreqListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqListUTRA-TDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CarrierFreqListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqUTRA-TDD'(H, []),
   'enc_CarrierFreqListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqListUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_CarrierFreqListUTRA-TDD'(Bytes, OptOrMand, []).

'dec_CarrierFreqListUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CarrierFreqUTRA-TDD'/3, [], []).




%%================================
%%  CarrierFreqUTRA-FDD
%%================================
'enc_CarrierFreqUTRA-FDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,cellReselectionPriority) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'threshX-High'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'threshX-Low'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_integer([], ?RT_BER:cindex(6,Val,'q-RxLevMin'), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,'p-MaxUTRA'), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,'q-QualMin'), [{tag,128,6,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_CarrierFreqUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_CarrierFreqUTRA-FDD'(Bytes, OptOrMand, []).

'dec_CarrierFreqUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,16383},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,31},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,31},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type INTEGER
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_integer(Bytes6,{-60,-13},[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,{-50,33},[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_integer(Bytes8,{-24,0},[{tag,128,6,'IMPLICIT',0}], mandatory),

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,ext),
   {{'CarrierFreqUTRA-FDD', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


%%================================
%%  CarrierFreqListUTRA-FDD
%%================================

'enc_CarrierFreqListUTRA-FDD'({'CarrierFreqListUTRA-FDD',Val}, TagIn) ->
   'enc_CarrierFreqListUTRA-FDD'(Val, TagIn);

'enc_CarrierFreqListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqListUTRA-FDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_CarrierFreqListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CarrierFreqListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CarrierFreqUTRA-FDD'(H, []),
   'enc_CarrierFreqListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_CarrierFreqListUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_CarrierFreqListUTRA-FDD'(Bytes, OptOrMand, []).

'dec_CarrierFreqListUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_CarrierFreqUTRA-FDD'/3, [], []).




%%================================
%%  SystemInformationBlockType6
%%================================
'enc_SystemInformationBlockType6'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'carrierFreqListUTRA-FDD') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqListUTRA-FDD'(?RT_BER:cindex(2,Val,'carrierFreqListUTRA-FDD'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'carrierFreqListUTRA-TDD') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CarrierFreqListUTRA-TDD'(?RT_BER:cindex(3,Val,'carrierFreqListUTRA-TDD'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'t-ReselectionUTRA'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'t-ReselectionUTRA-SF') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(?RT_BER:cindex(5,Val,'t-ReselectionUTRA-SF'), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType6'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType6'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType6'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_CarrierFreqListUTRA-FDD'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CarrierFreqListUTRA-TDD'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,7},[{tag,128,2,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_SpeedStateScaleFactors'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,ext),
   {{'SystemInformationBlockType6', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  InterFreqBlackCellList
%%================================

'enc_InterFreqBlackCellList'({'InterFreqBlackCellList',Val}, TagIn) ->
   'enc_InterFreqBlackCellList'(Val, TagIn);

'enc_InterFreqBlackCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqBlackCellList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_InterFreqBlackCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqBlackCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdRange'(H, []),
   'enc_InterFreqBlackCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqBlackCellList'(Bytes, OptOrMand) ->
   'dec_InterFreqBlackCellList'(Bytes, OptOrMand, []).

'dec_InterFreqBlackCellList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PhysCellIdRange'/3, [], []).




%%================================
%%  InterFreqNeighCellInfo
%%================================
'enc_InterFreqNeighCellInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'q-OffsetCell') of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,'q-OffsetCell') end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
'dB-22' -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
'dB-20' -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
'dB-18' -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
'dB-16' -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
'dB-14' -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
'dB-12' -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
'dB-10' -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
'dB-8' -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
'dB-6' -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
'dB-5' -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
'dB-1' -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(16,[{tag,128,1,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(17,[{tag,128,1,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(18,[{tag,128,1,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(19,[{tag,128,1,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(20,[{tag,128,1,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(21,[{tag,128,1,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(22,[{tag,128,1,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(23,[{tag,128,1,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(24,[{tag,128,1,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(25,[{tag,128,1,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(26,[{tag,128,1,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(27,[{tag,128,1,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(28,[{tag,128,1,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(29,[{tag,128,1,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(30,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_InterFreqNeighCellInfo'(Bytes, OptOrMand) ->
   'dec_InterFreqNeighCellInfo'(Bytes, OptOrMand, []).

'dec_InterFreqNeighCellInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,503},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'InterFreqNeighCellInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  InterFreqNeighCellList
%%================================

'enc_InterFreqNeighCellList'({'InterFreqNeighCellList',Val}, TagIn) ->
   'enc_InterFreqNeighCellList'(Val, TagIn);

'enc_InterFreqNeighCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqNeighCellList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_InterFreqNeighCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqNeighCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqNeighCellInfo'(H, []),
   'enc_InterFreqNeighCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqNeighCellList'(Bytes, OptOrMand) ->
   'dec_InterFreqNeighCellList'(Bytes, OptOrMand, []).

'dec_InterFreqNeighCellList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_InterFreqNeighCellInfo'/3, [], []).




%%================================
%%  InterFreqCarrierFreqInfo
%%================================
'enc_InterFreqCarrierFreqInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'dl-CarrierFreq'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'q-RxLevMin'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'p-Max') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'p-Max'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,'t-ReselectionEUTRA'), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'t-ReselectionEUTRA-SF') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(?RT_BER:cindex(6,Val,'t-ReselectionEUTRA-SF'), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_integer([], ?RT_BER:cindex(7,Val,'threshX-High'), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,'threshX-Low'), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes8,EncLen8} = case (case ?RT_BER:cindex(9,Val,allowedMeasBandwidth) of {_,Enumval7}->Enumval7;_->?RT_BER:cindex(9,Val,allowedMeasBandwidth) end) of
mbw6 -> ?RT_BER:encode_enumerated(0,[{tag,128,7,'IMPLICIT',0}]);
mbw15 -> ?RT_BER:encode_enumerated(1,[{tag,128,7,'IMPLICIT',0}]);
mbw25 -> ?RT_BER:encode_enumerated(2,[{tag,128,7,'IMPLICIT',0}]);
mbw50 -> ?RT_BER:encode_enumerated(3,[{tag,128,7,'IMPLICIT',0}]);
mbw75 -> ?RT_BER:encode_enumerated(4,[{tag,128,7,'IMPLICIT',0}]);
mbw100 -> ?RT_BER:encode_enumerated(5,[{tag,128,7,'IMPLICIT',0}]);
Enumval8 -> exit({error,{asn1, {enumerated_not_in_range,Enumval8}}})
end,

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes9,EncLen9} = ?RT_BER:encode_boolean(?RT_BER:cindex(10,Val,presenceAntennaPort1), [{tag,128,8,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case ?RT_BER:cindex(11,Val,cellReselectionPriority) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(11,Val,cellReselectionPriority), [{tag,128,9,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 11 with type BIT STRING
%%-------------------------------------------------
   {EncBytes11,EncLen11} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], ?RT_BER:cindex(12,Val,neighCellConfig), [], [{tag,128,10,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 12 with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {EncBytes12,EncLen12} =  case ?RT_BER:cindex(13,Val,'q-OffsetFreq') of
         asn1_DEFAULT -> {<<>>,0};
         dB0 -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(13,Val,'q-OffsetFreq') of {_,Enumval12}->Enumval12;_->?RT_BER:cindex(13,Val,'q-OffsetFreq') end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,[{tag,128,11,'IMPLICIT',0}]);
'dB-22' -> ?RT_BER:encode_enumerated(1,[{tag,128,11,'IMPLICIT',0}]);
'dB-20' -> ?RT_BER:encode_enumerated(2,[{tag,128,11,'IMPLICIT',0}]);
'dB-18' -> ?RT_BER:encode_enumerated(3,[{tag,128,11,'IMPLICIT',0}]);
'dB-16' -> ?RT_BER:encode_enumerated(4,[{tag,128,11,'IMPLICIT',0}]);
'dB-14' -> ?RT_BER:encode_enumerated(5,[{tag,128,11,'IMPLICIT',0}]);
'dB-12' -> ?RT_BER:encode_enumerated(6,[{tag,128,11,'IMPLICIT',0}]);
'dB-10' -> ?RT_BER:encode_enumerated(7,[{tag,128,11,'IMPLICIT',0}]);
'dB-8' -> ?RT_BER:encode_enumerated(8,[{tag,128,11,'IMPLICIT',0}]);
'dB-6' -> ?RT_BER:encode_enumerated(9,[{tag,128,11,'IMPLICIT',0}]);
'dB-5' -> ?RT_BER:encode_enumerated(10,[{tag,128,11,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(11,[{tag,128,11,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(12,[{tag,128,11,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(13,[{tag,128,11,'IMPLICIT',0}]);
'dB-1' -> ?RT_BER:encode_enumerated(14,[{tag,128,11,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(15,[{tag,128,11,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(16,[{tag,128,11,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(17,[{tag,128,11,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(18,[{tag,128,11,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(19,[{tag,128,11,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(20,[{tag,128,11,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(21,[{tag,128,11,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(22,[{tag,128,11,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(23,[{tag,128,11,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(24,[{tag,128,11,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(25,[{tag,128,11,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(26,[{tag,128,11,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(27,[{tag,128,11,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(28,[{tag,128,11,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(29,[{tag,128,11,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(30,[{tag,128,11,'IMPLICIT',0}]);
Enumval13 -> exit({error,{asn1, {enumerated_not_in_range,Enumval13}}})
end
       end,

%%-------------------------------------------------
%% attribute number 13   External EUTRA-RRC:InterFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes13,EncLen13} =  case ?RT_BER:cindex(14,Val,interFreqNeighCellList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterFreqNeighCellList'(?RT_BER:cindex(14,Val,interFreqNeighCellList), [{tag,128,12,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 14   External EUTRA-RRC:InterFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes14,EncLen14} =  case ?RT_BER:cindex(15,Val,interFreqBlackCellList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_InterFreqBlackCellList'(?RT_BER:cindex(15,Val,interFreqBlackCellList), [{tag,128,13,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10, EncBytes11, EncBytes12, EncBytes13, EncBytes14],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10 + EncLen11 + EncLen12 + EncLen13 + EncLen14,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_InterFreqCarrierFreqInfo'(Bytes, OptOrMand) ->
   'dec_InterFreqCarrierFreqInfo'(Bytes, OptOrMand, []).

'dec_InterFreqCarrierFreqInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{-70,-22},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,{-30,33},[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{0,7},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_SpeedStateScaleFactors'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type INTEGER
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_integer(Bytes7,{0,31},[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_integer(Bytes8,{0,31},[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type ENUMERATED
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_enumerated(Bytes9,[],[{mbw6,0},{mbw15,1},{mbw25,2},{mbw50,3},{mbw75,4},{mbw100,5}],[{tag,128,7,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type BOOLEAN
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = ?RT_BER:decode_boolean(Bytes10,[{tag,128,8,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 10 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term10,Bytes12,Rb11} = case Bytes11 of
<<2:2,_:1,9:5,_/binary>> ->
?RT_BER:decode_integer(Bytes11,{0,7},[{tag,128,9,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes11, 0 }
end,

%%-------------------------------------------------
%% attribute number 11 with type BIT STRING
%%-------------------------------------------------
   {Term11,Bytes13,Rb12} = ?RT_BER:decode_bit_string(Bytes12,2,[],[{tag,128,10,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 12 with type ENUMERATED DEFAULT = dB0
%%-------------------------------------------------
   {Term12,Bytes14,Rb13} = case Bytes13 of
<<2:2,_:1,11:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes13,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],[{tag,128,11,'IMPLICIT',0}], mandatory);
_ ->
{dB0,Bytes13, 0 }
end,

%%-------------------------------------------------
%% attribute number 13   External EUTRA-RRC:InterFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {Term13,Bytes15,Rb14} = case Bytes14 of
<<2:2,_:1,12:5,_/binary>> ->
'dec_InterFreqNeighCellList'(Bytes14, opt_or_default, [{tag,128,12,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes14, 0 }
end,

%%-------------------------------------------------
%% attribute number 14   External EUTRA-RRC:InterFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {Term14,Bytes16,Rb15} = case Bytes15 of
<<2:2,_:1,13:5,_/binary>> ->
'dec_InterFreqBlackCellList'(Bytes15, opt_or_default, [{tag,128,13,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes15, 0 }
end,

   {Bytes17,Rb16} = ?RT_BER:restbytes2(RemBytes, Bytes16,ext),
   {{'InterFreqCarrierFreqInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10, Term11, Term12, Term13, Term14}, Bytes17, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11+Rb12+Rb13+Rb14+Rb15+Rb16}.


%%================================
%%  InterFreqCarrierFreqList
%%================================

'enc_InterFreqCarrierFreqList'({'InterFreqCarrierFreqList',Val}, TagIn) ->
   'enc_InterFreqCarrierFreqList'(Val, TagIn);

'enc_InterFreqCarrierFreqList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_InterFreqCarrierFreqList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_InterFreqCarrierFreqList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_InterFreqCarrierFreqList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_InterFreqCarrierFreqInfo'(H, []),
   'enc_InterFreqCarrierFreqList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_InterFreqCarrierFreqList'(Bytes, OptOrMand) ->
   'dec_InterFreqCarrierFreqList'(Bytes, OptOrMand, []).

'dec_InterFreqCarrierFreqList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_InterFreqCarrierFreqInfo'/3, [], []).




%%================================
%%  SystemInformationBlockType5
%%================================
'enc_SystemInformationBlockType5'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InterFreqCarrierFreqList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InterFreqCarrierFreqList'(?RT_BER:cindex(2,Val,interFreqCarrierFreqList), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType5'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType5'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType5'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InterFreqCarrierFreqList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_InterFreqCarrierFreqList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'SystemInformationBlockType5', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  IntraFreqBlackCellList
%%================================

'enc_IntraFreqBlackCellList'({'IntraFreqBlackCellList',Val}, TagIn) ->
   'enc_IntraFreqBlackCellList'(Val, TagIn);

'enc_IntraFreqBlackCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraFreqBlackCellList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_IntraFreqBlackCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraFreqBlackCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PhysCellIdRange'(H, []),
   'enc_IntraFreqBlackCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraFreqBlackCellList'(Bytes, OptOrMand) ->
   'dec_IntraFreqBlackCellList'(Bytes, OptOrMand, []).

'dec_IntraFreqBlackCellList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PhysCellIdRange'/3, [], []).




%%================================
%%  IntraFreqNeighCellInfo
%%================================
'enc_IntraFreqNeighCellInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'q-OffsetCell') of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,'q-OffsetCell') end) of
'dB-24' -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
'dB-22' -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
'dB-20' -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
'dB-18' -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
'dB-16' -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
'dB-14' -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
'dB-12' -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
'dB-10' -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
'dB-8' -> ?RT_BER:encode_enumerated(8,[{tag,128,1,'IMPLICIT',0}]);
'dB-6' -> ?RT_BER:encode_enumerated(9,[{tag,128,1,'IMPLICIT',0}]);
'dB-5' -> ?RT_BER:encode_enumerated(10,[{tag,128,1,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(11,[{tag,128,1,'IMPLICIT',0}]);
'dB-3' -> ?RT_BER:encode_enumerated(12,[{tag,128,1,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(13,[{tag,128,1,'IMPLICIT',0}]);
'dB-1' -> ?RT_BER:encode_enumerated(14,[{tag,128,1,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(15,[{tag,128,1,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(16,[{tag,128,1,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(17,[{tag,128,1,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(18,[{tag,128,1,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(19,[{tag,128,1,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(20,[{tag,128,1,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(21,[{tag,128,1,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(22,[{tag,128,1,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(23,[{tag,128,1,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(24,[{tag,128,1,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(25,[{tag,128,1,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(26,[{tag,128,1,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(27,[{tag,128,1,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(28,[{tag,128,1,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(29,[{tag,128,1,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(30,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IntraFreqNeighCellInfo'(Bytes, OptOrMand) ->
   'dec_IntraFreqNeighCellInfo'(Bytes, OptOrMand, []).

'dec_IntraFreqNeighCellInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,503},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{'dB-24',0},{'dB-22',1},{'dB-20',2},{'dB-18',3},{'dB-16',4},{'dB-14',5},{'dB-12',6},{'dB-10',7},{'dB-8',8},{'dB-6',9},{'dB-5',10},{'dB-4',11},{'dB-3',12},{'dB-2',13},{'dB-1',14},{dB0,15},{dB1,16},{dB2,17},{dB3,18},{dB4,19},{dB5,20},{dB6,21},{dB8,22},{dB10,23},{dB12,24},{dB14,25},{dB16,26},{dB18,27},{dB20,28},{dB22,29},{dB24,30}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'IntraFreqNeighCellInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  IntraFreqNeighCellList
%%================================

'enc_IntraFreqNeighCellList'({'IntraFreqNeighCellList',Val}, TagIn) ->
   'enc_IntraFreqNeighCellList'(Val, TagIn);

'enc_IntraFreqNeighCellList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IntraFreqNeighCellList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_IntraFreqNeighCellList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IntraFreqNeighCellList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_IntraFreqNeighCellInfo'(H, []),
   'enc_IntraFreqNeighCellList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IntraFreqNeighCellList'(Bytes, OptOrMand) ->
   'dec_IntraFreqNeighCellList'(Bytes, OptOrMand, []).

'dec_IntraFreqNeighCellList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_IntraFreqNeighCellInfo'/3, [], []).




%%================================
%%  SystemInformationBlockType4
%%================================
'enc_SystemInformationBlockType4'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:IntraFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,intraFreqNeighCellList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraFreqNeighCellList'(?RT_BER:cindex(2,Val,intraFreqNeighCellList), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:IntraFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,intraFreqBlackCellList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IntraFreqBlackCellList'(?RT_BER:cindex(3,Val,intraFreqBlackCellList), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PhysCellIdRange OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'csg-PhysCellIdRange') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PhysCellIdRange'(?RT_BER:cindex(4,Val,'csg-PhysCellIdRange'), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SystemInformationBlockType4'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType4'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType4'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:IntraFreqNeighCellList OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_IntraFreqNeighCellList'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:IntraFreqBlackCellList OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_IntraFreqBlackCellList'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:PhysCellIdRange OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_PhysCellIdRange'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'SystemInformationBlockType4', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SystemInformationBlockType3
%%================================
'enc_SystemInformationBlockType3'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformationBlockType3_cellReselectionInfoCommon'(?RT_BER:cindex(2,Val,cellReselectionInfoCommon), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType3_cellReselectionServingFreqInfo'(?RT_BER:cindex(3,Val,cellReselectionServingFreqInfo), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_SystemInformationBlockType3_intraFreqCellReselectionInfo'(?RT_BER:cindex(4,Val,intraFreqCellReselectionInfo), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'q-Hyst') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'q-Hyst') end) of
dB0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
dB1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
dB2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
dB3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
dB4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
dB5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
dB6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
dB8 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
dB10 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
dB12 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
dB14 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
dB16 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
dB18 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
dB20 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
dB22 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
dB24 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,speedStateReselectionPars) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(?RT_BER:cindex(3,Val,speedStateReselectionPars), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MobilityStateParameters'(?RT_BER:cindex(2,Val,mobilityStateParameters), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(?RT_BER:cindex(3,Val,'q-HystSF'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF
%%================================
'enc_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'sf-Medium') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'sf-Medium') end) of
'dB-6' -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'sf-High') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'sf-High') end) of
'dB-6' -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
'dB-4' -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
'dB-2' -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
dB0 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{'dB-6',0},{'dB-4',1},{'dB-2',2},{dB0,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{'dB-6',0},{'dB-4',1},{'dB-2',2},{dB0,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MobilityStateParameters
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MobilityStateParameters'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars_q-HystSF'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_SystemInformationBlockType3_cellReselectionInfoCommon'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{dB0,0},{dB1,1},{dB2,2},{dB3,3},{dB4,4},{dB5,5},{dB6,6},{dB8,7},{dB10,8},{dB12,9},{dB14,10},{dB16,11},{dB18,12},{dB20,13},{dB22,14},{dB24,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SystemInformationBlockType3_cellReselectionInfoCommon_speedStateReselectionPars'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformationBlockType3_cellReselectionInfoCommon', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  SystemInformationBlockType3_cellReselectionServingFreqInfo
%%================================
'enc_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'s-NonIntraSearch') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'s-NonIntraSearch'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,threshServingLow), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,cellReselectionPriority), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,31},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,31},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,7},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SystemInformationBlockType3_cellReselectionServingFreqInfo', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  SystemInformationBlockType3_intraFreqCellReselectionInfo
%%================================
'enc_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'q-RxLevMin'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'p-Max') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'p-Max'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'s-IntraSearch') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'s-IntraSearch'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,allowedMeasBandwidth) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(5,Val,allowedMeasBandwidth) of {_,Enumval4}->Enumval4;_->?RT_BER:cindex(5,Val,allowedMeasBandwidth) end) of
mbw6 -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
mbw15 -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
mbw25 -> ?RT_BER:encode_enumerated(2,[{tag,128,3,'IMPLICIT',0}]);
mbw50 -> ?RT_BER:encode_enumerated(3,[{tag,128,3,'IMPLICIT',0}]);
mbw75 -> ?RT_BER:encode_enumerated(4,[{tag,128,3,'IMPLICIT',0}]);
mbw100 -> ?RT_BER:encode_enumerated(5,[{tag,128,3,'IMPLICIT',0}]);
Enumval5 -> exit({error,{asn1, {enumerated_not_in_range,Enumval5}}})
end
       end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes5,EncLen5} = ?RT_BER:encode_boolean(?RT_BER:cindex(6,Val,presenceAntennaPort1), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6 with type BIT STRING
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], ?RT_BER:cindex(7,Val,neighCellConfig), [], [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {EncBytes7,EncLen7} = ?RT_BER:encode_integer([], ?RT_BER:cindex(8,Val,'t-ReselectionEUTRA'), [{tag,128,6,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case ?RT_BER:cindex(9,Val,'t-ReselectionEUTRA-SF') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpeedStateScaleFactors'(?RT_BER:cindex(9,Val,'t-ReselectionEUTRA-SF'), [{tag,128,7,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-70,-22},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{-30,33},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,{0,31},[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes5,[],[{mbw6,0},{mbw15,1},{mbw25,2},{mbw50,3},{mbw75,4},{mbw100,5}],[{tag,128,3,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5 with type BOOLEAN
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_boolean(Bytes6,[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BIT STRING
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_bit_string(Bytes7,2,[],[{tag,128,5,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 7 with type INTEGER
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_integer(Bytes8,{0,7},[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8   External EUTRA-RRC:SpeedStateScaleFactors OPTIONAL
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = case Bytes9 of
<<2:2,_:1,7:5,_/binary>> ->
'dec_SpeedStateScaleFactors'(Bytes9, opt_or_default, [{tag,128,7,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes9, 0 }
end,

   {Bytes11,Rb10} = ?RT_BER:restbytes2(RemBytes, Bytes10,noext),
   {{'SystemInformationBlockType3_intraFreqCellReselectionInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8}, Bytes11, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10}.


'dec_SystemInformationBlockType3'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType3'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType3'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SystemInformationBlockType3_cellReselectionInfoCommon'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SystemInformationBlockType3_cellReselectionServingFreqInfo'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_SystemInformationBlockType3_intraFreqCellReselectionInfo'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,ext),
   {{'SystemInformationBlockType3', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MBSFN-SubframeConfig
%%================================
'enc_MBSFN-SubframeConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,radioframeAllocationPeriod) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,radioframeAllocationPeriod) end) of
n1 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n2 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n4 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n8 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n16 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n32 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,radioframeAllocationOffset), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_MBSFN-SubframeConfig_subframeAllocation'(?RT_BER:cindex(4,Val,subframeAllocation), [{tag,128,2,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MBSFN-SubframeConfig_subframeAllocation
%%================================

'enc_MBSFN-SubframeConfig_subframeAllocation'({'MBSFN-SubframeConfig_subframeAllocation',Val}, TagIn) ->
   'enc_MBSFN-SubframeConfig_subframeAllocation'(Val, TagIn);

'enc_MBSFN-SubframeConfig_subframeAllocation'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      oneFrame ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',6}], element(2,Val), [], [{tag,128,0,'IMPLICIT',0}]);
      fourFrames ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',24}], element(2,Val), [], [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MBSFN-SubframeConfig_subframeAllocation'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'oneFrame'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,6,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{oneFrame, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'fourFrames'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,24,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{fourFrames, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MBSFN-SubframeConfig'(Bytes, OptOrMand) ->
   'dec_MBSFN-SubframeConfig'(Bytes, OptOrMand, []).

'dec_MBSFN-SubframeConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n1,0},{n2,1},{n4,2},{n8,3},{n16,4},{n32,5}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type CHOICE
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_MBSFN-SubframeConfig_subframeAllocation'(Bytes4, mandatory, [{tag,128,2,'EXPLICIT',32}]),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MBSFN-SubframeConfig', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MBSFN-SubframeConfigList
%%================================

'enc_MBSFN-SubframeConfigList'({'MBSFN-SubframeConfigList',Val}, TagIn) ->
   'enc_MBSFN-SubframeConfigList'(Val, TagIn);

'enc_MBSFN-SubframeConfigList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_MBSFN-SubframeConfigList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_MBSFN-SubframeConfigList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_MBSFN-SubframeConfigList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_MBSFN-SubframeConfig'(H, []),
   'enc_MBSFN-SubframeConfigList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_MBSFN-SubframeConfigList'(Bytes, OptOrMand) ->
   'dec_MBSFN-SubframeConfigList'(Bytes, OptOrMand, []).

'dec_MBSFN-SubframeConfigList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_MBSFN-SubframeConfig'/3, [], []).




%%================================
%%  AC-BarringConfig
%%================================
'enc_AC-BarringConfig'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'ac-BarringFactor') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'ac-BarringFactor') end) of
p00 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
p05 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
p10 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
p15 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
p20 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
p25 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
p30 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
p40 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
p50 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
p60 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
p70 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
p75 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
p80 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
p85 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
p90 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
p95 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'ac-BarringTime') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(3,Val,'ac-BarringTime') end) of
s4 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
s8 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
s16 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
s32 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
s64 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
s128 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
s256 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
s512 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',5}], ?RT_BER:cindex(4,Val,'ac-BarringForSpecialAC'), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_AC-BarringConfig'(Bytes, OptOrMand) ->
   'dec_AC-BarringConfig'(Bytes, OptOrMand, []).

'dec_AC-BarringConfig'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{p00,0},{p05,1},{p10,2},{p15,3},{p20,4},{p25,5},{p30,6},{p40,7},{p50,8},{p60,9},{p70,10},{p75,11},{p80,12},{p85,13},{p90,14},{p95,15}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{s4,0},{s8,1},{s16,2},{s32,3},{s64,4},{s128,5},{s256,6},{s512,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,5,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'AC-BarringConfig', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  SystemInformationBlockType2
%%================================
'enc_SystemInformationBlockType2'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'ac-BarringInfo') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType2_ac-BarringInfo'(?RT_BER:cindex(2,Val,'ac-BarringInfo'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RadioResourceConfigCommonSIB
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RadioResourceConfigCommonSIB'(?RT_BER:cindex(3,Val,radioResourceConfigCommon), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:UE-TimersAndConstants
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_UE-TimersAndConstants'(?RT_BER:cindex(4,Val,'ue-TimersAndConstants'), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_SystemInformationBlockType2_freqInfo'(?RT_BER:cindex(5,Val,freqInfo), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:MBSFN-SubframeConfigList OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,'mbsfn-SubframeConfigList') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MBSFN-SubframeConfigList'(?RT_BER:cindex(6,Val,'mbsfn-SubframeConfigList'), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes6,EncLen6} = case (case ?RT_BER:cindex(7,Val,timeAlignmentTimerCommon) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(7,Val,timeAlignmentTimerCommon) end) of
sf500 -> ?RT_BER:encode_enumerated(0,[{tag,128,5,'IMPLICIT',0}]);
sf750 -> ?RT_BER:encode_enumerated(1,[{tag,128,5,'IMPLICIT',0}]);
sf1280 -> ?RT_BER:encode_enumerated(2,[{tag,128,5,'IMPLICIT',0}]);
sf1920 -> ?RT_BER:encode_enumerated(3,[{tag,128,5,'IMPLICIT',0}]);
sf2560 -> ?RT_BER:encode_enumerated(4,[{tag,128,5,'IMPLICIT',0}]);
sf5120 -> ?RT_BER:encode_enumerated(5,[{tag,128,5,'IMPLICIT',0}]);
sf10240 -> ?RT_BER:encode_enumerated(6,[{tag,128,5,'IMPLICIT',0}]);
infinity -> ?RT_BER:encode_enumerated(7,[{tag,128,5,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType2_ac-BarringInfo
%%================================
'enc_SystemInformationBlockType2_ac-BarringInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,'ac-BarringForEmergency'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'ac-BarringForMO-Signalling') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AC-BarringConfig'(?RT_BER:cindex(3,Val,'ac-BarringForMO-Signalling'), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'ac-BarringForMO-Data') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AC-BarringConfig'(?RT_BER:cindex(4,Val,'ac-BarringForMO-Data'), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType2_ac-BarringInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_AC-BarringConfig'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:AC-BarringConfig OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_AC-BarringConfig'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SystemInformationBlockType2_ac-BarringInfo', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  SystemInformationBlockType2_freqInfo
%%================================
'enc_SystemInformationBlockType2_freqInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'ul-CarrierFreq') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'ul-CarrierFreq'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'ul-Bandwidth') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,'ul-Bandwidth') of {_,Enumval2}->Enumval2;_->?RT_BER:cindex(3,Val,'ul-Bandwidth') end) of
n6 -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
n15 -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
n25 -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
n50 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
n75 -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
n100 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,additionalSpectrumEmission), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType2_freqInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{n6,0},{n15,1},{n25,2},{n50,3},{n75,4},{n100,5}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{1,32},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SystemInformationBlockType2_freqInfo', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


'dec_SystemInformationBlockType2'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType2'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType2'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SystemInformationBlockType2_ac-BarringInfo'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RadioResourceConfigCommonSIB
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RadioResourceConfigCommonSIB'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:UE-TimersAndConstants
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = 'dec_UE-TimersAndConstants'(Bytes4, mandatory, [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = 'dec_SystemInformationBlockType2_freqInfo'(Bytes5, mandatory, [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:MBSFN-SubframeConfigList OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_MBSFN-SubframeConfigList'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type ENUMERATED
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_enumerated(Bytes7,[],[{sf500,0},{sf750,1},{sf1280,2},{sf1920,3},{sf2560,4},{sf5120,5},{sf10240,6},{infinity,7}],[{tag,128,5,'IMPLICIT',0}], mandatory),

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,ext),
   {{'SystemInformationBlockType2', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  ULInformationTransfer-r8-IEs
%%================================
'enc_ULInformationTransfer-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(?RT_BER:cindex(2,Val,dedicatedInfoType), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ULInformationTransfer-r8-IEs_dedicatedInfoType
%%================================

'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'({'ULInformationTransfer-r8-IEs_dedicatedInfoType',Val}, TagIn) ->
   'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn);

'enc_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      dedicatedInfoNAS ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'dedicatedInfoCDMA2000-1XRTT' ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'dedicatedInfoCDMA2000-HRPD' ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'dedicatedInfoNAS'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{dedicatedInfoNAS, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dedicatedInfoCDMA2000-1XRTT'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{'dedicatedInfoCDMA2000-1XRTT', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dedicatedInfoCDMA2000-HRPD'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),
         {{'dedicatedInfoCDMA2000-HRPD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  ULInformationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ULInformationTransfer-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_ULInformationTransfer-r8-IEs'(Bytes, OptOrMand) ->
   'dec_ULInformationTransfer-r8-IEs'(Bytes, OptOrMand, []).

'dec_ULInformationTransfer-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ULInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_ULInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'ULInformationTransfer-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  ULInformationTransfer
%%================================
'enc_ULInformationTransfer'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULInformationTransfer_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ULInformationTransfer_criticalExtensions
%%================================

'enc_ULInformationTransfer_criticalExtensions'({'ULInformationTransfer_criticalExtensions',Val}, TagIn) ->
   'enc_ULInformationTransfer_criticalExtensions'(Val, TagIn);

'enc_ULInformationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_ULInformationTransfer_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ULInformationTransfer_criticalExtensions_c1
%%================================

'enc_ULInformationTransfer_criticalExtensions_c1'({'ULInformationTransfer_criticalExtensions_c1',Val}, TagIn) ->
   'enc_ULInformationTransfer_criticalExtensions_c1'(Val, TagIn);

'enc_ULInformationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ulInformationTransfer-r8' ->
         'enc_ULInformationTransfer-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ULInformationTransfer_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'ulInformationTransfer-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULInformationTransfer-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'ulInformationTransfer-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  ULInformationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_ULInformationTransfer_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULInformationTransfer_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_ULInformationTransfer'(Bytes, OptOrMand) ->
   'dec_ULInformationTransfer'(Bytes, OptOrMand, []).

'dec_ULInformationTransfer'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ULInformationTransfer_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ULInformationTransfer', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  ULHandoverPreparationTransfer-r8-IEs
%%================================
'enc_ULHandoverPreparationTransfer-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'cdma2000-Type') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'cdma2000-Type') end) of
type1XRTT -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
typeHRPD -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,meid) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',56}], ?RT_BER:cindex(3,Val,meid), [], [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,dedicatedInfo), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(5,Val,nonCriticalExtension), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes, OptOrMand) ->
   'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes, OptOrMand, []).

'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{type1XRTT,0},{typeHRPD,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,56,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_ULHandoverPreparationTransfer-r8-IEs_nonCriticalExtension'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'ULHandoverPreparationTransfer-r8-IEs', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  ULHandoverPreparationTransfer
%%================================
'enc_ULHandoverPreparationTransfer'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ULHandoverPreparationTransfer_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions
%%================================

'enc_ULHandoverPreparationTransfer_criticalExtensions'({'ULHandoverPreparationTransfer_criticalExtensions',Val}, TagIn) ->
   'enc_ULHandoverPreparationTransfer_criticalExtensions'(Val, TagIn);

'enc_ULHandoverPreparationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions_c1
%%================================

'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'({'ULHandoverPreparationTransfer_criticalExtensions_c1',Val}, TagIn) ->
   'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(Val, TagIn);

'enc_ULHandoverPreparationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ulHandoverPreparationTransfer-r8' ->
         'enc_ULHandoverPreparationTransfer-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_ULHandoverPreparationTransfer_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'ulHandoverPreparationTransfer-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULHandoverPreparationTransfer-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'ulHandoverPreparationTransfer-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_ULHandoverPreparationTransfer_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULHandoverPreparationTransfer_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULHandoverPreparationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_ULHandoverPreparationTransfer'(Bytes, OptOrMand) ->
   'dec_ULHandoverPreparationTransfer'(Bytes, OptOrMand, []).

'dec_ULHandoverPreparationTransfer'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ULHandoverPreparationTransfer_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'ULHandoverPreparationTransfer', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  UECapabilityInformation-r8-IEs
%%================================
'enc_UECapabilityInformation-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UE-CapabilityRAT-ContainerList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UE-CapabilityRAT-ContainerList'(?RT_BER:cindex(2,Val,'ue-CapabilityRAT-ContainerList'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityInformation-r8-IEs_nonCriticalExtension
%%================================
'enc_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UECapabilityInformation-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_UECapabilityInformation-r8-IEs'(Bytes, OptOrMand) ->
   'dec_UECapabilityInformation-r8-IEs'(Bytes, OptOrMand, []).

'dec_UECapabilityInformation-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UE-CapabilityRAT-ContainerList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UE-CapabilityRAT-ContainerList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_UECapabilityInformation-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UECapabilityInformation-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UECapabilityInformation
%%================================
'enc_UECapabilityInformation'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UECapabilityInformation_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityInformation_criticalExtensions
%%================================

'enc_UECapabilityInformation_criticalExtensions'({'UECapabilityInformation_criticalExtensions',Val}, TagIn) ->
   'enc_UECapabilityInformation_criticalExtensions'(Val, TagIn);

'enc_UECapabilityInformation_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UECapabilityInformation_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  UECapabilityInformation_criticalExtensions_c1
%%================================

'enc_UECapabilityInformation_criticalExtensions_c1'({'UECapabilityInformation_criticalExtensions_c1',Val}, TagIn) ->
   'enc_UECapabilityInformation_criticalExtensions_c1'(Val, TagIn);

'enc_UECapabilityInformation_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ueCapabilityInformation-r8' ->
         'enc_UECapabilityInformation-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_UECapabilityInformation_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'ueCapabilityInformation-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityInformation-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'ueCapabilityInformation-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  UECapabilityInformation_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_UECapabilityInformation_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityInformation_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityInformation_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_UECapabilityInformation'(Bytes, OptOrMand) ->
   'dec_UECapabilityInformation'(Bytes, OptOrMand, []).

'dec_UECapabilityInformation'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_UECapabilityInformation_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UECapabilityInformation', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UE-CapabilityRequest
%%================================

'enc_UE-CapabilityRequest'({'UE-CapabilityRequest',Val}, TagIn) ->
   'enc_UE-CapabilityRequest'(Val, TagIn);

'enc_UE-CapabilityRequest'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-CapabilityRequest_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_UE-CapabilityRequest_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-CapabilityRequest_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
eutra -> ?RT_BER:encode_enumerated(0,[]);
utra -> ?RT_BER:encode_enumerated(1,[]);
'geran-cs' -> ?RT_BER:encode_enumerated(2,[]);
'geran-ps' -> ?RT_BER:encode_enumerated(3,[]);
'cdma2000-1XRTT' -> ?RT_BER:encode_enumerated(4,[]);
spare3 -> ?RT_BER:encode_enumerated(5,[]);
spare2 -> ?RT_BER:encode_enumerated(6,[]);
spare1 -> ?RT_BER:encode_enumerated(7,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_UE-CapabilityRequest_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-CapabilityRequest'(Bytes, OptOrMand) ->
   'dec_UE-CapabilityRequest'(Bytes, OptOrMand, []).

'dec_UE-CapabilityRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{eutra,0},{utra,1},{'geran-cs',2},{'geran-ps',3},{'cdma2000-1XRTT',4},{spare3,5},{spare2,6},{spare1,7}],[]},[], mandatory)
end, [], []).




%%================================
%%  UECapabilityEnquiry-r8-IEs
%%================================
'enc_UECapabilityEnquiry-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UE-CapabilityRequest
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UE-CapabilityRequest'(?RT_BER:cindex(2,Val,'ue-CapabilityRequest'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityEnquiry-r8-IEs_nonCriticalExtension
%%================================
'enc_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UECapabilityEnquiry-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_UECapabilityEnquiry-r8-IEs'(Bytes, OptOrMand) ->
   'dec_UECapabilityEnquiry-r8-IEs'(Bytes, OptOrMand, []).

'dec_UECapabilityEnquiry-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UE-CapabilityRequest
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UE-CapabilityRequest'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_UECapabilityEnquiry-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UECapabilityEnquiry-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UECapabilityEnquiry
%%================================
'enc_UECapabilityEnquiry'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UECapabilityEnquiry_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  UECapabilityEnquiry_criticalExtensions
%%================================

'enc_UECapabilityEnquiry_criticalExtensions'({'UECapabilityEnquiry_criticalExtensions',Val}, TagIn) ->
   'enc_UECapabilityEnquiry_criticalExtensions'(Val, TagIn);

'enc_UECapabilityEnquiry_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UECapabilityEnquiry_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  UECapabilityEnquiry_criticalExtensions_c1
%%================================

'enc_UECapabilityEnquiry_criticalExtensions_c1'({'UECapabilityEnquiry_criticalExtensions_c1',Val}, TagIn) ->
   'enc_UECapabilityEnquiry_criticalExtensions_c1'(Val, TagIn);

'enc_UECapabilityEnquiry_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'ueCapabilityEnquiry-r8' ->
         'enc_UECapabilityEnquiry-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_UECapabilityEnquiry_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'ueCapabilityEnquiry-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityEnquiry-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'ueCapabilityEnquiry-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_UECapabilityEnquiry_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityEnquiry_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityEnquiry_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_UECapabilityEnquiry'(Bytes, OptOrMand) ->
   'dec_UECapabilityEnquiry'(Bytes, OptOrMand, []).

'dec_UECapabilityEnquiry'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_UECapabilityEnquiry_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'UECapabilityEnquiry', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SIB-Type
%%================================

'enc_SIB-Type'({'SIB-Type',Val}, TagIn) ->
   'enc_SIB-Type'(Val, TagIn);

'enc_SIB-Type'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
sibType3 -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
sibType4 -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
sibType5 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
sibType6 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
sibType7 -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
sibType8 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
sibType9 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
sibType10 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
sibType11 -> ?RT_BER:encode_enumerated(8,TagIn ++ []);
spare7 -> ?RT_BER:encode_enumerated(9,TagIn ++ []);
spare6 -> ?RT_BER:encode_enumerated(10,TagIn ++ []);
spare5 -> ?RT_BER:encode_enumerated(11,TagIn ++ []);
spare4 -> ?RT_BER:encode_enumerated(12,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(13,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(14,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(15,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_SIB-Type'(Bytes, OptOrMand) ->
   'dec_SIB-Type'(Bytes, OptOrMand, []).

'dec_SIB-Type'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],{[{sibType3,0},{sibType4,1},{sibType5,2},{sibType6,3},{sibType7,4},{sibType8,5},{sibType9,6},{sibType10,7},{sibType11,8},{spare7,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[]},TagIn++[], OptOrMand).



%%================================
%%  SIB-MappingInfo
%%================================

'enc_SIB-MappingInfo'({'SIB-MappingInfo',Val}, TagIn) ->
   'enc_SIB-MappingInfo'(Val, TagIn);

'enc_SIB-MappingInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SIB-MappingInfo_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SIB-MappingInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SIB-MappingInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case (case H of {_,Enumval1}->Enumval1;_->H end) of
sibType3 -> ?RT_BER:encode_enumerated(0,[]);
sibType4 -> ?RT_BER:encode_enumerated(1,[]);
sibType5 -> ?RT_BER:encode_enumerated(2,[]);
sibType6 -> ?RT_BER:encode_enumerated(3,[]);
sibType7 -> ?RT_BER:encode_enumerated(4,[]);
sibType8 -> ?RT_BER:encode_enumerated(5,[]);
sibType9 -> ?RT_BER:encode_enumerated(6,[]);
sibType10 -> ?RT_BER:encode_enumerated(7,[]);
sibType11 -> ?RT_BER:encode_enumerated(8,[]);
spare7 -> ?RT_BER:encode_enumerated(9,[]);
spare6 -> ?RT_BER:encode_enumerated(10,[]);
spare5 -> ?RT_BER:encode_enumerated(11,[]);
spare4 -> ?RT_BER:encode_enumerated(12,[]);
spare3 -> ?RT_BER:encode_enumerated(13,[]);
spare2 -> ?RT_BER:encode_enumerated(14,[]);
spare1 -> ?RT_BER:encode_enumerated(15,[]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,
   'enc_SIB-MappingInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SIB-MappingInfo'(Bytes, OptOrMand) ->
   'dec_SIB-MappingInfo'(Bytes, OptOrMand, []).

'dec_SIB-MappingInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_enumerated(FBytes,[],{[{sibType3,0},{sibType4,1},{sibType5,2},{sibType6,3},{sibType7,4},{sibType8,5},{sibType9,6},{sibType10,7},{sibType11,8},{spare7,9},{spare6,10},{spare5,11},{spare4,12},{spare3,13},{spare2,14},{spare1,15}],[]},[], mandatory)
end, [], []).




%%================================
%%  SchedulingInfo
%%================================
'enc_SchedulingInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'si-Periodicity') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'si-Periodicity') end) of
rf8 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
rf16 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
rf32 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
rf64 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
rf128 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
rf256 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
rf512 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SIB-MappingInfo
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SIB-MappingInfo'(?RT_BER:cindex(3,Val,'sib-MappingInfo'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SchedulingInfo'(Bytes, OptOrMand) ->
   'dec_SchedulingInfo'(Bytes, OptOrMand, []).

'dec_SchedulingInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{rf8,0},{rf16,1},{rf32,2},{rf64,3},{rf128,4},{rf256,5},{rf512,6}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:SIB-MappingInfo
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SIB-MappingInfo'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SchedulingInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SchedulingInfoList
%%================================

'enc_SchedulingInfoList'({'SchedulingInfoList',Val}, TagIn) ->
   'enc_SchedulingInfoList'(Val, TagIn);

'enc_SchedulingInfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SchedulingInfoList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SchedulingInfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SchedulingInfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SchedulingInfo'(H, []),
   'enc_SchedulingInfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SchedulingInfoList'(Bytes, OptOrMand) ->
   'dec_SchedulingInfoList'(Bytes, OptOrMand, []).

'dec_SchedulingInfoList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SchedulingInfo'/3, [], []).




%%================================
%%  PLMN-IdentityInfo
%%================================
'enc_PLMN-IdentityInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-Identity'(?RT_BER:cindex(2,Val,'plmn-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,cellReservedForOperatorUse) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,cellReservedForOperatorUse) end) of
reserved -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
notReserved -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PLMN-IdentityInfo'(Bytes, OptOrMand) ->
   'dec_PLMN-IdentityInfo'(Bytes, OptOrMand, []).

'dec_PLMN-IdentityInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PLMN-Identity'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{reserved,0},{notReserved,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'PLMN-IdentityInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PLMN-IdentityList
%%================================

'enc_PLMN-IdentityList'({'PLMN-IdentityList',Val}, TagIn) ->
   'enc_PLMN-IdentityList'(Val, TagIn);

'enc_PLMN-IdentityList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PLMN-IdentityList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PLMN-IdentityList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PLMN-IdentityInfo'(H, []),
   'enc_PLMN-IdentityList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PLMN-IdentityList'(Bytes, OptOrMand) ->
   'dec_PLMN-IdentityList'(Bytes, OptOrMand, []).

'dec_PLMN-IdentityList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PLMN-IdentityInfo'/3, [], []).




%%================================
%%  SystemInformationBlockType1
%%================================
'enc_SystemInformationBlockType1'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformationBlockType1_cellAccessRelatedInfo'(?RT_BER:cindex(2,Val,cellAccessRelatedInfo), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SystemInformationBlockType1_cellSelectionInfo'(?RT_BER:cindex(3,Val,cellSelectionInfo), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'p-Max') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'p-Max'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_integer([], ?RT_BER:cindex(5,Val,freqBandIndicator), [{tag,128,3,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SchedulingInfoList
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_SchedulingInfoList'(?RT_BER:cindex(6,Val,schedulingInfoList), [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,'tdd-Config') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TDD-Config'(?RT_BER:cindex(7,Val,'tdd-Config'), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes7,EncLen7} = case (case ?RT_BER:cindex(8,Val,'si-WindowLength') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(8,Val,'si-WindowLength') end) of
ms1 -> ?RT_BER:encode_enumerated(0,[{tag,128,6,'IMPLICIT',0}]);
ms2 -> ?RT_BER:encode_enumerated(1,[{tag,128,6,'IMPLICIT',0}]);
ms5 -> ?RT_BER:encode_enumerated(2,[{tag,128,6,'IMPLICIT',0}]);
ms10 -> ?RT_BER:encode_enumerated(3,[{tag,128,6,'IMPLICIT',0}]);
ms15 -> ?RT_BER:encode_enumerated(4,[{tag,128,6,'IMPLICIT',0}]);
ms20 -> ?RT_BER:encode_enumerated(5,[{tag,128,6,'IMPLICIT',0}]);
ms40 -> ?RT_BER:encode_enumerated(6,[{tag,128,6,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 8 with type INTEGER
%%-------------------------------------------------
   {EncBytes8,EncLen8} = ?RT_BER:encode_integer([], ?RT_BER:cindex(9,Val,systemInfoValueTag), [{tag,128,7,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case ?RT_BER:cindex(10,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformationBlockType1_nonCriticalExtension'(?RT_BER:cindex(10,Val,nonCriticalExtension), [{tag,128,8,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformationBlockType1_cellAccessRelatedInfo
%%================================
'enc_SystemInformationBlockType1_cellAccessRelatedInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-IdentityList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PLMN-IdentityList'(?RT_BER:cindex(2,Val,'plmn-IdentityList'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,trackingAreaCode), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',28}], ?RT_BER:cindex(4,Val,cellIdentity), [], [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case (case ?RT_BER:cindex(5,Val,cellBarred) of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(5,Val,cellBarred) end) of
barred -> ?RT_BER:encode_enumerated(0,[{tag,128,3,'IMPLICIT',0}]);
notBarred -> ?RT_BER:encode_enumerated(1,[{tag,128,3,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes5,EncLen5} = case (case ?RT_BER:cindex(6,Val,intraFreqReselection) of {_,Enumval5}->Enumval5;_->?RT_BER:cindex(6,Val,intraFreqReselection) end) of
allowed -> ?RT_BER:encode_enumerated(0,[{tag,128,4,'IMPLICIT',0}]);
notAllowed -> ?RT_BER:encode_enumerated(1,[{tag,128,4,'IMPLICIT',0}]);
Enumval6 -> exit({error,{asn1, {enumerated_not_in_range,Enumval6}}})
end,

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes6,EncLen6} = ?RT_BER:encode_boolean(?RT_BER:cindex(7,Val,'csg-Indication'), [{tag,128,5,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 7 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,'csg-Identity') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',27}], ?RT_BER:cindex(8,Val,'csg-Identity'), [], [{tag,128,6,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_cellAccessRelatedInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-IdentityList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PLMN-IdentityList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,28,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type ENUMERATED
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_enumerated(Bytes5,[],[{barred,0},{notBarred,1}],[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5 with type ENUMERATED
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = ?RT_BER:decode_enumerated(Bytes6,[],[{allowed,0},{notAllowed,1}],[{tag,128,4,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 6 with type BOOLEAN
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = ?RT_BER:decode_boolean(Bytes7,[{tag,128,5,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 7 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes8,27,[],[{tag,128,6,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,noext),
   {{'SystemInformationBlockType1_cellAccessRelatedInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.



%%================================
%%  SystemInformationBlockType1_cellSelectionInfo
%%================================
'enc_SystemInformationBlockType1_cellSelectionInfo'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'q-RxLevMin'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,'q-RxLevMinOffset') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'q-RxLevMinOffset'), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_cellSelectionInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{-70,-22},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_integer(Bytes3,{1,8},[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformationBlockType1_cellSelectionInfo', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.



%%================================
%%  SystemInformationBlockType1_nonCriticalExtension
%%================================
'enc_SystemInformationBlockType1_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformationBlockType1_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SystemInformationBlockType1_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_SystemInformationBlockType1'(Bytes, OptOrMand) ->
   'dec_SystemInformationBlockType1'(Bytes, OptOrMand, []).

'dec_SystemInformationBlockType1'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SystemInformationBlockType1_cellAccessRelatedInfo'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SystemInformationBlockType1_cellSelectionInfo'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_integer(Bytes4,{-30,33},[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type INTEGER
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_integer(Bytes5,{1,64},[{tag,128,3,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SchedulingInfoList
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = 'dec_SchedulingInfoList'(Bytes6, mandatory, [{tag,128,4,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:TDD-Config OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_TDD-Config'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = ?RT_BER:decode_enumerated(Bytes8,[],[{ms1,0},{ms2,1},{ms5,2},{ms10,3},{ms15,4},{ms20,5},{ms40,6}],[{tag,128,6,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 8 with type INTEGER
%%-------------------------------------------------
   {Term8,Bytes10,Rb9} = ?RT_BER:decode_integer(Bytes9,{0,31},[{tag,128,7,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 9 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term9,Bytes11,Rb10} = case Bytes10 of
<<2:2,_:1,8:5,_/binary>> ->
'dec_SystemInformationBlockType1_nonCriticalExtension'(Bytes10, opt_or_default, [{tag,128,8,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes10, 0 }
end,

   {Bytes12,Rb11} = ?RT_BER:restbytes2(RemBytes, Bytes11,noext),
   {{'SystemInformationBlockType1', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9}, Bytes12, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9+Rb10+Rb11}.


%%================================
%%  SystemInformation-r8-IEs
%%================================
'enc_SystemInformation-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(?RT_BER:cindex(2,Val,'sib-TypeAndInfo'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SystemInformation-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformation-r8-IEs_sib-TypeAndInfo
%%================================

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'({'SystemInformation-r8-IEs_sib-TypeAndInfo',Val}, TagIn) ->
   'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Val, TagIn);

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(H, []),
   'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF
%%================================

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'({'SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF',Val}, TagIn) ->
   'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Val, TagIn);

'enc_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      sib2 ->
         'enc_SystemInformationBlockType2'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      sib3 ->
         'enc_SystemInformationBlockType3'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      sib4 ->
         'enc_SystemInformationBlockType4'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      sib5 ->
         'enc_SystemInformationBlockType5'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      sib6 ->
         'enc_SystemInformationBlockType6'(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      sib7 ->
         'enc_SystemInformationBlockType7'(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      sib8 ->
         'enc_SystemInformationBlockType8'(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      sib9 ->
         'enc_SystemInformationBlockType9'(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      sib10 ->
         'enc_SystemInformationBlockType10'(element(2,Val), [{tag,128,8,'IMPLICIT',0}]);
      sib11 ->
         'enc_SystemInformationBlockType11'(element(2,Val), [{tag,128,9,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'sib2'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType2'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{sib2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType3'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{sib3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib4'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType4'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{sib4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType5'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{sib5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib6'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType6'(Bytes1, mandatory, [{tag,128,4,'IMPLICIT',0}]),
         {{sib6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib7'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType7'(Bytes1, mandatory, [{tag,128,5,'IMPLICIT',0}]),
         {{sib7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib8'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType8'(Bytes1, mandatory, [{tag,128,6,'IMPLICIT',0}]),
         {{sib8, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib9'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType9'(Bytes1, mandatory, [{tag,128,7,'IMPLICIT',0}]),
         {{sib9, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib10'
      <<2:2,_:1,8:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType10'(Bytes1, mandatory, [{tag,128,8,'IMPLICIT',0}]),
         {{sib10, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'sib11'
      <<2:2,_:1,9:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType11'(Bytes1, mandatory, [{tag,128,9,'IMPLICIT',0}]),
         {{sib11, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.
'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_SystemInformation-r8-IEs_sib-TypeAndInfo_SEQOF'/3, [], []).





%%================================
%%  SystemInformation-r8-IEs_nonCriticalExtension
%%================================
'enc_SystemInformation-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformation-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SystemInformation-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_SystemInformation-r8-IEs'(Bytes, OptOrMand) ->
   'dec_SystemInformation-r8-IEs'(Bytes, OptOrMand, []).

'dec_SystemInformation-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OF
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SystemInformation-r8-IEs_sib-TypeAndInfo'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SystemInformation-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SystemInformation-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SystemInformation
%%================================
'enc_SystemInformation'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SystemInformation_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SystemInformation_criticalExtensions
%%================================

'enc_SystemInformation_criticalExtensions'({'SystemInformation_criticalExtensions',Val}, TagIn) ->
   'enc_SystemInformation_criticalExtensions'(Val, TagIn);

'enc_SystemInformation_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'systemInformation-r8' ->
         'enc_SystemInformation-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_SystemInformation_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SystemInformation_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SystemInformation_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_SystemInformation_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'systemInformation-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformation-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'systemInformation-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformation_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SystemInformation'(Bytes, OptOrMand) ->
   'dec_SystemInformation'(Bytes, OptOrMand, []).

'dec_SystemInformation'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SystemInformation_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'SystemInformation', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SecurityModeFailure-r8-IEs
%%================================
'enc_SecurityModeFailure-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeFailure-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeFailure-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_SecurityModeFailure-r8-IEs'(Bytes, OptOrMand) ->
   'dec_SecurityModeFailure-r8-IEs'(Bytes, OptOrMand, []).

'dec_SecurityModeFailure-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SecurityModeFailure-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'SecurityModeFailure-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SecurityModeFailure
%%================================
'enc_SecurityModeFailure'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeFailure_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeFailure_criticalExtensions
%%================================

'enc_SecurityModeFailure_criticalExtensions'({'SecurityModeFailure_criticalExtensions',Val}, TagIn) ->
   'enc_SecurityModeFailure_criticalExtensions'(Val, TagIn);

'enc_SecurityModeFailure_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeFailure-r8' ->
         'enc_SecurityModeFailure-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SecurityModeFailure_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_SecurityModeFailure_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'securityModeFailure-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeFailure-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'securityModeFailure-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeFailure_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SecurityModeFailure'(Bytes, OptOrMand) ->
   'dec_SecurityModeFailure'(Bytes, OptOrMand, []).

'dec_SecurityModeFailure'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SecurityModeFailure_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityModeFailure', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SecurityModeComplete-r8-IEs
%%================================
'enc_SecurityModeComplete-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeComplete-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_SecurityModeComplete-r8-IEs'(Bytes, OptOrMand) ->
   'dec_SecurityModeComplete-r8-IEs'(Bytes, OptOrMand, []).

'dec_SecurityModeComplete-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SecurityModeComplete-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'SecurityModeComplete-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SecurityModeComplete
%%================================
'enc_SecurityModeComplete'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeComplete_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeComplete_criticalExtensions
%%================================

'enc_SecurityModeComplete_criticalExtensions'({'SecurityModeComplete_criticalExtensions',Val}, TagIn) ->
   'enc_SecurityModeComplete_criticalExtensions'(Val, TagIn);

'enc_SecurityModeComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeComplete-r8' ->
         'enc_SecurityModeComplete-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SecurityModeComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_SecurityModeComplete_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'securityModeComplete-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeComplete-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'securityModeComplete-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SecurityModeComplete'(Bytes, OptOrMand) ->
   'dec_SecurityModeComplete'(Bytes, OptOrMand, []).

'dec_SecurityModeComplete'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SecurityModeComplete_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityModeComplete', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SecurityConfigSMC
%%================================
'enc_SecurityConfigSMC'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityAlgorithmConfig'(?RT_BER:cindex(2,Val,securityAlgorithmConfig), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_SecurityConfigSMC'(Bytes, OptOrMand) ->
   'dec_SecurityConfigSMC'(Bytes, OptOrMand, []).

'dec_SecurityConfigSMC'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SecurityAlgorithmConfig'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'SecurityConfigSMC', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  SecurityModeCommand-r8-IEs
%%================================
'enc_SecurityModeCommand-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityConfigSMC
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityConfigSMC'(?RT_BER:cindex(2,Val,securityConfigSMC), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeCommand-r8-IEs_nonCriticalExtension
%%================================
'enc_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeCommand-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_SecurityModeCommand-r8-IEs'(Bytes, OptOrMand) ->
   'dec_SecurityModeCommand-r8-IEs'(Bytes, OptOrMand, []).

'dec_SecurityModeCommand-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityConfigSMC
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SecurityConfigSMC'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_SecurityModeCommand-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityModeCommand-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SecurityModeCommand
%%================================
'enc_SecurityModeCommand'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_SecurityModeCommand_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityModeCommand_criticalExtensions
%%================================

'enc_SecurityModeCommand_criticalExtensions'({'SecurityModeCommand_criticalExtensions',Val}, TagIn) ->
   'enc_SecurityModeCommand_criticalExtensions'(Val, TagIn);

'enc_SecurityModeCommand_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_SecurityModeCommand_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SecurityModeCommand_criticalExtensions_c1
%%================================

'enc_SecurityModeCommand_criticalExtensions_c1'({'SecurityModeCommand_criticalExtensions_c1',Val}, TagIn) ->
   'enc_SecurityModeCommand_criticalExtensions_c1'(Val, TagIn);

'enc_SecurityModeCommand_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'securityModeCommand-r8' ->
         'enc_SecurityModeCommand-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_SecurityModeCommand_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'securityModeCommand-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeCommand-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'securityModeCommand-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  SecurityModeCommand_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_SecurityModeCommand_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeCommand_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeCommand_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SecurityModeCommand'(Bytes, OptOrMand) ->
   'dec_SecurityModeCommand'(Bytes, OptOrMand, []).

'dec_SecurityModeCommand'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_SecurityModeCommand_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityModeCommand', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RegisteredMME
%%================================
'enc_RegisteredMME'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,'plmn-Identity') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PLMN-Identity'(?RT_BER:cindex(2,Val,'plmn-Identity'), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(3,Val,mmegi), [], [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(4,Val,mmec), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RegisteredMME'(Bytes, OptOrMand) ->
   'dec_RegisteredMME'(Bytes, OptOrMand, []).

'dec_RegisteredMME'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PLMN-Identity OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_PLMN-Identity'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_bit_string(Bytes3,16,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,8,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'RegisteredMME', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  RRCConnectionSetupComplete-r8-IEs
%%================================
'enc_RRCConnectionSetupComplete-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'selectedPLMN-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RegisteredMME OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,registeredMME) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RegisteredMME'(?RT_BER:cindex(3,Val,registeredMME), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,dedicatedInfoNAS), [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(5,Val,nonCriticalExtension), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,6},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RegisteredMME OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_RegisteredMME'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_octet_string(Bytes4,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_RRCConnectionSetupComplete-r8-IEs_nonCriticalExtension'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'RRCConnectionSetupComplete-r8-IEs', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  RRCConnectionSetupComplete
%%================================
'enc_RRCConnectionSetupComplete'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionSetupComplete_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetupComplete_criticalExtensions
%%================================

'enc_RRCConnectionSetupComplete_criticalExtensions'({'RRCConnectionSetupComplete_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionSetupComplete_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionSetupComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionSetupComplete_criticalExtensions_c1
%%================================

'enc_RRCConnectionSetupComplete_criticalExtensions_c1'({'RRCConnectionSetupComplete_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionSetupComplete_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionSetupComplete-r8' ->
         'enc_RRCConnectionSetupComplete-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionSetupComplete_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionSetupComplete-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetupComplete-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionSetupComplete-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionSetupComplete_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetupComplete_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetupComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionSetupComplete'(Bytes, OptOrMand) ->
   'dec_RRCConnectionSetupComplete'(Bytes, OptOrMand, []).

'dec_RRCConnectionSetupComplete'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionSetupComplete_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionSetupComplete', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionSetup-r8-IEs
%%================================
'enc_RRCConnectionSetup-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RadioResourceConfigDedicated'(?RT_BER:cindex(2,Val,radioResourceConfigDedicated), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetup-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionSetup-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionSetup-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionSetup-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionSetup-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RadioResourceConfigDedicated'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_RRCConnectionSetup-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionSetup-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionSetup
%%================================
'enc_RRCConnectionSetup'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionSetup_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionSetup_criticalExtensions
%%================================

'enc_RRCConnectionSetup_criticalExtensions'({'RRCConnectionSetup_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionSetup_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionSetup_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionSetup_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionSetup_criticalExtensions_c1
%%================================

'enc_RRCConnectionSetup_criticalExtensions_c1'({'RRCConnectionSetup_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionSetup_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionSetup_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionSetup-r8' ->
         'enc_RRCConnectionSetup-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionSetup_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionSetup-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetup-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionSetup-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionSetup_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetup_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetup_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionSetup'(Bytes, OptOrMand) ->
   'dec_RRCConnectionSetup'(Bytes, OptOrMand, []).

'dec_RRCConnectionSetup'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionSetup_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionSetup', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  EstablishmentCause
%%================================

'enc_EstablishmentCause'({'EstablishmentCause',Val}, TagIn) ->
   'enc_EstablishmentCause'(Val, TagIn);

'enc_EstablishmentCause'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
emergency -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
highPriorityAccess -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
'mt-Access' -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
'mo-Signalling' -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
'mo-Data' -> ?RT_BER:encode_enumerated(4,TagIn ++ []);
spare3 -> ?RT_BER:encode_enumerated(5,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(6,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(7,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_EstablishmentCause'(Bytes, OptOrMand) ->
   'dec_EstablishmentCause'(Bytes, OptOrMand, []).

'dec_EstablishmentCause'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{emergency,0},{highPriorityAccess,1},{'mt-Access',2},{'mo-Signalling',3},{'mo-Data',4},{spare3,5},{spare2,6},{spare1,7}],TagIn++[], OptOrMand).



%%================================
%%  InitialUE-Identity
%%================================

'enc_InitialUE-Identity'({'InitialUE-Identity',Val}, TagIn) ->
   'enc_InitialUE-Identity'(Val, TagIn);

'enc_InitialUE-Identity'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's-TMSI' ->
         'enc_S-TMSI'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      randomValue ->
         ?RT_BER:encode_bit_string([{'SizeConstraint',40}], element(2,Val), [], [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_InitialUE-Identity'(Bytes, OptOrMand) ->
   'dec_InitialUE-Identity'(Bytes, OptOrMand, []).

'dec_InitialUE-Identity'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 's-TMSI'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_S-TMSI'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'s-TMSI', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'randomValue'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_bit_string(Bytes1,40,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{randomValue, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  RRCConnectionRequest-r8-IEs
%%================================
'enc_RRCConnectionRequest-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InitialUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_InitialUE-Identity'(?RT_BER:cindex(2,Val,'ue-Identity'), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,establishmentCause) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,establishmentCause) end) of
emergency -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
highPriorityAccess -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
'mt-Access' -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
'mo-Signalling' -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
'mo-Data' -> ?RT_BER:encode_enumerated(4,[{tag,128,1,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,1,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',1}], ?RT_BER:cindex(4,Val,spare), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RRCConnectionRequest-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionRequest-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionRequest-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:InitialUE-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_InitialUE-Identity'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{emergency,0},{highPriorityAccess,1},{'mt-Access',2},{'mo-Signalling',3},{'mo-Data',4},{spare3,5},{spare2,6},{spare1,7}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,1,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'RRCConnectionRequest-r8-IEs', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  RRCConnectionRequest
%%================================
'enc_RRCConnectionRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionRequest_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRequest_criticalExtensions
%%================================

'enc_RRCConnectionRequest_criticalExtensions'({'RRCConnectionRequest_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionRequest_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionRequest-r8' ->
         'enc_RRCConnectionRequest-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionRequest_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionRequest-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRequest-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionRequest-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionRequest'(Bytes, OptOrMand) ->
   'dec_RRCConnectionRequest'(Bytes, OptOrMand, []).

'dec_RRCConnectionRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RRCConnectionRequest_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionRequest', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  BandClassPriority1XRTT
%%================================
'enc_BandClassPriority1XRTT'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,bandClass) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,bandClass) end) of
bc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
bc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
bc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
bc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
bc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
bc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
bc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
bc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
bc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
bc16 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
bc17 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
spare14 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
spare13 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
spare12 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
spare11 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BandClassPriority1XRTT'(Bytes, OptOrMand) ->
   'dec_BandClassPriority1XRTT'(Bytes, OptOrMand, []).

'dec_BandClassPriority1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BandClassPriority1XRTT', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BandClassPriorityList1XRTT
%%================================

'enc_BandClassPriorityList1XRTT'({'BandClassPriorityList1XRTT',Val}, TagIn) ->
   'enc_BandClassPriorityList1XRTT'(Val, TagIn);

'enc_BandClassPriorityList1XRTT'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityList1XRTT_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BandClassPriorityList1XRTT_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassPriorityList1XRTT_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassPriority1XRTT'(H, []),
   'enc_BandClassPriorityList1XRTT_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassPriorityList1XRTT'(Bytes, OptOrMand) ->
   'dec_BandClassPriorityList1XRTT'(Bytes, OptOrMand, []).

'dec_BandClassPriorityList1XRTT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BandClassPriority1XRTT'/3, [], []).




%%================================
%%  BandClassPriorityHRPD
%%================================
'enc_BandClassPriorityHRPD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,bandClass) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,bandClass) end) of
bc0 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
bc1 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
bc2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
bc3 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
bc4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
bc5 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
bc6 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
bc7 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
bc8 -> ?RT_BER:encode_enumerated(8,[{tag,128,0,'IMPLICIT',0}]);
bc9 -> ?RT_BER:encode_enumerated(9,[{tag,128,0,'IMPLICIT',0}]);
bc10 -> ?RT_BER:encode_enumerated(10,[{tag,128,0,'IMPLICIT',0}]);
bc11 -> ?RT_BER:encode_enumerated(11,[{tag,128,0,'IMPLICIT',0}]);
bc12 -> ?RT_BER:encode_enumerated(12,[{tag,128,0,'IMPLICIT',0}]);
bc13 -> ?RT_BER:encode_enumerated(13,[{tag,128,0,'IMPLICIT',0}]);
bc14 -> ?RT_BER:encode_enumerated(14,[{tag,128,0,'IMPLICIT',0}]);
bc15 -> ?RT_BER:encode_enumerated(15,[{tag,128,0,'IMPLICIT',0}]);
bc16 -> ?RT_BER:encode_enumerated(16,[{tag,128,0,'IMPLICIT',0}]);
bc17 -> ?RT_BER:encode_enumerated(17,[{tag,128,0,'IMPLICIT',0}]);
spare14 -> ?RT_BER:encode_enumerated(18,[{tag,128,0,'IMPLICIT',0}]);
spare13 -> ?RT_BER:encode_enumerated(19,[{tag,128,0,'IMPLICIT',0}]);
spare12 -> ?RT_BER:encode_enumerated(20,[{tag,128,0,'IMPLICIT',0}]);
spare11 -> ?RT_BER:encode_enumerated(21,[{tag,128,0,'IMPLICIT',0}]);
spare10 -> ?RT_BER:encode_enumerated(22,[{tag,128,0,'IMPLICIT',0}]);
spare9 -> ?RT_BER:encode_enumerated(23,[{tag,128,0,'IMPLICIT',0}]);
spare8 -> ?RT_BER:encode_enumerated(24,[{tag,128,0,'IMPLICIT',0}]);
spare7 -> ?RT_BER:encode_enumerated(25,[{tag,128,0,'IMPLICIT',0}]);
spare6 -> ?RT_BER:encode_enumerated(26,[{tag,128,0,'IMPLICIT',0}]);
spare5 -> ?RT_BER:encode_enumerated(27,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(28,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(29,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(30,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(31,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BandClassPriorityHRPD'(Bytes, OptOrMand) ->
   'dec_BandClassPriorityHRPD'(Bytes, OptOrMand, []).

'dec_BandClassPriorityHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{bc0,0},{bc1,1},{bc2,2},{bc3,3},{bc4,4},{bc5,5},{bc6,6},{bc7,7},{bc8,8},{bc9,9},{bc10,10},{bc11,11},{bc12,12},{bc13,13},{bc14,14},{bc15,15},{bc16,16},{bc17,17},{spare14,18},{spare13,19},{spare12,20},{spare11,21},{spare10,22},{spare9,23},{spare8,24},{spare7,25},{spare6,26},{spare5,27},{spare4,28},{spare3,29},{spare2,30},{spare1,31}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'BandClassPriorityHRPD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  BandClassPriorityListHRPD
%%================================

'enc_BandClassPriorityListHRPD'({'BandClassPriorityListHRPD',Val}, TagIn) ->
   'enc_BandClassPriorityListHRPD'(Val, TagIn);

'enc_BandClassPriorityListHRPD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityListHRPD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_BandClassPriorityListHRPD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BandClassPriorityListHRPD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_BandClassPriorityHRPD'(H, []),
   'enc_BandClassPriorityListHRPD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BandClassPriorityListHRPD'(Bytes, OptOrMand) ->
   'dec_BandClassPriorityListHRPD'(Bytes, OptOrMand, []).

'dec_BandClassPriorityListHRPD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_BandClassPriorityHRPD'/3, [], []).




%%================================
%%  FreqPriorityUTRA-TDD
%%================================
'enc_FreqPriorityUTRA-TDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FreqPriorityUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_FreqPriorityUTRA-TDD'(Bytes, OptOrMand, []).

'dec_FreqPriorityUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,16383},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'FreqPriorityUTRA-TDD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  FreqPriorityListUTRA-TDD
%%================================

'enc_FreqPriorityListUTRA-TDD'({'FreqPriorityListUTRA-TDD',Val}, TagIn) ->
   'enc_FreqPriorityListUTRA-TDD'(Val, TagIn);

'enc_FreqPriorityListUTRA-TDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListUTRA-TDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_FreqPriorityListUTRA-TDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListUTRA-TDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityUTRA-TDD'(H, []),
   'enc_FreqPriorityListUTRA-TDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListUTRA-TDD'(Bytes, OptOrMand) ->
   'dec_FreqPriorityListUTRA-TDD'(Bytes, OptOrMand, []).

'dec_FreqPriorityListUTRA-TDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FreqPriorityUTRA-TDD'/3, [], []).




%%================================
%%  FreqPriorityUTRA-FDD
%%================================
'enc_FreqPriorityUTRA-FDD'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FreqPriorityUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_FreqPriorityUTRA-FDD'(Bytes, OptOrMand, []).

'dec_FreqPriorityUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,16383},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'FreqPriorityUTRA-FDD', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  FreqPriorityListUTRA-FDD
%%================================

'enc_FreqPriorityListUTRA-FDD'({'FreqPriorityListUTRA-FDD',Val}, TagIn) ->
   'enc_FreqPriorityListUTRA-FDD'(Val, TagIn);

'enc_FreqPriorityListUTRA-FDD'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListUTRA-FDD_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_FreqPriorityListUTRA-FDD_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListUTRA-FDD_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityUTRA-FDD'(H, []),
   'enc_FreqPriorityListUTRA-FDD_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListUTRA-FDD'(Bytes, OptOrMand) ->
   'dec_FreqPriorityListUTRA-FDD'(Bytes, OptOrMand, []).

'dec_FreqPriorityListUTRA-FDD'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FreqPriorityUTRA-FDD'/3, [], []).




%%================================
%%  FreqsPriorityGERAN
%%================================
'enc_FreqsPriorityGERAN'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CarrierFreqsGERAN'(?RT_BER:cindex(2,Val,carrierFreqs), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FreqsPriorityGERAN'(Bytes, OptOrMand) ->
   'dec_FreqsPriorityGERAN'(Bytes, OptOrMand, []).

'dec_FreqsPriorityGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:CarrierFreqsGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CarrierFreqsGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'FreqsPriorityGERAN', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  FreqsPriorityListGERAN
%%================================

'enc_FreqsPriorityListGERAN'({'FreqsPriorityListGERAN',Val}, TagIn) ->
   'enc_FreqsPriorityListGERAN'(Val, TagIn);

'enc_FreqsPriorityListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqsPriorityListGERAN_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_FreqsPriorityListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqsPriorityListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqsPriorityGERAN'(H, []),
   'enc_FreqsPriorityListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqsPriorityListGERAN'(Bytes, OptOrMand) ->
   'dec_FreqsPriorityListGERAN'(Bytes, OptOrMand, []).

'dec_FreqsPriorityListGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FreqsPriorityGERAN'/3, [], []).




%%================================
%%  FreqPriorityEUTRA
%%================================
'enc_FreqPriorityEUTRA'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,carrierFreq), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,cellReselectionPriority), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_FreqPriorityEUTRA'(Bytes, OptOrMand) ->
   'dec_FreqPriorityEUTRA'(Bytes, OptOrMand, []).

'dec_FreqPriorityEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'FreqPriorityEUTRA', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  FreqPriorityListEUTRA
%%================================

'enc_FreqPriorityListEUTRA'({'FreqPriorityListEUTRA',Val}, TagIn) ->
   'enc_FreqPriorityListEUTRA'(Val, TagIn);

'enc_FreqPriorityListEUTRA'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityListEUTRA_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_FreqPriorityListEUTRA_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FreqPriorityListEUTRA_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FreqPriorityEUTRA'(H, []),
   'enc_FreqPriorityListEUTRA_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_FreqPriorityListEUTRA'(Bytes, OptOrMand) ->
   'dec_FreqPriorityListEUTRA'(Bytes, OptOrMand, []).

'dec_FreqPriorityListEUTRA'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_FreqPriorityEUTRA'/3, [], []).




%%================================
%%  IdleModeMobilityControlInfo
%%================================
'enc_IdleModeMobilityControlInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:FreqPriorityListEUTRA OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,freqPriorityListEUTRA) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListEUTRA'(?RT_BER:cindex(2,Val,freqPriorityListEUTRA), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:FreqsPriorityListGERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,freqPriorityListGERAN) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqsPriorityListGERAN'(?RT_BER:cindex(3,Val,freqPriorityListGERAN), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:FreqPriorityListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'freqPriorityListUTRA-FDD') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListUTRA-FDD'(?RT_BER:cindex(4,Val,'freqPriorityListUTRA-FDD'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:FreqPriorityListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,'freqPriorityListUTRA-TDD') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FreqPriorityListUTRA-TDD'(?RT_BER:cindex(5,Val,'freqPriorityListUTRA-TDD'), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:BandClassPriorityListHRPD OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,bandClassPriorityListHRPD) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BandClassPriorityListHRPD'(?RT_BER:cindex(6,Val,bandClassPriorityListHRPD), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:BandClassPriorityList1XRTT OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,bandClassPriorityList1XRTT) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_BandClassPriorityList1XRTT'(?RT_BER:cindex(7,Val,bandClassPriorityList1XRTT), [{tag,128,5,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case ?RT_BER:cindex(8,Val,t320) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(8,Val,t320) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(8,Val,t320) end) of
min5 -> ?RT_BER:encode_enumerated(0,[{tag,128,6,'IMPLICIT',0}]);
min10 -> ?RT_BER:encode_enumerated(1,[{tag,128,6,'IMPLICIT',0}]);
min20 -> ?RT_BER:encode_enumerated(2,[{tag,128,6,'IMPLICIT',0}]);
min30 -> ?RT_BER:encode_enumerated(3,[{tag,128,6,'IMPLICIT',0}]);
min60 -> ?RT_BER:encode_enumerated(4,[{tag,128,6,'IMPLICIT',0}]);
min120 -> ?RT_BER:encode_enumerated(5,[{tag,128,6,'IMPLICIT',0}]);
min180 -> ?RT_BER:encode_enumerated(6,[{tag,128,6,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,6,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_IdleModeMobilityControlInfo'(Bytes, OptOrMand) ->
   'dec_IdleModeMobilityControlInfo'(Bytes, OptOrMand, []).

'dec_IdleModeMobilityControlInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:FreqPriorityListEUTRA OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_FreqPriorityListEUTRA'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:FreqsPriorityListGERAN OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_FreqsPriorityListGERAN'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:FreqPriorityListUTRA-FDD OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_FreqPriorityListUTRA-FDD'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:FreqPriorityListUTRA-TDD OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_FreqPriorityListUTRA-TDD'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:BandClassPriorityListHRPD OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_BandClassPriorityListHRPD'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6   External EUTRA-RRC:BandClassPriorityList1XRTT OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_BandClassPriorityList1XRTT'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

%%-------------------------------------------------
%% attribute number 7 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term7,Bytes9,Rb8} = case Bytes8 of
<<2:2,_:1,6:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes8,[],[{min5,0},{min10,1},{min20,2},{min30,3},{min60,4},{min120,5},{min180,6},{spare1,7}],[{tag,128,6,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes8, 0 }
end,

   {Bytes10,Rb9} = ?RT_BER:restbytes2(RemBytes, Bytes9,ext),
   {{'IdleModeMobilityControlInfo', Term1, Term2, Term3, Term4, Term5, Term6, Term7}, Bytes10, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8+Rb9}.


%%================================
%%  RedirectedCarrierInfo
%%================================

'enc_RedirectedCarrierInfo'({'RedirectedCarrierInfo',Val}, TagIn) ->
   'enc_RedirectedCarrierInfo'(Val, TagIn);

'enc_RedirectedCarrierInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      eutra ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      geran ->
         'enc_CarrierFreqsGERAN'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'utra-FDD' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      'utra-TDD' ->
         ?RT_BER:encode_integer([], element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      'cdma2000-HRPD' ->
         'enc_CarrierFreqCDMA2000'(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      'cdma2000-1xRTT' ->
         'enc_CarrierFreqCDMA2000'(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_RedirectedCarrierInfo'(Bytes, OptOrMand) ->
   'dec_RedirectedCarrierInfo'(Bytes, OptOrMand, []).

'dec_RedirectedCarrierInfo'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'eutra'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,65535},[{tag,128,0,'IMPLICIT',0}], mandatory),
         {{eutra, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'geran'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CarrierFreqsGERAN'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{geran, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utra-FDD'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,16383},[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{'utra-FDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'utra-TDD'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_integer(Bytes1,{0,16383},[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{'utra-TDD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'cdma2000-HRPD'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CarrierFreqCDMA2000'(Bytes1, mandatory, [{tag,128,4,'IMPLICIT',0}]),
         {{'cdma2000-HRPD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'cdma2000-1xRTT'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CarrierFreqCDMA2000'(Bytes1, mandatory, [{tag,128,5,'IMPLICIT',0}]),
         {{'cdma2000-1xRTT', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


%%================================
%%  ReleaseCause
%%================================

'enc_ReleaseCause'({'ReleaseCause',Val}, TagIn) ->
   'enc_ReleaseCause'(Val, TagIn);

'enc_ReleaseCause'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
loadBalancingTAUrequired -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
other -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
spare2 -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_ReleaseCause'(Bytes, OptOrMand) ->
   'dec_ReleaseCause'(Bytes, OptOrMand, []).

'dec_ReleaseCause'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{loadBalancingTAUrequired,0},{other,1},{spare2,2},{spare1,3}],TagIn++[], OptOrMand).



%%================================
%%  RRCConnectionRelease-r8-IEs
%%================================
'enc_RRCConnectionRelease-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,releaseCause) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,releaseCause) end) of
loadBalancingTAUrequired -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
other -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RedirectedCarrierInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,redirectedCarrierInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RedirectedCarrierInfo'(?RT_BER:cindex(3,Val,redirectedCarrierInfo), [{tag,128,1,'EXPLICIT',32}])
       end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:IdleModeMobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,idleModeMobilityControlInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_IdleModeMobilityControlInfo'(?RT_BER:cindex(4,Val,idleModeMobilityControlInfo), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(5,Val,nonCriticalExtension), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRelease-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionRelease-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionRelease-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionRelease-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionRelease-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{loadBalancingTAUrequired,0},{other,1},{spare2,2},{spare1,3}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:RedirectedCarrierInfo OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_RedirectedCarrierInfo'(Bytes3, opt_or_default, [{tag,128,1,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3   External EUTRA-RRC:IdleModeMobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_IdleModeMobilityControlInfo'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_RRCConnectionRelease-r8-IEs_nonCriticalExtension'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'RRCConnectionRelease-r8-IEs', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  RRCConnectionRelease
%%================================
'enc_RRCConnectionRelease'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionRelease_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionRelease_criticalExtensions
%%================================

'enc_RRCConnectionRelease_criticalExtensions'({'RRCConnectionRelease_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionRelease_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionRelease_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionRelease_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionRelease_criticalExtensions_c1
%%================================

'enc_RRCConnectionRelease_criticalExtensions_c1'({'RRCConnectionRelease_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionRelease_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionRelease_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionRelease-r8' ->
         'enc_RRCConnectionRelease-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionRelease_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionRelease-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRelease-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionRelease-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionRelease_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRelease_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRelease_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionRelease'(Bytes, OptOrMand) ->
   'dec_RRCConnectionRelease'(Bytes, OptOrMand, []).

'dec_RRCConnectionRelease'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionRelease_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionRelease', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionReject-r8-IEs
%%================================
'enc_RRCConnectionReject-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,waitTime), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReject-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReject-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReject-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReject-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReject-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,16},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_RRCConnectionReject-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionReject-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionReject
%%================================
'enc_RRCConnectionReject'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReject_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReject_criticalExtensions
%%================================

'enc_RRCConnectionReject_criticalExtensions'({'RRCConnectionReject_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReject_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReject_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReject_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReject_criticalExtensions_c1
%%================================

'enc_RRCConnectionReject_criticalExtensions_c1'({'RRCConnectionReject_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionReject_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionReject_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReject-r8' ->
         'enc_RRCConnectionReject-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionReject_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReject-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReject-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReject-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionReject_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReject_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReject_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReject_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReject'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReject'(Bytes, OptOrMand, []).

'dec_RRCConnectionReject'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RRCConnectionReject_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReject', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  ReestablishmentCause
%%================================

'enc_ReestablishmentCause'({'ReestablishmentCause',Val}, TagIn) ->
   'enc_ReestablishmentCause'(Val, TagIn);

'enc_ReestablishmentCause'(Val, TagIn) ->
case (case Val of {_,Enumval1}->Enumval1;_->Val end) of
reconfigurationFailure -> ?RT_BER:encode_enumerated(0,TagIn ++ []);
handoverFailure -> ?RT_BER:encode_enumerated(1,TagIn ++ []);
otherFailure -> ?RT_BER:encode_enumerated(2,TagIn ++ []);
spare1 -> ?RT_BER:encode_enumerated(3,TagIn ++ []);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end.


'dec_ReestablishmentCause'(Bytes, OptOrMand) ->
   'dec_ReestablishmentCause'(Bytes, OptOrMand, []).

'dec_ReestablishmentCause'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_enumerated(Bytes,[],[{reconfigurationFailure,0},{handoverFailure,1},{otherFailure,2},{spare1,3}],TagIn++[], OptOrMand).



%%================================
%%  ReestabUE-Identity
%%================================
'enc_ReestabUE-Identity'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(2,Val,'c-RNTI'), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,physCellId), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',16}], ?RT_BER:cindex(4,Val,'shortMAC-I'), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_ReestabUE-Identity'(Bytes, OptOrMand) ->
   'dec_ReestabUE-Identity'(Bytes, OptOrMand, []).

'dec_ReestabUE-Identity'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,16,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,503},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,16,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'ReestabUE-Identity', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  RRCConnectionReestablishmentRequest-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentRequest-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ReestabUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ReestabUE-Identity'(?RT_BER:cindex(2,Val,'ue-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,reestablishmentCause) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,reestablishmentCause) end) of
reconfigurationFailure -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
handoverFailure -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
otherFailure -> ?RT_BER:encode_enumerated(2,[{tag,128,1,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(3,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',2}], ?RT_BER:cindex(4,Val,spare), [], [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:ReestabUE-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_ReestabUE-Identity'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{reconfigurationFailure,0},{handoverFailure,1},{otherFailure,2},{spare1,3}],[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,2,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'RRCConnectionReestablishmentRequest-r8-IEs', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  RRCConnectionReestablishmentRequest
%%================================
'enc_RRCConnectionReestablishmentRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentRequest_criticalExtensions
%%================================

'enc_RRCConnectionReestablishmentRequest_criticalExtensions'({'RRCConnectionReestablishmentRequest_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReestablishmentRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentRequest-r8' ->
         'enc_RRCConnectionReestablishmentRequest-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReestablishmentRequest_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishmentRequest-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentRequest-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReestablishmentRequest-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReestablishmentRequest'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentRequest'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RRCConnectionReestablishmentRequest_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReestablishmentRequest', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReestablishmentReject-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentReject-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_RRCConnectionReestablishmentReject-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReestablishmentReject-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReestablishmentReject
%%================================
'enc_RRCConnectionReestablishmentReject'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RRCConnectionReestablishmentReject_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentReject_criticalExtensions
%%================================

'enc_RRCConnectionReestablishmentReject_criticalExtensions'({'RRCConnectionReestablishmentReject_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReestablishmentReject_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReestablishmentReject_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentReject-r8' ->
         'enc_RRCConnectionReestablishmentReject-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReestablishmentReject_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishmentReject-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentReject-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReestablishmentReject-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentReject_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReestablishmentReject'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentReject'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentReject'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RRCConnectionReestablishmentReject_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReestablishmentReject', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReestablishmentComplete-r8-IEs
%%================================
'enc_RRCConnectionReestablishmentComplete-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_RRCConnectionReestablishmentComplete-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReestablishmentComplete-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReestablishmentComplete
%%================================
'enc_RRCConnectionReestablishmentComplete'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishmentComplete_criticalExtensions
%%================================

'enc_RRCConnectionReestablishmentComplete_criticalExtensions'({'RRCConnectionReestablishmentComplete_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReestablishmentComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishmentComplete-r8' ->
         'enc_RRCConnectionReestablishmentComplete-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReestablishmentComplete_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishmentComplete-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentComplete-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReestablishmentComplete-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReestablishmentComplete'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishmentComplete'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishmentComplete'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionReestablishmentComplete_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionReestablishmentComplete', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionReestablishment-r8-IEs
%%================================
'enc_RRCConnectionReestablishment-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_RadioResourceConfigDedicated'(?RT_BER:cindex(2,Val,radioResourceConfigDedicated), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,nextHopChainingCount), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(4,Val,nonCriticalExtension), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishment-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReestablishment-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishment-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishment-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:RadioResourceConfigDedicated
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_RadioResourceConfigDedicated'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,7},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_RRCConnectionReestablishment-r8-IEs_nonCriticalExtension'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'RRCConnectionReestablishment-r8-IEs', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  RRCConnectionReestablishment
%%================================
'enc_RRCConnectionReestablishment'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReestablishment_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReestablishment_criticalExtensions
%%================================

'enc_RRCConnectionReestablishment_criticalExtensions'({'RRCConnectionReestablishment_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReestablishment_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReestablishment_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReestablishment_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReestablishment_criticalExtensions_c1
%%================================

'enc_RRCConnectionReestablishment_criticalExtensions_c1'({'RRCConnectionReestablishment_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionReestablishment_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionReestablishment_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReestablishment-r8' ->
         'enc_RRCConnectionReestablishment-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionReestablishment_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishment-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishment-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReestablishment-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReestablishment_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishment_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishment_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReestablishment'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReestablishment'(Bytes, OptOrMand, []).

'dec_RRCConnectionReestablishment'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionReestablishment_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionReestablishment', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  RRCConnectionReconfigurationComplete-r8-IEs
%%================================
'enc_RRCConnectionReconfigurationComplete-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_RRCConnectionReconfigurationComplete-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'RRCConnectionReconfigurationComplete-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReconfigurationComplete
%%================================
'enc_RRCConnectionReconfigurationComplete'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfigurationComplete_criticalExtensions
%%================================

'enc_RRCConnectionReconfigurationComplete_criticalExtensions'({'RRCConnectionReconfigurationComplete_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReconfigurationComplete_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReconfigurationComplete-r8' ->
         'enc_RRCConnectionReconfigurationComplete-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReconfigurationComplete_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReconfigurationComplete-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfigurationComplete-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReconfigurationComplete-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfigurationComplete_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReconfigurationComplete'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReconfigurationComplete'(Bytes, OptOrMand, []).

'dec_RRCConnectionReconfigurationComplete'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionReconfigurationComplete_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionReconfigurationComplete', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  SecurityConfigHO
%%================================
'enc_SecurityConfigHO'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityConfigHO_handoverType'(?RT_BER:cindex(2,Val,handoverType), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  SecurityConfigHO_handoverType
%%================================

'enc_SecurityConfigHO_handoverType'({'SecurityConfigHO_handoverType',Val}, TagIn) ->
   'enc_SecurityConfigHO_handoverType'(Val, TagIn);

'enc_SecurityConfigHO_handoverType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      intraLTE ->
         'enc_SecurityConfigHO_handoverType_intraLTE'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      interRAT ->
         'enc_SecurityConfigHO_handoverType_interRAT'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  SecurityConfigHO_handoverType_intraLTE
%%================================
'enc_SecurityConfigHO_handoverType_intraLTE'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,securityAlgorithmConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityAlgorithmConfig'(?RT_BER:cindex(2,Val,securityAlgorithmConfig), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_boolean(?RT_BER:cindex(3,Val,keyChangeIndicator), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,nextHopChainingCount), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityConfigHO_handoverType_intraLTE'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_SecurityAlgorithmConfig'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type BOOLEAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_boolean(Bytes3,[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,7},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'SecurityConfigHO_handoverType_intraLTE', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.



%%================================
%%  SecurityConfigHO_handoverType_interRAT
%%================================
'enc_SecurityConfigHO_handoverType_interRAT'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SecurityAlgorithmConfig'(?RT_BER:cindex(2,Val,securityAlgorithmConfig), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,'nas-SecurityParamToEUTRA'), [{tag,128,1,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_SecurityConfigHO_handoverType_interRAT'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:SecurityAlgorithmConfig
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SecurityAlgorithmConfig'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,6,[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'SecurityConfigHO_handoverType_interRAT', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.
'dec_SecurityConfigHO_handoverType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'intraLTE'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityConfigHO_handoverType_intraLTE'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{intraLTE, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'interRAT'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityConfigHO_handoverType_interRAT'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{interRAT, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_SecurityConfigHO'(Bytes, OptOrMand) ->
   'dec_SecurityConfigHO'(Bytes, OptOrMand, []).

'dec_SecurityConfigHO'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_SecurityConfigHO_handoverType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,ext),
   {{'SecurityConfigHO', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  RRCConnectionReconfiguration-r8-IEs
%%================================
'enc_RRCConnectionReconfiguration-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasConfig OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,measConfig) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasConfig'(?RT_BER:cindex(2,Val,measConfig), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,mobilityControlInfo) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MobilityControlInfo'(?RT_BER:cindex(3,Val,mobilityControlInfo), [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,dedicatedInfoNASList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(?RT_BER:cindex(4,Val,dedicatedInfoNASList), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:RadioResourceConfigDedicated OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,radioResourceConfigDedicated) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceConfigDedicated'(?RT_BER:cindex(5,Val,radioResourceConfigDedicated), [{tag,128,3,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SecurityConfigHO OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case ?RT_BER:cindex(6,Val,securityConfigHO) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SecurityConfigHO'(?RT_BER:cindex(6,Val,securityConfigHO), [{tag,128,4,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 6 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case ?RT_BER:cindex(7,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(7,Val,nonCriticalExtension), [{tag,128,5,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList
%%================================

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'({'RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList',Val}, TagIn) ->
   'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Val, TagIn);

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_octet_string([], H, []),
   'enc_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).

'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_octet_string(FBytes,[],[], no_length, mandatory)
end, [], []).





%%================================
%%  RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension
%%================================
'enc_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes, OptOrMand, []).

'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasConfig OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_MeasConfig'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:MobilityControlInfo OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_MobilityControlInfo'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_RRCConnectionReconfiguration-r8-IEs_dedicatedInfoNASList'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:RadioResourceConfigDedicated OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_RadioResourceConfigDedicated'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

%%-------------------------------------------------
%% attribute number 5   External EUTRA-RRC:SecurityConfigHO OPTIONAL
%%-------------------------------------------------
   {Term5,Bytes7,Rb6} = case Bytes6 of
<<2:2,_:1,4:5,_/binary>> ->
'dec_SecurityConfigHO'(Bytes6, opt_or_default, [{tag,128,4,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes6, 0 }
end,

%%-------------------------------------------------
%% attribute number 6 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term6,Bytes8,Rb7} = case Bytes7 of
<<2:2,_:1,5:5,_/binary>> ->
'dec_RRCConnectionReconfiguration-r8-IEs_nonCriticalExtension'(Bytes7, opt_or_default, [{tag,128,5,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes7, 0 }
end,

   {Bytes9,Rb8} = ?RT_BER:restbytes2(RemBytes, Bytes8,noext),
   {{'RRCConnectionReconfiguration-r8-IEs', Term1, Term2, Term3, Term4, Term5, Term6}, Bytes9, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6+Rb7+Rb8}.


%%================================
%%  RRCConnectionReconfiguration
%%================================
'enc_RRCConnectionReconfiguration'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_RRCConnectionReconfiguration_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  RRCConnectionReconfiguration_criticalExtensions
%%================================

'enc_RRCConnectionReconfiguration_criticalExtensions'({'RRCConnectionReconfiguration_criticalExtensions',Val}, TagIn) ->
   'enc_RRCConnectionReconfiguration_criticalExtensions'(Val, TagIn);

'enc_RRCConnectionReconfiguration_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  RRCConnectionReconfiguration_criticalExtensions_c1
%%================================

'enc_RRCConnectionReconfiguration_criticalExtensions_c1'({'RRCConnectionReconfiguration_criticalExtensions_c1',Val}, TagIn) ->
   'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(Val, TagIn);

'enc_RRCConnectionReconfiguration_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'rrcConnectionReconfiguration-r8' ->
         'enc_RRCConnectionReconfiguration-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_RRCConnectionReconfiguration_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReconfiguration-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfiguration-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'rrcConnectionReconfiguration-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_RRCConnectionReconfiguration_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfiguration_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfiguration_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_RRCConnectionReconfiguration'(Bytes, OptOrMand) ->
   'dec_RRCConnectionReconfiguration'(Bytes, OptOrMand, []).

'dec_RRCConnectionReconfiguration'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_RRCConnectionReconfiguration_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'RRCConnectionReconfiguration', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  IMSI-Digit
%%================================

'enc_IMSI-Digit'({'IMSI-Digit',Val}, TagIn) ->
   'enc_IMSI-Digit'(Val, TagIn);

'enc_IMSI-Digit'(Val, TagIn) ->
?RT_BER:encode_integer([], Val, TagIn ++ []).


'dec_IMSI-Digit'(Bytes, OptOrMand) ->
   'dec_IMSI-Digit'(Bytes, OptOrMand, []).

'dec_IMSI-Digit'(Bytes, OptOrMand, TagIn) ->
?RT_BER:decode_integer(Bytes,{0,9},TagIn++[], OptOrMand).



%%================================
%%  IMSI
%%================================

'enc_IMSI'({'IMSI',Val}, TagIn) ->
   'enc_IMSI'(Val, TagIn);

'enc_IMSI'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_IMSI_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_IMSI_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_IMSI_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_integer([], H, []),
   'enc_IMSI_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_IMSI'(Bytes, OptOrMand) ->
   'dec_IMSI'(Bytes, OptOrMand, []).

'dec_IMSI'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_integer(FBytes,{0,9},[], mandatory)
end, [], []).




%%================================
%%  PagingUE-Identity
%%================================

'enc_PagingUE-Identity'({'PagingUE-Identity',Val}, TagIn) ->
   'enc_PagingUE-Identity'(Val, TagIn);

'enc_PagingUE-Identity'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      's-TMSI' ->
         'enc_S-TMSI'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      imsi ->
         'enc_IMSI'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_PagingUE-Identity'(Bytes, OptOrMand) ->
   'dec_PagingUE-Identity'(Bytes, OptOrMand, []).

'dec_PagingUE-Identity'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 's-TMSI'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_S-TMSI'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'s-TMSI', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'imsi'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_IMSI'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{imsi, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


%%================================
%%  PagingRecord
%%================================
'enc_PagingRecord'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PagingUE-Identity
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PagingUE-Identity'(?RT_BER:cindex(2,Val,'ue-Identity'), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case (case ?RT_BER:cindex(3,Val,'cn-Domain') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,'cn-Domain') end) of
ps -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
cs -> ?RT_BER:encode_enumerated(1,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PagingRecord'(Bytes, OptOrMand) ->
   'dec_PagingRecord'(Bytes, OptOrMand, []).

'dec_PagingRecord'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PagingUE-Identity
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PagingUE-Identity'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_enumerated(Bytes3,[],[{ps,0},{cs,1}],[{tag,128,1,'IMPLICIT',0}], mandatory),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,ext),
   {{'PagingRecord', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  PagingRecordList
%%================================

'enc_PagingRecordList'({'PagingRecordList',Val}, TagIn) ->
   'enc_PagingRecordList'(Val, TagIn);

'enc_PagingRecordList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_PagingRecordList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_PagingRecordList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PagingRecordList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PagingRecord'(H, []),
   'enc_PagingRecordList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_PagingRecordList'(Bytes, OptOrMand) ->
   'dec_PagingRecordList'(Bytes, OptOrMand, []).

'dec_PagingRecordList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_PagingRecord'/3, [], []).




%%================================
%%  Paging
%%================================
'enc_Paging'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PagingRecordList OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,pagingRecordList) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_PagingRecordList'(?RT_BER:cindex(2,Val,pagingRecordList), [{tag,128,0,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,systemInfoModification) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(3,Val,systemInfoModification) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(3,Val,systemInfoModification) end) of
true -> ?RT_BER:encode_enumerated(0,[{tag,128,1,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'etws-Indication') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case (case ?RT_BER:cindex(4,Val,'etws-Indication') of {_,Enumval3}->Enumval3;_->?RT_BER:cindex(4,Val,'etws-Indication') end) of
true -> ?RT_BER:encode_enumerated(0,[{tag,128,2,'IMPLICIT',0}]);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end
       end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Paging_nonCriticalExtension'(?RT_BER:cindex(5,Val,nonCriticalExtension), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  Paging_nonCriticalExtension
%%================================
'enc_Paging_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_Paging_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'Paging_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_Paging'(Bytes, OptOrMand) ->
   'dec_Paging'(Bytes, OptOrMand, []).

'dec_Paging'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PagingRecordList OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_PagingRecordList'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

%%-------------------------------------------------
%% attribute number 2 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes3,[],[{true,0}],[{tag,128,1,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_enumerated(Bytes4,[],[{true,0}],[{tag,128,2,'IMPLICIT',0}], mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_Paging_nonCriticalExtension'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'Paging', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  SystemInfoListGERAN
%%================================

'enc_SystemInfoListGERAN'({'SystemInfoListGERAN',Val}, TagIn) ->
   'enc_SystemInfoListGERAN'(Val, TagIn);

'enc_SystemInfoListGERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_SystemInfoListGERAN_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_SystemInfoListGERAN_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SystemInfoListGERAN_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = ?RT_BER:encode_octet_string([], H, []),
   'enc_SystemInfoListGERAN_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_SystemInfoListGERAN'(Bytes, OptOrMand) ->
   'dec_SystemInfoListGERAN'(Bytes, OptOrMand, []).

'dec_SystemInfoListGERAN'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun(FBytes,_,_)->
?RT_BER:decode_octet_string(FBytes,{1,23},[], no_length, mandatory)
end, [], []).




%%================================
%%  SI-OrPSI-GERAN
%%================================

'enc_SI-OrPSI-GERAN'({'SI-OrPSI-GERAN',Val}, TagIn) ->
   'enc_SI-OrPSI-GERAN'(Val, TagIn);

'enc_SI-OrPSI-GERAN'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      si ->
         'enc_SystemInfoListGERAN'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      psi ->
         'enc_SystemInfoListGERAN'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).




'dec_SI-OrPSI-GERAN'(Bytes, OptOrMand) ->
   'dec_SI-OrPSI-GERAN'(Bytes, OptOrMand, []).

'dec_SI-OrPSI-GERAN'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'si'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInfoListGERAN'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{si, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'psi'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInfoListGERAN'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{psi, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  CellChangeOrder
%%================================
'enc_CellChangeOrder'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,t304) of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,t304) end) of
ms100 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
ms200 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
ms500 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
ms1000 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
ms2000 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
ms4000 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
ms8000 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CellChangeOrder_targetRAT-Type'(?RT_BER:cindex(3,Val,'targetRAT-Type'), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CellChangeOrder_targetRAT-Type
%%================================

'enc_CellChangeOrder_targetRAT-Type'({'CellChangeOrder_targetRAT-Type',Val}, TagIn) ->
   'enc_CellChangeOrder_targetRAT-Type'(Val, TagIn);

'enc_CellChangeOrder_targetRAT-Type'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      geran ->
         'enc_CellChangeOrder_targetRAT-Type_geran'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CellChangeOrder_targetRAT-Type_geran
%%================================
'enc_CellChangeOrder_targetRAT-Type_geran'(Val, TagIn) ->
   
%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PhysCellIdGERAN'(?RT_BER:cindex(2,Val,physCellId), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CarrierFreqGERAN'(?RT_BER:cindex(3,Val,carrierFreq), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,networkControlOrder) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',2}], ?RT_BER:cindex(4,Val,networkControlOrder), [], [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,systemInformation) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SI-OrPSI-GERAN'(?RT_BER:cindex(5,Val,systemInformation), [{tag,128,3,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CellChangeOrder_targetRAT-Type_geran'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PhysCellIdGERAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PhysCellIdGERAN'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:CarrierFreqGERAN
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CarrierFreqGERAN'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes4,2,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_SI-OrPSI-GERAN'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'CellChangeOrder_targetRAT-Type_geran', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.
'dec_CellChangeOrder_targetRAT-Type'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'geran'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CellChangeOrder_targetRAT-Type_geran'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{geran, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      _ -> 
         {{asn1_ExtAlt,Bytes1},<<>>, RbExp}
   end.


'dec_CellChangeOrder'(Bytes, OptOrMand) ->
   'dec_CellChangeOrder'(Bytes, OptOrMand, []).

'dec_CellChangeOrder'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{ms100,0},{ms200,1},{ms500,2},{ms1000,3},{ms2000,4},{ms4000,5},{ms8000,6},{spare1,7}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CellChangeOrder_targetRAT-Type'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CellChangeOrder', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  Handover
%%================================
'enc_Handover'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'targetRAT-Type') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'targetRAT-Type') end) of
utra -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
geran -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
'cdma2000-1XRTT' -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
'cdma2000-HRPD' -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
spare4 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
spare3 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
spare2 -> ?RT_BER:encode_enumerated(6,[{tag,128,0,'IMPLICIT',0}]);
spare1 -> ?RT_BER:encode_enumerated(7,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,'targetRAT-MessageContainer'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,'nas-SecurityParamFromEUTRA') of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,'nas-SecurityParamFromEUTRA'), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,systemInformation) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SI-OrPSI-GERAN'(?RT_BER:cindex(5,Val,systemInformation), [{tag,128,3,'EXPLICIT',32}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_Handover'(Bytes, OptOrMand) ->
   'dec_Handover'(Bytes, OptOrMand, []).

'dec_Handover'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],{[{utra,0},{geran,1},{'cdma2000-1XRTT',2},{'cdma2000-HRPD',3},{spare4,4},{spare3,5},{spare2,6},{spare1,7}],[]},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes4,1,[{tag,128,2,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4   External EUTRA-RRC:SI-OrPSI-GERAN OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_SI-OrPSI-GERAN'(Bytes5, opt_or_default, [{tag,128,3,'EXPLICIT',32}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'Handover', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  MobilityFromEUTRACommand-r8-IEs
%%================================
'enc_MobilityFromEUTRACommand-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_boolean(?RT_BER:cindex(2,Val,'cs-FallbackIndicator'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(?RT_BER:cindex(3,Val,purpose), [{tag,128,1,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(4,Val,nonCriticalExtension), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MobilityFromEUTRACommand-r8-IEs_purpose
%%================================

'enc_MobilityFromEUTRACommand-r8-IEs_purpose'({'MobilityFromEUTRACommand-r8-IEs_purpose',Val}, TagIn) ->
   'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Val, TagIn);

'enc_MobilityFromEUTRACommand-r8-IEs_purpose'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      handover ->
         'enc_Handover'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      cellChangeOrder ->
         'enc_CellChangeOrder'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'handover'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_Handover'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{handover, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'cellChangeOrder'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CellChangeOrder'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{cellChangeOrder, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension
%%================================
'enc_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes, OptOrMand) ->
   'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes, OptOrMand, []).

'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BOOLEAN
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_boolean(Bytes2,[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MobilityFromEUTRACommand-r8-IEs_purpose'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_MobilityFromEUTRACommand-r8-IEs_nonCriticalExtension'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'MobilityFromEUTRACommand-r8-IEs', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  MobilityFromEUTRACommand
%%================================
'enc_MobilityFromEUTRACommand'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_MobilityFromEUTRACommand_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MobilityFromEUTRACommand_criticalExtensions
%%================================

'enc_MobilityFromEUTRACommand_criticalExtensions'({'MobilityFromEUTRACommand_criticalExtensions',Val}, TagIn) ->
   'enc_MobilityFromEUTRACommand_criticalExtensions'(Val, TagIn);

'enc_MobilityFromEUTRACommand_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  MobilityFromEUTRACommand_criticalExtensions_c1
%%================================

'enc_MobilityFromEUTRACommand_criticalExtensions_c1'({'MobilityFromEUTRACommand_criticalExtensions_c1',Val}, TagIn) ->
   'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(Val, TagIn);

'enc_MobilityFromEUTRACommand_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'mobilityFromEUTRACommand-r8' ->
         'enc_MobilityFromEUTRACommand-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MobilityFromEUTRACommand_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'mobilityFromEUTRACommand-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MobilityFromEUTRACommand-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'mobilityFromEUTRACommand-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_MobilityFromEUTRACommand_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MobilityFromEUTRACommand_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MobilityFromEUTRACommand_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MobilityFromEUTRACommand'(Bytes, OptOrMand) ->
   'dec_MobilityFromEUTRACommand'(Bytes, OptOrMand, []).

'dec_MobilityFromEUTRACommand'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_MobilityFromEUTRACommand_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MobilityFromEUTRACommand', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  MeasurementReport-r8-IEs
%%================================
'enc_MeasurementReport-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasResults
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasResults'(?RT_BER:cindex(2,Val,measResults), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasurementReport-r8-IEs_nonCriticalExtension
%%================================
'enc_MeasurementReport-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'MeasurementReport-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_MeasurementReport-r8-IEs'(Bytes, OptOrMand) ->
   'dec_MeasurementReport-r8-IEs'(Bytes, OptOrMand, []).

'dec_MeasurementReport-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:MeasResults
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MeasResults'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_MeasurementReport-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'MeasurementReport-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  MeasurementReport
%%================================
'enc_MeasurementReport'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_MeasurementReport_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  MeasurementReport_criticalExtensions
%%================================

'enc_MeasurementReport_criticalExtensions'({'MeasurementReport_criticalExtensions',Val}, TagIn) ->
   'enc_MeasurementReport_criticalExtensions'(Val, TagIn);

'enc_MeasurementReport_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_MeasurementReport_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  MeasurementReport_criticalExtensions_c1
%%================================

'enc_MeasurementReport_criticalExtensions_c1'({'MeasurementReport_criticalExtensions_c1',Val}, TagIn) ->
   'enc_MeasurementReport_criticalExtensions_c1'(Val, TagIn);

'enc_MeasurementReport_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'measurementReport-r8' ->
         'enc_MeasurementReport-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_MeasurementReport_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'measurementReport-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasurementReport-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'measurementReport-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,4,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,5,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,6,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,7,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  MeasurementReport_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'MeasurementReport_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_MeasurementReport_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasurementReport_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasurementReport_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_MeasurementReport'(Bytes, OptOrMand) ->
   'dec_MeasurementReport'(Bytes, OptOrMand, []).

'dec_MeasurementReport'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_MeasurementReport_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'MeasurementReport', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  MasterInformationBlock
%%================================
'enc_MasterInformationBlock'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'dl-Bandwidth') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'dl-Bandwidth') end) of
n6 -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
n15 -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
n25 -> ?RT_BER:encode_enumerated(2,[{tag,128,0,'IMPLICIT',0}]);
n50 -> ?RT_BER:encode_enumerated(3,[{tag,128,0,'IMPLICIT',0}]);
n75 -> ?RT_BER:encode_enumerated(4,[{tag,128,0,'IMPLICIT',0}]);
n100 -> ?RT_BER:encode_enumerated(5,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PHICH-Config
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_PHICH-Config'(?RT_BER:cindex(3,Val,'phich-Config'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_bit_string([{'SizeConstraint',8}], ?RT_BER:cindex(4,Val,systemFrameNumber), [], [{tag,128,2,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = ?RT_BER:encode_bit_string([{'SizeConstraint',10}], ?RT_BER:cindex(5,Val,spare), [], [{tag,128,3,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_MasterInformationBlock'(Bytes, OptOrMand) ->
   'dec_MasterInformationBlock'(Bytes, OptOrMand, []).

'dec_MasterInformationBlock'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{n6,0},{n15,1},{n25,2},{n50,3},{n75,4},{n100,5}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2   External EUTRA-RRC:PHICH-Config
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_PHICH-Config'(Bytes3, mandatory, [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type BIT STRING
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_bit_string(Bytes4,8,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 4 with type BIT STRING
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = ?RT_BER:decode_bit_string(Bytes5,10,[],[{tag,128,3,'IMPLICIT',0}], no_length, mandatory),

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'MasterInformationBlock', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  HandoverFromEUTRAPreparationRequest-r8-IEs
%%================================
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case (case ?RT_BER:cindex(2,Val,'cdma2000-Type') of {_,Enumval1}->Enumval1;_->?RT_BER:cindex(2,Val,'cdma2000-Type') end) of
type1XRTT -> ?RT_BER:encode_enumerated(0,[{tag,128,0,'IMPLICIT',0}]);
typeHRPD -> ?RT_BER:encode_enumerated(1,[{tag,128,0,'IMPLICIT',0}]);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,rand) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_bit_string([{'SizeConstraint',32}], ?RT_BER:cindex(3,Val,rand), [], [{tag,128,1,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,mobilityParameters) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            ?RT_BER:encode_octet_string([], ?RT_BER:cindex(4,Val,mobilityParameters), [{tag,128,2,'IMPLICIT',0}])
       end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case ?RT_BER:cindex(5,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(5,Val,nonCriticalExtension), [{tag,128,3,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
  LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension
%%================================
'enc_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes, OptOrMand) ->
   'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes, OptOrMand, []).

'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type ENUMERATED
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_enumerated(Bytes2,[],[{type1XRTT,0},{typeHRPD,1}],[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
?RT_BER:decode_bit_string(Bytes3,32,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

%%-------------------------------------------------
%% attribute number 3 with type OCTET STRING OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
?RT_BER:decode_octet_string(Bytes4,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

%%-------------------------------------------------
%% attribute number 4 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term4,Bytes6,Rb5} = case Bytes5 of
<<2:2,_:1,3:5,_/binary>> ->
'dec_HandoverFromEUTRAPreparationRequest-r8-IEs_nonCriticalExtension'(Bytes5, opt_or_default, [{tag,128,3,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes5, 0 }
end,

   {Bytes7,Rb6} = ?RT_BER:restbytes2(RemBytes, Bytes6,noext),
   {{'HandoverFromEUTRAPreparationRequest-r8-IEs', Term1, Term2, Term3, Term4}, Bytes7, Rb1+Rb2+Rb3+Rb4+Rb5+Rb6}.


%%================================
%%  HandoverFromEUTRAPreparationRequest
%%================================
'enc_HandoverFromEUTRAPreparationRequest'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions
%%================================

'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'({'HandoverFromEUTRAPreparationRequest_criticalExtensions',Val}, TagIn) ->
   'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Val, TagIn);

'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions_c1
%%================================

'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'({'HandoverFromEUTRAPreparationRequest_criticalExtensions_c1',Val}, TagIn) ->
   'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Val, TagIn);

'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'handoverFromEUTRAPreparationRequest-r8' ->
         'enc_HandoverFromEUTRAPreparationRequest-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'handoverFromEUTRAPreparationRequest-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_HandoverFromEUTRAPreparationRequest-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'handoverFromEUTRAPreparationRequest-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_HandoverFromEUTRAPreparationRequest'(Bytes, OptOrMand) ->
   'dec_HandoverFromEUTRAPreparationRequest'(Bytes, OptOrMand, []).

'dec_HandoverFromEUTRAPreparationRequest'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_HandoverFromEUTRAPreparationRequest_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'HandoverFromEUTRAPreparationRequest', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  DLInformationTransfer-r8-IEs
%%================================
'enc_DLInformationTransfer-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(?RT_BER:cindex(2,Val,dedicatedInfoType), [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  DLInformationTransfer-r8-IEs_dedicatedInfoType
%%================================

'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'({'DLInformationTransfer-r8-IEs_dedicatedInfoType',Val}, TagIn) ->
   'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn);

'enc_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      dedicatedInfoNAS ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      'dedicatedInfoCDMA2000-1XRTT' ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      'dedicatedInfoCDMA2000-HRPD' ->
         ?RT_BER:encode_octet_string([], element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'dedicatedInfoNAS'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),
         {{dedicatedInfoNAS, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dedicatedInfoCDMA2000-1XRTT'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),
         {{'dedicatedInfoCDMA2000-1XRTT', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dedicatedInfoCDMA2000-HRPD'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_octet_string(Bytes1,[],[{tag,128,2,'IMPLICIT',0}], no_length, mandatory),
         {{'dedicatedInfoCDMA2000-HRPD', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  DLInformationTransfer-r8-IEs_nonCriticalExtension
%%================================
'enc_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'DLInformationTransfer-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_DLInformationTransfer-r8-IEs'(Bytes, OptOrMand) ->
   'dec_DLInformationTransfer-r8-IEs'(Bytes, OptOrMand, []).

'dec_DLInformationTransfer-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DLInformationTransfer-r8-IEs_dedicatedInfoType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_DLInformationTransfer-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'DLInformationTransfer-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  DLInformationTransfer
%%================================
'enc_DLInformationTransfer'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_DLInformationTransfer_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  DLInformationTransfer_criticalExtensions
%%================================

'enc_DLInformationTransfer_criticalExtensions'({'DLInformationTransfer_criticalExtensions',Val}, TagIn) ->
   'enc_DLInformationTransfer_criticalExtensions'(Val, TagIn);

'enc_DLInformationTransfer_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DLInformationTransfer_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  DLInformationTransfer_criticalExtensions_c1
%%================================

'enc_DLInformationTransfer_criticalExtensions_c1'({'DLInformationTransfer_criticalExtensions_c1',Val}, TagIn) ->
   'enc_DLInformationTransfer_criticalExtensions_c1'(Val, TagIn);

'enc_DLInformationTransfer_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'dlInformationTransfer-r8' ->
         'enc_DLInformationTransfer-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_DLInformationTransfer_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'dlInformationTransfer-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DLInformationTransfer-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'dlInformationTransfer-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  DLInformationTransfer_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_DLInformationTransfer_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DLInformationTransfer_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DLInformationTransfer_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_DLInformationTransfer'(Bytes, OptOrMand) ->
   'dec_DLInformationTransfer'(Bytes, OptOrMand, []).

'dec_DLInformationTransfer'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_DLInformationTransfer_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'DLInformationTransfer', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CSFBParametersResponseCDMA2000-r8-IEs
%%================================
'enc_CSFBParametersResponseCDMA2000-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_bit_string([{'SizeConstraint',32}], ?RT_BER:cindex(2,Val,rand), [], [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_octet_string([], ?RT_BER:cindex(3,Val,mobilityParameters), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case ?RT_BER:cindex(4,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(4,Val,nonCriticalExtension), [{tag,128,2,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension
%%================================
'enc_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes, OptOrMand) ->
   'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes, OptOrMand, []).

'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type BIT STRING
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_bit_string(Bytes2,32,[],[{tag,128,0,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 2 with type OCTET STRING
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_octet_string(Bytes3,[],[{tag,128,1,'IMPLICIT',0}], no_length, mandatory),

%%-------------------------------------------------
%% attribute number 3 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = case Bytes4 of
<<2:2,_:1,2:5,_/binary>> ->
'dec_CSFBParametersResponseCDMA2000-r8-IEs_nonCriticalExtension'(Bytes4, opt_or_default, [{tag,128,2,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes4, 0 }
end,

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'CSFBParametersResponseCDMA2000-r8-IEs', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  CSFBParametersResponseCDMA2000
%%================================
'enc_CSFBParametersResponseCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersResponseCDMA2000_criticalExtensions
%%================================

'enc_CSFBParametersResponseCDMA2000_criticalExtensions'({'CSFBParametersResponseCDMA2000_criticalExtensions',Val}, TagIn) ->
   'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(Val, TagIn);

'enc_CSFBParametersResponseCDMA2000_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'csfbParametersResponseCDMA2000-r8' ->
         'enc_CSFBParametersResponseCDMA2000-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_CSFBParametersResponseCDMA2000_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'csfbParametersResponseCDMA2000-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersResponseCDMA2000-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'csfbParametersResponseCDMA2000-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersResponseCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_CSFBParametersResponseCDMA2000'(Bytes, OptOrMand) ->
   'dec_CSFBParametersResponseCDMA2000'(Bytes, OptOrMand, []).

'dec_CSFBParametersResponseCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CSFBParametersResponseCDMA2000_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CSFBParametersResponseCDMA2000', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CSFBParametersRequestCDMA2000-r8-IEs
%%================================
'enc_CSFBParametersRequestCDMA2000-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case ?RT_BER:cindex(2,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(2,Val,nonCriticalExtension), [{tag,128,0,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension
%%================================
'enc_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes, OptOrMand) ->
   'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes, OptOrMand, []).

'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = case Bytes2 of
<<2:2,_:1,0:5,_/binary>> ->
'dec_CSFBParametersRequestCDMA2000-r8-IEs_nonCriticalExtension'(Bytes2, opt_or_default, [{tag,128,0,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes2, 0 }
end,

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'CSFBParametersRequestCDMA2000-r8-IEs', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  CSFBParametersRequestCDMA2000
%%================================
'enc_CSFBParametersRequestCDMA2000'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(?RT_BER:cindex(2,Val,criticalExtensions), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CSFBParametersRequestCDMA2000_criticalExtensions
%%================================

'enc_CSFBParametersRequestCDMA2000_criticalExtensions'({'CSFBParametersRequestCDMA2000_criticalExtensions',Val}, TagIn) ->
   'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(Val, TagIn);

'enc_CSFBParametersRequestCDMA2000_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'csfbParametersRequestCDMA2000-r8' ->
         'enc_CSFBParametersRequestCDMA2000-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_CSFBParametersRequestCDMA2000_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'csfbParametersRequestCDMA2000-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersRequestCDMA2000-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'csfbParametersRequestCDMA2000-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersRequestCDMA2000_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_CSFBParametersRequestCDMA2000'(Bytes, OptOrMand) ->
   'dec_CSFBParametersRequestCDMA2000'(Bytes, OptOrMand, []).

'dec_CSFBParametersRequestCDMA2000'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type CHOICE
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_CSFBParametersRequestCDMA2000_criticalExtensions'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'CSFBParametersRequestCDMA2000', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  DRB-CountInfo
%%================================
'enc_DRB-CountInfo'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'drb-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'count-Uplink'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'count-Downlink'), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DRB-CountInfo'(Bytes, OptOrMand) ->
   'dec_DRB-CountInfo'(Bytes, OptOrMand, []).

'dec_DRB-CountInfo'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,4294967295},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,4294967295},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'DRB-CountInfo', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  DRB-CountInfoList
%%================================

'enc_DRB-CountInfoList'({'DRB-CountInfoList',Val}, TagIn) ->
   'enc_DRB-CountInfoList'(Val, TagIn);

'enc_DRB-CountInfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-CountInfoList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_DRB-CountInfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-CountInfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-CountInfo'(H, []),
   'enc_DRB-CountInfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-CountInfoList'(Bytes, OptOrMand) ->
   'dec_DRB-CountInfoList'(Bytes, OptOrMand, []).

'dec_DRB-CountInfoList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DRB-CountInfo'/3, [], []).




%%================================
%%  CounterCheckResponse-r8-IEs
%%================================
'enc_CounterCheckResponse-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DRB-CountInfoList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DRB-CountInfoList'(?RT_BER:cindex(2,Val,'drb-CountInfoList'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CounterCheckResponse-r8-IEs_nonCriticalExtension
%%================================
'enc_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CounterCheckResponse-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_CounterCheckResponse-r8-IEs'(Bytes, OptOrMand) ->
   'dec_CounterCheckResponse-r8-IEs'(Bytes, OptOrMand, []).

'dec_CounterCheckResponse-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DRB-CountInfoList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DRB-CountInfoList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CounterCheckResponse-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CounterCheckResponse-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CounterCheckResponse
%%================================
'enc_CounterCheckResponse'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CounterCheckResponse_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CounterCheckResponse_criticalExtensions
%%================================

'enc_CounterCheckResponse_criticalExtensions'({'CounterCheckResponse_criticalExtensions',Val}, TagIn) ->
   'enc_CounterCheckResponse_criticalExtensions'(Val, TagIn);

'enc_CounterCheckResponse_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'counterCheckResponse-r8' ->
         'enc_CounterCheckResponse-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      criticalExtensionsFuture ->
         'enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CounterCheckResponse_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_CounterCheckResponse_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'counterCheckResponse-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheckResponse-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'counterCheckResponse-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheckResponse_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_CounterCheckResponse'(Bytes, OptOrMand) ->
   'dec_CounterCheckResponse'(Bytes, OptOrMand, []).

'dec_CounterCheckResponse'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CounterCheckResponse_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CounterCheckResponse', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  DRB-CountMSB-Info
%%================================
'enc_DRB-CountMSB-Info'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'drb-Identity'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = ?RT_BER:encode_integer([], ?RT_BER:cindex(3,Val,'countMSB-Uplink'), [{tag,128,1,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = ?RT_BER:encode_integer([], ?RT_BER:cindex(4,Val,'countMSB-Downlink'), [{tag,128,2,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
  LenSoFar = EncLen1 + EncLen2 + EncLen3,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DRB-CountMSB-Info'(Bytes, OptOrMand) ->
   'dec_DRB-CountMSB-Info'(Bytes, OptOrMand, []).

'dec_DRB-CountMSB-Info'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{1,32},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type INTEGER
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = ?RT_BER:decode_integer(Bytes3,{0,33554431},[{tag,128,1,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 3 with type INTEGER
%%-------------------------------------------------
   {Term3,Bytes5,Rb4} = ?RT_BER:decode_integer(Bytes4,{0,33554431},[{tag,128,2,'IMPLICIT',0}], mandatory),

   {Bytes6,Rb5} = ?RT_BER:restbytes2(RemBytes, Bytes5,noext),
   {{'DRB-CountMSB-Info', Term1, Term2, Term3}, Bytes6, Rb1+Rb2+Rb3+Rb4+Rb5}.


%%================================
%%  DRB-CountMSB-InfoList
%%================================

'enc_DRB-CountMSB-InfoList'({'DRB-CountMSB-InfoList',Val}, TagIn) ->
   'enc_DRB-CountMSB-InfoList'(Val, TagIn);

'enc_DRB-CountMSB-InfoList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_DRB-CountMSB-InfoList_components'(Val,[],0),
   ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], EncBytes, EncLen).

'enc_DRB-CountMSB-InfoList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_DRB-CountMSB-InfoList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_DRB-CountMSB-Info'(H, []),
   'enc_DRB-CountMSB-InfoList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_DRB-CountMSB-InfoList'(Bytes, OptOrMand) ->
   'dec_DRB-CountMSB-InfoList'(Bytes, OptOrMand, []).

'dec_DRB-CountMSB-InfoList'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
   ?RT_BER:decode_components(Rb1, Len, Bytes1, fun 'dec_DRB-CountMSB-Info'/3, [], []).




%%================================
%%  CounterCheck-r8-IEs
%%================================
'enc_CounterCheck-r8-IEs'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DRB-CountMSB-InfoList
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DRB-CountMSB-InfoList'(?RT_BER:cindex(2,Val,'drb-CountMSB-InfoList'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case ?RT_BER:cindex(3,Val,nonCriticalExtension) of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CounterCheck-r8-IEs_nonCriticalExtension'(?RT_BER:cindex(3,Val,nonCriticalExtension), [{tag,128,1,'IMPLICIT',0}])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CounterCheck-r8-IEs_nonCriticalExtension
%%================================
'enc_CounterCheck-r8-IEs_nonCriticalExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CounterCheck-r8-IEs_nonCriticalExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CounterCheck-r8-IEs_nonCriticalExtension'}, Bytes1,
    Rb1}.


'dec_CounterCheck-r8-IEs'(Bytes, OptOrMand) ->
   'dec_CounterCheck-r8-IEs'(Bytes, OptOrMand, []).

'dec_CounterCheck-r8-IEs'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DRB-CountMSB-InfoList
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DRB-CountMSB-InfoList'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type SEQUENCE OPTIONAL
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = case Bytes3 of
<<2:2,_:1,1:5,_/binary>> ->
'dec_CounterCheck-r8-IEs_nonCriticalExtension'(Bytes3, opt_or_default, [{tag,128,1,'IMPLICIT',0}]);
_ ->
{ asn1_NOVALUE, Bytes3, 0 }
end,

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CounterCheck-r8-IEs', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  CounterCheck
%%================================
'enc_CounterCheck'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = ?RT_BER:encode_integer([], ?RT_BER:cindex(2,Val,'rrc-TransactionIdentifier'), [{tag,128,0,'IMPLICIT',0}]),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CounterCheck_criticalExtensions'(?RT_BER:cindex(3,Val,criticalExtensions), [{tag,128,1,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1, EncBytes2],
  LenSoFar = EncLen1 + EncLen2,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).



%%================================
%%  CounterCheck_criticalExtensions
%%================================

'enc_CounterCheck_criticalExtensions'({'CounterCheck_criticalExtensions',Val}, TagIn) ->
   'enc_CounterCheck_criticalExtensions'(Val, TagIn);

'enc_CounterCheck_criticalExtensions'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_CounterCheck_criticalExtensions_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      criticalExtensionsFuture ->
         'enc_CounterCheck_criticalExtensions_criticalExtensionsFuture'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  CounterCheck_criticalExtensions_c1
%%================================

'enc_CounterCheck_criticalExtensions_c1'({'CounterCheck_criticalExtensions_c1',Val}, TagIn) ->
   'enc_CounterCheck_criticalExtensions_c1'(Val, TagIn);

'enc_CounterCheck_criticalExtensions_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      'counterCheck-r8' ->
         'enc_CounterCheck-r8-IEs'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_CounterCheck_criticalExtensions_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'counterCheck-r8'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheck-r8-IEs'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{'counterCheck-r8', Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,1,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,2,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,3,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  CounterCheck_criticalExtensions_criticalExtensionsFuture
%%================================
'enc_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'CounterCheck_criticalExtensions_criticalExtensionsFuture'}, Bytes1,
    Rb1}.
'dec_CounterCheck_criticalExtensions'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheck_criticalExtensions_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'criticalExtensionsFuture'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheck_criticalExtensions_criticalExtensionsFuture'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{criticalExtensionsFuture, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


'dec_CounterCheck'(Bytes, OptOrMand) ->
   'dec_CounterCheck'(Bytes, OptOrMand, []).

'dec_CounterCheck'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1 with type INTEGER
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = ?RT_BER:decode_integer(Bytes2,{0,3},[{tag,128,0,'IMPLICIT',0}], mandatory),

%%-------------------------------------------------
%% attribute number 2 with type CHOICE
%%-------------------------------------------------
   {Term2,Bytes4,Rb3} = 'dec_CounterCheck_criticalExtensions'(Bytes3, mandatory, [{tag,128,1,'EXPLICIT',32}]),

   {Bytes5,Rb4} = ?RT_BER:restbytes2(RemBytes, Bytes4,noext),
   {{'CounterCheck', Term1, Term2}, Bytes5, Rb1+Rb2+Rb3+Rb4}.


%%================================
%%  UL-DCCH-MessageType
%%================================

'enc_UL-DCCH-MessageType'({'UL-DCCH-MessageType',Val}, TagIn) ->
   'enc_UL-DCCH-MessageType'(Val, TagIn);

'enc_UL-DCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UL-DCCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_UL-DCCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  UL-DCCH-MessageType_c1
%%================================

'enc_UL-DCCH-MessageType_c1'({'UL-DCCH-MessageType_c1',Val}, TagIn) ->
   'enc_UL-DCCH-MessageType_c1'(Val, TagIn);

'enc_UL-DCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      csfbParametersRequestCDMA2000 ->
         'enc_CSFBParametersRequestCDMA2000'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      measurementReport ->
         'enc_MeasurementReport'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      rrcConnectionReconfigurationComplete ->
         'enc_RRCConnectionReconfigurationComplete'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      rrcConnectionReestablishmentComplete ->
         'enc_RRCConnectionReestablishmentComplete'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      rrcConnectionSetupComplete ->
         'enc_RRCConnectionSetupComplete'(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      securityModeComplete ->
         'enc_SecurityModeComplete'(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      securityModeFailure ->
         'enc_SecurityModeFailure'(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      ueCapabilityInformation ->
         'enc_UECapabilityInformation'(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      ulHandoverPreparationTransfer ->
         'enc_ULHandoverPreparationTransfer'(element(2,Val), [{tag,128,8,'IMPLICIT',0}]);
      ulInformationTransfer ->
         'enc_ULInformationTransfer'(element(2,Val), [{tag,128,9,'IMPLICIT',0}]);
      counterCheckResponse ->
         'enc_CounterCheckResponse'(element(2,Val), [{tag,128,10,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,11,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,12,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,13,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,14,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,15,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_UL-DCCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'csfbParametersRequestCDMA2000'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersRequestCDMA2000'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{csfbParametersRequestCDMA2000, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'measurementReport'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MeasurementReport'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{measurementReport, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionReconfigurationComplete'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfigurationComplete'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{rrcConnectionReconfigurationComplete, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionReestablishmentComplete'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentComplete'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{rrcConnectionReestablishmentComplete, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionSetupComplete'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetupComplete'(Bytes1, mandatory, [{tag,128,4,'IMPLICIT',0}]),
         {{rrcConnectionSetupComplete, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'securityModeComplete'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeComplete'(Bytes1, mandatory, [{tag,128,5,'IMPLICIT',0}]),
         {{securityModeComplete, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'securityModeFailure'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeFailure'(Bytes1, mandatory, [{tag,128,6,'IMPLICIT',0}]),
         {{securityModeFailure, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'ueCapabilityInformation'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityInformation'(Bytes1, mandatory, [{tag,128,7,'IMPLICIT',0}]),
         {{ueCapabilityInformation, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'ulHandoverPreparationTransfer'
      <<2:2,_:1,8:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULHandoverPreparationTransfer'(Bytes1, mandatory, [{tag,128,8,'IMPLICIT',0}]),
         {{ulHandoverPreparationTransfer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'ulInformationTransfer'
      <<2:2,_:1,9:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_ULInformationTransfer'(Bytes1, mandatory, [{tag,128,9,'IMPLICIT',0}]),
         {{ulInformationTransfer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'counterCheckResponse'
      <<2:2,_:1,10:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheckResponse'(Bytes1, mandatory, [{tag,128,10,'IMPLICIT',0}]),
         {{counterCheckResponse, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,11:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,11,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,12,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,13:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,13,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,14:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,14,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,15:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,15,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  UL-DCCH-MessageType_messageClassExtension
%%================================
'enc_UL-DCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UL-DCCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UL-DCCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_UL-DCCH-MessageType'(Bytes, OptOrMand) ->
   'dec_UL-DCCH-MessageType'(Bytes, OptOrMand, []).

'dec_UL-DCCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UL-DCCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UL-DCCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  UL-DCCH-Message
%%================================
'enc_UL-DCCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-DCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-DCCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UL-DCCH-Message'(Bytes, OptOrMand) ->
   'dec_UL-DCCH-Message'(Bytes, OptOrMand, []).

'dec_UL-DCCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-DCCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UL-DCCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'UL-DCCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  UL-CCCH-MessageType
%%================================

'enc_UL-CCCH-MessageType'({'UL-CCCH-MessageType',Val}, TagIn) ->
   'enc_UL-CCCH-MessageType'(Val, TagIn);

'enc_UL-CCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_UL-CCCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_UL-CCCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  UL-CCCH-MessageType_c1
%%================================

'enc_UL-CCCH-MessageType_c1'({'UL-CCCH-MessageType_c1',Val}, TagIn) ->
   'enc_UL-CCCH-MessageType_c1'(Val, TagIn);

'enc_UL-CCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      rrcConnectionReestablishmentRequest ->
         'enc_RRCConnectionReestablishmentRequest'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      rrcConnectionRequest ->
         'enc_RRCConnectionRequest'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_UL-CCCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishmentRequest'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentRequest'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{rrcConnectionReestablishmentRequest, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionRequest'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRequest'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{rrcConnectionRequest, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  UL-CCCH-MessageType_messageClassExtension
%%================================
'enc_UL-CCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_UL-CCCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'UL-CCCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_UL-CCCH-MessageType'(Bytes, OptOrMand) ->
   'dec_UL-CCCH-MessageType'(Bytes, OptOrMand, []).

'dec_UL-CCCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UL-CCCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UL-CCCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  UL-CCCH-Message
%%================================
'enc_UL-CCCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-CCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UL-CCCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_UL-CCCH-Message'(Bytes, OptOrMand) ->
   'dec_UL-CCCH-Message'(Bytes, OptOrMand, []).

'dec_UL-CCCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:UL-CCCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_UL-CCCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'UL-CCCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  DL-DCCH-MessageType
%%================================

'enc_DL-DCCH-MessageType'({'DL-DCCH-MessageType',Val}, TagIn) ->
   'enc_DL-DCCH-MessageType'(Val, TagIn);

'enc_DL-DCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DL-DCCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_DL-DCCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  DL-DCCH-MessageType_c1
%%================================

'enc_DL-DCCH-MessageType_c1'({'DL-DCCH-MessageType_c1',Val}, TagIn) ->
   'enc_DL-DCCH-MessageType_c1'(Val, TagIn);

'enc_DL-DCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      csfbParametersResponseCDMA2000 ->
         'enc_CSFBParametersResponseCDMA2000'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      dlInformationTransfer ->
         'enc_DLInformationTransfer'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      handoverFromEUTRAPreparationRequest ->
         'enc_HandoverFromEUTRAPreparationRequest'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      mobilityFromEUTRACommand ->
         'enc_MobilityFromEUTRACommand'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      rrcConnectionReconfiguration ->
         'enc_RRCConnectionReconfiguration'(element(2,Val), [{tag,128,4,'IMPLICIT',0}]);
      rrcConnectionRelease ->
         'enc_RRCConnectionRelease'(element(2,Val), [{tag,128,5,'IMPLICIT',0}]);
      securityModeCommand ->
         'enc_SecurityModeCommand'(element(2,Val), [{tag,128,6,'IMPLICIT',0}]);
      ueCapabilityEnquiry ->
         'enc_UECapabilityEnquiry'(element(2,Val), [{tag,128,7,'IMPLICIT',0}]);
      counterCheck ->
         'enc_CounterCheck'(element(2,Val), [{tag,128,8,'IMPLICIT',0}]);
      spare7 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,9,'IMPLICIT',0}]);
      spare6 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,10,'IMPLICIT',0}]);
      spare5 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,11,'IMPLICIT',0}]);
      spare4 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,12,'IMPLICIT',0}]);
      spare3 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,13,'IMPLICIT',0}]);
      spare2 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,14,'IMPLICIT',0}]);
      spare1 ->
         ?RT_BER:encode_null(element(2,Val), [{tag,128,15,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_DL-DCCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'csfbParametersResponseCDMA2000'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CSFBParametersResponseCDMA2000'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{csfbParametersResponseCDMA2000, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'dlInformationTransfer'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DLInformationTransfer'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{dlInformationTransfer, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'handoverFromEUTRAPreparationRequest'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_HandoverFromEUTRAPreparationRequest'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{handoverFromEUTRAPreparationRequest, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'mobilityFromEUTRACommand'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_MobilityFromEUTRACommand'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{mobilityFromEUTRACommand, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionReconfiguration'
      <<2:2,_:1,4:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReconfiguration'(Bytes1, mandatory, [{tag,128,4,'IMPLICIT',0}]),
         {{rrcConnectionReconfiguration, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionRelease'
      <<2:2,_:1,5:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionRelease'(Bytes1, mandatory, [{tag,128,5,'IMPLICIT',0}]),
         {{rrcConnectionRelease, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'securityModeCommand'
      <<2:2,_:1,6:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SecurityModeCommand'(Bytes1, mandatory, [{tag,128,6,'IMPLICIT',0}]),
         {{securityModeCommand, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'ueCapabilityEnquiry'
      <<2:2,_:1,7:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_UECapabilityEnquiry'(Bytes1, mandatory, [{tag,128,7,'IMPLICIT',0}]),
         {{ueCapabilityEnquiry, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'counterCheck'
      <<2:2,_:1,8:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_CounterCheck'(Bytes1, mandatory, [{tag,128,8,'IMPLICIT',0}]),
         {{counterCheck, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare7'
      <<2:2,_:1,9:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,9,'IMPLICIT',0}], mandatory),
         {{spare7, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare6'
      <<2:2,_:1,10:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,10,'IMPLICIT',0}], mandatory),
         {{spare6, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare5'
      <<2:2,_:1,11:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,11,'IMPLICIT',0}], mandatory),
         {{spare5, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare4'
      <<2:2,_:1,12:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,12,'IMPLICIT',0}], mandatory),
         {{spare4, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare3'
      <<2:2,_:1,13:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,13,'IMPLICIT',0}], mandatory),
         {{spare3, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare2'
      <<2:2,_:1,14:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,14,'IMPLICIT',0}], mandatory),
         {{spare2, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'spare1'
      <<2:2,_:1,15:5,_/binary>> ->
         {Dec, Rest, RbCho} = ?RT_BER:decode_null(Bytes1,[{tag,128,15,'IMPLICIT',0}], mandatory),
         {{spare1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  DL-DCCH-MessageType_messageClassExtension
%%================================
'enc_DL-DCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_DL-DCCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'DL-DCCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_DL-DCCH-MessageType'(Bytes, OptOrMand) ->
   'dec_DL-DCCH-MessageType'(Bytes, OptOrMand, []).

'dec_DL-DCCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DL-DCCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DL-DCCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  DL-DCCH-Message
%%================================
'enc_DL-DCCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-DCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-DCCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DL-DCCH-Message'(Bytes, OptOrMand) ->
   'dec_DL-DCCH-Message'(Bytes, OptOrMand, []).

'dec_DL-DCCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-DCCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DL-DCCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'DL-DCCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  DL-CCCH-MessageType
%%================================

'enc_DL-CCCH-MessageType'({'DL-CCCH-MessageType',Val}, TagIn) ->
   'enc_DL-CCCH-MessageType'(Val, TagIn);

'enc_DL-CCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_DL-CCCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_DL-CCCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  DL-CCCH-MessageType_c1
%%================================

'enc_DL-CCCH-MessageType_c1'({'DL-CCCH-MessageType_c1',Val}, TagIn) ->
   'enc_DL-CCCH-MessageType_c1'(Val, TagIn);

'enc_DL-CCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      rrcConnectionReestablishment ->
         'enc_RRCConnectionReestablishment'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      rrcConnectionReestablishmentReject ->
         'enc_RRCConnectionReestablishmentReject'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      rrcConnectionReject ->
         'enc_RRCConnectionReject'(element(2,Val), [{tag,128,2,'IMPLICIT',0}]);
      rrcConnectionSetup ->
         'enc_RRCConnectionSetup'(element(2,Val), [{tag,128,3,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_DL-CCCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'rrcConnectionReestablishment'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishment'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{rrcConnectionReestablishment, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionReestablishmentReject'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReestablishmentReject'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{rrcConnectionReestablishmentReject, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionReject'
      <<2:2,_:1,2:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionReject'(Bytes1, mandatory, [{tag,128,2,'IMPLICIT',0}]),
         {{rrcConnectionReject, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'rrcConnectionSetup'
      <<2:2,_:1,3:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_RRCConnectionSetup'(Bytes1, mandatory, [{tag,128,3,'IMPLICIT',0}]),
         {{rrcConnectionSetup, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  DL-CCCH-MessageType_messageClassExtension
%%================================
'enc_DL-CCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_DL-CCCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'DL-CCCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_DL-CCCH-MessageType'(Bytes, OptOrMand) ->
   'dec_DL-CCCH-MessageType'(Bytes, OptOrMand, []).

'dec_DL-CCCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DL-CCCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_DL-CCCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  DL-CCCH-Message
%%================================
'enc_DL-CCCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-CCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_DL-CCCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_DL-CCCH-Message'(Bytes, OptOrMand) ->
   'dec_DL-CCCH-Message'(Bytes, OptOrMand, []).

'dec_DL-CCCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:DL-CCCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_DL-CCCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'DL-CCCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  PCCH-MessageType
%%================================

'enc_PCCH-MessageType'({'PCCH-MessageType',Val}, TagIn) ->
   'enc_PCCH-MessageType'(Val, TagIn);

'enc_PCCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_PCCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_PCCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  PCCH-MessageType_c1
%%================================

'enc_PCCH-MessageType_c1'({'PCCH-MessageType_c1',Val}, TagIn) ->
   'enc_PCCH-MessageType_c1'(Val, TagIn);

'enc_PCCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      paging ->
         'enc_Paging'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_PCCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'paging'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_Paging'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{paging, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  PCCH-MessageType_messageClassExtension
%%================================
'enc_PCCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_PCCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'PCCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_PCCH-MessageType'(Bytes, OptOrMand) ->
   'dec_PCCH-MessageType'(Bytes, OptOrMand, []).

'dec_PCCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_PCCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_PCCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  PCCH-Message
%%================================
'enc_PCCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PCCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PCCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_PCCH-Message'(Bytes, OptOrMand) ->
   'dec_PCCH-Message'(Bytes, OptOrMand, []).

'dec_PCCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:PCCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_PCCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'PCCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  BCCH-DL-SCH-MessageType
%%================================

'enc_BCCH-DL-SCH-MessageType'({'BCCH-DL-SCH-MessageType',Val}, TagIn) ->
   'enc_BCCH-DL-SCH-MessageType'(Val, TagIn);

'enc_BCCH-DL-SCH-MessageType'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      c1 ->
         'enc_BCCH-DL-SCH-MessageType_c1'(element(2,Val), [{tag,128,0,'EXPLICIT',32}]);
      messageClassExtension ->
         'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).





%%================================
%%  BCCH-DL-SCH-MessageType_c1
%%================================

'enc_BCCH-DL-SCH-MessageType_c1'({'BCCH-DL-SCH-MessageType_c1',Val}, TagIn) ->
   'enc_BCCH-DL-SCH-MessageType_c1'(Val, TagIn);

'enc_BCCH-DL-SCH-MessageType_c1'(Val, TagIn) ->
      {EncBytes,EncLen} = case element(1,Val) of
      systemInformation ->
         'enc_SystemInformation'(element(2,Val), [{tag,128,0,'IMPLICIT',0}]);
      systemInformationBlockType1 ->
         'enc_SystemInformationBlockType1'(element(2,Val), [{tag,128,1,'IMPLICIT',0}]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

?RT_BER:encode_tags(TagIn ++[], EncBytes, EncLen).


'dec_BCCH-DL-SCH-MessageType_c1'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'systemInformation'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformation'(Bytes1, mandatory, [{tag,128,0,'IMPLICIT',0}]),
         {{systemInformation, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'systemInformationBlockType1'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_SystemInformationBlockType1'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{systemInformationBlockType1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.



%%================================
%%  BCCH-DL-SCH-MessageType_messageClassExtension
%%================================
'enc_BCCH-DL-SCH-MessageType_messageClassExtension'(Val, TagIn) ->
   
   BytesSoFar = [],
  LenSoFar = 0,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).
'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,_Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 


   {{'BCCH-DL-SCH-MessageType_messageClassExtension'}, Bytes1,
    Rb1}.


'dec_BCCH-DL-SCH-MessageType'(Bytes, OptOrMand) ->
   'dec_BCCH-DL-SCH-MessageType'(Bytes, OptOrMand, []).

'dec_BCCH-DL-SCH-MessageType'(Bytes, OptOrMand, TagIn) ->
   {{_,Len},Bytes1, RbExp} = ?RT_BER:check_tags(TagIn++[], Bytes, OptOrMand),
   IndefEndBytes = fun(indefinite,<<0,0,R/binary>>)-> R; (_,B)-> B end,
   IndefEndRb = fun(indefinite,<<0,0,_R/binary>>)-> 2; (_,_)-> 0 end,
   case Bytes1 of

%% 'c1'
      <<2:2,_:1,0:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_BCCH-DL-SCH-MessageType_c1'(Bytes1, mandatory, [{tag,128,0,'EXPLICIT',32}]),
         {{c1, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};


%% 'messageClassExtension'
      <<2:2,_:1,1:5,_/binary>> ->
         {Dec, Rest, RbCho} = 'dec_BCCH-DL-SCH-MessageType_messageClassExtension'(Bytes1, mandatory, [{tag,128,1,'IMPLICIT',0}]),
         {{messageClassExtension, Dec}, IndefEndBytes(Len,Rest), RbExp + RbCho + IndefEndRb(Len,Rest)};

      Else -> 
         case OptOrMand of
            mandatory ->exit({error,{asn1,{invalid_choice_tag,Else}}});
            _ ->exit({error,{asn1,{no_optional_tag,Else}}})
         end
   end.


%%================================
%%  BCCH-DL-SCH-Message
%%================================
'enc_BCCH-DL-SCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BCCH-DL-SCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BCCH-DL-SCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'EXPLICIT',32}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BCCH-DL-SCH-Message'(Bytes, OptOrMand) ->
   'dec_BCCH-DL-SCH-Message'(Bytes, OptOrMand, []).

'dec_BCCH-DL-SCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BCCH-DL-SCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_BCCH-DL-SCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'EXPLICIT',32}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'BCCH-DL-SCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.


%%================================
%%  BCCH-BCH-MessageType
%%================================

'enc_BCCH-BCH-MessageType'({'BCCH-BCH-MessageType',Val}, TagIn) ->
   'enc_BCCH-BCH-MessageType'(Val, TagIn);

'enc_BCCH-BCH-MessageType'(Val, TagIn) ->
   'enc_MasterInformationBlock'(Val, TagIn ++ []).


'dec_BCCH-BCH-MessageType'(Bytes, OptOrMand) ->
   'dec_BCCH-BCH-MessageType'(Bytes, OptOrMand, []).

'dec_BCCH-BCH-MessageType'(Bytes, OptOrMand, TagIn) ->
'dec_MasterInformationBlock'(Bytes, OptOrMand, TagIn++[]).



%%================================
%%  BCCH-BCH-Message
%%================================
'enc_BCCH-BCH-Message'(Val, TagIn) ->

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BCCH-BCH-MessageType
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_BCCH-BCH-MessageType'(?RT_BER:cindex(2,Val,message), [{tag,128,0,'IMPLICIT',0}]),

   BytesSoFar = [EncBytes1],
  LenSoFar = EncLen1,
  ?RT_BER:encode_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], BytesSoFar, LenSoFar).


'dec_BCCH-BCH-Message'(Bytes, OptOrMand) ->
   'dec_BCCH-BCH-Message'(Bytes, OptOrMand, []).

'dec_BCCH-BCH-Message'(Bytes, OptOrMand, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
   {{_,Len},Bytes1,Rb1} = ?RT_BER:check_tags(TagIn ++ [{tag,0,16,'IMPLICIT',32}], Bytes, OptOrMand), 
{Bytes2,RemBytes} = ?RT_BER:split_list(Bytes1,Len),

%%-------------------------------------------------
%% attribute number 1   External EUTRA-RRC:BCCH-BCH-MessageType
%%-------------------------------------------------
   {Term1,Bytes3,Rb2} = 'dec_BCCH-BCH-MessageType'(Bytes2, mandatory, [{tag,128,0,'IMPLICIT',0}]),

   {Bytes4,Rb3} = ?RT_BER:restbytes2(RemBytes, Bytes3,noext),
   {{'BCCH-BCH-Message', Term1}, Bytes4, Rb1+Rb2+Rb3}.
'maxUTRA-TDD-Carrier'() ->
16.

'maxUTRA-FDD-Carrier'() ->
16.

'maxSI-Message'() ->
32.

'maxSIB-1'() ->
31.

'maxSIB'() ->
32.

'maxReportConfigId'() ->
32.

'maxRAT-Capabilities'() ->
8.

'maxPNOffset'() ->
511.

'maxPageRec'() ->
16.

'maxObjectId'() ->
32.

'maxMeasId'() ->
32.

'maxMCS-1'() ->
16.

'maxMBSFN-Allocations'() ->
8.

'maxGNFG'() ->
16.

'maxGERAN-SI'() ->
10.

'maxFreq'() ->
8.

'maxEARFCN'() ->
65535.

'maxDRB'() ->
11.

'maxCellReport'() ->
8.

'maxCellMeas'() ->
32.

'maxCellIntra'() ->
16.

'maxCellInter'() ->
16.

'maxCellBlack'() ->
16.

'maxCDMA-BandClass'() ->
32.

'maxBands'() ->
64.

