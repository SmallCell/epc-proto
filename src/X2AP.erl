%% Generated by the Erlang ASN.1 PER-compiler version, utilizing bit-syntax:2.0.4
%% Purpose: encoder and decoder to the types in mod X2AP

-module('X2AP').
-compile(nowarn_unused_vars).
-include("X2AP.hrl").
-asn1_info([{vsn,'2.0.4'},
            {module,'X2AP'},
            {options,[{i,"src"},
 {outdir,"src"},
 per,verbose,compact_bit_string,noobj,
 {i,"."},
 {i,"protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0]).
-export([
'enc_TriggeringMessage'/1,
'enc_ProtocolIE-ID'/1,
'enc_ProcedureCode'/1,
'enc_PrivateIE-ID'/1,
'enc_Presence'/1,
'enc_Criticality'/1,
'enc_PrivateMessage'/1,
'enc_CellMeasurementResult-Item'/1,
'enc_CellMeasurementResult-List'/1,
'enc_ResourceStatusUpdate'/1,
'enc_ResourceStatusFailure'/1,
'enc_ResourceStatusResponse'/1,
'enc_ReportingPeriodicity'/1,
'enc_CellToReport-Item'/1,
'enc_CellToReport-List'/1,
'enc_ResourceStatusRequest'/1,
'enc_ENBConfigurationUpdateFailure'/1,
'enc_ENBConfigurationUpdateAcknowledge'/1,
'enc_Old-ECGIs'/1,
'enc_ServedCellsToModify-Item'/1,
'enc_ServedCellsToModify'/1,
'enc_ENBConfigurationUpdate'/1,
'enc_CellInformation-Item'/1,
'enc_CellInformation-List'/1,
'enc_LoadInformation'/1,
'enc_X2SetupFailure'/1,
'enc_X2SetupResponse'/1,
'enc_X2SetupRequest'/1,
'enc_ResetResponse'/1,
'enc_ResetRequest'/1,
'enc_ErrorIndication'/1,
'enc_HandoverCancel'/1,
'enc_UEContextRelease'/1,
'enc_E-RABs-SubjectToStatusTransfer-Item'/1,
'enc_E-RABs-SubjectToStatusTransfer-List'/1,
'enc_SNStatusTransfer'/1,
'enc_HandoverPreparationFailure'/1,
'enc_E-RABs-Admitted-Item'/1,
'enc_E-RABs-Admitted-List'/1,
'enc_HandoverRequestAcknowledge'/1,
'enc_E-RABs-ToBeSetup-Item'/1,
'enc_E-RABs-ToBeSetup-List'/1,
'enc_UE-ContextInformation'/1,
'enc_HandoverRequest'/1,
'enc_UL-HighInterferenceIndication'/1,
'enc_UL-HighInterferenceIndicationInfo-Item'/1,
'enc_UL-HighInterferenceIndicationInfo'/1,
'enc_UL-InterferenceOverloadIndication-Item'/1,
'enc_UL-InterferenceOverloadIndication'/1,
'enc_UESecurityCapabilities'/1,
'enc_UEAggregateMaximumBitRate'/1,
'enc_UE-X2AP-ID'/1,
'enc_UE-S1AP-ID'/1,
'enc_UE-HistoryInformation'/1,
'enc_TypeOfError'/1,
'enc_TransportLayerAddress'/1,
'enc_Transmission-Bandwidth'/1,
'enc_TraceDepth'/1,
'enc_TraceCollectionEntityIPAddress'/1,
'enc_TraceActivation'/1,
'enc_Time-UE-StayedInCell'/1,
'enc_TimeToWait'/1,
'enc_TargeteNBtoSource-eNBTransparentContainer'/1,
'enc_TAC'/1,
'enc_SubscriberProfileIDforRFP'/1,
'enc_SpecialSubframePatterns'/1,
'enc_SpecialSubframe-Info'/1,
'enc_SubframeAssignment'/1,
'enc_SRVCCOperationPossible'/1,
'enc_ServedCell-Information'/1,
'enc_ServedCells'/1,
'enc_S1TNLLoadIndicator'/1,
'enc_UL-Total-PRB-usage'/1,
'enc_DL-Total-PRB-usage'/1,
'enc_UL-non-GBR-PRB-usage'/1,
'enc_DL-non-GBR-PRB-usage'/1,
'enc_UL-GBR-PRB-usage'/1,
'enc_DL-GBR-PRB-usage'/1,
'enc_RadioResourceStatus'/1,
'enc_RRC-Context'/1,
'enc_RNTP-Threshold'/1,
'enc_ReportCharacteristics'/1,
'enc_ReportArea'/1,
'enc_RelativeNarrowbandTxPower'/1,
'enc_Registration-Request'/1,
'enc_ReceiveStatusofULPDCPSDUs'/1,
'enc_QCI'/1,
'enc_PriorityLevel'/1,
'enc_Pre-emptionVulnerability'/1,
'enc_Pre-emptionCapability'/1,
'enc_PLMN-Identity'/1,
'enc_PCI'/1,
'enc_PDCP-SN'/1,
'enc_NextHopChainingCount'/1,
'enc_Neighbour-Information'/1,
'enc_Measurement-ID'/1,
'enc_MME-Code'/1,
'enc_MME-Group-ID'/1,
'enc_LocationReportingInformation'/1,
'enc_LoadIndicator'/1,
'enc_LastVisitedGERANCellInformation'/1,
'enc_LastVisitedUTRANCellInformation'/1,
'enc_LastVisitedEUTRANCellInformation'/1,
'enc_LastVisitedCell-Item'/1,
'enc_LAC'/1,
'enc_Key-eNodeB-Star'/1,
'enc_InterfacesToTrace'/1,
'enc_IntegrityProtectionAlgorithms'/1,
'enc_HWLoadIndicator'/1,
'enc_HFN'/1,
'enc_HandoverRestrictionList'/1,
'enc_GUMMEI'/1,
'enc_GU-Group-ID'/1,
'enc_GUGroupIDList'/1,
'enc_GTP-TEI'/1,
'enc_GTPtunnelEndpoint'/1,
'enc_GlobalENB-ID'/1,
'enc_GBR-QosInformation'/1,
'enc_ForbiddenLACs'/1,
'enc_ForbiddenLAs-Item'/1,
'enc_ForbiddenLAs'/1,
'enc_ForbiddenTACs'/1,
'enc_ForbiddenTAs-Item'/1,
'enc_ForbiddenTAs'/1,
'enc_ForbiddenInterRATs'/1,
'enc_EventType'/1,
'enc_EUTRANTraceID'/1,
'enc_EUTRANCellIdentifier'/1,
'enc_E-RAB-Item'/1,
'enc_E-RAB-List'/1,
'enc_E-RAB-Level-QoS-Parameters'/1,
'enc_E-RAB-ID'/1,
'enc_EPLMNs'/1,
'enc_EncryptionAlgorithms'/1,
'enc_ENB-ID'/1,
'enc_ECGI'/1,
'enc_EUTRA-Mode-Info'/1,
'enc_TDD-Info'/1,
'enc_FDD-Info'/1,
'enc_EARFCN'/1,
'enc_DL-Forwarding'/1,
'enc_CyclicPrefixUL'/1,
'enc_CyclicPrefixDL'/1,
'enc_CriticalityDiagnostics-IE-List'/1,
'enc_CriticalityDiagnostics'/1,
'enc_COUNTvalue'/1,
'enc_CellType'/1,
'enc_Cell-Size'/1,
'enc_CauseTransport'/1,
'enc_CauseRadioNetwork'/1,
'enc_CauseProtocol'/1,
'enc_CauseMisc'/1,
'enc_Cause'/1,
'enc_BroadcastPLMNs-Item'/1,
'enc_BitRate'/1,
'enc_AllocationAndRetentionPriority'/1,
'enc_AS-SecurityInformation'/1,
'enc_UnsuccessfulOutcome'/1,
'enc_SuccessfulOutcome'/1,
'enc_InitiatingMessage'/1,
'enc_X2AP-PDU'/1
]).

-export([
'dec_TriggeringMessage'/1,
'dec_ProtocolIE-ID'/1,
'dec_ProcedureCode'/1,
'dec_PrivateIE-ID'/1,
'dec_Presence'/1,
'dec_Criticality'/1,
'dec_PrivateMessage'/1,
'dec_CellMeasurementResult-Item'/1,
'dec_CellMeasurementResult-List'/1,
'dec_ResourceStatusUpdate'/1,
'dec_ResourceStatusFailure'/1,
'dec_ResourceStatusResponse'/1,
'dec_ReportingPeriodicity'/1,
'dec_CellToReport-Item'/1,
'dec_CellToReport-List'/1,
'dec_ResourceStatusRequest'/1,
'dec_ENBConfigurationUpdateFailure'/1,
'dec_ENBConfigurationUpdateAcknowledge'/1,
'dec_Old-ECGIs'/1,
'dec_ServedCellsToModify-Item'/1,
'dec_ServedCellsToModify'/1,
'dec_ENBConfigurationUpdate'/1,
'dec_CellInformation-Item'/1,
'dec_CellInformation-List'/1,
'dec_LoadInformation'/1,
'dec_X2SetupFailure'/1,
'dec_X2SetupResponse'/1,
'dec_X2SetupRequest'/1,
'dec_ResetResponse'/1,
'dec_ResetRequest'/1,
'dec_ErrorIndication'/1,
'dec_HandoverCancel'/1,
'dec_UEContextRelease'/1,
'dec_E-RABs-SubjectToStatusTransfer-Item'/1,
'dec_E-RABs-SubjectToStatusTransfer-List'/1,
'dec_SNStatusTransfer'/1,
'dec_HandoverPreparationFailure'/1,
'dec_E-RABs-Admitted-Item'/1,
'dec_E-RABs-Admitted-List'/1,
'dec_HandoverRequestAcknowledge'/1,
'dec_E-RABs-ToBeSetup-Item'/1,
'dec_E-RABs-ToBeSetup-List'/1,
'dec_UE-ContextInformation'/1,
'dec_HandoverRequest'/1,
'dec_UL-HighInterferenceIndication'/1,
'dec_UL-HighInterferenceIndicationInfo-Item'/1,
'dec_UL-HighInterferenceIndicationInfo'/1,
'dec_UL-InterferenceOverloadIndication-Item'/1,
'dec_UL-InterferenceOverloadIndication'/1,
'dec_UESecurityCapabilities'/1,
'dec_UEAggregateMaximumBitRate'/1,
'dec_UE-X2AP-ID'/1,
'dec_UE-S1AP-ID'/1,
'dec_UE-HistoryInformation'/1,
'dec_TypeOfError'/1,
'dec_TransportLayerAddress'/1,
'dec_Transmission-Bandwidth'/1,
'dec_TraceDepth'/1,
'dec_TraceCollectionEntityIPAddress'/1,
'dec_TraceActivation'/1,
'dec_Time-UE-StayedInCell'/1,
'dec_TimeToWait'/1,
'dec_TargeteNBtoSource-eNBTransparentContainer'/1,
'dec_TAC'/1,
'dec_SubscriberProfileIDforRFP'/1,
'dec_SpecialSubframePatterns'/1,
'dec_SpecialSubframe-Info'/1,
'dec_SubframeAssignment'/1,
'dec_SRVCCOperationPossible'/1,
'dec_ServedCell-Information'/1,
'dec_ServedCells'/1,
'dec_S1TNLLoadIndicator'/1,
'dec_UL-Total-PRB-usage'/1,
'dec_DL-Total-PRB-usage'/1,
'dec_UL-non-GBR-PRB-usage'/1,
'dec_DL-non-GBR-PRB-usage'/1,
'dec_UL-GBR-PRB-usage'/1,
'dec_DL-GBR-PRB-usage'/1,
'dec_RadioResourceStatus'/1,
'dec_RRC-Context'/1,
'dec_RNTP-Threshold'/1,
'dec_ReportCharacteristics'/1,
'dec_ReportArea'/1,
'dec_RelativeNarrowbandTxPower'/1,
'dec_Registration-Request'/1,
'dec_ReceiveStatusofULPDCPSDUs'/1,
'dec_QCI'/1,
'dec_PriorityLevel'/1,
'dec_Pre-emptionVulnerability'/1,
'dec_Pre-emptionCapability'/1,
'dec_PLMN-Identity'/1,
'dec_PCI'/1,
'dec_PDCP-SN'/1,
'dec_NextHopChainingCount'/1,
'dec_Neighbour-Information'/1,
'dec_Measurement-ID'/1,
'dec_MME-Code'/1,
'dec_MME-Group-ID'/1,
'dec_LocationReportingInformation'/1,
'dec_LoadIndicator'/1,
'dec_LastVisitedGERANCellInformation'/1,
'dec_LastVisitedUTRANCellInformation'/1,
'dec_LastVisitedEUTRANCellInformation'/1,
'dec_LastVisitedCell-Item'/1,
'dec_LAC'/1,
'dec_Key-eNodeB-Star'/1,
'dec_InterfacesToTrace'/1,
'dec_IntegrityProtectionAlgorithms'/1,
'dec_HWLoadIndicator'/1,
'dec_HFN'/1,
'dec_HandoverRestrictionList'/1,
'dec_GUMMEI'/1,
'dec_GU-Group-ID'/1,
'dec_GUGroupIDList'/1,
'dec_GTP-TEI'/1,
'dec_GTPtunnelEndpoint'/1,
'dec_GlobalENB-ID'/1,
'dec_GBR-QosInformation'/1,
'dec_ForbiddenLACs'/1,
'dec_ForbiddenLAs-Item'/1,
'dec_ForbiddenLAs'/1,
'dec_ForbiddenTACs'/1,
'dec_ForbiddenTAs-Item'/1,
'dec_ForbiddenTAs'/1,
'dec_ForbiddenInterRATs'/1,
'dec_EventType'/1,
'dec_EUTRANTraceID'/1,
'dec_EUTRANCellIdentifier'/1,
'dec_E-RAB-Item'/1,
'dec_E-RAB-List'/1,
'dec_E-RAB-Level-QoS-Parameters'/1,
'dec_E-RAB-ID'/1,
'dec_EPLMNs'/1,
'dec_EncryptionAlgorithms'/1,
'dec_ENB-ID'/1,
'dec_ECGI'/1,
'dec_EUTRA-Mode-Info'/1,
'dec_TDD-Info'/1,
'dec_FDD-Info'/1,
'dec_EARFCN'/1,
'dec_DL-Forwarding'/1,
'dec_CyclicPrefixUL'/1,
'dec_CyclicPrefixDL'/1,
'dec_CriticalityDiagnostics-IE-List'/1,
'dec_CriticalityDiagnostics'/1,
'dec_COUNTvalue'/1,
'dec_CellType'/1,
'dec_Cell-Size'/1,
'dec_CauseTransport'/1,
'dec_CauseRadioNetwork'/1,
'dec_CauseProtocol'/1,
'dec_CauseMisc'/1,
'dec_Cause'/1,
'dec_BroadcastPLMNs-Item'/1,
'dec_BitRate'/1,
'dec_AllocationAndRetentionPriority'/1,
'dec_AS-SecurityInformation'/1,
'dec_UnsuccessfulOutcome'/1,
'dec_SuccessfulOutcome'/1,
'dec_InitiatingMessage'/1,
'dec_X2AP-PDU'/1
]).

-export([
'id-ENB2-Measurement-ID'/0,
'id-ENB1-Measurement-ID'/0,
'id-ReportCharacteristics'/0,
'id-Measurement-ID'/0,
'id-SRVCCOperationPossible'/0,
'id-GUGroupIDToDeleteList'/0,
'id-GUGroupIDToAddList'/0,
'id-CellMeasurementResult-Item'/0,
'id-CellMeasurementResult'/0,
'id-CellToReport-Item'/0,
'id-ReportingPeriodicity'/0,
'id-CellToReport'/0,
'id-Registration-Request'/0,
'id-ServedCellsToDelete'/0,
'id-ServedCellsToModify'/0,
'id-ServedCellsToAdd'/0,
'id-GUGroupIDList'/0,
'id-GUMMEI-ID'/0,
'id-TimeToWait'/0,
'id-GlobalENB-ID'/0,
'id-ServedCells'/0,
'id-E-RABs-SubjectToStatusTransfer-Item'/0,
'id-E-RABs-SubjectToStatusTransfer-List'/0,
'id-CriticalityDiagnostics'/0,
'id-UE-X2AP-ID'/0,
'id-UE-HistoryInformation'/0,
'id-UE-ContextInformation'/0,
'id-TraceActivation'/0,
'id-TargeteNBtoSource-eNBTransparentContainer'/0,
'id-TargetCell-ID'/0,
'id-Old-eNB-UE-X2AP-ID'/0,
'id-New-eNB-UE-X2AP-ID'/0,
'id-CellInformation-Item'/0,
'id-CellInformation'/0,
'id-Cause'/0,
'id-E-RABs-ToBeSetup-Item'/0,
'id-E-RABs-NotAdmitted-List'/0,
'id-E-RAB-Item'/0,
'id-E-RABs-Admitted-List'/0,
'id-E-RABs-Admitted-Item'/0,
'maxnoofCells'/0,
'maxPools'/0,
'maxnoofPRBs'/0,
'maxnoofNeighbours'/0,
'maxnoofBPLMNs'/0,
'maxnoofForbTACs'/0,
'maxnoofForbLACs'/0,
'maxnoofEPLMNsPlusOne'/0,
'maxnoofEPLMNs'/0,
'maxnoofPDCP-SN'/0,
'maxNrOfErrors'/0,
'maxnoofBearers'/0,
'maxCellineNB'/0,
'maxInterfaces'/0,
'maxEARFCN'/0,
'id-privateMessage'/0,
'id-resourceStatusReporting'/0,
'id-resourceStatusReportingInitiation'/0,
'id-eNBConfigurationUpdate'/0,
'id-reset'/0,
'id-x2Setup'/0,
'id-uEContextRelease'/0,
'id-snStatusTransfer'/0,
'id-errorIndication'/0,
'id-loadIndication'/0,
'id-handoverCancel'/0,
'id-handoverPreparation'/0,
'maxProtocolIEs'/0,
'maxProtocolExtensions'/0,
'maxPrivateIEs'/0
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> per.

bit_string_format() -> compact.

encode(Type, Data) ->
try complete(encode_disp(Type, Data)) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, Data) of
  {Result,Rest} ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('TriggeringMessage',Data) -> 'enc_TriggeringMessage'(Data);
encode_disp('ProtocolIE-ID',Data) -> 'enc_ProtocolIE-ID'(Data);
encode_disp('ProcedureCode',Data) -> 'enc_ProcedureCode'(Data);
encode_disp('PrivateIE-ID',Data) -> 'enc_PrivateIE-ID'(Data);
encode_disp('Presence',Data) -> 'enc_Presence'(Data);
encode_disp('Criticality',Data) -> 'enc_Criticality'(Data);
encode_disp('PrivateMessage',Data) -> 'enc_PrivateMessage'(Data);
encode_disp('CellMeasurementResult-Item',Data) -> 'enc_CellMeasurementResult-Item'(Data);
encode_disp('CellMeasurementResult-List',Data) -> 'enc_CellMeasurementResult-List'(Data);
encode_disp('ResourceStatusUpdate',Data) -> 'enc_ResourceStatusUpdate'(Data);
encode_disp('ResourceStatusFailure',Data) -> 'enc_ResourceStatusFailure'(Data);
encode_disp('ResourceStatusResponse',Data) -> 'enc_ResourceStatusResponse'(Data);
encode_disp('ReportingPeriodicity',Data) -> 'enc_ReportingPeriodicity'(Data);
encode_disp('CellToReport-Item',Data) -> 'enc_CellToReport-Item'(Data);
encode_disp('CellToReport-List',Data) -> 'enc_CellToReport-List'(Data);
encode_disp('ResourceStatusRequest',Data) -> 'enc_ResourceStatusRequest'(Data);
encode_disp('ENBConfigurationUpdateFailure',Data) -> 'enc_ENBConfigurationUpdateFailure'(Data);
encode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'enc_ENBConfigurationUpdateAcknowledge'(Data);
encode_disp('Old-ECGIs',Data) -> 'enc_Old-ECGIs'(Data);
encode_disp('ServedCellsToModify-Item',Data) -> 'enc_ServedCellsToModify-Item'(Data);
encode_disp('ServedCellsToModify',Data) -> 'enc_ServedCellsToModify'(Data);
encode_disp('ENBConfigurationUpdate',Data) -> 'enc_ENBConfigurationUpdate'(Data);
encode_disp('CellInformation-Item',Data) -> 'enc_CellInformation-Item'(Data);
encode_disp('CellInformation-List',Data) -> 'enc_CellInformation-List'(Data);
encode_disp('LoadInformation',Data) -> 'enc_LoadInformation'(Data);
encode_disp('X2SetupFailure',Data) -> 'enc_X2SetupFailure'(Data);
encode_disp('X2SetupResponse',Data) -> 'enc_X2SetupResponse'(Data);
encode_disp('X2SetupRequest',Data) -> 'enc_X2SetupRequest'(Data);
encode_disp('ResetResponse',Data) -> 'enc_ResetResponse'(Data);
encode_disp('ResetRequest',Data) -> 'enc_ResetRequest'(Data);
encode_disp('ErrorIndication',Data) -> 'enc_ErrorIndication'(Data);
encode_disp('HandoverCancel',Data) -> 'enc_HandoverCancel'(Data);
encode_disp('UEContextRelease',Data) -> 'enc_UEContextRelease'(Data);
encode_disp('E-RABs-SubjectToStatusTransfer-Item',Data) -> 'enc_E-RABs-SubjectToStatusTransfer-Item'(Data);
encode_disp('E-RABs-SubjectToStatusTransfer-List',Data) -> 'enc_E-RABs-SubjectToStatusTransfer-List'(Data);
encode_disp('SNStatusTransfer',Data) -> 'enc_SNStatusTransfer'(Data);
encode_disp('HandoverPreparationFailure',Data) -> 'enc_HandoverPreparationFailure'(Data);
encode_disp('E-RABs-Admitted-Item',Data) -> 'enc_E-RABs-Admitted-Item'(Data);
encode_disp('E-RABs-Admitted-List',Data) -> 'enc_E-RABs-Admitted-List'(Data);
encode_disp('HandoverRequestAcknowledge',Data) -> 'enc_HandoverRequestAcknowledge'(Data);
encode_disp('E-RABs-ToBeSetup-Item',Data) -> 'enc_E-RABs-ToBeSetup-Item'(Data);
encode_disp('E-RABs-ToBeSetup-List',Data) -> 'enc_E-RABs-ToBeSetup-List'(Data);
encode_disp('UE-ContextInformation',Data) -> 'enc_UE-ContextInformation'(Data);
encode_disp('HandoverRequest',Data) -> 'enc_HandoverRequest'(Data);
encode_disp('UL-HighInterferenceIndication',Data) -> 'enc_UL-HighInterferenceIndication'(Data);
encode_disp('UL-HighInterferenceIndicationInfo-Item',Data) -> 'enc_UL-HighInterferenceIndicationInfo-Item'(Data);
encode_disp('UL-HighInterferenceIndicationInfo',Data) -> 'enc_UL-HighInterferenceIndicationInfo'(Data);
encode_disp('UL-InterferenceOverloadIndication-Item',Data) -> 'enc_UL-InterferenceOverloadIndication-Item'(Data);
encode_disp('UL-InterferenceOverloadIndication',Data) -> 'enc_UL-InterferenceOverloadIndication'(Data);
encode_disp('UESecurityCapabilities',Data) -> 'enc_UESecurityCapabilities'(Data);
encode_disp('UEAggregateMaximumBitRate',Data) -> 'enc_UEAggregateMaximumBitRate'(Data);
encode_disp('UE-X2AP-ID',Data) -> 'enc_UE-X2AP-ID'(Data);
encode_disp('UE-S1AP-ID',Data) -> 'enc_UE-S1AP-ID'(Data);
encode_disp('UE-HistoryInformation',Data) -> 'enc_UE-HistoryInformation'(Data);
encode_disp('TypeOfError',Data) -> 'enc_TypeOfError'(Data);
encode_disp('TransportLayerAddress',Data) -> 'enc_TransportLayerAddress'(Data);
encode_disp('Transmission-Bandwidth',Data) -> 'enc_Transmission-Bandwidth'(Data);
encode_disp('TraceDepth',Data) -> 'enc_TraceDepth'(Data);
encode_disp('TraceCollectionEntityIPAddress',Data) -> 'enc_TraceCollectionEntityIPAddress'(Data);
encode_disp('TraceActivation',Data) -> 'enc_TraceActivation'(Data);
encode_disp('Time-UE-StayedInCell',Data) -> 'enc_Time-UE-StayedInCell'(Data);
encode_disp('TimeToWait',Data) -> 'enc_TimeToWait'(Data);
encode_disp('TargeteNBtoSource-eNBTransparentContainer',Data) -> 'enc_TargeteNBtoSource-eNBTransparentContainer'(Data);
encode_disp('TAC',Data) -> 'enc_TAC'(Data);
encode_disp('SubscriberProfileIDforRFP',Data) -> 'enc_SubscriberProfileIDforRFP'(Data);
encode_disp('SpecialSubframePatterns',Data) -> 'enc_SpecialSubframePatterns'(Data);
encode_disp('SpecialSubframe-Info',Data) -> 'enc_SpecialSubframe-Info'(Data);
encode_disp('SubframeAssignment',Data) -> 'enc_SubframeAssignment'(Data);
encode_disp('SRVCCOperationPossible',Data) -> 'enc_SRVCCOperationPossible'(Data);
encode_disp('ServedCell-Information',Data) -> 'enc_ServedCell-Information'(Data);
encode_disp('ServedCells',Data) -> 'enc_ServedCells'(Data);
encode_disp('S1TNLLoadIndicator',Data) -> 'enc_S1TNLLoadIndicator'(Data);
encode_disp('UL-Total-PRB-usage',Data) -> 'enc_UL-Total-PRB-usage'(Data);
encode_disp('DL-Total-PRB-usage',Data) -> 'enc_DL-Total-PRB-usage'(Data);
encode_disp('UL-non-GBR-PRB-usage',Data) -> 'enc_UL-non-GBR-PRB-usage'(Data);
encode_disp('DL-non-GBR-PRB-usage',Data) -> 'enc_DL-non-GBR-PRB-usage'(Data);
encode_disp('UL-GBR-PRB-usage',Data) -> 'enc_UL-GBR-PRB-usage'(Data);
encode_disp('DL-GBR-PRB-usage',Data) -> 'enc_DL-GBR-PRB-usage'(Data);
encode_disp('RadioResourceStatus',Data) -> 'enc_RadioResourceStatus'(Data);
encode_disp('RRC-Context',Data) -> 'enc_RRC-Context'(Data);
encode_disp('RNTP-Threshold',Data) -> 'enc_RNTP-Threshold'(Data);
encode_disp('ReportCharacteristics',Data) -> 'enc_ReportCharacteristics'(Data);
encode_disp('ReportArea',Data) -> 'enc_ReportArea'(Data);
encode_disp('RelativeNarrowbandTxPower',Data) -> 'enc_RelativeNarrowbandTxPower'(Data);
encode_disp('Registration-Request',Data) -> 'enc_Registration-Request'(Data);
encode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'enc_ReceiveStatusofULPDCPSDUs'(Data);
encode_disp('QCI',Data) -> 'enc_QCI'(Data);
encode_disp('PriorityLevel',Data) -> 'enc_PriorityLevel'(Data);
encode_disp('Pre-emptionVulnerability',Data) -> 'enc_Pre-emptionVulnerability'(Data);
encode_disp('Pre-emptionCapability',Data) -> 'enc_Pre-emptionCapability'(Data);
encode_disp('PLMN-Identity',Data) -> 'enc_PLMN-Identity'(Data);
encode_disp('PCI',Data) -> 'enc_PCI'(Data);
encode_disp('PDCP-SN',Data) -> 'enc_PDCP-SN'(Data);
encode_disp('NextHopChainingCount',Data) -> 'enc_NextHopChainingCount'(Data);
encode_disp('Neighbour-Information',Data) -> 'enc_Neighbour-Information'(Data);
encode_disp('Measurement-ID',Data) -> 'enc_Measurement-ID'(Data);
encode_disp('MME-Code',Data) -> 'enc_MME-Code'(Data);
encode_disp('MME-Group-ID',Data) -> 'enc_MME-Group-ID'(Data);
encode_disp('LocationReportingInformation',Data) -> 'enc_LocationReportingInformation'(Data);
encode_disp('LoadIndicator',Data) -> 'enc_LoadIndicator'(Data);
encode_disp('LastVisitedGERANCellInformation',Data) -> 'enc_LastVisitedGERANCellInformation'(Data);
encode_disp('LastVisitedUTRANCellInformation',Data) -> 'enc_LastVisitedUTRANCellInformation'(Data);
encode_disp('LastVisitedEUTRANCellInformation',Data) -> 'enc_LastVisitedEUTRANCellInformation'(Data);
encode_disp('LastVisitedCell-Item',Data) -> 'enc_LastVisitedCell-Item'(Data);
encode_disp('LAC',Data) -> 'enc_LAC'(Data);
encode_disp('Key-eNodeB-Star',Data) -> 'enc_Key-eNodeB-Star'(Data);
encode_disp('InterfacesToTrace',Data) -> 'enc_InterfacesToTrace'(Data);
encode_disp('IntegrityProtectionAlgorithms',Data) -> 'enc_IntegrityProtectionAlgorithms'(Data);
encode_disp('HWLoadIndicator',Data) -> 'enc_HWLoadIndicator'(Data);
encode_disp('HFN',Data) -> 'enc_HFN'(Data);
encode_disp('HandoverRestrictionList',Data) -> 'enc_HandoverRestrictionList'(Data);
encode_disp('GUMMEI',Data) -> 'enc_GUMMEI'(Data);
encode_disp('GU-Group-ID',Data) -> 'enc_GU-Group-ID'(Data);
encode_disp('GUGroupIDList',Data) -> 'enc_GUGroupIDList'(Data);
encode_disp('GTP-TEI',Data) -> 'enc_GTP-TEI'(Data);
encode_disp('GTPtunnelEndpoint',Data) -> 'enc_GTPtunnelEndpoint'(Data);
encode_disp('GlobalENB-ID',Data) -> 'enc_GlobalENB-ID'(Data);
encode_disp('GBR-QosInformation',Data) -> 'enc_GBR-QosInformation'(Data);
encode_disp('ForbiddenLACs',Data) -> 'enc_ForbiddenLACs'(Data);
encode_disp('ForbiddenLAs-Item',Data) -> 'enc_ForbiddenLAs-Item'(Data);
encode_disp('ForbiddenLAs',Data) -> 'enc_ForbiddenLAs'(Data);
encode_disp('ForbiddenTACs',Data) -> 'enc_ForbiddenTACs'(Data);
encode_disp('ForbiddenTAs-Item',Data) -> 'enc_ForbiddenTAs-Item'(Data);
encode_disp('ForbiddenTAs',Data) -> 'enc_ForbiddenTAs'(Data);
encode_disp('ForbiddenInterRATs',Data) -> 'enc_ForbiddenInterRATs'(Data);
encode_disp('EventType',Data) -> 'enc_EventType'(Data);
encode_disp('EUTRANTraceID',Data) -> 'enc_EUTRANTraceID'(Data);
encode_disp('EUTRANCellIdentifier',Data) -> 'enc_EUTRANCellIdentifier'(Data);
encode_disp('E-RAB-Item',Data) -> 'enc_E-RAB-Item'(Data);
encode_disp('E-RAB-List',Data) -> 'enc_E-RAB-List'(Data);
encode_disp('E-RAB-Level-QoS-Parameters',Data) -> 'enc_E-RAB-Level-QoS-Parameters'(Data);
encode_disp('E-RAB-ID',Data) -> 'enc_E-RAB-ID'(Data);
encode_disp('EPLMNs',Data) -> 'enc_EPLMNs'(Data);
encode_disp('EncryptionAlgorithms',Data) -> 'enc_EncryptionAlgorithms'(Data);
encode_disp('ENB-ID',Data) -> 'enc_ENB-ID'(Data);
encode_disp('ECGI',Data) -> 'enc_ECGI'(Data);
encode_disp('EUTRA-Mode-Info',Data) -> 'enc_EUTRA-Mode-Info'(Data);
encode_disp('TDD-Info',Data) -> 'enc_TDD-Info'(Data);
encode_disp('FDD-Info',Data) -> 'enc_FDD-Info'(Data);
encode_disp('EARFCN',Data) -> 'enc_EARFCN'(Data);
encode_disp('DL-Forwarding',Data) -> 'enc_DL-Forwarding'(Data);
encode_disp('CyclicPrefixUL',Data) -> 'enc_CyclicPrefixUL'(Data);
encode_disp('CyclicPrefixDL',Data) -> 'enc_CyclicPrefixDL'(Data);
encode_disp('CriticalityDiagnostics-IE-List',Data) -> 'enc_CriticalityDiagnostics-IE-List'(Data);
encode_disp('CriticalityDiagnostics',Data) -> 'enc_CriticalityDiagnostics'(Data);
encode_disp('COUNTvalue',Data) -> 'enc_COUNTvalue'(Data);
encode_disp('CellType',Data) -> 'enc_CellType'(Data);
encode_disp('Cell-Size',Data) -> 'enc_Cell-Size'(Data);
encode_disp('CauseTransport',Data) -> 'enc_CauseTransport'(Data);
encode_disp('CauseRadioNetwork',Data) -> 'enc_CauseRadioNetwork'(Data);
encode_disp('CauseProtocol',Data) -> 'enc_CauseProtocol'(Data);
encode_disp('CauseMisc',Data) -> 'enc_CauseMisc'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('BroadcastPLMNs-Item',Data) -> 'enc_BroadcastPLMNs-Item'(Data);
encode_disp('BitRate',Data) -> 'enc_BitRate'(Data);
encode_disp('AllocationAndRetentionPriority',Data) -> 'enc_AllocationAndRetentionPriority'(Data);
encode_disp('AS-SecurityInformation',Data) -> 'enc_AS-SecurityInformation'(Data);
encode_disp('UnsuccessfulOutcome',Data) -> 'enc_UnsuccessfulOutcome'(Data);
encode_disp('SuccessfulOutcome',Data) -> 'enc_SuccessfulOutcome'(Data);
encode_disp('InitiatingMessage',Data) -> 'enc_InitiatingMessage'(Data);
encode_disp('X2AP-PDU',Data) -> 'enc_X2AP-PDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('TriggeringMessage',Data) -> 'dec_TriggeringMessage'(Data);
decode_disp('ProtocolIE-ID',Data) -> 'dec_ProtocolIE-ID'(Data);
decode_disp('ProcedureCode',Data) -> 'dec_ProcedureCode'(Data);
decode_disp('PrivateIE-ID',Data) -> 'dec_PrivateIE-ID'(Data);
decode_disp('Presence',Data) -> 'dec_Presence'(Data);
decode_disp('Criticality',Data) -> 'dec_Criticality'(Data);
decode_disp('PrivateMessage',Data) -> 'dec_PrivateMessage'(Data);
decode_disp('CellMeasurementResult-Item',Data) -> 'dec_CellMeasurementResult-Item'(Data);
decode_disp('CellMeasurementResult-List',Data) -> 'dec_CellMeasurementResult-List'(Data);
decode_disp('ResourceStatusUpdate',Data) -> 'dec_ResourceStatusUpdate'(Data);
decode_disp('ResourceStatusFailure',Data) -> 'dec_ResourceStatusFailure'(Data);
decode_disp('ResourceStatusResponse',Data) -> 'dec_ResourceStatusResponse'(Data);
decode_disp('ReportingPeriodicity',Data) -> 'dec_ReportingPeriodicity'(Data);
decode_disp('CellToReport-Item',Data) -> 'dec_CellToReport-Item'(Data);
decode_disp('CellToReport-List',Data) -> 'dec_CellToReport-List'(Data);
decode_disp('ResourceStatusRequest',Data) -> 'dec_ResourceStatusRequest'(Data);
decode_disp('ENBConfigurationUpdateFailure',Data) -> 'dec_ENBConfigurationUpdateFailure'(Data);
decode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'dec_ENBConfigurationUpdateAcknowledge'(Data);
decode_disp('Old-ECGIs',Data) -> 'dec_Old-ECGIs'(Data);
decode_disp('ServedCellsToModify-Item',Data) -> 'dec_ServedCellsToModify-Item'(Data);
decode_disp('ServedCellsToModify',Data) -> 'dec_ServedCellsToModify'(Data);
decode_disp('ENBConfigurationUpdate',Data) -> 'dec_ENBConfigurationUpdate'(Data);
decode_disp('CellInformation-Item',Data) -> 'dec_CellInformation-Item'(Data);
decode_disp('CellInformation-List',Data) -> 'dec_CellInformation-List'(Data);
decode_disp('LoadInformation',Data) -> 'dec_LoadInformation'(Data);
decode_disp('X2SetupFailure',Data) -> 'dec_X2SetupFailure'(Data);
decode_disp('X2SetupResponse',Data) -> 'dec_X2SetupResponse'(Data);
decode_disp('X2SetupRequest',Data) -> 'dec_X2SetupRequest'(Data);
decode_disp('ResetResponse',Data) -> 'dec_ResetResponse'(Data);
decode_disp('ResetRequest',Data) -> 'dec_ResetRequest'(Data);
decode_disp('ErrorIndication',Data) -> 'dec_ErrorIndication'(Data);
decode_disp('HandoverCancel',Data) -> 'dec_HandoverCancel'(Data);
decode_disp('UEContextRelease',Data) -> 'dec_UEContextRelease'(Data);
decode_disp('E-RABs-SubjectToStatusTransfer-Item',Data) -> 'dec_E-RABs-SubjectToStatusTransfer-Item'(Data);
decode_disp('E-RABs-SubjectToStatusTransfer-List',Data) -> 'dec_E-RABs-SubjectToStatusTransfer-List'(Data);
decode_disp('SNStatusTransfer',Data) -> 'dec_SNStatusTransfer'(Data);
decode_disp('HandoverPreparationFailure',Data) -> 'dec_HandoverPreparationFailure'(Data);
decode_disp('E-RABs-Admitted-Item',Data) -> 'dec_E-RABs-Admitted-Item'(Data);
decode_disp('E-RABs-Admitted-List',Data) -> 'dec_E-RABs-Admitted-List'(Data);
decode_disp('HandoverRequestAcknowledge',Data) -> 'dec_HandoverRequestAcknowledge'(Data);
decode_disp('E-RABs-ToBeSetup-Item',Data) -> 'dec_E-RABs-ToBeSetup-Item'(Data);
decode_disp('E-RABs-ToBeSetup-List',Data) -> 'dec_E-RABs-ToBeSetup-List'(Data);
decode_disp('UE-ContextInformation',Data) -> 'dec_UE-ContextInformation'(Data);
decode_disp('HandoverRequest',Data) -> 'dec_HandoverRequest'(Data);
decode_disp('UL-HighInterferenceIndication',Data) -> 'dec_UL-HighInterferenceIndication'(Data);
decode_disp('UL-HighInterferenceIndicationInfo-Item',Data) -> 'dec_UL-HighInterferenceIndicationInfo-Item'(Data);
decode_disp('UL-HighInterferenceIndicationInfo',Data) -> 'dec_UL-HighInterferenceIndicationInfo'(Data);
decode_disp('UL-InterferenceOverloadIndication-Item',Data) -> 'dec_UL-InterferenceOverloadIndication-Item'(Data);
decode_disp('UL-InterferenceOverloadIndication',Data) -> 'dec_UL-InterferenceOverloadIndication'(Data);
decode_disp('UESecurityCapabilities',Data) -> 'dec_UESecurityCapabilities'(Data);
decode_disp('UEAggregateMaximumBitRate',Data) -> 'dec_UEAggregateMaximumBitRate'(Data);
decode_disp('UE-X2AP-ID',Data) -> 'dec_UE-X2AP-ID'(Data);
decode_disp('UE-S1AP-ID',Data) -> 'dec_UE-S1AP-ID'(Data);
decode_disp('UE-HistoryInformation',Data) -> 'dec_UE-HistoryInformation'(Data);
decode_disp('TypeOfError',Data) -> 'dec_TypeOfError'(Data);
decode_disp('TransportLayerAddress',Data) -> 'dec_TransportLayerAddress'(Data);
decode_disp('Transmission-Bandwidth',Data) -> 'dec_Transmission-Bandwidth'(Data);
decode_disp('TraceDepth',Data) -> 'dec_TraceDepth'(Data);
decode_disp('TraceCollectionEntityIPAddress',Data) -> 'dec_TraceCollectionEntityIPAddress'(Data);
decode_disp('TraceActivation',Data) -> 'dec_TraceActivation'(Data);
decode_disp('Time-UE-StayedInCell',Data) -> 'dec_Time-UE-StayedInCell'(Data);
decode_disp('TimeToWait',Data) -> 'dec_TimeToWait'(Data);
decode_disp('TargeteNBtoSource-eNBTransparentContainer',Data) -> 'dec_TargeteNBtoSource-eNBTransparentContainer'(Data);
decode_disp('TAC',Data) -> 'dec_TAC'(Data);
decode_disp('SubscriberProfileIDforRFP',Data) -> 'dec_SubscriberProfileIDforRFP'(Data);
decode_disp('SpecialSubframePatterns',Data) -> 'dec_SpecialSubframePatterns'(Data);
decode_disp('SpecialSubframe-Info',Data) -> 'dec_SpecialSubframe-Info'(Data);
decode_disp('SubframeAssignment',Data) -> 'dec_SubframeAssignment'(Data);
decode_disp('SRVCCOperationPossible',Data) -> 'dec_SRVCCOperationPossible'(Data);
decode_disp('ServedCell-Information',Data) -> 'dec_ServedCell-Information'(Data);
decode_disp('ServedCells',Data) -> 'dec_ServedCells'(Data);
decode_disp('S1TNLLoadIndicator',Data) -> 'dec_S1TNLLoadIndicator'(Data);
decode_disp('UL-Total-PRB-usage',Data) -> 'dec_UL-Total-PRB-usage'(Data);
decode_disp('DL-Total-PRB-usage',Data) -> 'dec_DL-Total-PRB-usage'(Data);
decode_disp('UL-non-GBR-PRB-usage',Data) -> 'dec_UL-non-GBR-PRB-usage'(Data);
decode_disp('DL-non-GBR-PRB-usage',Data) -> 'dec_DL-non-GBR-PRB-usage'(Data);
decode_disp('UL-GBR-PRB-usage',Data) -> 'dec_UL-GBR-PRB-usage'(Data);
decode_disp('DL-GBR-PRB-usage',Data) -> 'dec_DL-GBR-PRB-usage'(Data);
decode_disp('RadioResourceStatus',Data) -> 'dec_RadioResourceStatus'(Data);
decode_disp('RRC-Context',Data) -> 'dec_RRC-Context'(Data);
decode_disp('RNTP-Threshold',Data) -> 'dec_RNTP-Threshold'(Data);
decode_disp('ReportCharacteristics',Data) -> 'dec_ReportCharacteristics'(Data);
decode_disp('ReportArea',Data) -> 'dec_ReportArea'(Data);
decode_disp('RelativeNarrowbandTxPower',Data) -> 'dec_RelativeNarrowbandTxPower'(Data);
decode_disp('Registration-Request',Data) -> 'dec_Registration-Request'(Data);
decode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'dec_ReceiveStatusofULPDCPSDUs'(Data);
decode_disp('QCI',Data) -> 'dec_QCI'(Data);
decode_disp('PriorityLevel',Data) -> 'dec_PriorityLevel'(Data);
decode_disp('Pre-emptionVulnerability',Data) -> 'dec_Pre-emptionVulnerability'(Data);
decode_disp('Pre-emptionCapability',Data) -> 'dec_Pre-emptionCapability'(Data);
decode_disp('PLMN-Identity',Data) -> 'dec_PLMN-Identity'(Data);
decode_disp('PCI',Data) -> 'dec_PCI'(Data);
decode_disp('PDCP-SN',Data) -> 'dec_PDCP-SN'(Data);
decode_disp('NextHopChainingCount',Data) -> 'dec_NextHopChainingCount'(Data);
decode_disp('Neighbour-Information',Data) -> 'dec_Neighbour-Information'(Data);
decode_disp('Measurement-ID',Data) -> 'dec_Measurement-ID'(Data);
decode_disp('MME-Code',Data) -> 'dec_MME-Code'(Data);
decode_disp('MME-Group-ID',Data) -> 'dec_MME-Group-ID'(Data);
decode_disp('LocationReportingInformation',Data) -> 'dec_LocationReportingInformation'(Data);
decode_disp('LoadIndicator',Data) -> 'dec_LoadIndicator'(Data);
decode_disp('LastVisitedGERANCellInformation',Data) -> 'dec_LastVisitedGERANCellInformation'(Data);
decode_disp('LastVisitedUTRANCellInformation',Data) -> 'dec_LastVisitedUTRANCellInformation'(Data);
decode_disp('LastVisitedEUTRANCellInformation',Data) -> 'dec_LastVisitedEUTRANCellInformation'(Data);
decode_disp('LastVisitedCell-Item',Data) -> 'dec_LastVisitedCell-Item'(Data);
decode_disp('LAC',Data) -> 'dec_LAC'(Data);
decode_disp('Key-eNodeB-Star',Data) -> 'dec_Key-eNodeB-Star'(Data);
decode_disp('InterfacesToTrace',Data) -> 'dec_InterfacesToTrace'(Data);
decode_disp('IntegrityProtectionAlgorithms',Data) -> 'dec_IntegrityProtectionAlgorithms'(Data);
decode_disp('HWLoadIndicator',Data) -> 'dec_HWLoadIndicator'(Data);
decode_disp('HFN',Data) -> 'dec_HFN'(Data);
decode_disp('HandoverRestrictionList',Data) -> 'dec_HandoverRestrictionList'(Data);
decode_disp('GUMMEI',Data) -> 'dec_GUMMEI'(Data);
decode_disp('GU-Group-ID',Data) -> 'dec_GU-Group-ID'(Data);
decode_disp('GUGroupIDList',Data) -> 'dec_GUGroupIDList'(Data);
decode_disp('GTP-TEI',Data) -> 'dec_GTP-TEI'(Data);
decode_disp('GTPtunnelEndpoint',Data) -> 'dec_GTPtunnelEndpoint'(Data);
decode_disp('GlobalENB-ID',Data) -> 'dec_GlobalENB-ID'(Data);
decode_disp('GBR-QosInformation',Data) -> 'dec_GBR-QosInformation'(Data);
decode_disp('ForbiddenLACs',Data) -> 'dec_ForbiddenLACs'(Data);
decode_disp('ForbiddenLAs-Item',Data) -> 'dec_ForbiddenLAs-Item'(Data);
decode_disp('ForbiddenLAs',Data) -> 'dec_ForbiddenLAs'(Data);
decode_disp('ForbiddenTACs',Data) -> 'dec_ForbiddenTACs'(Data);
decode_disp('ForbiddenTAs-Item',Data) -> 'dec_ForbiddenTAs-Item'(Data);
decode_disp('ForbiddenTAs',Data) -> 'dec_ForbiddenTAs'(Data);
decode_disp('ForbiddenInterRATs',Data) -> 'dec_ForbiddenInterRATs'(Data);
decode_disp('EventType',Data) -> 'dec_EventType'(Data);
decode_disp('EUTRANTraceID',Data) -> 'dec_EUTRANTraceID'(Data);
decode_disp('EUTRANCellIdentifier',Data) -> 'dec_EUTRANCellIdentifier'(Data);
decode_disp('E-RAB-Item',Data) -> 'dec_E-RAB-Item'(Data);
decode_disp('E-RAB-List',Data) -> 'dec_E-RAB-List'(Data);
decode_disp('E-RAB-Level-QoS-Parameters',Data) -> 'dec_E-RAB-Level-QoS-Parameters'(Data);
decode_disp('E-RAB-ID',Data) -> 'dec_E-RAB-ID'(Data);
decode_disp('EPLMNs',Data) -> 'dec_EPLMNs'(Data);
decode_disp('EncryptionAlgorithms',Data) -> 'dec_EncryptionAlgorithms'(Data);
decode_disp('ENB-ID',Data) -> 'dec_ENB-ID'(Data);
decode_disp('ECGI',Data) -> 'dec_ECGI'(Data);
decode_disp('EUTRA-Mode-Info',Data) -> 'dec_EUTRA-Mode-Info'(Data);
decode_disp('TDD-Info',Data) -> 'dec_TDD-Info'(Data);
decode_disp('FDD-Info',Data) -> 'dec_FDD-Info'(Data);
decode_disp('EARFCN',Data) -> 'dec_EARFCN'(Data);
decode_disp('DL-Forwarding',Data) -> 'dec_DL-Forwarding'(Data);
decode_disp('CyclicPrefixUL',Data) -> 'dec_CyclicPrefixUL'(Data);
decode_disp('CyclicPrefixDL',Data) -> 'dec_CyclicPrefixDL'(Data);
decode_disp('CriticalityDiagnostics-IE-List',Data) -> 'dec_CriticalityDiagnostics-IE-List'(Data);
decode_disp('CriticalityDiagnostics',Data) -> 'dec_CriticalityDiagnostics'(Data);
decode_disp('COUNTvalue',Data) -> 'dec_COUNTvalue'(Data);
decode_disp('CellType',Data) -> 'dec_CellType'(Data);
decode_disp('Cell-Size',Data) -> 'dec_Cell-Size'(Data);
decode_disp('CauseTransport',Data) -> 'dec_CauseTransport'(Data);
decode_disp('CauseRadioNetwork',Data) -> 'dec_CauseRadioNetwork'(Data);
decode_disp('CauseProtocol',Data) -> 'dec_CauseProtocol'(Data);
decode_disp('CauseMisc',Data) -> 'dec_CauseMisc'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('BroadcastPLMNs-Item',Data) -> 'dec_BroadcastPLMNs-Item'(Data);
decode_disp('BitRate',Data) -> 'dec_BitRate'(Data);
decode_disp('AllocationAndRetentionPriority',Data) -> 'dec_AllocationAndRetentionPriority'(Data);
decode_disp('AS-SecurityInformation',Data) -> 'dec_AS-SecurityInformation'(Data);
decode_disp('UnsuccessfulOutcome',Data) -> 'dec_UnsuccessfulOutcome'(Data);
decode_disp('SuccessfulOutcome',Data) -> 'dec_SuccessfulOutcome'(Data);
decode_disp('InitiatingMessage',Data) -> 'dec_InitiatingMessage'(Data);
decode_disp('X2AP-PDU',Data) -> 'dec_X2AP-PDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.
'enc_TriggeringMessage'(Val) ->
if Val =:= 'initiating-message' ->
<<0:2>>;
Val =:= 'successful-outcome' ->
<<1:2>>;
Val =:= 'unsuccessful-outcome' ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TriggeringMessage(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessful-outcome';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,['initiating-message','successful-outcome','unsuccessful-outcome']}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_ProtocolIE-ID'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_ProtocolIE-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_ProcedureCode'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ProcedureCode(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PrivateIE-ID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= local ->
if ChoiceVal bsr 16 =:= 0 ->
[<<0:1>>,
align|<<ChoiceVal:16>>];
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= global ->
begin
Enc4@bin = encode_oid(ChoiceVal),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len < 128 ->
[<<1:1>>,
align,
Enc4@len|Enc4@bin];
Enc4@len < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@len:14>>|Enc4@bin];
true ->
[<<1:1>>,
align|encode_fragmented(Enc4@bin, 8)]
end
end
end.


'dec_PrivateIE-ID'(Bytes) ->
{Choice,Bytes1} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes1) band 7,
<<_:V2@Pad2,V2@V0:2/unsigned-unit:8,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end
end,
{{local,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad3 = bit_size(Bytes1) band 7,
{V3@V0,V3@Buf1} = case Bytes1 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@Buf6/bitstring>> ->
{V3@V5,V3@Buf6};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7}
end,
<<V3@V8:V3@V0/binary-unit:8,V3@Buf9/bitstring>> = V3@Buf1,
V3@Conv10 = binary_to_list(V3@V8),
{V3@V11,V3@Buf12}  = {decode_oid(V3@Conv10),V3@Buf9},
{V3@V11,V3@Buf12}
end
end,
{{global,Val},NewBytes}
end.
'enc_Presence'(Val) ->
if Val =:= optional ->
<<0:2>>;
Val =:= conditional ->
<<1:2>>;
Val =:= mandatory ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Presence(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> optional;
1 -> conditional;
2 -> mandatory;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[optional,conditional,mandatory]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_Criticality'(Val) ->
if Val =:= reject ->
<<0:2>>;
Val =:= ignore ->
<<1:2>>;
Val =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_Criticality(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reject,ignore,notify]}}}})
end,
{V1@Int2,V1@Buf1}
end.

'enc_PrivateMessage'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_PrivateMessage_privateIEs(Enc2@input)
end].
'enc_PrivateMessage_privateIEs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_PrivateMessage_privateIEs_PrivateIE-Field'(Comp) || Comp <- Val]]
end.

'enc_PrivateMessage_privateIEs_PrivateIE-Field'(Val) ->
[begin
Enc1@input = element(2, Val),
'enc_PrivateIE-ID'(Enc1@input)
end,
begin
Enc2@input = element(3, Val),
if Enc2@input =:= reject ->
<<0:2>>;
Enc2@input =:= ignore ->
<<1:2>>;
Enc2@input =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc2@input}}})
end
end,
align|begin
Enc4@input = element(4, Val),
Enc5@bin = iolist_to_binary(Enc4@input),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len < 128 ->
[Enc5@len|Enc5@bin];
Enc5@len < 16384 ->
[<<2:2,Enc5@len:14>>|Enc5@bin];
true ->
encode_fragmented(Enc5@bin, 8)
end
end].

'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes) ->

%% attribute number 1 with type PrivateIE-ID
{Term1,Bytes1} = 'dec_PrivateIE-ID'(Bytes),

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
V1@Int2 = case V1@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V0,[reject,ignore,notify]}}}})
end,
{V1@Int2,V1@Buf1}
end,

%% attribute number 3 with type ASN1_OPEN_TYPE
{Term3,Bytes3} = begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
{V2@V0,V2@Buf1}
end,
{{'PrivateIE-Field',Term1,Term2,Term3},Bytes3}.


dec_PrivateMessage_privateIEs(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components1(V1@Add4, V1@Buf1, []).



dec_PrivateMessage(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_PrivateMessage_privateIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'PrivateMessage',Term1},Bytes4}.

'enc_CellMeasurementResult-Item'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
enc_ECGI(Enc6@input)
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_HWLoadIndicator(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_S1TNLLoadIndicator(Enc9@input)
end
end,
begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_RadioResourceStatus(Enc11@input)
end
end|begin
Enc13@input = element(6, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CellMeasurementResult-Item_iE-Extensions'(Enc13@input)
end
end].
'enc_CellMeasurementResult-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellMeasurementResult-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components4(V1@Add4, V1@Buf1, []).



'dec_CellMeasurementResult-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type HWLoadIndicator
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
dec_HWLoadIndicator(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type S1TNLLoadIndicator
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
dec_S1TNLLoadIndicator(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type RadioResourceStatus
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_RadioResourceStatus(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CellMeasurementResult-Item_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V3@V0,V3@Buf1} = case Bytes7 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CellMeasurementResult-Item',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_CellMeasurementResult-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CellMeasurementResult-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_CellMeasurementResult-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value5(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellMeasurementResult-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value6(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_CellMeasurementResult-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components7(V1@Add4, V1@Buf1, []).

'enc_ResourceStatusUpdate'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResourceStatusUpdate_protocolIEs(Enc2@input)
end].
'enc_ResourceStatusUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value8(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value9(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResourceStatusUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components10(V1@V0, V1@Buf1, []).



dec_ResourceStatusUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResourceStatusUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResourceStatusUpdate',Term1},Bytes4}.

'enc_ResourceStatusFailure'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResourceStatusFailure_protocolIEs(Enc2@input)
end].
'enc_ResourceStatusFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value11(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value12(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResourceStatusFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components13(V1@V0, V1@Buf1, []).



dec_ResourceStatusFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResourceStatusFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResourceStatusFailure',Term1},Bytes4}.

'enc_ResourceStatusResponse'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResourceStatusResponse_protocolIEs(Enc2@input)
end].
'enc_ResourceStatusResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value14(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value15(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResourceStatusResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components16(V1@V0, V1@Buf1, []).



dec_ResourceStatusResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResourceStatusResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResourceStatusResponse',Term1},Bytes4}.

'enc_ReportingPeriodicity'(Val) ->
if Val =:= 'one-thousand-ms' ->
<<0:1,0:2>>;
Val =:= 'two-thousand-ms' ->
<<0:1,1:2>>;
Val =:= 'five-thousand-ms' ->
<<0:1,2:2>>;
Val =:= 'ten-thousand-ms' ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReportingPeriodicity(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'one-thousand-ms';
1 -> 'two-thousand-ms';
2 -> 'five-thousand-ms';
3 -> 'ten-thousand-ms'
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CellToReport-Item'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ECGI(Enc3@input)
end|begin
Enc4@input = element(3, Val),
if Enc4@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CellToReport-Item_iE-Extensions'(Enc4@input)
end
end].
'enc_CellToReport-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellToReport-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components17(V1@Add4, V1@Buf1, []).



'dec_CellToReport-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CellToReport-Item_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V3@V0,V3@Buf1} = case Bytes4 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CellToReport-Item',Term1,Term2},Bytes6}.

'enc_CellToReport-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CellToReport-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_CellToReport-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value18(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellToReport-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value19(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_CellToReport-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components20(V1@Add4, V1@Buf1, []).

'enc_ResourceStatusRequest'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResourceStatusRequest_protocolIEs(Enc2@input)
end].
'enc_ResourceStatusRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value21(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value22(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResourceStatusRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components23(V1@V0, V1@Buf1, []).



dec_ResourceStatusRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResourceStatusRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResourceStatusRequest',Term1},Bytes4}.

'enc_ENBConfigurationUpdateFailure'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ENBConfigurationUpdateFailure_protocolIEs(Enc2@input)
end].
'enc_ENBConfigurationUpdateFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value24(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value25(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdateFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components26(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdateFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateFailure',Term1},Bytes4}.

'enc_ENBConfigurationUpdateAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ENBConfigurationUpdateAcknowledge_protocolIEs(Enc2@input)
end].
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value27(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value28(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdateAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components29(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdateAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdateAcknowledge',Term1},Bytes4}.

'enc_Old-ECGIs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_ECGI(Comp) || Comp <- Val]]
end.



'dec_Old-ECGIs'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components30(V1@Add4, V1@Buf1, []).

'enc_ServedCellsToModify-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
enc_ECGI(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
'enc_ServedCell-Information'(Enc5@input)
end,
begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_Neighbour-Information'(Enc6@input)
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ServedCellsToModify-Item_iE-Extensions'(Enc8@input)
end
end].
'enc_ServedCellsToModify-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ServedCellsToModify-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components31(V1@Add4, V1@Buf1, []).



'dec_ServedCellsToModify-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type ServedCell-Information
{Term2,Bytes4} = 'dec_ServedCell-Information'(Bytes3),

%% attribute number 3 with type Neighbour-Information
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_Neighbour-Information'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_ServedCellsToModify-Item_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V3@V0,V3@Buf1} = case Bytes6 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'ServedCellsToModify-Item',Term1,Term2,Term3,Term4},Bytes8}.

'enc_ServedCellsToModify'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_ServedCellsToModify-Item'(Comp) || Comp <- Val]]
end.



dec_ServedCellsToModify(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components32(V1@Add4, V1@Buf1, []).

'enc_ENBConfigurationUpdate'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ENBConfigurationUpdate_protocolIEs(Enc2@input)
end].
'enc_ENBConfigurationUpdate_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value33(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value34(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ENBConfigurationUpdate_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components35(V1@V0, V1@Buf1, []).



dec_ENBConfigurationUpdate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ENBConfigurationUpdate_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ENBConfigurationUpdate',Term1},Bytes4}.

'enc_CellInformation-Item'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
enc_ECGI(Enc6@input)
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UL-InterferenceOverloadIndication'(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UL-HighInterferenceIndicationInfo'(Enc9@input)
end
end,
begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_RelativeNarrowbandTxPower(Enc11@input)
end
end|begin
Enc13@input = element(6, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CellInformation-Item_iE-Extensions'(Enc13@input)
end
end].
'enc_CellInformation-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellInformation-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components36(V1@Add4, V1@Buf1, []).



'dec_CellInformation-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type UL-InterferenceOverloadIndication
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
'dec_UL-InterferenceOverloadIndication'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type UL-HighInterferenceIndicationInfo
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
'dec_UL-HighInterferenceIndicationInfo'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type RelativeNarrowbandTxPower
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
dec_RelativeNarrowbandTxPower(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CellInformation-Item_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V3@V0,V3@Buf1} = case Bytes7 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CellInformation-Item',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_CellInformation-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CellInformation-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_CellInformation-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value37(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellInformation-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value38(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_CellInformation-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components39(V1@Add4, V1@Buf1, []).

'enc_LoadInformation'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_LoadInformation_protocolIEs(Enc2@input)
end].
'enc_LoadInformation_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_LoadInformation_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_LoadInformation_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value40(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LoadInformation_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value41(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_LoadInformation_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components42(V1@V0, V1@Buf1, []).



dec_LoadInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_LoadInformation_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'LoadInformation',Term1},Bytes4}.

'enc_X2SetupFailure'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_X2SetupFailure_protocolIEs(Enc2@input)
end].
'enc_X2SetupFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value43(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value44(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_X2SetupFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components45(V1@V0, V1@Buf1, []).



dec_X2SetupFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_X2SetupFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'X2SetupFailure',Term1},Bytes4}.

'enc_X2SetupResponse'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_X2SetupResponse_protocolIEs(Enc2@input)
end].
'enc_X2SetupResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value46(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value47(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_X2SetupResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components48(V1@V0, V1@Buf1, []).



dec_X2SetupResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_X2SetupResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'X2SetupResponse',Term1},Bytes4}.

'enc_X2SetupRequest'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_X2SetupRequest_protocolIEs(Enc2@input)
end].
'enc_X2SetupRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value49(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value50(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_X2SetupRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components51(V1@V0, V1@Buf1, []).



dec_X2SetupRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_X2SetupRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'X2SetupRequest',Term1},Bytes4}.

'enc_ResetResponse'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResetResponse_protocolIEs(Enc2@input)
end].
'enc_ResetResponse_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResetResponse_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResetResponse_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value52(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResetResponse_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value53(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResetResponse_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components54(V1@V0, V1@Buf1, []).



dec_ResetResponse(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResetResponse_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResetResponse',Term1},Bytes4}.

'enc_ResetRequest'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ResetRequest_protocolIEs(Enc2@input)
end].
'enc_ResetRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ResetRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ResetRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value55(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ResetRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value56(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ResetRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components57(V1@V0, V1@Buf1, []).



dec_ResetRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ResetRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ResetRequest',Term1},Bytes4}.

'enc_ErrorIndication'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_ErrorIndication_protocolIEs(Enc2@input)
end].
'enc_ErrorIndication_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value58(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value59(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_ErrorIndication_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components60(V1@V0, V1@Buf1, []).



dec_ErrorIndication(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_ErrorIndication_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'ErrorIndication',Term1},Bytes4}.

'enc_HandoverCancel'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_HandoverCancel_protocolIEs(Enc2@input)
end].
'enc_HandoverCancel_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value61(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value62(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverCancel_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components63(V1@V0, V1@Buf1, []).



dec_HandoverCancel(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverCancel_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverCancel',Term1},Bytes4}.

'enc_UEContextRelease'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_UEContextRelease_protocolIEs(Enc2@input)
end].
'enc_UEContextRelease_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_UEContextRelease_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_UEContextRelease_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value64(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEContextRelease_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value65(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_UEContextRelease_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components66(V1@V0, V1@Buf1, []).



dec_UEContextRelease(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_UEContextRelease_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'UEContextRelease',Term1},Bytes4}.

'enc_E-RABs-SubjectToStatusTransfer-Item'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input bsr 4 =:= 0 ->
<<0:1,Enc4@input:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@input)]
end
end,
begin
Enc6@input = element(3, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc7@bs = to_bitstring(Enc6@input, 4096),
Enc7@bits = bit_size(Enc7@bs),
if Enc7@bits =:= 4096 ->
[align|Enc7@bs]
end
end
end
end,
begin
Enc9@input = element(4, Val),
enc_COUNTvalue(Enc9@input)
end,
begin
Enc10@input = element(5, Val),
enc_COUNTvalue(Enc10@input)
end|begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Enc11@input)
end
end].
'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components67(V1@Add4, V1@Buf1, []).



'dec_E-RABs-SubjectToStatusTransfer-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:4096/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V4,V4@Buf5}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V4,V4@Buf5}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type COUNTvalue
{Term3,Bytes5} = dec_COUNTvalue(Bytes4),

%% attribute number 4 with type COUNTvalue
{Term4,Bytes6} = dec_COUNTvalue(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'E-RABs-SubjectToStatusTransfer-Item',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_E-RABs-SubjectToStatusTransfer-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value68(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value69(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABs-SubjectToStatusTransfer-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components70(V1@Add4, V1@Buf1, []).

'enc_SNStatusTransfer'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_SNStatusTransfer_protocolIEs(Enc2@input)
end].
'enc_SNStatusTransfer_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value71(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value72(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_SNStatusTransfer_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components73(V1@V0, V1@Buf1, []).



dec_SNStatusTransfer(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_SNStatusTransfer_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'SNStatusTransfer',Term1},Bytes4}.

'enc_HandoverPreparationFailure'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_HandoverPreparationFailure_protocolIEs(Enc2@input)
end].
'enc_HandoverPreparationFailure_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value74(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value75(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverPreparationFailure_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components76(V1@V0, V1@Buf1, []).



dec_HandoverPreparationFailure(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverPreparationFailure_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverPreparationFailure',Term1},Bytes4}.

'enc_E-RABs-Admitted-Item'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc5@input = element(2, Val),
if Enc5@input bsr 4 =:= 0 ->
<<0:1,Enc5@input:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc5@input)]
end
end,
begin
Enc7@input = element(3, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
enc_GTPtunnelEndpoint(Enc7@input)
end
end,
begin
Enc9@input = element(4, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_GTPtunnelEndpoint(Enc9@input)
end
end|begin
Enc11@input = element(5, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABs-Admitted-Item_iE-Extensions'(Enc11@input)
end
end].
'enc_E-RABs-Admitted-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABs-Admitted-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components77(V1@Add4, V1@Buf1, []).



'dec_E-RABs-Admitted-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:3,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type GTPtunnelEndpoint
{Term2,Bytes4} = case (Opt bsr 2) band 1 of
1 ->
dec_GTPtunnelEndpoint(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type GTPtunnelEndpoint
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
dec_GTPtunnelEndpoint(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RABs-Admitted-Item_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RABs-Admitted-Item',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RABs-Admitted-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABs-Admitted-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-Admitted-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value78(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-Admitted-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value79(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABs-Admitted-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components80(V1@Add4, V1@Buf1, []).

'enc_HandoverRequestAcknowledge'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_HandoverRequestAcknowledge_protocolIEs(Enc2@input)
end].
'enc_HandoverRequestAcknowledge_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value81(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value82(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverRequestAcknowledge_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components83(V1@V0, V1@Buf1, []).



dec_HandoverRequestAcknowledge(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequestAcknowledge_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequestAcknowledge',Term1},Bytes4}.

'enc_E-RABs-ToBeSetup-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
if Enc4@input bsr 4 =:= 0 ->
<<0:1,Enc4@input:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@input)]
end
end,
begin
Enc6@input = element(3, Val),
'enc_E-RAB-Level-QoS-Parameters'(Enc6@input)
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input =:= 'dL-forwardingProposed' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc10@input = element(5, Val),
enc_GTPtunnelEndpoint(Enc10@input)
end|begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RABs-ToBeSetup-Item_iE-Extensions'(Enc11@input)
end
end].
'enc_E-RABs-ToBeSetup-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RABs-ToBeSetup-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components84(V1@Add4, V1@Buf1, []).



'dec_E-RABs-ToBeSetup-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type E-RAB-Level-QoS-Parameters
{Term2,Bytes4} = 'dec_E-RAB-Level-QoS-Parameters'(Bytes3),

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@Buf2/bitstring>> ->
{'dL-forwardingProposed',V4@Buf2};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type GTPtunnelEndpoint
{Term4,Bytes6} = dec_GTPtunnelEndpoint(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_E-RABs-ToBeSetup-Item_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V5@V0,V5@Buf1} = case Bytes7 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'E-RABs-ToBeSetup-Item',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_E-RABs-ToBeSetup-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value85(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value86(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RABs-ToBeSetup-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components87(V1@Add4, V1@Buf1, []).

'enc_UE-ContextInformation'(Val) ->
[begin
Enc1@input = element(6, Val),
Enc2@input = element(9, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(10, Val),
Enc4@input = element(11, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc6@input = element(2, Val),
if Enc6@input bsr 32 =:= 0 ->
begin
Enc6@input@bin = binary:encode_unsigned(Enc6@input),
Enc6@input@bin_size0 = byte_size(Enc6@input@bin),
Enc6@input@bin_size = Enc6@input@bin_size0 - 1,
[<<Enc6@input@bin_size:2>>,
align|Enc6@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end,
begin
Enc8@input = element(3, Val),
enc_UESecurityCapabilities(Enc8@input)
end,
begin
Enc9@input = element(4, Val),
'enc_AS-SecurityInformation'(Enc9@input)
end,
begin
Enc10@input = element(5, Val),
enc_UEAggregateMaximumBitRate(Enc10@input)
end,
begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
begin
Enc11@input@sub = Enc11@input - 1,
if Enc11@input@sub bsr 8 =:= 0 ->
[align,
Enc11@input@sub];
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end
end
end,
begin
Enc14@input = element(7, Val),
'enc_E-RABs-ToBeSetup-List'(Enc14@input)
end,
align,
begin
Enc15@input = element(8, Val),
Enc16@bin = iolist_to_binary(Enc15@input),
Enc16@len = byte_size(Enc16@bin),
if Enc16@len < 128 ->
[Enc16@len|Enc16@bin];
Enc16@len < 16384 ->
[<<2:2,Enc16@len:14>>|Enc16@bin];
true ->
encode_fragmented(Enc16@bin, 8)
end
end,
begin
Enc17@input = element(9, Val),
if Enc17@input =:= asn1_NOVALUE ->
[];
true ->
enc_HandoverRestrictionList(Enc17@input)
end
end,
begin
Enc19@input = element(10, Val),
if Enc19@input =:= asn1_NOVALUE ->
[];
true ->
enc_LocationReportingInformation(Enc19@input)
end
end|begin
Enc21@input = element(11, Val),
if Enc21@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UE-ContextInformation_iE-Extensions'(Enc21@input)
end
end].
'enc_UE-ContextInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UE-ContextInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components88(V1@Add4, V1@Buf1, []).



'dec_UE-ContextInformation'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:4,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type UESecurityCapabilities
{Term2,Bytes4} = dec_UESecurityCapabilities(Bytes3),

%% attribute number 3 with type AS-SecurityInformation
{Term3,Bytes5} = 'dec_AS-SecurityInformation'(Bytes4),

%% attribute number 4 with type UEAggregateMaximumBitRate
{Term4,Bytes6} = dec_UEAggregateMaximumBitRate(Bytes5),

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = case (Opt bsr 3) band 1 of
1 ->
begin
V4@Pad2 = bit_size(Bytes6) band 7,
<<_:V4@Pad2,V4@V0:1/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes6,
V4@Add4 = V4@V0 + 1,
{V4@Add4,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type E-RABs-ToBeSetup-List
{Term6,Bytes8} = 'dec_E-RABs-ToBeSetup-List'(Bytes7),

%% attribute number 7 with type OCTET STRING
{Term7,Bytes9} = begin
V5@Pad3 = bit_size(Bytes8) band 7,
{V5@V0,V5@Buf1} = case Bytes8 of
<<_:V5@Pad3,0:1,V5@V5:7,V5@V7:V5@V5/binary-unit:8,V5@Buf8/bitstring>> ->
{V5@V7,V5@Buf8};
<<_:V5@Pad3,1:1,0:1,V5@V6:14,V5@V8:V5@V6/binary-unit:8,V5@Buf9/bitstring>> ->
{V5@V8,V5@Buf9};
<<_:V5@Pad3,1:1,1:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V8,V5@Buf9}  = decode_fragmented(V5@V6, V5@Buf7, 8),
{V5@V8,V5@Buf9}
end,
V5@Conv10 = binary_to_list(V5@V0),
{V5@Conv10,V5@Buf1}
end,

%% attribute number 8 with type HandoverRestrictionList
{Term8,Bytes10} = case (Opt bsr 2) band 1 of
1 ->
dec_HandoverRestrictionList(Bytes9);
0 ->
{asn1_NOVALUE,Bytes9}
end,

%% attribute number 9 with type LocationReportingInformation
{Term9,Bytes11} = case (Opt bsr 1) band 1 of
1 ->
dec_LocationReportingInformation(Bytes10);
0 ->
{asn1_NOVALUE,Bytes10}
end,

%% attribute number 10 with type SEQUENCE OF
{Term10,Bytes12} = case Opt band 1 of
1 ->
'dec_UE-ContextInformation_iE-Extensions'(Bytes11);
0 ->
{asn1_NOVALUE,Bytes11}
end,

%% Extensions
{Extensions,Bytes13} = case Ext of
0 -> {<<>>,Bytes12};
1 ->
{V6@V0,V6@Buf1} = case Bytes12 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes14= skipextensions(Bytes13, 1, Extensions),
{{'UE-ContextInformation',Term1,Term2,Term3,Term4,Term5,Term6,Term7,Term8,Term9,Term10},Bytes14}.

'enc_HandoverRequest'(Val) ->
[<<0:1>>|begin
Enc2@input = element(2, Val),
enc_HandoverRequest_protocolIEs(Enc2@input)
end].
'enc_HandoverRequest_protocolIEs'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 65536 ->
[align,
<<Enc1@len:16>>|['enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value89(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value90(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.


dec_HandoverRequest_protocolIEs(Bytes) ->
%% Length with constraint {0,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components91(V1@V0, V1@Buf1, []).



dec_HandoverRequest(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 1 with type SEQUENCE OF
{Term1,Bytes2} = 'dec_HandoverRequest_protocolIEs'(Bytes1),

%% Extensions
{Extensions,Bytes3} = case Ext of
0 -> {<<>>,Bytes2};
1 ->
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:6,V2@Buf4/bitstring>> ->
V2@Add5 = V2@V3 + 1,
{V2@Add5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
V2@Pad6 = bit_size(V2@Buf2) band 7,
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<_:V2@Pad6,0:1,V2@V8:7,V2@Buf9/bitstring>> when V2@V8 =/= 0 ->
{V2@V8,V2@Buf9};
<<_:V2@Pad6,1:1,0:1,V2@V9:14,V2@Buf10/bitstring>> when V2@V9 =/= 0 ->
{V2@V9,V2@Buf10}
end,
{V2@V3,V2@Buf4}
end,
<<V2@V11:V2@V0/bitstring-unit:1,V2@Buf12/bitstring>> = V2@Buf1,
{V2@V11,V2@Buf12}
end,
Bytes4= skipextensions(Bytes3, 1, Extensions),
{{'HandoverRequest',Term1},Bytes4}.

'enc_UL-HighInterferenceIndication'(Val) ->
Enc1@bs = to_bitstring(Val, 1),
Enc1@bits = bit_size(Enc1@bs),
Enc1@bits@sub = Enc1@bits - 1,
if 0 =< Enc1@bits@sub, Enc1@bits@sub < 110 ->
[<<0:1,Enc1@bits@sub:7>>,
align|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1>>,
align,
Enc1@bits|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bs, 1)]
end.


'dec_UL-HighInterferenceIndication'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:7/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:1,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_UL-HighInterferenceIndicationInfo-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ECGI(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
Enc5@bs = to_bitstring(Enc4@input, 1),
Enc5@bits = bit_size(Enc5@bs),
Enc5@bits@sub = Enc5@bits - 1,
if 0 =< Enc5@bits@sub, Enc5@bits@sub < 110 ->
[<<0:1,Enc5@bits@sub:7>>,
align|Enc5@bs];
Enc5@bits < 128 ->
[<<1:1>>,
align,
Enc5@bits|Enc5@bs];
Enc5@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc5@bits:14>>|Enc5@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc5@bs, 1)]
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Enc6@input)
end
end].
'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components92(V1@Add4, V1@Buf1, []).



'dec_UL-HighInterferenceIndicationInfo-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@V3:7/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
V3@Pad8 = bit_size(V3@Buf4) band 7,
<<_:V3@Pad8,V3@V6:V3@Add5/binary-unit:1,V3@Buf7/bitstring>> = V3@Buf4,
{V3@V6,V3@Buf7};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@V10:V3@V8/binary-unit:1,V3@Buf11/bitstring>> ->
{V3@V10,V3@Buf11};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@V11:V3@V9/binary-unit:1,V3@Buf12/bitstring>> ->
{V3@V11,V3@Buf12};
<<_:V3@Pad6,1:1,1:1,V3@V9:6,V3@Buf10/bitstring>> ->
{V3@V11,V3@Buf12}  = decode_fragmented(V3@V9, V3@Buf10, 1),
{V3@V11,V3@Buf12}
end,
{V3@V3,V3@Buf4}
end,
{V3@V13,V3@Buf14}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V13,V3@Buf14}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UL-HighInterferenceIndicationInfo-Item',Term1,Term2,Term3},Bytes7}.

'enc_UL-HighInterferenceIndicationInfo'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_UL-HighInterferenceIndicationInfo-Item'(Comp) || Comp <- Val]]
end.



'dec_UL-HighInterferenceIndicationInfo'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components93(V1@Add4, V1@Buf1, []).

'enc_UL-InterferenceOverloadIndication-Item'(Val) ->
if Val =:= 'high-interference' ->
<<0:1,0:2>>;
Val =:= 'medium-interference' ->
<<0:1,1:2>>;
Val =:= 'low-interference' ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UL-InterferenceOverloadIndication-Item'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'high-interference';
1 -> 'medium-interference';
2 -> 'low-interference';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['high-interference','medium-interference','low-interference']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_UL-InterferenceOverloadIndication'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 110 ->
[<<Enc2@len@sub:7>>|[if Comp =:= 'high-interference' ->
<<0:1,0:2>>;
Comp =:= 'medium-interference' ->
<<0:1,1:2>>;
Comp =:= 'low-interference' ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Comp}}})
end || Comp <- Val]]
end.



'dec_UL-InterferenceOverloadIndication'(Bytes) ->
%% Length with constraint {1,110}
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components94(V1@Add2, V1@Buf1, []).

'enc_UESecurityCapabilities'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 16),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 16 ->
[<<0:1>>|Enc4@bs];
Enc4@bits < 128 ->
[<<1:1>>,
align,
Enc4@bits|Enc4@bs];
Enc4@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@bits:14>>|Enc4@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc4@bs, 1)]
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bs = to_bitstring(Enc5@input, 16),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 16 ->
[<<0:1>>|Enc6@bs];
Enc6@bits < 128 ->
[<<1:1>>,
align,
Enc6@bits|Enc6@bs];
Enc6@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc6@bits:14>>|Enc6@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc6@bs, 1)]
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UESecurityCapabilities_iE-Extensions'(Enc7@input)
end
end].
'enc_UESecurityCapabilities_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UESecurityCapabilities_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components95(V1@Add4, V1@Buf1, []).



dec_UESecurityCapabilities(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:16/binary-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@V10:V3@V8/binary-unit:1,V3@Buf11/bitstring>> ->
{V3@V10,V3@Buf11};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@V11:V3@V9/binary-unit:1,V3@Buf12/bitstring>> ->
{V3@V11,V3@Buf12};
<<_:V3@Pad6,1:1,1:1,V3@V9:6,V3@Buf10/bitstring>> ->
{V3@V11,V3@Buf12}  = decode_fragmented(V3@V9, V3@Buf10, 1),
{V3@V11,V3@Buf12}
end,
{V3@V3,V3@Buf4}
end,
{V3@V13,V3@Buf14}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V13,V3@Buf14}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:16/binary-unit:1,V4@Buf4/bitstring>> ->
{V4@V3,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@V10:V4@V8/binary-unit:1,V4@Buf11/bitstring>> ->
{V4@V10,V4@Buf11};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@V11:V4@V9/binary-unit:1,V4@Buf12/bitstring>> ->
{V4@V11,V4@Buf12};
<<_:V4@Pad6,1:1,1:1,V4@V9:6,V4@Buf10/bitstring>> ->
{V4@V11,V4@Buf12}  = decode_fragmented(V4@V9, V4@Buf10, 1),
{V4@V11,V4@Buf12}
end,
{V4@V3,V4@Buf4}
end,
{V4@V13,V4@Buf14}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V13,V4@Buf14}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UESecurityCapabilities_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UESecurityCapabilities',Term1,Term2,Term3},Bytes7}.

'enc_UEAggregateMaximumBitRate'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if 0 =< Enc3@input, Enc3@input < 10000000001 ->
begin
Enc3@input@bin = binary:encode_unsigned(Enc3@input),
Enc3@input@bin_size0 = byte_size(Enc3@input@bin),
Enc3@input@bin_size = Enc3@input@bin_size0 - 1,
[<<Enc3@input@bin_size:3>>,
align|Enc3@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if 0 =< Enc5@input, Enc5@input < 10000000001 ->
begin
Enc5@input@bin = binary:encode_unsigned(Enc5@input),
Enc5@input@bin_size0 = byte_size(Enc5@input@bin),
Enc5@input@bin_size = Enc5@input@bin_size0 - 1,
[<<Enc5@input@bin_size:3,0:5>>|Enc5@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_UEAggregateMaximumBitRate_iE-Extensions'(Enc7@input)
end
end].
'enc_UEAggregateMaximumBitRate_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_UEAggregateMaximumBitRate_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components96(V1@Add4, V1@Buf1, []).



dec_UEAggregateMaximumBitRate(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_UEAggregateMaximumBitRate_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'UEAggregateMaximumBitRate',Term1,Term2,Term3},Bytes7}.

'enc_UE-X2AP-ID'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UE-X2AP-ID'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_UE-S1AP-ID'(Val) ->
if Val bsr 32 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UE-S1AP-ID'(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_UE-HistoryInformation'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_LastVisitedCell-Item'(Comp) || Comp <- Val]]
end.



'dec_UE-HistoryInformation'(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components97(V1@Add2, V1@Buf1, []).

'enc_TypeOfError'(Val) ->
if Val =:= 'not-understood' ->
<<0:1,0:1>>;
Val =:= missing ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TypeOfError(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'not-understood';
1 -> missing
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TransportLayerAddress'(Val) ->
Enc1@bs = to_bitstring(Val, 1),
Enc1@bits = bit_size(Enc1@bs),
Enc1@bits@sub = Enc1@bits - 1,
if 0 =< Enc1@bits@sub, Enc1@bits@sub < 160 ->
[<<0:1>>,
Enc1@bits@sub,
align|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bs, 1)]
end.


dec_TransportLayerAddress(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:1,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_Transmission-Bandwidth'(Val) ->
if Val =:= bw6 ->
<<0:1,0:3>>;
Val =:= bw15 ->
<<0:1,1:3>>;
Val =:= bw25 ->
<<0:1,2:3>>;
Val =:= bw50 ->
<<0:1,3:3>>;
Val =:= bw75 ->
<<0:1,4:3>>;
Val =:= bw100 ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Transmission-Bandwidth'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[bw6,bw15,bw25,bw50,bw75,bw100]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TraceDepth'(Val) ->
if Val =:= minimum ->
<<0:1,0:3>>;
Val =:= medium ->
<<0:1,1:3>>;
Val =:= maximum ->
<<0:1,2:3>>;
Val =:= minimumWithoutVendorSpecificExtension ->
<<0:1,3:3>>;
Val =:= mediumWithoutVendorSpecificExtension ->
<<0:1,4:3>>;
Val =:= maximumWithoutVendorSpecificExtension ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TraceDepth(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[minimum,medium,maximum,minimumWithoutVendorSpecificExtension,mediumWithoutVendorSpecificExtension,maximumWithoutVendorSpecificExtension]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TraceCollectionEntityIPAddress'(Val) ->
Enc1@bs = to_bitstring(Val, 1),
Enc1@bits = bit_size(Enc1@bs),
Enc1@bits@sub = Enc1@bits - 1,
if 0 =< Enc1@bits@sub, Enc1@bits@sub < 160 ->
[<<0:1>>,
Enc1@bits@sub,
align|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bs, 1)]
end.


dec_TraceCollectionEntityIPAddress(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:8/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Add5 = V1@V3 + 1,
V1@Pad8 = bit_size(V1@Buf4) band 7,
<<_:V1@Pad8,V1@V6:V1@Add5/binary-unit:1,V1@Buf7/bitstring>> = V1@Buf4,
{V1@V6,V1@Buf7};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_TraceActivation'(Val) ->
[begin
Enc1@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 8 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bs = to_bitstring(Enc5@input, 8),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 8 ->
Enc6@bs
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= minimum ->
<<0:1,0:3>>;
Enc7@input =:= medium ->
<<0:1,1:3>>;
Enc7@input =:= maximum ->
<<0:1,2:3>>;
Enc7@input =:= minimumWithoutVendorSpecificExtension ->
<<0:1,3:3>>;
Enc7@input =:= mediumWithoutVendorSpecificExtension ->
<<0:1,4:3>>;
Enc7@input =:= maximumWithoutVendorSpecificExtension ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
Enc10@bs = to_bitstring(Enc9@input, 1),
Enc10@bits = bit_size(Enc10@bs),
Enc10@bits@sub = Enc10@bits - 1,
if 0 =< Enc10@bits@sub, Enc10@bits@sub < 160 ->
[<<0:1>>,
Enc10@bits@sub,
align|Enc10@bs];
Enc10@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc10@bits:14>>|Enc10@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc10@bs, 1)]
end
end|begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TraceActivation_iE-Extensions'(Enc11@input)
end
end].
'enc_TraceActivation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TraceActivation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components98(V1@Add4, V1@Buf1, []).



dec_TraceActivation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:8/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:8/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[minimum,medium,maximum,minimumWithoutVendorSpecificExtension,mediumWithoutVendorSpecificExtension,maximumWithoutVendorSpecificExtension]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type BIT STRING
{Term4,Bytes6} = begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:8/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
V6@Pad8 = bit_size(V6@Buf4) band 7,
<<_:V6@Pad8,V6@V6:V6@Add5/binary-unit:1,V6@Buf7/bitstring>> = V6@Buf4,
{V6@V6,V6@Buf7};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@V10:V6@V8/binary-unit:1,V6@Buf11/bitstring>> ->
{V6@V10,V6@Buf11};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@V11:V6@V9/binary-unit:1,V6@Buf12/bitstring>> ->
{V6@V11,V6@Buf12};
<<_:V6@Pad6,1:1,1:1,V6@V9:6,V6@Buf10/bitstring>> ->
{V6@V11,V6@Buf12}  = decode_fragmented(V6@V9, V6@Buf10, 1),
{V6@V11,V6@Buf12}
end,
{V6@V3,V6@Buf4}
end,
{V6@V13,V6@Buf14}  = {decode_compact_bit_string(V6@V0),V6@Buf1},
{V6@V13,V6@Buf14}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_TraceActivation_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'TraceActivation',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_Time-UE-StayedInCell'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Time-UE-StayedInCell'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_TimeToWait'(Val) ->
if Val =:= v1s ->
<<0:1,0:3>>;
Val =:= v2s ->
<<0:1,1:3>>;
Val =:= v5s ->
<<0:1,2:3>>;
Val =:= v10s ->
<<0:1,3:3>>;
Val =:= v20s ->
<<0:1,4:3>>;
Val =:= v60s ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_TimeToWait(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> v1s;
1 -> v2s;
2 -> v5s;
3 -> v10s;
4 -> v20s;
5 -> v60s;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[v1s,v2s,v5s,v10s,v20s,v60s]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_TargeteNBtoSource-eNBTransparentContainer'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 8)]
end.


'dec_TargeteNBtoSource-eNBTransparentContainer'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary_to_list(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_TAC'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 2 ->
Enc1@bin
end.


dec_TAC(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_SubscriberProfileIDforRFP'(Val) ->
Val@sub = Val - 1,
if Val@sub bsr 8 =:= 0 ->
[align,
Val@sub];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SubscriberProfileIDforRFP(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
{V1@Add4,V1@Buf1}
end.

'enc_SpecialSubframePatterns'(Val) ->
if Val =:= ssp0 ->
<<0:1,0:4>>;
Val =:= ssp1 ->
<<0:1,1:4>>;
Val =:= ssp2 ->
<<0:1,2:4>>;
Val =:= ssp3 ->
<<0:1,3:4>>;
Val =:= ssp4 ->
<<0:1,4:4>>;
Val =:= ssp5 ->
<<0:1,5:4>>;
Val =:= ssp6 ->
<<0:1,6:4>>;
Val =:= ssp7 ->
<<0:1,7:4>>;
Val =:= ssp8 ->
<<0:1,8:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SpecialSubframePatterns(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[ssp0,ssp1,ssp2,ssp3,ssp4,ssp5,ssp6,ssp7,ssp8]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SpecialSubframe-Info'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= ssp0 ->
<<0:1,0:4>>;
Enc3@input =:= ssp1 ->
<<0:1,1:4>>;
Enc3@input =:= ssp2 ->
<<0:1,2:4>>;
Enc3@input =:= ssp3 ->
<<0:1,3:4>>;
Enc3@input =:= ssp4 ->
<<0:1,4:4>>;
Enc3@input =:= ssp5 ->
<<0:1,5:4>>;
Enc3@input =:= ssp6 ->
<<0:1,6:4>>;
Enc3@input =:= ssp7 ->
<<0:1,7:4>>;
Enc3@input =:= ssp8 ->
<<0:1,8:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
Enc7@input = element(4, Val),
if Enc5@input =:= normal ->
if Enc7@input =:= normal ->
<<0:1,0:1,0:1,0:1>>;
Enc7@input =:= extended ->
<<0:1,0:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end;
Enc5@input =:= extended ->
if Enc7@input =:= normal ->
<<0:1,1:1,0:1,0:1>>;
Enc7@input =:= extended ->
<<0:1,1:1,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_SpecialSubframe-Info_iE-Extensions'(Enc9@input)
end
end].
'enc_SpecialSubframe-Info_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_SpecialSubframe-Info_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components99(V1@Add4, V1@Buf1, []).



'dec_SpecialSubframe-Info'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V3,[ssp0,ssp1,ssp2,ssp3,ssp4,ssp5,ssp6,ssp7,ssp8]}}}})
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:1/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> normal;
1 -> extended
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:1/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> normal;
1 -> extended
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_SpecialSubframe-Info_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'SpecialSubframe-Info',Term1,Term2,Term3,Term4},Bytes8}.

'enc_SubframeAssignment'(Val) ->
if Val =:= sa0 ->
<<0:1,0:3>>;
Val =:= sa1 ->
<<0:1,1:3>>;
Val =:= sa2 ->
<<0:1,2:3>>;
Val =:= sa3 ->
<<0:1,3:3>>;
Val =:= sa4 ->
<<0:1,4:3>>;
Val =:= sa5 ->
<<0:1,5:3>>;
Val =:= sa6 ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SubframeAssignment(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,[sa0,sa1,sa2,sa3,sa4,sa5,sa6]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_SRVCCOperationPossible'(Val) ->
if Val =:= possible ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_SRVCCOperationPossible(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'possible',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ServedCell-Information'(Val) ->
[begin
Enc1@input = element(7, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if 0 =< Enc3@input, Enc3@input < 504 ->
[<<0:1>>,
align|<<Enc3@input:16>>];
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@input)]
end
end,
begin
Enc5@input = element(3, Val),
enc_ECGI(Enc5@input)
end,
begin
Enc6@input = element(4, Val),
Enc7@bin = iolist_to_binary(Enc6@input),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len =:= 2 ->
Enc7@bin
end
end,
begin
Enc8@input = element(5, Val),
'enc_BroadcastPLMNs-Item'(Enc8@input)
end,
begin
Enc9@input = element(6, Val),
'enc_EUTRA-Mode-Info'(Enc9@input)
end|begin
Enc10@input = element(7, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ServedCell-Information_iE-Extensions'(Enc10@input)
end
end].
'enc_ServedCell-Information_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ServedCell-Information_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components100(V1@Add4, V1@Buf1, []).



'dec_ServedCell-Information'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@Buf2/bitstring>> ->
V3@Pad5 = bit_size(V3@Buf2) band 7,
<<_:V3@Pad5,V3@V3:2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf2,
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ECGI
{Term2,Bytes4} = dec_ECGI(Bytes3),

%% attribute number 3 with type OCTET STRING
{Term3,Bytes5} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes4,
V4@Conv2 = binary_to_list(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 4 with type BroadcastPLMNs-Item
{Term4,Bytes6} = 'dec_BroadcastPLMNs-Item'(Bytes5),

%% attribute number 5 with type EUTRA-Mode-Info
{Term5,Bytes7} = 'dec_EUTRA-Mode-Info'(Bytes6),

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_ServedCell-Information_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'ServedCell-Information',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_ServedCells'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|[enc_ServedCells_SEQOF(Comp) || Comp <- Val]]
end.

'enc_ServedCells_SEQOF'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc4@input = element(2, Val),
'enc_ServedCell-Information'(Enc4@input)
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_Neighbour-Information'(Enc5@input)
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ServedCells_SEQOF_iE-Extensions'(Enc7@input)
end
end].
'enc_ServedCells_SEQOF_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ServedCells_SEQOF_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components101(V1@Add4, V1@Buf1, []).


dec_ServedCells_SEQOF(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ServedCell-Information
{Term1,Bytes3} = 'dec_ServedCell-Information'(Bytes2),

%% attribute number 2 with type Neighbour-Information
{Term2,Bytes4} = case (Opt bsr 1) band 1 of
1 ->
'dec_Neighbour-Information'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ServedCells_SEQOF_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V3@V0,V3@Buf1} = case Bytes5 of
<<0:1,V3@V3:6,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
{V3@Add5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
{V3@V3,V3@Buf4}
end,
<<V3@V11:V3@V0/bitstring-unit:1,V3@Buf12/bitstring>> = V3@Buf1,
{V3@V11,V3@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ServedCells_SEQOF',Term1,Term2,Term3},Bytes7}.



dec_ServedCells(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components102(V1@Add4, V1@Buf1, []).

'enc_S1TNLLoadIndicator'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= lowLoad ->
<<0:1,0:2>>;
Enc3@input =:= mediumLoad ->
<<0:1,1:2>>;
Enc3@input =:= highLoad ->
<<0:1,2:2>>;
Enc3@input =:= overLoad ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= lowLoad ->
<<0:1,0:2>>;
Enc5@input =:= mediumLoad ->
<<0:1,1:2>>;
Enc5@input =:= highLoad ->
<<0:1,2:2>>;
Enc5@input =:= overLoad ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_S1TNLLoadIndicator_iE-Extensions'(Enc7@input)
end
end].
'enc_S1TNLLoadIndicator_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_S1TNLLoadIndicator_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components103(V1@Add4, V1@Buf1, []).



dec_S1TNLLoadIndicator(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_S1TNLLoadIndicator_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'S1TNLLoadIndicator',Term1,Term2,Term3},Bytes7}.

'enc_UL-Total-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UL-Total-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_DL-Total-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DL-Total-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_UL-non-GBR-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UL-non-GBR-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_DL-non-GBR-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DL-non-GBR-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_UL-GBR-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_UL-GBR-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_DL-GBR-PRB-usage'(Val) ->
if 0 =< Val, Val < 101 ->
<<Val:7>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DL-GBR-PRB-usage'(Bytes) ->
begin
<<V1@V0:7/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_RadioResourceStatus'(Val) ->
[begin
Enc1@input = element(8, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if 0 =< Enc3@input, Enc3@input < 101 ->
<<Enc3@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if 0 =< Enc5@input, Enc5@input < 101 ->
<<Enc5@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if 0 =< Enc7@input, Enc7@input < 101 ->
<<Enc7@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
if 0 =< Enc9@input, Enc9@input < 101 ->
<<Enc9@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end,
begin
Enc11@input = element(6, Val),
if 0 =< Enc11@input, Enc11@input < 101 ->
<<Enc11@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc11@input}}})
end
end,
begin
Enc13@input = element(7, Val),
if 0 =< Enc13@input, Enc13@input < 101 ->
<<Enc13@input:7>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end|begin
Enc15@input = element(8, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RadioResourceStatus_iE-Extensions'(Enc15@input)
end
end].
'enc_RadioResourceStatus_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_RadioResourceStatus_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components104(V1@Add4, V1@Buf1, []).



dec_RadioResourceStatus(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:7/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:7/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:7/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:7/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = begin
<<V7@V0:7/unsigned-unit:1,V7@Buf1/bitstring>> = Bytes6,
{V7@V0,V7@Buf1}
end,

%% attribute number 6 with type INTEGER
{Term6,Bytes8} = begin
<<V8@V0:7/unsigned-unit:1,V8@Buf1/bitstring>> = Bytes7,
{V8@V0,V8@Buf1}
end,

%% attribute number 7 with type SEQUENCE OF
{Term7,Bytes9} = case Opt band 1 of
1 ->
'dec_RadioResourceStatus_iE-Extensions'(Bytes8);
0 ->
{asn1_NOVALUE,Bytes8}
end,

%% Extensions
{Extensions,Bytes10} = case Ext of
0 -> {<<>>,Bytes9};
1 ->
{V9@V0,V9@Buf1} = case Bytes9 of
<<0:1,V9@V3:6,V9@Buf4/bitstring>> ->
V9@Add5 = V9@V3 + 1,
{V9@Add5,V9@Buf4};
<<1:1,V9@Buf2/bitstring>> ->
V9@Pad6 = bit_size(V9@Buf2) band 7,
{V9@V3,V9@Buf4} = case V9@Buf2 of
<<_:V9@Pad6,0:1,V9@V8:7,V9@Buf9/bitstring>> when V9@V8 =/= 0 ->
{V9@V8,V9@Buf9};
<<_:V9@Pad6,1:1,0:1,V9@V9:14,V9@Buf10/bitstring>> when V9@V9 =/= 0 ->
{V9@V9,V9@Buf10}
end,
{V9@V3,V9@Buf4}
end,
<<V9@V11:V9@V0/bitstring-unit:1,V9@Buf12/bitstring>> = V9@Buf1,
{V9@V11,V9@Buf12}
end,
Bytes11= skipextensions(Bytes10, 1, Extensions),
{{'RadioResourceStatus',Term1,Term2,Term3,Term4,Term5,Term6,Term7},Bytes11}.

'enc_RRC-Context'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 8)]
end.


'dec_RRC-Context'(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary_to_list(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_RNTP-Threshold'(Val) ->
if Val =:= minusInfinity ->
<<0:1,0:4>>;
Val =:= minusEleven ->
<<0:1,1:4>>;
Val =:= minusTen ->
<<0:1,2:4>>;
Val =:= minusNine ->
<<0:1,3:4>>;
Val =:= minusEight ->
<<0:1,4:4>>;
Val =:= minusSeven ->
<<0:1,5:4>>;
Val =:= minusSix ->
<<0:1,6:4>>;
Val =:= minusFive ->
<<0:1,7:4>>;
Val =:= minusFour ->
<<0:1,8:4>>;
Val =:= minusThree ->
<<0:1,9:4>>;
Val =:= minusTwo ->
<<0:1,10:4>>;
Val =:= minusOne ->
<<0:1,11:4>>;
Val =:= zero ->
<<0:1,12:4>>;
Val =:= one ->
<<0:1,13:4>>;
Val =:= two ->
<<0:1,14:4>>;
Val =:= three ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_RNTP-Threshold'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> minusInfinity;
1 -> minusEleven;
2 -> minusTen;
3 -> minusNine;
4 -> minusEight;
5 -> minusSeven;
6 -> minusSix;
7 -> minusFive;
8 -> minusFour;
9 -> minusThree;
10 -> minusTwo;
11 -> minusOne;
12 -> zero;
13 -> one;
14 -> two;
15 -> three
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ReportCharacteristics'(Val) ->
Enc1@bs = to_bitstring(Val, 32),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 32 ->
[align|Enc1@bs]
end.


dec_ReportCharacteristics(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:32/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_ReportArea'(Val) ->
if Val =:= ecgi ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ReportArea(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'ecgi',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_RelativeNarrowbandTxPower'(Val) ->
[begin
Enc1@input = element(7, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 6),
Enc4@bits = bit_size(Enc4@bs),
Enc4@bits@sub = Enc4@bits - 6,
if 0 =< Enc4@bits@sub, Enc4@bits@sub < 105 ->
[<<0:1,Enc4@bits@sub:7>>,
align|Enc4@bs];
Enc4@bits < 128 ->
[<<1:1>>,
align,
Enc4@bits|Enc4@bs];
Enc4@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@bits:14>>|Enc4@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc4@bs, 1)]
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= minusInfinity ->
<<0:1,0:4>>;
Enc5@input =:= minusEleven ->
<<0:1,1:4>>;
Enc5@input =:= minusTen ->
<<0:1,2:4>>;
Enc5@input =:= minusNine ->
<<0:1,3:4>>;
Enc5@input =:= minusEight ->
<<0:1,4:4>>;
Enc5@input =:= minusSeven ->
<<0:1,5:4>>;
Enc5@input =:= minusSix ->
<<0:1,6:4>>;
Enc5@input =:= minusFive ->
<<0:1,7:4>>;
Enc5@input =:= minusFour ->
<<0:1,8:4>>;
Enc5@input =:= minusThree ->
<<0:1,9:4>>;
Enc5@input =:= minusTwo ->
<<0:1,10:4>>;
Enc5@input =:= minusOne ->
<<0:1,11:4>>;
Enc5@input =:= zero ->
<<0:1,12:4>>;
Enc5@input =:= one ->
<<0:1,13:4>>;
Enc5@input =:= two ->
<<0:1,14:4>>;
Enc5@input =:= three ->
<<0:1,15:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= one ->
<<0:1,0:2>>;
Enc7@input =:= two ->
<<0:1,1:2>>;
Enc7@input =:= four ->
<<0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
if Enc9@input bsr 2 =:= 0 ->
<<0:1,Enc9@input:2>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc9@input)]
end
end,
begin
Enc11@input = element(6, Val),
if 0 =< Enc11@input, Enc11@input < 5 ->
<<0:1,Enc11@input:3>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc11@input)]
end
end|begin
Enc13@input = element(7, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
'enc_RelativeNarrowbandTxPower_iE-Extensions'(Enc13@input)
end
end].
'enc_RelativeNarrowbandTxPower_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_RelativeNarrowbandTxPower_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components105(V1@Add4, V1@Buf1, []).



dec_RelativeNarrowbandTxPower(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:7/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 6,
V3@Pad8 = bit_size(V3@Buf4) band 7,
<<_:V3@Pad8,V3@V6:V3@Add5/binary-unit:1,V3@Buf7/bitstring>> = V3@Buf4,
{V3@V6,V3@Buf7};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@V10:V3@V8/binary-unit:1,V3@Buf11/bitstring>> ->
{V3@V10,V3@Buf11};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@V11:V3@V9/binary-unit:1,V3@Buf12/bitstring>> ->
{V3@V11,V3@Buf12};
<<_:V3@Pad6,1:1,1:1,V3@V9:6,V3@Buf10/bitstring>> ->
{V3@V11,V3@Buf12}  = decode_fragmented(V3@V9, V3@Buf10, 1),
{V3@V11,V3@Buf12}
end,
{V3@V3,V3@Buf4}
end,
{V3@V13,V3@Buf14}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V13,V3@Buf14}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:4/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> minusInfinity;
1 -> minusEleven;
2 -> minusTen;
3 -> minusNine;
4 -> minusEight;
5 -> minusSeven;
6 -> minusSix;
7 -> minusFive;
8 -> minusFour;
9 -> minusThree;
10 -> minusTwo;
11 -> minusOne;
12 -> zero;
13 -> one;
14 -> two;
15 -> three
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:2/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> one;
1 -> two;
2 -> four;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[one,two,four]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:2/unsigned-unit:1,V6@Buf4/bitstring>> ->
{V6@V3,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
<<V6@V11:V6@V3/signed-unit:8,V6@Buf12/bitstring>> = V6@Buf4,
{V6@V11,V6@Buf12}
end,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type INTEGER
{Term5,Bytes7} = begin
{V7@V0,V7@Buf1} = case Bytes6 of
<<0:1,V7@V3:3/unsigned-unit:1,V7@Buf4/bitstring>> ->
{V7@V3,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
<<V7@V11:V7@V3/signed-unit:8,V7@Buf12/bitstring>> = V7@Buf4,
{V7@V11,V7@Buf12}
end,
{V7@V0,V7@Buf1}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_RelativeNarrowbandTxPower_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V8@V0,V8@Buf1} = case Bytes8 of
<<0:1,V8@V3:6,V8@Buf4/bitstring>> ->
V8@Add5 = V8@V3 + 1,
{V8@Add5,V8@Buf4};
<<1:1,V8@Buf2/bitstring>> ->
V8@Pad6 = bit_size(V8@Buf2) band 7,
{V8@V3,V8@Buf4} = case V8@Buf2 of
<<_:V8@Pad6,0:1,V8@V8:7,V8@Buf9/bitstring>> when V8@V8 =/= 0 ->
{V8@V8,V8@Buf9};
<<_:V8@Pad6,1:1,0:1,V8@V9:14,V8@Buf10/bitstring>> when V8@V9 =/= 0 ->
{V8@V9,V8@Buf10}
end,
{V8@V3,V8@Buf4}
end,
<<V8@V11:V8@V0/bitstring-unit:1,V8@Buf12/bitstring>> = V8@Buf1,
{V8@V11,V8@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'RelativeNarrowbandTxPower',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_Registration-Request'(Val) ->
if Val =:= start ->
<<0:1,0:1>>;
Val =:= stop ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Registration-Request'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> start;
1 -> stop
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_ReceiveStatusofULPDCPSDUs'(Val) ->
Enc1@bs = to_bitstring(Val, 4096),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 4096 ->
[align|Enc1@bs]
end.


dec_ReceiveStatusofULPDCPSDUs(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4096/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_QCI'(Val) ->
if Val bsr 8 =:= 0 ->
[align,
Val];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_QCI(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_PriorityLevel'(Val) ->
if Val =:= spare ->
<<0:4>>;
Val =:= highest ->
<<1:4>>;
Val =:= lowest ->
<<14:4>>;
Val =:= 'no-priority' ->
<<15:4>>;
Val bsr 4 =:= 0 ->
<<Val:4>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_PriorityLevel(Bytes) ->
begin
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> spare;
1 -> highest;
14 -> lowest;
15 -> 'no-priority';
_ -> V1@V0
end,
{V1@Int2,V1@Buf1}
end.

'enc_Pre-emptionVulnerability'(Val) ->
if Val =:= 'not-pre-emptable' ->
<<0:1>>;
Val =:= 'pre-emptable' ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Pre-emptionVulnerability'(Bytes) ->
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable'
end,
{V1@Int2,V1@Buf1}
end.

'enc_Pre-emptionCapability'(Val) ->
if Val =:= 'shall-not-trigger-pre-emption' ->
<<0:1>>;
Val =:= 'may-trigger-pre-emption' ->
<<1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Pre-emptionCapability'(Bytes) ->
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Int2 = case V1@V0 of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption'
end,
{V1@Int2,V1@Buf1}
end.

'enc_PLMN-Identity'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 3 ->
[align|Enc1@bin]
end.


'dec_PLMN-Identity'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:3/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary_to_list(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_PCI'(Val) ->
if 0 =< Val, Val < 504 ->
[<<0:1>>,
align|<<Val:16>>];
true ->
[<<1:1>>,
align|encode_unconstrained_number(Val)]
end.


dec_PCI(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
V1@Pad5 = bit_size(V1@Buf2) band 7,
<<_:V1@Pad5,V1@V3:2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf2,
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/signed-unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end.

'enc_PDCP-SN'(Val) ->
if Val bsr 12 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_PDCP-SN'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_NextHopChainingCount'(Val) ->
if Val bsr 3 =:= 0 ->
<<Val:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_NextHopChainingCount(Bytes) ->
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_Neighbour-Information'(Val) ->
Enc1@len = length(Val),
if Enc1@len < 513 ->
[align,
<<Enc1@len:16>>|['enc_Neighbour-Information_SEQOF'(Comp) || Comp <- Val]]
end.

'enc_Neighbour-Information_SEQOF'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ECGI(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
if 0 =< Enc4@input, Enc4@input < 504 ->
[<<0:1>>,
align|<<Enc4@input:16>>];
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc4@input)]
end
end,
begin
Enc6@input = element(4, Val),
if Enc6@input bsr 16 =:= 0 ->
<<Enc6@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc6@input}}})
end
end|begin
Enc8@input = element(5, Val),
if Enc8@input =:= asn1_NOVALUE ->
[];
true ->
'enc_Neighbour-Information_SEQOF_iE-Extensions'(Enc8@input)
end
end].
'enc_Neighbour-Information_SEQOF_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_Neighbour-Information_SEQOF_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components106(V1@Add4, V1@Buf1, []).


'dec_Neighbour-Information_SEQOF'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
{V3@V0,V3@Buf1} = case Bytes3 of
<<0:1,V3@Buf2/bitstring>> ->
V3@Pad5 = bit_size(V3@Buf2) band 7,
<<_:V3@Pad5,V3@V3:2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf2,
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes4,
{V4@V0,V4@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_Neighbour-Information_SEQOF_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V5@V0,V5@Buf1} = case Bytes6 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'Neighbour-Information_SEQOF',Term1,Term2,Term3,Term4},Bytes8}.



'dec_Neighbour-Information'(Bytes) ->
%% Length with constraint {0,512}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
dec_components107(V1@V0, V1@Buf1, []).

'enc_Measurement-ID'(Val) ->
Val@sub = Val - 1,
if 0 =< Val@sub, Val@sub < 4095 ->
[<<0:1>>,
align|<<Val@sub:16>>];
true ->
[<<1:1>>,
align|encode_unconstrained_number(Val)]
end.


'dec_Measurement-ID'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
V1@Pad5 = bit_size(V1@Buf2) band 7,
<<_:V1@Pad5,V1@V3:2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf2,
V1@Add7 = V1@V3 + 1,
{V1@Add7,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/signed-unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end.

'enc_MME-Code'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 1 ->
Enc1@bin
end.


'dec_MME-Code'(Bytes) ->
begin
<<V1@V0:1/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_MME-Group-ID'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 2 ->
Enc1@bin
end.


'dec_MME-Group-ID'(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_LocationReportingInformation'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc3@input = element(2, Val),
Enc5@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc3@input =:= 'change-of-serving-cell' ->
if Enc5@input =:= ecgi ->
<<0:1,0:1,0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end;
true ->
if Enc3@input =:= 'change-of-serving-cell' ->
if Enc5@input =:= ecgi ->
<<0:1,1:1,0:1,0:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_LocationReportingInformation_iE-Extensions'(Enc7@input)
end
end].
'enc_LocationReportingInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_LocationReportingInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components108(V1@Add4, V1@Buf1, []).



dec_LocationReportingInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@Buf2/bitstring>> ->
{'change-of-serving-cell',V3@Buf2};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@Buf2/bitstring>> ->
{'ecgi',V4@Buf2};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_LocationReportingInformation_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'LocationReportingInformation',Term1,Term2,Term3},Bytes7}.

'enc_LoadIndicator'(Val) ->
if Val =:= lowLoad ->
<<0:1,0:2>>;
Val =:= mediumLoad ->
<<0:1,1:2>>;
Val =:= highLoad ->
<<0:1,2:2>>;
Val =:= overLoad ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_LoadIndicator(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_LastVisitedGERANCellInformation'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= undefined ->
<<0:1>>
end.


dec_LastVisitedGERANCellInformation(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
ignore,
{0,Bytes1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
ignore,
{'NULL',Bytes2}
end
end,
{{undefined,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LastVisitedUTRANCellInformation'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len < 128 ->
[align,
Enc1@len|Enc1@bin];
Enc1@len < 16384 ->
[align,
<<2:2,Enc1@len:14>>|Enc1@bin];
true ->
[align|encode_fragmented(Enc1@bin, 8)]
end.


dec_LastVisitedUTRANCellInformation(Bytes) ->
begin
V1@Pad3 = bit_size(Bytes) band 7,
{V1@V0,V1@Buf1} = case Bytes of
<<_:V1@Pad3,0:1,V1@V5:7,V1@V7:V1@V5/binary-unit:8,V1@Buf8/bitstring>> ->
{V1@V7,V1@Buf8};
<<_:V1@Pad3,1:1,0:1,V1@V6:14,V1@V8:V1@V6/binary-unit:8,V1@Buf9/bitstring>> ->
{V1@V8,V1@Buf9};
<<_:V1@Pad3,1:1,1:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V8,V1@Buf9}  = decode_fragmented(V1@V6, V1@Buf7, 8),
{V1@V8,V1@Buf9}
end,
V1@Conv10 = binary_to_list(V1@V0),
{V1@Conv10,V1@Buf1}
end.

'enc_LastVisitedEUTRANCellInformation'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
enc_ECGI(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
enc_CellType(Enc4@input)
end,
align,
begin
Enc5@input = element(4, Val),
if Enc5@input bsr 12 =:= 0 ->
<<Enc5@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(5, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Enc7@input)
end
end].
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components109(V1@Add4, V1@Buf1, []).



dec_LastVisitedEUTRANCellInformation(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ECGI
{Term1,Bytes3} = dec_ECGI(Bytes2),

%% attribute number 2 with type CellType
{Term2,Bytes4} = dec_CellType(Bytes3),

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
V3@Pad2 = bit_size(Bytes4) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes4,
{V3@V0,V3@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'LastVisitedEUTRANCellInformation',Term1,Term2,Term3,Term4},Bytes8}.

'enc_LastVisitedCell-Item'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'e-UTRAN-Cell' ->
[<<0:1,0:2>>|enc_LastVisitedEUTRANCellInformation(ChoiceVal)];
ChoiceTag =:= 'uTRAN-Cell' ->
begin
Enc3@bin = iolist_to_binary(ChoiceVal),
Enc3@len = byte_size(Enc3@bin),
if Enc3@len < 128 ->
[<<0:1,1:2>>,
align,
Enc3@len|Enc3@bin];
Enc3@len < 16384 ->
[<<0:1,1:2>>,
align,
<<2:2,Enc3@len:14>>|Enc3@bin];
true ->
[<<0:1,1:2>>,
align|encode_fragmented(Enc3@bin, 8)]
end
end;
ChoiceTag =:= 'gERAN-Cell' ->
[<<0:1,2:2>>|enc_LastVisitedGERANCellInformation(ChoiceVal)]
end.


'dec_LastVisitedCell-Item'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_LastVisitedEUTRANCellInformation(Bytes2)
end,
{{'e-UTRAN-Cell',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end,
V2@Conv10 = binary_to_list(V2@V0),
{V2@Conv10,V2@Buf1}
end
end,
{{'uTRAN-Cell',Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_LastVisitedGERANCellInformation(Bytes2)
end,
{{'gERAN-Cell',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_LAC'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 2 ->
Enc1@bin
end.


dec_LAC(Bytes) ->
begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end.

'enc_Key-eNodeB-Star'(Val) ->
Enc1@bs = to_bitstring(Val, 256),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 256 ->
[align|Enc1@bs]
end.


'dec_Key-eNodeB-Star'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:256/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_InterfacesToTrace'(Val) ->
Enc1@bs = to_bitstring(Val, 8),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 8 ->
Enc1@bs
end.


dec_InterfacesToTrace(Bytes) ->
begin
<<V1@V0:8/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V2,V1@Buf3}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V2,V1@Buf3}
end.

'enc_IntegrityProtectionAlgorithms'(Val) ->
Enc1@bs = to_bitstring(Val, 16),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1>>,
align,
Enc1@bits|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bs, 1)]
end.


dec_IntegrityProtectionAlgorithms(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:16/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_HWLoadIndicator'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= lowLoad ->
<<0:1,0:2>>;
Enc3@input =:= mediumLoad ->
<<0:1,1:2>>;
Enc3@input =:= highLoad ->
<<0:1,2:2>>;
Enc3@input =:= overLoad ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= lowLoad ->
<<0:1,0:2>>;
Enc5@input =:= mediumLoad ->
<<0:1,1:2>>;
Enc5@input =:= highLoad ->
<<0:1,2:2>>;
Enc5@input =:= overLoad ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_HWLoadIndicator_iE-Extensions'(Enc7@input)
end
end].
'enc_HWLoadIndicator_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_HWLoadIndicator_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components110(V1@Add4, V1@Buf1, []).



dec_HWLoadIndicator(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_HWLoadIndicator_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'HWLoadIndicator',Term1,Term2,Term3},Bytes7}.

'enc_HFN'(Val) ->
if Val bsr 20 =:= 0 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:2>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_HFN(Bytes) ->
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_HandoverRestrictionList'(Val) ->
[begin
Enc1@input = element(3, Val),
Enc2@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(5, Val),
Enc4@input = element(6, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(7, Val),
if Enc5@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
align,
begin
Enc7@input = element(2, Val),
Enc8@bin = iolist_to_binary(Enc7@input),
Enc8@len = byte_size(Enc8@bin),
if Enc8@len =:= 3 ->
Enc8@bin
end
end,
begin
Enc9@input = element(3, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
enc_EPLMNs(Enc9@input)
end
end,
begin
Enc11@input = element(4, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
enc_ForbiddenTAs(Enc11@input)
end
end,
begin
Enc13@input = element(5, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
true ->
enc_ForbiddenLAs(Enc13@input)
end
end,
begin
Enc15@input = element(6, Val),
if Enc15@input =:= asn1_NOVALUE ->
[];
Enc15@input =:= all ->
<<0:1,0:2>>;
Enc15@input =:= geran ->
<<0:1,1:2>>;
Enc15@input =:= utran ->
<<0:1,2:2>>;
Enc15@input =:= cdma2000 ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc15@input}}})
end
end|begin
Enc18@input = element(7, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
'enc_HandoverRestrictionList_iE-Extensions'(Enc18@input)
end
end].
'enc_HandoverRestrictionList_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_HandoverRestrictionList_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components111(V1@Add4, V1@Buf1, []).



dec_HandoverRestrictionList(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type EPLMNs
{Term2,Bytes4} = case (Opt bsr 4) band 1 of
1 ->
dec_EPLMNs(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ForbiddenTAs
{Term3,Bytes5} = case (Opt bsr 3) band 1 of
1 ->
dec_ForbiddenTAs(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type ForbiddenLAs
{Term4,Bytes6} = case (Opt bsr 2) band 1 of
1 ->
dec_ForbiddenLAs(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type ENUMERATED
{Term5,Bytes7} = case (Opt bsr 1) band 1 of
1 ->
begin
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:2/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% attribute number 6 with type SEQUENCE OF
{Term6,Bytes8} = case Opt band 1 of
1 ->
'dec_HandoverRestrictionList_iE-Extensions'(Bytes7);
0 ->
{asn1_NOVALUE,Bytes7}
end,

%% Extensions
{Extensions,Bytes9} = case Ext of
0 -> {<<>>,Bytes8};
1 ->
{V5@V0,V5@Buf1} = case Bytes8 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes10= skipextensions(Bytes9, 1, Extensions),
{{'HandoverRestrictionList',Term1,Term2,Term3,Term4,Term5,Term6},Bytes10}.

'enc_GUMMEI'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
'enc_GU-Group-ID'(Enc3@input)
end,
begin
Enc4@input = element(3, Val),
Enc5@bin = iolist_to_binary(Enc4@input),
Enc5@len = byte_size(Enc5@bin),
if Enc5@len =:= 1 ->
Enc5@bin
end
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GUMMEI_iE-Extensions'(Enc6@input)
end
end].
'enc_GUMMEI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GUMMEI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components112(V1@Add4, V1@Buf1, []).



dec_GUMMEI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type GU-Group-ID
{Term1,Bytes3} = 'dec_GU-Group-ID'(Bytes2),

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V3@V0:1/binary-unit:8,V3@Buf1/bitstring>> = Bytes3,
V3@Conv2 = binary_to_list(V3@V0),
{V3@Conv2,V3@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_GUMMEI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'GUMMEI',Term1,Term2,Term3},Bytes7}.

'enc_GU-Group-ID'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 3 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bin = iolist_to_binary(Enc5@input),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len =:= 2 ->
Enc6@bin
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GU-Group-ID_iE-Extensions'(Enc7@input)
end
end].
'enc_GU-Group-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GU-Group-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components113(V1@Add4, V1@Buf1, []).



'dec_GU-Group-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
<<V4@V0:2/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv2 = binary_to_list(V4@V0),
{V4@Conv2,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_GU-Group-ID_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'GU-Group-ID',Term1,Term2,Term3},Bytes7}.

'enc_GUGroupIDList'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_GU-Group-ID'(Comp) || Comp <- Val]]
end.



dec_GUGroupIDList(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components114(V1@Add2, V1@Buf1, []).

'enc_GTP-TEI'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 4 ->
[align|Enc1@bin]
end.


'dec_GTP-TEI'(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:4/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary_to_list(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_GTPtunnelEndpoint'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 1),
Enc4@bits = bit_size(Enc4@bs),
Enc4@bits@sub = Enc4@bits - 1,
if 0 =< Enc4@bits@sub, Enc4@bits@sub < 160 ->
[<<0:1>>,
Enc4@bits@sub,
align|Enc4@bs];
Enc4@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc4@bits:14>>|Enc4@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc4@bs, 1)]
end
end,
align,
begin
Enc5@input = element(3, Val),
Enc6@bin = iolist_to_binary(Enc5@input),
Enc6@len = byte_size(Enc6@bin),
if Enc6@len =:= 4 ->
Enc6@bin
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GTPtunnelEndpoint_iE-Extensions'(Enc7@input)
end
end].
'enc_GTPtunnelEndpoint_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GTPtunnelEndpoint_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components115(V1@Add4, V1@Buf1, []).



dec_GTPtunnelEndpoint(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:8/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Add5 = V3@V3 + 1,
V3@Pad8 = bit_size(V3@Buf4) band 7,
<<_:V3@Pad8,V3@V6:V3@Add5/binary-unit:1,V3@Buf7/bitstring>> = V3@Buf4,
{V3@V6,V3@Buf7};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@V10:V3@V8/binary-unit:1,V3@Buf11/bitstring>> ->
{V3@V10,V3@Buf11};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@V11:V3@V9/binary-unit:1,V3@Buf12/bitstring>> ->
{V3@V11,V3@Buf12};
<<_:V3@Pad6,1:1,1:1,V3@V9:6,V3@Buf10/bitstring>> ->
{V3@V11,V3@Buf12}  = decode_fragmented(V3@V9, V3@Buf10, 1),
{V3@V11,V3@Buf12}
end,
{V3@V3,V3@Buf4}
end,
{V3@V13,V3@Buf14}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V13,V3@Buf14}
end,

%% attribute number 2 with type OCTET STRING
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:4/binary-unit:8,V4@Buf1/bitstring>> = Bytes3,
V4@Conv4 = binary_to_list(V4@V0),
{V4@Conv4,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_GTPtunnelEndpoint_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'GTPtunnelEndpoint',Term1,Term2,Term3},Bytes7}.

'enc_GlobalENB-ID'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 3 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
'enc_ENB-ID'(Enc5@input)
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GlobalENB-ID_iE-Extensions'(Enc6@input)
end
end].
'enc_GlobalENB-ID_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GlobalENB-ID_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components116(V1@Add4, V1@Buf1, []).



'dec_GlobalENB-ID'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ENB-ID
{Term2,Bytes4} = 'dec_ENB-ID'(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_GlobalENB-ID_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'GlobalENB-ID',Term1,Term2,Term3},Bytes7}.

'enc_GBR-QosInformation'(Val) ->
[begin
Enc1@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if 0 =< Enc3@input, Enc3@input < 10000000001 ->
begin
Enc3@input@bin = binary:encode_unsigned(Enc3@input),
Enc3@input@bin_size0 = byte_size(Enc3@input@bin),
Enc3@input@bin_size = Enc3@input@bin_size0 - 1,
[<<Enc3@input@bin_size:3>>,
align|Enc3@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if 0 =< Enc5@input, Enc5@input < 10000000001 ->
begin
Enc5@input@bin = binary:encode_unsigned(Enc5@input),
Enc5@input@bin_size0 = byte_size(Enc5@input@bin),
Enc5@input@bin_size = Enc5@input@bin_size0 - 1,
[<<Enc5@input@bin_size:3,0:5>>|Enc5@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if 0 =< Enc7@input, Enc7@input < 10000000001 ->
begin
Enc7@input@bin = binary:encode_unsigned(Enc7@input),
Enc7@input@bin_size0 = byte_size(Enc7@input@bin),
Enc7@input@bin_size = Enc7@input@bin_size0 - 1,
[<<Enc7@input@bin_size:3,0:5>>|Enc7@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
if 0 =< Enc9@input, Enc9@input < 10000000001 ->
begin
Enc9@input@bin = binary:encode_unsigned(Enc9@input),
Enc9@input@bin_size0 = byte_size(Enc9@input@bin),
Enc9@input@bin_size = Enc9@input@bin_size0 - 1,
[<<Enc9@input@bin_size:3,0:5>>|Enc9@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GBR-QosInformation_iE-Extensions'(Enc11@input)
end
end].
'enc_GBR-QosInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_GBR-QosInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components117(V1@Add4, V1@Buf1, []).



'dec_GBR-QosInformation'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:3/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Add2 = V3@V0 + 1,
V3@Pad5 = bit_size(V3@Buf1) band 7,
<<_:V3@Pad5,V3@V3:V3@Add2/unsigned-unit:8,V3@Buf4/bitstring>> = V3@Buf1,
{V3@V3,V3@Buf4}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:5,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type INTEGER
{Term3,Bytes5} = begin
<<V5@V0:3/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Add2 = V5@V0 + 1,
<<_:5,V5@V3:V5@Add2/unsigned-unit:8,V5@Buf4/bitstring>> = V5@Buf1,
{V5@V3,V5@Buf4}
end,

%% attribute number 4 with type INTEGER
{Term4,Bytes6} = begin
<<V6@V0:3/unsigned-unit:1,V6@Buf1/bitstring>> = Bytes5,
V6@Add2 = V6@V0 + 1,
<<_:5,V6@V3:V6@Add2/unsigned-unit:8,V6@Buf4/bitstring>> = V6@Buf1,
{V6@V3,V6@Buf4}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_GBR-QosInformation_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'GBR-QosInformation',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_ForbiddenLACs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 12 =:= 0 ->
[align,
<<Enc2@len@sub:16>>|begin
_ = [if length(Comp) =:= 2 ->
[];
byte_size(Comp) =:= 2 ->
[]
end || Comp <- Val],
iolist_to_binary(Val)
end]
end.



dec_ForbiddenLACs(Bytes) ->
%% Length with constraint {1,4096}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components118(V1@Add4, V1@Buf1, []).

'enc_ForbiddenLAs-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 3 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
enc_ForbiddenLACs(Enc5@input)
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ForbiddenLAs-Item_iE-Extensions'(Enc6@input)
end
end].
'enc_ForbiddenLAs-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ForbiddenLAs-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components119(V1@Add4, V1@Buf1, []).



'dec_ForbiddenLAs-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ForbiddenLACs
{Term2,Bytes4} = dec_ForbiddenLACs(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ForbiddenLAs-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ForbiddenLAs-Item',Term1,Term2,Term3},Bytes7}.

'enc_ForbiddenLAs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_ForbiddenLAs-Item'(Comp) || Comp <- Val]]
end.



dec_ForbiddenLAs(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components120(V1@Add2, V1@Buf1, []).

'enc_ForbiddenTACs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if Enc2@len@sub bsr 12 =:= 0 ->
[align,
<<Enc2@len@sub:16>>|begin
_ = [if length(Comp) =:= 2 ->
[];
byte_size(Comp) =:= 2 ->
[]
end || Comp <- Val],
iolist_to_binary(Val)
end]
end.



dec_ForbiddenTACs(Bytes) ->
%% Length with constraint {1,4096}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components121(V1@Add4, V1@Buf1, []).

'enc_ForbiddenTAs-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 3 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
enc_ForbiddenTACs(Enc5@input)
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ForbiddenTAs-Item_iE-Extensions'(Enc6@input)
end
end].
'enc_ForbiddenTAs-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ForbiddenTAs-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components122(V1@Add4, V1@Buf1, []).



'dec_ForbiddenTAs-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type ForbiddenTACs
{Term2,Bytes4} = dec_ForbiddenTACs(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ForbiddenTAs-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ForbiddenTAs-Item',Term1,Term2,Term3},Bytes7}.

'enc_ForbiddenTAs'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 4 =:= 0 ->
[<<Enc1@len@sub:4>>|['enc_ForbiddenTAs-Item'(Comp) || Comp <- Val]]
end.



dec_ForbiddenTAs(Bytes) ->
%% Length with constraint {1,16}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components123(V1@Add2, V1@Buf1, []).

'enc_ForbiddenInterRATs'(Val) ->
if Val =:= all ->
<<0:1,0:2>>;
Val =:= geran ->
<<0:1,1:2>>;
Val =:= utran ->
<<0:1,2:2>>;
Val =:= cdma2000 ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_ForbiddenInterRATs(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_EventType'(Val) ->
if Val =:= 'change-of-serving-cell' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_EventType(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'change-of-serving-cell',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_EUTRANTraceID'(Val) ->
Enc1@bin = iolist_to_binary(Val),
Enc1@len = byte_size(Enc1@bin),
if Enc1@len =:= 8 ->
[align|Enc1@bin]
end.


dec_EUTRANTraceID(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:8/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv4 = binary_to_list(V1@V0),
{V1@Conv4,V1@Buf1}
end.

'enc_EUTRANCellIdentifier'(Val) ->
Enc1@bs = to_bitstring(Val, 28),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 28 ->
[align|Enc1@bs]
end.


dec_EUTRANCellIdentifier(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:28/binary-unit:1,V1@Buf1/bitstring>> = Bytes,
{V1@V4,V1@Buf5}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V4,V1@Buf5}
end.

'enc_E-RAB-Item'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 4 =:= 0 ->
<<0:1,Enc3@input:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Enc3@input)]
end
end,
begin
Enc5@input = element(3, Val),
enc_Cause(Enc5@input)
end|begin
Enc6@input = element(4, Val),
if Enc6@input =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RAB-Item_iE-Extensions'(Enc6@input)
end
end].
'enc_E-RAB-Item_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RAB-Item_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components124(V1@Add4, V1@Buf1, []).



'dec_E-RAB-Item'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:4/unsigned-unit:1,V3@Buf4/bitstring>> ->
{V3@V3,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
V3@Pad6 = bit_size(V3@Buf2) band 7,
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<_:V3@Pad6,0:1,V3@V8:7,V3@Buf9/bitstring>> when V3@V8 =/= 0 ->
{V3@V8,V3@Buf9};
<<_:V3@Pad6,1:1,0:1,V3@V9:14,V3@Buf10/bitstring>> when V3@V9 =/= 0 ->
{V3@V9,V3@Buf10}
end,
<<V3@V11:V3@V3/signed-unit:8,V3@Buf12/bitstring>> = V3@Buf4,
{V3@V11,V3@Buf12}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type Cause
{Term2,Bytes4} = dec_Cause(Bytes3),

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_E-RAB-Item_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V4@V0,V4@Buf1} = case Bytes5 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'E-RAB-Item',Term1,Term2,Term3},Bytes7}.

'enc_E-RAB-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_E-RAB-List_ProtocolIE-Field'(Comp) || Comp <- Val]]
end.

'enc_E-RAB-List_ProtocolIE-Field'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Value125(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RAB-List_ProtocolIE-Field'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Value
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Value126(Tmpterm1, Term1),
{{'ProtocolIE-Field',Term1,Term2,Term3},Bytes3}.



'dec_E-RAB-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components127(V1@Add4, V1@Buf1, []).

'enc_E-RAB-Level-QoS-Parameters'(Val) ->
[begin
Enc1@input = element(4, Val),
Enc2@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
align,
begin
Enc4@input = element(2, Val),
if Enc4@input bsr 8 =:= 0 ->
Enc4@input;
true ->
exit({error,{asn1,{illegal_value,Enc4@input}}})
end
end,
begin
Enc6@input = element(3, Val),
enc_AllocationAndRetentionPriority(Enc6@input)
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_GBR-QosInformation'(Enc7@input)
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_E-RAB-Level-QoS-Parameters_iE-Extensions'(Enc9@input)
end
end].
'enc_E-RAB-Level-QoS-Parameters_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_E-RAB-Level-QoS-Parameters_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components128(V1@Add4, V1@Buf1, []).



'dec_E-RAB-Level-QoS-Parameters'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:2,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type AllocationAndRetentionPriority
{Term2,Bytes4} = dec_AllocationAndRetentionPriority(Bytes3),

%% attribute number 3 with type GBR-QosInformation
{Term3,Bytes5} = case (Opt bsr 1) band 1 of
1 ->
'dec_GBR-QosInformation'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_E-RAB-Level-QoS-Parameters_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V4@V0,V4@Buf1} = case Bytes6 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'E-RAB-Level-QoS-Parameters',Term1,Term2,Term3,Term4},Bytes8}.

'enc_E-RAB-ID'(Val) ->
if Val bsr 4 =:= 0 ->
<<0:1,Val:4>>;
true ->
[<<1:1>>,
align|encode_unconstrained_number(Val)]
end.


'dec_E-RAB-ID'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:4/unsigned-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/signed-unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end.

'enc_EPLMNs'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 15 ->
[<<Enc2@len@sub:4>>,
align|begin
_ = [if length(Comp) =:= 3 ->
[];
byte_size(Comp) =:= 3 ->
[]
end || Comp <- Val],
iolist_to_binary(Val)
end]
end.



dec_EPLMNs(Bytes) ->
%% Length with constraint {1,15}
<<V1@V0:4/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components129(V1@Add2, V1@Buf1, []).

'enc_EncryptionAlgorithms'(Val) ->
Enc1@bs = to_bitstring(Val, 16),
Enc1@bits = bit_size(Enc1@bs),
if Enc1@bits =:= 16 ->
[<<0:1>>|Enc1@bs];
Enc1@bits < 128 ->
[<<1:1>>,
align,
Enc1@bits|Enc1@bs];
Enc1@bits < 16384 ->
[<<1:1>>,
align,
<<2:2,Enc1@bits:14>>|Enc1@bs];
true ->
[<<1:1>>,
align|encode_fragmented(Enc1@bs, 1)]
end.


dec_EncryptionAlgorithms(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:16/binary-unit:1,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@V10:V1@V8/binary-unit:1,V1@Buf11/bitstring>> ->
{V1@V10,V1@Buf11};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@V11:V1@V9/binary-unit:1,V1@Buf12/bitstring>> ->
{V1@V11,V1@Buf12};
<<_:V1@Pad6,1:1,1:1,V1@V9:6,V1@Buf10/bitstring>> ->
{V1@V11,V1@Buf12}  = decode_fragmented(V1@V9, V1@Buf10, 1),
{V1@V11,V1@Buf12}
end,
{V1@V3,V1@Buf4}
end,
{V1@V13,V1@Buf14}  = {decode_compact_bit_string(V1@V0),V1@Buf1},
{V1@V13,V1@Buf14}
end.

'enc_ENB-ID'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= 'macro-eNB-ID' ->
begin
Enc2@bs = to_bitstring(ChoiceVal, 20),
Enc2@bits = bit_size(Enc2@bs),
if Enc2@bits =:= 20 ->
[<<0:1,0:1>>,
align|Enc2@bs]
end
end;
ChoiceTag =:= 'home-eNB-ID' ->
begin
Enc4@bs = to_bitstring(ChoiceVal, 28),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 28 ->
[<<0:1,1:1>>,
align|Enc4@bs]
end
end
end.


'dec_ENB-ID'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
V2@Pad2 = bit_size(Bytes2) band 7,
<<_:V2@Pad2,V2@V0:20/binary-unit:1,V2@Buf1/bitstring>> = Bytes2,
{V2@V4,V2@Buf5}  = {decode_compact_bit_string(V2@V0),V2@Buf1},
{V2@V4,V2@Buf5}
end
end,
{{'macro-eNB-ID',Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:28/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V4,V3@Buf5}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V4,V3@Buf5}
end
end,
{{'home-eNB-ID',Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_ECGI'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bin = iolist_to_binary(Enc3@input),
Enc4@len = byte_size(Enc4@bin),
if Enc4@len =:= 3 ->
Enc4@bin
end
end,
begin
Enc5@input = element(3, Val),
Enc6@bs = to_bitstring(Enc5@input, 28),
Enc6@bits = bit_size(Enc6@bs),
if Enc6@bits =:= 28 ->
Enc6@bs
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_ECGI_iE-Extensions'(Enc7@input)
end
end].
'enc_ECGI_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_ECGI_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_ECGI_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_ECGI_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_ECGI_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components130(V1@Add4, V1@Buf1, []).



dec_ECGI(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type OCTET STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes2,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,

%% attribute number 2 with type BIT STRING
{Term2,Bytes4} = begin
<<V4@V0:28/binary-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V2,V4@Buf3}  = {decode_compact_bit_string(V4@V0),V4@Buf1},
{V4@V2,V4@Buf3}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_ECGI_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'ECGI',Term1,Term2,Term3},Bytes7}.

'enc_EUTRA-Mode-Info'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= fDD ->
[<<0:1,0:1>>|'enc_FDD-Info'(ChoiceVal)];
ChoiceTag =:= tDD ->
[<<0:1,1:1>>|'enc_TDD-Info'(ChoiceVal)]
end.


'dec_EUTRA-Mode-Info'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:1/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
'dec_FDD-Info'(Bytes2)
end,
{{fDD,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
'dec_TDD-Info'(Bytes2)
end,
{{tDD,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_TDD-Info'(Val) ->
[begin
Enc1@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input =:= bw6 ->
<<0:1,0:3>>;
Enc5@input =:= bw15 ->
<<0:1,1:3>>;
Enc5@input =:= bw25 ->
<<0:1,2:3>>;
Enc5@input =:= bw50 ->
<<0:1,3:3>>;
Enc5@input =:= bw75 ->
<<0:1,4:3>>;
Enc5@input =:= bw100 ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= sa0 ->
<<0:1,0:3>>;
Enc7@input =:= sa1 ->
<<0:1,1:3>>;
Enc7@input =:= sa2 ->
<<0:1,2:3>>;
Enc7@input =:= sa3 ->
<<0:1,3:3>>;
Enc7@input =:= sa4 ->
<<0:1,4:3>>;
Enc7@input =:= sa5 ->
<<0:1,5:3>>;
Enc7@input =:= sa6 ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
'enc_SpecialSubframe-Info'(Enc9@input)
end|begin
Enc10@input = element(6, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
true ->
'enc_TDD-Info_iE-Extensions'(Enc10@input)
end
end].
'enc_TDD-Info_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_TDD-Info_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_TDD-Info_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_TDD-Info_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_TDD-Info_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components131(V1@Add4, V1@Buf1, []).



'dec_TDD-Info'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
{V4@V0,V4@Buf1} = case Bytes3 of
<<0:1,V4@V3:3/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
_ -> exit({error,{asn1,{decode_enumerated,{V4@V3,[bw6,bw15,bw25,bw50,bw75,bw100]}}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:6,0:1,V4@V10:7,V4@Buf11/bitstring>> when V4@V10 =/= 0 ->
{V4@V10,V4@Buf11};
<<_:6,1:1,0:1,V4@V11:14,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12}
end,
<<V4@V13:V4@V6/unit:8,V4@Buf14/bitstring>> = V4@Buf7,
{V4@V13,V4@Buf14}
end,
V4@Int15 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int15,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[sa0,sa1,sa2,sa3,sa4,sa5,sa6]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type SpecialSubframe-Info
{Term4,Bytes6} = 'dec_SpecialSubframe-Info'(Bytes5),

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_TDD-Info_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'TDD-Info',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_FDD-Info'(Val) ->
[begin
Enc1@input = element(6, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 16 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input bsr 16 =:= 0 ->
<<Enc5@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= bw6 ->
<<0:1,0:3>>;
Enc7@input =:= bw15 ->
<<0:1,1:3>>;
Enc7@input =:= bw25 ->
<<0:1,2:3>>;
Enc7@input =:= bw50 ->
<<0:1,3:3>>;
Enc7@input =:= bw75 ->
<<0:1,4:3>>;
Enc7@input =:= bw100 ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc9@input = element(5, Val),
if Enc9@input =:= bw6 ->
<<0:1,0:3>>;
Enc9@input =:= bw15 ->
<<0:1,1:3>>;
Enc9@input =:= bw25 ->
<<0:1,2:3>>;
Enc9@input =:= bw50 ->
<<0:1,3:3>>;
Enc9@input =:= bw75 ->
<<0:1,4:3>>;
Enc9@input =:= bw100 ->
<<0:1,5:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc9@input}}})
end
end|begin
Enc11@input = element(6, Val),
if Enc11@input =:= asn1_NOVALUE ->
[];
true ->
'enc_FDD-Info_iE-Extensions'(Enc11@input)
end
end].
'enc_FDD-Info_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_FDD-Info_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_FDD-Info_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_FDD-Info_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_FDD-Info_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components132(V1@Add4, V1@Buf1, []).



'dec_FDD-Info'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,[bw6,bw15,bw25,bw50,bw75,bw100]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type ENUMERATED
{Term4,Bytes6} = begin
{V6@V0,V6@Buf1} = case Bytes5 of
<<0:1,V6@V3:3/unsigned-unit:1,V6@Buf4/bitstring>> ->
V6@Int5 = case V6@V3 of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
_ -> exit({error,{asn1,{decode_enumerated,{V6@V3,[bw6,bw15,bw25,bw50,bw75,bw100]}}}})
end,
{V6@Int5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<0:1,V6@V6:6,V6@Buf7/bitstring>> ->
{V6@V6,V6@Buf7};
<<1:1,V6@Buf5/bitstring>> ->
V6@Pad9 = bit_size(V6@Buf5) band 7,
{V6@V6,V6@Buf7} = case V6@Buf5 of
<<_:V6@Pad9,0:1,V6@V11:7,V6@Buf12/bitstring>> when V6@V11 =/= 0 ->
{V6@V11,V6@Buf12};
<<_:V6@Pad9,1:1,0:1,V6@V12:14,V6@Buf13/bitstring>> when V6@V12 =/= 0 ->
{V6@V12,V6@Buf13}
end,
<<V6@V14:V6@V6/unit:8,V6@Buf15/bitstring>> = V6@Buf7,
{V6@V14,V6@Buf15}
end,
V6@Int16 = case V6@V3 of
_ -> {asn1_enum,V6@V3}
end,
{V6@Int16,V6@Buf4}
end,
{V6@V0,V6@Buf1}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_FDD-Info_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V7@V0,V7@Buf1} = case Bytes7 of
<<0:1,V7@V3:6,V7@Buf4/bitstring>> ->
V7@Add5 = V7@V3 + 1,
{V7@Add5,V7@Buf4};
<<1:1,V7@Buf2/bitstring>> ->
V7@Pad6 = bit_size(V7@Buf2) band 7,
{V7@V3,V7@Buf4} = case V7@Buf2 of
<<_:V7@Pad6,0:1,V7@V8:7,V7@Buf9/bitstring>> when V7@V8 =/= 0 ->
{V7@V8,V7@Buf9};
<<_:V7@Pad6,1:1,0:1,V7@V9:14,V7@Buf10/bitstring>> when V7@V9 =/= 0 ->
{V7@V9,V7@Buf10}
end,
{V7@V3,V7@Buf4}
end,
<<V7@V11:V7@V0/bitstring-unit:1,V7@Buf12/bitstring>> = V7@Buf1,
{V7@V11,V7@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'FDD-Info',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_EARFCN'(Val) ->
if Val bsr 16 =:= 0 ->
[align|<<Val:16>>];
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_EARFCN(Bytes) ->
begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end.

'enc_DL-Forwarding'(Val) ->
if Val =:= 'dL-forwardingProposed' ->
<<0:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_DL-Forwarding'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@Buf2/bitstring>> ->
{'dL-forwardingProposed',V1@Buf2};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CyclicPrefixUL'(Val) ->
if Val =:= normal ->
<<0:1,0:1>>;
Val =:= extended ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CyclicPrefixUL(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> normal;
1 -> extended
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CyclicPrefixDL'(Val) ->
if Val =:= normal ->
<<0:1,0:1>>;
Val =:= extended ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CyclicPrefixDL(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> normal;
1 -> extended
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CriticalityDiagnostics-IE-List'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if Enc1@len@sub bsr 8 =:= 0 ->
[align,
Enc1@len@sub|['enc_CriticalityDiagnostics-IE-List_SEQOF'(Comp) || Comp <- Val]]
end.

'enc_CriticalityDiagnostics-IE-List_SEQOF'(Val) ->
[begin
Enc1@input = element(5, Val),
Enc3@input = element(2, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc3@input =:= reject ->
<<0:1,0:1,0:2>>;
Enc3@input =:= ignore ->
<<0:1,0:1,1:2>>;
Enc3@input =:= notify ->
<<0:1,0:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end;
true ->
if Enc3@input =:= reject ->
<<0:1,1:1,0:2>>;
Enc3@input =:= ignore ->
<<0:1,1:1,1:2>>;
Enc3@input =:= notify ->
<<0:1,1:1,2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end
end,
align,
begin
Enc5@input = element(3, Val),
if Enc5@input bsr 16 =:= 0 ->
<<Enc5@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end,
begin
Enc7@input = element(4, Val),
if Enc7@input =:= 'not-understood' ->
<<0:1,0:1>>;
Enc7@input =:= missing ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Enc9@input)
end
end].
'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components133(V1@Add4, V1@Buf1, []).


'dec_CriticalityDiagnostics-IE-List_SEQOF'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
<<V3@V0:2/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V3@V0,[reject,ignore,notify]}}}})
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
V4@Pad2 = bit_size(Bytes3) band 7,
<<_:V4@Pad2,V4@V0:2/unsigned-unit:8,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
{V5@V0,V5@Buf1} = case Bytes4 of
<<0:1,V5@V3:1/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> 'not-understood';
1 -> missing
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:6,0:1,V5@V10:7,V5@Buf11/bitstring>> when V5@V10 =/= 0 ->
{V5@V10,V5@Buf11};
<<_:6,1:1,0:1,V5@V11:14,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12}
end,
<<V5@V13:V5@V6/unit:8,V5@Buf14/bitstring>> = V5@Buf7,
{V5@V13,V5@Buf14}
end,
V5@Int15 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int15,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'CriticalityDiagnostics-IE-List_SEQOF',Term1,Term2,Term3,Term4},Bytes8}.



'dec_CriticalityDiagnostics-IE-List'(Bytes) ->
%% Length with constraint {1,256}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components134(V1@Add4, V1@Buf1, []).

'enc_CriticalityDiagnostics'(Val) ->
[begin
Enc1@input = element(2, Val),
Enc2@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,0:1,0:1>>;
true ->
<<0:1,0:1,1:1>>
end;
true ->
if Enc2@input =:= asn1_NOVALUE ->
<<0:1,1:1,0:1>>;
true ->
<<0:1,1:1,1:1>>
end
end
end,
begin
Enc3@input = element(4, Val),
Enc4@input = element(5, Val),
if Enc3@input =:= asn1_NOVALUE ->
if Enc4@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end;
true ->
if Enc4@input =:= asn1_NOVALUE ->
<<1:1,0:1>>;
true ->
<<1:1,1:1>>
end
end
end,
begin
Enc5@input = element(6, Val),
if Enc5@input =:= asn1_NOVALUE ->
<<0:1>>;
true ->
<<1:1>>
end
end,
begin
Enc7@input = element(2, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
Enc7@input bsr 8 =:= 0 ->
[align,
Enc7@input];
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end
end,
begin
Enc10@input = element(3, Val),
if Enc10@input =:= asn1_NOVALUE ->
[];
Enc10@input =:= 'initiating-message' ->
<<0:2>>;
Enc10@input =:= 'successful-outcome' ->
<<1:2>>;
Enc10@input =:= 'unsuccessful-outcome' ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc10@input}}})
end
end,
begin
Enc13@input = element(4, Val),
if Enc13@input =:= asn1_NOVALUE ->
[];
Enc13@input =:= reject ->
<<0:2>>;
Enc13@input =:= ignore ->
<<1:2>>;
Enc13@input =:= notify ->
<<2:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc13@input}}})
end
end,
begin
Enc16@input = element(5, Val),
if Enc16@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics-IE-List'(Enc16@input)
end
end|begin
Enc18@input = element(6, Val),
if Enc18@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CriticalityDiagnostics_iE-Extensions'(Enc18@input)
end
end].
'enc_CriticalityDiagnostics_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CriticalityDiagnostics_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components135(V1@Add4, V1@Buf1, []).



dec_CriticalityDiagnostics(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:5,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = case (Opt bsr 4) band 1 of
1 ->
begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:1/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes2}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = case (Opt bsr 3) band 1 of
1 ->
begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessful-outcome';
_ -> exit({error,{asn1,{decode_enumerated,{V4@V0,['initiating-message','successful-outcome','unsuccessful-outcome']}}}})
end,
{V4@Int2,V4@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = case (Opt bsr 2) band 1 of
1 ->
begin
<<V5@V0:2/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V0,[reject,ignore,notify]}}}})
end,
{V5@Int2,V5@Buf1}
end;
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% attribute number 4 with type CriticalityDiagnostics-IE-List
{Term4,Bytes6} = case (Opt bsr 1) band 1 of
1 ->
'dec_CriticalityDiagnostics-IE-List'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% attribute number 5 with type SEQUENCE OF
{Term5,Bytes7} = case Opt band 1 of
1 ->
'dec_CriticalityDiagnostics_iE-Extensions'(Bytes6);
0 ->
{asn1_NOVALUE,Bytes6}
end,

%% Extensions
{Extensions,Bytes8} = case Ext of
0 -> {<<>>,Bytes7};
1 ->
{V6@V0,V6@Buf1} = case Bytes7 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes9= skipextensions(Bytes8, 1, Extensions),
{{'CriticalityDiagnostics',Term1,Term2,Term3,Term4,Term5},Bytes9}.

'enc_COUNTvalue'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
if Enc3@input bsr 12 =:= 0 ->
<<Enc3@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input bsr 20 =:= 0 ->
begin
Enc5@input@bin = binary:encode_unsigned(Enc5@input),
Enc5@input@bin_size0 = byte_size(Enc5@input@bin),
Enc5@input@bin_size = Enc5@input@bin_size0 - 1,
[<<Enc5@input@bin_size:2,0:6>>|Enc5@input@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_COUNTvalue_iE-Extensions'(Enc7@input)
end
end].
'enc_COUNTvalue_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_COUNTvalue_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components136(V1@Add4, V1@Buf1, []).



dec_COUNTvalue(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:2/unsigned-unit:8,V3@Buf1/bitstring>> = Bytes2,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:2/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Add2 = V4@V0 + 1,
<<_:6,V4@V3:V4@Add2/unsigned-unit:8,V4@Buf4/bitstring>> = V4@Buf1,
{V4@V3,V4@Buf4}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_COUNTvalue_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'COUNTvalue',Term1,Term2,Term3},Bytes7}.

'enc_CellType'(Val) ->
[begin
Enc1@input = element(3, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= verysmall ->
<<0:1,0:2>>;
Enc3@input =:= small ->
<<0:1,1:2>>;
Enc3@input =:= medium ->
<<0:1,2:2>>;
Enc3@input =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(3, Val),
if Enc5@input =:= asn1_NOVALUE ->
[];
true ->
'enc_CellType_iE-Extensions'(Enc5@input)
end
end].
'enc_CellType_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_CellType_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_CellType_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_CellType_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_CellType_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components137(V1@Add4, V1@Buf1, []).



dec_CellType(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type ENUMERATED
{Term1,Bytes3} = begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:2/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end,

%% attribute number 2 with type SEQUENCE OF
{Term2,Bytes4} = case Opt band 1 of
1 ->
'dec_CellType_iE-Extensions'(Bytes3);
0 ->
{asn1_NOVALUE,Bytes3}
end,

%% Extensions
{Extensions,Bytes5} = case Ext of
0 -> {<<>>,Bytes4};
1 ->
{V4@V0,V4@Buf1} = case Bytes4 of
<<0:1,V4@V3:6,V4@Buf4/bitstring>> ->
V4@Add5 = V4@V3 + 1,
{V4@Add5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
V4@Pad6 = bit_size(V4@Buf2) band 7,
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<_:V4@Pad6,0:1,V4@V8:7,V4@Buf9/bitstring>> when V4@V8 =/= 0 ->
{V4@V8,V4@Buf9};
<<_:V4@Pad6,1:1,0:1,V4@V9:14,V4@Buf10/bitstring>> when V4@V9 =/= 0 ->
{V4@V9,V4@Buf10}
end,
{V4@V3,V4@Buf4}
end,
<<V4@V11:V4@V0/bitstring-unit:1,V4@Buf12/bitstring>> = V4@Buf1,
{V4@V11,V4@Buf12}
end,
Bytes6= skipextensions(Bytes5, 1, Extensions),
{{'CellType',Term1,Term2},Bytes6}.

'enc_Cell-Size'(Val) ->
if Val =:= verysmall ->
<<0:1,0:2>>;
Val =:= small ->
<<0:1,1:2>>;
Val =:= medium ->
<<0:1,2:2>>;
Val =:= large ->
<<0:1,3:2>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


'dec_Cell-Size'(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:2/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseTransport'(Val) ->
if Val =:= 'transport-resource-unavailable' ->
<<0:1,0:1>>;
Val =:= unspecified ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseTransport(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:1/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'transport-resource-unavailable';
1 -> unspecified
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseRadioNetwork'(Val) ->
if Val =:= 'handover-desirable-for-radio-reasons' ->
<<0:1,0:5>>;
Val =:= 'time-critical-handover' ->
<<0:1,1:5>>;
Val =:= 'resource-optimisation-handover' ->
<<0:1,2:5>>;
Val =:= 'reduce-load-in-serving-cell' ->
<<0:1,3:5>>;
Val =:= 'partial-handover' ->
<<0:1,4:5>>;
Val =:= 'unknown-new-eNB-UE-X2AP-ID' ->
<<0:1,5:5>>;
Val =:= 'unknown-old-eNB-UE-X2AP-ID' ->
<<0:1,6:5>>;
Val =:= 'unknown-pair-of-UE-X2AP-ID' ->
<<0:1,7:5>>;
Val =:= 'ho-target-not-allowed' ->
<<0:1,8:5>>;
Val =:= 'tx2relocoverall-expiry' ->
<<0:1,9:5>>;
Val =:= 'trelocprep-expiry' ->
<<0:1,10:5>>;
Val =:= 'cell-not-available' ->
<<0:1,11:5>>;
Val =:= 'no-radio-resources-available-in-target-cell' ->
<<0:1,12:5>>;
Val =:= 'invalid-MME-GroupID' ->
<<0:1,13:5>>;
Val =:= 'unknown-MME-Code' ->
<<0:1,14:5>>;
Val =:= 'encryption-and-or-integrity-protection-algorithms-not-supported' ->
<<0:1,15:5>>;
Val =:= reportCharacteristicsEmpty ->
<<0:1,16:5>>;
Val =:= noReportPeriodicity ->
<<0:1,17:5>>;
Val =:= existingMeasurementID ->
<<0:1,18:5>>;
Val =:= 'unknown-eNB-Measurement-ID' ->
<<0:1,19:5>>;
Val =:= 'measurement-temporarily-not-available' ->
<<0:1,20:5>>;
Val =:= unspecified ->
<<0:1,21:5>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseRadioNetwork(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:5/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'handover-desirable-for-radio-reasons';
1 -> 'time-critical-handover';
2 -> 'resource-optimisation-handover';
3 -> 'reduce-load-in-serving-cell';
4 -> 'partial-handover';
5 -> 'unknown-new-eNB-UE-X2AP-ID';
6 -> 'unknown-old-eNB-UE-X2AP-ID';
7 -> 'unknown-pair-of-UE-X2AP-ID';
8 -> 'ho-target-not-allowed';
9 -> 'tx2relocoverall-expiry';
10 -> 'trelocprep-expiry';
11 -> 'cell-not-available';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'invalid-MME-GroupID';
14 -> 'unknown-MME-Code';
15 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
16 -> reportCharacteristicsEmpty;
17 -> noReportPeriodicity;
18 -> existingMeasurementID;
19 -> 'unknown-eNB-Measurement-ID';
20 -> 'measurement-temporarily-not-available';
21 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['handover-desirable-for-radio-reasons','time-critical-handover','resource-optimisation-handover','reduce-load-in-serving-cell','partial-handover','unknown-new-eNB-UE-X2AP-ID','unknown-old-eNB-UE-X2AP-ID','unknown-pair-of-UE-X2AP-ID','ho-target-not-allowed','tx2relocoverall-expiry','trelocprep-expiry','cell-not-available','no-radio-resources-available-in-target-cell','invalid-MME-GroupID','unknown-MME-Code','encryption-and-or-integrity-protection-algorithms-not-supported',reportCharacteristicsEmpty,noReportPeriodicity,existingMeasurementID,'unknown-eNB-Measurement-ID','measurement-temporarily-not-available',unspecified]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseProtocol'(Val) ->
if Val =:= 'transfer-syntax-error' ->
<<0:1,0:3>>;
Val =:= 'abstract-syntax-error-reject' ->
<<0:1,1:3>>;
Val =:= 'abstract-syntax-error-ignore-and-notify' ->
<<0:1,2:3>>;
Val =:= 'message-not-compatible-with-receiver-state' ->
<<0:1,3:3>>;
Val =:= 'semantic-error' ->
<<0:1,4:3>>;
Val =:= unspecified ->
<<0:1,5:3>>;
Val =:= 'abstract-syntax-error-falsely-constructed-message' ->
<<0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseProtocol(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> unspecified;
6 -> 'abstract-syntax-error-falsely-constructed-message';
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['transfer-syntax-error','abstract-syntax-error-reject','abstract-syntax-error-ignore-and-notify','message-not-compatible-with-receiver-state','semantic-error',unspecified,'abstract-syntax-error-falsely-constructed-message']}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_CauseMisc'(Val) ->
if Val =:= 'control-processing-overload' ->
<<0:1,0:3>>;
Val =:= 'hardware-failure' ->
<<0:1,1:3>>;
Val =:= 'om-intervention' ->
<<0:1,2:3>>;
Val =:= 'not-enough-user-plane-processing-resources' ->
<<0:1,3:3>>;
Val =:= unspecified ->
<<0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_CauseMisc(Bytes) ->
begin
{V1@V0,V1@Buf1} = case Bytes of
<<0:1,V1@V3:3/unsigned-unit:1,V1@Buf4/bitstring>> ->
V1@Int5 = case V1@V3 of
0 -> 'control-processing-overload';
1 -> 'hardware-failure';
2 -> 'om-intervention';
3 -> 'not-enough-user-plane-processing-resources';
4 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V1@V3,['control-processing-overload','hardware-failure','om-intervention','not-enough-user-plane-processing-resources',unspecified]}}}})
end,
{V1@Int5,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<0:1,V1@V6:6,V1@Buf7/bitstring>> ->
{V1@V6,V1@Buf7};
<<1:1,V1@Buf5/bitstring>> ->
V1@Pad9 = bit_size(V1@Buf5) band 7,
{V1@V6,V1@Buf7} = case V1@Buf5 of
<<_:V1@Pad9,0:1,V1@V11:7,V1@Buf12/bitstring>> when V1@V11 =/= 0 ->
{V1@V11,V1@Buf12};
<<_:V1@Pad9,1:1,0:1,V1@V12:14,V1@Buf13/bitstring>> when V1@V12 =/= 0 ->
{V1@V12,V1@Buf13}
end,
<<V1@V14:V1@V6/unit:8,V1@Buf15/bitstring>> = V1@Buf7,
{V1@V14,V1@Buf15}
end,
V1@Int16 = case V1@V3 of
_ -> {asn1_enum,V1@V3}
end,
{V1@Int16,V1@Buf4}
end,
{V1@V0,V1@Buf1}
end.

'enc_Cause'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= radioNetwork ->
if ChoiceVal =:= 'handover-desirable-for-radio-reasons' ->
<<0:1,0:2,0:1,0:5>>;
ChoiceVal =:= 'time-critical-handover' ->
<<0:1,0:2,0:1,1:5>>;
ChoiceVal =:= 'resource-optimisation-handover' ->
<<0:1,0:2,0:1,2:5>>;
ChoiceVal =:= 'reduce-load-in-serving-cell' ->
<<0:1,0:2,0:1,3:5>>;
ChoiceVal =:= 'partial-handover' ->
<<0:1,0:2,0:1,4:5>>;
ChoiceVal =:= 'unknown-new-eNB-UE-X2AP-ID' ->
<<0:1,0:2,0:1,5:5>>;
ChoiceVal =:= 'unknown-old-eNB-UE-X2AP-ID' ->
<<0:1,0:2,0:1,6:5>>;
ChoiceVal =:= 'unknown-pair-of-UE-X2AP-ID' ->
<<0:1,0:2,0:1,7:5>>;
ChoiceVal =:= 'ho-target-not-allowed' ->
<<0:1,0:2,0:1,8:5>>;
ChoiceVal =:= 'tx2relocoverall-expiry' ->
<<0:1,0:2,0:1,9:5>>;
ChoiceVal =:= 'trelocprep-expiry' ->
<<0:1,0:2,0:1,10:5>>;
ChoiceVal =:= 'cell-not-available' ->
<<0:1,0:2,0:1,11:5>>;
ChoiceVal =:= 'no-radio-resources-available-in-target-cell' ->
<<0:1,0:2,0:1,12:5>>;
ChoiceVal =:= 'invalid-MME-GroupID' ->
<<0:1,0:2,0:1,13:5>>;
ChoiceVal =:= 'unknown-MME-Code' ->
<<0:1,0:2,0:1,14:5>>;
ChoiceVal =:= 'encryption-and-or-integrity-protection-algorithms-not-supported' ->
<<0:1,0:2,0:1,15:5>>;
ChoiceVal =:= reportCharacteristicsEmpty ->
<<0:1,0:2,0:1,16:5>>;
ChoiceVal =:= noReportPeriodicity ->
<<0:1,0:2,0:1,17:5>>;
ChoiceVal =:= existingMeasurementID ->
<<0:1,0:2,0:1,18:5>>;
ChoiceVal =:= 'unknown-eNB-Measurement-ID' ->
<<0:1,0:2,0:1,19:5>>;
ChoiceVal =:= 'measurement-temporarily-not-available' ->
<<0:1,0:2,0:1,20:5>>;
ChoiceVal =:= unspecified ->
<<0:1,0:2,0:1,21:5>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= transport ->
if ChoiceVal =:= 'transport-resource-unavailable' ->
<<0:1,1:2,0:1,0:1>>;
ChoiceVal =:= unspecified ->
<<0:1,1:2,0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= protocol ->
if ChoiceVal =:= 'transfer-syntax-error' ->
<<0:1,2:2,0:1,0:3>>;
ChoiceVal =:= 'abstract-syntax-error-reject' ->
<<0:1,2:2,0:1,1:3>>;
ChoiceVal =:= 'abstract-syntax-error-ignore-and-notify' ->
<<0:1,2:2,0:1,2:3>>;
ChoiceVal =:= 'message-not-compatible-with-receiver-state' ->
<<0:1,2:2,0:1,3:3>>;
ChoiceVal =:= 'semantic-error' ->
<<0:1,2:2,0:1,4:3>>;
ChoiceVal =:= unspecified ->
<<0:1,2:2,0:1,5:3>>;
ChoiceVal =:= 'abstract-syntax-error-falsely-constructed-message' ->
<<0:1,2:2,0:1,6:3>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end;
ChoiceTag =:= misc ->
if ChoiceVal =:= 'control-processing-overload' ->
<<0:1,3:2,0:1,0:3>>;
ChoiceVal =:= 'hardware-failure' ->
<<0:1,3:2,0:1,1:3>>;
ChoiceVal =:= 'om-intervention' ->
<<0:1,3:2,0:1,2:3>>;
ChoiceVal =:= 'not-enough-user-plane-processing-resources' ->
<<0:1,3:2,0:1,3:3>>;
ChoiceVal =:= unspecified ->
<<0:1,3:2,0:1,4:3>>;
true ->
exit({error,{asn1,{illegal_value,ChoiceVal}}})
end
end.


dec_Cause(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
begin
{V2@V0,V2@Buf1} = case Bytes2 of
<<0:1,V2@V3:5/unsigned-unit:1,V2@Buf4/bitstring>> ->
V2@Int5 = case V2@V3 of
0 -> 'handover-desirable-for-radio-reasons';
1 -> 'time-critical-handover';
2 -> 'resource-optimisation-handover';
3 -> 'reduce-load-in-serving-cell';
4 -> 'partial-handover';
5 -> 'unknown-new-eNB-UE-X2AP-ID';
6 -> 'unknown-old-eNB-UE-X2AP-ID';
7 -> 'unknown-pair-of-UE-X2AP-ID';
8 -> 'ho-target-not-allowed';
9 -> 'tx2relocoverall-expiry';
10 -> 'trelocprep-expiry';
11 -> 'cell-not-available';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'invalid-MME-GroupID';
14 -> 'unknown-MME-Code';
15 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
16 -> reportCharacteristicsEmpty;
17 -> noReportPeriodicity;
18 -> existingMeasurementID;
19 -> 'unknown-eNB-Measurement-ID';
20 -> 'measurement-temporarily-not-available';
21 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V3,['handover-desirable-for-radio-reasons','time-critical-handover','resource-optimisation-handover','reduce-load-in-serving-cell','partial-handover','unknown-new-eNB-UE-X2AP-ID','unknown-old-eNB-UE-X2AP-ID','unknown-pair-of-UE-X2AP-ID','ho-target-not-allowed','tx2relocoverall-expiry','trelocprep-expiry','cell-not-available','no-radio-resources-available-in-target-cell','invalid-MME-GroupID','unknown-MME-Code','encryption-and-or-integrity-protection-algorithms-not-supported',reportCharacteristicsEmpty,noReportPeriodicity,existingMeasurementID,'unknown-eNB-Measurement-ID','measurement-temporarily-not-available',unspecified]}}}})
end,
{V2@Int5,V2@Buf4};
<<1:1,V2@Buf2/bitstring>> ->
{V2@V3,V2@Buf4} = case V2@Buf2 of
<<0:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V6,V2@Buf7};
<<1:1,V2@Buf5/bitstring>> ->
V2@Pad9 = bit_size(V2@Buf5) band 7,
{V2@V6,V2@Buf7} = case V2@Buf5 of
<<_:V2@Pad9,0:1,V2@V11:7,V2@Buf12/bitstring>> when V2@V11 =/= 0 ->
{V2@V11,V2@Buf12};
<<_:V2@Pad9,1:1,0:1,V2@V12:14,V2@Buf13/bitstring>> when V2@V12 =/= 0 ->
{V2@V12,V2@Buf13}
end,
<<V2@V14:V2@V6/unit:8,V2@Buf15/bitstring>> = V2@Buf7,
{V2@V14,V2@Buf15}
end,
V2@Int16 = case V2@V3 of
_ -> {asn1_enum,V2@V3}
end,
{V2@Int16,V2@Buf4}
end,
{V2@V0,V2@Buf1}
end
end,
{{radioNetwork,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
begin
{V3@V0,V3@Buf1} = case Bytes2 of
<<0:1,V3@V3:1/unsigned-unit:1,V3@Buf4/bitstring>> ->
V3@Int5 = case V3@V3 of
0 -> 'transport-resource-unavailable';
1 -> unspecified
end,
{V3@Int5,V3@Buf4};
<<1:1,V3@Buf2/bitstring>> ->
{V3@V3,V3@Buf4} = case V3@Buf2 of
<<0:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V6,V3@Buf7};
<<1:1,V3@Buf5/bitstring>> ->
V3@Pad9 = bit_size(V3@Buf5) band 7,
{V3@V6,V3@Buf7} = case V3@Buf5 of
<<_:V3@Pad9,0:1,V3@V11:7,V3@Buf12/bitstring>> when V3@V11 =/= 0 ->
{V3@V11,V3@Buf12};
<<_:V3@Pad9,1:1,0:1,V3@V12:14,V3@Buf13/bitstring>> when V3@V12 =/= 0 ->
{V3@V12,V3@Buf13}
end,
<<V3@V14:V3@V6/unit:8,V3@Buf15/bitstring>> = V3@Buf7,
{V3@V14,V3@Buf15}
end,
V3@Int16 = case V3@V3 of
_ -> {asn1_enum,V3@V3}
end,
{V3@Int16,V3@Buf4}
end,
{V3@V0,V3@Buf1}
end
end,
{{transport,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
begin
{V4@V0,V4@Buf1} = case Bytes2 of
<<0:1,V4@V3:3/unsigned-unit:1,V4@Buf4/bitstring>> ->
V4@Int5 = case V4@V3 of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> unspecified;
6 -> 'abstract-syntax-error-falsely-constructed-message';
_ -> exit({error,{asn1,{decode_enumerated,{V4@V3,['transfer-syntax-error','abstract-syntax-error-reject','abstract-syntax-error-ignore-and-notify','message-not-compatible-with-receiver-state','semantic-error',unspecified,'abstract-syntax-error-falsely-constructed-message']}}}})
end,
{V4@Int5,V4@Buf4};
<<1:1,V4@Buf2/bitstring>> ->
{V4@V3,V4@Buf4} = case V4@Buf2 of
<<0:1,V4@V6:6,V4@Buf7/bitstring>> ->
{V4@V6,V4@Buf7};
<<1:1,V4@Buf5/bitstring>> ->
V4@Pad9 = bit_size(V4@Buf5) band 7,
{V4@V6,V4@Buf7} = case V4@Buf5 of
<<_:V4@Pad9,0:1,V4@V11:7,V4@Buf12/bitstring>> when V4@V11 =/= 0 ->
{V4@V11,V4@Buf12};
<<_:V4@Pad9,1:1,0:1,V4@V12:14,V4@Buf13/bitstring>> when V4@V12 =/= 0 ->
{V4@V12,V4@Buf13}
end,
<<V4@V14:V4@V6/unit:8,V4@Buf15/bitstring>> = V4@Buf7,
{V4@V14,V4@Buf15}
end,
V4@Int16 = case V4@V3 of
_ -> {asn1_enum,V4@V3}
end,
{V4@Int16,V4@Buf4}
end,
{V4@V0,V4@Buf1}
end
end,
{{protocol,Val},NewBytes};
3 ->
{Val,NewBytes} = begin
begin
{V5@V0,V5@Buf1} = case Bytes2 of
<<0:1,V5@V3:3/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> 'control-processing-overload';
1 -> 'hardware-failure';
2 -> 'om-intervention';
3 -> 'not-enough-user-plane-processing-resources';
4 -> unspecified;
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,['control-processing-overload','hardware-failure','om-intervention','not-enough-user-plane-processing-resources',unspecified]}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end
end,
{{misc,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'enc_BroadcastPLMNs-Item'(Val) ->
Enc2@len = length(Val),
Enc2@len@sub = Enc2@len - 1,
if 0 =< Enc2@len@sub, Enc2@len@sub < 6 ->
[<<Enc2@len@sub:3>>,
align|begin
_ = [if length(Comp) =:= 3 ->
[];
byte_size(Comp) =:= 3 ->
[]
end || Comp <- Val],
iolist_to_binary(Val)
end]
end.



'dec_BroadcastPLMNs-Item'(Bytes) ->
%% Length with constraint {1,6}
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
dec_components138(V1@Add2, V1@Buf1, []).

'enc_BitRate'(Val) ->
if 0 =< Val, Val < 10000000001 ->
begin
Val@bin = binary:encode_unsigned(Val),
Val@bin_size0 = byte_size(Val@bin),
Val@bin_size = Val@bin_size0 - 1,
[<<Val@bin_size:3>>,
align|Val@bin]
end;
true ->
exit({error,{asn1,{illegal_value,Val}}})
end.


dec_BitRate(Bytes) ->
begin
<<V1@V0:3/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes,
V1@Add2 = V1@V0 + 1,
V1@Pad5 = bit_size(V1@Buf1) band 7,
<<_:V1@Pad5,V1@V3:V1@Add2/unsigned-unit:8,V1@Buf4/bitstring>> = V1@Buf1,
{V1@V3,V1@Buf4}
end.

'enc_AllocationAndRetentionPriority'(Val) ->
[begin
Enc1@input = element(5, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
begin
Enc3@input = element(2, Val),
if Enc3@input =:= spare ->
<<0:4>>;
Enc3@input =:= highest ->
<<1:4>>;
Enc3@input =:= lowest ->
<<14:4>>;
Enc3@input =:= 'no-priority' ->
<<15:4>>;
Enc3@input bsr 4 =:= 0 ->
<<Enc3@input:4>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end,
begin
Enc5@input = element(3, Val),
Enc7@input = element(4, Val),
if Enc5@input =:= 'shall-not-trigger-pre-emption' ->
if Enc7@input =:= 'not-pre-emptable' ->
<<0:1,0:1>>;
Enc7@input =:= 'pre-emptable' ->
<<0:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end;
Enc5@input =:= 'may-trigger-pre-emption' ->
if Enc7@input =:= 'not-pre-emptable' ->
<<1:1,0:1>>;
Enc7@input =:= 'pre-emptable' ->
<<1:1,1:1>>;
true ->
exit({error,{asn1,{illegal_value,Enc7@input}}})
end;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc9@input = element(5, Val),
if Enc9@input =:= asn1_NOVALUE ->
[];
true ->
'enc_AllocationAndRetentionPriority_iE-Extensions'(Enc9@input)
end
end].
'enc_AllocationAndRetentionPriority_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_AllocationAndRetentionPriority_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components139(V1@Add4, V1@Buf1, []).



dec_AllocationAndRetentionPriority(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type INTEGER
{Term1,Bytes3} = begin
<<V3@V0:4/unsigned-unit:1,V3@Buf1/bitstring>> = Bytes2,
V3@Int2 = case V3@V0 of
0 -> spare;
1 -> highest;
14 -> lowest;
15 -> 'no-priority';
_ -> V3@V0
end,
{V3@Int2,V3@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes4} = begin
<<V4@V0:1/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
V4@Int2 = case V4@V0 of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption'
end,
{V4@Int2,V4@Buf1}
end,

%% attribute number 3 with type ENUMERATED
{Term3,Bytes5} = begin
<<V5@V0:1/unsigned-unit:1,V5@Buf1/bitstring>> = Bytes4,
V5@Int2 = case V5@V0 of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable'
end,
{V5@Int2,V5@Buf1}
end,

%% attribute number 4 with type SEQUENCE OF
{Term4,Bytes6} = case Opt band 1 of
1 ->
'dec_AllocationAndRetentionPriority_iE-Extensions'(Bytes5);
0 ->
{asn1_NOVALUE,Bytes5}
end,

%% Extensions
{Extensions,Bytes7} = case Ext of
0 -> {<<>>,Bytes6};
1 ->
{V6@V0,V6@Buf1} = case Bytes6 of
<<0:1,V6@V3:6,V6@Buf4/bitstring>> ->
V6@Add5 = V6@V3 + 1,
{V6@Add5,V6@Buf4};
<<1:1,V6@Buf2/bitstring>> ->
V6@Pad6 = bit_size(V6@Buf2) band 7,
{V6@V3,V6@Buf4} = case V6@Buf2 of
<<_:V6@Pad6,0:1,V6@V8:7,V6@Buf9/bitstring>> when V6@V8 =/= 0 ->
{V6@V8,V6@Buf9};
<<_:V6@Pad6,1:1,0:1,V6@V9:14,V6@Buf10/bitstring>> when V6@V9 =/= 0 ->
{V6@V9,V6@Buf10}
end,
{V6@V3,V6@Buf4}
end,
<<V6@V11:V6@V0/bitstring-unit:1,V6@Buf12/bitstring>> = V6@Buf1,
{V6@V11,V6@Buf12}
end,
Bytes8= skipextensions(Bytes7, 1, Extensions),
{{'AllocationAndRetentionPriority',Term1,Term2,Term3,Term4},Bytes8}.

'enc_AS-SecurityInformation'(Val) ->
[begin
Enc1@input = element(4, Val),
if Enc1@input =:= asn1_NOVALUE ->
<<0:1,0:1>>;
true ->
<<0:1,1:1>>
end
end,
align,
begin
Enc3@input = element(2, Val),
Enc4@bs = to_bitstring(Enc3@input, 256),
Enc4@bits = bit_size(Enc4@bs),
if Enc4@bits =:= 256 ->
Enc4@bs
end
end,
begin
Enc5@input = element(3, Val),
if Enc5@input bsr 3 =:= 0 ->
<<Enc5@input:3>>;
true ->
exit({error,{asn1,{illegal_value,Enc5@input}}})
end
end|begin
Enc7@input = element(4, Val),
if Enc7@input =:= asn1_NOVALUE ->
[];
true ->
'enc_AS-SecurityInformation_iE-Extensions'(Enc7@input)
end
end].
'enc_AS-SecurityInformation_iE-Extensions'(Val) ->
Enc1@len = length(Val),
Enc1@len@sub = Enc1@len - 1,
if 0 =< Enc1@len@sub, Enc1@len@sub < 65535 ->
[align,
<<Enc1@len@sub:16>>|['enc_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Comp) || Comp <- Val]]
end.

'enc_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Val) ->
Objid = element(2, Val),
[align,
begin
Enc1@input = Objid,
if Enc1@input bsr 16 =:= 0 ->
<<Enc1@input:16>>;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_Extension2(Enc5@input, Objid),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].

'dec_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type Extension
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_Extension3(Tmpterm1, Term1),
{{'ProtocolExtensionField',Term1,Term2,Term3},Bytes3}.


'dec_AS-SecurityInformation_iE-Extensions'(Bytes) ->
%% Length with constraint {1,65535}
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:2/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Add4 = V1@V0 + 1,
dec_components140(V1@Add4, V1@Buf1, []).



'dec_AS-SecurityInformation'(Bytes) ->
{Ext,Bytes1} = begin
<<V1@V0:1,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,
{Opt,Bytes2} = begin
<<V2@V0:1,V2@Buf1/bitstring>> = Bytes1,
{V2@V0,V2@Buf1}
end,

%% attribute number 1 with type BIT STRING
{Term1,Bytes3} = begin
V3@Pad2 = bit_size(Bytes2) band 7,
<<_:V3@Pad2,V3@V0:256/binary-unit:1,V3@Buf1/bitstring>> = Bytes2,
{V3@V4,V3@Buf5}  = {decode_compact_bit_string(V3@V0),V3@Buf1},
{V3@V4,V3@Buf5}
end,

%% attribute number 2 with type INTEGER
{Term2,Bytes4} = begin
<<V4@V0:3/unsigned-unit:1,V4@Buf1/bitstring>> = Bytes3,
{V4@V0,V4@Buf1}
end,

%% attribute number 3 with type SEQUENCE OF
{Term3,Bytes5} = case Opt band 1 of
1 ->
'dec_AS-SecurityInformation_iE-Extensions'(Bytes4);
0 ->
{asn1_NOVALUE,Bytes4}
end,

%% Extensions
{Extensions,Bytes6} = case Ext of
0 -> {<<>>,Bytes5};
1 ->
{V5@V0,V5@Buf1} = case Bytes5 of
<<0:1,V5@V3:6,V5@Buf4/bitstring>> ->
V5@Add5 = V5@V3 + 1,
{V5@Add5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
V5@Pad6 = bit_size(V5@Buf2) band 7,
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<_:V5@Pad6,0:1,V5@V8:7,V5@Buf9/bitstring>> when V5@V8 =/= 0 ->
{V5@V8,V5@Buf9};
<<_:V5@Pad6,1:1,0:1,V5@V9:14,V5@Buf10/bitstring>> when V5@V9 =/= 0 ->
{V5@V9,V5@Buf10}
end,
{V5@V3,V5@Buf4}
end,
<<V5@V11:V5@V0/bitstring-unit:1,V5@Buf12/bitstring>> = V5@Buf1,
{V5@V11,V5@Buf12}
end,
Bytes7= skipextensions(Bytes6, 1, Extensions),
{{'AS-SecurityInformation',Term1,Term2,Term3},Bytes7}.

'enc_UnsuccessfulOutcome'(Val) ->
ObjprocedureCode = element(2, Val),
[align,
begin
Enc1@input = ObjprocedureCode,
if Enc1@input bsr 8 =:= 0 ->
Enc1@input;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_UnsuccessfulOutcome141(Enc5@input, ObjprocedureCode),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_UnsuccessfulOutcome(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type UnsuccessfulOutcome
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_UnsuccessfulOutcome142(Tmpterm1, Term1),
{{'UnsuccessfulOutcome',Term1,Term2,Term3},Bytes3}.

'enc_SuccessfulOutcome'(Val) ->
ObjprocedureCode = element(2, Val),
[align,
begin
Enc1@input = ObjprocedureCode,
if Enc1@input bsr 8 =:= 0 ->
Enc1@input;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_SuccessfulOutcome143(Enc5@input, ObjprocedureCode),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_SuccessfulOutcome(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type SuccessfulOutcome
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_SuccessfulOutcome144(Tmpterm1, Term1),
{{'SuccessfulOutcome',Term1,Term2,Term3},Bytes3}.

'enc_InitiatingMessage'(Val) ->
ObjprocedureCode = element(2, Val),
[align,
begin
Enc1@input = ObjprocedureCode,
if Enc1@input bsr 8 =:= 0 ->
Enc1@input;
true ->
exit({error,{asn1,{illegal_value,Enc1@input}}})
end
end,
begin
Enc3@input = element(3, Val),
if Enc3@input =:= reject ->
<<0:2,0:6>>;
Enc3@input =:= ignore ->
<<1:2,0:6>>;
Enc3@input =:= notify ->
<<2:2,0:6>>;
true ->
exit({error,{asn1,{illegal_value,Enc3@input}}})
end
end|begin
Enc5@input = element(4, Val),
Enc6@output = enc_os_InitiatingMessage145(Enc5@input, ObjprocedureCode),
Enc7@bin = complete(Enc6@output),
Enc7@len = byte_size(Enc7@bin),
if Enc7@len < 128 ->
[Enc7@len|Enc7@bin];
Enc7@len < 16384 ->
[<<2:2,Enc7@len:14>>|Enc7@bin];
true ->
encode_fragmented(Enc7@bin, 8)
end
end].


dec_InitiatingMessage(Bytes) ->

%% attribute number 1 with type INTEGER
{Term1,Bytes1} = begin
V1@Pad2 = bit_size(Bytes) band 7,
<<_:V1@Pad2,V1@V0:1/unsigned-unit:8,V1@Buf1/bitstring>> = Bytes,
{V1@V0,V1@Buf1}
end,

%% attribute number 2 with type ENUMERATED
{Term2,Bytes2} = begin
<<V2@V0:2/unsigned-unit:1,V2@Buf1/bitstring>> = Bytes1,
V2@Int2 = case V2@V0 of
0 -> reject;
1 -> ignore;
2 -> notify;
_ -> exit({error,{asn1,{decode_enumerated,{V2@V0,[reject,ignore,notify]}}}})
end,
{V2@Int2,V2@Buf1}
end,

%% attribute number 3 with type InitiatingMessage
{Tmpterm1, Bytes3} = begin
V3@Pad3 = bit_size(Bytes2) band 7,
{V3@V0,V3@Buf1} = case Bytes2 of
<<_:V3@Pad3,0:1,V3@V5:7,V3@V7:V3@V5/binary-unit:8,V3@Buf8/bitstring>> ->
{V3@V7,V3@Buf8};
<<_:V3@Pad3,1:1,0:1,V3@V6:14,V3@V8:V3@V6/binary-unit:8,V3@Buf9/bitstring>> ->
{V3@V8,V3@Buf9};
<<_:V3@Pad3,1:1,1:1,V3@V6:6,V3@Buf7/bitstring>> ->
{V3@V8,V3@Buf9}  = decode_fragmented(V3@V6, V3@Buf7, 8),
{V3@V8,V3@Buf9}
end,
{V3@V0,V3@Buf1}
end,
Term3 = dec_os_InitiatingMessage146(Tmpterm1, Term1),
{{'InitiatingMessage',Term1,Term2,Term3},Bytes3}.

'enc_X2AP-PDU'(Val) ->
{ChoiceTag,ChoiceVal} = Val,
if ChoiceTag =:= initiatingMessage ->
[<<0:1,0:2>>|enc_InitiatingMessage(ChoiceVal)];
ChoiceTag =:= successfulOutcome ->
[<<0:1,1:2>>|enc_SuccessfulOutcome(ChoiceVal)];
ChoiceTag =:= unsuccessfulOutcome ->
[<<0:1,2:2>>|enc_UnsuccessfulOutcome(ChoiceVal)]
end.


'dec_X2AP-PDU'(Bytes) ->
case Bytes of
<<0:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
<<V1@V0:2/unsigned-unit:1,V1@Buf1/bitstring>> = Bytes1,
{V1@V0,V1@Buf1}
end,
case Choice of
0 ->
{Val,NewBytes} = begin
dec_InitiatingMessage(Bytes2)
end,
{{initiatingMessage,Val},NewBytes};
1 ->
{Val,NewBytes} = begin
dec_SuccessfulOutcome(Bytes2)
end,
{{successfulOutcome,Val},NewBytes};
2 ->
{Val,NewBytes} = begin
dec_UnsuccessfulOutcome(Bytes2)
end,
{{unsuccessfulOutcome,Val},NewBytes}
end;

<<1:1,Bytes1/bitstring>> ->
{Choice,Bytes2} = 
begin
{V1@V0,V1@Buf1} = case Bytes1 of
<<0:1,V1@V3:6,V1@Buf4/bitstring>> ->
{V1@V3,V1@Buf4};
<<1:1,V1@Buf2/bitstring>> ->
V1@Pad6 = bit_size(V1@Buf2) band 7,
{V1@V3,V1@Buf4} = case V1@Buf2 of
<<_:V1@Pad6,0:1,V1@V8:7,V1@Buf9/bitstring>> when V1@V8 =/= 0 ->
{V1@V8,V1@Buf9};
<<_:V1@Pad6,1:1,0:1,V1@V9:14,V1@Buf10/bitstring>> when V1@V9 =/= 0 ->
{V1@V9,V1@Buf10}
end,
<<V1@V11:V1@V3/unit:8,V1@Buf12/bitstring>> = V1@Buf4,
{V1@V11,V1@Buf12}
end,
{V1@V0,V1@Buf1}
end,
begin
V2@Pad3 = bit_size(Bytes2) band 7,
{V2@V0,V2@Buf1} = case Bytes2 of
<<_:V2@Pad3,0:1,V2@V5:7,V2@V7:V2@V5/binary-unit:8,V2@Buf8/bitstring>> ->
{V2@V7,V2@Buf8};
<<_:V2@Pad3,1:1,0:1,V2@V6:14,V2@V8:V2@V6/binary-unit:8,V2@Buf9/bitstring>> ->
{V2@V8,V2@Buf9};
<<_:V2@Pad3,1:1,1:1,V2@V6:6,V2@Buf7/bitstring>> ->
{V2@V8,V2@Buf9}  = decode_fragmented(V2@V6, V2@Buf7, 8),
{V2@V8,V2@Buf9}
end
end,
case Choice of
_ ->
{{asn1_ExtAlt,V2@V0},V2@Buf1}
end
end.
'id-ENB2-Measurement-ID'() ->
40.

'id-ENB1-Measurement-ID'() ->
39.

'id-ReportCharacteristics'() ->
38.

'id-Measurement-ID'() ->
37.

'id-SRVCCOperationPossible'() ->
36.

'id-GUGroupIDToDeleteList'() ->
35.

'id-GUGroupIDToAddList'() ->
34.

'id-CellMeasurementResult-Item'() ->
33.

'id-CellMeasurementResult'() ->
32.

'id-CellToReport-Item'() ->
31.

'id-ReportingPeriodicity'() ->
30.

'id-CellToReport'() ->
29.

'id-Registration-Request'() ->
28.

'id-ServedCellsToDelete'() ->
27.

'id-ServedCellsToModify'() ->
26.

'id-ServedCellsToAdd'() ->
25.

'id-GUGroupIDList'() ->
24.

'id-GUMMEI-ID'() ->
23.

'id-TimeToWait'() ->
22.

'id-GlobalENB-ID'() ->
21.

'id-ServedCells'() ->
20.

'id-E-RABs-SubjectToStatusTransfer-Item'() ->
19.

'id-E-RABs-SubjectToStatusTransfer-List'() ->
18.

'id-CriticalityDiagnostics'() ->
17.

'id-UE-X2AP-ID'() ->
16.

'id-UE-HistoryInformation'() ->
15.

'id-UE-ContextInformation'() ->
14.

'id-TraceActivation'() ->
13.

'id-TargeteNBtoSource-eNBTransparentContainer'() ->
12.

'id-TargetCell-ID'() ->
11.

'id-Old-eNB-UE-X2AP-ID'() ->
10.

'id-New-eNB-UE-X2AP-ID'() ->
9.

'id-CellInformation-Item'() ->
7.

'id-CellInformation'() ->
6.

'id-Cause'() ->
5.

'id-E-RABs-ToBeSetup-Item'() ->
4.

'id-E-RABs-NotAdmitted-List'() ->
3.

'id-E-RAB-Item'() ->
2.

'id-E-RABs-Admitted-List'() ->
1.

'id-E-RABs-Admitted-Item'() ->
0.

'maxnoofCells'() ->
16.

'maxPools'() ->
16.

'maxnoofPRBs'() ->
110.

'maxnoofNeighbours'() ->
512.

'maxnoofBPLMNs'() ->
6.

'maxnoofForbTACs'() ->
4096.

'maxnoofForbLACs'() ->
4096.

'maxnoofEPLMNsPlusOne'() ->
16.

'maxnoofEPLMNs'() ->
15.

'maxnoofPDCP-SN'() ->
16.

'maxNrOfErrors'() ->
256.

'maxnoofBearers'() ->
256.

'maxCellineNB'() ->
256.

'maxInterfaces'() ->
16.

'maxEARFCN'() ->
65535.

'id-privateMessage'() ->
11.

'id-resourceStatusReporting'() ->
10.

'id-resourceStatusReportingInitiation'() ->
9.

'id-eNBConfigurationUpdate'() ->
8.

'id-reset'() ->
7.

'id-x2Setup'() ->
6.

'id-uEContextRelease'() ->
5.

'id-snStatusTransfer'() ->
4.

'id-errorIndication'() ->
3.

'id-loadIndication'() ->
2.

'id-handoverCancel'() ->
1.

'id-handoverPreparation'() ->
0.

'maxProtocolIEs'() ->
65535.

'maxProtocolExtensions'() ->
65535.

'maxPrivateIEs'() ->
65535.


%%%
%%% Run-time functions.
%%%

dec_components1(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components1(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Bytes),
dec_components1(Num-1, Remain, [Term|Acc]).

dec_components10(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components10(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components10(Num-1, Remain, [Term|Acc]).

dec_components100(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components100(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components100(Num-1, Remain, [Term|Acc]).

dec_components101(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components101(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components101(Num-1, Remain, [Term|Acc]).

dec_components102(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components102(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedCells_SEQOF'(Bytes),
dec_components102(Num-1, Remain, [Term|Acc]).

dec_components103(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components103(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components103(Num-1, Remain, [Term|Acc]).

dec_components104(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components104(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components104(Num-1, Remain, [Term|Acc]).

dec_components105(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components105(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components105(Num-1, Remain, [Term|Acc]).

dec_components106(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components106(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components106(Num-1, Remain, [Term|Acc]).

dec_components107(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components107(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_Neighbour-Information_SEQOF'(Bytes),
dec_components107(Num-1, Remain, [Term|Acc]).

dec_components108(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components108(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components108(Num-1, Remain, [Term|Acc]).

dec_components109(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components109(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components109(Num-1, Remain, [Term|Acc]).

dec_components110(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components110(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components110(Num-1, Remain, [Term|Acc]).

dec_components111(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components111(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components111(Num-1, Remain, [Term|Acc]).

dec_components112(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components112(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components112(Num-1, Remain, [Term|Acc]).

dec_components113(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components113(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components113(Num-1, Remain, [Term|Acc]).

dec_components114(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components114(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GU-Group-ID'(Bytes),
dec_components114(Num-1, Remain, [Term|Acc]).

dec_components115(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components115(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components115(Num-1, Remain, [Term|Acc]).

dec_components116(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components116(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components116(Num-1, Remain, [Term|Acc]).

dec_components117(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components117(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components117(Num-1, Remain, [Term|Acc]).

dec_components118(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components118(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V1@V0:2/binary-unit:8,V1@Buf1/bitstring>> = Bytes,
V1@Conv2 = binary_to_list(V1@V0),
{V1@Conv2,V1@Buf1}
end,
dec_components118(Num-1, Remain, [Term|Acc]).

dec_components119(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components119(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components119(Num-1, Remain, [Term|Acc]).

dec_components120(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components120(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenLAs-Item'(Bytes),
dec_components120(Num-1, Remain, [Term|Acc]).

dec_components121(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components121(Num, Bytes, Acc) ->
{Term,Remain} = begin
<<V2@V0:2/binary-unit:8,V2@Buf1/bitstring>> = Bytes,
V2@Conv2 = binary_to_list(V2@V0),
{V2@Conv2,V2@Buf1}
end,
dec_components121(Num-1, Remain, [Term|Acc]).

dec_components122(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components122(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components122(Num-1, Remain, [Term|Acc]).

dec_components123(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components123(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ForbiddenTAs-Item'(Bytes),
dec_components123(Num-1, Remain, [Term|Acc]).

dec_components124(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components124(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components124(Num-1, Remain, [Term|Acc]).

dec_components127(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components127(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RAB-List_ProtocolIE-Field'(Bytes),
dec_components127(Num-1, Remain, [Term|Acc]).

dec_components128(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components128(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components128(Num-1, Remain, [Term|Acc]).

dec_components129(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components129(Num, Bytes, Acc) ->
{Term,Remain} = begin
V3@Pad2 = bit_size(Bytes) band 7,
<<_:V3@Pad2,V3@V0:3/binary-unit:8,V3@Buf1/bitstring>> = Bytes,
V3@Conv4 = binary_to_list(V3@V0),
{V3@Conv4,V3@Buf1}
end,
dec_components129(Num-1, Remain, [Term|Acc]).

dec_components13(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components13(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components13(Num-1, Remain, [Term|Acc]).

dec_components130(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components130(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ECGI_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components130(Num-1, Remain, [Term|Acc]).

dec_components131(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components131(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TDD-Info_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components131(Num-1, Remain, [Term|Acc]).

dec_components132(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components132(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_FDD-Info_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components132(Num-1, Remain, [Term|Acc]).

dec_components133(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components133(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components133(Num-1, Remain, [Term|Acc]).

dec_components134(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components134(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics-IE-List_SEQOF'(Bytes),
dec_components134(Num-1, Remain, [Term|Acc]).

dec_components135(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components135(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components135(Num-1, Remain, [Term|Acc]).

dec_components136(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components136(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components136(Num-1, Remain, [Term|Acc]).

dec_components137(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components137(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellType_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components137(Num-1, Remain, [Term|Acc]).

dec_components138(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components138(Num, Bytes, Acc) ->
{Term,Remain} = begin
V4@Pad2 = bit_size(Bytes) band 7,
<<_:V4@Pad2,V4@V0:3/binary-unit:8,V4@Buf1/bitstring>> = Bytes,
V4@Conv4 = binary_to_list(V4@V0),
{V4@Conv4,V4@Buf1}
end,
dec_components138(Num-1, Remain, [Term|Acc]).

dec_components139(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components139(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components139(Num-1, Remain, [Term|Acc]).

dec_components140(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components140(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components140(Num-1, Remain, [Term|Acc]).

dec_components16(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components16(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components16(Num-1, Remain, [Term|Acc]).

dec_components17(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components17(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components17(Num-1, Remain, [Term|Acc]).

dec_components20(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components20(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellToReport-List_ProtocolIE-Field'(Bytes),
dec_components20(Num-1, Remain, [Term|Acc]).

dec_components23(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components23(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components23(Num-1, Remain, [Term|Acc]).

dec_components26(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components26(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components26(Num-1, Remain, [Term|Acc]).

dec_components29(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components29(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components29(Num-1, Remain, [Term|Acc]).

dec_components30(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components30(Num, Bytes, Acc) ->
{Term,Remain} = dec_ECGI(Bytes),
dec_components30(Num-1, Remain, [Term|Acc]).

dec_components31(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components31(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components31(Num-1, Remain, [Term|Acc]).

dec_components32(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components32(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ServedCellsToModify-Item'(Bytes),
dec_components32(Num-1, Remain, [Term|Acc]).

dec_components35(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components35(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components35(Num-1, Remain, [Term|Acc]).

dec_components36(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components36(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components36(Num-1, Remain, [Term|Acc]).

dec_components39(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components39(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellInformation-List_ProtocolIE-Field'(Bytes),
dec_components39(Num-1, Remain, [Term|Acc]).

dec_components4(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components4(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components4(Num-1, Remain, [Term|Acc]).

dec_components42(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components42(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LoadInformation_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components42(Num-1, Remain, [Term|Acc]).

dec_components45(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components45(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components45(Num-1, Remain, [Term|Acc]).

dec_components48(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components48(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components48(Num-1, Remain, [Term|Acc]).

dec_components51(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components51(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components51(Num-1, Remain, [Term|Acc]).

dec_components54(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components54(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResetResponse_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components54(Num-1, Remain, [Term|Acc]).

dec_components57(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components57(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ResetRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components57(Num-1, Remain, [Term|Acc]).

dec_components60(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components60(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components60(Num-1, Remain, [Term|Acc]).

dec_components63(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components63(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components63(Num-1, Remain, [Term|Acc]).

dec_components66(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components66(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEContextRelease_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components66(Num-1, Remain, [Term|Acc]).

dec_components67(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components67(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components67(Num-1, Remain, [Term|Acc]).

dec_components7(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components7(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_CellMeasurementResult-List_ProtocolIE-Field'(Bytes),
dec_components7(Num-1, Remain, [Term|Acc]).

dec_components70(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components70(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Bytes),
dec_components70(Num-1, Remain, [Term|Acc]).

dec_components73(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components73(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components73(Num-1, Remain, [Term|Acc]).

dec_components76(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components76(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components76(Num-1, Remain, [Term|Acc]).

dec_components77(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components77(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components77(Num-1, Remain, [Term|Acc]).

dec_components80(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components80(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-Admitted-List_ProtocolIE-Field'(Bytes),
dec_components80(Num-1, Remain, [Term|Acc]).

dec_components83(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components83(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components83(Num-1, Remain, [Term|Acc]).

dec_components84(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components84(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components84(Num-1, Remain, [Term|Acc]).

dec_components87(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components87(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Bytes),
dec_components87(Num-1, Remain, [Term|Acc]).

dec_components88(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components88(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components88(Num-1, Remain, [Term|Acc]).

dec_components91(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components91(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Bytes),
dec_components91(Num-1, Remain, [Term|Acc]).

dec_components92(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components92(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components92(Num-1, Remain, [Term|Acc]).

dec_components93(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components93(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UL-HighInterferenceIndicationInfo-Item'(Bytes),
dec_components93(Num-1, Remain, [Term|Acc]).

dec_components94(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components94(Num, Bytes, Acc) ->
{Term,Remain} = begin
{V5@V0,V5@Buf1} = case Bytes of
<<0:1,V5@V3:2/unsigned-unit:1,V5@Buf4/bitstring>> ->
V5@Int5 = case V5@V3 of
0 -> 'high-interference';
1 -> 'medium-interference';
2 -> 'low-interference';
_ -> exit({error,{asn1,{decode_enumerated,{V5@V3,['high-interference','medium-interference','low-interference']}}}})
end,
{V5@Int5,V5@Buf4};
<<1:1,V5@Buf2/bitstring>> ->
{V5@V3,V5@Buf4} = case V5@Buf2 of
<<0:1,V5@V6:6,V5@Buf7/bitstring>> ->
{V5@V6,V5@Buf7};
<<1:1,V5@Buf5/bitstring>> ->
V5@Pad9 = bit_size(V5@Buf5) band 7,
{V5@V6,V5@Buf7} = case V5@Buf5 of
<<_:V5@Pad9,0:1,V5@V11:7,V5@Buf12/bitstring>> when V5@V11 =/= 0 ->
{V5@V11,V5@Buf12};
<<_:V5@Pad9,1:1,0:1,V5@V12:14,V5@Buf13/bitstring>> when V5@V12 =/= 0 ->
{V5@V12,V5@Buf13}
end,
<<V5@V14:V5@V6/unit:8,V5@Buf15/bitstring>> = V5@Buf7,
{V5@V14,V5@Buf15}
end,
V5@Int16 = case V5@V3 of
_ -> {asn1_enum,V5@V3}
end,
{V5@Int16,V5@Buf4}
end,
{V5@V0,V5@Buf1}
end,
dec_components94(Num-1, Remain, [Term|Acc]).

dec_components95(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components95(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components95(Num-1, Remain, [Term|Acc]).

dec_components96(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components96(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components96(Num-1, Remain, [Term|Acc]).

dec_components97(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components97(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_LastVisitedCell-Item'(Bytes),
dec_components97(Num-1, Remain, [Term|Acc]).

dec_components98(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components98(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components98(Num-1, Remain, [Term|Acc]).

dec_components99(0, Bytes, Acc) ->
{lists:reverse(Acc),Bytes};
dec_components99(Num, Bytes, Acc) ->
{Term,Remain} = 'dec_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Bytes),
dec_components99(Num-1, Remain, [Term|Acc]).

dec_os_Extension3(Bytes, Id) ->
Bytes.


dec_os_InitiatingMessage146(Bytes, 0) ->
{Term,_} = dec_HandoverRequest(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 1) ->
{Term,_} = dec_HandoverCancel(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 2) ->
{Term,_} = dec_LoadInformation(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 3) ->
{Term,_} = dec_ErrorIndication(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 4) ->
{Term,_} = dec_SNStatusTransfer(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 5) ->
{Term,_} = dec_UEContextRelease(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 6) ->
{Term,_} = dec_X2SetupRequest(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 7) ->
{Term,_} = dec_ResetRequest(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 8) ->
{Term,_} = dec_ENBConfigurationUpdate(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 9) ->
{Term,_} = dec_ResourceStatusRequest(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 10) ->
{Term,_} = dec_ResourceStatusUpdate(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, 11) ->
{Term,_} = dec_PrivateMessage(Bytes),
Term;
dec_os_InitiatingMessage146(Bytes, Id) ->
Bytes.


dec_os_SuccessfulOutcome144(Bytes, 0) ->
{Term,_} = dec_HandoverRequestAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome144(Bytes, 6) ->
{Term,_} = dec_X2SetupResponse(Bytes),
Term;
dec_os_SuccessfulOutcome144(Bytes, 7) ->
{Term,_} = dec_ResetResponse(Bytes),
Term;
dec_os_SuccessfulOutcome144(Bytes, 8) ->
{Term,_} = dec_ENBConfigurationUpdateAcknowledge(Bytes),
Term;
dec_os_SuccessfulOutcome144(Bytes, 9) ->
{Term,_} = dec_ResourceStatusResponse(Bytes),
Term;
dec_os_SuccessfulOutcome144(Bytes, Id) ->
Bytes.


dec_os_UnsuccessfulOutcome142(Bytes, 0) ->
{Term,_} = dec_HandoverPreparationFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome142(Bytes, 6) ->
{Term,_} = dec_X2SetupFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome142(Bytes, 8) ->
{Term,_} = dec_ENBConfigurationUpdateFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome142(Bytes, 9) ->
{Term,_} = dec_ResourceStatusFailure(Bytes),
Term;
dec_os_UnsuccessfulOutcome142(Bytes, Id) ->
Bytes.


dec_os_Value12(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value12(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value12(Bytes, 39) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value12(Bytes, 40) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value12(Bytes, Id) ->
Bytes.


dec_os_Value126(Bytes, 2) ->
{Term,_} = 'dec_E-RAB-Item'(Bytes),
Term;
dec_os_Value126(Bytes, Id) ->
Bytes.


dec_os_Value15(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value15(Bytes, 39) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value15(Bytes, 40) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value15(Bytes, Id) ->
Bytes.


dec_os_Value19(Bytes, 31) ->
{Term,_} = 'dec_CellToReport-Item'(Bytes),
Term;
dec_os_Value19(Bytes, Id) ->
exit({'Type not compatible with table constraint',{{component,'Value'},{value,Bytes},{unique_name_and_value,id,Id}}}).


dec_os_Value22(Bytes, 28) ->
{Term,_} = 'dec_Registration-Request'(Bytes),
Term;
dec_os_Value22(Bytes, 29) ->
{Term,_} = 'dec_CellToReport-List'(Bytes),
Term;
dec_os_Value22(Bytes, 30) ->
{Term,_} = dec_ReportingPeriodicity(Bytes),
Term;
dec_os_Value22(Bytes, 38) ->
{Term,_} = dec_ReportCharacteristics(Bytes),
Term;
dec_os_Value22(Bytes, 39) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value22(Bytes, 40) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value22(Bytes, Id) ->
Bytes.


dec_os_Value25(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value25(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value25(Bytes, 22) ->
{Term,_} = dec_TimeToWait(Bytes),
Term;
dec_os_Value25(Bytes, Id) ->
Bytes.


dec_os_Value28(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value28(Bytes, Id) ->
Bytes.


dec_os_Value34(Bytes, 25) ->
{Term,_} = dec_ServedCells(Bytes),
Term;
dec_os_Value34(Bytes, 26) ->
{Term,_} = dec_ServedCellsToModify(Bytes),
Term;
dec_os_Value34(Bytes, 27) ->
{Term,_} = 'dec_Old-ECGIs'(Bytes),
Term;
dec_os_Value34(Bytes, 34) ->
{Term,_} = dec_GUGroupIDList(Bytes),
Term;
dec_os_Value34(Bytes, 35) ->
{Term,_} = dec_GUGroupIDList(Bytes),
Term;
dec_os_Value34(Bytes, Id) ->
Bytes.


dec_os_Value38(Bytes, 7) ->
{Term,_} = 'dec_CellInformation-Item'(Bytes),
Term;
dec_os_Value38(Bytes, Id) ->
exit({'Type not compatible with table constraint',{{component,'Value'},{value,Bytes},{unique_name_and_value,id,Id}}}).


dec_os_Value41(Bytes, 6) ->
{Term,_} = 'dec_CellInformation-List'(Bytes),
Term;
dec_os_Value41(Bytes, Id) ->
Bytes.


dec_os_Value44(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value44(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value44(Bytes, 22) ->
{Term,_} = dec_TimeToWait(Bytes),
Term;
dec_os_Value44(Bytes, Id) ->
Bytes.


dec_os_Value47(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value47(Bytes, 20) ->
{Term,_} = dec_ServedCells(Bytes),
Term;
dec_os_Value47(Bytes, 21) ->
{Term,_} = 'dec_GlobalENB-ID'(Bytes),
Term;
dec_os_Value47(Bytes, 24) ->
{Term,_} = dec_GUGroupIDList(Bytes),
Term;
dec_os_Value47(Bytes, Id) ->
Bytes.


dec_os_Value50(Bytes, 20) ->
{Term,_} = dec_ServedCells(Bytes),
Term;
dec_os_Value50(Bytes, 21) ->
{Term,_} = 'dec_GlobalENB-ID'(Bytes),
Term;
dec_os_Value50(Bytes, 24) ->
{Term,_} = dec_GUGroupIDList(Bytes),
Term;
dec_os_Value50(Bytes, Id) ->
Bytes.


dec_os_Value53(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value53(Bytes, Id) ->
Bytes.


dec_os_Value56(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value56(Bytes, Id) ->
Bytes.


dec_os_Value59(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value59(Bytes, 9) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value59(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value59(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value59(Bytes, Id) ->
Bytes.


dec_os_Value6(Bytes, 33) ->
{Term,_} = 'dec_CellMeasurementResult-Item'(Bytes),
Term;
dec_os_Value6(Bytes, Id) ->
exit({'Type not compatible with table constraint',{{component,'Value'},{value,Bytes},{unique_name_and_value,id,Id}}}).


dec_os_Value62(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value62(Bytes, 9) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value62(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value62(Bytes, Id) ->
Bytes.


dec_os_Value65(Bytes, 9) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value65(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value65(Bytes, Id) ->
Bytes.


dec_os_Value69(Bytes, 19) ->
{Term,_} = 'dec_E-RABs-SubjectToStatusTransfer-Item'(Bytes),
Term;
dec_os_Value69(Bytes, Id) ->
exit({'Type not compatible with table constraint',{{component,'Value'},{value,Bytes},{unique_name_and_value,id,Id}}}).


dec_os_Value72(Bytes, 9) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value72(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value72(Bytes, 18) ->
{Term,_} = 'dec_E-RABs-SubjectToStatusTransfer-List'(Bytes),
Term;
dec_os_Value72(Bytes, Id) ->
Bytes.


dec_os_Value75(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value75(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value75(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value75(Bytes, Id) ->
Bytes.


dec_os_Value79(Bytes, 0) ->
{Term,_} = 'dec_E-RABs-Admitted-Item'(Bytes),
Term;
dec_os_Value79(Bytes, Id) ->
exit({'Type not compatible with table constraint',{{component,'Value'},{value,Bytes},{unique_name_and_value,id,Id}}}).


dec_os_Value82(Bytes, 1) ->
{Term,_} = 'dec_E-RABs-Admitted-List'(Bytes),
Term;
dec_os_Value82(Bytes, 3) ->
{Term,_} = 'dec_E-RAB-List'(Bytes),
Term;
dec_os_Value82(Bytes, 9) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value82(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value82(Bytes, 12) ->
{Term,_} = 'dec_TargeteNBtoSource-eNBTransparentContainer'(Bytes),
Term;
dec_os_Value82(Bytes, 17) ->
{Term,_} = dec_CriticalityDiagnostics(Bytes),
Term;
dec_os_Value82(Bytes, Id) ->
Bytes.


dec_os_Value86(Bytes, 4) ->
{Term,_} = 'dec_E-RABs-ToBeSetup-Item'(Bytes),
Term;
dec_os_Value86(Bytes, Id) ->
Bytes.


dec_os_Value9(Bytes, 32) ->
{Term,_} = 'dec_CellMeasurementResult-List'(Bytes),
Term;
dec_os_Value9(Bytes, 39) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value9(Bytes, 40) ->
{Term,_} = 'dec_Measurement-ID'(Bytes),
Term;
dec_os_Value9(Bytes, Id) ->
Bytes.


dec_os_Value90(Bytes, 5) ->
{Term,_} = dec_Cause(Bytes),
Term;
dec_os_Value90(Bytes, 10) ->
{Term,_} = 'dec_UE-X2AP-ID'(Bytes),
Term;
dec_os_Value90(Bytes, 11) ->
{Term,_} = dec_ECGI(Bytes),
Term;
dec_os_Value90(Bytes, 13) ->
{Term,_} = dec_TraceActivation(Bytes),
Term;
dec_os_Value90(Bytes, 14) ->
{Term,_} = 'dec_UE-ContextInformation'(Bytes),
Term;
dec_os_Value90(Bytes, 15) ->
{Term,_} = 'dec_UE-HistoryInformation'(Bytes),
Term;
dec_os_Value90(Bytes, 23) ->
{Term,_} = dec_GUMMEI(Bytes),
Term;
dec_os_Value90(Bytes, 36) ->
{Term,_} = dec_SRVCCOperationPossible(Bytes),
Term;
dec_os_Value90(Bytes, Id) ->
Bytes.


enc_os_Extension2(Val, Id) ->
Val.

enc_os_InitiatingMessage145(Val, Id) ->
if Id =:= 0 ->
enc_HandoverRequest(Val);
Id =:= 1 ->
enc_HandoverCancel(Val);
Id =:= 2 ->
enc_LoadInformation(Val);
Id =:= 3 ->
enc_ErrorIndication(Val);
Id =:= 4 ->
enc_SNStatusTransfer(Val);
Id =:= 5 ->
enc_UEContextRelease(Val);
Id =:= 6 ->
enc_X2SetupRequest(Val);
Id =:= 7 ->
enc_ResetRequest(Val);
Id =:= 8 ->
enc_ENBConfigurationUpdate(Val);
Id =:= 9 ->
enc_ResourceStatusRequest(Val);
Id =:= 10 ->
enc_ResourceStatusUpdate(Val);
Id =:= 11 ->
enc_PrivateMessage(Val);
true ->
Val
end.

enc_os_SuccessfulOutcome143(Val, Id) ->
if Id =:= 0 ->
enc_HandoverRequestAcknowledge(Val);
Id =:= 6 ->
enc_X2SetupResponse(Val);
Id =:= 7 ->
enc_ResetResponse(Val);
Id =:= 8 ->
enc_ENBConfigurationUpdateAcknowledge(Val);
Id =:= 9 ->
enc_ResourceStatusResponse(Val);
true ->
Val
end.

enc_os_UnsuccessfulOutcome141(Val, Id) ->
if Id =:= 0 ->
enc_HandoverPreparationFailure(Val);
Id =:= 6 ->
enc_X2SetupFailure(Val);
Id =:= 8 ->
enc_ENBConfigurationUpdateFailure(Val);
Id =:= 9 ->
enc_ResourceStatusFailure(Val);
true ->
Val
end.

enc_os_Value11(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
Id =:= 39 ->
'enc_Measurement-ID'(Val);
Id =:= 40 ->
'enc_Measurement-ID'(Val);
true ->
Val
end.

enc_os_Value125(Val, Id) ->
if Id =:= 2 ->
'enc_E-RAB-Item'(Val);
true ->
Val
end.

enc_os_Value14(Val, Id) ->
if Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
Id =:= 39 ->
'enc_Measurement-ID'(Val);
Id =:= 40 ->
'enc_Measurement-ID'(Val);
true ->
Val
end.

enc_os_Value18(Val, Id) ->
if Id =:= 31 ->
'enc_CellToReport-Item'(Val);
true ->
exit({'Type not compatible with table constraint',{component,'Value'},{value,Val},{unique_name_and_value,'_'}})

end.

enc_os_Value21(Val, Id) ->
if Id =:= 28 ->
'enc_Registration-Request'(Val);
Id =:= 29 ->
'enc_CellToReport-List'(Val);
Id =:= 30 ->
enc_ReportingPeriodicity(Val);
Id =:= 38 ->
enc_ReportCharacteristics(Val);
Id =:= 39 ->
'enc_Measurement-ID'(Val);
Id =:= 40 ->
'enc_Measurement-ID'(Val);
true ->
Val
end.

enc_os_Value24(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
Id =:= 22 ->
enc_TimeToWait(Val);
true ->
Val
end.

enc_os_Value27(Val, Id) ->
if Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
true ->
Val
end.

enc_os_Value33(Val, Id) ->
if Id =:= 25 ->
enc_ServedCells(Val);
Id =:= 26 ->
enc_ServedCellsToModify(Val);
Id =:= 27 ->
'enc_Old-ECGIs'(Val);
Id =:= 34 ->
enc_GUGroupIDList(Val);
Id =:= 35 ->
enc_GUGroupIDList(Val);
true ->
Val
end.

enc_os_Value37(Val, Id) ->
if Id =:= 7 ->
'enc_CellInformation-Item'(Val);
true ->
exit({'Type not compatible with table constraint',{component,'Value'},{value,Val},{unique_name_and_value,'_'}})

end.

enc_os_Value40(Val, Id) ->
if Id =:= 6 ->
'enc_CellInformation-List'(Val);
true ->
Val
end.

enc_os_Value43(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
Id =:= 22 ->
enc_TimeToWait(Val);
true ->
Val
end.

enc_os_Value46(Val, Id) ->
if Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
Id =:= 20 ->
enc_ServedCells(Val);
Id =:= 21 ->
'enc_GlobalENB-ID'(Val);
Id =:= 24 ->
enc_GUGroupIDList(Val);
true ->
Val
end.

enc_os_Value49(Val, Id) ->
if Id =:= 20 ->
enc_ServedCells(Val);
Id =:= 21 ->
'enc_GlobalENB-ID'(Val);
Id =:= 24 ->
enc_GUGroupIDList(Val);
true ->
Val
end.

enc_os_Value5(Val, Id) ->
if Id =:= 33 ->
'enc_CellMeasurementResult-Item'(Val);
true ->
exit({'Type not compatible with table constraint',{component,'Value'},{value,Val},{unique_name_and_value,'_'}})

end.

enc_os_Value52(Val, Id) ->
if Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
true ->
Val
end.

enc_os_Value55(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
true ->
Val
end.

enc_os_Value58(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 9 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
true ->
Val
end.

enc_os_Value61(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 9 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
true ->
Val
end.

enc_os_Value64(Val, Id) ->
if Id =:= 9 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
true ->
Val
end.

enc_os_Value68(Val, Id) ->
if Id =:= 19 ->
'enc_E-RABs-SubjectToStatusTransfer-Item'(Val);
true ->
exit({'Type not compatible with table constraint',{component,'Value'},{value,Val},{unique_name_and_value,'_'}})

end.

enc_os_Value71(Val, Id) ->
if Id =:= 9 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 18 ->
'enc_E-RABs-SubjectToStatusTransfer-List'(Val);
true ->
Val
end.

enc_os_Value74(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
true ->
Val
end.

enc_os_Value78(Val, Id) ->
if Id =:= 0 ->
'enc_E-RABs-Admitted-Item'(Val);
true ->
exit({'Type not compatible with table constraint',{component,'Value'},{value,Val},{unique_name_and_value,'_'}})

end.

enc_os_Value8(Val, Id) ->
if Id =:= 32 ->
'enc_CellMeasurementResult-List'(Val);
Id =:= 39 ->
'enc_Measurement-ID'(Val);
Id =:= 40 ->
'enc_Measurement-ID'(Val);
true ->
Val
end.

enc_os_Value81(Val, Id) ->
if Id =:= 1 ->
'enc_E-RABs-Admitted-List'(Val);
Id =:= 3 ->
'enc_E-RAB-List'(Val);
Id =:= 9 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 12 ->
'enc_TargeteNBtoSource-eNBTransparentContainer'(Val);
Id =:= 17 ->
enc_CriticalityDiagnostics(Val);
true ->
Val
end.

enc_os_Value85(Val, Id) ->
if Id =:= 4 ->
'enc_E-RABs-ToBeSetup-Item'(Val);
true ->
Val
end.

enc_os_Value89(Val, Id) ->
if Id =:= 5 ->
enc_Cause(Val);
Id =:= 10 ->
'enc_UE-X2AP-ID'(Val);
Id =:= 11 ->
enc_ECGI(Val);
Id =:= 13 ->
enc_TraceActivation(Val);
Id =:= 14 ->
'enc_UE-ContextInformation'(Val);
Id =:= 15 ->
'enc_UE-HistoryInformation'(Val);
Id =:= 23 ->
enc_GUMMEI(Val);
Id =:= 36 ->
enc_SRVCCOperationPossible(Val);
true ->
Val
end.

adjust_size(Bs, Lb) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs:Sz/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end.

align(Bin) when is_binary(Bin) ->
    Bin;
align(BitStr) when is_bitstring(BitStr) ->
    AlignBits = bit_size(BitStr) rem 8,
    <<_:AlignBits,Rest/binary>> = BitStr,
    Rest.

complete(L0) ->
    L = complete(L0, []),
    case list_to_bitstring(L) of
        <<>> ->
            <<0>>;
        Bin ->
            Bin
    end.

complete([], Bits, []) ->
    case Bits band 7 of
        0 ->
            [];
        N ->
            [<<0:(8 - N)>>]
    end;
complete([], Bits, [H|More]) ->
    complete(H, Bits, More);
complete([align|T], Bits, More) ->
    case Bits band 7 of
        0 ->
            complete(T, More);
        1 ->
            [<<0:7>>|complete(T, More)];
        2 ->
            [<<0:6>>|complete(T, More)];
        3 ->
            [<<0:5>>|complete(T, More)];
        4 ->
            [<<0:4>>|complete(T, More)];
        5 ->
            [<<0:3>>|complete(T, More)];
        6 ->
            [<<0:2>>|complete(T, More)];
        7 ->
            [<<0:1>>|complete(T, More)]
    end;
complete([[]|T], Bits, More) ->
    complete(T, Bits, More);
complete([[_|_] = H], Bits, More) ->
    complete(H, Bits, More);
complete([[_|_] = H|T], Bits, More) ->
    complete(H, Bits, [T|More]);
complete([H|T], Bits, More) when is_integer(H); is_binary(H) ->
    [H|complete(T, Bits, More)];
complete([H|T], Bits, More) ->
    [H|complete(T, Bits + bit_size(H), More)];
complete(Bin, Bits, More) when is_binary(Bin) ->
    [Bin|complete([], Bits, More)];
complete(Bin, Bits, More) ->
    [Bin|complete([], Bits + bit_size(Bin), More)].

complete([], []) ->
    [];
complete([], [H|More]) ->
    complete(H, More);
complete([align|T], More) ->
    complete(T, More);
complete([[]|T], More) ->
    complete(T, More);
complete([[_|_] = H], More) ->
    complete(H, More);
complete([[_|_] = H|T], More) ->
    complete(H, [T|More]);
complete([H|T], More) when is_integer(H); is_binary(H) ->
    [H|complete(T, More)];
complete([H|T], More) ->
    [H|complete(T, bit_size(H), More)];
complete(Bin, More) when is_binary(Bin) ->
    [Bin|complete([], More)];
complete(Bin, More) ->
    [Bin|complete([], bit_size(Bin), More)].

dec_subidentifiers([H|T], Av, Al) when H >= 128 ->
    dec_subidentifiers(T, Av bsl 7 bor H band 127, Al);
dec_subidentifiers([H|T], Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 bor H|Al]);
dec_subidentifiers([], _Av, Al) ->
    lists:reverse(Al).

decode_compact_bit_string(Val) ->
    PadLen = (8 - bit_size(Val) band 7) band 7,
    {PadLen,<<Val/bitstring,0:PadLen>>}.

decode_fragmented(SegSz0, Buf0, Unit) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Res:SegSz/bitstring,Buf/bitstring>> = Buf0,
    decode_fragmented_1(Buf, Unit, Res).

decode_fragmented_1(<<0:1,N:7,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,0:1,N:14,Buf0/bitstring>>, Unit, Res) ->
    Sz = N * Unit,
    <<S:Sz/bitstring,Buf/bitstring>> = Buf0,
    {<<Res/bitstring,S/bitstring>>,Buf};
decode_fragmented_1(<<1:1,1:1,SegSz0:6,Buf0/bitstring>>, Unit, Res0) ->
    SegSz = SegSz0 * Unit * 16384,
    <<Frag:SegSz/bitstring,Buf/bitstring>> = Buf0,
    Res = <<Res0/bitstring,Frag/bitstring>>,
    decode_fragmented_1(Buf, Unit, Res).

decode_length(Buffer) ->
    case align(Buffer) of
        <<0:1,Oct:7,Rest/binary>> ->
            {Oct,Rest};
        <<2:2,Val:14,Rest/binary>> ->
            {Val,Rest};
        <<3:2,_Val:14,_Rest/binary>> ->
            exit({error,{asn1,{decode_length,{nyi,above_16k}}}})
    end.

decode_oid(Octets) ->
    [First|Rest] = dec_subidentifiers(Octets, 0, []),
    Idlist =
        if
            First < 40 ->
                [0,First|Rest];
            First < 80 ->
                [1,First - 40|Rest];
            true ->
                [2,First - 80|Rest]
        end,
    list_to_tuple(Idlist).

e_o_e(Num) when Num < 128 ->
    Num bor 128;
e_o_e(Num) ->
    [e_o_e(Num bsr 7),Num band 127 bor 128].

e_object_element(Num) when Num < 128 ->
    [Num];
e_object_element(Num) ->
    [e_o_e(Num bsr 7),Num band 127].

e_object_elements([], Acc) ->
    lists:reverse(Acc);
e_object_elements([H|T], Acc) ->
    e_object_elements(T, [e_object_element(H)|Acc]).

e_object_identifier([E1,E2|Tail])
    when E1 >= 0, E1 < 2, E2 < 40; E1 =:= 2 ->
    Head = 40 * E1 + E2,
    e_object_elements([Head|Tail], []);
e_object_identifier([_,_|_Tail] = Oid) ->
    exit({error,{asn1,{illegal_value,Oid}}}).

encode_fragmented(Bin, Unit) ->
    encode_fragmented_1(Bin, Unit, 4).

encode_fragmented_1(Bin, Unit, N) ->
    SegSz = Unit * N * 16384,
    case Bin of
        <<B:SegSz/bitstring,T/bitstring>> ->
            [<<3:2,N:6>>,B|encode_fragmented_1(T, Unit, N)];
        _ when N > 1 ->
            encode_fragmented_1(Bin, Unit, N - 1);
        _ ->
            case bit_size(Bin) div Unit of
                Len when Len < 128 ->
                    [Len,Bin];
                Len when Len < 16384 ->
                    [<<2:2,Len:14>>,Bin]
            end
    end.

encode_oid(Val) when is_tuple(Val) ->
    encode_oid(tuple_to_list(Val));
encode_oid(Val) ->
    iolist_to_binary(e_object_identifier(Val)).

encode_unconstrained_number(Val) when Val >= 0 ->
    if
        Val < 128 ->
            [1,Val];
        Val < 256 ->
            [<<2,0>>,Val];
        true ->
            case binary:encode_unsigned(Val) of
                <<0:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) of
                        Sz when Sz < 128 ->
                            [Sz,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14>>,Bin]
                    end;
                <<1:1,_/bitstring>> = Bin ->
                    case byte_size(Bin) + 1 of
                        Sz when Sz < 128 ->
                            [Sz,0,Bin];
                        Sz when Sz < 16384 ->
                            [<<2:2,Sz:14,0:8>>,Bin]
                    end
            end
    end;
encode_unconstrained_number(Val) ->
    Oct = enint(Val, []),
    Len = length(Oct),
    if
        Len < 128 ->
            [Len|Oct];
        Len < 16384 ->
            [<<2:2,Len:14>>|Oct]
    end.

enint(- 1, [B1|T]) when B1 > 127 ->
    [B1|T];
enint(N, Acc) ->
    enint(N bsr 8, [N band 255|Acc]).

int_to_bitlist(0) ->
    [];
int_to_bitlist(Int) ->
    [Int band 1|int_to_bitlist(Int bsr 1)].

skipextensions(Bytes0, Nr, ExtensionBitstr)
    when is_bitstring(ExtensionBitstr) ->
    Prev = Nr - 1,
    case ExtensionBitstr of
        <<_:Prev,1:1,_/bitstring>> ->
            {Len,Bytes1} = decode_length(Bytes0),
            <<_:Len/binary,Bytes2/bitstring>> = Bytes1,
            skipextensions(Bytes2, Nr + 1, ExtensionBitstr);
        <<_:Prev,0:1,_/bitstring>> ->
            skipextensions(Bytes0, Nr + 1, ExtensionBitstr);
        _ ->
            Bytes0
    end.

to_bitstring({0,Bs}, Lb) when is_binary(Bs) ->
    case bit_size(Bs) of
        Sz when Sz < Lb ->
            <<Bs/bits,0:(Lb - Sz)>>;
        _ ->
            Bs
    end;
to_bitstring({Unused,Bs0}, Lb) when is_binary(Bs0) ->
    Sz = bit_size(Bs0) - Unused,
    if
        Sz < Lb ->
            <<Bs0:Sz/bits,0:(Lb - Sz)>>;
        true ->
            <<Bs:Sz/bits,_/bits>> = Bs0,
            Bs
    end;
to_bitstring(Bs, Lb) when is_bitstring(Bs) ->
    adjust_size(Bs, Lb);
to_bitstring(Int, Lb) when is_integer(Int), Int >= 0 ->
    L = int_to_bitlist(Int),
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb);
to_bitstring(L, Lb) when is_list(L) ->
    Bs =
        << 
          <<B:1>> ||
              B <- L
        >>,
    adjust_size(Bs, Lb).
