%% Generated by the Erlang ASN.1 BER_V2-compiler version, utilizing bit-syntax:3.0.1
%% Purpose: encoder and decoder to the types in mod X2AP

-module('X2AP').
-compile(nowarn_unused_vars).
-include("X2AP.hrl").
-asn1_info([{vsn,'3.0.1'},
            {module,'X2AP'},
            {options,[{i,"/local/vlad/repos/mmesim/epc_proto/src"},
 warnings,ber,errors,
 {cwd,"/local/vlad/repos/mmesim/epc_proto"},
 {outdir,"/local/vlad/repos/mmesim/epc_proto/src"},
 per,verbose,asn1config,
 {i,"."},
 {i,"/local/vlad/repos/mmesim/epc_proto/protocols"}]}]).

-export([encoding_rule/0,bit_string_format/0,
         legacy_erlang_types/0]).
-export(['dialyzer-suppressions'/1]).
-export([
'enc_TriggeringMessage'/2,
'enc_ProtocolIE-ID'/2,
'enc_ProcedureCode'/2,
'enc_PrivateIE-ID'/2,
'enc_Presence'/2,
'enc_Criticality'/2,
'enc_PrivateMessage'/2,
'enc_CellMeasurementResult-Item'/2,
'enc_CellMeasurementResult-List'/2,
'enc_ResourceStatusUpdate'/2,
'enc_ResourceStatusFailure'/2,
'enc_ResourceStatusResponse'/2,
'enc_ReportingPeriodicity'/2,
'enc_CellToReport-Item'/2,
'enc_CellToReport-List'/2,
'enc_ResourceStatusRequest'/2,
'enc_ENBConfigurationUpdateFailure'/2,
'enc_ENBConfigurationUpdateAcknowledge'/2,
'enc_Old-ECGIs'/2,
'enc_ServedCellsToModify-Item'/2,
'enc_ServedCellsToModify'/2,
'enc_ENBConfigurationUpdate'/2,
'enc_CellInformation-Item'/2,
'enc_CellInformation-List'/2,
'enc_LoadInformation'/2,
'enc_X2SetupFailure'/2,
'enc_X2SetupResponse'/2,
'enc_X2SetupRequest'/2,
'enc_ResetResponse'/2,
'enc_ResetRequest'/2,
'enc_ErrorIndication'/2,
'enc_HandoverCancel'/2,
'enc_UEContextRelease'/2,
'enc_E-RABs-SubjectToStatusTransfer-Item'/2,
'enc_E-RABs-SubjectToStatusTransfer-List'/2,
'enc_SNStatusTransfer'/2,
'enc_HandoverPreparationFailure'/2,
'enc_E-RABs-Admitted-Item'/2,
'enc_E-RABs-Admitted-List'/2,
'enc_HandoverRequestAcknowledge'/2,
'enc_E-RABs-ToBeSetup-Item'/2,
'enc_E-RABs-ToBeSetup-List'/2,
'enc_UE-ContextInformation'/2,
'enc_HandoverRequest'/2,
'enc_UL-HighInterferenceIndication'/2,
'enc_UL-HighInterferenceIndicationInfo-Item'/2,
'enc_UL-HighInterferenceIndicationInfo'/2,
'enc_UL-InterferenceOverloadIndication-Item'/2,
'enc_UL-InterferenceOverloadIndication'/2,
'enc_UESecurityCapabilities'/2,
'enc_UEAggregateMaximumBitRate'/2,
'enc_UE-X2AP-ID'/2,
'enc_UE-S1AP-ID'/2,
'enc_UE-HistoryInformation'/2,
'enc_TypeOfError'/2,
'enc_TransportLayerAddress'/2,
'enc_Transmission-Bandwidth'/2,
'enc_TraceDepth'/2,
'enc_TraceCollectionEntityIPAddress'/2,
'enc_TraceActivation'/2,
'enc_Time-UE-StayedInCell'/2,
'enc_TimeToWait'/2,
'enc_TargeteNBtoSource-eNBTransparentContainer'/2,
'enc_TAC'/2,
'enc_SubscriberProfileIDforRFP'/2,
'enc_SpecialSubframePatterns'/2,
'enc_SpecialSubframe-Info'/2,
'enc_SubframeAssignment'/2,
'enc_SRVCCOperationPossible'/2,
'enc_ServedCell-Information'/2,
'enc_ServedCells'/2,
'enc_S1TNLLoadIndicator'/2,
'enc_UL-Total-PRB-usage'/2,
'enc_DL-Total-PRB-usage'/2,
'enc_UL-non-GBR-PRB-usage'/2,
'enc_DL-non-GBR-PRB-usage'/2,
'enc_UL-GBR-PRB-usage'/2,
'enc_DL-GBR-PRB-usage'/2,
'enc_RadioResourceStatus'/2,
'enc_RRC-Context'/2,
'enc_RNTP-Threshold'/2,
'enc_ReportCharacteristics'/2,
'enc_ReportArea'/2,
'enc_RelativeNarrowbandTxPower'/2,
'enc_Registration-Request'/2,
'enc_ReceiveStatusofULPDCPSDUs'/2,
'enc_QCI'/2,
'enc_PriorityLevel'/2,
'enc_Pre-emptionVulnerability'/2,
'enc_Pre-emptionCapability'/2,
'enc_PLMN-Identity'/2,
'enc_PCI'/2,
'enc_PDCP-SN'/2,
'enc_NextHopChainingCount'/2,
'enc_Neighbour-Information'/2,
'enc_Measurement-ID'/2,
'enc_MME-Code'/2,
'enc_MME-Group-ID'/2,
'enc_LocationReportingInformation'/2,
'enc_LoadIndicator'/2,
'enc_LastVisitedGERANCellInformation'/2,
'enc_LastVisitedUTRANCellInformation'/2,
'enc_LastVisitedEUTRANCellInformation'/2,
'enc_LastVisitedCell-Item'/2,
'enc_LAC'/2,
'enc_Key-eNodeB-Star'/2,
'enc_InterfacesToTrace'/2,
'enc_IntegrityProtectionAlgorithms'/2,
'enc_HWLoadIndicator'/2,
'enc_HFN'/2,
'enc_HandoverRestrictionList'/2,
'enc_GUMMEI'/2,
'enc_GU-Group-ID'/2,
'enc_GUGroupIDList'/2,
'enc_GTP-TEI'/2,
'enc_GTPtunnelEndpoint'/2,
'enc_GlobalENB-ID'/2,
'enc_GBR-QosInformation'/2,
'enc_ForbiddenLACs'/2,
'enc_ForbiddenLAs-Item'/2,
'enc_ForbiddenLAs'/2,
'enc_ForbiddenTACs'/2,
'enc_ForbiddenTAs-Item'/2,
'enc_ForbiddenTAs'/2,
'enc_ForbiddenInterRATs'/2,
'enc_EventType'/2,
'enc_EUTRANTraceID'/2,
'enc_EUTRANCellIdentifier'/2,
'enc_E-RAB-Item'/2,
'enc_E-RAB-List'/2,
'enc_E-RAB-Level-QoS-Parameters'/2,
'enc_E-RAB-ID'/2,
'enc_EPLMNs'/2,
'enc_EncryptionAlgorithms'/2,
'enc_ENB-ID'/2,
'enc_ECGI'/2,
'enc_EUTRA-Mode-Info'/2,
'enc_TDD-Info'/2,
'enc_FDD-Info'/2,
'enc_EARFCN'/2,
'enc_DL-Forwarding'/2,
'enc_CyclicPrefixUL'/2,
'enc_CyclicPrefixDL'/2,
'enc_CriticalityDiagnostics-IE-List'/2,
'enc_CriticalityDiagnostics'/2,
'enc_COUNTvalue'/2,
'enc_CellType'/2,
'enc_Cell-Size'/2,
'enc_CauseTransport'/2,
'enc_CauseRadioNetwork'/2,
'enc_CauseProtocol'/2,
'enc_CauseMisc'/2,
'enc_Cause'/2,
'enc_BroadcastPLMNs-Item'/2,
'enc_BitRate'/2,
'enc_AllocationAndRetentionPriority'/2,
'enc_AS-SecurityInformation'/2,
'enc_UnsuccessfulOutcome'/2,
'enc_SuccessfulOutcome'/2,
'enc_InitiatingMessage'/2,
'enc_X2AP-PDU'/2
]).

-export([
'dec_TriggeringMessage'/2,
'dec_ProtocolIE-ID'/2,
'dec_ProcedureCode'/2,
'dec_PrivateIE-ID'/2,
'dec_Presence'/2,
'dec_Criticality'/2,
'dec_PrivateMessage'/2,
'dec_CellMeasurementResult-Item'/2,
'dec_CellMeasurementResult-List'/2,
'dec_ResourceStatusUpdate'/2,
'dec_ResourceStatusFailure'/2,
'dec_ResourceStatusResponse'/2,
'dec_ReportingPeriodicity'/2,
'dec_CellToReport-Item'/2,
'dec_CellToReport-List'/2,
'dec_ResourceStatusRequest'/2,
'dec_ENBConfigurationUpdateFailure'/2,
'dec_ENBConfigurationUpdateAcknowledge'/2,
'dec_Old-ECGIs'/2,
'dec_ServedCellsToModify-Item'/2,
'dec_ServedCellsToModify'/2,
'dec_ENBConfigurationUpdate'/2,
'dec_CellInformation-Item'/2,
'dec_CellInformation-List'/2,
'dec_LoadInformation'/2,
'dec_X2SetupFailure'/2,
'dec_X2SetupResponse'/2,
'dec_X2SetupRequest'/2,
'dec_ResetResponse'/2,
'dec_ResetRequest'/2,
'dec_ErrorIndication'/2,
'dec_HandoverCancel'/2,
'dec_UEContextRelease'/2,
'dec_E-RABs-SubjectToStatusTransfer-Item'/2,
'dec_E-RABs-SubjectToStatusTransfer-List'/2,
'dec_SNStatusTransfer'/2,
'dec_HandoverPreparationFailure'/2,
'dec_E-RABs-Admitted-Item'/2,
'dec_E-RABs-Admitted-List'/2,
'dec_HandoverRequestAcknowledge'/2,
'dec_E-RABs-ToBeSetup-Item'/2,
'dec_E-RABs-ToBeSetup-List'/2,
'dec_UE-ContextInformation'/2,
'dec_HandoverRequest'/2,
'dec_UL-HighInterferenceIndication'/2,
'dec_UL-HighInterferenceIndicationInfo-Item'/2,
'dec_UL-HighInterferenceIndicationInfo'/2,
'dec_UL-InterferenceOverloadIndication-Item'/2,
'dec_UL-InterferenceOverloadIndication'/2,
'dec_UESecurityCapabilities'/2,
'dec_UEAggregateMaximumBitRate'/2,
'dec_UE-X2AP-ID'/2,
'dec_UE-S1AP-ID'/2,
'dec_UE-HistoryInformation'/2,
'dec_TypeOfError'/2,
'dec_TransportLayerAddress'/2,
'dec_Transmission-Bandwidth'/2,
'dec_TraceDepth'/2,
'dec_TraceCollectionEntityIPAddress'/2,
'dec_TraceActivation'/2,
'dec_Time-UE-StayedInCell'/2,
'dec_TimeToWait'/2,
'dec_TargeteNBtoSource-eNBTransparentContainer'/2,
'dec_TAC'/2,
'dec_SubscriberProfileIDforRFP'/2,
'dec_SpecialSubframePatterns'/2,
'dec_SpecialSubframe-Info'/2,
'dec_SubframeAssignment'/2,
'dec_SRVCCOperationPossible'/2,
'dec_ServedCell-Information'/2,
'dec_ServedCells'/2,
'dec_S1TNLLoadIndicator'/2,
'dec_UL-Total-PRB-usage'/2,
'dec_DL-Total-PRB-usage'/2,
'dec_UL-non-GBR-PRB-usage'/2,
'dec_DL-non-GBR-PRB-usage'/2,
'dec_UL-GBR-PRB-usage'/2,
'dec_DL-GBR-PRB-usage'/2,
'dec_RadioResourceStatus'/2,
'dec_RRC-Context'/2,
'dec_RNTP-Threshold'/2,
'dec_ReportCharacteristics'/2,
'dec_ReportArea'/2,
'dec_RelativeNarrowbandTxPower'/2,
'dec_Registration-Request'/2,
'dec_ReceiveStatusofULPDCPSDUs'/2,
'dec_QCI'/2,
'dec_PriorityLevel'/2,
'dec_Pre-emptionVulnerability'/2,
'dec_Pre-emptionCapability'/2,
'dec_PLMN-Identity'/2,
'dec_PCI'/2,
'dec_PDCP-SN'/2,
'dec_NextHopChainingCount'/2,
'dec_Neighbour-Information'/2,
'dec_Measurement-ID'/2,
'dec_MME-Code'/2,
'dec_MME-Group-ID'/2,
'dec_LocationReportingInformation'/2,
'dec_LoadIndicator'/2,
'dec_LastVisitedGERANCellInformation'/2,
'dec_LastVisitedUTRANCellInformation'/2,
'dec_LastVisitedEUTRANCellInformation'/2,
'dec_LastVisitedCell-Item'/2,
'dec_LAC'/2,
'dec_Key-eNodeB-Star'/2,
'dec_InterfacesToTrace'/2,
'dec_IntegrityProtectionAlgorithms'/2,
'dec_HWLoadIndicator'/2,
'dec_HFN'/2,
'dec_HandoverRestrictionList'/2,
'dec_GUMMEI'/2,
'dec_GU-Group-ID'/2,
'dec_GUGroupIDList'/2,
'dec_GTP-TEI'/2,
'dec_GTPtunnelEndpoint'/2,
'dec_GlobalENB-ID'/2,
'dec_GBR-QosInformation'/2,
'dec_ForbiddenLACs'/2,
'dec_ForbiddenLAs-Item'/2,
'dec_ForbiddenLAs'/2,
'dec_ForbiddenTACs'/2,
'dec_ForbiddenTAs-Item'/2,
'dec_ForbiddenTAs'/2,
'dec_ForbiddenInterRATs'/2,
'dec_EventType'/2,
'dec_EUTRANTraceID'/2,
'dec_EUTRANCellIdentifier'/2,
'dec_E-RAB-Item'/2,
'dec_E-RAB-List'/2,
'dec_E-RAB-Level-QoS-Parameters'/2,
'dec_E-RAB-ID'/2,
'dec_EPLMNs'/2,
'dec_EncryptionAlgorithms'/2,
'dec_ENB-ID'/2,
'dec_ECGI'/2,
'dec_EUTRA-Mode-Info'/2,
'dec_TDD-Info'/2,
'dec_FDD-Info'/2,
'dec_EARFCN'/2,
'dec_DL-Forwarding'/2,
'dec_CyclicPrefixUL'/2,
'dec_CyclicPrefixDL'/2,
'dec_CriticalityDiagnostics-IE-List'/2,
'dec_CriticalityDiagnostics'/2,
'dec_COUNTvalue'/2,
'dec_CellType'/2,
'dec_Cell-Size'/2,
'dec_CauseTransport'/2,
'dec_CauseRadioNetwork'/2,
'dec_CauseProtocol'/2,
'dec_CauseMisc'/2,
'dec_Cause'/2,
'dec_BroadcastPLMNs-Item'/2,
'dec_BitRate'/2,
'dec_AllocationAndRetentionPriority'/2,
'dec_AS-SecurityInformation'/2,
'dec_UnsuccessfulOutcome'/2,
'dec_SuccessfulOutcome'/2,
'dec_InitiatingMessage'/2,
'dec_X2AP-PDU'/2
]).

-export([
'id-ENB2-Measurement-ID'/0,
'id-ENB1-Measurement-ID'/0,
'id-ReportCharacteristics'/0,
'id-Measurement-ID'/0,
'id-SRVCCOperationPossible'/0,
'id-GUGroupIDToDeleteList'/0,
'id-GUGroupIDToAddList'/0,
'id-CellMeasurementResult-Item'/0,
'id-CellMeasurementResult'/0,
'id-CellToReport-Item'/0,
'id-ReportingPeriodicity'/0,
'id-CellToReport'/0,
'id-Registration-Request'/0,
'id-ServedCellsToDelete'/0,
'id-ServedCellsToModify'/0,
'id-ServedCellsToAdd'/0,
'id-GUGroupIDList'/0,
'id-GUMMEI-ID'/0,
'id-TimeToWait'/0,
'id-GlobalENB-ID'/0,
'id-ServedCells'/0,
'id-E-RABs-SubjectToStatusTransfer-Item'/0,
'id-E-RABs-SubjectToStatusTransfer-List'/0,
'id-CriticalityDiagnostics'/0,
'id-UE-X2AP-ID'/0,
'id-UE-HistoryInformation'/0,
'id-UE-ContextInformation'/0,
'id-TraceActivation'/0,
'id-TargeteNBtoSource-eNBTransparentContainer'/0,
'id-TargetCell-ID'/0,
'id-Old-eNB-UE-X2AP-ID'/0,
'id-New-eNB-UE-X2AP-ID'/0,
'id-CellInformation-Item'/0,
'id-CellInformation'/0,
'id-Cause'/0,
'id-E-RABs-ToBeSetup-Item'/0,
'id-E-RABs-NotAdmitted-List'/0,
'id-E-RAB-Item'/0,
'id-E-RABs-Admitted-List'/0,
'id-E-RABs-Admitted-Item'/0,
'maxnoofCells'/0,
'maxPools'/0,
'maxnoofPRBs'/0,
'maxnoofNeighbours'/0,
'maxnoofBPLMNs'/0,
'maxnoofForbTACs'/0,
'maxnoofForbLACs'/0,
'maxnoofEPLMNsPlusOne'/0,
'maxnoofEPLMNs'/0,
'maxnoofPDCP-SN'/0,
'maxNrOfErrors'/0,
'maxnoofBearers'/0,
'maxCellineNB'/0,
'maxInterfaces'/0,
'maxEARFCN'/0,
'id-privateMessage'/0,
'id-resourceStatusReporting'/0,
'id-resourceStatusReportingInitiation'/0,
'id-eNBConfigurationUpdate'/0,
'id-reset'/0,
'id-x2Setup'/0,
'id-uEContextRelease'/0,
'id-snStatusTransfer'/0,
'id-errorIndication'/0,
'id-loadIndication'/0,
'id-handoverCancel'/0,
'id-handoverPreparation'/0,
'maxProtocolIEs'/0,
'maxProtocolExtensions'/0,
'maxPrivateIEs'/0
]).

-export([
'enc_privateMessage'/3,
'enc_resourceStatusReporting'/3,
'enc_resourceStatusReportingInitiation'/3,
'enc_eNBConfigurationUpdate'/3,
'enc_loadIndication'/3,
'enc_x2Setup'/3,
'enc_reset'/3,
'enc_errorIndication'/3,
'enc_handoverCancel'/3,
'enc_uEContextRelease'/3,
'enc_snStatusTransfer'/3,
'enc_handoverPreparation'/3
]).

-export([
'dec_privateMessage'/3,
'dec_resourceStatusReporting'/3,
'dec_resourceStatusReportingInitiation'/3,
'dec_eNBConfigurationUpdate'/3,
'dec_loadIndication'/3,
'dec_x2Setup'/3,
'dec_reset'/3,
'dec_errorIndication'/3,
'dec_handoverCancel'/3,
'dec_uEContextRelease'/3,
'dec_snStatusTransfer'/3,
'dec_handoverPreparation'/3
]).

-export([
'getenc_CellMeasurementResult-Item-ExtIEs'/1,
'getenc_CellMeasurementResult-ItemIEs'/1,
'getenc_ResourceStatusUpdate-IEs'/1,
'getenc_ResourceStatusFailure-IEs'/1,
'getenc_ResourceStatusResponse-IEs'/1,
'getenc_CellToReport-Item-ExtIEs'/1,
'getenc_CellToReport-ItemIEs'/1,
'getenc_ResourceStatusRequest-IEs'/1,
'getenc_ENBConfigurationUpdateFailure-IEs'/1,
'getenc_ENBConfigurationUpdateAcknowledge-IEs'/1,
'getenc_ServedCellsToModify-Item-ExtIEs'/1,
'getenc_ENBConfigurationUpdate-IEs'/1,
'getenc_CellInformation-Item-ExtIEs'/1,
'getenc_CellInformation-ItemIEs'/1,
'getenc_LoadInformation-IEs'/1,
'getenc_X2SetupFailure-IEs'/1,
'getenc_X2SetupResponse-IEs'/1,
'getenc_X2SetupRequest-IEs'/1,
'getenc_ResetResponse-IEs'/1,
'getenc_ResetRequest-IEs'/1,
'getenc_ErrorIndication-IEs'/1,
'getenc_HandoverCancel-IEs'/1,
'getenc_UEContextRelease-IEs'/1,
'getenc_E-RABs-SubjectToStatusTransfer-ItemExtIEs'/1,
'getenc_E-RABs-SubjectToStatusTransfer-ItemIEs'/1,
'getenc_SNStatusTransfer-IEs'/1,
'getenc_HandoverPreparationFailure-IEs'/1,
'getenc_E-RABs-Admitted-Item-ExtIEs'/1,
'getenc_E-RABs-Admitted-ItemIEs'/1,
'getenc_HandoverRequestAcknowledge-IEs'/1,
'getenc_E-RABs-ToBeSetup-ItemExtIEs'/1,
'getenc_E-RABs-ToBeSetup-ItemIEs'/1,
'getenc_UE-ContextInformation-ExtIEs'/1,
'getenc_HandoverRequest-IEs'/1,
'getenc_UL-HighInterferenceIndicationInfo-Item-ExtIEs'/1,
'getenc_UESecurityCapabilities-ExtIEs'/1,
'getenc_UEAggregate-MaximumBitrate-ExtIEs'/1,
'getenc_TraceActivation-ExtIEs'/1,
'getenc_SpecialSubframe-Info-ExtIEs'/1,
'getenc_ServedCell-Information-ExtIEs'/1,
'getenc_ServedCell-ExtIEs'/1,
'getenc_S1TNLLoadIndicator-ExtIEs'/1,
'getenc_RadioResourceStatus-ExtIEs'/1,
'getenc_RelativeNarrowbandTxPower-ExtIEs'/1,
'getenc_Neighbour-Information-ExtIEs'/1,
'getenc_LocationReportingInformation-ExtIEs'/1,
'getenc_LastVisitedEUTRANCellInformation-ExtIEs'/1,
'getenc_HWLoadIndicator-ExtIEs'/1,
'getenc_HandoverRestrictionList-ExtIEs'/1,
'getenc_GUMMEI-ExtIEs'/1,
'getenc_GU-Group-ID-ExtIEs'/1,
'getenc_GTPtunnelEndpoint-ExtIEs'/1,
'getenc_GlobalENB-ID-ExtIEs'/1,
'getenc_GBR-QosInformation-ExtIEs'/1,
'getenc_ForbiddenLAs-Item-ExtIEs'/1,
'getenc_ForbiddenTAs-Item-ExtIEs'/1,
'getenc_E-RAB-Item-ExtIEs'/1,
'getenc_E-RAB-ItemIEs'/1,
'getenc_E-RAB-Level-QoS-Parameters-ExtIEs'/1,
'getenc_ECGI-ExtIEs'/1,
'getenc_TDD-Info-ExtIEs'/1,
'getenc_FDD-Info-ExtIEs'/1,
'getenc_CriticalityDiagnostics-IE-List-ExtIEs'/1,
'getenc_CriticalityDiagnostics-ExtIEs'/1,
'getenc_COUNTvalue-ExtIEs'/1,
'getenc_CellType-ExtIEs'/1,
'getenc_AllocationAndRetentionPriority-ExtIEs'/1,
'getenc_AS-SecurityInformation-ExtIEs'/1,
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'/1,
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'/1,
'getenc_X2AP-ELEMENTARY-PROCEDURES'/1,
'getenc_internal_object_set_argument_9'/1,
'getenc_internal_object_set_argument_39'/1,
'getenc_internal_object_set_argument_8'/1,
'getenc_internal_object_set_argument_38'/1,
'getenc_internal_object_set_argument_7'/1,
'getenc_internal_object_set_argument_37'/1,
'getenc_internal_object_set_argument_6'/1,
'getenc_internal_object_set_argument_36'/1,
'getenc_internal_object_set_argument_5'/1,
'getenc_internal_object_set_argument_35'/1,
'getenc_internal_object_set_argument_4'/1,
'getenc_internal_object_set_argument_34'/1,
'getenc_internal_object_set_argument_3'/1,
'getenc_internal_object_set_argument_33'/1,
'getenc_internal_object_set_argument_2'/1,
'getenc_internal_object_set_argument_32'/1,
'getenc_internal_object_set_argument_31'/1,
'getenc_internal_object_set_argument_30'/1,
'getenc_internal_object_set_argument_49'/1,
'getenc_internal_object_set_argument_48'/1,
'getenc_internal_object_set_argument_47'/1,
'getenc_internal_object_set_argument_46'/1,
'getenc_internal_object_set_argument_45'/1,
'getenc_internal_object_set_argument_44'/1,
'getenc_internal_object_set_argument_43'/1,
'getenc_internal_object_set_argument_42'/1,
'getenc_internal_object_set_argument_41'/1,
'getenc_internal_object_set_argument_40'/1,
'getenc_internal_object_set_argument_59'/1,
'getenc_internal_object_set_argument_19'/1,
'getenc_internal_object_set_argument_58'/1,
'getenc_internal_object_set_argument_18'/1,
'getenc_internal_object_set_argument_57'/1,
'getenc_internal_object_set_argument_17'/1,
'getenc_internal_object_set_argument_56'/1,
'getenc_internal_object_set_argument_16'/1,
'getenc_internal_object_set_argument_55'/1,
'getenc_internal_object_set_argument_15'/1,
'getenc_internal_object_set_argument_54'/1,
'getenc_internal_object_set_argument_14'/1,
'getenc_internal_object_set_argument_53'/1,
'getenc_internal_object_set_argument_13'/1,
'getenc_internal_object_set_argument_52'/1,
'getenc_internal_object_set_argument_12'/1,
'getenc_internal_object_set_argument_51'/1,
'getenc_internal_object_set_argument_11'/1,
'getenc_internal_object_set_argument_50'/1,
'getenc_internal_object_set_argument_10'/1,
'getenc_internal_object_set_argument_69'/1,
'getenc_internal_object_set_argument_29'/1,
'getenc_internal_object_set_argument_68'/1,
'getenc_internal_object_set_argument_28'/1,
'getenc_internal_object_set_argument_67'/1,
'getenc_internal_object_set_argument_27'/1,
'getenc_internal_object_set_argument_66'/1,
'getenc_internal_object_set_argument_26'/1,
'getenc_internal_object_set_argument_65'/1,
'getenc_internal_object_set_argument_25'/1,
'getenc_internal_object_set_argument_64'/1,
'getenc_internal_object_set_argument_24'/1,
'getenc_internal_object_set_argument_63'/1,
'getenc_internal_object_set_argument_23'/1,
'getenc_internal_object_set_argument_62'/1,
'getenc_internal_object_set_argument_22'/1,
'getenc_internal_object_set_argument_61'/1,
'getenc_internal_object_set_argument_21'/1,
'getenc_internal_object_set_argument_60'/1,
'getenc_internal_object_set_argument_20'/1
]).

-export([
'getdec_CellMeasurementResult-Item-ExtIEs'/1,
'getdec_CellMeasurementResult-ItemIEs'/1,
'getdec_ResourceStatusUpdate-IEs'/1,
'getdec_ResourceStatusFailure-IEs'/1,
'getdec_ResourceStatusResponse-IEs'/1,
'getdec_CellToReport-Item-ExtIEs'/1,
'getdec_CellToReport-ItemIEs'/1,
'getdec_ResourceStatusRequest-IEs'/1,
'getdec_ENBConfigurationUpdateFailure-IEs'/1,
'getdec_ENBConfigurationUpdateAcknowledge-IEs'/1,
'getdec_ServedCellsToModify-Item-ExtIEs'/1,
'getdec_ENBConfigurationUpdate-IEs'/1,
'getdec_CellInformation-Item-ExtIEs'/1,
'getdec_CellInformation-ItemIEs'/1,
'getdec_LoadInformation-IEs'/1,
'getdec_X2SetupFailure-IEs'/1,
'getdec_X2SetupResponse-IEs'/1,
'getdec_X2SetupRequest-IEs'/1,
'getdec_ResetResponse-IEs'/1,
'getdec_ResetRequest-IEs'/1,
'getdec_ErrorIndication-IEs'/1,
'getdec_HandoverCancel-IEs'/1,
'getdec_UEContextRelease-IEs'/1,
'getdec_E-RABs-SubjectToStatusTransfer-ItemExtIEs'/1,
'getdec_E-RABs-SubjectToStatusTransfer-ItemIEs'/1,
'getdec_SNStatusTransfer-IEs'/1,
'getdec_HandoverPreparationFailure-IEs'/1,
'getdec_E-RABs-Admitted-Item-ExtIEs'/1,
'getdec_E-RABs-Admitted-ItemIEs'/1,
'getdec_HandoverRequestAcknowledge-IEs'/1,
'getdec_E-RABs-ToBeSetup-ItemExtIEs'/1,
'getdec_E-RABs-ToBeSetup-ItemIEs'/1,
'getdec_UE-ContextInformation-ExtIEs'/1,
'getdec_HandoverRequest-IEs'/1,
'getdec_UL-HighInterferenceIndicationInfo-Item-ExtIEs'/1,
'getdec_UESecurityCapabilities-ExtIEs'/1,
'getdec_UEAggregate-MaximumBitrate-ExtIEs'/1,
'getdec_TraceActivation-ExtIEs'/1,
'getdec_SpecialSubframe-Info-ExtIEs'/1,
'getdec_ServedCell-Information-ExtIEs'/1,
'getdec_ServedCell-ExtIEs'/1,
'getdec_S1TNLLoadIndicator-ExtIEs'/1,
'getdec_RadioResourceStatus-ExtIEs'/1,
'getdec_RelativeNarrowbandTxPower-ExtIEs'/1,
'getdec_Neighbour-Information-ExtIEs'/1,
'getdec_LocationReportingInformation-ExtIEs'/1,
'getdec_LastVisitedEUTRANCellInformation-ExtIEs'/1,
'getdec_HWLoadIndicator-ExtIEs'/1,
'getdec_HandoverRestrictionList-ExtIEs'/1,
'getdec_GUMMEI-ExtIEs'/1,
'getdec_GU-Group-ID-ExtIEs'/1,
'getdec_GTPtunnelEndpoint-ExtIEs'/1,
'getdec_GlobalENB-ID-ExtIEs'/1,
'getdec_GBR-QosInformation-ExtIEs'/1,
'getdec_ForbiddenLAs-Item-ExtIEs'/1,
'getdec_ForbiddenTAs-Item-ExtIEs'/1,
'getdec_E-RAB-Item-ExtIEs'/1,
'getdec_E-RAB-ItemIEs'/1,
'getdec_E-RAB-Level-QoS-Parameters-ExtIEs'/1,
'getdec_ECGI-ExtIEs'/1,
'getdec_TDD-Info-ExtIEs'/1,
'getdec_FDD-Info-ExtIEs'/1,
'getdec_CriticalityDiagnostics-IE-List-ExtIEs'/1,
'getdec_CriticalityDiagnostics-ExtIEs'/1,
'getdec_COUNTvalue-ExtIEs'/1,
'getdec_CellType-ExtIEs'/1,
'getdec_AllocationAndRetentionPriority-ExtIEs'/1,
'getdec_AS-SecurityInformation-ExtIEs'/1,
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'/1,
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'/1,
'getdec_X2AP-ELEMENTARY-PROCEDURES'/1,
'getdec_internal_object_set_argument_9'/1,
'getdec_internal_object_set_argument_39'/1,
'getdec_internal_object_set_argument_8'/1,
'getdec_internal_object_set_argument_38'/1,
'getdec_internal_object_set_argument_7'/1,
'getdec_internal_object_set_argument_37'/1,
'getdec_internal_object_set_argument_6'/1,
'getdec_internal_object_set_argument_36'/1,
'getdec_internal_object_set_argument_5'/1,
'getdec_internal_object_set_argument_35'/1,
'getdec_internal_object_set_argument_4'/1,
'getdec_internal_object_set_argument_34'/1,
'getdec_internal_object_set_argument_3'/1,
'getdec_internal_object_set_argument_33'/1,
'getdec_internal_object_set_argument_2'/1,
'getdec_internal_object_set_argument_32'/1,
'getdec_internal_object_set_argument_31'/1,
'getdec_internal_object_set_argument_30'/1,
'getdec_internal_object_set_argument_49'/1,
'getdec_internal_object_set_argument_48'/1,
'getdec_internal_object_set_argument_47'/1,
'getdec_internal_object_set_argument_46'/1,
'getdec_internal_object_set_argument_45'/1,
'getdec_internal_object_set_argument_44'/1,
'getdec_internal_object_set_argument_43'/1,
'getdec_internal_object_set_argument_42'/1,
'getdec_internal_object_set_argument_41'/1,
'getdec_internal_object_set_argument_40'/1,
'getdec_internal_object_set_argument_59'/1,
'getdec_internal_object_set_argument_19'/1,
'getdec_internal_object_set_argument_58'/1,
'getdec_internal_object_set_argument_18'/1,
'getdec_internal_object_set_argument_57'/1,
'getdec_internal_object_set_argument_17'/1,
'getdec_internal_object_set_argument_56'/1,
'getdec_internal_object_set_argument_16'/1,
'getdec_internal_object_set_argument_55'/1,
'getdec_internal_object_set_argument_15'/1,
'getdec_internal_object_set_argument_54'/1,
'getdec_internal_object_set_argument_14'/1,
'getdec_internal_object_set_argument_53'/1,
'getdec_internal_object_set_argument_13'/1,
'getdec_internal_object_set_argument_52'/1,
'getdec_internal_object_set_argument_12'/1,
'getdec_internal_object_set_argument_51'/1,
'getdec_internal_object_set_argument_11'/1,
'getdec_internal_object_set_argument_50'/1,
'getdec_internal_object_set_argument_10'/1,
'getdec_internal_object_set_argument_69'/1,
'getdec_internal_object_set_argument_29'/1,
'getdec_internal_object_set_argument_68'/1,
'getdec_internal_object_set_argument_28'/1,
'getdec_internal_object_set_argument_67'/1,
'getdec_internal_object_set_argument_27'/1,
'getdec_internal_object_set_argument_66'/1,
'getdec_internal_object_set_argument_26'/1,
'getdec_internal_object_set_argument_65'/1,
'getdec_internal_object_set_argument_25'/1,
'getdec_internal_object_set_argument_64'/1,
'getdec_internal_object_set_argument_24'/1,
'getdec_internal_object_set_argument_63'/1,
'getdec_internal_object_set_argument_23'/1,
'getdec_internal_object_set_argument_62'/1,
'getdec_internal_object_set_argument_22'/1,
'getdec_internal_object_set_argument_61'/1,
'getdec_internal_object_set_argument_21'/1,
'getdec_internal_object_set_argument_60'/1,
'getdec_internal_object_set_argument_20'/1
]).

-export([info/0]).


-export([encode/2,decode/2]).

encoding_rule() -> ber.

bit_string_format() -> bitstring.

legacy_erlang_types() -> false.

encode(Type, Data) ->
try iolist_to_binary(element(1, encode_disp(Type, Data))) of
  Bytes ->
    {ok,Bytes}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

decode(Type,Data) ->
try decode_disp(Type, element(1, ber_decode_nif(Data))) of
  Result ->
    {ok,Result}
  catch
    Class:Exception when Class =:= error; Class =:= exit ->
      case Exception of
        {error,Reason}=Error ->
          Error;
        Reason ->
         {error,{asn1,Reason}}
      end
end.

encode_disp('TriggeringMessage',Data) -> 'enc_TriggeringMessage'(Data);
encode_disp('ProtocolIE-ID',Data) -> 'enc_ProtocolIE-ID'(Data);
encode_disp('ProcedureCode',Data) -> 'enc_ProcedureCode'(Data);
encode_disp('PrivateIE-ID',Data) -> 'enc_PrivateIE-ID'(Data);
encode_disp('Presence',Data) -> 'enc_Presence'(Data);
encode_disp('Criticality',Data) -> 'enc_Criticality'(Data);
encode_disp('PrivateMessage',Data) -> 'enc_PrivateMessage'(Data);
encode_disp('CellMeasurementResult-Item',Data) -> 'enc_CellMeasurementResult-Item'(Data);
encode_disp('CellMeasurementResult-List',Data) -> 'enc_CellMeasurementResult-List'(Data);
encode_disp('ResourceStatusUpdate',Data) -> 'enc_ResourceStatusUpdate'(Data);
encode_disp('ResourceStatusFailure',Data) -> 'enc_ResourceStatusFailure'(Data);
encode_disp('ResourceStatusResponse',Data) -> 'enc_ResourceStatusResponse'(Data);
encode_disp('ReportingPeriodicity',Data) -> 'enc_ReportingPeriodicity'(Data);
encode_disp('CellToReport-Item',Data) -> 'enc_CellToReport-Item'(Data);
encode_disp('CellToReport-List',Data) -> 'enc_CellToReport-List'(Data);
encode_disp('ResourceStatusRequest',Data) -> 'enc_ResourceStatusRequest'(Data);
encode_disp('ENBConfigurationUpdateFailure',Data) -> 'enc_ENBConfigurationUpdateFailure'(Data);
encode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'enc_ENBConfigurationUpdateAcknowledge'(Data);
encode_disp('Old-ECGIs',Data) -> 'enc_Old-ECGIs'(Data);
encode_disp('ServedCellsToModify-Item',Data) -> 'enc_ServedCellsToModify-Item'(Data);
encode_disp('ServedCellsToModify',Data) -> 'enc_ServedCellsToModify'(Data);
encode_disp('ENBConfigurationUpdate',Data) -> 'enc_ENBConfigurationUpdate'(Data);
encode_disp('CellInformation-Item',Data) -> 'enc_CellInformation-Item'(Data);
encode_disp('CellInformation-List',Data) -> 'enc_CellInformation-List'(Data);
encode_disp('LoadInformation',Data) -> 'enc_LoadInformation'(Data);
encode_disp('X2SetupFailure',Data) -> 'enc_X2SetupFailure'(Data);
encode_disp('X2SetupResponse',Data) -> 'enc_X2SetupResponse'(Data);
encode_disp('X2SetupRequest',Data) -> 'enc_X2SetupRequest'(Data);
encode_disp('ResetResponse',Data) -> 'enc_ResetResponse'(Data);
encode_disp('ResetRequest',Data) -> 'enc_ResetRequest'(Data);
encode_disp('ErrorIndication',Data) -> 'enc_ErrorIndication'(Data);
encode_disp('HandoverCancel',Data) -> 'enc_HandoverCancel'(Data);
encode_disp('UEContextRelease',Data) -> 'enc_UEContextRelease'(Data);
encode_disp('E-RABs-SubjectToStatusTransfer-Item',Data) -> 'enc_E-RABs-SubjectToStatusTransfer-Item'(Data);
encode_disp('E-RABs-SubjectToStatusTransfer-List',Data) -> 'enc_E-RABs-SubjectToStatusTransfer-List'(Data);
encode_disp('SNStatusTransfer',Data) -> 'enc_SNStatusTransfer'(Data);
encode_disp('HandoverPreparationFailure',Data) -> 'enc_HandoverPreparationFailure'(Data);
encode_disp('E-RABs-Admitted-Item',Data) -> 'enc_E-RABs-Admitted-Item'(Data);
encode_disp('E-RABs-Admitted-List',Data) -> 'enc_E-RABs-Admitted-List'(Data);
encode_disp('HandoverRequestAcknowledge',Data) -> 'enc_HandoverRequestAcknowledge'(Data);
encode_disp('E-RABs-ToBeSetup-Item',Data) -> 'enc_E-RABs-ToBeSetup-Item'(Data);
encode_disp('E-RABs-ToBeSetup-List',Data) -> 'enc_E-RABs-ToBeSetup-List'(Data);
encode_disp('UE-ContextInformation',Data) -> 'enc_UE-ContextInformation'(Data);
encode_disp('HandoverRequest',Data) -> 'enc_HandoverRequest'(Data);
encode_disp('UL-HighInterferenceIndication',Data) -> 'enc_UL-HighInterferenceIndication'(Data);
encode_disp('UL-HighInterferenceIndicationInfo-Item',Data) -> 'enc_UL-HighInterferenceIndicationInfo-Item'(Data);
encode_disp('UL-HighInterferenceIndicationInfo',Data) -> 'enc_UL-HighInterferenceIndicationInfo'(Data);
encode_disp('UL-InterferenceOverloadIndication-Item',Data) -> 'enc_UL-InterferenceOverloadIndication-Item'(Data);
encode_disp('UL-InterferenceOverloadIndication',Data) -> 'enc_UL-InterferenceOverloadIndication'(Data);
encode_disp('UESecurityCapabilities',Data) -> 'enc_UESecurityCapabilities'(Data);
encode_disp('UEAggregateMaximumBitRate',Data) -> 'enc_UEAggregateMaximumBitRate'(Data);
encode_disp('UE-X2AP-ID',Data) -> 'enc_UE-X2AP-ID'(Data);
encode_disp('UE-S1AP-ID',Data) -> 'enc_UE-S1AP-ID'(Data);
encode_disp('UE-HistoryInformation',Data) -> 'enc_UE-HistoryInformation'(Data);
encode_disp('TypeOfError',Data) -> 'enc_TypeOfError'(Data);
encode_disp('TransportLayerAddress',Data) -> 'enc_TransportLayerAddress'(Data);
encode_disp('Transmission-Bandwidth',Data) -> 'enc_Transmission-Bandwidth'(Data);
encode_disp('TraceDepth',Data) -> 'enc_TraceDepth'(Data);
encode_disp('TraceCollectionEntityIPAddress',Data) -> 'enc_TraceCollectionEntityIPAddress'(Data);
encode_disp('TraceActivation',Data) -> 'enc_TraceActivation'(Data);
encode_disp('Time-UE-StayedInCell',Data) -> 'enc_Time-UE-StayedInCell'(Data);
encode_disp('TimeToWait',Data) -> 'enc_TimeToWait'(Data);
encode_disp('TargeteNBtoSource-eNBTransparentContainer',Data) -> 'enc_TargeteNBtoSource-eNBTransparentContainer'(Data);
encode_disp('TAC',Data) -> 'enc_TAC'(Data);
encode_disp('SubscriberProfileIDforRFP',Data) -> 'enc_SubscriberProfileIDforRFP'(Data);
encode_disp('SpecialSubframePatterns',Data) -> 'enc_SpecialSubframePatterns'(Data);
encode_disp('SpecialSubframe-Info',Data) -> 'enc_SpecialSubframe-Info'(Data);
encode_disp('SubframeAssignment',Data) -> 'enc_SubframeAssignment'(Data);
encode_disp('SRVCCOperationPossible',Data) -> 'enc_SRVCCOperationPossible'(Data);
encode_disp('ServedCell-Information',Data) -> 'enc_ServedCell-Information'(Data);
encode_disp('ServedCells',Data) -> 'enc_ServedCells'(Data);
encode_disp('S1TNLLoadIndicator',Data) -> 'enc_S1TNLLoadIndicator'(Data);
encode_disp('UL-Total-PRB-usage',Data) -> 'enc_UL-Total-PRB-usage'(Data);
encode_disp('DL-Total-PRB-usage',Data) -> 'enc_DL-Total-PRB-usage'(Data);
encode_disp('UL-non-GBR-PRB-usage',Data) -> 'enc_UL-non-GBR-PRB-usage'(Data);
encode_disp('DL-non-GBR-PRB-usage',Data) -> 'enc_DL-non-GBR-PRB-usage'(Data);
encode_disp('UL-GBR-PRB-usage',Data) -> 'enc_UL-GBR-PRB-usage'(Data);
encode_disp('DL-GBR-PRB-usage',Data) -> 'enc_DL-GBR-PRB-usage'(Data);
encode_disp('RadioResourceStatus',Data) -> 'enc_RadioResourceStatus'(Data);
encode_disp('RRC-Context',Data) -> 'enc_RRC-Context'(Data);
encode_disp('RNTP-Threshold',Data) -> 'enc_RNTP-Threshold'(Data);
encode_disp('ReportCharacteristics',Data) -> 'enc_ReportCharacteristics'(Data);
encode_disp('ReportArea',Data) -> 'enc_ReportArea'(Data);
encode_disp('RelativeNarrowbandTxPower',Data) -> 'enc_RelativeNarrowbandTxPower'(Data);
encode_disp('Registration-Request',Data) -> 'enc_Registration-Request'(Data);
encode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'enc_ReceiveStatusofULPDCPSDUs'(Data);
encode_disp('QCI',Data) -> 'enc_QCI'(Data);
encode_disp('PriorityLevel',Data) -> 'enc_PriorityLevel'(Data);
encode_disp('Pre-emptionVulnerability',Data) -> 'enc_Pre-emptionVulnerability'(Data);
encode_disp('Pre-emptionCapability',Data) -> 'enc_Pre-emptionCapability'(Data);
encode_disp('PLMN-Identity',Data) -> 'enc_PLMN-Identity'(Data);
encode_disp('PCI',Data) -> 'enc_PCI'(Data);
encode_disp('PDCP-SN',Data) -> 'enc_PDCP-SN'(Data);
encode_disp('NextHopChainingCount',Data) -> 'enc_NextHopChainingCount'(Data);
encode_disp('Neighbour-Information',Data) -> 'enc_Neighbour-Information'(Data);
encode_disp('Measurement-ID',Data) -> 'enc_Measurement-ID'(Data);
encode_disp('MME-Code',Data) -> 'enc_MME-Code'(Data);
encode_disp('MME-Group-ID',Data) -> 'enc_MME-Group-ID'(Data);
encode_disp('LocationReportingInformation',Data) -> 'enc_LocationReportingInformation'(Data);
encode_disp('LoadIndicator',Data) -> 'enc_LoadIndicator'(Data);
encode_disp('LastVisitedGERANCellInformation',Data) -> 'enc_LastVisitedGERANCellInformation'(Data);
encode_disp('LastVisitedUTRANCellInformation',Data) -> 'enc_LastVisitedUTRANCellInformation'(Data);
encode_disp('LastVisitedEUTRANCellInformation',Data) -> 'enc_LastVisitedEUTRANCellInformation'(Data);
encode_disp('LastVisitedCell-Item',Data) -> 'enc_LastVisitedCell-Item'(Data);
encode_disp('LAC',Data) -> 'enc_LAC'(Data);
encode_disp('Key-eNodeB-Star',Data) -> 'enc_Key-eNodeB-Star'(Data);
encode_disp('InterfacesToTrace',Data) -> 'enc_InterfacesToTrace'(Data);
encode_disp('IntegrityProtectionAlgorithms',Data) -> 'enc_IntegrityProtectionAlgorithms'(Data);
encode_disp('HWLoadIndicator',Data) -> 'enc_HWLoadIndicator'(Data);
encode_disp('HFN',Data) -> 'enc_HFN'(Data);
encode_disp('HandoverRestrictionList',Data) -> 'enc_HandoverRestrictionList'(Data);
encode_disp('GUMMEI',Data) -> 'enc_GUMMEI'(Data);
encode_disp('GU-Group-ID',Data) -> 'enc_GU-Group-ID'(Data);
encode_disp('GUGroupIDList',Data) -> 'enc_GUGroupIDList'(Data);
encode_disp('GTP-TEI',Data) -> 'enc_GTP-TEI'(Data);
encode_disp('GTPtunnelEndpoint',Data) -> 'enc_GTPtunnelEndpoint'(Data);
encode_disp('GlobalENB-ID',Data) -> 'enc_GlobalENB-ID'(Data);
encode_disp('GBR-QosInformation',Data) -> 'enc_GBR-QosInformation'(Data);
encode_disp('ForbiddenLACs',Data) -> 'enc_ForbiddenLACs'(Data);
encode_disp('ForbiddenLAs-Item',Data) -> 'enc_ForbiddenLAs-Item'(Data);
encode_disp('ForbiddenLAs',Data) -> 'enc_ForbiddenLAs'(Data);
encode_disp('ForbiddenTACs',Data) -> 'enc_ForbiddenTACs'(Data);
encode_disp('ForbiddenTAs-Item',Data) -> 'enc_ForbiddenTAs-Item'(Data);
encode_disp('ForbiddenTAs',Data) -> 'enc_ForbiddenTAs'(Data);
encode_disp('ForbiddenInterRATs',Data) -> 'enc_ForbiddenInterRATs'(Data);
encode_disp('EventType',Data) -> 'enc_EventType'(Data);
encode_disp('EUTRANTraceID',Data) -> 'enc_EUTRANTraceID'(Data);
encode_disp('EUTRANCellIdentifier',Data) -> 'enc_EUTRANCellIdentifier'(Data);
encode_disp('E-RAB-Item',Data) -> 'enc_E-RAB-Item'(Data);
encode_disp('E-RAB-List',Data) -> 'enc_E-RAB-List'(Data);
encode_disp('E-RAB-Level-QoS-Parameters',Data) -> 'enc_E-RAB-Level-QoS-Parameters'(Data);
encode_disp('E-RAB-ID',Data) -> 'enc_E-RAB-ID'(Data);
encode_disp('EPLMNs',Data) -> 'enc_EPLMNs'(Data);
encode_disp('EncryptionAlgorithms',Data) -> 'enc_EncryptionAlgorithms'(Data);
encode_disp('ENB-ID',Data) -> 'enc_ENB-ID'(Data);
encode_disp('ECGI',Data) -> 'enc_ECGI'(Data);
encode_disp('EUTRA-Mode-Info',Data) -> 'enc_EUTRA-Mode-Info'(Data);
encode_disp('TDD-Info',Data) -> 'enc_TDD-Info'(Data);
encode_disp('FDD-Info',Data) -> 'enc_FDD-Info'(Data);
encode_disp('EARFCN',Data) -> 'enc_EARFCN'(Data);
encode_disp('DL-Forwarding',Data) -> 'enc_DL-Forwarding'(Data);
encode_disp('CyclicPrefixUL',Data) -> 'enc_CyclicPrefixUL'(Data);
encode_disp('CyclicPrefixDL',Data) -> 'enc_CyclicPrefixDL'(Data);
encode_disp('CriticalityDiagnostics-IE-List',Data) -> 'enc_CriticalityDiagnostics-IE-List'(Data);
encode_disp('CriticalityDiagnostics',Data) -> 'enc_CriticalityDiagnostics'(Data);
encode_disp('COUNTvalue',Data) -> 'enc_COUNTvalue'(Data);
encode_disp('CellType',Data) -> 'enc_CellType'(Data);
encode_disp('Cell-Size',Data) -> 'enc_Cell-Size'(Data);
encode_disp('CauseTransport',Data) -> 'enc_CauseTransport'(Data);
encode_disp('CauseRadioNetwork',Data) -> 'enc_CauseRadioNetwork'(Data);
encode_disp('CauseProtocol',Data) -> 'enc_CauseProtocol'(Data);
encode_disp('CauseMisc',Data) -> 'enc_CauseMisc'(Data);
encode_disp('Cause',Data) -> 'enc_Cause'(Data);
encode_disp('BroadcastPLMNs-Item',Data) -> 'enc_BroadcastPLMNs-Item'(Data);
encode_disp('BitRate',Data) -> 'enc_BitRate'(Data);
encode_disp('AllocationAndRetentionPriority',Data) -> 'enc_AllocationAndRetentionPriority'(Data);
encode_disp('AS-SecurityInformation',Data) -> 'enc_AS-SecurityInformation'(Data);
encode_disp('UnsuccessfulOutcome',Data) -> 'enc_UnsuccessfulOutcome'(Data);
encode_disp('SuccessfulOutcome',Data) -> 'enc_SuccessfulOutcome'(Data);
encode_disp('InitiatingMessage',Data) -> 'enc_InitiatingMessage'(Data);
encode_disp('X2AP-PDU',Data) -> 'enc_X2AP-PDU'(Data);
encode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).


decode_disp('TriggeringMessage',Data) -> 'dec_TriggeringMessage'(Data);
decode_disp('ProtocolIE-ID',Data) -> 'dec_ProtocolIE-ID'(Data);
decode_disp('ProcedureCode',Data) -> 'dec_ProcedureCode'(Data);
decode_disp('PrivateIE-ID',Data) -> 'dec_PrivateIE-ID'(Data);
decode_disp('Presence',Data) -> 'dec_Presence'(Data);
decode_disp('Criticality',Data) -> 'dec_Criticality'(Data);
decode_disp('PrivateMessage',Data) -> 'dec_PrivateMessage'(Data);
decode_disp('CellMeasurementResult-Item',Data) -> 'dec_CellMeasurementResult-Item'(Data);
decode_disp('CellMeasurementResult-List',Data) -> 'dec_CellMeasurementResult-List'(Data);
decode_disp('ResourceStatusUpdate',Data) -> 'dec_ResourceStatusUpdate'(Data);
decode_disp('ResourceStatusFailure',Data) -> 'dec_ResourceStatusFailure'(Data);
decode_disp('ResourceStatusResponse',Data) -> 'dec_ResourceStatusResponse'(Data);
decode_disp('ReportingPeriodicity',Data) -> 'dec_ReportingPeriodicity'(Data);
decode_disp('CellToReport-Item',Data) -> 'dec_CellToReport-Item'(Data);
decode_disp('CellToReport-List',Data) -> 'dec_CellToReport-List'(Data);
decode_disp('ResourceStatusRequest',Data) -> 'dec_ResourceStatusRequest'(Data);
decode_disp('ENBConfigurationUpdateFailure',Data) -> 'dec_ENBConfigurationUpdateFailure'(Data);
decode_disp('ENBConfigurationUpdateAcknowledge',Data) -> 'dec_ENBConfigurationUpdateAcknowledge'(Data);
decode_disp('Old-ECGIs',Data) -> 'dec_Old-ECGIs'(Data);
decode_disp('ServedCellsToModify-Item',Data) -> 'dec_ServedCellsToModify-Item'(Data);
decode_disp('ServedCellsToModify',Data) -> 'dec_ServedCellsToModify'(Data);
decode_disp('ENBConfigurationUpdate',Data) -> 'dec_ENBConfigurationUpdate'(Data);
decode_disp('CellInformation-Item',Data) -> 'dec_CellInformation-Item'(Data);
decode_disp('CellInformation-List',Data) -> 'dec_CellInformation-List'(Data);
decode_disp('LoadInformation',Data) -> 'dec_LoadInformation'(Data);
decode_disp('X2SetupFailure',Data) -> 'dec_X2SetupFailure'(Data);
decode_disp('X2SetupResponse',Data) -> 'dec_X2SetupResponse'(Data);
decode_disp('X2SetupRequest',Data) -> 'dec_X2SetupRequest'(Data);
decode_disp('ResetResponse',Data) -> 'dec_ResetResponse'(Data);
decode_disp('ResetRequest',Data) -> 'dec_ResetRequest'(Data);
decode_disp('ErrorIndication',Data) -> 'dec_ErrorIndication'(Data);
decode_disp('HandoverCancel',Data) -> 'dec_HandoverCancel'(Data);
decode_disp('UEContextRelease',Data) -> 'dec_UEContextRelease'(Data);
decode_disp('E-RABs-SubjectToStatusTransfer-Item',Data) -> 'dec_E-RABs-SubjectToStatusTransfer-Item'(Data);
decode_disp('E-RABs-SubjectToStatusTransfer-List',Data) -> 'dec_E-RABs-SubjectToStatusTransfer-List'(Data);
decode_disp('SNStatusTransfer',Data) -> 'dec_SNStatusTransfer'(Data);
decode_disp('HandoverPreparationFailure',Data) -> 'dec_HandoverPreparationFailure'(Data);
decode_disp('E-RABs-Admitted-Item',Data) -> 'dec_E-RABs-Admitted-Item'(Data);
decode_disp('E-RABs-Admitted-List',Data) -> 'dec_E-RABs-Admitted-List'(Data);
decode_disp('HandoverRequestAcknowledge',Data) -> 'dec_HandoverRequestAcknowledge'(Data);
decode_disp('E-RABs-ToBeSetup-Item',Data) -> 'dec_E-RABs-ToBeSetup-Item'(Data);
decode_disp('E-RABs-ToBeSetup-List',Data) -> 'dec_E-RABs-ToBeSetup-List'(Data);
decode_disp('UE-ContextInformation',Data) -> 'dec_UE-ContextInformation'(Data);
decode_disp('HandoverRequest',Data) -> 'dec_HandoverRequest'(Data);
decode_disp('UL-HighInterferenceIndication',Data) -> 'dec_UL-HighInterferenceIndication'(Data);
decode_disp('UL-HighInterferenceIndicationInfo-Item',Data) -> 'dec_UL-HighInterferenceIndicationInfo-Item'(Data);
decode_disp('UL-HighInterferenceIndicationInfo',Data) -> 'dec_UL-HighInterferenceIndicationInfo'(Data);
decode_disp('UL-InterferenceOverloadIndication-Item',Data) -> 'dec_UL-InterferenceOverloadIndication-Item'(Data);
decode_disp('UL-InterferenceOverloadIndication',Data) -> 'dec_UL-InterferenceOverloadIndication'(Data);
decode_disp('UESecurityCapabilities',Data) -> 'dec_UESecurityCapabilities'(Data);
decode_disp('UEAggregateMaximumBitRate',Data) -> 'dec_UEAggregateMaximumBitRate'(Data);
decode_disp('UE-X2AP-ID',Data) -> 'dec_UE-X2AP-ID'(Data);
decode_disp('UE-S1AP-ID',Data) -> 'dec_UE-S1AP-ID'(Data);
decode_disp('UE-HistoryInformation',Data) -> 'dec_UE-HistoryInformation'(Data);
decode_disp('TypeOfError',Data) -> 'dec_TypeOfError'(Data);
decode_disp('TransportLayerAddress',Data) -> 'dec_TransportLayerAddress'(Data);
decode_disp('Transmission-Bandwidth',Data) -> 'dec_Transmission-Bandwidth'(Data);
decode_disp('TraceDepth',Data) -> 'dec_TraceDepth'(Data);
decode_disp('TraceCollectionEntityIPAddress',Data) -> 'dec_TraceCollectionEntityIPAddress'(Data);
decode_disp('TraceActivation',Data) -> 'dec_TraceActivation'(Data);
decode_disp('Time-UE-StayedInCell',Data) -> 'dec_Time-UE-StayedInCell'(Data);
decode_disp('TimeToWait',Data) -> 'dec_TimeToWait'(Data);
decode_disp('TargeteNBtoSource-eNBTransparentContainer',Data) -> 'dec_TargeteNBtoSource-eNBTransparentContainer'(Data);
decode_disp('TAC',Data) -> 'dec_TAC'(Data);
decode_disp('SubscriberProfileIDforRFP',Data) -> 'dec_SubscriberProfileIDforRFP'(Data);
decode_disp('SpecialSubframePatterns',Data) -> 'dec_SpecialSubframePatterns'(Data);
decode_disp('SpecialSubframe-Info',Data) -> 'dec_SpecialSubframe-Info'(Data);
decode_disp('SubframeAssignment',Data) -> 'dec_SubframeAssignment'(Data);
decode_disp('SRVCCOperationPossible',Data) -> 'dec_SRVCCOperationPossible'(Data);
decode_disp('ServedCell-Information',Data) -> 'dec_ServedCell-Information'(Data);
decode_disp('ServedCells',Data) -> 'dec_ServedCells'(Data);
decode_disp('S1TNLLoadIndicator',Data) -> 'dec_S1TNLLoadIndicator'(Data);
decode_disp('UL-Total-PRB-usage',Data) -> 'dec_UL-Total-PRB-usage'(Data);
decode_disp('DL-Total-PRB-usage',Data) -> 'dec_DL-Total-PRB-usage'(Data);
decode_disp('UL-non-GBR-PRB-usage',Data) -> 'dec_UL-non-GBR-PRB-usage'(Data);
decode_disp('DL-non-GBR-PRB-usage',Data) -> 'dec_DL-non-GBR-PRB-usage'(Data);
decode_disp('UL-GBR-PRB-usage',Data) -> 'dec_UL-GBR-PRB-usage'(Data);
decode_disp('DL-GBR-PRB-usage',Data) -> 'dec_DL-GBR-PRB-usage'(Data);
decode_disp('RadioResourceStatus',Data) -> 'dec_RadioResourceStatus'(Data);
decode_disp('RRC-Context',Data) -> 'dec_RRC-Context'(Data);
decode_disp('RNTP-Threshold',Data) -> 'dec_RNTP-Threshold'(Data);
decode_disp('ReportCharacteristics',Data) -> 'dec_ReportCharacteristics'(Data);
decode_disp('ReportArea',Data) -> 'dec_ReportArea'(Data);
decode_disp('RelativeNarrowbandTxPower',Data) -> 'dec_RelativeNarrowbandTxPower'(Data);
decode_disp('Registration-Request',Data) -> 'dec_Registration-Request'(Data);
decode_disp('ReceiveStatusofULPDCPSDUs',Data) -> 'dec_ReceiveStatusofULPDCPSDUs'(Data);
decode_disp('QCI',Data) -> 'dec_QCI'(Data);
decode_disp('PriorityLevel',Data) -> 'dec_PriorityLevel'(Data);
decode_disp('Pre-emptionVulnerability',Data) -> 'dec_Pre-emptionVulnerability'(Data);
decode_disp('Pre-emptionCapability',Data) -> 'dec_Pre-emptionCapability'(Data);
decode_disp('PLMN-Identity',Data) -> 'dec_PLMN-Identity'(Data);
decode_disp('PCI',Data) -> 'dec_PCI'(Data);
decode_disp('PDCP-SN',Data) -> 'dec_PDCP-SN'(Data);
decode_disp('NextHopChainingCount',Data) -> 'dec_NextHopChainingCount'(Data);
decode_disp('Neighbour-Information',Data) -> 'dec_Neighbour-Information'(Data);
decode_disp('Measurement-ID',Data) -> 'dec_Measurement-ID'(Data);
decode_disp('MME-Code',Data) -> 'dec_MME-Code'(Data);
decode_disp('MME-Group-ID',Data) -> 'dec_MME-Group-ID'(Data);
decode_disp('LocationReportingInformation',Data) -> 'dec_LocationReportingInformation'(Data);
decode_disp('LoadIndicator',Data) -> 'dec_LoadIndicator'(Data);
decode_disp('LastVisitedGERANCellInformation',Data) -> 'dec_LastVisitedGERANCellInformation'(Data);
decode_disp('LastVisitedUTRANCellInformation',Data) -> 'dec_LastVisitedUTRANCellInformation'(Data);
decode_disp('LastVisitedEUTRANCellInformation',Data) -> 'dec_LastVisitedEUTRANCellInformation'(Data);
decode_disp('LastVisitedCell-Item',Data) -> 'dec_LastVisitedCell-Item'(Data);
decode_disp('LAC',Data) -> 'dec_LAC'(Data);
decode_disp('Key-eNodeB-Star',Data) -> 'dec_Key-eNodeB-Star'(Data);
decode_disp('InterfacesToTrace',Data) -> 'dec_InterfacesToTrace'(Data);
decode_disp('IntegrityProtectionAlgorithms',Data) -> 'dec_IntegrityProtectionAlgorithms'(Data);
decode_disp('HWLoadIndicator',Data) -> 'dec_HWLoadIndicator'(Data);
decode_disp('HFN',Data) -> 'dec_HFN'(Data);
decode_disp('HandoverRestrictionList',Data) -> 'dec_HandoverRestrictionList'(Data);
decode_disp('GUMMEI',Data) -> 'dec_GUMMEI'(Data);
decode_disp('GU-Group-ID',Data) -> 'dec_GU-Group-ID'(Data);
decode_disp('GUGroupIDList',Data) -> 'dec_GUGroupIDList'(Data);
decode_disp('GTP-TEI',Data) -> 'dec_GTP-TEI'(Data);
decode_disp('GTPtunnelEndpoint',Data) -> 'dec_GTPtunnelEndpoint'(Data);
decode_disp('GlobalENB-ID',Data) -> 'dec_GlobalENB-ID'(Data);
decode_disp('GBR-QosInformation',Data) -> 'dec_GBR-QosInformation'(Data);
decode_disp('ForbiddenLACs',Data) -> 'dec_ForbiddenLACs'(Data);
decode_disp('ForbiddenLAs-Item',Data) -> 'dec_ForbiddenLAs-Item'(Data);
decode_disp('ForbiddenLAs',Data) -> 'dec_ForbiddenLAs'(Data);
decode_disp('ForbiddenTACs',Data) -> 'dec_ForbiddenTACs'(Data);
decode_disp('ForbiddenTAs-Item',Data) -> 'dec_ForbiddenTAs-Item'(Data);
decode_disp('ForbiddenTAs',Data) -> 'dec_ForbiddenTAs'(Data);
decode_disp('ForbiddenInterRATs',Data) -> 'dec_ForbiddenInterRATs'(Data);
decode_disp('EventType',Data) -> 'dec_EventType'(Data);
decode_disp('EUTRANTraceID',Data) -> 'dec_EUTRANTraceID'(Data);
decode_disp('EUTRANCellIdentifier',Data) -> 'dec_EUTRANCellIdentifier'(Data);
decode_disp('E-RAB-Item',Data) -> 'dec_E-RAB-Item'(Data);
decode_disp('E-RAB-List',Data) -> 'dec_E-RAB-List'(Data);
decode_disp('E-RAB-Level-QoS-Parameters',Data) -> 'dec_E-RAB-Level-QoS-Parameters'(Data);
decode_disp('E-RAB-ID',Data) -> 'dec_E-RAB-ID'(Data);
decode_disp('EPLMNs',Data) -> 'dec_EPLMNs'(Data);
decode_disp('EncryptionAlgorithms',Data) -> 'dec_EncryptionAlgorithms'(Data);
decode_disp('ENB-ID',Data) -> 'dec_ENB-ID'(Data);
decode_disp('ECGI',Data) -> 'dec_ECGI'(Data);
decode_disp('EUTRA-Mode-Info',Data) -> 'dec_EUTRA-Mode-Info'(Data);
decode_disp('TDD-Info',Data) -> 'dec_TDD-Info'(Data);
decode_disp('FDD-Info',Data) -> 'dec_FDD-Info'(Data);
decode_disp('EARFCN',Data) -> 'dec_EARFCN'(Data);
decode_disp('DL-Forwarding',Data) -> 'dec_DL-Forwarding'(Data);
decode_disp('CyclicPrefixUL',Data) -> 'dec_CyclicPrefixUL'(Data);
decode_disp('CyclicPrefixDL',Data) -> 'dec_CyclicPrefixDL'(Data);
decode_disp('CriticalityDiagnostics-IE-List',Data) -> 'dec_CriticalityDiagnostics-IE-List'(Data);
decode_disp('CriticalityDiagnostics',Data) -> 'dec_CriticalityDiagnostics'(Data);
decode_disp('COUNTvalue',Data) -> 'dec_COUNTvalue'(Data);
decode_disp('CellType',Data) -> 'dec_CellType'(Data);
decode_disp('Cell-Size',Data) -> 'dec_Cell-Size'(Data);
decode_disp('CauseTransport',Data) -> 'dec_CauseTransport'(Data);
decode_disp('CauseRadioNetwork',Data) -> 'dec_CauseRadioNetwork'(Data);
decode_disp('CauseProtocol',Data) -> 'dec_CauseProtocol'(Data);
decode_disp('CauseMisc',Data) -> 'dec_CauseMisc'(Data);
decode_disp('Cause',Data) -> 'dec_Cause'(Data);
decode_disp('BroadcastPLMNs-Item',Data) -> 'dec_BroadcastPLMNs-Item'(Data);
decode_disp('BitRate',Data) -> 'dec_BitRate'(Data);
decode_disp('AllocationAndRetentionPriority',Data) -> 'dec_AllocationAndRetentionPriority'(Data);
decode_disp('AS-SecurityInformation',Data) -> 'dec_AS-SecurityInformation'(Data);
decode_disp('UnsuccessfulOutcome',Data) -> 'dec_UnsuccessfulOutcome'(Data);
decode_disp('SuccessfulOutcome',Data) -> 'dec_SuccessfulOutcome'(Data);
decode_disp('InitiatingMessage',Data) -> 'dec_InitiatingMessage'(Data);
decode_disp('X2AP-PDU',Data) -> 'dec_X2AP-PDU'(Data);
decode_disp(Type,_Data) -> exit({error,{asn1,{undefined_type,Type}}}).




info() ->
   case ?MODULE:module_info(attributes) of
     Attributes when is_list(Attributes) ->
       case lists:keyfind(asn1_info, 1, Attributes) of
         {_,Info} when is_list(Info) ->
           Info;
         _ ->
           []
       end;
     _ ->
       []
   end.


%%================================
%%  TriggeringMessage
%%================================
'enc_TriggeringMessage'(Val) ->
    'enc_TriggeringMessage'(Val, [<<10>>]).

'enc_TriggeringMessage'(Val, TagIn) ->
case Val of
'initiating-message' -> encode_tags(TagIn, [0], 1);
'successful-outcome' -> encode_tags(TagIn, [1], 1);
'unsuccessful-outcome' -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TriggeringMessage'(Tlv) ->
   'dec_TriggeringMessage'(Tlv, [10]).

'dec_TriggeringMessage'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessful-outcome';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  ProtocolIE-ID
%%================================
'enc_ProtocolIE-ID'(Val) ->
    'enc_ProtocolIE-ID'(Val, [<<2>>]).

'enc_ProtocolIE-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ProtocolIE-ID'(Tlv) ->
   'dec_ProtocolIE-ID'(Tlv, [2]).

'dec_ProtocolIE-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ProcedureCode
%%================================
'enc_ProcedureCode'(Val) ->
    'enc_ProcedureCode'(Val, [<<2>>]).

'enc_ProcedureCode'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_ProcedureCode'(Tlv) ->
   'dec_ProcedureCode'(Tlv, [2]).

'dec_ProcedureCode'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PrivateIE-ID
%%================================
'enc_PrivateIE-ID'(Val) ->
    'enc_PrivateIE-ID'(Val, []).

'enc_PrivateIE-ID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      local ->
         encode_integer(element(2,Val), [<<128>>]);
      global ->
         encode_object_identifier(element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_PrivateIE-ID'(Tlv) ->
   'dec_PrivateIE-ID'(Tlv, []).

'dec_PrivateIE-ID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'local'
    {131072, V1} -> 
        {local, begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'global'
    {131073, V1} -> 
        {global, decode_object_identifier(V1, [])};

      Else -> 
         exit({error,{asn1,{invalid_choice_tag,Else}}})
   end
.


%%================================
%%  Presence
%%================================
'enc_Presence'(Val) ->
    'enc_Presence'(Val, [<<10>>]).

'enc_Presence'(Val, TagIn) ->
case Val of
optional -> encode_tags(TagIn, [0], 1);
conditional -> encode_tags(TagIn, [1], 1);
mandatory -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Presence'(Tlv) ->
   'dec_Presence'(Tlv, [10]).

'dec_Presence'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> optional;
1 -> conditional;
2 -> mandatory;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Criticality
%%================================
'enc_Criticality'(Val) ->
    'enc_Criticality'(Val, [<<10>>]).

'enc_Criticality'(Val, TagIn) ->
case Val of
reject -> encode_tags(TagIn, [0], 1);
ignore -> encode_tags(TagIn, [1], 1);
notify -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Criticality'(Tlv) ->
   'dec_Criticality'(Tlv, [10]).

'dec_Criticality'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PrivateMessage
%%================================
'enc_PrivateMessage'(Val) ->
    'enc_PrivateMessage'(Val, [<<48>>]).

'enc_PrivateMessage'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute privateIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PrivateMessage_privateIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  PrivateMessage_privateIEs
%%================================
'enc_PrivateMessage_privateIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_PrivateMessage_privateIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_PrivateMessage_privateIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_PrivateMessage_privateIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_PrivateMessage_privateIEs_PrivateIE-Field'(H, [<<48>>]),
   'enc_PrivateMessage_privateIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  PrivateMessage_privateIEs_PrivateIE-Field
%%================================
'enc_PrivateMessage_privateIEs_PrivateIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute id(1)   External X2AP:PrivateIE-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_PrivateIE-ID'(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type ASN1_OPEN_TYPE
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_open_type(Cindex3, [<<162>>]),

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_PrivateMessage_privateIEs_PrivateIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1)   External X2AP:PrivateIE-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PrivateIE-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type ASN1_OPEN_TYPE
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = decode_open_type_as_binary(V3, [131074]),

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'PrivateIE-Field', Term1, Term2, Term3}.

'dec_PrivateMessage_privateIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_PrivateMessage_privateIEs_PrivateIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_PrivateMessage'(Tlv) ->
   'dec_PrivateMessage'(Tlv, [16]).

'dec_PrivateMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute privateIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_PrivateMessage_privateIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'PrivateMessage', Term1}.



%%================================
%%  CellMeasurementResult-Item
%%================================
'enc_CellMeasurementResult-Item'(Val) ->
    'enc_CellMeasurementResult-Item'(Val, [<<48>>]).

'enc_CellMeasurementResult-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute hWOverLoadIndicator(2)   External X2AP:HWLoadIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HWLoadIndicator'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute s1TNLOverLoadIndicator(3)   External X2AP:S1TNLLoadIndicator OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_S1TNLLoadIndicator'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute radioresourceStatus(4)   External X2AP:RadioResourceStatus OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceStatus'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellMeasurementResult-Item_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellMeasurementResult-Item_iE-Extensions
%%================================
'enc_CellMeasurementResult-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellMeasurementResult-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellMeasurementResult-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellMeasurementResult-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellMeasurementResult-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_6'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_6'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellMeasurementResult-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellMeasurementResult-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellMeasurementResult-Item'(Tlv) ->
   'dec_CellMeasurementResult-Item'(Tlv, [16]).

'dec_CellMeasurementResult-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute hWOverLoadIndicator(2)   External X2AP:HWLoadIndicator OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_HWLoadIndicator'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute s1TNLOverLoadIndicator(3)   External X2AP:S1TNLLoadIndicator OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_S1TNLLoadIndicator'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute radioresourceStatus(4)   External X2AP:RadioResourceStatus OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RadioResourceStatus'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CellMeasurementResult-Item_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellMeasurementResult-Item', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  CellMeasurementResult-List
%%================================
'enc_CellMeasurementResult-List'(Val) ->
    'enc_CellMeasurementResult-List'(Val, [<<48>>]).

'enc_CellMeasurementResult-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellMeasurementResult-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellMeasurementResult-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellMeasurementResult-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellMeasurementResult-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_CellMeasurementResult-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellMeasurementResult-List_ProtocolIE-Field
%%================================
'enc_CellMeasurementResult-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_7'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellMeasurementResult-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_7'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_CellMeasurementResult-List'(Tlv) ->
   'dec_CellMeasurementResult-List'(Tlv, [16]).

'dec_CellMeasurementResult-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellMeasurementResult-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ResourceStatusUpdate
%%================================
'enc_ResourceStatusUpdate'(Val) ->
    'enc_ResourceStatusUpdate'(Val, [<<48>>]).

'enc_ResourceStatusUpdate'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResourceStatusUpdate_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResourceStatusUpdate_protocolIEs
%%================================
'enc_ResourceStatusUpdate_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResourceStatusUpdate_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResourceStatusUpdate_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResourceStatusUpdate_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResourceStatusUpdate_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResourceStatusUpdate_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_8'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_8'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResourceStatusUpdate_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResourceStatusUpdate_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResourceStatusUpdate'(Tlv) ->
   'dec_ResourceStatusUpdate'(Tlv, [16]).

'dec_ResourceStatusUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResourceStatusUpdate_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResourceStatusUpdate', Term1}.



%%================================
%%  ResourceStatusFailure
%%================================
'enc_ResourceStatusFailure'(Val) ->
    'enc_ResourceStatusFailure'(Val, [<<48>>]).

'enc_ResourceStatusFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResourceStatusFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResourceStatusFailure_protocolIEs
%%================================
'enc_ResourceStatusFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResourceStatusFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResourceStatusFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResourceStatusFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResourceStatusFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResourceStatusFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_9'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_9'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResourceStatusFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResourceStatusFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResourceStatusFailure'(Tlv) ->
   'dec_ResourceStatusFailure'(Tlv, [16]).

'dec_ResourceStatusFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResourceStatusFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResourceStatusFailure', Term1}.



%%================================
%%  ResourceStatusResponse
%%================================
'enc_ResourceStatusResponse'(Val) ->
    'enc_ResourceStatusResponse'(Val, [<<48>>]).

'enc_ResourceStatusResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResourceStatusResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResourceStatusResponse_protocolIEs
%%================================
'enc_ResourceStatusResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResourceStatusResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResourceStatusResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResourceStatusResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResourceStatusResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResourceStatusResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_10'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_10'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResourceStatusResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResourceStatusResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResourceStatusResponse'(Tlv) ->
   'dec_ResourceStatusResponse'(Tlv, [16]).

'dec_ResourceStatusResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResourceStatusResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResourceStatusResponse', Term1}.



%%================================
%%  ReportingPeriodicity
%%================================
'enc_ReportingPeriodicity'(Val) ->
    'enc_ReportingPeriodicity'(Val, [<<10>>]).

'enc_ReportingPeriodicity'(Val, TagIn) ->
case Val of
'one-thousand-ms' -> encode_tags(TagIn, [0], 1);
'two-thousand-ms' -> encode_tags(TagIn, [1], 1);
'five-thousand-ms' -> encode_tags(TagIn, [2], 1);
'ten-thousand-ms' -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReportingPeriodicity'(Tlv) ->
   'dec_ReportingPeriodicity'(Tlv, [10]).

'dec_ReportingPeriodicity'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'one-thousand-ms';
1 -> 'two-thousand-ms';
2 -> 'five-thousand-ms';
3 -> 'ten-thousand-ms';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CellToReport-Item
%%================================
'enc_CellToReport-Item'(Val) ->
    'enc_CellToReport-Item'(Val, [<<48>>]).

'enc_CellToReport-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellToReport-Item_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellToReport-Item_iE-Extensions
%%================================
'enc_CellToReport-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellToReport-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellToReport-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellToReport-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellToReport-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellToReport-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_11'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_11'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellToReport-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellToReport-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellToReport-Item'(Tlv) ->
   'dec_CellToReport-Item'(Tlv, [16]).

'dec_CellToReport-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellToReport-Item_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellToReport-Item', Term1, Term2}.



%%================================
%%  CellToReport-List
%%================================
'enc_CellToReport-List'(Val) ->
    'enc_CellToReport-List'(Val, [<<48>>]).

'enc_CellToReport-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellToReport-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellToReport-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellToReport-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellToReport-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_CellToReport-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellToReport-List_ProtocolIE-Field
%%================================
'enc_CellToReport-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_12'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellToReport-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_12'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_CellToReport-List'(Tlv) ->
   'dec_CellToReport-List'(Tlv, [16]).

'dec_CellToReport-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellToReport-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ResourceStatusRequest
%%================================
'enc_ResourceStatusRequest'(Val) ->
    'enc_ResourceStatusRequest'(Val, [<<48>>]).

'enc_ResourceStatusRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResourceStatusRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResourceStatusRequest_protocolIEs
%%================================
'enc_ResourceStatusRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResourceStatusRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResourceStatusRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResourceStatusRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResourceStatusRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResourceStatusRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_13'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_13'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResourceStatusRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResourceStatusRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResourceStatusRequest'(Tlv) ->
   'dec_ResourceStatusRequest'(Tlv, [16]).

'dec_ResourceStatusRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResourceStatusRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResourceStatusRequest', Term1}.



%%================================
%%  ENBConfigurationUpdateFailure
%%================================
'enc_ENBConfigurationUpdateFailure'(Val) ->
    'enc_ENBConfigurationUpdateFailure'(Val, [<<48>>]).

'enc_ENBConfigurationUpdateFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdateFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdateFailure_protocolIEs
%%================================
'enc_ENBConfigurationUpdateFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdateFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdateFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdateFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_14'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_14'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdateFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdateFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdateFailure'(Tlv) ->
   'dec_ENBConfigurationUpdateFailure'(Tlv, [16]).

'dec_ENBConfigurationUpdateFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdateFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdateFailure', Term1}.



%%================================
%%  ENBConfigurationUpdateAcknowledge
%%================================
'enc_ENBConfigurationUpdateAcknowledge'(Val) ->
    'enc_ENBConfigurationUpdateAcknowledge'(Val, [<<48>>]).

'enc_ENBConfigurationUpdateAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdateAcknowledge_protocolIEs
%%================================
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_15'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_15'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdateAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdateAcknowledge'(Tlv) ->
   'dec_ENBConfigurationUpdateAcknowledge'(Tlv, [16]).

'dec_ENBConfigurationUpdateAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdateAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdateAcknowledge', Term1}.



%%================================
%%  Old-ECGIs
%%================================
'enc_Old-ECGIs'(Val) ->
    'enc_Old-ECGIs'(Val, [<<48>>]).

'enc_Old-ECGIs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Old-ECGIs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Old-ECGIs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Old-ECGIs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ECGI'(H, [<<48>>]),
   'enc_Old-ECGIs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_Old-ECGIs'(Tlv) ->
   'dec_Old-ECGIs'(Tlv, [16]).

'dec_Old-ECGIs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ECGI'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ServedCellsToModify-Item
%%================================
'enc_ServedCellsToModify-Item'(Val) ->
    'enc_ServedCellsToModify-Item'(Val, [<<48>>]).

'enc_ServedCellsToModify-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute old-ecgi(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute servedCellInfo(2)   External X2AP:ServedCell-Information
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ServedCell-Information'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute neighbour-Info(3)   External X2AP:Neighbour-Information OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Neighbour-Information'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServedCellsToModify-Item_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServedCellsToModify-Item_iE-Extensions
%%================================
'enc_ServedCellsToModify-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ServedCellsToModify-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedCellsToModify-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedCellsToModify-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ServedCellsToModify-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_21'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_21'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ServedCellsToModify-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedCellsToModify-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ServedCellsToModify-Item'(Tlv) ->
   'dec_ServedCellsToModify-Item'(Tlv, [16]).

'dec_ServedCellsToModify-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute old-ecgi(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute servedCellInfo(2)   External X2AP:ServedCell-Information
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ServedCell-Information'(V2, [131073]),

%%-------------------------------------------------
%% attribute neighbour-Info(3)   External X2AP:Neighbour-Information OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_Neighbour-Information'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ServedCellsToModify-Item_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ServedCellsToModify-Item', Term1, Term2, Term3, Term4}.



%%================================
%%  ServedCellsToModify
%%================================
'enc_ServedCellsToModify'(Val) ->
    'enc_ServedCellsToModify'(Val, [<<48>>]).

'enc_ServedCellsToModify'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedCellsToModify_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedCellsToModify_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedCellsToModify_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedCellsToModify-Item'(H, [<<48>>]),
   'enc_ServedCellsToModify_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ServedCellsToModify'(Tlv) ->
   'dec_ServedCellsToModify'(Tlv, [16]).

'dec_ServedCellsToModify'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedCellsToModify-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ENBConfigurationUpdate
%%================================
'enc_ENBConfigurationUpdate'(Val) ->
    'enc_ENBConfigurationUpdate'(Val, [<<48>>]).

'enc_ENBConfigurationUpdate'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ENBConfigurationUpdate_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ENBConfigurationUpdate_protocolIEs
%%================================
'enc_ENBConfigurationUpdate_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ENBConfigurationUpdate_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ENBConfigurationUpdate_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ENBConfigurationUpdate_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ENBConfigurationUpdate_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field
%%================================
'enc_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_22'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_22'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ENBConfigurationUpdate_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ENBConfigurationUpdate_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ENBConfigurationUpdate'(Tlv) ->
   'dec_ENBConfigurationUpdate'(Tlv, [16]).

'dec_ENBConfigurationUpdate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ENBConfigurationUpdate_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ENBConfigurationUpdate', Term1}.



%%================================
%%  CellInformation-Item
%%================================
'enc_CellInformation-Item'(Val) ->
    'enc_CellInformation-Item'(Val, [<<48>>]).

'enc_CellInformation-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute ul-InterferenceOverloadIndication(2)   External X2AP:UL-InterferenceOverloadIndication OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UL-InterferenceOverloadIndication'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute ul-HighInterferenceIndicationInfo(3)   External X2AP:UL-HighInterferenceIndicationInfo OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UL-HighInterferenceIndicationInfo'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute relativeNarrowbandTxPower(4)   External X2AP:RelativeNarrowbandTxPower OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RelativeNarrowbandTxPower'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellInformation-Item_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellInformation-Item_iE-Extensions
%%================================
'enc_CellInformation-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellInformation-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellInformation-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellInformation-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellInformation-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellInformation-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_25'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_25'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellInformation-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellInformation-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellInformation-Item'(Tlv) ->
   'dec_CellInformation-Item'(Tlv, [16]).

'dec_CellInformation-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute ul-InterferenceOverloadIndication(2)   External X2AP:UL-InterferenceOverloadIndication OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_UL-InterferenceOverloadIndication'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute ul-HighInterferenceIndicationInfo(3)   External X2AP:UL-HighInterferenceIndicationInfo OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UL-HighInterferenceIndicationInfo'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute relativeNarrowbandTxPower(4)   External X2AP:RelativeNarrowbandTxPower OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_RelativeNarrowbandTxPower'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CellInformation-Item_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellInformation-Item', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  CellInformation-List
%%================================
'enc_CellInformation-List'(Val) ->
    'enc_CellInformation-List'(Val, [<<48>>]).

'enc_CellInformation-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CellInformation-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellInformation-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellInformation-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellInformation-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_CellInformation-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellInformation-List_ProtocolIE-Field
%%================================
'enc_CellInformation-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_26'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellInformation-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_26'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_CellInformation-List'(Tlv) ->
   'dec_CellInformation-List'(Tlv, [16]).

'dec_CellInformation-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellInformation-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  LoadInformation
%%================================
'enc_LoadInformation'(Val) ->
    'enc_LoadInformation'(Val, [<<48>>]).

'enc_LoadInformation'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_LoadInformation_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LoadInformation_protocolIEs
%%================================
'enc_LoadInformation_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LoadInformation_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LoadInformation_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LoadInformation_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LoadInformation_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_LoadInformation_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LoadInformation_protocolIEs_ProtocolIE-Field
%%================================
'enc_LoadInformation_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_27'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LoadInformation_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_27'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_LoadInformation_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LoadInformation_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_LoadInformation'(Tlv) ->
   'dec_LoadInformation'(Tlv, [16]).

'dec_LoadInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_LoadInformation_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LoadInformation', Term1}.



%%================================
%%  X2SetupFailure
%%================================
'enc_X2SetupFailure'(Val) ->
    'enc_X2SetupFailure'(Val, [<<48>>]).

'enc_X2SetupFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_X2SetupFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  X2SetupFailure_protocolIEs
%%================================
'enc_X2SetupFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_X2SetupFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_X2SetupFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_X2SetupFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_X2SetupFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_X2SetupFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  X2SetupFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_28'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_X2SetupFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_28'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_X2SetupFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_X2SetupFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_X2SetupFailure'(Tlv) ->
   'dec_X2SetupFailure'(Tlv, [16]).

'dec_X2SetupFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_X2SetupFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'X2SetupFailure', Term1}.



%%================================
%%  X2SetupResponse
%%================================
'enc_X2SetupResponse'(Val) ->
    'enc_X2SetupResponse'(Val, [<<48>>]).

'enc_X2SetupResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_X2SetupResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  X2SetupResponse_protocolIEs
%%================================
'enc_X2SetupResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_X2SetupResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_X2SetupResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_X2SetupResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_X2SetupResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_X2SetupResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  X2SetupResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_29'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_X2SetupResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_29'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_X2SetupResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_X2SetupResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_X2SetupResponse'(Tlv) ->
   'dec_X2SetupResponse'(Tlv, [16]).

'dec_X2SetupResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_X2SetupResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'X2SetupResponse', Term1}.



%%================================
%%  X2SetupRequest
%%================================
'enc_X2SetupRequest'(Val) ->
    'enc_X2SetupRequest'(Val, [<<48>>]).

'enc_X2SetupRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_X2SetupRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  X2SetupRequest_protocolIEs
%%================================
'enc_X2SetupRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_X2SetupRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_X2SetupRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_X2SetupRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_X2SetupRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_X2SetupRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  X2SetupRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_30'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_X2SetupRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_30'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_X2SetupRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_X2SetupRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_X2SetupRequest'(Tlv) ->
   'dec_X2SetupRequest'(Tlv, [16]).

'dec_X2SetupRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_X2SetupRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'X2SetupRequest', Term1}.



%%================================
%%  ResetResponse
%%================================
'enc_ResetResponse'(Val) ->
    'enc_ResetResponse'(Val, [<<48>>]).

'enc_ResetResponse'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResetResponse_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResetResponse_protocolIEs
%%================================
'enc_ResetResponse_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResetResponse_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResetResponse_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResetResponse_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResetResponse_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResetResponse_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResetResponse_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResetResponse_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_31'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResetResponse_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_31'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResetResponse_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResetResponse_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResetResponse'(Tlv) ->
   'dec_ResetResponse'(Tlv, [16]).

'dec_ResetResponse'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResetResponse_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResetResponse', Term1}.



%%================================
%%  ResetRequest
%%================================
'enc_ResetRequest'(Val) ->
    'enc_ResetRequest'(Val, [<<48>>]).

'enc_ResetRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ResetRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ResetRequest_protocolIEs
%%================================
'enc_ResetRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ResetRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ResetRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ResetRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ResetRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ResetRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ResetRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_ResetRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_32'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ResetRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_32'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ResetRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ResetRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ResetRequest'(Tlv) ->
   'dec_ResetRequest'(Tlv, [16]).

'dec_ResetRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ResetRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ResetRequest', Term1}.



%%================================
%%  ErrorIndication
%%================================
'enc_ErrorIndication'(Val) ->
    'enc_ErrorIndication'(Val, [<<48>>]).

'enc_ErrorIndication'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ErrorIndication_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ErrorIndication_protocolIEs
%%================================
'enc_ErrorIndication_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ErrorIndication_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ErrorIndication_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ErrorIndication_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_ErrorIndication_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ErrorIndication_protocolIEs_ProtocolIE-Field
%%================================
'enc_ErrorIndication_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_33'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_33'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_ErrorIndication_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ErrorIndication_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_ErrorIndication'(Tlv) ->
   'dec_ErrorIndication'(Tlv, [16]).

'dec_ErrorIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ErrorIndication_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ErrorIndication', Term1}.



%%================================
%%  HandoverCancel
%%================================
'enc_HandoverCancel'(Val) ->
    'enc_HandoverCancel'(Val, [<<48>>]).

'enc_HandoverCancel'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverCancel_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverCancel_protocolIEs
%%================================
'enc_HandoverCancel_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverCancel_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverCancel_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverCancel_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverCancel_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverCancel_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverCancel_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_34'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_34'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverCancel_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverCancel_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverCancel'(Tlv) ->
   'dec_HandoverCancel'(Tlv, [16]).

'dec_HandoverCancel'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverCancel_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverCancel', Term1}.



%%================================
%%  UEContextRelease
%%================================
'enc_UEContextRelease'(Val) ->
    'enc_UEContextRelease'(Val, [<<48>>]).

'enc_UEContextRelease'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_UEContextRelease_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEContextRelease_protocolIEs
%%================================
'enc_UEContextRelease_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEContextRelease_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEContextRelease_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEContextRelease_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEContextRelease_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_UEContextRelease_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEContextRelease_protocolIEs_ProtocolIE-Field
%%================================
'enc_UEContextRelease_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_35'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEContextRelease_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_35'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_UEContextRelease_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEContextRelease_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_UEContextRelease'(Tlv) ->
   'dec_UEContextRelease'(Tlv, [16]).

'dec_UEContextRelease'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_UEContextRelease_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEContextRelease', Term1}.



%%================================
%%  E-RABs-SubjectToStatusTransfer-Item
%%================================
'enc_E-RABs-SubjectToStatusTransfer-Item'(Val) ->
    'enc_E-RABs-SubjectToStatusTransfer-Item'(Val, [<<48>>]).

'enc_E-RABs-SubjectToStatusTransfer-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute receiveStatusofULPDCPSDUs(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_unnamed_bit_string(4096, Cindex2, [<<129>>])
       end,

%%-------------------------------------------------
%% attribute uL-COUNTvalue(3)   External X2AP:COUNTvalue
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_COUNTvalue'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute dL-COUNTvalue(4)   External X2AP:COUNTvalue
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_COUNTvalue'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABs-SubjectToStatusTransfer-Item_iE-Extensions
%%================================
'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_37'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_37'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABs-SubjectToStatusTransfer-Item'(Tlv) ->
   'dec_E-RABs-SubjectToStatusTransfer-Item'(Tlv, [16]).

'dec_E-RABs-SubjectToStatusTransfer-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute receiveStatusofULPDCPSDUs(2) with type BIT STRING OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {begin
Val1 = decode_native_bit_string(V2, []),
C1 = bit_size(Val1),
if C1 =:= 4096 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute uL-COUNTvalue(3)   External X2AP:COUNTvalue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_COUNTvalue'(V3, [131074]),

%%-------------------------------------------------
%% attribute dL-COUNTvalue(4)   External X2AP:COUNTvalue
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_COUNTvalue'(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_E-RABs-SubjectToStatusTransfer-Item_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABs-SubjectToStatusTransfer-Item', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  E-RABs-SubjectToStatusTransfer-List
%%================================
'enc_E-RABs-SubjectToStatusTransfer-List'(Val) ->
    'enc_E-RABs-SubjectToStatusTransfer-List'(Val, [<<48>>]).

'enc_E-RABs-SubjectToStatusTransfer-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABs-SubjectToStatusTransfer-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-SubjectToStatusTransfer-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-SubjectToStatusTransfer-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABs-SubjectToStatusTransfer-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field
%%================================
'enc_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_38'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_38'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABs-SubjectToStatusTransfer-List'(Tlv) ->
   'dec_E-RABs-SubjectToStatusTransfer-List'(Tlv, [16]).

'dec_E-RABs-SubjectToStatusTransfer-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-SubjectToStatusTransfer-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  SNStatusTransfer
%%================================
'enc_SNStatusTransfer'(Val) ->
    'enc_SNStatusTransfer'(Val, [<<48>>]).

'enc_SNStatusTransfer'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_SNStatusTransfer_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SNStatusTransfer_protocolIEs
%%================================
'enc_SNStatusTransfer_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SNStatusTransfer_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SNStatusTransfer_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SNStatusTransfer_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_SNStatusTransfer_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SNStatusTransfer_protocolIEs_ProtocolIE-Field
%%================================
'enc_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_39'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_39'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_SNStatusTransfer_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SNStatusTransfer_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_SNStatusTransfer'(Tlv) ->
   'dec_SNStatusTransfer'(Tlv, [16]).

'dec_SNStatusTransfer'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_SNStatusTransfer_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SNStatusTransfer', Term1}.



%%================================
%%  HandoverPreparationFailure
%%================================
'enc_HandoverPreparationFailure'(Val) ->
    'enc_HandoverPreparationFailure'(Val, [<<48>>]).

'enc_HandoverPreparationFailure'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverPreparationFailure_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverPreparationFailure_protocolIEs
%%================================
'enc_HandoverPreparationFailure_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverPreparationFailure_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverPreparationFailure_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverPreparationFailure_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverPreparationFailure_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverPreparationFailure_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_40'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_40'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverPreparationFailure_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverPreparationFailure_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverPreparationFailure'(Tlv) ->
   'dec_HandoverPreparationFailure'(Tlv, [16]).

'dec_HandoverPreparationFailure'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverPreparationFailure_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverPreparationFailure', Term1}.



%%================================
%%  E-RABs-Admitted-Item
%%================================
'enc_E-RABs-Admitted-Item'(Val) ->
    'enc_E-RABs-Admitted-Item'(Val, [<<48>>]).

'enc_E-RABs-Admitted-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uL-GTP-TunnelEndpoint(2)   External X2AP:GTPtunnelEndpoint OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GTPtunnelEndpoint'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute dL-GTP-TunnelEndpoint(3)   External X2AP:GTPtunnelEndpoint OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GTPtunnelEndpoint'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABs-Admitted-Item_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABs-Admitted-Item_iE-Extensions
%%================================
'enc_E-RABs-Admitted-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABs-Admitted-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-Admitted-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-Admitted-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABs-Admitted-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_42'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_42'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABs-Admitted-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-Admitted-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABs-Admitted-Item'(Tlv) ->
   'dec_E-RABs-Admitted-Item'(Tlv, [16]).

'dec_E-RABs-Admitted-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute uL-GTP-TunnelEndpoint(2)   External X2AP:GTPtunnelEndpoint OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_GTPtunnelEndpoint'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute dL-GTP-TunnelEndpoint(3)   External X2AP:GTPtunnelEndpoint OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GTPtunnelEndpoint'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RABs-Admitted-Item_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABs-Admitted-Item', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RABs-Admitted-List
%%================================
'enc_E-RABs-Admitted-List'(Val) ->
    'enc_E-RABs-Admitted-List'(Val, [<<48>>]).

'enc_E-RABs-Admitted-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABs-Admitted-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-Admitted-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-Admitted-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-Admitted-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABs-Admitted-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-Admitted-List_ProtocolIE-Field
%%================================
'enc_E-RABs-Admitted-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_43'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-Admitted-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_43'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABs-Admitted-List'(Tlv) ->
   'dec_E-RABs-Admitted-List'(Tlv, [16]).

'dec_E-RABs-Admitted-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-Admitted-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  HandoverRequestAcknowledge
%%================================
'enc_HandoverRequestAcknowledge'(Val) ->
    'enc_HandoverRequestAcknowledge'(Val, [<<48>>]).

'enc_HandoverRequestAcknowledge'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverRequestAcknowledge_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRequestAcknowledge_protocolIEs
%%================================
'enc_HandoverRequestAcknowledge_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRequestAcknowledge_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRequestAcknowledge_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRequestAcknowledge_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverRequestAcknowledge_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_44'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_44'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverRequestAcknowledge_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRequestAcknowledge_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRequestAcknowledge'(Tlv) ->
   'dec_HandoverRequestAcknowledge'(Tlv, [16]).

'dec_HandoverRequestAcknowledge'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverRequestAcknowledge_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRequestAcknowledge', Term1}.



%%================================
%%  E-RABs-ToBeSetup-Item
%%================================
'enc_E-RABs-ToBeSetup-Item'(Val) ->
    'enc_E-RABs-ToBeSetup-Item'(Val, [<<48>>]).

'enc_E-RABs-ToBeSetup-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RAB-Level-QoS-Parameters(2)   External X2AP:E-RAB-Level-QoS-Parameters
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_E-RAB-Level-QoS-Parameters'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute dL-Forwarding(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
'dL-forwardingProposed' -> encode_tags([<<130>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute uL-GTPtunnelEndpoint(4)   External X2AP:GTPtunnelEndpoint
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_GTPtunnelEndpoint'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RABs-ToBeSetup-Item_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RABs-ToBeSetup-Item_iE-Extensions
%%================================
'enc_E-RABs-ToBeSetup-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RABs-ToBeSetup-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-ToBeSetup-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-ToBeSetup-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RABs-ToBeSetup-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_48'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_48'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RABs-ToBeSetup-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-ToBeSetup-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RABs-ToBeSetup-Item'(Tlv) ->
   'dec_E-RABs-ToBeSetup-Item'(Tlv, [16]).

'dec_E-RABs-ToBeSetup-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute e-RAB-Level-QoS-Parameters(2)   External X2AP:E-RAB-Level-QoS-Parameters
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_E-RAB-Level-QoS-Parameters'(V2, [131073]),

%%-------------------------------------------------
%% attribute dL-Forwarding(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> 'dL-forwardingProposed';
Default1 -> {asn1_enum,Default1}
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute uL-GTPtunnelEndpoint(4)   External X2AP:GTPtunnelEndpoint
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_GTPtunnelEndpoint'(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_E-RABs-ToBeSetup-Item_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RABs-ToBeSetup-Item', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  E-RABs-ToBeSetup-List
%%================================
'enc_E-RABs-ToBeSetup-List'(Val) ->
    'enc_E-RABs-ToBeSetup-List'(Val, [<<48>>]).

'enc_E-RABs-ToBeSetup-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RABs-ToBeSetup-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RABs-ToBeSetup-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RABs-ToBeSetup-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RABs-ToBeSetup-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RABs-ToBeSetup-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RABs-ToBeSetup-List_ProtocolIE-Field
%%================================
'enc_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_49'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RABs-ToBeSetup-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_49'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RABs-ToBeSetup-List'(Tlv) ->
   'dec_E-RABs-ToBeSetup-List'(Tlv, [16]).

'dec_E-RABs-ToBeSetup-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RABs-ToBeSetup-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  UE-ContextInformation
%%================================
'enc_UE-ContextInformation'(Val) ->
    'enc_UE-ContextInformation'(Val, [<<48>>]).

'enc_UE-ContextInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7, Cindex8, Cindex9, Cindex10} = Val,

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uESecurityCapabilities(2)   External X2AP:UESecurityCapabilities
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_UESecurityCapabilities'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute aS-SecurityInformation(3)   External X2AP:AS-SecurityInformation
%%-------------------------------------------------
   {EncBytes3,EncLen3} = 'enc_AS-SecurityInformation'(Cindex3, [<<162>>]),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRate(4)   External X2AP:UEAggregateMaximumBitRate
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_UEAggregateMaximumBitRate'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute subscriberProfileIDforRFP(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex5, [<<132>>])
       end,

%%-------------------------------------------------
%% attribute e-RABs-ToBeSetup-List(6)   External X2AP:E-RABs-ToBeSetup-List
%%-------------------------------------------------
   {EncBytes6,EncLen6} = 'enc_E-RABs-ToBeSetup-List'(Cindex6, [<<165>>]),

%%-------------------------------------------------
%% attribute rRC-Context(7) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes7,EncLen7} = encode_restricted_string(Cindex7, [<<134>>]),

%%-------------------------------------------------
%% attribute handoverRestrictionList(8)   External X2AP:HandoverRestrictionList OPTIONAL
%%-------------------------------------------------
   {EncBytes8,EncLen8} =  case Cindex8 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HandoverRestrictionList'(Cindex8, [<<167>>])
       end,

%%-------------------------------------------------
%% attribute locationReportingInformation(9)   External X2AP:LocationReportingInformation OPTIONAL
%%-------------------------------------------------
   {EncBytes9,EncLen9} =  case Cindex9 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LocationReportingInformation'(Cindex9, [<<168>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(10) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes10,EncLen10} =  case Cindex10 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UE-ContextInformation_iE-Extensions'(Cindex10, [<<169>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7, EncBytes8, EncBytes9, EncBytes10],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7 + EncLen8 + EncLen9 + EncLen10,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UE-ContextInformation_iE-Extensions
%%================================
'enc_UE-ContextInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UE-ContextInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-ContextInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-ContextInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UE-ContextInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UE-ContextInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_57'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_57'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UE-ContextInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UE-ContextInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UE-ContextInformation'(Tlv) ->
   'dec_UE-ContextInformation'(Tlv, [16]).

'dec_UE-ContextInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute mME-UE-S1AP-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uESecurityCapabilities(2)   External X2AP:UESecurityCapabilities
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_UESecurityCapabilities'(V2, [131073]),

%%-------------------------------------------------
%% attribute aS-SecurityInformation(3)   External X2AP:AS-SecurityInformation
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = 'dec_AS-SecurityInformation'(V3, [131074]),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRate(4)   External X2AP:UEAggregateMaximumBitRate
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_UEAggregateMaximumBitRate'(V4, [131075]),

%%-------------------------------------------------
%% attribute subscriberProfileIDforRFP(5) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {begin
Val2 = decode_integer(V5, []),
if 1 =< Val2, Val2 =< 256 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute e-RABs-ToBeSetup-List(6)   External X2AP:E-RABs-ToBeSetup-List
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = 'dec_E-RABs-ToBeSetup-List'(V6, [131077]),

%%-------------------------------------------------
%% attribute rRC-Context(7) with type OCTET STRING
%%-------------------------------------------------
[V7|Tlv8] = Tlv7, 
Term7 = decode_octet_string(V7, [131078]),

%%-------------------------------------------------
%% attribute handoverRestrictionList(8)   External X2AP:HandoverRestrictionList OPTIONAL
%%-------------------------------------------------
{Term8,Tlv9} = case Tlv8 of
[{131079,V8}|TempTlv9] ->
    {'dec_HandoverRestrictionList'(V8, []), TempTlv9};
    _ ->
        { asn1_NOVALUE, Tlv8}
end,

%%-------------------------------------------------
%% attribute locationReportingInformation(9)   External X2AP:LocationReportingInformation OPTIONAL
%%-------------------------------------------------
{Term9,Tlv10} = case Tlv9 of
[{131080,V9}|TempTlv10] ->
    {'dec_LocationReportingInformation'(V9, []), TempTlv10};
    _ ->
        { asn1_NOVALUE, Tlv9}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(10) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term10,Tlv11} = case Tlv10 of
[{131081,V10}|TempTlv11] ->
    {'dec_UE-ContextInformation_iE-Extensions'(V10, []), TempTlv11};
    _ ->
        { asn1_NOVALUE, Tlv10}
end,

case Tlv11 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UE-ContextInformation', Term1, Term2, Term3, Term4, Term5, Term6, Term7, Term8, Term9, Term10}.



%%================================
%%  HandoverRequest
%%================================
'enc_HandoverRequest'(Val) ->
    'enc_HandoverRequest'(Val, [<<48>>]).

'enc_HandoverRequest'(Val, TagIn) ->
{_,Cindex1} = Val,

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_HandoverRequest_protocolIEs'(Cindex1, [<<160>>]),

   BytesSoFar = [EncBytes1],
LenSoFar = EncLen1,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRequest_protocolIEs
%%================================
'enc_HandoverRequest_protocolIEs'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRequest_protocolIEs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRequest_protocolIEs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRequest_protocolIEs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(H, [<<48>>]),
   'enc_HandoverRequest_protocolIEs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRequest_protocolIEs_ProtocolIE-Field
%%================================
'enc_HandoverRequest_protocolIEs_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_58'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_58'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.

'dec_HandoverRequest_protocolIEs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRequest_protocolIEs_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRequest'(Tlv) ->
   'dec_HandoverRequest'(Tlv, [16]).

'dec_HandoverRequest'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute protocolIEs(1) with type SEQUENCE OF
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_HandoverRequest_protocolIEs'(V1, [131072]),

case Tlv2 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRequest', Term1}.



%%================================
%%  UL-HighInterferenceIndication
%%================================
'enc_UL-HighInterferenceIndication'(Val) ->
    'enc_UL-HighInterferenceIndication'(Val, [<<3>>]).

'enc_UL-HighInterferenceIndication'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_UL-HighInterferenceIndication'(Tlv) ->
   'dec_UL-HighInterferenceIndication'(Tlv, [3]).

'dec_UL-HighInterferenceIndication'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  UL-HighInterferenceIndicationInfo-Item
%%================================
'enc_UL-HighInterferenceIndicationInfo-Item'(Val) ->
    'enc_UL-HighInterferenceIndicationInfo-Item'(Val, [<<48>>]).

'enc_UL-HighInterferenceIndicationInfo-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute target-Cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute ul-interferenceindication(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UL-HighInterferenceIndicationInfo-Item_iE-Extensions
%%================================
'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_23'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_23'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UL-HighInterferenceIndicationInfo-Item'(Tlv) ->
   'dec_UL-HighInterferenceIndicationInfo-Item'(Tlv, [16]).

'dec_UL-HighInterferenceIndicationInfo-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute target-Cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute ul-interferenceindication(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UL-HighInterferenceIndicationInfo-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UL-HighInterferenceIndicationInfo-Item', Term1, Term2, Term3}.



%%================================
%%  UL-HighInterferenceIndicationInfo
%%================================
'enc_UL-HighInterferenceIndicationInfo'(Val) ->
    'enc_UL-HighInterferenceIndicationInfo'(Val, [<<48>>]).

'enc_UL-HighInterferenceIndicationInfo'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UL-HighInterferenceIndicationInfo_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UL-HighInterferenceIndicationInfo_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UL-HighInterferenceIndicationInfo_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UL-HighInterferenceIndicationInfo-Item'(H, [<<48>>]),
   'enc_UL-HighInterferenceIndicationInfo_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UL-HighInterferenceIndicationInfo'(Tlv) ->
   'dec_UL-HighInterferenceIndicationInfo'(Tlv, [16]).

'dec_UL-HighInterferenceIndicationInfo'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UL-HighInterferenceIndicationInfo-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  UL-InterferenceOverloadIndication-Item
%%================================
'enc_UL-InterferenceOverloadIndication-Item'(Val) ->
    'enc_UL-InterferenceOverloadIndication-Item'(Val, [<<10>>]).

'enc_UL-InterferenceOverloadIndication-Item'(Val, TagIn) ->
case Val of
'high-interference' -> encode_tags(TagIn, [0], 1);
'medium-interference' -> encode_tags(TagIn, [1], 1);
'low-interference' -> encode_tags(TagIn, [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_UL-InterferenceOverloadIndication-Item'(Tlv) ->
   'dec_UL-InterferenceOverloadIndication-Item'(Tlv, [10]).

'dec_UL-InterferenceOverloadIndication-Item'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'high-interference';
1 -> 'medium-interference';
2 -> 'low-interference';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  UL-InterferenceOverloadIndication
%%================================
'enc_UL-InterferenceOverloadIndication'(Val) ->
    'enc_UL-InterferenceOverloadIndication'(Val, [<<48>>]).

'enc_UL-InterferenceOverloadIndication'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UL-InterferenceOverloadIndication_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UL-InterferenceOverloadIndication_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UL-InterferenceOverloadIndication_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = case H of
'high-interference' -> encode_tags([<<10>>], [0], 1);
'medium-interference' -> encode_tags([<<10>>], [1], 1);
'low-interference' -> encode_tags([<<10>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,
   'enc_UL-InterferenceOverloadIndication_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UL-InterferenceOverloadIndication'(Tlv) ->
   'dec_UL-InterferenceOverloadIndication'(Tlv, [16]).

'dec_UL-InterferenceOverloadIndication'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[case decode_integer(V1, [10]) of
0 -> 'high-interference';
1 -> 'medium-interference';
2 -> 'low-interference';
Default1 -> {asn1_enum,Default1}
end || V1 <- Tlv1].




%%================================
%%  UESecurityCapabilities
%%================================
'enc_UESecurityCapabilities'(Val) ->
    'enc_UESecurityCapabilities'(Val, [<<48>>]).

'enc_UESecurityCapabilities'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute encryptionAlgorithms(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute integrityProtectionAlgorithms(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UESecurityCapabilities_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UESecurityCapabilities_iE-Extensions
%%================================
'enc_UESecurityCapabilities_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UESecurityCapabilities_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UESecurityCapabilities_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UESecurityCapabilities_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UESecurityCapabilities_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UESecurityCapabilities_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_50'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_50'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UESecurityCapabilities_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UESecurityCapabilities_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UESecurityCapabilities'(Tlv) ->
   'dec_UESecurityCapabilities'(Tlv, [16]).

'dec_UESecurityCapabilities'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute encryptionAlgorithms(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_native_bit_string(V1, [131072]),

%%-------------------------------------------------
%% attribute integrityProtectionAlgorithms(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_native_bit_string(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UESecurityCapabilities_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UESecurityCapabilities', Term1, Term2, Term3}.



%%================================
%%  UEAggregateMaximumBitRate
%%================================
'enc_UEAggregateMaximumBitRate'(Val) ->
    'enc_UEAggregateMaximumBitRate'(Val, [<<48>>]).

'enc_UEAggregateMaximumBitRate'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateDownlink(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateUplink(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_UEAggregateMaximumBitRate_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  UEAggregateMaximumBitRate_iE-Extensions
%%================================
'enc_UEAggregateMaximumBitRate_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_UEAggregateMaximumBitRate_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UEAggregateMaximumBitRate_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UEAggregateMaximumBitRate_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_UEAggregateMaximumBitRate_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField
%%================================
'enc_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_52'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_52'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_UEAggregateMaximumBitRate_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_UEAggregateMaximumBitRate_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_UEAggregateMaximumBitRate'(Tlv) ->
   'dec_UEAggregateMaximumBitRate'(Tlv, [16]).

'dec_UEAggregateMaximumBitRate'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateDownlink(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uEaggregateMaximumBitRateUplink(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 10000000000 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_UEAggregateMaximumBitRate_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'UEAggregateMaximumBitRate', Term1, Term2, Term3}.



%%================================
%%  UE-X2AP-ID
%%================================
'enc_UE-X2AP-ID'(Val) ->
    'enc_UE-X2AP-ID'(Val, [<<2>>]).

'enc_UE-X2AP-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_UE-X2AP-ID'(Tlv) ->
   'dec_UE-X2AP-ID'(Tlv, [2]).

'dec_UE-X2AP-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UE-S1AP-ID
%%================================
'enc_UE-S1AP-ID'(Val) ->
    'enc_UE-S1AP-ID'(Val, [<<2>>]).

'enc_UE-S1AP-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_UE-S1AP-ID'(Tlv) ->
   'dec_UE-S1AP-ID'(Tlv, [2]).

'dec_UE-S1AP-ID'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4294967295 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UE-HistoryInformation
%%================================
'enc_UE-HistoryInformation'(Val) ->
    'enc_UE-HistoryInformation'(Val, [<<48>>]).

'enc_UE-HistoryInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_UE-HistoryInformation_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_UE-HistoryInformation_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_UE-HistoryInformation_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LastVisitedCell-Item'(H, []),
   'enc_UE-HistoryInformation_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_UE-HistoryInformation'(Tlv) ->
   'dec_UE-HistoryInformation'(Tlv, [16]).

'dec_UE-HistoryInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LastVisitedCell-Item'(V1, []) || V1 <- Tlv1].




%%================================
%%  TypeOfError
%%================================
'enc_TypeOfError'(Val) ->
    'enc_TypeOfError'(Val, [<<10>>]).

'enc_TypeOfError'(Val, TagIn) ->
case Val of
'not-understood' -> encode_tags(TagIn, [0], 1);
missing -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TypeOfError'(Tlv) ->
   'dec_TypeOfError'(Tlv, [10]).

'dec_TypeOfError'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'not-understood';
1 -> missing;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TransportLayerAddress
%%================================
'enc_TransportLayerAddress'(Val) ->
    'enc_TransportLayerAddress'(Val, [<<3>>]).

'enc_TransportLayerAddress'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_TransportLayerAddress'(Tlv) ->
   'dec_TransportLayerAddress'(Tlv, [3]).

'dec_TransportLayerAddress'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  Transmission-Bandwidth
%%================================
'enc_Transmission-Bandwidth'(Val) ->
    'enc_Transmission-Bandwidth'(Val, [<<10>>]).

'enc_Transmission-Bandwidth'(Val, TagIn) ->
case Val of
bw6 -> encode_tags(TagIn, [0], 1);
bw15 -> encode_tags(TagIn, [1], 1);
bw25 -> encode_tags(TagIn, [2], 1);
bw50 -> encode_tags(TagIn, [3], 1);
bw75 -> encode_tags(TagIn, [4], 1);
bw100 -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Transmission-Bandwidth'(Tlv) ->
   'dec_Transmission-Bandwidth'(Tlv, [10]).

'dec_Transmission-Bandwidth'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TraceDepth
%%================================
'enc_TraceDepth'(Val) ->
    'enc_TraceDepth'(Val, [<<10>>]).

'enc_TraceDepth'(Val, TagIn) ->
case Val of
minimum -> encode_tags(TagIn, [0], 1);
medium -> encode_tags(TagIn, [1], 1);
maximum -> encode_tags(TagIn, [2], 1);
minimumWithoutVendorSpecificExtension -> encode_tags(TagIn, [3], 1);
mediumWithoutVendorSpecificExtension -> encode_tags(TagIn, [4], 1);
maximumWithoutVendorSpecificExtension -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TraceDepth'(Tlv) ->
   'dec_TraceDepth'(Tlv, [10]).

'dec_TraceDepth'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TraceCollectionEntityIPAddress
%%================================
'enc_TraceCollectionEntityIPAddress'(Val) ->
    'enc_TraceCollectionEntityIPAddress'(Val, [<<3>>]).

'enc_TraceCollectionEntityIPAddress'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_TraceCollectionEntityIPAddress'(Tlv) ->
   'dec_TraceCollectionEntityIPAddress'(Tlv, [3]).

'dec_TraceCollectionEntityIPAddress'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  TraceActivation
%%================================
'enc_TraceActivation'(Val) ->
    'enc_TraceActivation'(Val, [<<48>>]).

'enc_TraceActivation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute eUTRANTraceID(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute interfacesToTrace(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(8, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute traceDepth(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
minimum -> encode_tags([<<130>>], [0], 1);
medium -> encode_tags([<<130>>], [1], 1);
maximum -> encode_tags([<<130>>], [2], 1);
minimumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [3], 1);
mediumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [4], 1);
maximumWithoutVendorSpecificExtension -> encode_tags([<<130>>], [5], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute traceCollectionEntityIPAddress(4) with type BIT STRING
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_unnamed_bit_string(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TraceActivation_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TraceActivation_iE-Extensions
%%================================
'enc_TraceActivation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TraceActivation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TraceActivation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TraceActivation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TraceActivation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TraceActivation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TraceActivation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_61'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_61'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TraceActivation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TraceActivation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TraceActivation'(Tlv) ->
   'dec_TraceActivation'(Tlv, [16]).

'dec_TraceActivation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eUTRANTraceID(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute interfacesToTrace(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 8 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute traceDepth(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> minimum;
1 -> medium;
2 -> maximum;
3 -> minimumWithoutVendorSpecificExtension;
4 -> mediumWithoutVendorSpecificExtension;
5 -> maximumWithoutVendorSpecificExtension;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute traceCollectionEntityIPAddress(4) with type BIT STRING
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_native_bit_string(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_TraceActivation_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TraceActivation', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  Time-UE-StayedInCell
%%================================
'enc_Time-UE-StayedInCell'(Val) ->
    'enc_Time-UE-StayedInCell'(Val, [<<2>>]).

'enc_Time-UE-StayedInCell'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Time-UE-StayedInCell'(Tlv) ->
   'dec_Time-UE-StayedInCell'(Tlv, [2]).

'dec_Time-UE-StayedInCell'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  TimeToWait
%%================================
'enc_TimeToWait'(Val) ->
    'enc_TimeToWait'(Val, [<<10>>]).

'enc_TimeToWait'(Val, TagIn) ->
case Val of
v1s -> encode_tags(TagIn, [0], 1);
v2s -> encode_tags(TagIn, [1], 1);
v5s -> encode_tags(TagIn, [2], 1);
v10s -> encode_tags(TagIn, [3], 1);
v20s -> encode_tags(TagIn, [4], 1);
v60s -> encode_tags(TagIn, [5], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_TimeToWait'(Tlv) ->
   'dec_TimeToWait'(Tlv, [10]).

'dec_TimeToWait'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> v1s;
1 -> v2s;
2 -> v5s;
3 -> v10s;
4 -> v20s;
5 -> v60s;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  TargeteNBtoSource-eNBTransparentContainer
%%================================
'enc_TargeteNBtoSource-eNBTransparentContainer'(Val) ->
    'enc_TargeteNBtoSource-eNBTransparentContainer'(Val, [<<4>>]).

'enc_TargeteNBtoSource-eNBTransparentContainer'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TargeteNBtoSource-eNBTransparentContainer'(Tlv) ->
   'dec_TargeteNBtoSource-eNBTransparentContainer'(Tlv, [4]).

'dec_TargeteNBtoSource-eNBTransparentContainer'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  TAC
%%================================
'enc_TAC'(Val) ->
    'enc_TAC'(Val, [<<4>>]).

'enc_TAC'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_TAC'(Tlv) ->
   'dec_TAC'(Tlv, [4]).

'dec_TAC'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SubscriberProfileIDforRFP
%%================================
'enc_SubscriberProfileIDforRFP'(Val) ->
    'enc_SubscriberProfileIDforRFP'(Val, [<<2>>]).

'enc_SubscriberProfileIDforRFP'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_SubscriberProfileIDforRFP'(Tlv) ->
   'dec_SubscriberProfileIDforRFP'(Tlv, [2]).

'dec_SubscriberProfileIDforRFP'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 1 =< Val1, Val1 =< 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  SpecialSubframePatterns
%%================================
'enc_SpecialSubframePatterns'(Val) ->
    'enc_SpecialSubframePatterns'(Val, [<<10>>]).

'enc_SpecialSubframePatterns'(Val, TagIn) ->
case Val of
ssp0 -> encode_tags(TagIn, [0], 1);
ssp1 -> encode_tags(TagIn, [1], 1);
ssp2 -> encode_tags(TagIn, [2], 1);
ssp3 -> encode_tags(TagIn, [3], 1);
ssp4 -> encode_tags(TagIn, [4], 1);
ssp5 -> encode_tags(TagIn, [5], 1);
ssp6 -> encode_tags(TagIn, [6], 1);
ssp7 -> encode_tags(TagIn, [7], 1);
ssp8 -> encode_tags(TagIn, [8], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SpecialSubframePatterns'(Tlv) ->
   'dec_SpecialSubframePatterns'(Tlv, [10]).

'dec_SpecialSubframePatterns'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SpecialSubframe-Info
%%================================
'enc_SpecialSubframe-Info'(Val) ->
    'enc_SpecialSubframe-Info'(Val, [<<48>>]).

'enc_SpecialSubframe-Info'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute specialSubframePatterns(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
ssp0 -> encode_tags([<<128>>], [0], 1);
ssp1 -> encode_tags([<<128>>], [1], 1);
ssp2 -> encode_tags([<<128>>], [2], 1);
ssp3 -> encode_tags([<<128>>], [3], 1);
ssp4 -> encode_tags([<<128>>], [4], 1);
ssp5 -> encode_tags([<<128>>], [5], 1);
ssp6 -> encode_tags([<<128>>], [6], 1);
ssp7 -> encode_tags([<<128>>], [7], 1);
ssp8 -> encode_tags([<<128>>], [8], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute cyclicPrefixDL(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
normal -> encode_tags([<<129>>], [0], 1);
extended -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute cyclicPrefixUL(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
normal -> encode_tags([<<130>>], [0], 1);
extended -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_SpecialSubframe-Info_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  SpecialSubframe-Info_iE-Extensions
%%================================
'enc_SpecialSubframe-Info_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_SpecialSubframe-Info_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_SpecialSubframe-Info_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_SpecialSubframe-Info_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_SpecialSubframe-Info_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField
%%================================
'enc_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_17'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_17'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_SpecialSubframe-Info_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_SpecialSubframe-Info_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_SpecialSubframe-Info'(Tlv) ->
   'dec_SpecialSubframe-Info'(Tlv, [16]).

'dec_SpecialSubframe-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute specialSubframePatterns(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> ssp0;
1 -> ssp1;
2 -> ssp2;
3 -> ssp3;
4 -> ssp4;
5 -> ssp5;
6 -> ssp6;
7 -> ssp7;
8 -> ssp8;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute cyclicPrefixDL(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> normal;
1 -> extended;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute cyclicPrefixUL(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> normal;
1 -> extended;
Default3 -> {asn1_enum,Default3}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_SpecialSubframe-Info_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'SpecialSubframe-Info', Term1, Term2, Term3, Term4}.



%%================================
%%  SubframeAssignment
%%================================
'enc_SubframeAssignment'(Val) ->
    'enc_SubframeAssignment'(Val, [<<10>>]).

'enc_SubframeAssignment'(Val, TagIn) ->
case Val of
sa0 -> encode_tags(TagIn, [0], 1);
sa1 -> encode_tags(TagIn, [1], 1);
sa2 -> encode_tags(TagIn, [2], 1);
sa3 -> encode_tags(TagIn, [3], 1);
sa4 -> encode_tags(TagIn, [4], 1);
sa5 -> encode_tags(TagIn, [5], 1);
sa6 -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SubframeAssignment'(Tlv) ->
   'dec_SubframeAssignment'(Tlv, [10]).

'dec_SubframeAssignment'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  SRVCCOperationPossible
%%================================
'enc_SRVCCOperationPossible'(Val) ->
    'enc_SRVCCOperationPossible'(Val, [<<10>>]).

'enc_SRVCCOperationPossible'(Val, TagIn) ->
case Val of
possible -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_SRVCCOperationPossible'(Tlv) ->
   'dec_SRVCCOperationPossible'(Tlv, [10]).

'dec_SRVCCOperationPossible'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> possible;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ServedCell-Information
%%================================
'enc_ServedCell-Information'(Val) ->
    'enc_ServedCell-Information'(Val, [<<48>>]).

'enc_ServedCell-Information'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute pCI(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cellId(2)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ECGI'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute tAC(3) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_restricted_string(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute broadcastPLMNs(4)   External X2AP:BroadcastPLMNs-Item
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_BroadcastPLMNs-Item'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute eUTRA-Mode-Info(5)   External X2AP:EUTRA-Mode-Info
%%-------------------------------------------------
   {EncBytes5,EncLen5} = 'enc_EUTRA-Mode-Info'(Cindex5, [<<164>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServedCell-Information_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServedCell-Information_iE-Extensions
%%================================
'enc_ServedCell-Information_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ServedCell-Information_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedCell-Information_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedCell-Information_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ServedCell-Information_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ServedCell-Information_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_19'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_19'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ServedCell-Information_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedCell-Information_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ServedCell-Information'(Tlv) ->
   'dec_ServedCell-Information'(Tlv, [16]).

'dec_ServedCell-Information'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pCI(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute cellId(2)   External X2AP:ECGI
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ECGI'(V2, [131073]),

%%-------------------------------------------------
%% attribute tAC(3) with type OCTET STRING
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_octet_string(V3, [131074]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute broadcastPLMNs(4)   External X2AP:BroadcastPLMNs-Item
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_BroadcastPLMNs-Item'(V4, [131075]),

%%-------------------------------------------------
%% attribute eUTRA-Mode-Info(5)   External X2AP:EUTRA-Mode-Info
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = 'dec_EUTRA-Mode-Info'(V5, [131076]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_ServedCell-Information_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ServedCell-Information', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  ServedCells
%%================================
'enc_ServedCells'(Val) ->
    'enc_ServedCells'(Val, [<<48>>]).

'enc_ServedCells'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ServedCells_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedCells_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedCells_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedCells_SEQOF'(H, [<<48>>]),
   'enc_ServedCells_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ServedCells_SEQOF
%%================================
'enc_ServedCells_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute servedCellInfo(1)   External X2AP:ServedCell-Information
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ServedCell-Information'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute neighbour-Info(2)   External X2AP:Neighbour-Information OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Neighbour-Information'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ServedCells_SEQOF_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ServedCells_SEQOF_iE-Extensions
%%================================
'enc_ServedCells_SEQOF_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ServedCells_SEQOF_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ServedCells_SEQOF_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ServedCells_SEQOF_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ServedCells_SEQOF_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_62'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_62'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ServedCells_SEQOF_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedCells_SEQOF_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].


'dec_ServedCells_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute servedCellInfo(1)   External X2AP:ServedCell-Information
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ServedCell-Information'(V1, [131072]),

%%-------------------------------------------------
%% attribute neighbour-Info(2)   External X2AP:Neighbour-Information OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_Neighbour-Information'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ServedCells_SEQOF_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ServedCells_SEQOF', Term1, Term2, Term3}.



'dec_ServedCells'(Tlv) ->
   'dec_ServedCells'(Tlv, [16]).

'dec_ServedCells'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ServedCells_SEQOF'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  S1TNLLoadIndicator
%%================================
'enc_S1TNLLoadIndicator'(Val) ->
    'enc_S1TNLLoadIndicator'(Val, [<<48>>]).

'enc_S1TNLLoadIndicator'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dLS1TNLLoadIndicator(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
lowLoad -> encode_tags([<<128>>], [0], 1);
mediumLoad -> encode_tags([<<128>>], [1], 1);
highLoad -> encode_tags([<<128>>], [2], 1);
overLoad -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute uLS1TNLLoadIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
lowLoad -> encode_tags([<<129>>], [0], 1);
mediumLoad -> encode_tags([<<129>>], [1], 1);
highLoad -> encode_tags([<<129>>], [2], 1);
overLoad -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_S1TNLLoadIndicator_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  S1TNLLoadIndicator_iE-Extensions
%%================================
'enc_S1TNLLoadIndicator_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_S1TNLLoadIndicator_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_S1TNLLoadIndicator_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_S1TNLLoadIndicator_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_S1TNLLoadIndicator_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField
%%================================
'enc_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_4'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_4'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_S1TNLLoadIndicator_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_S1TNLLoadIndicator_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_S1TNLLoadIndicator'(Tlv) ->
   'dec_S1TNLLoadIndicator'(Tlv, [16]).

'dec_S1TNLLoadIndicator'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dLS1TNLLoadIndicator(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute uLS1TNLLoadIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_S1TNLLoadIndicator_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'S1TNLLoadIndicator', Term1, Term2, Term3}.



%%================================
%%  UL-Total-PRB-usage
%%================================
'enc_UL-Total-PRB-usage'(Val) ->
    'enc_UL-Total-PRB-usage'(Val, [<<2>>]).

'enc_UL-Total-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_UL-Total-PRB-usage'(Tlv) ->
   'dec_UL-Total-PRB-usage'(Tlv, [2]).

'dec_UL-Total-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DL-Total-PRB-usage
%%================================
'enc_DL-Total-PRB-usage'(Val) ->
    'enc_DL-Total-PRB-usage'(Val, [<<2>>]).

'enc_DL-Total-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DL-Total-PRB-usage'(Tlv) ->
   'dec_DL-Total-PRB-usage'(Tlv, [2]).

'dec_DL-Total-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UL-non-GBR-PRB-usage
%%================================
'enc_UL-non-GBR-PRB-usage'(Val) ->
    'enc_UL-non-GBR-PRB-usage'(Val, [<<2>>]).

'enc_UL-non-GBR-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_UL-non-GBR-PRB-usage'(Tlv) ->
   'dec_UL-non-GBR-PRB-usage'(Tlv, [2]).

'dec_UL-non-GBR-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DL-non-GBR-PRB-usage
%%================================
'enc_DL-non-GBR-PRB-usage'(Val) ->
    'enc_DL-non-GBR-PRB-usage'(Val, [<<2>>]).

'enc_DL-non-GBR-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DL-non-GBR-PRB-usage'(Tlv) ->
   'dec_DL-non-GBR-PRB-usage'(Tlv, [2]).

'dec_DL-non-GBR-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  UL-GBR-PRB-usage
%%================================
'enc_UL-GBR-PRB-usage'(Val) ->
    'enc_UL-GBR-PRB-usage'(Val, [<<2>>]).

'enc_UL-GBR-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_UL-GBR-PRB-usage'(Tlv) ->
   'dec_UL-GBR-PRB-usage'(Tlv, [2]).

'dec_UL-GBR-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DL-GBR-PRB-usage
%%================================
'enc_DL-GBR-PRB-usage'(Val) ->
    'enc_DL-GBR-PRB-usage'(Val, [<<2>>]).

'enc_DL-GBR-PRB-usage'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_DL-GBR-PRB-usage'(Tlv) ->
   'dec_DL-GBR-PRB-usage'(Tlv, [2]).

'dec_DL-GBR-PRB-usage'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  RadioResourceStatus
%%================================
'enc_RadioResourceStatus'(Val) ->
    'enc_RadioResourceStatus'(Val, [<<48>>]).

'enc_RadioResourceStatus'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6, Cindex7} = Val,

%%-------------------------------------------------
%% attribute dL-GBR-PRB-usage(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute uL-GBR-PRB-usage(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute dL-non-GBR-PRB-usage(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute uL-non-GBR-PRB-usage(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute dL-Total-PRB-usage(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute uL-Total-PRB-usage(6) with type INTEGER
%%-------------------------------------------------
   {EncBytes6,EncLen6} = encode_integer(Cindex6, [<<133>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(7) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes7,EncLen7} =  case Cindex7 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RadioResourceStatus_iE-Extensions'(Cindex7, [<<166>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6, EncBytes7],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6 + EncLen7,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RadioResourceStatus_iE-Extensions
%%================================
'enc_RadioResourceStatus_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RadioResourceStatus_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RadioResourceStatus_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RadioResourceStatus_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_RadioResourceStatus_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RadioResourceStatus_iE-Extensions_ProtocolExtensionField
%%================================
'enc_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_5'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_5'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_RadioResourceStatus_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RadioResourceStatus_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_RadioResourceStatus'(Tlv) ->
   'dec_RadioResourceStatus'(Tlv, [16]).

'dec_RadioResourceStatus'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dL-GBR-PRB-usage(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 100 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uL-GBR-PRB-usage(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 100 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dL-non-GBR-PRB-usage(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 100 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uL-non-GBR-PRB-usage(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 100 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dL-Total-PRB-usage(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = begin
Val5 = decode_integer(V5, [131076]),
if 0 =< Val5, Val5 =< 100 ->
Val5;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uL-Total-PRB-usage(6) with type INTEGER
%%-------------------------------------------------
[V6|Tlv7] = Tlv6, 
Term6 = begin
Val6 = decode_integer(V6, [131077]),
if 0 =< Val6, Val6 =< 100 ->
Val6;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(7) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term7,Tlv8} = case Tlv7 of
[{131078,V7}|TempTlv8] ->
    {'dec_RadioResourceStatus_iE-Extensions'(V7, []), TempTlv8};
    _ ->
        { asn1_NOVALUE, Tlv7}
end,

case Tlv8 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RadioResourceStatus', Term1, Term2, Term3, Term4, Term5, Term6, Term7}.



%%================================
%%  RRC-Context
%%================================
'enc_RRC-Context'(Val) ->
    'enc_RRC-Context'(Val, [<<4>>]).

'enc_RRC-Context'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_RRC-Context'(Tlv) ->
   'dec_RRC-Context'(Tlv, [4]).

'dec_RRC-Context'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  RNTP-Threshold
%%================================
'enc_RNTP-Threshold'(Val) ->
    'enc_RNTP-Threshold'(Val, [<<10>>]).

'enc_RNTP-Threshold'(Val, TagIn) ->
case Val of
minusInfinity -> encode_tags(TagIn, [0], 1);
minusEleven -> encode_tags(TagIn, [1], 1);
minusTen -> encode_tags(TagIn, [2], 1);
minusNine -> encode_tags(TagIn, [3], 1);
minusEight -> encode_tags(TagIn, [4], 1);
minusSeven -> encode_tags(TagIn, [5], 1);
minusSix -> encode_tags(TagIn, [6], 1);
minusFive -> encode_tags(TagIn, [7], 1);
minusFour -> encode_tags(TagIn, [8], 1);
minusThree -> encode_tags(TagIn, [9], 1);
minusTwo -> encode_tags(TagIn, [10], 1);
minusOne -> encode_tags(TagIn, [11], 1);
zero -> encode_tags(TagIn, [12], 1);
one -> encode_tags(TagIn, [13], 1);
two -> encode_tags(TagIn, [14], 1);
three -> encode_tags(TagIn, [15], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_RNTP-Threshold'(Tlv) ->
   'dec_RNTP-Threshold'(Tlv, [10]).

'dec_RNTP-Threshold'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> minusInfinity;
1 -> minusEleven;
2 -> minusTen;
3 -> minusNine;
4 -> minusEight;
5 -> minusSeven;
6 -> minusSix;
7 -> minusFive;
8 -> minusFour;
9 -> minusThree;
10 -> minusTwo;
11 -> minusOne;
12 -> zero;
13 -> one;
14 -> two;
15 -> three;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ReportCharacteristics
%%================================
'enc_ReportCharacteristics'(Val) ->
    'enc_ReportCharacteristics'(Val, [<<3>>]).

'enc_ReportCharacteristics'(Val, TagIn) ->
encode_unnamed_bit_string(32, Val, TagIn).


'dec_ReportCharacteristics'(Tlv) ->
   'dec_ReportCharacteristics'(Tlv, [3]).

'dec_ReportCharacteristics'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 32 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  ReportArea
%%================================
'enc_ReportArea'(Val) ->
    'enc_ReportArea'(Val, [<<10>>]).

'enc_ReportArea'(Val, TagIn) ->
case Val of
ecgi -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ReportArea'(Tlv) ->
   'dec_ReportArea'(Tlv, [10]).

'dec_ReportArea'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> ecgi;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  RelativeNarrowbandTxPower
%%================================
'enc_RelativeNarrowbandTxPower'(Val) ->
    'enc_RelativeNarrowbandTxPower'(Val, [<<48>>]).

'enc_RelativeNarrowbandTxPower'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute rNTP-PerPRB(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute rNTP-Threshold(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
minusInfinity -> encode_tags([<<129>>], [0], 1);
minusEleven -> encode_tags([<<129>>], [1], 1);
minusTen -> encode_tags([<<129>>], [2], 1);
minusNine -> encode_tags([<<129>>], [3], 1);
minusEight -> encode_tags([<<129>>], [4], 1);
minusSeven -> encode_tags([<<129>>], [5], 1);
minusSix -> encode_tags([<<129>>], [6], 1);
minusFive -> encode_tags([<<129>>], [7], 1);
minusFour -> encode_tags([<<129>>], [8], 1);
minusThree -> encode_tags([<<129>>], [9], 1);
minusTwo -> encode_tags([<<129>>], [10], 1);
minusOne -> encode_tags([<<129>>], [11], 1);
zero -> encode_tags([<<129>>], [12], 1);
one -> encode_tags([<<129>>], [13], 1);
two -> encode_tags([<<129>>], [14], 1);
three -> encode_tags([<<129>>], [15], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute numberOfCellSpecificAntennaPorts(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
one -> encode_tags([<<130>>], [0], 1);
two -> encode_tags([<<130>>], [1], 1);
four -> encode_tags([<<130>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute p-B(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute pDCCH-InterferenceImpact(5) with type INTEGER
%%-------------------------------------------------
   {EncBytes5,EncLen5} = encode_integer(Cindex5, [<<132>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_RelativeNarrowbandTxPower_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  RelativeNarrowbandTxPower_iE-Extensions
%%================================
'enc_RelativeNarrowbandTxPower_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_RelativeNarrowbandTxPower_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_RelativeNarrowbandTxPower_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_RelativeNarrowbandTxPower_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_RelativeNarrowbandTxPower_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField
%%================================
'enc_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_24'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_24'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_RelativeNarrowbandTxPower_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_RelativeNarrowbandTxPower_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_RelativeNarrowbandTxPower'(Tlv) ->
   'dec_RelativeNarrowbandTxPower'(Tlv, [16]).

'dec_RelativeNarrowbandTxPower'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute rNTP-PerPRB(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_native_bit_string(V1, [131072]),

%%-------------------------------------------------
%% attribute rNTP-Threshold(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> minusInfinity;
1 -> minusEleven;
2 -> minusTen;
3 -> minusNine;
4 -> minusEight;
5 -> minusSeven;
6 -> minusSix;
7 -> minusFive;
8 -> minusFour;
9 -> minusThree;
10 -> minusTwo;
11 -> minusOne;
12 -> zero;
13 -> one;
14 -> two;
15 -> three;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute numberOfCellSpecificAntennaPorts(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> one;
1 -> two;
2 -> four;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute p-B(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = decode_integer(V4, [131075]),

%%-------------------------------------------------
%% attribute pDCCH-InterferenceImpact(5) with type INTEGER
%%-------------------------------------------------
[V5|Tlv6] = Tlv5, 
Term5 = decode_integer(V5, [131076]),

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_RelativeNarrowbandTxPower_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'RelativeNarrowbandTxPower', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  Registration-Request
%%================================
'enc_Registration-Request'(Val) ->
    'enc_Registration-Request'(Val, [<<10>>]).

'enc_Registration-Request'(Val, TagIn) ->
case Val of
start -> encode_tags(TagIn, [0], 1);
stop -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Registration-Request'(Tlv) ->
   'dec_Registration-Request'(Tlv, [10]).

'dec_Registration-Request'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> start;
1 -> stop;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  ReceiveStatusofULPDCPSDUs
%%================================
'enc_ReceiveStatusofULPDCPSDUs'(Val) ->
    'enc_ReceiveStatusofULPDCPSDUs'(Val, [<<3>>]).

'enc_ReceiveStatusofULPDCPSDUs'(Val, TagIn) ->
encode_unnamed_bit_string(4096, Val, TagIn).


'dec_ReceiveStatusofULPDCPSDUs'(Tlv) ->
   'dec_ReceiveStatusofULPDCPSDUs'(Tlv, [3]).

'dec_ReceiveStatusofULPDCPSDUs'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 4096 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  QCI
%%================================
'enc_QCI'(Val) ->
    'enc_QCI'(Val, [<<2>>]).

'enc_QCI'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_QCI'(Tlv) ->
   'dec_QCI'(Tlv, [2]).

'dec_QCI'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PriorityLevel
%%================================
'enc_PriorityLevel'(Val) ->
    'enc_PriorityLevel'(Val, [<<2>>]).

'enc_PriorityLevel'(Val, TagIn) ->
encode_integer(Val, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}], TagIn).


'dec_PriorityLevel'(Tlv) ->
   'dec_PriorityLevel'(Tlv, [2]).

'dec_PriorityLevel'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 15 ->
Val2 = Val1,
number2name(Val2, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}]);
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Pre-emptionVulnerability
%%================================
'enc_Pre-emptionVulnerability'(Val) ->
    'enc_Pre-emptionVulnerability'(Val, [<<10>>]).

'enc_Pre-emptionVulnerability'(Val, TagIn) ->
case Val of
'not-pre-emptable' -> encode_tags(TagIn, [0], 1);
'pre-emptable' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Pre-emptionVulnerability'(Tlv) ->
   'dec_Pre-emptionVulnerability'(Tlv, [10]).

'dec_Pre-emptionVulnerability'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  Pre-emptionCapability
%%================================
'enc_Pre-emptionCapability'(Val) ->
    'enc_Pre-emptionCapability'(Val, [<<10>>]).

'enc_Pre-emptionCapability'(Val, TagIn) ->
case Val of
'shall-not-trigger-pre-emption' -> encode_tags(TagIn, [0], 1);
'may-trigger-pre-emption' -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Pre-emptionCapability'(Tlv) ->
   'dec_Pre-emptionCapability'(Tlv, [10]).

'dec_Pre-emptionCapability'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end.



%%================================
%%  PLMN-Identity
%%================================
'enc_PLMN-Identity'(Val) ->
    'enc_PLMN-Identity'(Val, [<<4>>]).

'enc_PLMN-Identity'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_PLMN-Identity'(Tlv) ->
   'dec_PLMN-Identity'(Tlv, [4]).

'dec_PLMN-Identity'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  PCI
%%================================
'enc_PCI'(Val) ->
    'enc_PCI'(Val, [<<2>>]).

'enc_PCI'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PCI'(Tlv) ->
   'dec_PCI'(Tlv, [2]).

'dec_PCI'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  PDCP-SN
%%================================
'enc_PDCP-SN'(Val) ->
    'enc_PDCP-SN'(Val, [<<2>>]).

'enc_PDCP-SN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_PDCP-SN'(Tlv) ->
   'dec_PDCP-SN'(Tlv, [2]).

'dec_PDCP-SN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  NextHopChainingCount
%%================================
'enc_NextHopChainingCount'(Val) ->
    'enc_NextHopChainingCount'(Val, [<<2>>]).

'enc_NextHopChainingCount'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_NextHopChainingCount'(Tlv) ->
   'dec_NextHopChainingCount'(Tlv, [2]).

'dec_NextHopChainingCount'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 7 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Neighbour-Information
%%================================
'enc_Neighbour-Information'(Val) ->
    'enc_Neighbour-Information'(Val, [<<48>>]).

'enc_Neighbour-Information'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_Neighbour-Information_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Neighbour-Information_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Neighbour-Information_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Neighbour-Information_SEQOF'(H, [<<48>>]),
   'enc_Neighbour-Information_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Neighbour-Information_SEQOF
%%================================
'enc_Neighbour-Information_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute eCGI(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute pCI(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute eARFCN(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_Neighbour-Information_SEQOF_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  Neighbour-Information_SEQOF_iE-Extensions
%%================================
'enc_Neighbour-Information_SEQOF_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_Neighbour-Information_SEQOF_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_Neighbour-Information_SEQOF_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_Neighbour-Information_SEQOF_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_Neighbour-Information_SEQOF_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField
%%================================
'enc_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_20'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_20'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_Neighbour-Information_SEQOF_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Neighbour-Information_SEQOF_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].


'dec_Neighbour-Information_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eCGI(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute pCI(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = decode_integer(V2, [131073]),

%%-------------------------------------------------
%% attribute eARFCN(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_Neighbour-Information_SEQOF_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'Neighbour-Information_SEQOF', Term1, Term2, Term3, Term4}.



'dec_Neighbour-Information'(Tlv) ->
   'dec_Neighbour-Information'(Tlv, [16]).

'dec_Neighbour-Information'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_Neighbour-Information_SEQOF'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  Measurement-ID
%%================================
'enc_Measurement-ID'(Val) ->
    'enc_Measurement-ID'(Val, [<<2>>]).

'enc_Measurement-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_Measurement-ID'(Tlv) ->
   'dec_Measurement-ID'(Tlv, [2]).

'dec_Measurement-ID'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  MME-Code
%%================================
'enc_MME-Code'(Val) ->
    'enc_MME-Code'(Val, [<<4>>]).

'enc_MME-Code'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MME-Code'(Tlv) ->
   'dec_MME-Code'(Tlv, [4]).

'dec_MME-Code'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  MME-Group-ID
%%================================
'enc_MME-Group-ID'(Val) ->
    'enc_MME-Group-ID'(Val, [<<4>>]).

'enc_MME-Group-ID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_MME-Group-ID'(Tlv) ->
   'dec_MME-Group-ID'(Tlv, [4]).

'dec_MME-Group-ID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  LocationReportingInformation
%%================================
'enc_LocationReportingInformation'(Val) ->
    'enc_LocationReportingInformation'(Val, [<<48>>]).

'enc_LocationReportingInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute eventType(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
'change-of-serving-cell' -> encode_tags([<<128>>], [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute reportArea(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
ecgi -> encode_tags([<<129>>], [0], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LocationReportingInformation_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LocationReportingInformation_iE-Extensions
%%================================
'enc_LocationReportingInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LocationReportingInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LocationReportingInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LocationReportingInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_LocationReportingInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LocationReportingInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_56'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_56'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_LocationReportingInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LocationReportingInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_LocationReportingInformation'(Tlv) ->
   'dec_LocationReportingInformation'(Tlv, [16]).

'dec_LocationReportingInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eventType(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> 'change-of-serving-cell';
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute reportArea(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> ecgi;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_LocationReportingInformation_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LocationReportingInformation', Term1, Term2, Term3}.



%%================================
%%  LoadIndicator
%%================================
'enc_LoadIndicator'(Val) ->
    'enc_LoadIndicator'(Val, [<<10>>]).

'enc_LoadIndicator'(Val, TagIn) ->
case Val of
lowLoad -> encode_tags(TagIn, [0], 1);
mediumLoad -> encode_tags(TagIn, [1], 1);
highLoad -> encode_tags(TagIn, [2], 1);
overLoad -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_LoadIndicator'(Tlv) ->
   'dec_LoadIndicator'(Tlv, [10]).

'dec_LoadIndicator'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  LastVisitedGERANCellInformation
%%================================
'enc_LastVisitedGERANCellInformation'(Val) ->
    'enc_LastVisitedGERANCellInformation'(Val, []).

'enc_LastVisitedGERANCellInformation'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      undefined ->
         encode_null(element(2,Val), [<<128>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_LastVisitedGERANCellInformation'(Tlv) ->
   'dec_LastVisitedGERANCellInformation'(Tlv, []).

'dec_LastVisitedGERANCellInformation'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'undefined'
    {131072, V1} -> 
        {undefined, decode_null(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  LastVisitedUTRANCellInformation
%%================================
'enc_LastVisitedUTRANCellInformation'(Val) ->
    'enc_LastVisitedUTRANCellInformation'(Val, [<<4>>]).

'enc_LastVisitedUTRANCellInformation'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LastVisitedUTRANCellInformation'(Tlv) ->
   'dec_LastVisitedUTRANCellInformation'(Tlv, [4]).

'dec_LastVisitedUTRANCellInformation'(Tlv, TagIn) ->
decode_octet_string(Tlv, TagIn).



%%================================
%%  LastVisitedEUTRANCellInformation
%%================================
'enc_LastVisitedEUTRANCellInformation'(Val) ->
    'enc_LastVisitedEUTRANCellInformation'(Val, [<<48>>]).

'enc_LastVisitedEUTRANCellInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute global-Cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_ECGI'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute cellType(2)   External X2AP:CellType
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_CellType'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute time-UE-StayedInCell(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  LastVisitedEUTRANCellInformation_iE-Extensions
%%================================
'enc_LastVisitedEUTRANCellInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_LastVisitedEUTRANCellInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_60'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_60'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_LastVisitedEUTRANCellInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_LastVisitedEUTRANCellInformation'(Tlv) ->
   'dec_LastVisitedEUTRANCellInformation'(Tlv, [16]).

'dec_LastVisitedEUTRANCellInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute global-Cell-ID(1)   External X2AP:ECGI
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_ECGI'(V1, [131072]),

%%-------------------------------------------------
%% attribute cellType(2)   External X2AP:CellType
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_CellType'(V2, [131073]),

%%-------------------------------------------------
%% attribute time-UE-StayedInCell(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val1 = decode_integer(V3, [131074]),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_LastVisitedEUTRANCellInformation_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'LastVisitedEUTRANCellInformation', Term1, Term2, Term3, Term4}.



%%================================
%%  LastVisitedCell-Item
%%================================
'enc_LastVisitedCell-Item'(Val) ->
    'enc_LastVisitedCell-Item'(Val, []).

'enc_LastVisitedCell-Item'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'e-UTRAN-Cell' ->
         'enc_LastVisitedEUTRANCellInformation'(element(2,Val), [<<160>>]);
      'uTRAN-Cell' ->
         encode_restricted_string(element(2,Val), [<<129>>]);
      'gERAN-Cell' ->
         'enc_LastVisitedGERANCellInformation'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_LastVisitedCell-Item'(Tlv) ->
   'dec_LastVisitedCell-Item'(Tlv, []).

'dec_LastVisitedCell-Item'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'e-UTRAN-Cell'
    {131072, V1} -> 
        {'e-UTRAN-Cell', 'dec_LastVisitedEUTRANCellInformation'(V1, [])};


%% 'uTRAN-Cell'
    {131073, V1} -> 
        {'uTRAN-Cell', decode_octet_string(V1, [])};


%% 'gERAN-Cell'
    {131074, V1} -> 
        {'gERAN-Cell', 'dec_LastVisitedGERANCellInformation'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  LAC
%%================================
'enc_LAC'(Val) ->
    'enc_LAC'(Val, [<<4>>]).

'enc_LAC'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_LAC'(Tlv) ->
   'dec_LAC'(Tlv, [4]).

'dec_LAC'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  Key-eNodeB-Star
%%================================
'enc_Key-eNodeB-Star'(Val) ->
    'enc_Key-eNodeB-Star'(Val, [<<3>>]).

'enc_Key-eNodeB-Star'(Val, TagIn) ->
encode_unnamed_bit_string(256, Val, TagIn).


'dec_Key-eNodeB-Star'(Tlv) ->
   'dec_Key-eNodeB-Star'(Tlv, [3]).

'dec_Key-eNodeB-Star'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  InterfacesToTrace
%%================================
'enc_InterfacesToTrace'(Val) ->
    'enc_InterfacesToTrace'(Val, [<<3>>]).

'enc_InterfacesToTrace'(Val, TagIn) ->
encode_unnamed_bit_string(8, Val, TagIn).


'dec_InterfacesToTrace'(Tlv) ->
   'dec_InterfacesToTrace'(Tlv, [3]).

'dec_InterfacesToTrace'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  IntegrityProtectionAlgorithms
%%================================
'enc_IntegrityProtectionAlgorithms'(Val) ->
    'enc_IntegrityProtectionAlgorithms'(Val, [<<3>>]).

'enc_IntegrityProtectionAlgorithms'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_IntegrityProtectionAlgorithms'(Tlv) ->
   'dec_IntegrityProtectionAlgorithms'(Tlv, [3]).

'dec_IntegrityProtectionAlgorithms'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  HWLoadIndicator
%%================================
'enc_HWLoadIndicator'(Val) ->
    'enc_HWLoadIndicator'(Val, [<<48>>]).

'enc_HWLoadIndicator'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute dLHWLoadIndicator(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
lowLoad -> encode_tags([<<128>>], [0], 1);
mediumLoad -> encode_tags([<<128>>], [1], 1);
highLoad -> encode_tags([<<128>>], [2], 1);
overLoad -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute uLHWLoadIndicator(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
lowLoad -> encode_tags([<<129>>], [0], 1);
mediumLoad -> encode_tags([<<129>>], [1], 1);
highLoad -> encode_tags([<<129>>], [2], 1);
overLoad -> encode_tags([<<129>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HWLoadIndicator_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HWLoadIndicator_iE-Extensions
%%================================
'enc_HWLoadIndicator_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HWLoadIndicator_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HWLoadIndicator_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HWLoadIndicator_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_HWLoadIndicator_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HWLoadIndicator_iE-Extensions_ProtocolExtensionField
%%================================
'enc_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_3'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_3'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_HWLoadIndicator_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HWLoadIndicator_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_HWLoadIndicator'(Tlv) ->
   'dec_HWLoadIndicator'(Tlv, [16]).

'dec_HWLoadIndicator'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute dLHWLoadIndicator(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute uLHWLoadIndicator(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> lowLoad;
1 -> mediumLoad;
2 -> highLoad;
3 -> overLoad;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_HWLoadIndicator_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HWLoadIndicator', Term1, Term2, Term3}.



%%================================
%%  HFN
%%================================
'enc_HFN'(Val) ->
    'enc_HFN'(Val, [<<2>>]).

'enc_HFN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_HFN'(Tlv) ->
   'dec_HFN'(Tlv, [2]).

'dec_HFN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 1048575 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  HandoverRestrictionList
%%================================
'enc_HandoverRestrictionList'(Val) ->
    'enc_HandoverRestrictionList'(Val, [<<48>>]).

'enc_HandoverRestrictionList'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5, Cindex6} = Val,

%%-------------------------------------------------
%% attribute servingPLMN(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute equivalentPLMNs(2)   External X2AP:EPLMNs OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_EPLMNs'(Cindex2, [<<161>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenTAs(3)   External X2AP:ForbiddenTAs OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenTAs'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenLAs(4)   External X2AP:ForbiddenLAs OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenLAs'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute forbiddenInterRATs(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex5 of
all -> encode_tags([<<132>>], [0], 1);
geran -> encode_tags([<<132>>], [1], 1);
utran -> encode_tags([<<132>>], [2], 1);
cdma2000 -> encode_tags([<<132>>], [3], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes6,EncLen6} =  case Cindex6 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_HandoverRestrictionList_iE-Extensions'(Cindex6, [<<165>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5, EncBytes6],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5 + EncLen6,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  HandoverRestrictionList_iE-Extensions
%%================================
'enc_HandoverRestrictionList_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_HandoverRestrictionList_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_HandoverRestrictionList_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_HandoverRestrictionList_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_HandoverRestrictionList_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  HandoverRestrictionList_iE-Extensions_ProtocolExtensionField
%%================================
'enc_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_55'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_55'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_HandoverRestrictionList_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_HandoverRestrictionList_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_HandoverRestrictionList'(Tlv) ->
   'dec_HandoverRestrictionList'(Tlv, [16]).

'dec_HandoverRestrictionList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute servingPLMN(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute equivalentPLMNs(2)   External X2AP:EPLMNs OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_EPLMNs'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute forbiddenTAs(3)   External X2AP:ForbiddenTAs OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenTAs'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute forbiddenLAs(4)   External X2AP:ForbiddenLAs OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_ForbiddenLAs'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute forbiddenInterRATs(5) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {case decode_integer(V5, []) of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000;
Default1 -> {asn1_enum,Default1}
end, TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(6) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term6,Tlv7} = case Tlv6 of
[{131077,V6}|TempTlv7] ->
    {'dec_HandoverRestrictionList_iE-Extensions'(V6, []), TempTlv7};
    _ ->
        { asn1_NOVALUE, Tlv6}
end,

case Tlv7 of [] -> true; _ -> true end, % ... extra fields skipped
   {'HandoverRestrictionList', Term1, Term2, Term3, Term4, Term5, Term6}.



%%================================
%%  GUMMEI
%%================================
'enc_GUMMEI'(Val) ->
    'enc_GUMMEI'(Val, [<<48>>]).

'enc_GUMMEI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute gU-Group-ID(1)   External X2AP:GU-Group-ID
%%-------------------------------------------------
   {EncBytes1,EncLen1} = 'enc_GU-Group-ID'(Cindex1, [<<160>>]),

%%-------------------------------------------------
%% attribute mMME-Code(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GUMMEI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GUMMEI_iE-Extensions
%%================================
'enc_GUMMEI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GUMMEI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GUMMEI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GUMMEI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GUMMEI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GUMMEI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GUMMEI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_64'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_64'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GUMMEI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GUMMEI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GUMMEI'(Tlv) ->
   'dec_GUMMEI'(Tlv, [16]).

'dec_GUMMEI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute gU-Group-ID(1)   External X2AP:GU-Group-ID
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = 'dec_GU-Group-ID'(V1, [131072]),

%%-------------------------------------------------
%% attribute mMME-Code(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if C1 =:= 1 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GUMMEI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GUMMEI', Term1, Term2, Term3}.



%%================================
%%  GU-Group-ID
%%================================
'enc_GU-Group-ID'(Val) ->
    'enc_GU-Group-ID'(Val, [<<48>>]).

'enc_GU-Group-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute mME-Group-ID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GU-Group-ID_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GU-Group-ID_iE-Extensions
%%================================
'enc_GU-Group-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GU-Group-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GU-Group-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GU-Group-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GU-Group-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GU-Group-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_63'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_63'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GU-Group-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GU-Group-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GU-Group-ID'(Tlv) ->
   'dec_GU-Group-ID'(Tlv, [16]).

'dec_GU-Group-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute mME-Group-ID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_octet_string(V2, [131073]),
C2 = byte_size(Val2),
if C2 =:= 2 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GU-Group-ID_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GU-Group-ID', Term1, Term2, Term3}.



%%================================
%%  GUGroupIDList
%%================================
'enc_GUGroupIDList'(Val) ->
    'enc_GUGroupIDList'(Val, [<<48>>]).

'enc_GUGroupIDList'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_GUGroupIDList_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GUGroupIDList_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GUGroupIDList_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GU-Group-ID'(H, [<<48>>]),
   'enc_GUGroupIDList_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_GUGroupIDList'(Tlv) ->
   'dec_GUGroupIDList'(Tlv, [16]).

'dec_GUGroupIDList'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GU-Group-ID'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  GTP-TEI
%%================================
'enc_GTP-TEI'(Val) ->
    'enc_GTP-TEI'(Val, [<<4>>]).

'enc_GTP-TEI'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_GTP-TEI'(Tlv) ->
   'dec_GTP-TEI'(Tlv, [4]).

'dec_GTP-TEI'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  GTPtunnelEndpoint
%%================================
'enc_GTPtunnelEndpoint'(Val) ->
    'enc_GTPtunnelEndpoint'(Val, [<<48>>]).

'enc_GTPtunnelEndpoint'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute transportLayerAddress(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute gTP-TEID(2) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_restricted_string(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GTPtunnelEndpoint_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GTPtunnelEndpoint_iE-Extensions
%%================================
'enc_GTPtunnelEndpoint_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GTPtunnelEndpoint_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GTPtunnelEndpoint_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GTPtunnelEndpoint_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GTPtunnelEndpoint_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_41'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_41'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GTPtunnelEndpoint_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GTPtunnelEndpoint_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GTPtunnelEndpoint'(Tlv) ->
   'dec_GTPtunnelEndpoint'(Tlv, [16]).

'dec_GTPtunnelEndpoint'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute transportLayerAddress(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_native_bit_string(V1, [131072]),

%%-------------------------------------------------
%% attribute gTP-TEID(2) with type OCTET STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_octet_string(V2, [131073]),
C1 = byte_size(Val1),
if C1 =:= 4 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GTPtunnelEndpoint_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GTPtunnelEndpoint', Term1, Term2, Term3}.



%%================================
%%  GlobalENB-ID
%%================================
'enc_GlobalENB-ID'(Val) ->
    'enc_GlobalENB-ID'(Val, [<<48>>]).

'enc_GlobalENB-ID'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eNB-ID(2)   External X2AP:ENB-ID
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ENB-ID'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GlobalENB-ID_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GlobalENB-ID_iE-Extensions
%%================================
'enc_GlobalENB-ID_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GlobalENB-ID_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GlobalENB-ID_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GlobalENB-ID_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GlobalENB-ID_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GlobalENB-ID_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_65'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_65'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GlobalENB-ID_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GlobalENB-ID_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GlobalENB-ID'(Tlv) ->
   'dec_GlobalENB-ID'(Tlv, [16]).

'dec_GlobalENB-ID'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eNB-ID(2)   External X2AP:ENB-ID
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ENB-ID'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GlobalENB-ID_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GlobalENB-ID', Term1, Term2, Term3}.



%%================================
%%  GBR-QosInformation
%%================================
'enc_GBR-QosInformation'(Val) ->
    'enc_GBR-QosInformation'(Val, [<<48>>]).

'enc_GBR-QosInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateDL(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateUL(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateDL(3) with type INTEGER
%%-------------------------------------------------
   {EncBytes3,EncLen3} = encode_integer(Cindex3, [<<130>>]),

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateUL(4) with type INTEGER
%%-------------------------------------------------
   {EncBytes4,EncLen4} = encode_integer(Cindex4, [<<131>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GBR-QosInformation_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  GBR-QosInformation_iE-Extensions
%%================================
'enc_GBR-QosInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_GBR-QosInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_GBR-QosInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_GBR-QosInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_GBR-QosInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  GBR-QosInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_46'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_46'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_GBR-QosInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_GBR-QosInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_GBR-QosInformation'(Tlv) ->
   'dec_GBR-QosInformation'(Tlv, [16]).

'dec_GBR-QosInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateDL(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-MaximumBitrateUL(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 10000000000 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateDL(3) with type INTEGER
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = begin
Val3 = decode_integer(V3, [131074]),
if 0 =< Val3, Val3 =< 10000000000 ->
Val3;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute e-RAB-GuaranteedBitrateUL(4) with type INTEGER
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = begin
Val4 = decode_integer(V4, [131075]),
if 0 =< Val4, Val4 =< 10000000000 ->
Val4;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_GBR-QosInformation_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'GBR-QosInformation', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  ForbiddenLACs
%%================================
'enc_ForbiddenLACs'(Val) ->
    'enc_ForbiddenLACs'(Val, [<<48>>]).

'enc_ForbiddenLACs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLACs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLACs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLACs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ForbiddenLACs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenLACs'(Tlv) ->
   'dec_ForbiddenLACs'(Tlv, [16]).

'dec_ForbiddenLACs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ForbiddenLAs-Item
%%================================
'enc_ForbiddenLAs-Item'(Val) ->
    'enc_ForbiddenLAs-Item'(Val, [<<48>>]).

'enc_ForbiddenLAs-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute forbiddenLACs(2)   External X2AP:ForbiddenLACs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ForbiddenLACs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenLAs-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ForbiddenLAs-Item_iE-Extensions
%%================================
'enc_ForbiddenLAs-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLAs-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLAs-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ForbiddenLAs-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_54'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_54'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ForbiddenLAs-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenLAs-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ForbiddenLAs-Item'(Tlv) ->
   'dec_ForbiddenLAs-Item'(Tlv, [16]).

'dec_ForbiddenLAs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute forbiddenLACs(2)   External X2AP:ForbiddenLACs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ForbiddenLACs'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenLAs-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ForbiddenLAs-Item', Term1, Term2, Term3}.



%%================================
%%  ForbiddenLAs
%%================================
'enc_ForbiddenLAs'(Val) ->
    'enc_ForbiddenLAs'(Val, [<<48>>]).

'enc_ForbiddenLAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenLAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenLAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenLAs-Item'(H, [<<48>>]),
   'enc_ForbiddenLAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenLAs'(Tlv) ->
   'dec_ForbiddenLAs'(Tlv, [16]).

'dec_ForbiddenLAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenLAs-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ForbiddenTACs
%%================================
'enc_ForbiddenTACs'(Val) ->
    'enc_ForbiddenTACs'(Val, [<<48>>]).

'enc_ForbiddenTACs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTACs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTACs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTACs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_ForbiddenTACs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenTACs'(Tlv) ->
   'dec_ForbiddenTACs'(Tlv, [16]).

'dec_ForbiddenTACs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 2 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  ForbiddenTAs-Item
%%================================
'enc_ForbiddenTAs-Item'(Val) ->
    'enc_ForbiddenTAs-Item'(Val, [<<48>>]).

'enc_ForbiddenTAs-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute forbiddenTACs(2)   External X2AP:ForbiddenTACs
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_ForbiddenTACs'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ForbiddenTAs-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ForbiddenTAs-Item_iE-Extensions
%%================================
'enc_ForbiddenTAs-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTAs-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTAs-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ForbiddenTAs-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_53'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_53'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ForbiddenTAs-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenTAs-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ForbiddenTAs-Item'(Tlv) ->
   'dec_ForbiddenTAs-Item'(Tlv, [16]).

'dec_ForbiddenTAs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute forbiddenTACs(2)   External X2AP:ForbiddenTACs
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_ForbiddenTACs'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ForbiddenTAs-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ForbiddenTAs-Item', Term1, Term2, Term3}.



%%================================
%%  ForbiddenTAs
%%================================
'enc_ForbiddenTAs'(Val) ->
    'enc_ForbiddenTAs'(Val, [<<48>>]).

'enc_ForbiddenTAs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ForbiddenTAs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ForbiddenTAs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ForbiddenTAs-Item'(H, [<<48>>]),
   'enc_ForbiddenTAs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_ForbiddenTAs'(Tlv) ->
   'dec_ForbiddenTAs'(Tlv, [16]).

'dec_ForbiddenTAs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ForbiddenTAs-Item'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  ForbiddenInterRATs
%%================================
'enc_ForbiddenInterRATs'(Val) ->
    'enc_ForbiddenInterRATs'(Val, [<<10>>]).

'enc_ForbiddenInterRATs'(Val, TagIn) ->
case Val of
all -> encode_tags(TagIn, [0], 1);
geran -> encode_tags(TagIn, [1], 1);
utran -> encode_tags(TagIn, [2], 1);
cdma2000 -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_ForbiddenInterRATs'(Tlv) ->
   'dec_ForbiddenInterRATs'(Tlv, [10]).

'dec_ForbiddenInterRATs'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> all;
1 -> geran;
2 -> utran;
3 -> cdma2000;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  EventType
%%================================
'enc_EventType'(Val) ->
    'enc_EventType'(Val, [<<10>>]).

'enc_EventType'(Val, TagIn) ->
case Val of
'change-of-serving-cell' -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_EventType'(Tlv) ->
   'dec_EventType'(Tlv, [10]).

'dec_EventType'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'change-of-serving-cell';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  EUTRANTraceID
%%================================
'enc_EUTRANTraceID'(Val) ->
    'enc_EUTRANTraceID'(Val, [<<4>>]).

'enc_EUTRANTraceID'(Val, TagIn) ->
encode_restricted_string(Val, TagIn).


'dec_EUTRANTraceID'(Tlv) ->
   'dec_EUTRANTraceID'(Tlv, [4]).

'dec_EUTRANTraceID'(Tlv, TagIn) ->
begin
Val1 = decode_octet_string(Tlv, TagIn),
C1 = byte_size(Val1),
if C1 =:= 8 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  EUTRANCellIdentifier
%%================================
'enc_EUTRANCellIdentifier'(Val) ->
    'enc_EUTRANCellIdentifier'(Val, [<<3>>]).

'enc_EUTRANCellIdentifier'(Val, TagIn) ->
encode_unnamed_bit_string(28, Val, TagIn).


'dec_EUTRANCellIdentifier'(Tlv) ->
   'dec_EUTRANCellIdentifier'(Tlv, [3]).

'dec_EUTRANCellIdentifier'(Tlv, TagIn) ->
begin
Val1 = decode_native_bit_string(Tlv, TagIn),
C1 = bit_size(Val1),
if C1 =:= 28 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  E-RAB-Item
%%================================
'enc_E-RAB-Item'(Val) ->
    'enc_E-RAB-Item'(Val, [<<48>>]).

'enc_E-RAB-Item'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute cause(2)   External X2AP:Cause
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_Cause'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RAB-Item_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RAB-Item_iE-Extensions
%%================================
'enc_E-RAB-Item_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RAB-Item_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RAB-Item_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RAB-Item_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RAB-Item_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RAB-Item_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_66'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_66'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RAB-Item_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RAB-Item_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RAB-Item'(Tlv) ->
   'dec_E-RAB-Item'(Tlv, [16]).

'dec_E-RAB-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute e-RAB-ID(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = decode_integer(V1, [131072]),

%%-------------------------------------------------
%% attribute cause(2)   External X2AP:Cause
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_Cause'(V2, [131073]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_E-RAB-Item_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RAB-Item', Term1, Term2, Term3}.



%%================================
%%  E-RAB-List
%%================================
'enc_E-RAB-List'(Val) ->
    'enc_E-RAB-List'(Val, [<<48>>]).

'enc_E-RAB-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_E-RAB-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RAB-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RAB-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RAB-List_ProtocolIE-Field'(H, [<<48>>]),
   'enc_E-RAB-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RAB-List_ProtocolIE-Field
%%================================
'enc_E-RAB-List_ProtocolIE-Field'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_67'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Value', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RAB-List_ProtocolIE-Field'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldValue
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_67'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Value', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolIE-Field', Term1, Term2, Term3}.



'dec_E-RAB-List'(Tlv) ->
   'dec_E-RAB-List'(Tlv, [16]).

'dec_E-RAB-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RAB-List_ProtocolIE-Field'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  E-RAB-Level-QoS-Parameters
%%================================
'enc_E-RAB-Level-QoS-Parameters'(Val) ->
    'enc_E-RAB-Level-QoS-Parameters'(Val, [<<48>>]).

'enc_E-RAB-Level-QoS-Parameters'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute qCI(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute allocationAndRetentionPriority(2)   External X2AP:AllocationAndRetentionPriority
%%-------------------------------------------------
   {EncBytes2,EncLen2} = 'enc_AllocationAndRetentionPriority'(Cindex2, [<<161>>]),

%%-------------------------------------------------
%% attribute gbrQosInformation(3)   External X2AP:GBR-QosInformation OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_GBR-QosInformation'(Cindex3, [<<162>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_E-RAB-Level-QoS-Parameters_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  E-RAB-Level-QoS-Parameters_iE-Extensions
%%================================
'enc_E-RAB-Level-QoS-Parameters_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField
%%================================
'enc_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_47'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_47'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_E-RAB-Level-QoS-Parameters_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_E-RAB-Level-QoS-Parameters_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_E-RAB-Level-QoS-Parameters'(Tlv) ->
   'dec_E-RAB-Level-QoS-Parameters'(Tlv, [16]).

'dec_E-RAB-Level-QoS-Parameters'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute qCI(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute allocationAndRetentionPriority(2)   External X2AP:AllocationAndRetentionPriority
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = 'dec_AllocationAndRetentionPriority'(V2, [131073]),

%%-------------------------------------------------
%% attribute gbrQosInformation(3)   External X2AP:GBR-QosInformation OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_GBR-QosInformation'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_E-RAB-Level-QoS-Parameters_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'E-RAB-Level-QoS-Parameters', Term1, Term2, Term3, Term4}.



%%================================
%%  E-RAB-ID
%%================================
'enc_E-RAB-ID'(Val) ->
    'enc_E-RAB-ID'(Val, [<<2>>]).

'enc_E-RAB-ID'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_E-RAB-ID'(Tlv) ->
   'dec_E-RAB-ID'(Tlv, [2]).

'dec_E-RAB-ID'(Tlv, TagIn) ->
decode_integer(Tlv, TagIn).



%%================================
%%  EPLMNs
%%================================
'enc_EPLMNs'(Val) ->
    'enc_EPLMNs'(Val, [<<48>>]).

'enc_EPLMNs'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_EPLMNs_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_EPLMNs_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_EPLMNs_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_EPLMNs_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_EPLMNs'(Tlv) ->
   'dec_EPLMNs'(Tlv, [16]).

'dec_EPLMNs'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  EncryptionAlgorithms
%%================================
'enc_EncryptionAlgorithms'(Val) ->
    'enc_EncryptionAlgorithms'(Val, [<<3>>]).

'enc_EncryptionAlgorithms'(Val, TagIn) ->
encode_unnamed_bit_string(Val, TagIn).


'dec_EncryptionAlgorithms'(Tlv) ->
   'dec_EncryptionAlgorithms'(Tlv, [3]).

'dec_EncryptionAlgorithms'(Tlv, TagIn) ->
decode_native_bit_string(Tlv, TagIn).



%%================================
%%  ENB-ID
%%================================
'enc_ENB-ID'(Val) ->
    'enc_ENB-ID'(Val, []).

'enc_ENB-ID'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      'macro-eNB-ID' ->
         encode_unnamed_bit_string(20, element(2,Val), [<<128>>]);
      'home-eNB-ID' ->
         encode_unnamed_bit_string(28, element(2,Val), [<<129>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_ENB-ID'(Tlv) ->
   'dec_ENB-ID'(Tlv, []).

'dec_ENB-ID'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'macro-eNB-ID'
    {131072, V1} -> 
        {'macro-eNB-ID', begin
Val1 = decode_native_bit_string(V1, []),
C1 = bit_size(Val1),
if C1 =:= 20 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end};


%% 'home-eNB-ID'
    {131073, V1} -> 
        {'home-eNB-ID', begin
Val2 = decode_native_bit_string(V1, []),
C2 = bit_size(Val2),
if C2 =:= 28 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  ECGI
%%================================
'enc_ECGI'(Val) ->
    'enc_ECGI'(Val, [<<48>>]).

'enc_ECGI'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_restricted_string(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute eUTRANcellIdentifier(2) with type BIT STRING
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_unnamed_bit_string(28, Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_ECGI_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  ECGI_iE-Extensions
%%================================
'enc_ECGI_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_ECGI_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_ECGI_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_ECGI_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_ECGI_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_ECGI_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  ECGI_iE-Extensions_ProtocolExtensionField
%%================================
'enc_ECGI_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_2'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_ECGI_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_2'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_ECGI_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_ECGI_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_ECGI'(Tlv) ->
   'dec_ECGI'(Tlv, [16]).

'dec_ECGI'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pLMN-Identity(1) with type OCTET STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_octet_string(V1, [131072]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute eUTRANcellIdentifier(2) with type BIT STRING
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_native_bit_string(V2, [131073]),
C2 = bit_size(Val2),
if C2 =:= 28 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_ECGI_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'ECGI', Term1, Term2, Term3}.



%%================================
%%  EUTRA-Mode-Info
%%================================
'enc_EUTRA-Mode-Info'(Val) ->
    'enc_EUTRA-Mode-Info'(Val, []).

'enc_EUTRA-Mode-Info'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      fDD ->
         'enc_FDD-Info'(element(2,Val), [<<160>>]);
      tDD ->
         'enc_TDD-Info'(element(2,Val), [<<161>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_EUTRA-Mode-Info'(Tlv) ->
   'dec_EUTRA-Mode-Info'(Tlv, []).

'dec_EUTRA-Mode-Info'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'fDD'
    {131072, V1} -> 
        {fDD, 'dec_FDD-Info'(V1, [])};


%% 'tDD'
    {131073, V1} -> 
        {tDD, 'dec_TDD-Info'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  TDD-Info
%%================================
'enc_TDD-Info'(Val) ->
    'enc_TDD-Info'(Val, [<<48>>]).

'enc_TDD-Info'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute eARFCN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute transmission-Bandwidth(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
bw6 -> encode_tags([<<129>>], [0], 1);
bw15 -> encode_tags([<<129>>], [1], 1);
bw25 -> encode_tags([<<129>>], [2], 1);
bw50 -> encode_tags([<<129>>], [3], 1);
bw75 -> encode_tags([<<129>>], [4], 1);
bw100 -> encode_tags([<<129>>], [5], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute subframeAssignment(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
sa0 -> encode_tags([<<130>>], [0], 1);
sa1 -> encode_tags([<<130>>], [1], 1);
sa2 -> encode_tags([<<130>>], [2], 1);
sa3 -> encode_tags([<<130>>], [3], 1);
sa4 -> encode_tags([<<130>>], [4], 1);
sa5 -> encode_tags([<<130>>], [5], 1);
sa6 -> encode_tags([<<130>>], [6], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute specialSubframe-Info(4)   External X2AP:SpecialSubframe-Info
%%-------------------------------------------------
   {EncBytes4,EncLen4} = 'enc_SpecialSubframe-Info'(Cindex4, [<<163>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_TDD-Info_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  TDD-Info_iE-Extensions
%%================================
'enc_TDD-Info_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_TDD-Info_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_TDD-Info_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_TDD-Info_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_TDD-Info_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_TDD-Info_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  TDD-Info_iE-Extensions_ProtocolExtensionField
%%================================
'enc_TDD-Info_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_18'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_TDD-Info_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_18'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_TDD-Info_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_TDD-Info_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_TDD-Info'(Tlv) ->
   'dec_TDD-Info'(Tlv, [16]).

'dec_TDD-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute eARFCN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute transmission-Bandwidth(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute subframeAssignment(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> sa0;
1 -> sa1;
2 -> sa2;
3 -> sa3;
4 -> sa4;
5 -> sa5;
6 -> sa6;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute specialSubframe-Info(4)   External X2AP:SpecialSubframe-Info
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = 'dec_SpecialSubframe-Info'(V4, [131075]),

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_TDD-Info_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'TDD-Info', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  FDD-Info
%%================================
'enc_FDD-Info'(Val) ->
    'enc_FDD-Info'(Val, [<<48>>]).

'enc_FDD-Info'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute uL-EARFCN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute dL-EARFCN(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute uL-Transmission-Bandwidth(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
bw6 -> encode_tags([<<130>>], [0], 1);
bw15 -> encode_tags([<<130>>], [1], 1);
bw25 -> encode_tags([<<130>>], [2], 1);
bw50 -> encode_tags([<<130>>], [3], 1);
bw75 -> encode_tags([<<130>>], [4], 1);
bw100 -> encode_tags([<<130>>], [5], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute dL-Transmission-Bandwidth(4) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes4,EncLen4} = case Cindex4 of
bw6 -> encode_tags([<<131>>], [0], 1);
bw15 -> encode_tags([<<131>>], [1], 1);
bw25 -> encode_tags([<<131>>], [2], 1);
bw50 -> encode_tags([<<131>>], [3], 1);
bw75 -> encode_tags([<<131>>], [4], 1);
bw100 -> encode_tags([<<131>>], [5], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_FDD-Info_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  FDD-Info_iE-Extensions
%%================================
'enc_FDD-Info_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_FDD-Info_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_FDD-Info_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_FDD-Info_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_FDD-Info_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_FDD-Info_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  FDD-Info_iE-Extensions_ProtocolExtensionField
%%================================
'enc_FDD-Info_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_16'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_FDD-Info_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_16'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_FDD-Info_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_FDD-Info_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_FDD-Info'(Tlv) ->
   'dec_FDD-Info'(Tlv, [16]).

'dec_FDD-Info'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute uL-EARFCN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute dL-EARFCN(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 65535 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute uL-Transmission-Bandwidth(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute dL-Transmission-Bandwidth(4) with type ENUMERATED
%%-------------------------------------------------
[V4|Tlv5] = Tlv4, 
Term4 = case decode_integer(V4, [131075]) of
0 -> bw6;
1 -> bw15;
2 -> bw25;
3 -> bw50;
4 -> bw75;
5 -> bw100;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_FDD-Info_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'FDD-Info', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  EARFCN
%%================================
'enc_EARFCN'(Val) ->
    'enc_EARFCN'(Val, [<<2>>]).

'enc_EARFCN'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_EARFCN'(Tlv) ->
   'dec_EARFCN'(Tlv, [2]).

'dec_EARFCN'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  DL-Forwarding
%%================================
'enc_DL-Forwarding'(Val) ->
    'enc_DL-Forwarding'(Val, [<<10>>]).

'enc_DL-Forwarding'(Val, TagIn) ->
case Val of
'dL-forwardingProposed' -> encode_tags(TagIn, [0], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_DL-Forwarding'(Tlv) ->
   'dec_DL-Forwarding'(Tlv, [10]).

'dec_DL-Forwarding'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'dL-forwardingProposed';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CyclicPrefixUL
%%================================
'enc_CyclicPrefixUL'(Val) ->
    'enc_CyclicPrefixUL'(Val, [<<10>>]).

'enc_CyclicPrefixUL'(Val, TagIn) ->
case Val of
normal -> encode_tags(TagIn, [0], 1);
extended -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CyclicPrefixUL'(Tlv) ->
   'dec_CyclicPrefixUL'(Tlv, [10]).

'dec_CyclicPrefixUL'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> normal;
1 -> extended;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CyclicPrefixDL
%%================================
'enc_CyclicPrefixDL'(Val) ->
    'enc_CyclicPrefixDL'(Val, [<<10>>]).

'enc_CyclicPrefixDL'(Val, TagIn) ->
case Val of
normal -> encode_tags(TagIn, [0], 1);
extended -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CyclicPrefixDL'(Tlv) ->
   'dec_CyclicPrefixDL'(Tlv, [10]).

'dec_CyclicPrefixDL'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> normal;
1 -> extended;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CriticalityDiagnostics-IE-List
%%================================
'enc_CriticalityDiagnostics-IE-List'(Val) ->
    'enc_CriticalityDiagnostics-IE-List'(Val, [<<48>>]).

'enc_CriticalityDiagnostics-IE-List'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-List_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics-IE-List_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics-IE-List_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-List_SEQOF'(H, [<<48>>]),
   'enc_CriticalityDiagnostics-IE-List_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CriticalityDiagnostics-IE-List_SEQOF
%%================================
'enc_CriticalityDiagnostics-IE-List_SEQOF'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute iECriticality(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
reject -> encode_tags([<<128>>], [0], 1);
ignore -> encode_tags([<<128>>], [1], 1);
notify -> encode_tags([<<128>>], [2], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute iE-ID(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute typeOfError(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'not-understood' -> encode_tags([<<130>>], [0], 1);
missing -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions
%%================================
'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_68'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_68'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].


'dec_CriticalityDiagnostics-IE-List_SEQOF'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute iECriticality(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute iE-ID(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val1 = decode_integer(V2, [131073]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute typeOfError(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'not-understood';
1 -> missing;
Default2 -> {asn1_enum,Default2}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_CriticalityDiagnostics-IE-List_SEQOF_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CriticalityDiagnostics-IE-List_SEQOF', Term1, Term2, Term3, Term4}.



'dec_CriticalityDiagnostics-IE-List'(Tlv) ->
   'dec_CriticalityDiagnostics-IE-List'(Tlv, [16]).

'dec_CriticalityDiagnostics-IE-List'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics-IE-List_SEQOF'(V1, [16]) || V1 <- Tlv1].




%%================================
%%  CriticalityDiagnostics
%%================================
'enc_CriticalityDiagnostics'(Val) ->
    'enc_CriticalityDiagnostics'(Val, [<<48>>]).

'enc_CriticalityDiagnostics'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4, Cindex5} = Val,

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
   {EncBytes1,EncLen1} =  case Cindex1 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            encode_integer(Cindex1, [<<128>>])
       end,

%%-------------------------------------------------
%% attribute triggeringMessage(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex2 of
'initiating-message' -> encode_tags([<<129>>], [0], 1);
'successful-outcome' -> encode_tags([<<129>>], [1], 1);
'unsuccessful-outcome' -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end
       end,

%%-------------------------------------------------
%% attribute procedureCriticality(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            case Cindex3 of
reject -> encode_tags([<<130>>], [0], 1);
ignore -> encode_tags([<<130>>], [1], 1);
notify -> encode_tags([<<130>>], [2], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end
       end,

%%-------------------------------------------------
%% attribute iEsCriticalityDiagnostics(4)   External X2AP:CriticalityDiagnostics-IE-List OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics-IE-List'(Cindex4, [<<163>>])
       end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes5,EncLen5} =  case Cindex5 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CriticalityDiagnostics_iE-Extensions'(Cindex5, [<<164>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4, EncBytes5],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4 + EncLen5,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CriticalityDiagnostics_iE-Extensions
%%================================
'enc_CriticalityDiagnostics_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CriticalityDiagnostics_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CriticalityDiagnostics_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CriticalityDiagnostics_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CriticalityDiagnostics_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_69'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_69'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CriticalityDiagnostics_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CriticalityDiagnostics_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CriticalityDiagnostics'(Tlv) ->
   'dec_CriticalityDiagnostics'(Tlv, [16]).

'dec_CriticalityDiagnostics'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER OPTIONAL
%%-------------------------------------------------
{Term1,Tlv2} = case Tlv1 of
[{131072,V1}|TempTlv2] ->
    {begin
Val1 = decode_integer(V1, []),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end, TempTlv2};
    _ ->
        { asn1_NOVALUE, Tlv1}
end,

%%-------------------------------------------------
%% attribute triggeringMessage(2) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {case decode_integer(V2, []) of
0 -> 'initiating-message';
1 -> 'successful-outcome';
2 -> 'unsuccessful-outcome';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end, TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

%%-------------------------------------------------
%% attribute procedureCriticality(3) with type ENUMERATED OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {case decode_integer(V3, []) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end, TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

%%-------------------------------------------------
%% attribute iEsCriticalityDiagnostics(4)   External X2AP:CriticalityDiagnostics-IE-List OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_CriticalityDiagnostics-IE-List'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(5) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term5,Tlv6} = case Tlv5 of
[{131076,V5}|TempTlv6] ->
    {'dec_CriticalityDiagnostics_iE-Extensions'(V5, []), TempTlv6};
    _ ->
        { asn1_NOVALUE, Tlv5}
end,

case Tlv6 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CriticalityDiagnostics', Term1, Term2, Term3, Term4, Term5}.



%%================================
%%  COUNTvalue
%%================================
'enc_COUNTvalue'(Val) ->
    'enc_COUNTvalue'(Val, [<<48>>]).

'enc_COUNTvalue'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute pDCP-SN(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute hFN(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_COUNTvalue_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  COUNTvalue_iE-Extensions
%%================================
'enc_COUNTvalue_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_COUNTvalue_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_COUNTvalue_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_COUNTvalue_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_COUNTvalue_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  COUNTvalue_iE-Extensions_ProtocolExtensionField
%%================================
'enc_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_36'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_36'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_COUNTvalue_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_COUNTvalue_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_COUNTvalue'(Tlv) ->
   'dec_COUNTvalue'(Tlv, [16]).

'dec_COUNTvalue'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute pDCP-SN(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 4095 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute hFN(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 1048575 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_COUNTvalue_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'COUNTvalue', Term1, Term2, Term3}.



%%================================
%%  CellType
%%================================
'enc_CellType'(Val) ->
    'enc_CellType'(Val, [<<48>>]).

'enc_CellType'(Val, TagIn) ->
{_,Cindex1, Cindex2} = Val,

%%-------------------------------------------------
%% attribute cell-Size(1) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes1,EncLen1} = case Cindex1 of
verysmall -> encode_tags([<<128>>], [0], 1);
small -> encode_tags([<<128>>], [1], 1);
medium -> encode_tags([<<128>>], [2], 1);
large -> encode_tags([<<128>>], [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes2,EncLen2} =  case Cindex2 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_CellType_iE-Extensions'(Cindex2, [<<161>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2],
LenSoFar = EncLen1 + EncLen2,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  CellType_iE-Extensions
%%================================
'enc_CellType_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_CellType_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_CellType_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_CellType_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_CellType_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_CellType_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  CellType_iE-Extensions_ProtocolExtensionField
%%================================
'enc_CellType_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_59'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_CellType_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_59'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_CellType_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_CellType_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_CellType'(Tlv) ->
   'dec_CellType'(Tlv, [16]).

'dec_CellType'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute cell-Size(1) with type ENUMERATED
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = case decode_integer(V1, [131072]) of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large;
Default1 -> {asn1_enum,Default1}
end,

%%-------------------------------------------------
%% attribute iE-Extensions(2) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term2,Tlv3} = case Tlv2 of
[{131073,V2}|TempTlv3] ->
    {'dec_CellType_iE-Extensions'(V2, []), TempTlv3};
    _ ->
        { asn1_NOVALUE, Tlv2}
end,

case Tlv3 of [] -> true; _ -> true end, % ... extra fields skipped
   {'CellType', Term1, Term2}.



%%================================
%%  Cell-Size
%%================================
'enc_Cell-Size'(Val) ->
    'enc_Cell-Size'(Val, [<<10>>]).

'enc_Cell-Size'(Val, TagIn) ->
case Val of
verysmall -> encode_tags(TagIn, [0], 1);
small -> encode_tags(TagIn, [1], 1);
medium -> encode_tags(TagIn, [2], 1);
large -> encode_tags(TagIn, [3], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_Cell-Size'(Tlv) ->
   'dec_Cell-Size'(Tlv, [10]).

'dec_Cell-Size'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> verysmall;
1 -> small;
2 -> medium;
3 -> large;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseTransport
%%================================
'enc_CauseTransport'(Val) ->
    'enc_CauseTransport'(Val, [<<10>>]).

'enc_CauseTransport'(Val, TagIn) ->
case Val of
'transport-resource-unavailable' -> encode_tags(TagIn, [0], 1);
unspecified -> encode_tags(TagIn, [1], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseTransport'(Tlv) ->
   'dec_CauseTransport'(Tlv, [10]).

'dec_CauseTransport'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'transport-resource-unavailable';
1 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseRadioNetwork
%%================================
'enc_CauseRadioNetwork'(Val) ->
    'enc_CauseRadioNetwork'(Val, [<<10>>]).

'enc_CauseRadioNetwork'(Val, TagIn) ->
case Val of
'handover-desirable-for-radio-reasons' -> encode_tags(TagIn, [0], 1);
'time-critical-handover' -> encode_tags(TagIn, [1], 1);
'resource-optimisation-handover' -> encode_tags(TagIn, [2], 1);
'reduce-load-in-serving-cell' -> encode_tags(TagIn, [3], 1);
'partial-handover' -> encode_tags(TagIn, [4], 1);
'unknown-new-eNB-UE-X2AP-ID' -> encode_tags(TagIn, [5], 1);
'unknown-old-eNB-UE-X2AP-ID' -> encode_tags(TagIn, [6], 1);
'unknown-pair-of-UE-X2AP-ID' -> encode_tags(TagIn, [7], 1);
'ho-target-not-allowed' -> encode_tags(TagIn, [8], 1);
'tx2relocoverall-expiry' -> encode_tags(TagIn, [9], 1);
'trelocprep-expiry' -> encode_tags(TagIn, [10], 1);
'cell-not-available' -> encode_tags(TagIn, [11], 1);
'no-radio-resources-available-in-target-cell' -> encode_tags(TagIn, [12], 1);
'invalid-MME-GroupID' -> encode_tags(TagIn, [13], 1);
'unknown-MME-Code' -> encode_tags(TagIn, [14], 1);
'encryption-and-or-integrity-protection-algorithms-not-supported' -> encode_tags(TagIn, [15], 1);
reportCharacteristicsEmpty -> encode_tags(TagIn, [16], 1);
noReportPeriodicity -> encode_tags(TagIn, [17], 1);
existingMeasurementID -> encode_tags(TagIn, [18], 1);
'unknown-eNB-Measurement-ID' -> encode_tags(TagIn, [19], 1);
'measurement-temporarily-not-available' -> encode_tags(TagIn, [20], 1);
unspecified -> encode_tags(TagIn, [21], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseRadioNetwork'(Tlv) ->
   'dec_CauseRadioNetwork'(Tlv, [10]).

'dec_CauseRadioNetwork'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'handover-desirable-for-radio-reasons';
1 -> 'time-critical-handover';
2 -> 'resource-optimisation-handover';
3 -> 'reduce-load-in-serving-cell';
4 -> 'partial-handover';
5 -> 'unknown-new-eNB-UE-X2AP-ID';
6 -> 'unknown-old-eNB-UE-X2AP-ID';
7 -> 'unknown-pair-of-UE-X2AP-ID';
8 -> 'ho-target-not-allowed';
9 -> 'tx2relocoverall-expiry';
10 -> 'trelocprep-expiry';
11 -> 'cell-not-available';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'invalid-MME-GroupID';
14 -> 'unknown-MME-Code';
15 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
16 -> reportCharacteristicsEmpty;
17 -> noReportPeriodicity;
18 -> existingMeasurementID;
19 -> 'unknown-eNB-Measurement-ID';
20 -> 'measurement-temporarily-not-available';
21 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseProtocol
%%================================
'enc_CauseProtocol'(Val) ->
    'enc_CauseProtocol'(Val, [<<10>>]).

'enc_CauseProtocol'(Val, TagIn) ->
case Val of
'transfer-syntax-error' -> encode_tags(TagIn, [0], 1);
'abstract-syntax-error-reject' -> encode_tags(TagIn, [1], 1);
'abstract-syntax-error-ignore-and-notify' -> encode_tags(TagIn, [2], 1);
'message-not-compatible-with-receiver-state' -> encode_tags(TagIn, [3], 1);
'semantic-error' -> encode_tags(TagIn, [4], 1);
unspecified -> encode_tags(TagIn, [5], 1);
'abstract-syntax-error-falsely-constructed-message' -> encode_tags(TagIn, [6], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseProtocol'(Tlv) ->
   'dec_CauseProtocol'(Tlv, [10]).

'dec_CauseProtocol'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> unspecified;
6 -> 'abstract-syntax-error-falsely-constructed-message';
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  CauseMisc
%%================================
'enc_CauseMisc'(Val) ->
    'enc_CauseMisc'(Val, [<<10>>]).

'enc_CauseMisc'(Val, TagIn) ->
case Val of
'control-processing-overload' -> encode_tags(TagIn, [0], 1);
'hardware-failure' -> encode_tags(TagIn, [1], 1);
'om-intervention' -> encode_tags(TagIn, [2], 1);
'not-enough-user-plane-processing-resources' -> encode_tags(TagIn, [3], 1);
unspecified -> encode_tags(TagIn, [4], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end.


'dec_CauseMisc'(Tlv) ->
   'dec_CauseMisc'(Tlv, [10]).

'dec_CauseMisc'(Tlv, TagIn) ->
case decode_integer(Tlv, TagIn) of
0 -> 'control-processing-overload';
1 -> 'hardware-failure';
2 -> 'om-intervention';
3 -> 'not-enough-user-plane-processing-resources';
4 -> unspecified;
Default1 -> {asn1_enum,Default1}
end.



%%================================
%%  Cause
%%================================
'enc_Cause'(Val) ->
    'enc_Cause'(Val, []).

'enc_Cause'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      radioNetwork ->
         case element(2,Val) of
'handover-desirable-for-radio-reasons' -> encode_tags([<<128>>], [0], 1);
'time-critical-handover' -> encode_tags([<<128>>], [1], 1);
'resource-optimisation-handover' -> encode_tags([<<128>>], [2], 1);
'reduce-load-in-serving-cell' -> encode_tags([<<128>>], [3], 1);
'partial-handover' -> encode_tags([<<128>>], [4], 1);
'unknown-new-eNB-UE-X2AP-ID' -> encode_tags([<<128>>], [5], 1);
'unknown-old-eNB-UE-X2AP-ID' -> encode_tags([<<128>>], [6], 1);
'unknown-pair-of-UE-X2AP-ID' -> encode_tags([<<128>>], [7], 1);
'ho-target-not-allowed' -> encode_tags([<<128>>], [8], 1);
'tx2relocoverall-expiry' -> encode_tags([<<128>>], [9], 1);
'trelocprep-expiry' -> encode_tags([<<128>>], [10], 1);
'cell-not-available' -> encode_tags([<<128>>], [11], 1);
'no-radio-resources-available-in-target-cell' -> encode_tags([<<128>>], [12], 1);
'invalid-MME-GroupID' -> encode_tags([<<128>>], [13], 1);
'unknown-MME-Code' -> encode_tags([<<128>>], [14], 1);
'encryption-and-or-integrity-protection-algorithms-not-supported' -> encode_tags([<<128>>], [15], 1);
reportCharacteristicsEmpty -> encode_tags([<<128>>], [16], 1);
noReportPeriodicity -> encode_tags([<<128>>], [17], 1);
existingMeasurementID -> encode_tags([<<128>>], [18], 1);
'unknown-eNB-Measurement-ID' -> encode_tags([<<128>>], [19], 1);
'measurement-temporarily-not-available' -> encode_tags([<<128>>], [20], 1);
unspecified -> encode_tags([<<128>>], [21], 1);
Enumval1 -> exit({error,{asn1, {enumerated_not_in_range,Enumval1}}})
end;
      transport ->
         case element(2,Val) of
'transport-resource-unavailable' -> encode_tags([<<129>>], [0], 1);
unspecified -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end;
      protocol ->
         case element(2,Val) of
'transfer-syntax-error' -> encode_tags([<<130>>], [0], 1);
'abstract-syntax-error-reject' -> encode_tags([<<130>>], [1], 1);
'abstract-syntax-error-ignore-and-notify' -> encode_tags([<<130>>], [2], 1);
'message-not-compatible-with-receiver-state' -> encode_tags([<<130>>], [3], 1);
'semantic-error' -> encode_tags([<<130>>], [4], 1);
unspecified -> encode_tags([<<130>>], [5], 1);
'abstract-syntax-error-falsely-constructed-message' -> encode_tags([<<130>>], [6], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end;
      misc ->
         case element(2,Val) of
'control-processing-overload' -> encode_tags([<<131>>], [0], 1);
'hardware-failure' -> encode_tags([<<131>>], [1], 1);
'om-intervention' -> encode_tags([<<131>>], [2], 1);
'not-enough-user-plane-processing-resources' -> encode_tags([<<131>>], [3], 1);
unspecified -> encode_tags([<<131>>], [4], 1);
Enumval4 -> exit({error,{asn1, {enumerated_not_in_range,Enumval4}}})
end;
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_Cause'(Tlv) ->
   'dec_Cause'(Tlv, []).

'dec_Cause'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'radioNetwork'
    {131072, V1} -> 
        {radioNetwork, case decode_integer(V1, []) of
0 -> 'handover-desirable-for-radio-reasons';
1 -> 'time-critical-handover';
2 -> 'resource-optimisation-handover';
3 -> 'reduce-load-in-serving-cell';
4 -> 'partial-handover';
5 -> 'unknown-new-eNB-UE-X2AP-ID';
6 -> 'unknown-old-eNB-UE-X2AP-ID';
7 -> 'unknown-pair-of-UE-X2AP-ID';
8 -> 'ho-target-not-allowed';
9 -> 'tx2relocoverall-expiry';
10 -> 'trelocprep-expiry';
11 -> 'cell-not-available';
12 -> 'no-radio-resources-available-in-target-cell';
13 -> 'invalid-MME-GroupID';
14 -> 'unknown-MME-Code';
15 -> 'encryption-and-or-integrity-protection-algorithms-not-supported';
16 -> reportCharacteristicsEmpty;
17 -> noReportPeriodicity;
18 -> existingMeasurementID;
19 -> 'unknown-eNB-Measurement-ID';
20 -> 'measurement-temporarily-not-available';
21 -> unspecified;
Default1 -> {asn1_enum,Default1}
end};


%% 'transport'
    {131073, V1} -> 
        {transport, case decode_integer(V1, []) of
0 -> 'transport-resource-unavailable';
1 -> unspecified;
Default2 -> {asn1_enum,Default2}
end};


%% 'protocol'
    {131074, V1} -> 
        {protocol, case decode_integer(V1, []) of
0 -> 'transfer-syntax-error';
1 -> 'abstract-syntax-error-reject';
2 -> 'abstract-syntax-error-ignore-and-notify';
3 -> 'message-not-compatible-with-receiver-state';
4 -> 'semantic-error';
5 -> unspecified;
6 -> 'abstract-syntax-error-falsely-constructed-message';
Default3 -> {asn1_enum,Default3}
end};


%% 'misc'
    {131075, V1} -> 
        {misc, case decode_integer(V1, []) of
0 -> 'control-processing-overload';
1 -> 'hardware-failure';
2 -> 'om-intervention';
3 -> 'not-enough-user-plane-processing-resources';
4 -> unspecified;
Default4 -> {asn1_enum,Default4}
end};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.


%%================================
%%  BroadcastPLMNs-Item
%%================================
'enc_BroadcastPLMNs-Item'(Val) ->
    'enc_BroadcastPLMNs-Item'(Val, [<<48>>]).

'enc_BroadcastPLMNs-Item'(Val, TagIn) ->
   {EncBytes,EncLen} = 'enc_BroadcastPLMNs-Item_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_BroadcastPLMNs-Item_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_BroadcastPLMNs-Item_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = encode_restricted_string(H, [<<4>>]),
   'enc_BroadcastPLMNs-Item_components'(T,[EncBytes|AccBytes], AccLen + EncLen).



'dec_BroadcastPLMNs-Item'(Tlv) ->
   'dec_BroadcastPLMNs-Item'(Tlv, [16]).

'dec_BroadcastPLMNs-Item'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
[begin
Val1 = decode_octet_string(V1, [4]),
C1 = byte_size(Val1),
if C1 =:= 3 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end || V1 <- Tlv1].




%%================================
%%  BitRate
%%================================
'enc_BitRate'(Val) ->
    'enc_BitRate'(Val, [<<2>>]).

'enc_BitRate'(Val, TagIn) ->
encode_integer(Val, TagIn).


'dec_BitRate'(Tlv) ->
   'dec_BitRate'(Tlv, [2]).

'dec_BitRate'(Tlv, TagIn) ->
begin
Val1 = decode_integer(Tlv, TagIn),
if 0 =< Val1, Val1 =< 10000000000 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end.



%%================================
%%  AllocationAndRetentionPriority
%%================================
'enc_AllocationAndRetentionPriority'(Val) ->
    'enc_AllocationAndRetentionPriority'(Val, [<<48>>]).

'enc_AllocationAndRetentionPriority'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3, Cindex4} = Val,

%%-------------------------------------------------
%% attribute priorityLevel(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}], [<<128>>]),

%%-------------------------------------------------
%% attribute pre-emptionCapability(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
'shall-not-trigger-pre-emption' -> encode_tags([<<129>>], [0], 1);
'may-trigger-pre-emption' -> encode_tags([<<129>>], [1], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute pre-emptionVulnerability(3) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes3,EncLen3} = case Cindex3 of
'not-pre-emptable' -> encode_tags([<<130>>], [0], 1);
'pre-emptable' -> encode_tags([<<130>>], [1], 1);
Enumval3 -> exit({error,{asn1, {enumerated_not_in_range,Enumval3}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes4,EncLen4} =  case Cindex4 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AllocationAndRetentionPriority_iE-Extensions'(Cindex4, [<<163>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3, EncBytes4],
LenSoFar = EncLen1 + EncLen2 + EncLen3 + EncLen4,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AllocationAndRetentionPriority_iE-Extensions
%%================================
'enc_AllocationAndRetentionPriority_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AllocationAndRetentionPriority_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AllocationAndRetentionPriority_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AllocationAndRetentionPriority_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_AllocationAndRetentionPriority_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField
%%================================
'enc_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_45'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_45'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_AllocationAndRetentionPriority_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AllocationAndRetentionPriority_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_AllocationAndRetentionPriority'(Tlv) ->
   'dec_AllocationAndRetentionPriority'(Tlv, [16]).

'dec_AllocationAndRetentionPriority'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute priorityLevel(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 15 ->
Val2 = Val1,
number2name(Val2, [{spare,0},{highest,1},{lowest,14},{'no-priority',15}]);
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute pre-emptionCapability(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> 'shall-not-trigger-pre-emption';
1 -> 'may-trigger-pre-emption';
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute pre-emptionVulnerability(3) with type ENUMERATED
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 
Term3 = case decode_integer(V3, [131074]) of
0 -> 'not-pre-emptable';
1 -> 'pre-emptable';
Default2 -> exit({error,{asn1,{illegal_enumerated,Default2}}})
end,

%%-------------------------------------------------
%% attribute iE-Extensions(4) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term4,Tlv5} = case Tlv4 of
[{131075,V4}|TempTlv5] ->
    {'dec_AllocationAndRetentionPriority_iE-Extensions'(V4, []), TempTlv5};
    _ ->
        { asn1_NOVALUE, Tlv4}
end,

case Tlv5 of [] -> true; _ -> true end, % ... extra fields skipped
   {'AllocationAndRetentionPriority', Term1, Term2, Term3, Term4}.



%%================================
%%  AS-SecurityInformation
%%================================
'enc_AS-SecurityInformation'(Val) ->
    'enc_AS-SecurityInformation'(Val, [<<48>>]).

'enc_AS-SecurityInformation'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,

%%-------------------------------------------------
%% attribute key-eNodeB-star(1) with type BIT STRING
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_unnamed_bit_string(256, Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute nextHopChainingCount(2) with type INTEGER
%%-------------------------------------------------
   {EncBytes2,EncLen2} = encode_integer(Cindex2, [<<129>>]),

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
   {EncBytes3,EncLen3} =  case Cindex3 of
         asn1_NOVALUE -> {<<>>,0};
         _ ->
            'enc_AS-SecurityInformation_iE-Extensions'(Cindex3, [<<162>>])
       end,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).



%%================================
%%  AS-SecurityInformation_iE-Extensions
%%================================
'enc_AS-SecurityInformation_iE-Extensions'(Val, TagIn) ->
      {EncBytes,EncLen} = 'enc_AS-SecurityInformation_iE-Extensions_components'(Val,[],0),
   encode_tags(TagIn, EncBytes, EncLen).

'enc_AS-SecurityInformation_iE-Extensions_components'([], AccBytes, AccLen) -> 
   {lists:reverse(AccBytes),AccLen};

'enc_AS-SecurityInformation_iE-Extensions_components'([H|T],AccBytes, AccLen) ->
   {EncBytes,EncLen} = 'enc_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(H, [<<48>>]),
   'enc_AS-SecurityInformation_iE-Extensions_components'(T,[EncBytes|AccBytes], AccLen + EncLen).




%%================================
%%  AS-SecurityInformation_iE-Extensions_ProtocolExtensionField
%%================================
'enc_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Val, TagIn) ->
   {_,Cindex1, Cindex2, Cindex3} = Val,
Objid = 
   'X2AP':'getenc_internal_object_set_argument_51'(                                   Cindex1),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
   {TmpBytes3,_} = Objid('Extension', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).
'dec_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute id(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 65535 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute extensionValue(3) with type typefieldExtension
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjidTerm1 =
   'X2AP':'getdec_internal_object_set_argument_51'(Term1),
Term3 = 
   case (catch DecObjidTerm1('Extension', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'ProtocolExtensionField', Term1, Term2, Term3}.

'dec_AS-SecurityInformation_iE-Extensions'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),
['dec_AS-SecurityInformation_iE-Extensions_ProtocolExtensionField'(V1, [16]) || V1 <- Tlv1].




'dec_AS-SecurityInformation'(Tlv) ->
   'dec_AS-SecurityInformation'(Tlv, [16]).

'dec_AS-SecurityInformation'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute key-eNodeB-star(1) with type BIT STRING
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_native_bit_string(V1, [131072]),
C1 = bit_size(Val1),
if C1 =:= 256 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute nextHopChainingCount(2) with type INTEGER
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = begin
Val2 = decode_integer(V2, [131073]),
if 0 =< Val2, Val2 =< 7 ->
Val2;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute iE-Extensions(3) with type SEQUENCE OF OPTIONAL
%%-------------------------------------------------
{Term3,Tlv4} = case Tlv3 of
[{131074,V3}|TempTlv4] ->
    {'dec_AS-SecurityInformation_iE-Extensions'(V3, []), TempTlv4};
    _ ->
        { asn1_NOVALUE, Tlv3}
end,

case Tlv4 of [] -> true; _ -> true end, % ... extra fields skipped
   {'AS-SecurityInformation', Term1, Term2, Term3}.



%%================================
%%  UnsuccessfulOutcome
%%================================
'enc_UnsuccessfulOutcome'(Val) ->
    'enc_UnsuccessfulOutcome'(Val, [<<48>>]).

'enc_UnsuccessfulOutcome'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'X2AP':'getenc_X2AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldUnsuccessfulOutcome
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('UnsuccessfulOutcome', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_UnsuccessfulOutcome'(Tlv) ->
   'dec_UnsuccessfulOutcome'(Tlv, [16]).

'dec_UnsuccessfulOutcome'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldUnsuccessfulOutcome
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'X2AP':'getdec_X2AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('UnsuccessfulOutcome', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'UnsuccessfulOutcome', Term1, Term2, Term3}.



%%================================
%%  SuccessfulOutcome
%%================================
'enc_SuccessfulOutcome'(Val) ->
    'enc_SuccessfulOutcome'(Val, [<<48>>]).

'enc_SuccessfulOutcome'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'X2AP':'getenc_X2AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldSuccessfulOutcome
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('SuccessfulOutcome', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_SuccessfulOutcome'(Tlv) ->
   'dec_SuccessfulOutcome'(Tlv, [16]).

'dec_SuccessfulOutcome'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldSuccessfulOutcome
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'X2AP':'getdec_X2AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('SuccessfulOutcome', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'SuccessfulOutcome', Term1, Term2, Term3}.



%%================================
%%  InitiatingMessage
%%================================
'enc_InitiatingMessage'(Val) ->
    'enc_InitiatingMessage'(Val, [<<48>>]).

'enc_InitiatingMessage'(Val, TagIn) ->
{_,Cindex1, Cindex2, Cindex3} = Val,
ObjprocedureCode = 
   'X2AP':'getenc_X2AP-ELEMENTARY-PROCEDURES'(                                   Cindex1),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
   {EncBytes1,EncLen1} = encode_integer(Cindex1, [<<128>>]),

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
   {EncBytes2,EncLen2} = case Cindex2 of
reject -> encode_tags([<<129>>], [0], 1);
ignore -> encode_tags([<<129>>], [1], 1);
notify -> encode_tags([<<129>>], [2], 1);
Enumval2 -> exit({error,{asn1, {enumerated_not_in_range,Enumval2}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldInitiatingMessage
%%-------------------------------------------------
   {TmpBytes3,_} = ObjprocedureCode('InitiatingMessage', Cindex3, []),
   {EncBytes3,EncLen3} = encode_open_type(TmpBytes3, [<<130>>])
,

   BytesSoFar = [EncBytes1, EncBytes2, EncBytes3],
LenSoFar = EncLen1 + EncLen2 + EncLen3,
encode_tags(TagIn, BytesSoFar, LenSoFar).


'dec_InitiatingMessage'(Tlv) ->
   'dec_InitiatingMessage'(Tlv, [16]).

'dec_InitiatingMessage'(Tlv, TagIn) ->
   %%-------------------------------------------------
   %% decode tag and length 
   %%-------------------------------------------------
Tlv1 = match_tags(Tlv, TagIn),

%%-------------------------------------------------
%% attribute procedureCode(1) with type INTEGER
%%-------------------------------------------------
[V1|Tlv2] = Tlv1, 
Term1 = begin
Val1 = decode_integer(V1, [131072]),
if 0 =< Val1, Val1 =< 255 ->
Val1;
true ->
exit({error,{asn1,bad_range}})
end
end,

%%-------------------------------------------------
%% attribute criticality(2) with type ENUMERATED
%%-------------------------------------------------
[V2|Tlv3] = Tlv2, 
Term2 = case decode_integer(V2, [131073]) of
0 -> reject;
1 -> ignore;
2 -> notify;
Default1 -> exit({error,{asn1,{illegal_enumerated,Default1}}})
end,

%%-------------------------------------------------
%% attribute value(3) with type typefieldInitiatingMessage
%%-------------------------------------------------
[V3|Tlv4] = Tlv3, 

  Tmpterm1 = decode_open_type(V3, [131074]),

DecObjprocedureCodeTerm1 =
   'X2AP':'getdec_X2AP-ELEMENTARY-PROCEDURES'(Term1),
Term3 = 
   case (catch DecObjprocedureCodeTerm1('InitiatingMessage', Tmpterm1, [])) of
      {'EXIT', Reason1} ->
         exit({'Type not compatible with table constraint',Reason1});
      Tmpterm2 ->
         Tmpterm2
   end,

case Tlv4 of
[] -> true;_ -> exit({error,{asn1, {unexpected,Tlv4}}}) % extra fields not allowed
end,
   {'InitiatingMessage', Term1, Term2, Term3}.



%%================================
%%  X2AP-PDU
%%================================
'enc_X2AP-PDU'(Val) ->
    'enc_X2AP-PDU'(Val, []).

'enc_X2AP-PDU'(Val, TagIn) ->
   {EncBytes,EncLen} = case element(1,Val) of
      initiatingMessage ->
         'enc_InitiatingMessage'(element(2,Val), [<<160>>]);
      successfulOutcome ->
         'enc_SuccessfulOutcome'(element(2,Val), [<<161>>]);
      unsuccessfulOutcome ->
         'enc_UnsuccessfulOutcome'(element(2,Val), [<<162>>]);
      Else -> 
         exit({error,{asn1,{invalid_choice_type,Else}}})
   end,

encode_tags(TagIn, EncBytes, EncLen).




'dec_X2AP-PDU'(Tlv) ->
   'dec_X2AP-PDU'(Tlv, []).

'dec_X2AP-PDU'(Tlv, TagIn) ->
Tlv1 = match_tags(Tlv, TagIn),
case (case Tlv1 of [CtempTlv1] -> CtempTlv1; _ -> Tlv1 end) of

%% 'initiatingMessage'
    {131072, V1} -> 
        {initiatingMessage, 'dec_InitiatingMessage'(V1, [])};


%% 'successfulOutcome'
    {131073, V1} -> 
        {successfulOutcome, 'dec_SuccessfulOutcome'(V1, [])};


%% 'unsuccessfulOutcome'
    {131074, V1} -> 
        {unsuccessfulOutcome, 'dec_UnsuccessfulOutcome'(V1, [])};

      Else -> 
         {asn1_ExtAlt,ber_encode(Else)}
   end
.
'id-ENB2-Measurement-ID'() ->
40.

'id-ENB1-Measurement-ID'() ->
39.

'id-ReportCharacteristics'() ->
38.

'id-Measurement-ID'() ->
37.

'id-SRVCCOperationPossible'() ->
36.

'id-GUGroupIDToDeleteList'() ->
35.

'id-GUGroupIDToAddList'() ->
34.

'id-CellMeasurementResult-Item'() ->
33.

'id-CellMeasurementResult'() ->
32.

'id-CellToReport-Item'() ->
31.

'id-ReportingPeriodicity'() ->
30.

'id-CellToReport'() ->
29.

'id-Registration-Request'() ->
28.

'id-ServedCellsToDelete'() ->
27.

'id-ServedCellsToModify'() ->
26.

'id-ServedCellsToAdd'() ->
25.

'id-GUGroupIDList'() ->
24.

'id-GUMMEI-ID'() ->
23.

'id-TimeToWait'() ->
22.

'id-GlobalENB-ID'() ->
21.

'id-ServedCells'() ->
20.

'id-E-RABs-SubjectToStatusTransfer-Item'() ->
19.

'id-E-RABs-SubjectToStatusTransfer-List'() ->
18.

'id-CriticalityDiagnostics'() ->
17.

'id-UE-X2AP-ID'() ->
16.

'id-UE-HistoryInformation'() ->
15.

'id-UE-ContextInformation'() ->
14.

'id-TraceActivation'() ->
13.

'id-TargeteNBtoSource-eNBTransparentContainer'() ->
12.

'id-TargetCell-ID'() ->
11.

'id-Old-eNB-UE-X2AP-ID'() ->
10.

'id-New-eNB-UE-X2AP-ID'() ->
9.

'id-CellInformation-Item'() ->
7.

'id-CellInformation'() ->
6.

'id-Cause'() ->
5.

'id-E-RABs-ToBeSetup-Item'() ->
4.

'id-E-RABs-NotAdmitted-List'() ->
3.

'id-E-RAB-Item'() ->
2.

'id-E-RABs-Admitted-List'() ->
1.

'id-E-RABs-Admitted-Item'() ->
0.

'maxnoofCells'() ->
16.

'maxPools'() ->
16.

'maxnoofPRBs'() ->
110.

'maxnoofNeighbours'() ->
512.

'maxnoofBPLMNs'() ->
6.

'maxnoofForbTACs'() ->
4096.

'maxnoofForbLACs'() ->
4096.

'maxnoofEPLMNsPlusOne'() ->
16.

'maxnoofEPLMNs'() ->
15.

'maxnoofPDCP-SN'() ->
16.

'maxNrOfErrors'() ->
256.

'maxnoofBearers'() ->
256.

'maxCellineNB'() ->
256.

'maxInterfaces'() ->
16.

'maxEARFCN'() ->
65535.

'id-privateMessage'() ->
11.

'id-resourceStatusReporting'() ->
10.

'id-resourceStatusReportingInitiation'() ->
9.

'id-eNBConfigurationUpdate'() ->
8.

'id-reset'() ->
7.

'id-x2Setup'() ->
6.

'id-uEContextRelease'() ->
5.

'id-snStatusTransfer'() ->
4.

'id-errorIndication'() ->
3.

'id-loadIndication'() ->
2.

'id-handoverCancel'() ->
1.

'id-handoverPreparation'() ->
0.

'maxProtocolIEs'() ->
65535.

'maxProtocolExtensions'() ->
65535.

'maxPrivateIEs'() ->
65535.




%%================================
%%  privateMessage
%%================================
'enc_privateMessage'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_PrivateMessage'(Val, [<<48>>]);
'enc_privateMessage'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_privateMessage'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_privateMessage'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_PrivateMessage'(Tlv, [16]);
'dec_privateMessage'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_privateMessage'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.

tlv_format(Bytes) when is_binary(Bytes) ->
  {Tlv,_} = ber_decode_nif(Bytes),
  Tlv;
tlv_format(Bytes) ->
  Bytes.



%%================================
%%  resourceStatusReporting
%%================================
'enc_resourceStatusReporting'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ResourceStatusUpdate'(Val, [<<48>>]);
'enc_resourceStatusReporting'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_resourceStatusReporting'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_resourceStatusReporting'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResourceStatusUpdate'(Tlv, [16]);
'dec_resourceStatusReporting'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_resourceStatusReporting'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  resourceStatusReportingInitiation
%%================================
'enc_resourceStatusReportingInitiation'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ResourceStatusRequest'(Val, [<<48>>]);
'enc_resourceStatusReportingInitiation'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ResourceStatusResponse'(Val, [<<48>>]);
'enc_resourceStatusReportingInitiation'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ResourceStatusFailure'(Val, [<<48>>]).


'dec_resourceStatusReportingInitiation'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResourceStatusRequest'(Tlv, [16]);
'dec_resourceStatusReportingInitiation'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResourceStatusResponse'(Tlv, [16]);
'dec_resourceStatusReportingInitiation'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResourceStatusFailure'(Tlv, [16]).




%%================================
%%  eNBConfigurationUpdate
%%================================
'enc_eNBConfigurationUpdate'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdate'(Val, [<<48>>]);
'enc_eNBConfigurationUpdate'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdateAcknowledge'(Val, [<<48>>]);
'enc_eNBConfigurationUpdate'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ENBConfigurationUpdateFailure'(Val, [<<48>>]).


'dec_eNBConfigurationUpdate'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdate'(Tlv, [16]);
'dec_eNBConfigurationUpdate'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdateAcknowledge'(Tlv, [16]);
'dec_eNBConfigurationUpdate'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ENBConfigurationUpdateFailure'(Tlv, [16]).




%%================================
%%  loadIndication
%%================================
'enc_loadIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_LoadInformation'(Val, [<<48>>]);
'enc_loadIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_loadIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_loadIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_LoadInformation'(Tlv, [16]);
'dec_loadIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_loadIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  x2Setup
%%================================
'enc_x2Setup'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_X2SetupRequest'(Val, [<<48>>]);
'enc_x2Setup'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_X2SetupResponse'(Val, [<<48>>]);
'enc_x2Setup'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_X2SetupFailure'(Val, [<<48>>]).


'dec_x2Setup'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_X2SetupRequest'(Tlv, [16]);
'dec_x2Setup'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_X2SetupResponse'(Tlv, [16]);
'dec_x2Setup'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_X2SetupFailure'(Tlv, [16]).




%%================================
%%  reset
%%================================
'enc_reset'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ResetRequest'(Val, [<<48>>]);
'enc_reset'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_ResetResponse'(Val, [<<48>>]);
'enc_reset'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_reset'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResetRequest'(Tlv, [16]);
'dec_reset'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ResetResponse'(Tlv, [16]);
'dec_reset'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  errorIndication
%%================================
'enc_errorIndication'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_ErrorIndication'(Val, [<<48>>]);
'enc_errorIndication'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_errorIndication'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_errorIndication'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_ErrorIndication'(Tlv, [16]);
'dec_errorIndication'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_errorIndication'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  handoverCancel
%%================================
'enc_handoverCancel'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverCancel'(Val, [<<48>>]);
'enc_handoverCancel'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_handoverCancel'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_handoverCancel'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverCancel'(Tlv, [16]);
'dec_handoverCancel'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_handoverCancel'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  uEContextRelease
%%================================
'enc_uEContextRelease'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_UEContextRelease'(Val, [<<48>>]);
'enc_uEContextRelease'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_uEContextRelease'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_uEContextRelease'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_UEContextRelease'(Tlv, [16]);
'dec_uEContextRelease'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_uEContextRelease'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  snStatusTransfer
%%================================
'enc_snStatusTransfer'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_SNStatusTransfer'(Val, [<<48>>]);
'enc_snStatusTransfer'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0};
'enc_snStatusTransfer'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   {Val,0}.


'dec_snStatusTransfer'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_SNStatusTransfer'(Tlv, [16]);
'dec_snStatusTransfer'('SuccessfulOutcome',  Bytes,_) ->
   Bytes;
'dec_snStatusTransfer'('UnsuccessfulOutcome',  Bytes,_) ->
   Bytes.




%%================================
%%  handoverPreparation
%%================================
'enc_handoverPreparation'('InitiatingMessage', Val, _RestPrimFieldName) ->
   'enc_HandoverRequest'(Val, [<<48>>]);
'enc_handoverPreparation'('SuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverRequestAcknowledge'(Val, [<<48>>]);
'enc_handoverPreparation'('UnsuccessfulOutcome', Val, _RestPrimFieldName) ->
   'enc_HandoverPreparationFailure'(Val, [<<48>>]).


'dec_handoverPreparation'('InitiatingMessage', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverRequest'(Tlv, [16]);
'dec_handoverPreparation'('SuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverRequestAcknowledge'(Tlv, [16]);
'dec_handoverPreparation'('UnsuccessfulOutcome', Bytes,_) ->
  Tlv = tlv_format(Bytes),
   'dec_HandoverPreparationFailure'(Tlv, [16]).




%%================================
%%  CellMeasurementResult-Item-ExtIEs
%%================================
'getenc_CellMeasurementResult-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellMeasurementResult-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellMeasurementResult-ItemIEs
%%================================
'getenc_CellMeasurementResult-ItemIEs'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellMeasurementResult-Item'(Val)
      end
   end;
'getenc_CellMeasurementResult-ItemIEs'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_CellMeasurementResult-ItemIEs'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellMeasurementResult-Item'(Bytes)
      end
   end;
'getdec_CellMeasurementResult-ItemIEs'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  ResourceStatusUpdate-IEs
%%================================
'getenc_ResourceStatusUpdate-IEs'(32) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellMeasurementResult-List'(Val)
      end
   end;
'getenc_ResourceStatusUpdate-IEs'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusUpdate-IEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusUpdate-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResourceStatusUpdate-IEs'(32) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellMeasurementResult-List'(Bytes)
      end
   end;
'getdec_ResourceStatusUpdate-IEs'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusUpdate-IEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusUpdate-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResourceStatusFailure-IEs
%%================================
'getenc_ResourceStatusFailure-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ResourceStatusFailure-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ResourceStatusFailure-IEs'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusFailure-IEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusFailure-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResourceStatusFailure-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ResourceStatusFailure-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ResourceStatusFailure-IEs'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusFailure-IEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusFailure-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResourceStatusResponse-IEs
%%================================
'getenc_ResourceStatusResponse-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ResourceStatusResponse-IEs'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusResponse-IEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusResponse-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResourceStatusResponse-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ResourceStatusResponse-IEs'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusResponse-IEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusResponse-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellToReport-Item-ExtIEs
%%================================
'getenc_CellToReport-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellToReport-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellToReport-ItemIEs
%%================================
'getenc_CellToReport-ItemIEs'(31) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellToReport-Item'(Val)
      end
   end;
'getenc_CellToReport-ItemIEs'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_CellToReport-ItemIEs'(31) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellToReport-Item'(Bytes)
      end
   end;
'getdec_CellToReport-ItemIEs'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  ResourceStatusRequest-IEs
%%================================
'getenc_ResourceStatusRequest-IEs'(28) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Registration-Request'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(29) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellToReport-List'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(30) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ReportingPeriodicity'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(38) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ReportCharacteristics'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_ResourceStatusRequest-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResourceStatusRequest-IEs'(28) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Registration-Request'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(29) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellToReport-List'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(30) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ReportingPeriodicity'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(38) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ReportCharacteristics'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_ResourceStatusRequest-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdateFailure-IEs
%%================================
'getenc_ENBConfigurationUpdateFailure-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailure-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailure-IEs'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateFailure-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdateFailure-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailure-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailure-IEs'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateFailure-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdateAcknowledge-IEs
%%================================
'getenc_ENBConfigurationUpdateAcknowledge-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ENBConfigurationUpdateAcknowledge-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdateAcknowledge-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdateAcknowledge-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ServedCellsToModify-Item-ExtIEs
%%================================
'getenc_ServedCellsToModify-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ServedCellsToModify-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ENBConfigurationUpdate-IEs
%%================================
'getenc_ENBConfigurationUpdate-IEs'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_ENBConfigurationUpdate-IEs'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCellsToModify'(Val)
      end
   end;
'getenc_ENBConfigurationUpdate-IEs'(27) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Old-ECGIs'(Val)
      end
   end;
'getenc_ENBConfigurationUpdate-IEs'(34) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_ENBConfigurationUpdate-IEs'(35) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_ENBConfigurationUpdate-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ENBConfigurationUpdate-IEs'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdate-IEs'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCellsToModify'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdate-IEs'(27) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Old-ECGIs'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdate-IEs'(34) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdate-IEs'(35) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_ENBConfigurationUpdate-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellInformation-Item-ExtIEs
%%================================
'getenc_CellInformation-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellInformation-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellInformation-ItemIEs
%%================================
'getenc_CellInformation-ItemIEs'(7) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellInformation-Item'(Val)
      end
   end;
'getenc_CellInformation-ItemIEs'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_CellInformation-ItemIEs'(7) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellInformation-Item'(Bytes)
      end
   end;
'getdec_CellInformation-ItemIEs'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  LoadInformation-IEs
%%================================
'getenc_LoadInformation-IEs'(6) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellInformation-List'(Val)
      end
   end;
'getenc_LoadInformation-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LoadInformation-IEs'(6) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellInformation-List'(Bytes)
      end
   end;
'getdec_LoadInformation-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2SetupFailure-IEs
%%================================
'getenc_X2SetupFailure-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_X2SetupFailure-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_X2SetupFailure-IEs'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_X2SetupFailure-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2SetupFailure-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_X2SetupFailure-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_X2SetupFailure-IEs'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_X2SetupFailure-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2SetupResponse-IEs
%%================================
'getenc_X2SetupResponse-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_X2SetupResponse-IEs'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_X2SetupResponse-IEs'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GlobalENB-ID'(Val)
      end
   end;
'getenc_X2SetupResponse-IEs'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_X2SetupResponse-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2SetupResponse-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_X2SetupResponse-IEs'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_X2SetupResponse-IEs'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GlobalENB-ID'(Bytes)
      end
   end;
'getdec_X2SetupResponse-IEs'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_X2SetupResponse-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2SetupRequest-IEs
%%================================
'getenc_X2SetupRequest-IEs'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_X2SetupRequest-IEs'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GlobalENB-ID'(Val)
      end
   end;
'getenc_X2SetupRequest-IEs'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_X2SetupRequest-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2SetupRequest-IEs'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_X2SetupRequest-IEs'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GlobalENB-ID'(Bytes)
      end
   end;
'getdec_X2SetupRequest-IEs'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_X2SetupRequest-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResetResponse-IEs
%%================================
'getenc_ResetResponse-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ResetResponse-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResetResponse-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ResetResponse-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ResetRequest-IEs
%%================================
'getenc_ResetRequest-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ResetRequest-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ResetRequest-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ResetRequest-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ErrorIndication-IEs
%%================================
'getenc_ErrorIndication-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_ErrorIndication-IEs'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_ErrorIndication-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_ErrorIndication-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_ErrorIndication-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ErrorIndication-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_ErrorIndication-IEs'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_ErrorIndication-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_ErrorIndication-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_ErrorIndication-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverCancel-IEs
%%================================
'getenc_HandoverCancel-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverCancel-IEs'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverCancel-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverCancel-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverCancel-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverCancel-IEs'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancel-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverCancel-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEContextRelease-IEs
%%================================
'getenc_UEContextRelease-IEs'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_UEContextRelease-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_UEContextRelease-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEContextRelease-IEs'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_UEContextRelease-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_UEContextRelease-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-SubjectToStatusTransfer-ItemExtIEs
%%================================
'getenc_E-RABs-SubjectToStatusTransfer-ItemExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABs-SubjectToStatusTransfer-ItemExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-SubjectToStatusTransfer-ItemIEs
%%================================
'getenc_E-RABs-SubjectToStatusTransfer-ItemIEs'(19) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-SubjectToStatusTransfer-Item'(Val)
      end
   end;
'getenc_E-RABs-SubjectToStatusTransfer-ItemIEs'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_E-RABs-SubjectToStatusTransfer-ItemIEs'(19) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-SubjectToStatusTransfer-Item'(Bytes)
      end
   end;
'getdec_E-RABs-SubjectToStatusTransfer-ItemIEs'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  SNStatusTransfer-IEs
%%================================
'getenc_SNStatusTransfer-IEs'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_SNStatusTransfer-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_SNStatusTransfer-IEs'(18) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-SubjectToStatusTransfer-List'(Val)
      end
   end;
'getenc_SNStatusTransfer-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SNStatusTransfer-IEs'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_SNStatusTransfer-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_SNStatusTransfer-IEs'(18) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-SubjectToStatusTransfer-List'(Bytes)
      end
   end;
'getdec_SNStatusTransfer-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverPreparationFailure-IEs
%%================================
'getenc_HandoverPreparationFailure-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverPreparationFailure-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverPreparationFailure-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverPreparationFailure-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverPreparationFailure-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailure-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailure-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverPreparationFailure-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-Admitted-Item-ExtIEs
%%================================
'getenc_E-RABs-Admitted-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABs-Admitted-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-Admitted-ItemIEs
%%================================
'getenc_E-RABs-Admitted-ItemIEs'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-Admitted-Item'(Val)
      end
   end;
'getenc_E-RABs-Admitted-ItemIEs'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_E-RABs-Admitted-ItemIEs'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-Admitted-Item'(Bytes)
      end
   end;
'getdec_E-RABs-Admitted-ItemIEs'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  HandoverRequestAcknowledge-IEs
%%================================
'getenc_HandoverRequestAcknowledge-IEs'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-Admitted-List'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(3) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RAB-List'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TargeteNBtoSource-eNBTransparentContainer'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_HandoverRequestAcknowledge-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRequestAcknowledge-IEs'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-Admitted-List'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(3) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RAB-List'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TargeteNBtoSource-eNBTransparentContainer'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_HandoverRequestAcknowledge-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-ToBeSetup-ItemExtIEs
%%================================
'getenc_E-RABs-ToBeSetup-ItemExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABs-ToBeSetup-ItemExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RABs-ToBeSetup-ItemIEs
%%================================
'getenc_E-RABs-ToBeSetup-ItemIEs'(4) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-ToBeSetup-Item'(Val)
      end
   end;
'getenc_E-RABs-ToBeSetup-ItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RABs-ToBeSetup-ItemIEs'(4) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-ToBeSetup-Item'(Bytes)
      end
   end;
'getdec_E-RABs-ToBeSetup-ItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UE-ContextInformation-ExtIEs
%%================================
'getenc_UE-ContextInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UE-ContextInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRequest-IEs
%%================================
'getenc_HandoverRequest-IEs'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(11) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ECGI'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(13) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(14) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-ContextInformation'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(15) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-HistoryInformation'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(23) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUMMEI'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(36) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_HandoverRequest-IEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRequest-IEs'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(11) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ECGI'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(13) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(14) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-ContextInformation'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(15) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-HistoryInformation'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(23) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUMMEI'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(36) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_HandoverRequest-IEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UL-HighInterferenceIndicationInfo-Item-ExtIEs
%%================================
'getenc_UL-HighInterferenceIndicationInfo-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UL-HighInterferenceIndicationInfo-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UESecurityCapabilities-ExtIEs
%%================================
'getenc_UESecurityCapabilities-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UESecurityCapabilities-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  UEAggregate-MaximumBitrate-ExtIEs
%%================================
'getenc_UEAggregate-MaximumBitrate-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_UEAggregate-MaximumBitrate-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TraceActivation-ExtIEs
%%================================
'getenc_TraceActivation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TraceActivation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  SpecialSubframe-Info-ExtIEs
%%================================
'getenc_SpecialSubframe-Info-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_SpecialSubframe-Info-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ServedCell-Information-ExtIEs
%%================================
'getenc_ServedCell-Information-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ServedCell-Information-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ServedCell-ExtIEs
%%================================
'getenc_ServedCell-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ServedCell-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  S1TNLLoadIndicator-ExtIEs
%%================================
'getenc_S1TNLLoadIndicator-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_S1TNLLoadIndicator-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  RadioResourceStatus-ExtIEs
%%================================
'getenc_RadioResourceStatus-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_RadioResourceStatus-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  RelativeNarrowbandTxPower-ExtIEs
%%================================
'getenc_RelativeNarrowbandTxPower-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_RelativeNarrowbandTxPower-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  Neighbour-Information-ExtIEs
%%================================
'getenc_Neighbour-Information-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_Neighbour-Information-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LocationReportingInformation-ExtIEs
%%================================
'getenc_LocationReportingInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LocationReportingInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  LastVisitedEUTRANCellInformation-ExtIEs
%%================================
'getenc_LastVisitedEUTRANCellInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_LastVisitedEUTRANCellInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HWLoadIndicator-ExtIEs
%%================================
'getenc_HWLoadIndicator-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HWLoadIndicator-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  HandoverRestrictionList-ExtIEs
%%================================
'getenc_HandoverRestrictionList-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_HandoverRestrictionList-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GUMMEI-ExtIEs
%%================================
'getenc_GUMMEI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GUMMEI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GU-Group-ID-ExtIEs
%%================================
'getenc_GU-Group-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GU-Group-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GTPtunnelEndpoint-ExtIEs
%%================================
'getenc_GTPtunnelEndpoint-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GTPtunnelEndpoint-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GlobalENB-ID-ExtIEs
%%================================
'getenc_GlobalENB-ID-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GlobalENB-ID-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  GBR-QosInformation-ExtIEs
%%================================
'getenc_GBR-QosInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_GBR-QosInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ForbiddenLAs-Item-ExtIEs
%%================================
'getenc_ForbiddenLAs-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ForbiddenLAs-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ForbiddenTAs-Item-ExtIEs
%%================================
'getenc_ForbiddenTAs-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ForbiddenTAs-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RAB-Item-ExtIEs
%%================================
'getenc_E-RAB-Item-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RAB-Item-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RAB-ItemIEs
%%================================
'getenc_E-RAB-ItemIEs'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RAB-Item'(Val)
      end
   end;
'getenc_E-RAB-ItemIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RAB-ItemIEs'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RAB-Item'(Bytes)
      end
   end;
'getdec_E-RAB-ItemIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  E-RAB-Level-QoS-Parameters-ExtIEs
%%================================
'getenc_E-RAB-Level-QoS-Parameters-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_E-RAB-Level-QoS-Parameters-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  ECGI-ExtIEs
%%================================
'getenc_ECGI-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_ECGI-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  TDD-Info-ExtIEs
%%================================
'getenc_TDD-Info-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_TDD-Info-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  FDD-Info-ExtIEs
%%================================
'getenc_FDD-Info-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_FDD-Info-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CriticalityDiagnostics-IE-List-ExtIEs
%%================================
'getenc_CriticalityDiagnostics-IE-List-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CriticalityDiagnostics-IE-List-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CriticalityDiagnostics-ExtIEs
%%================================
'getenc_CriticalityDiagnostics-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CriticalityDiagnostics-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  COUNTvalue-ExtIEs
%%================================
'getenc_COUNTvalue-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_COUNTvalue-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  CellType-ExtIEs
%%================================
'getenc_CellType-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_CellType-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  AllocationAndRetentionPriority-ExtIEs
%%================================
'getenc_AllocationAndRetentionPriority-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_AllocationAndRetentionPriority-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  AS-SecurityInformation-ExtIEs
%%================================
'getenc_AS-SecurityInformation-ExtIEs'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_AS-SecurityInformation-ExtIEs'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2AP-ELEMENTARY-PROCEDURES-CLASS-2
%%================================
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(3) ->
    fun 'enc_errorIndication'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(1) ->
    fun 'enc_handoverCancel'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(2) ->
    fun 'enc_loadIndication'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(11) ->
    fun 'enc_privateMessage'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(10) ->
    fun 'enc_resourceStatusReporting'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(4) ->
    fun 'enc_snStatusTransfer'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(5) ->
    fun 'enc_uEContextRelease'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(3) ->
    fun 'dec_errorIndication'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(1) ->
    fun 'dec_handoverCancel'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(2) ->
    fun 'dec_loadIndication'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(11) ->
    fun 'dec_privateMessage'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(10) ->
    fun 'dec_resourceStatusReporting'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(4) ->
    fun 'dec_snStatusTransfer'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(5) ->
    fun 'dec_uEContextRelease'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-2'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2AP-ELEMENTARY-PROCEDURES-CLASS-1
%%================================
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(8) ->
    fun 'enc_eNBConfigurationUpdate'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(0) ->
    fun 'enc_handoverPreparation'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(7) ->
    fun 'enc_reset'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(9) ->
    fun 'enc_resourceStatusReportingInitiation'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(6) ->
    fun 'enc_x2Setup'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(8) ->
    fun 'dec_eNBConfigurationUpdate'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(0) ->
    fun 'dec_handoverPreparation'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(7) ->
    fun 'dec_reset'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(9) ->
    fun 'dec_resourceStatusReportingInitiation'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(6) ->
    fun 'dec_x2Setup'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES-CLASS-1'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  X2AP-ELEMENTARY-PROCEDURES
%%================================
'getenc_X2AP-ELEMENTARY-PROCEDURES'(8) ->
    fun 'enc_eNBConfigurationUpdate'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(3) ->
    fun 'enc_errorIndication'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(1) ->
    fun 'enc_handoverCancel'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(0) ->
    fun 'enc_handoverPreparation'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(2) ->
    fun 'enc_loadIndication'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(11) ->
    fun 'enc_privateMessage'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(7) ->
    fun 'enc_reset'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(10) ->
    fun 'enc_resourceStatusReporting'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(9) ->
    fun 'enc_resourceStatusReportingInitiation'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(4) ->
    fun 'enc_snStatusTransfer'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(5) ->
    fun 'enc_uEContextRelease'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(6) ->
    fun 'enc_x2Setup'/3;
'getenc_X2AP-ELEMENTARY-PROCEDURES'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_X2AP-ELEMENTARY-PROCEDURES'(8) ->
    fun 'dec_eNBConfigurationUpdate'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(3) ->
    fun 'dec_errorIndication'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(1) ->
    fun 'dec_handoverCancel'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(0) ->
    fun 'dec_handoverPreparation'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(2) ->
    fun 'dec_loadIndication'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(11) ->
    fun 'dec_privateMessage'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(7) ->
    fun 'dec_reset'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(10) ->
    fun 'dec_resourceStatusReporting'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(9) ->
    fun 'dec_resourceStatusReportingInitiation'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(4) ->
    fun 'dec_snStatusTransfer'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(5) ->
    fun 'dec_uEContextRelease'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(6) ->
    fun 'dec_x2Setup'/3;
'getdec_X2AP-ELEMENTARY-PROCEDURES'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_9
%%================================
'getenc_internal_object_set_argument_9'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_9'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_9'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_9'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_9'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_9'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_9'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_9'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_9'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_9'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_39
%%================================
'getenc_internal_object_set_argument_39'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_39'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_39'(18) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-SubjectToStatusTransfer-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_39'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_39'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_39'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_39'(18) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-SubjectToStatusTransfer-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_39'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_8
%%================================
'getenc_internal_object_set_argument_8'(32) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellMeasurementResult-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_8'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_8'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_8'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_8'(32) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellMeasurementResult-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_8'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_8'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_8'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_38
%%================================
'getenc_internal_object_set_argument_38'(19) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-SubjectToStatusTransfer-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_38'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_internal_object_set_argument_38'(19) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-SubjectToStatusTransfer-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_38'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  internal_object_set_argument_7
%%================================
'getenc_internal_object_set_argument_7'(33) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellMeasurementResult-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_7'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_internal_object_set_argument_7'(33) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellMeasurementResult-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_7'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  internal_object_set_argument_37
%%================================
'getenc_internal_object_set_argument_37'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_37'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_6
%%================================
'getenc_internal_object_set_argument_6'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_6'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_36
%%================================
'getenc_internal_object_set_argument_36'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_36'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_5
%%================================
'getenc_internal_object_set_argument_5'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_5'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_35
%%================================
'getenc_internal_object_set_argument_35'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_35'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_35'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_35'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_35'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_35'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_4
%%================================
'getenc_internal_object_set_argument_4'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_4'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_34
%%================================
'getenc_internal_object_set_argument_34'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_34'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_34'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_34'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_34'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_34'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_34'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_34'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_3
%%================================
'getenc_internal_object_set_argument_3'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_3'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_33
%%================================
'getenc_internal_object_set_argument_33'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_33'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_33'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_33'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_33'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_33'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_33'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_33'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_33'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_33'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_2
%%================================
'getenc_internal_object_set_argument_2'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_2'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_32
%%================================
'getenc_internal_object_set_argument_32'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_32'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_32'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_32'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_31
%%================================
'getenc_internal_object_set_argument_31'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_31'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_31'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_31'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_30
%%================================
'getenc_internal_object_set_argument_30'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_internal_object_set_argument_30'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GlobalENB-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_30'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_internal_object_set_argument_30'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_30'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_30'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GlobalENB-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_30'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_30'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_49
%%================================
'getenc_internal_object_set_argument_49'(4) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-ToBeSetup-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_49'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_49'(4) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-ToBeSetup-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_49'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_48
%%================================
'getenc_internal_object_set_argument_48'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_48'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_47
%%================================
'getenc_internal_object_set_argument_47'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_47'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_46
%%================================
'getenc_internal_object_set_argument_46'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_46'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_45
%%================================
'getenc_internal_object_set_argument_45'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_45'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_44
%%================================
'getenc_internal_object_set_argument_44'(1) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-Admitted-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(3) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RAB-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(9) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(12) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TargeteNBtoSource-eNBTransparentContainer'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_44'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_44'(1) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-Admitted-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(3) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RAB-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(9) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(12) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TargeteNBtoSource-eNBTransparentContainer'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_44'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_43
%%================================
'getenc_internal_object_set_argument_43'(0) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RABs-Admitted-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_43'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_internal_object_set_argument_43'(0) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RABs-Admitted-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_43'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  internal_object_set_argument_42
%%================================
'getenc_internal_object_set_argument_42'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_42'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_41
%%================================
'getenc_internal_object_set_argument_41'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_41'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_40
%%================================
'getenc_internal_object_set_argument_40'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_40'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_40'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_40'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_40'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_40'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_40'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_40'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_59
%%================================
'getenc_internal_object_set_argument_59'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_59'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_19
%%================================
'getenc_internal_object_set_argument_19'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_19'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_58
%%================================
'getenc_internal_object_set_argument_58'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(10) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-X2AP-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(11) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ECGI'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(13) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TraceActivation'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(14) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-ContextInformation'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(15) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_UE-HistoryInformation'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(23) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUMMEI'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(36) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_SRVCCOperationPossible'(Val)
      end
   end;
'getenc_internal_object_set_argument_58'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_58'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(10) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-X2AP-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(11) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ECGI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(13) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TraceActivation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(14) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-ContextInformation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(15) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_UE-HistoryInformation'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(23) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUMMEI'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(36) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_SRVCCOperationPossible'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_58'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_18
%%================================
'getenc_internal_object_set_argument_18'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_18'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_57
%%================================
'getenc_internal_object_set_argument_57'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_57'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_17
%%================================
'getenc_internal_object_set_argument_17'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_17'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_56
%%================================
'getenc_internal_object_set_argument_56'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_56'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_16
%%================================
'getenc_internal_object_set_argument_16'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_16'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_55
%%================================
'getenc_internal_object_set_argument_55'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_55'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_15
%%================================
'getenc_internal_object_set_argument_15'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_15'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_15'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_15'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_54
%%================================
'getenc_internal_object_set_argument_54'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_54'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_14
%%================================
'getenc_internal_object_set_argument_14'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_14'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_14'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_internal_object_set_argument_14'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_14'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_14'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_14'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_14'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_53
%%================================
'getenc_internal_object_set_argument_53'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_53'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_13
%%================================
'getenc_internal_object_set_argument_13'(28) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Registration-Request'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(29) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellToReport-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(30) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ReportingPeriodicity'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(38) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ReportCharacteristics'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_13'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_13'(28) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Registration-Request'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(29) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellToReport-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(30) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ReportingPeriodicity'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(38) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ReportCharacteristics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_13'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_52
%%================================
'getenc_internal_object_set_argument_52'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_52'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_12
%%================================
'getenc_internal_object_set_argument_12'(31) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellToReport-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_12'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_internal_object_set_argument_12'(31) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellToReport-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_12'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  internal_object_set_argument_51
%%================================
'getenc_internal_object_set_argument_51'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_51'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_11
%%================================
'getenc_internal_object_set_argument_11'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_11'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_50
%%================================
'getenc_internal_object_set_argument_50'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_50'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_10
%%================================
'getenc_internal_object_set_argument_10'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_10'(39) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_10'(40) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Measurement-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_10'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_10'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_10'(39) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_10'(40) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Measurement-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_10'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_69
%%================================
'getenc_internal_object_set_argument_69'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_69'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_29
%%================================
'getenc_internal_object_set_argument_29'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_29'(20) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_internal_object_set_argument_29'(21) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GlobalENB-ID'(Val)
      end
   end;
'getenc_internal_object_set_argument_29'(24) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_internal_object_set_argument_29'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_29'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_29'(20) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_29'(21) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GlobalENB-ID'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_29'(24) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_29'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_68
%%================================
'getenc_internal_object_set_argument_68'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_68'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_28
%%================================
'getenc_internal_object_set_argument_28'(5) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Cause'(Val)
      end
   end;
'getenc_internal_object_set_argument_28'(17) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CriticalityDiagnostics'(Val)
      end
   end;
'getenc_internal_object_set_argument_28'(22) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_TimeToWait'(Val)
      end
   end;
'getenc_internal_object_set_argument_28'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_28'(5) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Cause'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_28'(17) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CriticalityDiagnostics'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_28'(22) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_TimeToWait'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_28'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_67
%%================================
'getenc_internal_object_set_argument_67'(2) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_E-RAB-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_67'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_67'(2) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_E-RAB-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_67'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_27
%%================================
'getenc_internal_object_set_argument_27'(6) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellInformation-List'(Val)
      end
   end;
'getenc_internal_object_set_argument_27'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_27'(6) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellInformation-List'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_27'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_66
%%================================
'getenc_internal_object_set_argument_66'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_66'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_26
%%================================
'getenc_internal_object_set_argument_26'(7) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_CellInformation-Item'(Val)
      end
   end;
'getenc_internal_object_set_argument_26'(ErrV) ->
   fun(C,V,_) -> exit({'Type not compatible with table constraint',{component,C},{value,V}, {unique_name_and_value,id, ErrV}}) end.

'getdec_internal_object_set_argument_26'(7) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_CellInformation-Item'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_26'(ErrV) ->
  fun(C,V,_) -> exit({{component,C},{value,V},{unique_name_and_value,id, ErrV}}) end.





%%================================
%%  internal_object_set_argument_65
%%================================
'getenc_internal_object_set_argument_65'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_65'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_25
%%================================
'getenc_internal_object_set_argument_25'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_25'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_64
%%================================
'getenc_internal_object_set_argument_64'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_64'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_24
%%================================
'getenc_internal_object_set_argument_24'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_24'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_63
%%================================
'getenc_internal_object_set_argument_63'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_63'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_23
%%================================
'getenc_internal_object_set_argument_23'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_23'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_62
%%================================
'getenc_internal_object_set_argument_62'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_62'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_22
%%================================
'getenc_internal_object_set_argument_22'(25) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCells'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(26) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_ServedCellsToModify'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(27) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_Old-ECGIs'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(34) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(35) ->
   fun(Type, Val, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'enc_GUGroupIDList'(Val)
      end
   end;
'getenc_internal_object_set_argument_22'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_22'(25) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCells'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(26) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_ServedCellsToModify'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(27) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_Old-ECGIs'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(34) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(35) ->
   fun(Type, Bytes, _RestPrimFieldName) ->
      case Type of
         'Value' ->
            'dec_GUGroupIDList'(Bytes)
      end
   end;
'getdec_internal_object_set_argument_22'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_61
%%================================
'getenc_internal_object_set_argument_61'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_61'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_21
%%================================
'getenc_internal_object_set_argument_21'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_21'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_60
%%================================
'getenc_internal_object_set_argument_60'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_60'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.





%%================================
%%  internal_object_set_argument_20
%%================================
'getenc_internal_object_set_argument_20'(_) ->
  fun(_, Val, _RestPrimFieldName) ->
    case Val of
      {asn1_OPENTYPE,Bin} when is_binary(Bin) ->
        {Bin,byte_size(Bin)}
    end
  end.

'getdec_internal_object_set_argument_20'(_) ->
  fun(_,Bytes, _RestPrimFieldName) ->
    case Bytes of
      Bin when is_binary(Bin) -> 
        {asn1_OPENTYPE,Bin};
      _ ->
        {asn1_OPENTYPE,ber_encode(Bytes)}
    end
  end.



%%%
%%% Run-time functions.
%%%

'dialyzer-suppressions'(Arg) ->
    ok.

ber_decode_nif(B) ->
    asn1rt_nif:decode_ber_tlv(B).

ber_encode([Tlv]) ->
    ber_encode(Tlv);
ber_encode(Tlv) when is_binary(Tlv) ->
    Tlv;
ber_encode(Tlv) ->
    asn1rt_nif:encode_ber_tlv(Tlv).

collect_parts(TlvList) ->
    collect_parts(TlvList, []).

collect_parts([{_,L}|Rest], Acc) when is_list(L) ->
    collect_parts(Rest, [collect_parts(L)|Acc]);
collect_parts([{3,<<Unused,Bits/binary>>}|Rest], _Acc) ->
    collect_parts_bit(Rest, [Bits], Unused);
collect_parts([{_T,V}|Rest], Acc) ->
    collect_parts(Rest, [V|Acc]);
collect_parts([], Acc) ->
    list_to_binary(lists:reverse(Acc)).

collect_parts_bit([{3,<<Unused,Bits/binary>>}|Rest], Acc, Uacc) ->
    collect_parts_bit(Rest, [Bits|Acc], Unused + Uacc);
collect_parts_bit([], Acc, Uacc) ->
    list_to_binary([Uacc|lists:reverse(Acc)]).

dec_subidentifiers(<<>>, _Av, Al) ->
    lists:reverse(Al);
dec_subidentifiers(<<1:1,H:7,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, Av bsl 7 + H, Al);
dec_subidentifiers(<<H,T/binary>>, Av, Al) ->
    dec_subidentifiers(T, 0, [Av bsl 7 + H|Al]).

decode_integer(Tlv, TagIn) ->
    Bin = match_tags(Tlv, TagIn),
    Len = byte_size(Bin),
    <<Int:Len/signed-unit:8>> = Bin,
    Int.

decode_native_bit_string(Buffer, Tags) ->
    case match_and_collect(Buffer, Tags) of
        <<0>> ->
            <<>>;
        <<Unused,Bits/binary>> ->
            Size = bit_size(Bits) - Unused,
            <<Val:Size/bitstring,_:Unused/bitstring>> = Bits,
            Val
    end.

decode_null(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    case Val of
        <<>> ->
            'NULL';
        _ ->
            exit({error,{asn1,{decode_null,Val}}})
    end.

decode_object_identifier(Tlv, Tags) ->
    Val = match_tags(Tlv, Tags),
    [AddedObjVal|ObjVals] = dec_subidentifiers(Val, 0, []),
    {Val1,Val2} =
        if
            AddedObjVal < 40 ->
                {0,AddedObjVal};
            AddedObjVal < 80 ->
                {1,AddedObjVal - 40};
            true ->
                {2,AddedObjVal - 80}
        end,
    list_to_tuple([Val1,Val2|ObjVals]).

decode_octet_string(Tlv, TagsIn) ->
    Bin = match_and_collect(Tlv, TagsIn),
    binary:copy(Bin).

decode_open_type(Tlv, TagIn) ->
    case match_tags(Tlv, TagIn) of
        Bin when is_binary(Bin) ->
            {InnerTlv,_} = ber_decode_nif(Bin),
            InnerTlv;
        TlvBytes ->
            TlvBytes
    end.

decode_open_type_as_binary(Tlv, TagIn) ->
    ber_encode(match_tags(Tlv, TagIn)).

e_object_identifier({'OBJECT IDENTIFIER',V}) ->
    e_object_identifier(V);
e_object_identifier(V) when is_tuple(V) ->
    e_object_identifier(tuple_to_list(V));
e_object_identifier([E1,E2|Tail]) ->
    Head = 40 * E1 + E2,
    {H,Lh} = mk_object_val(Head),
    {R,Lr} = lists:mapfoldl(fun enc_obj_id_tail/2, 0, Tail),
    {[H|R],Lh + Lr}.

enc_obj_id_tail(H, Len) ->
    {B,L} = mk_object_val(H),
    {B,Len + L}.

encode_integer(Val) ->
    Bytes =
        if
            Val >= 0 ->
                encode_integer_pos(Val, []);
            true ->
                encode_integer_neg(Val, [])
        end,
    {Bytes,length(Bytes)}.

encode_integer(Val, NamedNumberList, Tag) when is_atom(Val) ->
    case lists:keyfind(Val, 1, NamedNumberList) of
        {_,NewVal} ->
            encode_tags(Tag, encode_integer(NewVal));
        _ ->
            exit({error,{asn1,{encode_integer_namednumber,Val}}})
    end;
encode_integer(Val, _NamedNumberList, Tag) ->
    encode_tags(Tag, encode_integer(Val)).

encode_integer(Val, Tag) when is_integer(Val) ->
    encode_tags(Tag, encode_integer(Val));
encode_integer(Val, _Tag) ->
    exit({error,{asn1,{encode_integer,Val}}}).

encode_integer_neg(- 1, [B1|_T] = L) when B1 > 127 ->
    L;
encode_integer_neg(N, Acc) ->
    encode_integer_neg(N bsr 8, [N band 255|Acc]).

encode_integer_pos(0, [B|_Acc] = L) when B < 128 ->
    L;
encode_integer_pos(N, Acc) ->
    encode_integer_pos(N bsr 8, [N band 255|Acc]).

encode_length(L) when L =< 127 ->
    {[L],1};
encode_length(L) ->
    Oct = minimum_octets(L),
    Len = length(Oct),
    if
        Len =< 126 ->
            {[128 bor Len|Oct],Len + 1};
        true ->
            exit({error,{asn1,too_long_length_oct,Len}})
    end.

encode_null(_Val, TagIn) ->
    encode_tags(TagIn, [], 0).

encode_object_identifier(Val, TagIn) ->
    encode_tags(TagIn, e_object_identifier(Val)).

encode_open_type(Val, T) when is_list(Val) ->
    encode_open_type(list_to_binary(Val), T);
encode_open_type(Val, Tag) ->
    encode_tags(Tag, Val, byte_size(Val)).

encode_restricted_string(OctetList, TagIn) when is_binary(OctetList) ->
    encode_tags(TagIn, OctetList, byte_size(OctetList));
encode_restricted_string(OctetList, TagIn) when is_list(OctetList) ->
    encode_tags(TagIn, OctetList, length(OctetList)).

encode_tags(TagIn, {BytesSoFar,LenSoFar}) ->
    encode_tags(TagIn, BytesSoFar, LenSoFar).

encode_tags([Tag|Trest], BytesSoFar, LenSoFar) ->
    {Bytes2,L2} = encode_length(LenSoFar),
    encode_tags(Trest,
                [Tag,Bytes2|BytesSoFar],
                LenSoFar + byte_size(Tag) + L2);
encode_tags([], BytesSoFar, LenSoFar) ->
    {BytesSoFar,LenSoFar}.

encode_unnamed_bit_string(Bits, TagIn) ->
    Unused = (8 - bit_size(Bits) band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    encode_tags(TagIn, Bin, byte_size(Bin)).

encode_unnamed_bit_string(MaxBits, Bits, TagIn) ->
    NumBits = bit_size(Bits),
    Unused = (8 - NumBits band 7) band 7,
    Bin = <<Unused,Bits/bitstring,0:Unused>>,
    if
        NumBits > MaxBits ->
            exit({error,
                  {asn1,
                   {bitstring_length,{{was,NumBits},{maximum,MaxBits}}}}});
        true ->
            encode_tags(TagIn, Bin, byte_size(Bin))
    end.

match_and_collect(Tlv, TagsIn) ->
    Val = match_tags(Tlv, TagsIn),
    case Val of
        [_|_] = PartList ->
            collect_parts(PartList);
        Bin when is_binary(Bin) ->
            Bin
    end.

match_tags({T,V}, [T]) ->
    V;
match_tags({T,V}, [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,V}], [T|Tt]) ->
    match_tags(V, Tt);
match_tags([{T,_V}|_] = Vlist, [T]) ->
    Vlist;
match_tags(Tlv, []) ->
    Tlv;
match_tags({Tag,_V} = Tlv, [T|_Tt]) ->
    exit({error,{asn1,{wrong_tag,{{expected,T},{got,Tag,Tlv}}}}}).

minimum_octets(0, Acc) ->
    Acc;
minimum_octets(Val, Acc) ->
    minimum_octets(Val bsr 8, [Val band 255|Acc]).

minimum_octets(Val) ->
    minimum_octets(Val, []).

mk_object_val(0, Ack, Len) ->
    {Ack,Len};
mk_object_val(Val, Ack, Len) ->
    mk_object_val(Val bsr 7, [Val band 127 bor 128|Ack], Len + 1).

mk_object_val(Val) when Val =< 127 ->
    {[255 band Val],1};
mk_object_val(Val) ->
    mk_object_val(Val bsr 7, [Val band 127], 1).

number2name(Int, NamedNumberList) ->
    case lists:keyfind(Int, 2, NamedNumberList) of
        {NamedVal,_} ->
            NamedVal;
        _ ->
            Int
    end.
